(()=>{"use strict";var e={"./assets/js/AppPage.vue":
/*!*******************************!*\
  !*** ./assets/js/AppPage.vue ***!
  \*******************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var o=n(/*! ./AppPage.vue?vue&type=template&id=05edb0d8 */"./assets/js/AppPage.vue?vue&type=template&id=05edb0d8"),s=n(/*! ./AppPage.vue?vue&type=script&lang=js */"./assets/js/AppPage.vue?vue&type=script&lang=js");const r=(0,n(/*! ../../node_modules/vue-loader/dist/exportHelper.js */"./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","assets/js/AppPage.vue"]])},"./assets/js/AppPage.vue?vue&type=script&lang=js":
/*!*******************************************************!*\
  !*** ./assets/js/AppPage.vue?vue&type=script&lang=js ***!
  \*******************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>o.default});var o=n(/*! -!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./AppPage.vue?vue&type=script&lang=js */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/AppPage.vue?vue&type=script&lang=js")},"./assets/js/AppPage.vue?vue&type=template&id=05edb0d8":
/*!*************************************************************!*\
  !*** ./assets/js/AppPage.vue?vue&type=template&id=05edb0d8 ***!
  \*************************************************************/(e,t,n)=>{n.r(t),n.d(t,{render:()=>o.render});var o=n(/*! -!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./AppPage.vue?vue&type=template&id=05edb0d8 */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/AppPage.vue?vue&type=template&id=05edb0d8")},"./assets/js/components/Footer.vue":
/*!*****************************************!*\
  !*** ./assets/js/components/Footer.vue ***!
  \*****************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var o=n(/*! ./Footer.vue?vue&type=template&id=e4181508&scoped=true */"./assets/js/components/Footer.vue?vue&type=template&id=e4181508&scoped=true"),s=n(/*! ./Footer.vue?vue&type=script&lang=js */"./assets/js/components/Footer.vue?vue&type=script&lang=js");n(/*! ./Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true */"./assets/js/components/Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true");const r=(0,n(/*! ../../../node_modules/vue-loader/dist/exportHelper.js */"./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-e4181508"],["__file","assets/js/components/Footer.vue"]])},"./assets/js/components/Footer.vue?vue&type=script&lang=js":
/*!*****************************************************************!*\
  !*** ./assets/js/components/Footer.vue?vue&type=script&lang=js ***!
  \*****************************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>o.default});var o=n(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./Footer.vue?vue&type=script&lang=js */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=script&lang=js")},"./assets/js/components/Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true":
/*!**************************************************************************************************!*\
  !*** ./assets/js/components/Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true ***!
  \**************************************************************************************************/(e,t,n)=>{n.r(t);n(/*! -!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true")},"./assets/js/components/Footer.vue?vue&type=template&id=e4181508&scoped=true":
/*!***********************************************************************************!*\
  !*** ./assets/js/components/Footer.vue?vue&type=template&id=e4181508&scoped=true ***!
  \***********************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{render:()=>o.render});var o=n(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./Footer.vue?vue&type=template&id=e4181508&scoped=true */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=template&id=e4181508&scoped=true")},"./assets/js/components/NavigationMenu.vue":
/*!*************************************************!*\
  !*** ./assets/js/components/NavigationMenu.vue ***!
  \*************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var o=n(/*! ./NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true */"./assets/js/components/NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true"),s=n(/*! ./NavigationMenu.vue?vue&type=script&lang=js */"./assets/js/components/NavigationMenu.vue?vue&type=script&lang=js");n(/*! ./NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true */"./assets/js/components/NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true");const r=(0,n(/*! ../../../node_modules/vue-loader/dist/exportHelper.js */"./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-18a31474"],["__file","assets/js/components/NavigationMenu.vue"]])},"./assets/js/components/NavigationMenu.vue?vue&type=script&lang=js":
/*!*************************************************************************!*\
  !*** ./assets/js/components/NavigationMenu.vue?vue&type=script&lang=js ***!
  \*************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>o.default});var o=n(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./NavigationMenu.vue?vue&type=script&lang=js */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=script&lang=js")},"./assets/js/components/NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true":
/*!**********************************************************************************************************!*\
  !*** ./assets/js/components/NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true ***!
  \**********************************************************************************************************/(e,t,n)=>{n.r(t);n(/*! -!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true")},"./assets/js/components/NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true":
/*!*******************************************************************************************!*\
  !*** ./assets/js/components/NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true ***!
  \*******************************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{render:()=>o.render});var o=n(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true")},"./assets/js/pages/SinglePostGoogleMap.vue":
/*!*************************************************!*\
  !*** ./assets/js/pages/SinglePostGoogleMap.vue ***!
  \*************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var o=n(/*! ./SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true */"./assets/js/pages/SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true"),s=n(/*! ./SinglePostGoogleMap.vue?vue&type=script&lang=js */"./assets/js/pages/SinglePostGoogleMap.vue?vue&type=script&lang=js");n(/*! ./SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true */"./assets/js/pages/SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true");const r=(0,n(/*! ../../../node_modules/vue-loader/dist/exportHelper.js */"./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-6b912c10"],["__file","assets/js/pages/SinglePostGoogleMap.vue"]])},"./assets/js/pages/SinglePostGoogleMap.vue?vue&type=script&lang=js":
/*!*************************************************************************!*\
  !*** ./assets/js/pages/SinglePostGoogleMap.vue?vue&type=script&lang=js ***!
  \*************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>o.default});var o=n(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./SinglePostGoogleMap.vue?vue&type=script&lang=js */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=script&lang=js")},"./assets/js/pages/SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true":
/*!**********************************************************************************************************!*\
  !*** ./assets/js/pages/SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true ***!
  \**********************************************************************************************************/(e,t,n)=>{n.r(t);n(/*! -!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true")},"./assets/js/pages/SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true":
/*!*******************************************************************************************!*\
  !*** ./assets/js/pages/SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true ***!
  \*******************************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{render:()=>o.render});var o=n(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true")},"./assets/scss/main.scss":
/*!*******************************!*\
  !*** ./assets/scss/main.scss ***!
  \*******************************/(e,t,n)=>{n.r(t)},"./node_modules/axios/lib/adapters/adapters.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/adapters/adapters.js ***!
  \*****************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ./http.js */"./node_modules/axios/lib/helpers/null.js"),r=n(/*! ./xhr.js */"./node_modules/axios/lib/adapters/xhr.js"),i=n(/*! ./fetch.js */"./node_modules/axios/lib/adapters/fetch.js"),a=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js");const l={http:s.default,xhr:r.default,fetch:i.default};o.default.forEach(l,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const c=e=>`- ${e}`,u=e=>o.default.isFunction(e)||null===e||!1===e,d={getAdapter:e=>{e=o.default.isArray(e)?e:[e];const{length:t}=e;let n,s;const r={};for(let o=0;o<t;o++){let t;if(n=e[o],s=n,!u(n)&&(s=l[(t=String(n)).toLowerCase()],void 0===s))throw new a.default(`Unknown adapter '${t}'`);if(s)break;r[t||"#"+o]=s}if(!s){const e=Object.entries(r).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(c).join("\n"):" "+c(e[0]):"as no adapter specified";throw new a.default("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return s},adapters:l}},"./node_modules/axios/lib/adapters/fetch.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/adapters/fetch.js ***!
  \**************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>S});var o=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js"),s=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js"),i=n(/*! ../helpers/composeSignals.js */"./node_modules/axios/lib/helpers/composeSignals.js"),a=n(/*! ../helpers/trackStream.js */"./node_modules/axios/lib/helpers/trackStream.js"),l=n(/*! ../core/AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js"),c=n(/*! ../helpers/progressEventReducer.js */"./node_modules/axios/lib/helpers/progressEventReducer.js"),u=n(/*! ../helpers/resolveConfig.js */"./node_modules/axios/lib/helpers/resolveConfig.js"),d=n(/*! ../core/settle.js */"./node_modules/axios/lib/core/settle.js");const p="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,f=p&&"function"==typeof ReadableStream,h=p&&("function"==typeof TextEncoder?(m=new TextEncoder,e=>m.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var m;const g=(e,...t)=>{try{return!!e(...t)}catch(e){return!1}},v=f&&g((()=>{let e=!1;const t=new Request(o.default.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})),y=f&&g((()=>s.default.isReadableStream(new Response("").body))),b={stream:y&&(e=>e.body)};var _;p&&(_=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!b[e]&&(b[e]=s.default.isFunction(_[e])?t=>t[e]():(t,n)=>{throw new r.default(`Response type '${e}' is not supported`,r.default.ERR_NOT_SUPPORT,n)})})));const x=async(e,t)=>{const n=s.default.toFiniteNumber(e.getContentLength());return null==n?(async e=>{if(null==e)return 0;if(s.default.isBlob(e))return e.size;if(s.default.isSpecCompliantForm(e)){const t=new Request(o.default.origin,{method:"POST",body:e});return(await t.arrayBuffer()).byteLength}return s.default.isArrayBufferView(e)||s.default.isArrayBuffer(e)?e.byteLength:(s.default.isURLSearchParams(e)&&(e+=""),s.default.isString(e)?(await h(e)).byteLength:void 0)})(t):n},S=p&&(async e=>{let{url:t,method:n,data:o,signal:p,cancelToken:f,timeout:h,onDownloadProgress:m,onUploadProgress:g,responseType:_,headers:S,withCredentials:w="same-origin",fetchOptions:k}=(0,u.default)(e);_=_?(_+"").toLowerCase():"text";let C,E=(0,i.default)([p,f&&f.toAbortSignal()],h);const j=E&&E.unsubscribe&&(()=>{E.unsubscribe()});let T;try{if(g&&v&&"get"!==n&&"head"!==n&&0!==(T=await x(S,o))){let e,n=new Request(t,{method:"POST",body:o,duplex:"half"});if(s.default.isFormData(o)&&(e=n.headers.get("content-type"))&&S.setContentType(e),n.body){const[e,t]=(0,c.progressEventDecorator)(T,(0,c.progressEventReducer)((0,c.asyncDecorator)(g)));o=(0,a.trackStream)(n.body,65536,e,t)}}s.default.isString(w)||(w=w?"include":"omit");const r="credentials"in Request.prototype;C=new Request(t,{...k,signal:E,method:n.toUpperCase(),headers:S.normalize().toJSON(),body:o,duplex:"half",credentials:r?w:void 0});let i=await fetch(C);const u=y&&("stream"===_||"response"===_);if(y&&(m||u&&j)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=i[t]}));const t=s.default.toFiniteNumber(i.headers.get("content-length")),[n,o]=m&&(0,c.progressEventDecorator)(t,(0,c.progressEventReducer)((0,c.asyncDecorator)(m),!0))||[];i=new Response((0,a.trackStream)(i.body,65536,n,(()=>{o&&o(),j&&j()})),e)}_=_||"text";let p=await b[s.default.findKey(b,_)||"text"](i,e);return!u&&j&&j(),await new Promise(((t,n)=>{(0,d.default)(t,n,{data:p,headers:l.default.from(i.headers),status:i.status,statusText:i.statusText,config:e,request:C})}))}catch(t){if(j&&j(),t&&"TypeError"===t.name&&/fetch/i.test(t.message))throw Object.assign(new r.default("Network Error",r.default.ERR_NETWORK,e,C),{cause:t.cause||t});throw r.default.from(t,t&&t.code,e,C)}})},"./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>f});var o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ./../core/settle.js */"./node_modules/axios/lib/core/settle.js"),r=n(/*! ../defaults/transitional.js */"./node_modules/axios/lib/defaults/transitional.js"),i=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js"),a=n(/*! ../cancel/CanceledError.js */"./node_modules/axios/lib/cancel/CanceledError.js"),l=n(/*! ../helpers/parseProtocol.js */"./node_modules/axios/lib/helpers/parseProtocol.js"),c=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js"),u=n(/*! ../core/AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js"),d=n(/*! ../helpers/progressEventReducer.js */"./node_modules/axios/lib/helpers/progressEventReducer.js"),p=n(/*! ../helpers/resolveConfig.js */"./node_modules/axios/lib/helpers/resolveConfig.js");const f="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){const f=(0,p.default)(e);let h=f.data;const m=u.default.from(f.headers).normalize();let g,v,y,b,_,{responseType:x,onUploadProgress:S,onDownloadProgress:w}=f;function k(){b&&b(),_&&_(),f.cancelToken&&f.cancelToken.unsubscribe(g),f.signal&&f.signal.removeEventListener("abort",g)}let C=new XMLHttpRequest;function E(){if(!C)return;const o=u.default.from("getAllResponseHeaders"in C&&C.getAllResponseHeaders()),r={data:x&&"text"!==x&&"json"!==x?C.response:C.responseText,status:C.status,statusText:C.statusText,headers:o,config:e,request:C};(0,s.default)((function(e){t(e),k()}),(function(e){n(e),k()}),r),C=null}C.open(f.method.toUpperCase(),f.url,!0),C.timeout=f.timeout,"onloadend"in C?C.onloadend=E:C.onreadystatechange=function(){C&&4===C.readyState&&(0!==C.status||C.responseURL&&0===C.responseURL.indexOf("file:"))&&setTimeout(E)},C.onabort=function(){C&&(n(new i.default("Request aborted",i.default.ECONNABORTED,e,C)),C=null)},C.onerror=function(){n(new i.default("Network Error",i.default.ERR_NETWORK,e,C)),C=null},C.ontimeout=function(){let t=f.timeout?"timeout of "+f.timeout+"ms exceeded":"timeout exceeded";const o=f.transitional||r.default;f.timeoutErrorMessage&&(t=f.timeoutErrorMessage),n(new i.default(t,o.clarifyTimeoutError?i.default.ETIMEDOUT:i.default.ECONNABORTED,e,C)),C=null},void 0===h&&m.setContentType(null),"setRequestHeader"in C&&o.default.forEach(m.toJSON(),(function(e,t){C.setRequestHeader(t,e)})),o.default.isUndefined(f.withCredentials)||(C.withCredentials=!!f.withCredentials),x&&"json"!==x&&(C.responseType=f.responseType),w&&([y,_]=(0,d.progressEventReducer)(w,!0),C.addEventListener("progress",y)),S&&C.upload&&([v,b]=(0,d.progressEventReducer)(S),C.upload.addEventListener("progress",v),C.upload.addEventListener("loadend",b)),(f.cancelToken||f.signal)&&(g=t=>{C&&(n(!t||t.type?new a.default(null,e,C):t),C.abort(),C=null)},f.cancelToken&&f.cancelToken.subscribe(g),f.signal&&(f.signal.aborted?g():f.signal.addEventListener("abort",g)));const j=(0,l.default)(f.url);j&&-1===c.default.protocols.indexOf(j)?n(new i.default("Unsupported protocol "+j+":",i.default.ERR_BAD_REQUEST,e)):C.send(h||null)}))}},"./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>x});var o=n(/*! ./utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ./helpers/bind.js */"./node_modules/axios/lib/helpers/bind.js"),r=n(/*! ./core/Axios.js */"./node_modules/axios/lib/core/Axios.js"),i=n(/*! ./core/mergeConfig.js */"./node_modules/axios/lib/core/mergeConfig.js"),a=n(/*! ./defaults/index.js */"./node_modules/axios/lib/defaults/index.js"),l=n(/*! ./helpers/formDataToJSON.js */"./node_modules/axios/lib/helpers/formDataToJSON.js"),c=n(/*! ./cancel/CanceledError.js */"./node_modules/axios/lib/cancel/CanceledError.js"),u=n(/*! ./cancel/CancelToken.js */"./node_modules/axios/lib/cancel/CancelToken.js"),d=n(/*! ./cancel/isCancel.js */"./node_modules/axios/lib/cancel/isCancel.js"),p=n(/*! ./env/data.js */"./node_modules/axios/lib/env/data.js"),f=n(/*! ./helpers/toFormData.js */"./node_modules/axios/lib/helpers/toFormData.js"),h=n(/*! ./core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js"),m=n(/*! ./helpers/spread.js */"./node_modules/axios/lib/helpers/spread.js"),g=n(/*! ./helpers/isAxiosError.js */"./node_modules/axios/lib/helpers/isAxiosError.js"),v=n(/*! ./core/AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js"),y=n(/*! ./adapters/adapters.js */"./node_modules/axios/lib/adapters/adapters.js"),b=n(/*! ./helpers/HttpStatusCode.js */"./node_modules/axios/lib/helpers/HttpStatusCode.js");const _=function e(t){const n=new r.default(t),a=(0,s.default)(r.default.prototype.request,n);return o.default.extend(a,r.default.prototype,n,{allOwnKeys:!0}),o.default.extend(a,n,null,{allOwnKeys:!0}),a.create=function(n){return e((0,i.default)(t,n))},a}(a.default);_.Axios=r.default,_.CanceledError=c.default,_.CancelToken=u.default,_.isCancel=d.default,_.VERSION=p.VERSION,_.toFormData=f.default,_.AxiosError=h.default,_.Cancel=_.CanceledError,_.all=function(e){return Promise.all(e)},_.spread=m.default,_.isAxiosError=g.default,_.mergeConfig=i.default,_.AxiosHeaders=v.default,_.formToJSON=e=>(0,l.default)(o.default.isHTMLForm(e)?new FormData(e):e),_.getAdapter=y.default.getAdapter,_.HttpStatusCode=b.default,_.default=_;const x=_},"./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var o=n(/*! ./CanceledError.js */"./node_modules/axios/lib/cancel/CanceledError.js");class s{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const o=new Promise((e=>{n.subscribe(e),t=e})).then(e);return o.cancel=function(){n.unsubscribe(t)},o},e((function(e,s,r){n.reason||(n.reason=new o.default(e,s,r),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}toAbortSignal(){const e=new AbortController,t=t=>{e.abort(t)};return this.subscribe(t),e.signal.unsubscribe=()=>this.unsubscribe(t),e.signal}static source(){let e;return{token:new s((function(t){e=t})),cancel:e}}}const r=s},"./node_modules/axios/lib/cancel/CanceledError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CanceledError.js ***!
  \********************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var o=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js");function s(e,t,n){o.default.call(this,null==e?"canceled":e,o.default.ERR_CANCELED,t,n),this.name="CanceledError"}n(/*! ../utils.js */"./node_modules/axios/lib/utils.js").default.inherits(s,o.default,{__CANCEL__:!0});const r=s},"./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/(e,t,n)=>{function o(e){return!(!e||!e.__CANCEL__)}n.r(t),n.d(t,{default:()=>o})},"./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>f});var o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ../helpers/buildURL.js */"./node_modules/axios/lib/helpers/buildURL.js"),r=n(/*! ./InterceptorManager.js */"./node_modules/axios/lib/core/InterceptorManager.js"),i=n(/*! ./dispatchRequest.js */"./node_modules/axios/lib/core/dispatchRequest.js"),a=n(/*! ./mergeConfig.js */"./node_modules/axios/lib/core/mergeConfig.js"),l=n(/*! ./buildFullPath.js */"./node_modules/axios/lib/core/buildFullPath.js"),c=n(/*! ../helpers/validator.js */"./node_modules/axios/lib/helpers/validator.js"),u=n(/*! ./AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js");const d=c.default.validators;class p{constructor(e){this.defaults=e,this.interceptors={request:new r.default,response:new r.default}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t={};Error.captureStackTrace?Error.captureStackTrace(t):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=(0,a.default)(this.defaults,t);const{transitional:n,paramsSerializer:s,headers:r}=t;void 0!==n&&c.default.assertOptions(n,{silentJSONParsing:d.transitional(d.boolean),forcedJSONParsing:d.transitional(d.boolean),clarifyTimeoutError:d.transitional(d.boolean)},!1),null!=s&&(o.default.isFunction(s)?t.paramsSerializer={serialize:s}:c.default.assertOptions(s,{encode:d.function,serialize:d.function},!0)),void 0!==t.allowAbsoluteUrls||(void 0!==this.defaults.allowAbsoluteUrls?t.allowAbsoluteUrls=this.defaults.allowAbsoluteUrls:t.allowAbsoluteUrls=!0),c.default.assertOptions(t,{baseUrl:d.spelling("baseURL"),withXsrfToken:d.spelling("withXSRFToken")},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase();let l=r&&o.default.merge(r.common,r[t.method]);r&&o.default.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete r[e]})),t.headers=u.default.concat(l,r);const p=[];let f=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(f=f&&e.synchronous,p.unshift(e.fulfilled,e.rejected))}));const h=[];let m;this.interceptors.response.forEach((function(e){h.push(e.fulfilled,e.rejected)}));let g,v=0;if(!f){const e=[i.default.bind(this),void 0];for(e.unshift.apply(e,p),e.push.apply(e,h),g=e.length,m=Promise.resolve(t);v<g;)m=m.then(e[v++],e[v++]);return m}g=p.length;let y=t;for(v=0;v<g;){const e=p[v++],t=p[v++];try{y=e(y)}catch(e){t.call(this,e);break}}try{m=i.default.call(this,y)}catch(e){return Promise.reject(e)}for(v=0,g=h.length;v<g;)m=m.then(h[v++],h[v++]);return m}getUri(e){e=(0,a.default)(this.defaults,e);const t=(0,l.default)(e.baseURL,e.url,e.allowAbsoluteUrls);return(0,s.default)(t,e.params,e.paramsSerializer)}}o.default.forEach(["delete","get","head","options"],(function(e){p.prototype[e]=function(t,n){return this.request((0,a.default)(n||{},{method:e,url:t,data:(n||{}).data}))}})),o.default.forEach(["post","put","patch"],(function(e){function t(t){return function(n,o,s){return this.request((0,a.default)(s||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:o}))}}p.prototype[e]=t(),p.prototype[e+"Form"]=t(!0)}));const f=p},"./node_modules/axios/lib/core/AxiosError.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosError.js ***!
  \***************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js");function s(e,t,n,o,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),o&&(this.request=o),s&&(this.response=s,this.status=s.status?s.status:null)}o.default.inherits(s,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:o.default.toJSONObject(this.config),code:this.code,status:this.status}}});const r=s.prototype,i={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{i[e]={value:e}})),Object.defineProperties(s,i),Object.defineProperty(r,"isAxiosError",{value:!0}),s.from=(e,t,n,i,a,l)=>{const c=Object.create(r);return o.default.toFlatObject(e,c,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),s.call(c,e.message,t,n,i,a),c.cause=e,c.name=e.name,l&&Object.assign(c,l),c};const a=s},"./node_modules/axios/lib/core/AxiosHeaders.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosHeaders.js ***!
  \*****************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>u});var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ../helpers/parseHeaders.js */"./node_modules/axios/lib/helpers/parseHeaders.js");const r=Symbol("internals");function i(e){return e&&String(e).trim().toLowerCase()}function a(e){return!1===e||null==e?e:o.default.isArray(e)?e.map(a):String(e)}function l(e,t,n,s,r){return o.default.isFunction(s)?s.call(this,t,n):(r&&(t=n),o.default.isString(t)?o.default.isString(s)?-1!==t.indexOf(s):o.default.isRegExp(s)?s.test(t):void 0:void 0)}class c{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function l(e,t,n){const s=i(t);if(!s)throw new Error("header name must be a non-empty string");const l=o.default.findKey(r,s);(!l||void 0===r[l]||!0===n||void 0===n&&!1!==r[l])&&(r[l||t]=a(e))}const c=(e,t)=>o.default.forEach(e,((e,n)=>l(e,n,t)));if(o.default.isPlainObject(e)||e instanceof this.constructor)c(e,t);else if(o.default.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))c((0,s.default)(e),t);else if(o.default.isHeaders(e))for(const[t,o]of e.entries())l(o,t,n);else null!=e&&l(t,e,n);return this}get(e,t){if(e=i(e)){const n=o.default.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let o;for(;o=n.exec(e);)t[o[1]]=o[2];return t}(e);if(o.default.isFunction(t))return t.call(this,e,n);if(o.default.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=i(e)){const n=o.default.findKey(this,e);return!(!n||void 0===this[n]||t&&!l(0,this[n],n,t))}return!1}delete(e,t){const n=this;let s=!1;function r(e){if(e=i(e)){const r=o.default.findKey(n,e);!r||t&&!l(0,n[r],r,t)||(delete n[r],s=!0)}}return o.default.isArray(e)?e.forEach(r):r(e),s}clear(e){const t=Object.keys(this);let n=t.length,o=!1;for(;n--;){const s=t[n];e&&!l(0,this[s],s,e,!0)||(delete this[s],o=!0)}return o}normalize(e){const t=this,n={};return o.default.forEach(this,((s,r)=>{const i=o.default.findKey(n,r);if(i)return t[i]=a(s),void delete t[r];const l=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(r):String(r).trim();l!==r&&delete t[r],t[l]=a(s),n[l]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return o.default.forEach(this,((n,s)=>{null!=n&&!1!==n&&(t[s]=e&&o.default.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[r]=this[r]={accessors:{}}).accessors,n=this.prototype;function s(e){const s=i(e);t[s]||(!function(e,t){const n=o.default.toCamelCase(" "+t);["get","set","has"].forEach((o=>{Object.defineProperty(e,o+n,{value:function(e,n,s){return this[o].call(this,t,e,n,s)},configurable:!0})}))}(n,e),t[s]=!0)}return o.default.isArray(e)?e.forEach(s):s(e),this}}c.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),o.default.reduceDescriptors(c.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),o.default.freezeMethods(c);const u=c},"./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js");const s=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){o.default.forEach(this.handlers,(function(t){null!==t&&e(t)}))}}},"./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var o=n(/*! ../helpers/isAbsoluteURL.js */"./node_modules/axios/lib/helpers/isAbsoluteURL.js"),s=n(/*! ../helpers/combineURLs.js */"./node_modules/axios/lib/helpers/combineURLs.js");function r(e,t,n){let r=!(0,o.default)(t);return e&&(r||0==n)?(0,s.default)(e,t):t}},"./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>u});var o=n(/*! ./transformData.js */"./node_modules/axios/lib/core/transformData.js"),s=n(/*! ../cancel/isCancel.js */"./node_modules/axios/lib/cancel/isCancel.js"),r=n(/*! ../defaults/index.js */"./node_modules/axios/lib/defaults/index.js"),i=n(/*! ../cancel/CanceledError.js */"./node_modules/axios/lib/cancel/CanceledError.js"),a=n(/*! ../core/AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js"),l=n(/*! ../adapters/adapters.js */"./node_modules/axios/lib/adapters/adapters.js");function c(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new i.default(null,e)}function u(e){c(e),e.headers=a.default.from(e.headers),e.data=o.default.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1);return l.default.getAdapter(e.adapter||r.default.adapter)(e).then((function(t){return c(e),t.data=o.default.call(e,e.transformResponse,t),t.headers=a.default.from(t.headers),t}),(function(t){return(0,s.default)(t)||(c(e),t&&t.response&&(t.response.data=o.default.call(e,e.transformResponse,t.response),t.response.headers=a.default.from(t.response.headers))),Promise.reject(t)}))}},"./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ./AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js");const r=e=>e instanceof s.default?{...e}:e;function i(e,t){t=t||{};const n={};function s(e,t,n,s){return o.default.isPlainObject(e)&&o.default.isPlainObject(t)?o.default.merge.call({caseless:s},e,t):o.default.isPlainObject(t)?o.default.merge({},t):o.default.isArray(t)?t.slice():t}function i(e,t,n,r){return o.default.isUndefined(t)?o.default.isUndefined(e)?void 0:s(void 0,e,0,r):s(e,t,0,r)}function a(e,t){if(!o.default.isUndefined(t))return s(void 0,t)}function l(e,t){return o.default.isUndefined(t)?o.default.isUndefined(e)?void 0:s(void 0,e):s(void 0,t)}function c(n,o,r){return r in t?s(n,o):r in e?s(void 0,n):void 0}const u={url:a,method:a,data:a,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,withXSRFToken:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,beforeRedirect:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:c,headers:(e,t,n)=>i(r(e),r(t),0,!0)};return o.default.forEach(Object.keys(Object.assign({},e,t)),(function(s){const r=u[s]||i,a=r(e[s],t[s],s);o.default.isUndefined(a)&&r!==c||(n[s]=a)})),n}},"./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var o=n(/*! ./AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js");function s(e,t,n){const s=n.config.validateStatus;n.status&&s&&!s(n.status)?t(new o.default("Request failed with status code "+n.status,[o.default.ERR_BAD_REQUEST,o.default.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}},"./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ../defaults/index.js */"./node_modules/axios/lib/defaults/index.js"),r=n(/*! ../core/AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js");function i(e,t){const n=this||s.default,i=t||n,a=r.default.from(i.headers);let l=i.data;return o.default.forEach(e,(function(e){l=e.call(n,l,a.normalize(),t?t.status:void 0)})),a.normalize(),l}},"./node_modules/axios/lib/defaults/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/defaults/index.js ***!
  \**************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js"),r=n(/*! ./transitional.js */"./node_modules/axios/lib/defaults/transitional.js"),i=n(/*! ../helpers/toFormData.js */"./node_modules/axios/lib/helpers/toFormData.js"),a=n(/*! ../helpers/toURLEncodedForm.js */"./node_modules/axios/lib/helpers/toURLEncodedForm.js"),l=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js"),c=n(/*! ../helpers/formDataToJSON.js */"./node_modules/axios/lib/helpers/formDataToJSON.js");const u={transitional:r.default,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",s=n.indexOf("application/json")>-1,r=o.default.isObject(e);r&&o.default.isHTMLForm(e)&&(e=new FormData(e));if(o.default.isFormData(e))return s?JSON.stringify((0,c.default)(e)):e;if(o.default.isArrayBuffer(e)||o.default.isBuffer(e)||o.default.isStream(e)||o.default.isFile(e)||o.default.isBlob(e)||o.default.isReadableStream(e))return e;if(o.default.isArrayBufferView(e))return e.buffer;if(o.default.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let l;if(r){if(n.indexOf("application/x-www-form-urlencoded")>-1)return(0,a.default)(e,this.formSerializer).toString();if((l=o.default.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return(0,i.default)(l?{"files[]":e}:e,t&&new t,this.formSerializer)}}return r||s?(t.setContentType("application/json",!1),function(e,t,n){if(o.default.isString(e))try{return(t||JSON.parse)(e),o.default.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(n||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||u.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(o.default.isResponse(e)||o.default.isReadableStream(e))return e;if(e&&o.default.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw s.default.from(e,s.default.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:l.default.classes.FormData,Blob:l.default.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};o.default.forEach(["delete","get","head","post","put","patch"],(e=>{u.headers[e]={}}));const d=u},"./node_modules/axios/lib/defaults/transitional.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});const o={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},"./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/(e,t,n)=>{n.r(t),n.d(t,{VERSION:()=>o});const o="1.8.4"},"./node_modules/axios/lib/helpers/AxiosURLSearchParams.js":
/*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js ***!
  \****************************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var o=n(/*! ./toFormData.js */"./node_modules/axios/lib/helpers/toFormData.js");function s(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function r(e,t){this._pairs=[],e&&(0,o.default)(e,this,t)}const i=r.prototype;i.append=function(e,t){this._pairs.push([e,t])},i.toString=function(e){const t=e?function(t){return e.call(this,t,s)}:s;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const a=r},"./node_modules/axios/lib/helpers/HttpStatusCode.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/HttpStatusCode.js ***!
  \**********************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});const o={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(o).forEach((([e,t])=>{o[t]=e}));const s=o},"./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/(e,t,n)=>{function o(e,t){return function(){return e.apply(t,arguments)}}n.r(t),n.d(t,{default:()=>o})},"./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ../helpers/AxiosURLSearchParams.js */"./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");function r(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function i(e,t,n){if(!t)return e;const i=n&&n.encode||r;o.default.isFunction(n)&&(n={serialize:n});const a=n&&n.serialize;let l;if(l=a?a(t,n):o.default.isURLSearchParams(t)?t.toString():new s.default(t,n).toString(i),l){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+l}return e}},"./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/(e,t,n)=>{function o(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}n.r(t),n.d(t,{default:()=>o})},"./node_modules/axios/lib/helpers/composeSignals.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/composeSignals.js ***!
  \**********************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var o=n(/*! ../cancel/CanceledError.js */"./node_modules/axios/lib/cancel/CanceledError.js"),s=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js"),r=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js");const i=(e,t)=>{const{length:n}=e=e?e.filter(Boolean):[];if(t||n){let n,i=new AbortController;const a=function(e){if(!n){n=!0,c();const t=e instanceof Error?e:this.reason;i.abort(t instanceof s.default?t:new o.default(t instanceof Error?t.message:t))}};let l=t&&setTimeout((()=>{l=null,a(new s.default(`timeout ${t} of ms exceeded`,s.default.ETIMEDOUT))}),t);const c=()=>{e&&(l&&clearTimeout(l),l=null,e.forEach((e=>{e.unsubscribe?e.unsubscribe(a):e.removeEventListener("abort",a)})),e=null)};e.forEach((e=>e.addEventListener("abort",a)));const{signal:u}=i;return u.unsubscribe=()=>r.default.asap(c),u}}},"./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js");const s=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js").default.hasStandardBrowserEnv?{write(e,t,n,s,r,i){const a=[e+"="+encodeURIComponent(t)];o.default.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),o.default.isString(s)&&a.push("path="+s),o.default.isString(r)&&a.push("domain="+r),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}}},"./node_modules/axios/lib/helpers/formDataToJSON.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/formDataToJSON.js ***!
  \**********************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js");const s=function(e){function t(e,n,s,r){let i=e[r++];if("__proto__"===i)return!0;const a=Number.isFinite(+i),l=r>=e.length;if(i=!i&&o.default.isArray(s)?s.length:i,l)return o.default.hasOwnProp(s,i)?s[i]=[s[i],n]:s[i]=n,!a;s[i]&&o.default.isObject(s[i])||(s[i]=[]);return t(e,n,s[i],r)&&o.default.isArray(s[i])&&(s[i]=function(e){const t={},n=Object.keys(e);let o;const s=n.length;let r;for(o=0;o<s;o++)r=n[o],t[r]=e[r];return t}(s[i])),!a}if(o.default.isFormData(e)&&o.default.isFunction(e.entries)){const n={};return o.default.forEachEntry(e,((e,s)=>{t(function(e){return o.default.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),s,n,0)})),n}return null}},"./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/(e,t,n)=>{function o(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}n.r(t),n.d(t,{default:()=>o})},"./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js");function s(e){return o.default.isObject(e)&&!0===e.isAxiosError}},"./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var o=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js");const s=o.default.hasStandardBrowserEnv?(r=new URL(o.default.origin),i=o.default.navigator&&/(msie|trident)/i.test(o.default.navigator.userAgent),e=>(e=new URL(e,o.default.origin),r.protocol===e.protocol&&r.host===e.host&&(i||r.port===e.port))):()=>!0;var r,i},"./node_modules/axios/lib/helpers/null.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/null.js ***!
  \************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});const o=null},"./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});const o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js").default.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),s=e=>{const t={};let n,s,r;return e&&e.split("\n").forEach((function(e){r=e.indexOf(":"),n=e.substring(0,r).trim().toLowerCase(),s=e.substring(r+1).trim(),!n||t[n]&&o[n]||("set-cookie"===n?t[n]?t[n].push(s):t[n]=[s]:t[n]=t[n]?t[n]+", "+s:s)})),t}},"./node_modules/axios/lib/helpers/parseProtocol.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseProtocol.js ***!
  \*********************************************************/(e,t,n)=>{function o(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}n.r(t),n.d(t,{default:()=>o})},"./node_modules/axios/lib/helpers/progressEventReducer.js":
/*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/progressEventReducer.js ***!
  \****************************************************************/(e,t,n)=>{n.r(t),n.d(t,{asyncDecorator:()=>l,progressEventDecorator:()=>a,progressEventReducer:()=>i});var o=n(/*! ./speedometer.js */"./node_modules/axios/lib/helpers/speedometer.js"),s=n(/*! ./throttle.js */"./node_modules/axios/lib/helpers/throttle.js"),r=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js");const i=(e,t,n=3)=>{let r=0;const i=(0,o.default)(50,250);return(0,s.default)((n=>{const o=n.loaded,s=n.lengthComputable?n.total:void 0,a=o-r,l=i(a);r=o;e({loaded:o,total:s,progress:s?o/s:void 0,bytes:a,rate:l||void 0,estimated:l&&s&&o<=s?(s-o)/l:void 0,event:n,lengthComputable:null!=s,[t?"download":"upload"]:!0})}),n)},a=(e,t)=>{const n=null!=e;return[o=>t[0]({lengthComputable:n,total:e,loaded:o}),t[1]]},l=e=>(...t)=>r.default.asap((()=>e(...t)))},"./node_modules/axios/lib/helpers/resolveConfig.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/resolveConfig.js ***!
  \*********************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>d});var o=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js"),s=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ./isURLSameOrigin.js */"./node_modules/axios/lib/helpers/isURLSameOrigin.js"),i=n(/*! ./cookies.js */"./node_modules/axios/lib/helpers/cookies.js"),a=n(/*! ../core/buildFullPath.js */"./node_modules/axios/lib/core/buildFullPath.js"),l=n(/*! ../core/mergeConfig.js */"./node_modules/axios/lib/core/mergeConfig.js"),c=n(/*! ../core/AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js"),u=n(/*! ./buildURL.js */"./node_modules/axios/lib/helpers/buildURL.js");const d=e=>{const t=(0,l.default)({},e);let n,{data:d,withXSRFToken:p,xsrfHeaderName:f,xsrfCookieName:h,headers:m,auth:g}=t;if(t.headers=m=c.default.from(m),t.url=(0,u.default)((0,a.default)(t.baseURL,t.url,t.allowAbsoluteUrls),e.params,e.paramsSerializer),g&&m.set("Authorization","Basic "+btoa((g.username||"")+":"+(g.password?unescape(encodeURIComponent(g.password)):""))),s.default.isFormData(d))if(o.default.hasStandardBrowserEnv||o.default.hasStandardBrowserWebWorkerEnv)m.setContentType(void 0);else if(!1!==(n=m.getContentType())){const[e,...t]=n?n.split(";").map((e=>e.trim())).filter(Boolean):[];m.setContentType([e||"multipart/form-data",...t].join("; "))}if(o.default.hasStandardBrowserEnv&&(p&&s.default.isFunction(p)&&(p=p(t)),p||!1!==p&&(0,r.default)(t.url))){const e=f&&h&&i.default.read(h);e&&m.set(f,e)}return t}},"./node_modules/axios/lib/helpers/speedometer.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/speedometer.js ***!
  \*******************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});const o=function(e,t){e=e||10;const n=new Array(e),o=new Array(e);let s,r=0,i=0;return t=void 0!==t?t:1e3,function(a){const l=Date.now(),c=o[i];s||(s=l),n[r]=a,o[r]=l;let u=i,d=0;for(;u!==r;)d+=n[u++],u%=e;if(r=(r+1)%e,r===i&&(i=(i+1)%e),l-s<t)return;const p=c&&l-c;return p?Math.round(1e3*d/p):void 0}}},"./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/(e,t,n)=>{function o(e){return function(t){return e.apply(null,t)}}n.r(t),n.d(t,{default:()=>o})},"./node_modules/axios/lib/helpers/throttle.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/throttle.js ***!
  \****************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});const o=function(e,t){let n,o,s=0,r=1e3/t;const i=(t,r=Date.now())=>{s=r,n=null,o&&(clearTimeout(o),o=null),e.apply(null,t)};return[(...e)=>{const t=Date.now(),a=t-s;a>=r?i(e,t):(n=e,o||(o=setTimeout((()=>{o=null,i(n)}),r-a)))},()=>n&&i(n)]}},"./node_modules/axios/lib/helpers/toFormData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toFormData.js ***!
  \******************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>u});var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js"),r=n(/*! ../platform/node/classes/FormData.js */"./node_modules/axios/lib/helpers/null.js");function i(e){return o.default.isPlainObject(e)||o.default.isArray(e)}function a(e){return o.default.endsWith(e,"[]")?e.slice(0,-2):e}function l(e,t,n){return e?e.concat(t).map((function(e,t){return e=a(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const c=o.default.toFlatObject(o.default,{},null,(function(e){return/^is[A-Z]/.test(e)}));const u=function(e,t,n){if(!o.default.isObject(e))throw new TypeError("target must be an object");t=t||new(r.default||FormData);const u=(n=o.default.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!o.default.isUndefined(t[e])}))).metaTokens,d=n.visitor||g,p=n.dots,f=n.indexes,h=(n.Blob||"undefined"!=typeof Blob&&Blob)&&o.default.isSpecCompliantForm(t);if(!o.default.isFunction(d))throw new TypeError("visitor must be a function");function m(e){if(null===e)return"";if(o.default.isDate(e))return e.toISOString();if(!h&&o.default.isBlob(e))throw new s.default("Blob is not supported. Use a Buffer instead.");return o.default.isArrayBuffer(e)||o.default.isTypedArray(e)?h&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function g(e,n,s){let r=e;if(e&&!s&&"object"==typeof e)if(o.default.endsWith(n,"{}"))n=u?n:n.slice(0,-2),e=JSON.stringify(e);else if(o.default.isArray(e)&&function(e){return o.default.isArray(e)&&!e.some(i)}(e)||(o.default.isFileList(e)||o.default.endsWith(n,"[]"))&&(r=o.default.toArray(e)))return n=a(n),r.forEach((function(e,s){!o.default.isUndefined(e)&&null!==e&&t.append(!0===f?l([n],s,p):null===f?n:n+"[]",m(e))})),!1;return!!i(e)||(t.append(l(s,n,p),m(e)),!1)}const v=[],y=Object.assign(c,{defaultVisitor:g,convertValue:m,isVisitable:i});if(!o.default.isObject(e))throw new TypeError("data must be an object");return function e(n,s){if(!o.default.isUndefined(n)){if(-1!==v.indexOf(n))throw Error("Circular reference detected in "+s.join("."));v.push(n),o.default.forEach(n,(function(n,r){!0===(!(o.default.isUndefined(n)||null===n)&&d.call(t,n,o.default.isString(r)?r.trim():r,s,y))&&e(n,s?s.concat(r):[r])})),v.pop()}}(e),t}},"./node_modules/axios/lib/helpers/toURLEncodedForm.js":
/*!************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toURLEncodedForm.js ***!
  \************************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ./toFormData.js */"./node_modules/axios/lib/helpers/toFormData.js"),r=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js");function i(e,t){return(0,s.default)(e,new r.default.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,s){return r.default.isNode&&o.default.isBuffer(e)?(this.append(t,e.toString("base64")),!1):s.defaultVisitor.apply(this,arguments)}},t))}},"./node_modules/axios/lib/helpers/trackStream.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/trackStream.js ***!
  \*******************************************************/(e,t,n)=>{n.r(t),n.d(t,{readBytes:()=>s,streamChunk:()=>o,trackStream:()=>i});const o=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let o,s=0;for(;s<n;)o=s+t,yield e.slice(s,o),s=o},s=async function*(e,t){for await(const n of r(e))yield*o(n,t)},r=async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const t=e.getReader();try{for(;;){const{done:e,value:n}=await t.read();if(e)break;yield n}}finally{await t.cancel()}},i=(e,t,n,o)=>{const r=s(e,t);let i,a=0,l=e=>{i||(i=!0,o&&o(e))};return new ReadableStream({async pull(e){try{const{done:t,value:o}=await r.next();if(t)return l(),void e.close();let s=o.byteLength;if(n){let e=a+=s;n(e)}e.enqueue(new Uint8Array(o))}catch(e){throw l(e),e}},cancel:e=>(l(e),r.return())},{highWaterMark:2})}},"./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var o=n(/*! ../env/data.js */"./node_modules/axios/lib/env/data.js"),s=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js");const r={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{r[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const i={};r.transitional=function(e,t,n){return(r,a,l)=>{if(!1===e)throw new s.default(function(e,t){return"[Axios v"+o.VERSION+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}(a," has been removed"+(t?" in "+t:"")),s.default.ERR_DEPRECATED);return t&&!i[a]&&(i[a]=!0),!e||e(r,a,l)}},r.spelling=function(e){return(e,t)=>!0};const a={assertOptions:function(e,t,n){if("object"!=typeof e)throw new s.default("options must be an object",s.default.ERR_BAD_OPTION_VALUE);const o=Object.keys(e);let r=o.length;for(;r-- >0;){const i=o[r],a=t[i];if(a){const t=e[i],n=void 0===t||a(t,i,e);if(!0!==n)throw new s.default("option "+i+" must be "+n,s.default.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new s.default("Unknown option "+i,s.default.ERR_BAD_OPTION)}},validators:r}},"./node_modules/axios/lib/platform/browser/classes/Blob.js":
/*!*****************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/Blob.js ***!
  \*****************************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});const o="undefined"!=typeof Blob?Blob:null},"./node_modules/axios/lib/platform/browser/classes/FormData.js":
/*!*********************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/FormData.js ***!
  \*********************************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});const o="undefined"!=typeof FormData?FormData:null},"./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js":
/*!****************************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js ***!
  \****************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var o=n(/*! ../../../helpers/AxiosURLSearchParams.js */"./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");const s="undefined"!=typeof URLSearchParams?URLSearchParams:o.default},"./node_modules/axios/lib/platform/browser/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/index.js ***!
  \**********************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var o=n(/*! ./classes/URLSearchParams.js */"./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js"),s=n(/*! ./classes/FormData.js */"./node_modules/axios/lib/platform/browser/classes/FormData.js"),r=n(/*! ./classes/Blob.js */"./node_modules/axios/lib/platform/browser/classes/Blob.js");const i={isBrowser:!0,classes:{URLSearchParams:o.default,FormData:s.default,Blob:r.default},protocols:["http","https","file","blob","url","data"]}},"./node_modules/axios/lib/platform/common/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/platform/common/utils.js ***!
  \*********************************************************/(e,t,n)=>{n.r(t),n.d(t,{hasBrowserEnv:()=>o,hasStandardBrowserEnv:()=>r,hasStandardBrowserWebWorkerEnv:()=>i,navigator:()=>s,origin:()=>a});const o="undefined"!=typeof window&&"undefined"!=typeof document,s="object"==typeof navigator&&navigator||void 0,r=o&&(!s||["ReactNative","NativeScript","NS"].indexOf(s.product)<0),i="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,a=o&&window.location.href||"http://localhost"},"./node_modules/axios/lib/platform/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/platform/index.js ***!
  \**************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>s});var o=n(/*! ./node/index.js */"./node_modules/axios/lib/platform/browser/index.js");const s={...n(/*! ./common/utils.js */"./node_modules/axios/lib/platform/common/utils.js"),...o.default}},"./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>H});var o=n(/*! ./helpers/bind.js */"./node_modules/axios/lib/helpers/bind.js");const{toString:s}=Object.prototype,{getPrototypeOf:r}=Object,i=(a=Object.create(null),e=>{const t=s.call(e);return a[t]||(a[t]=t.slice(8,-1).toLowerCase())});var a;const l=e=>(e=e.toLowerCase(),t=>i(t)===e),c=e=>t=>typeof t===e,{isArray:u}=Array,d=c("undefined");const p=l("ArrayBuffer");const f=c("string"),h=c("function"),m=c("number"),g=e=>null!==e&&"object"==typeof e,v=e=>{if("object"!==i(e))return!1;const t=r(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},y=l("Date"),b=l("File"),_=l("Blob"),x=l("FileList"),S=l("URLSearchParams"),[w,k,C,E]=["ReadableStream","Request","Response","Headers"].map(l);function j(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let o,s;if("object"!=typeof e&&(e=[e]),u(e))for(o=0,s=e.length;o<s;o++)t.call(null,e[o],o,e);else{const s=n?Object.getOwnPropertyNames(e):Object.keys(e),r=s.length;let i;for(o=0;o<r;o++)i=s[o],t.call(null,e[i],i,e)}}function T(e,t){t=t.toLowerCase();const n=Object.keys(e);let o,s=n.length;for(;s-- >0;)if(o=n[s],t===o.toLowerCase())return o;return null}const A="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,R=e=>!d(e)&&e!==A;const O=(N="undefined"!=typeof Uint8Array&&r(Uint8Array),e=>N&&e instanceof N);var N;const P=l("HTMLFormElement"),I=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),M=l("RegExp"),L=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),o={};j(n,((n,s)=>{let r;!1!==(r=t(n,s,e))&&(o[s]=r||n)})),Object.defineProperties(e,o)};const F=l("AsyncFunction"),$=(D="function"==typeof setImmediate,B=h(A.postMessage),D?setImmediate:B?(U=`axios@${Math.random()}`,V=[],A.addEventListener("message",(({source:e,data:t})=>{e===A&&t===U&&V.length&&V.shift()()}),!1),e=>{V.push(e),A.postMessage(U,"*")}):e=>setTimeout(e));var D,B,U,V;const q="undefined"!=typeof queueMicrotask?queueMicrotask.bind(A):"undefined"!=typeof process&&process.nextTick||$,H={isArray:u,isArrayBuffer:p,isBuffer:function(e){return null!==e&&!d(e)&&null!==e.constructor&&!d(e.constructor)&&h(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||h(e.append)&&("formdata"===(t=i(e))||"object"===t&&h(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&p(e.buffer),t},isString:f,isNumber:m,isBoolean:e=>!0===e||!1===e,isObject:g,isPlainObject:v,isReadableStream:w,isRequest:k,isResponse:C,isHeaders:E,isUndefined:d,isDate:y,isFile:b,isBlob:_,isRegExp:M,isFunction:h,isStream:e=>g(e)&&h(e.pipe),isURLSearchParams:S,isTypedArray:O,isFileList:x,forEach:j,merge:function e(){const{caseless:t}=R(this)&&this||{},n={},o=(o,s)=>{const r=t&&T(n,s)||s;v(n[r])&&v(o)?n[r]=e(n[r],o):v(o)?n[r]=e({},o):u(o)?n[r]=o.slice():n[r]=o};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&j(arguments[e],o);return n},extend:(e,t,n,{allOwnKeys:s}={})=>(j(t,((t,s)=>{n&&h(t)?e[s]=(0,o.default)(t,n):e[s]=t}),{allOwnKeys:s}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,o)=>{e.prototype=Object.create(t.prototype,o),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,o)=>{let s,i,a;const l={};if(t=t||{},null==e)return t;do{for(s=Object.getOwnPropertyNames(e),i=s.length;i-- >0;)a=s[i],o&&!o(a,e,t)||l[a]||(t[a]=e[a],l[a]=!0);e=!1!==n&&r(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:i,kindOfTest:l,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const o=e.indexOf(t,n);return-1!==o&&o===n},toArray:e=>{if(!e)return null;if(u(e))return e;let t=e.length;if(!m(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let o;for(;(o=n.next())&&!o.done;){const n=o.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const o=[];for(;null!==(n=e.exec(t));)o.push(n);return o},isHTMLForm:P,hasOwnProperty:I,hasOwnProp:I,reduceDescriptors:L,freezeMethods:e=>{L(e,((t,n)=>{if(h(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const o=e[n];h(o)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},o=e=>{e.forEach((e=>{n[e]=!0}))};return u(e)?o(e):o(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:T,global:A,isContextDefined:R,isSpecCompliantForm:function(e){return!!(e&&h(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,o)=>{if(g(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[o]=e;const s=u(e)?[]:{};return j(e,((e,t)=>{const r=n(e,o+1);!d(r)&&(s[t]=r)})),t[o]=void 0,s}}return e};return n(e,0)},isAsyncFn:F,isThenable:e=>e&&(g(e)||h(e))&&h(e.then)&&h(e.catch),setImmediate:$,asap:q}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/AppPage.vue?vue&type=script&lang=js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/AppPage.vue?vue&type=script&lang=js ***!
  \*************************************************************************************************************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>i});var o=n(/*! ./components/NavigationMenu.vue */"./assets/js/components/NavigationMenu.vue"),s=n(/*! ./pages/SinglePostGoogleMap.vue */"./assets/js/pages/SinglePostGoogleMap.vue"),r=n(/*! ./components/Footer.vue */"./assets/js/components/Footer.vue");const i={components:{navigation:o.default,singlepostgooglemap:s.default,mainfooter:r.default}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=script&lang=js":
/*!***********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=script&lang=js ***!
  \***********************************************************************************************************************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});const o={name:"Main Footer",data:()=>({local_data_primary_menu_footer:theme_vars.menu_footer,mobile:!0,mobileFooter:null,windowWidth:null}),created(){window.addEventListener("resize",this.checkScreen),this.checkScreen()},mounted(){document.addEventListener("click",this.handleClickOutsideDropdownMenu)},beforeUnmount(){document.removeEventListener("click",this.handleClickOutsideDropdownMenu)},methods:{togglemobileFooter(){this.mobileFooter=!this.mobileFooter},checkScreen(){this.windowWidth=window.innerWidth,this.windowWidth<=750?this.mobile=!0:(this.mobile=!1,this.mobileFooter=!1)},handleClickOutsideDropdownMenu(e){"mobile-nav"!==e.target.id&&"toggle-icon"!==e.target.id&&"link"!==e.target.className&&"link-wrapper"!==e.target.className&&(this.mobileFooter=!1)}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=script&lang=js":
/*!*******************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=script&lang=js ***!
  \*******************************************************************************************************************************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>o});const o={name:"Main Nav",data:()=>({local_data_primary_menu:theme_vars.menu,mobile:!0,mobileNav:null,windowWidth:null}),created(){window.addEventListener("resize",this.checkScreen),this.checkScreen()},mounted(){document.addEventListener("click",this.handleClickOutsideDropdownMenu)},beforeUnmount(){document.removeEventListener("click",this.handleClickOutsideDropdownMenu)},methods:{toggleMobileNav(){this.mobileNav=!this.mobileNav},checkScreen(){this.windowWidth=window.innerWidth,this.windowWidth<=750?this.mobile=!0:(this.mobile=!1,this.mobileNav=!1)},handleClickOutsideDropdownMenu(e){"mobile-nav"!==e.target.id&&"toggle-icon"!==e.target.id&&"link"!==e.target.className&&"link-wrapper"!==e.target.className&&(this.mobileNav=!1)}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=script&lang=js":
/*!*******************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=script&lang=js ***!
  \*******************************************************************************************************************************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});var o=n(/*! vue3-google-map */"./node_modules/vue3-google-map/dist/index.mjs"),s=n(/*! axios */"./node_modules/axios/lib/axios.js");const r={name:"GoogleMapComponent",components:{GoogleMap:o.GoogleMap,Marker:o.Marker,InfoWindow:o.InfoWindow},data:()=>({local_data_post_id:theme_vars.current_post_id,post:null,YOUR_GOOGLE_MAPS_API_KEY:"AIzaSyDgYeoslPIi0_0ttWCFbtQGdNTmT24ktfA",title:null,address:"1150 E Arkansas Ave, Denver, CO 80210, USA",center:null,loading:!1,mapZoom:10,infoWindowPosition:{lat:null,lng:null},infoWindowOpened:!1,selectedMarker:null}),async created(){this.loading=!0;const e=(await s.default.get(`/wp-json/wp/v2/guides/${this.local_data_post_id}`)).data;this.center={lat:e.acf.guides_location.lat,lng:e.acf.guides_location.lng},this.post=e,this.loading=!1},mounted(){},methods:{openInfoWindow(){this.infoWindowOpened=!0},closeInfoWindow(){this.infoWindowOpened=!1},get_title:e=>e.replace("&#8211;","-"),getGoogleMapsDirectionsLinke(){return`https://www.google.com/maps/dir/?api=1&destination=${this.address}`}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/AppPage.vue?vue&type=template&id=05edb0d8":
/*!*****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/AppPage.vue?vue&type=template&id=05edb0d8 ***!
  \*****************************************************************************************************************************************************************************************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{render:()=>s});var o=n(/*! vue */"./node_modules/vue/dist/vue.esm-browser.js");function s(e,t,n,s,r,i){const a=(0,o.resolveComponent)("navigation"),l=(0,o.resolveComponent)("singlepostgooglemap"),c=(0,o.resolveComponent)("mainfooter");return(0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,null,[(0,o.createVNode)(a),(0,o.createVNode)(l),(0,o.createVNode)(c)],64)}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=template&id=e4181508&scoped=true":
/*!***************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=template&id=e4181508&scoped=true ***!
  \***************************************************************************************************************************************************************************************************************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{render:()=>a});var o=n(/*! vue */"./node_modules/vue/dist/vue.esm-browser.js");const s={class:"footer"},r={class:"navigation"},i=["href"];function a(e,t,n,a,l,c){return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[t[0]||(t[0]=(0,o.createElementVNode)("p",null," Copyright © 2025 Opened Range. All Rights Reserved.",-1)),(0,o.createElementVNode)("ul",r,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(l.local_data_primary_menu_footer,((e,t)=>((0,o.openBlock)(),(0,o.createElementBlock)("li",null,[(0,o.createElementVNode)("a",{class:"link-light link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover",href:e.url,target:"",rel:"noopener noreferrer"},(0,o.toDisplayString)(e.title),9,i)])))),256))])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true":
/*!***********************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{render:()=>d});var o=n(/*! vue */"./node_modules/vue/dist/vue.esm-browser.js");const s={if:"true"},r={class:"navigation"},i=["href"],a={class:"icon"},l={class:"dropdown-nav"},c={class:"link-rapper"},u=["href"];function d(e,t,n,d,p,f){return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("header",null,[(0,o.createElementVNode)("nav",null,[t[1]||(t[1]=(0,o.createElementVNode)("a",{href:"/",target:"",class:"flex items-center text-white !no-underline"},[(0,o.createElementVNode)("img",{class:"w-14 h-14 mr-4",src:"/wp-content/themes/timber-starter-theme/assets/images/official-logo-v1-green-DMarNqVJ.webp",alt:"Opened Range Logo"}),(0,o.createElementVNode)("div",{class:"fit-size h-auto font-bold"},"Opened Range")],-1)),(0,o.withDirectives)((0,o.createElementVNode)("ul",r,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(p.local_data_primary_menu,((e,t)=>((0,o.openBlock)(),(0,o.createElementBlock)("li",null,[(0,o.createElementVNode)("a",{class:"link-light link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover",href:e.url,target:"",rel:"noopener noreferrer"},(0,o.toDisplayString)(e.title),9,i)])))),256))],512),[[o.vShow,!p.mobile]]),(0,o.createElementVNode)("div",a,[(0,o.withDirectives)((0,o.createElementVNode)("i",{id:"toggle-icon",onClick:t[0]||(t[0]=function(){return f.toggleMobileNav&&f.toggleMobileNav(...arguments)}),class:(0,o.normalizeClass)([{"icon-active":p.mobileNav},"fa-solid fa-bars"])},null,2),[[o.vShow,p.mobile]])]),(0,o.createVNode)(o.Transition,{id:"mobile-nav",name:"mobile-nav",persisted:""},{default:(0,o.withCtx)((()=>[(0,o.withDirectives)((0,o.createElementVNode)("ul",l,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(p.local_data_primary_menu,((e,t)=>((0,o.openBlock)(),(0,o.createElementBlock)("li",c,[(0,o.createElementVNode)("a",{class:"fit-size h-auto font-bold no-underline hover:underline text-black",href:e.url,target:"",rel:"noopener noreferrer"},(0,o.toDisplayString)(e.title),9,u)])))),256))],512),[[o.vShow,p.mobileNav]])])),_:1})])])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true":
/*!***********************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************/(e,t,n)=>{n.r(t),n.d(t,{render:()=>b});var o=n(/*! vue */"./node_modules/vue/dist/vue.esm-browser.js");const s={key:0,class:"max-w-7xl max-xl:pr-4 max-xl:pl-4 ml-auto mr-auto pt-4 pb-4"},r={class:"w-1/1"},i={class:"article-content"},a=["textContent"],l={class:"article-body"},c={class:"block mb-3",href:"{{ googleDirectionLink  }} ",target:"_blank",rel:"noopener noreferrer"},u={key:0},d={key:1},p={key:2},f={key:3,class:"block mb-3",href:"{{ post.acf.website }}",target:"_blank",rel:"noopener noreferrer"},h={key:4},m={key:5},g={id:"content"},v=["textContent"],y=["href"];function b(e,t,n,b,_,x){const S=(0,o.resolveComponent)("InfoWindow"),w=(0,o.resolveComponent)("Marker"),k=(0,o.resolveComponent)("GoogleMap");return _.loading?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("article",r,[(0,o.createElementVNode)("section",i,[(0,o.createElementVNode)("h1",{class:"article-h1",textContent:(0,o.toDisplayString)(x.get_title(_.post.title.rendered))},null,8,a),(0,o.createElementVNode)("div",l,[(0,o.createElementVNode)("a",c," Address: "+(0,o.toDisplayString)(_.post.acf.guides_location.address),1),_.post.acf.registration?((0,o.openBlock)(),(0,o.createElementBlock)("p",u,"Registration: "+(0,o.toDisplayString)(_.post.acf.registration),1)):(0,o.createCommentVNode)("v-if",!0),_.post.acf.phone?((0,o.openBlock)(),(0,o.createElementBlock)("p",d,"Phone: "+(0,o.toDisplayString)(_.post.acf.phone),1)):(0,o.createCommentVNode)("v-if",!0),_.post.acf.hunt_units?((0,o.openBlock)(),(0,o.createElementBlock)("p",p,"Hunt Units: "+(0,o.toDisplayString)(_.post.acf.hunt_units),1)):(0,o.createCommentVNode)("v-if",!0),_.post.acf.website?((0,o.openBlock)(),(0,o.createElementBlock)("a",f,(0,o.toDisplayString)(_.post.acf.website),1)):(0,o.createCommentVNode)("v-if",!0),_.post.acf.openedrange_verified?((0,o.openBlock)(),(0,o.createElementBlock)("div",h,t[0]||(t[0]=[(0,o.createElementVNode)("p",null,"OpenedRange Verified: Yes",-1)]))):((0,o.openBlock)(),(0,o.createElementBlock)("div",m,t[1]||(t[1]=[(0,o.createElementVNode)("p",null,"OpenedRange Verified: No",-1)])))])])]),(0,o.createVNode)(k,{"api-key":_.YOUR_GOOGLE_MAPS_API_KEY,style:{width:"100%",height:"500px"},center:_.center,zoom:15},{default:(0,o.withCtx)((()=>[(0,o.createVNode)(w,{options:{position:_.center}},{default:(0,o.withCtx)((()=>[(0,o.createVNode)(S,null,{default:(0,o.withCtx)((()=>[(0,o.createElementVNode)("div",g,[t[2]||(t[2]=(0,o.createElementVNode)("div",{id:"siteNotice"},null,-1)),(0,o.createElementVNode)("h3",{id:"firstHeading",class:"firstHeading",textContent:(0,o.toDisplayString)(x.get_title(_.post.title.rendered))},null,8,v),(0,o.createElementVNode)("a",{href:x.getGoogleMapsDirectionsLinke(),target:"_blank",rel:"noopener noreferrer"},"Directions",8,y)])])),_:1})])),_:1},8,["options"])])),_:1},8,["api-key","center"])]))}},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/(e,t,n)=>{n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/(e,t,n)=>{n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/(e,t,n)=>{n.r(t)},"./node_modules/vue-loader/dist/exportHelper.js":
/*!******************************************************!*\
  !*** ./node_modules/vue-loader/dist/exportHelper.js ***!
  \******************************************************/(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e,t)=>{const n=e.__vccOpts||e;for(const[e,o]of t)n[e]=o;return n}},"./node_modules/vue/dist/vue.esm-browser.js":
/*!**************************************************!*\
  !*** ./node_modules/vue/dist/vue.esm-browser.js ***!
  \**************************************************/(e,t,n)=>{
/**
* vue v3.5.13
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
/*! #__NO_SIDE_EFFECTS__ */
function o(e){const t=Object.create(null);for(const n of e.split(","))t[n]=1;return e=>e in t}n.r(t),n.d(t,{BaseTransition:()=>Go,BaseTransitionPropsValidators:()=>zo,Comment:()=>fa,DeprecationTypes:()=>Rl,EffectScope:()=>Se,ErrorCodes:()=>Rn,ErrorTypeStrings:()=>kl,Fragment:()=>da,KeepAlive:()=>As,ReactiveEffect:()=>je,Static:()=>ha,Suspense:()=>sa,Teleport:()=>$o,Text:()=>pa,TrackOpTypes:()=>hn,Transition:()=>Vl,TransitionGroup:()=>Bc,TriggerOpTypes:()=>mn,VueElement:()=>Nc,assertNumber:()=>An,callWithAsyncErrorHandling:()=>Pn,callWithErrorHandling:()=>Nn,camelize:()=>N,capitalize:()=>M,cloneVNode:()=>Pa,compatUtils:()=>Al,compile:()=>Th,computed:()=>vl,createApp:()=>vu,createBlock:()=>ka,createCommentVNode:()=>Fa,createElementBlock:()=>wa,createElementVNode:()=>Ra,createHydrationRenderer:()=>ki,createPropsRestProxy:()=>Tr,createRenderer:()=>wi,createSSRApp:()=>yu,createSlots:()=>sr,createStaticVNode:()=>La,createTextVNode:()=>Ma,createVNode:()=>Oa,customRef:()=>an,defineAsyncComponent:()=>Es,defineComponent:()=>ts,defineCustomElement:()=>Ac,defineEmits:()=>gr,defineExpose:()=>vr,defineModel:()=>_r,defineOptions:()=>yr,defineProps:()=>mr,defineSSRCustomElement:()=>Rc,defineSlots:()=>br,devtools:()=>Cl,effect:()=>Be,effectScope:()=>we,getCurrentInstance:()=>Ka,getCurrentScope:()=>ke,getCurrentWatcher:()=>bn,getTransitionRawChildren:()=>es,guardReactiveProps:()=>Na,h:()=>yl,handleError:()=>In,hasInjectionContext:()=>Gr,hydrate:()=>gu,hydrateOnIdle:()=>xs,hydrateOnInteraction:()=>ks,hydrateOnMediaQuery:()=>ws,hydrateOnVisible:()=>Ss,initCustomFormatter:()=>bl,initDirectivesForSSR:()=>ku,inject:()=>Kr,isMemoSame:()=>xl,isProxy:()=>Ht,isReactive:()=>Ut,isReadonly:()=>Vt,isRef:()=>Jt,isRuntimeOnly:()=>al,isShallow:()=>qt,isVNode:()=>Ca,markRaw:()=>Wt,mergeDefaults:()=>Er,mergeModels:()=>jr,mergeProps:()=>Ua,nextTick:()=>qn,normalizeClass:()=>Q,normalizeProps:()=>ee,normalizeStyle:()=>G,onActivated:()=>Os,onBeforeMount:()=>Ds,onBeforeUnmount:()=>qs,onBeforeUpdate:()=>Us,onDeactivated:()=>Ns,onErrorCaptured:()=>Gs,onMounted:()=>Bs,onRenderTracked:()=>Ks,onRenderTriggered:()=>Ws,onScopeDispose:()=>Ce,onServerPrefetch:()=>zs,onUnmounted:()=>Hs,onUpdated:()=>Vs,onWatcherCleanup:()=>_n,openBlock:()=>va,popScopeId:()=>wo,provide:()=>Wr,proxyRefs:()=>sn,pushScopeId:()=>So,queuePostFlushCb:()=>Wn,reactive:()=>Lt,readonly:()=>$t,ref:()=>Zt,registerRuntimeCompiler:()=>il,render:()=>mu,renderList:()=>or,renderSlot:()=>rr,resolveComponent:()=>Xs,resolveDirective:()=>er,resolveDynamicComponent:()=>Qs,resolveFilter:()=>Tl,resolveTransitionHooks:()=>Zo,setBlockTracking:()=>xa,setDevtoolsHook:()=>El,setTransitionHooks:()=>Qo,shallowReactive:()=>Ft,shallowReadonly:()=>Dt,shallowRef:()=>Xt,ssrContextKey:()=>Ni,ssrUtils:()=>jl,stop:()=>Ue,toDisplayString:()=>ge,toHandlerKey:()=>L,toHandlers:()=>ar,toRaw:()=>zt,toRef:()=>dn,toRefs:()=>ln,toValue:()=>nn,transformVNodeArgs:()=>ja,triggerRef:()=>en,unref:()=>tn,useAttrs:()=>wr,useCssModule:()=>Mc,useCssVars:()=>ac,useHost:()=>Pc,useId:()=>ns,useModel:()=>Ui,useSSRContext:()=>Pi,useShadowRoot:()=>Ic,useSlots:()=>Sr,useTemplateRef:()=>rs,useTransitionState:()=>qo,vModelCheckbox:()=>Jc,vModelDynamic:()=>nu,vModelRadio:()=>Xc,vModelSelect:()=>Yc,vModelText:()=>Gc,vShow:()=>sc,version:()=>Sl,warn:()=>wl,watch:()=>Fi,watchEffect:()=>Ii,watchPostEffect:()=>Mi,watchSyncEffect:()=>Li,withAsyncContext:()=>Ar,withCtx:()=>Co,withDefaults:()=>xr,withDirectives:()=>jo,withKeys:()=>cu,withMemo:()=>_l,withModifiers:()=>au,withScopeId:()=>ko});const s=Object.freeze({}),r=Object.freeze([]),i=()=>{},a=()=>!1,l=e=>111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),c=e=>e.startsWith("onUpdate:"),u=Object.assign,d=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},p=Object.prototype.hasOwnProperty,f=(e,t)=>p.call(e,t),h=Array.isArray,m=e=>"[object Map]"===k(e),g=e=>"[object Set]"===k(e),v=e=>"[object Date]"===k(e),y=e=>"function"==typeof e,b=e=>"string"==typeof e,_=e=>"symbol"==typeof e,x=e=>null!==e&&"object"==typeof e,S=e=>(x(e)||y(e))&&y(e.then)&&y(e.catch),w=Object.prototype.toString,k=e=>w.call(e),C=e=>k(e).slice(8,-1),E=e=>"[object Object]"===k(e),j=e=>b(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,T=o(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),A=o("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),R=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},O=/-(\w)/g,N=R((e=>e.replace(O,((e,t)=>t?t.toUpperCase():"")))),P=/\B([A-Z])/g,I=R((e=>e.replace(P,"-$1").toLowerCase())),M=R((e=>e.charAt(0).toUpperCase()+e.slice(1))),L=R((e=>e?`on${M(e)}`:"")),F=(e,t)=>!Object.is(e,t),$=(e,...t)=>{for(let n=0;n<e.length;n++)e[n](...t)},D=(e,t,n,o=!1)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:o,value:n})},B=e=>{const t=parseFloat(e);return isNaN(t)?e:t},U=e=>{const t=b(e)?Number(e):NaN;return isNaN(t)?e:t};let V;const q=()=>V||(V="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{});const H={1:"TEXT",2:"CLASS",4:"STYLE",8:"PROPS",16:"FULL_PROPS",32:"NEED_HYDRATION",64:"STABLE_FRAGMENT",128:"KEYED_FRAGMENT",256:"UNKEYED_FRAGMENT",512:"NEED_PATCH",1024:"DYNAMIC_SLOTS",2048:"DEV_ROOT_FRAGMENT",[-1]:"HOISTED",[-2]:"BAIL"},z={1:"STABLE",2:"DYNAMIC",3:"FORWARDED"},W=o("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol"),K=2;function G(e){if(h(e)){const t={};for(let n=0;n<e.length;n++){const o=e[n],s=b(o)?Y(o):G(o);if(s)for(const e in s)t[e]=s[e]}return t}if(b(e)||x(e))return e}const J=/;(?![^(]*\))/g,Z=/:([^]+)/,X=/\/\*[^]*?\*\//g;function Y(e){const t={};return e.replace(X,"").split(J).forEach((e=>{if(e){const n=e.split(Z);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function Q(e){let t="";if(b(e))t=e;else if(h(e))for(let n=0;n<e.length;n++){const o=Q(e[n]);o&&(t+=o+" ")}else if(x(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function ee(e){if(!e)return null;let{class:t,style:n}=e;return t&&!b(t)&&(e.class=Q(t)),n&&(e.style=G(n)),e}const te=o("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),ne=o("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),oe=o("annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics"),se=o("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr"),re="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",ie=o(re),ae=o(re+",async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");function le(e){return!!e||""===e}const ce=o("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap"),ue=o("xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan");const de=/[ !"#$%&'()*+,./:;<=>?@[\\\]^`{|}~]/g;function pe(e,t){return e.replace(de,(e=>`\\${e}`))}function fe(e,t){if(e===t)return!0;let n=v(e),o=v(t);if(n||o)return!(!n||!o)&&e.getTime()===t.getTime();if(n=_(e),o=_(t),n||o)return e===t;if(n=h(e),o=h(t),n||o)return!(!n||!o)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let o=0;n&&o<e.length;o++)n=fe(e[o],t[o]);return n}(e,t);if(n=x(e),o=x(t),n||o){if(!n||!o)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const o=e.hasOwnProperty(n),s=t.hasOwnProperty(n);if(o&&!s||!o&&s||!fe(e[n],t[n]))return!1}}return String(e)===String(t)}function he(e,t){return e.findIndex((e=>fe(e,t)))}const me=e=>!(!e||!0!==e.__v_isRef),ge=e=>b(e)?e:null==e?"":h(e)||x(e)&&(e.toString===w||!y(e.toString))?me(e)?ge(e.value):JSON.stringify(e,ve,2):String(e),ve=(e,t)=>me(t)?ve(e,t.value):m(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n],o)=>(e[ye(t,o)+" =>"]=n,e)),{})}:g(t)?{[`Set(${t.size})`]:[...t.values()].map((e=>ye(e)))}:_(t)?ye(t):!x(t)||h(t)||E(t)?t:String(t),ye=(e,t="")=>{var n;return _(e)?`Symbol(${null!=(n=e.description)?n:t})`:e};function be(e,...t){}let _e,xe;class Se{constructor(e=!1){this.detached=e,this._active=!0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=_e,!e&&_e&&(this.index=(_e.scopes||(_e.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){let e,t;if(this._isPaused=!0,this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].pause();for(e=0,t=this.effects.length;e<t;e++)this.effects[e].pause()}}resume(){if(this._active&&this._isPaused){let e,t;if(this._isPaused=!1,this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].resume();for(e=0,t=this.effects.length;e<t;e++)this.effects[e].resume()}}run(e){if(this._active){const t=_e;try{return _e=this,e()}finally{_e=t}}}on(){_e=this}off(){_e=this.parent}stop(e){if(this._active){let t,n;for(this._active=!1,t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(this.effects.length=0,t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.cleanups.length=0,this.scopes){for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0}}}function we(e){return new Se(e)}function ke(){return _e}function Ce(e,t=!1){_e&&_e.cleanups.push(e)}const Ee=new WeakSet;class je{constructor(e){this.fn=e,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,_e&&_e.active&&_e.effects.push(this)}pause(){this.flags|=64}resume(){64&this.flags&&(this.flags&=-65,Ee.has(this)&&(Ee.delete(this),this.trigger()))}notify(){2&this.flags&&!(32&this.flags)||8&this.flags||Oe(this)}run(){if(!(1&this.flags))return this.fn();this.flags|=2,We(this),Ie(this);const e=xe,t=Ve;xe=this,Ve=!0;try{return this.fn()}finally{Me(this),xe=e,Ve=t,this.flags&=-3}}stop(){if(1&this.flags){for(let e=this.deps;e;e=e.nextDep)$e(e);this.deps=this.depsTail=void 0,We(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){64&this.flags?Ee.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){Le(this)&&this.run()}get dirty(){return Le(this)}}let Te,Ae,Re=0;function Oe(e,t=!1){if(e.flags|=8,t)return e.next=Ae,void(Ae=e);e.next=Te,Te=e}function Ne(){Re++}function Pe(){if(--Re>0)return;if(Ae){let e=Ae;for(Ae=void 0;e;){const t=e.next;e.next=void 0,e.flags&=-9,e=t}}let e;for(;Te;){let t=Te;for(Te=void 0;t;){const n=t.next;if(t.next=void 0,t.flags&=-9,1&t.flags)try{t.trigger()}catch(t){e||(e=t)}t=n}}if(e)throw e}function Ie(e){for(let t=e.deps;t;t=t.nextDep)t.version=-1,t.prevActiveLink=t.dep.activeLink,t.dep.activeLink=t}function Me(e){let t,n=e.depsTail,o=n;for(;o;){const e=o.prevDep;-1===o.version?(o===n&&(n=e),$e(o),De(o)):t=o,o.dep.activeLink=o.prevActiveLink,o.prevActiveLink=void 0,o=e}e.deps=t,e.depsTail=n}function Le(e){for(let t=e.deps;t;t=t.nextDep)if(t.dep.version!==t.version||t.dep.computed&&(Fe(t.dep.computed)||t.dep.version!==t.version))return!0;return!!e._dirty}function Fe(e){if(4&e.flags&&!(16&e.flags))return;if(e.flags&=-17,e.globalVersion===Ke)return;e.globalVersion=Ke;const t=e.dep;if(e.flags|=2,t.version>0&&!e.isSSR&&e.deps&&!Le(e))return void(e.flags&=-3);const n=xe,o=Ve;xe=e,Ve=!0;try{Ie(e);const n=e.fn(e._value);(0===t.version||F(n,e._value))&&(e._value=n,t.version++)}catch(e){throw t.version++,e}finally{xe=n,Ve=o,Me(e),e.flags&=-3}}function $e(e,t=!1){const{dep:n,prevSub:o,nextSub:s}=e;if(o&&(o.nextSub=s,e.prevSub=void 0),s&&(s.prevSub=o,e.nextSub=void 0),n.subsHead===e&&(n.subsHead=s),n.subs===e&&(n.subs=o,!o&&n.computed)){n.computed.flags&=-5;for(let e=n.computed.deps;e;e=e.nextDep)$e(e,!0)}t||--n.sc||!n.map||n.map.delete(n.key)}function De(e){const{prevDep:t,nextDep:n}=e;t&&(t.nextDep=n,e.prevDep=void 0),n&&(n.prevDep=t,e.nextDep=void 0)}function Be(e,t){e.effect instanceof je&&(e=e.effect.fn);const n=new je(e);t&&u(n,t);try{n.run()}catch(e){throw n.stop(),e}const o=n.run.bind(n);return o.effect=n,o}function Ue(e){e.effect.stop()}let Ve=!0;const qe=[];function He(){qe.push(Ve),Ve=!1}function ze(){const e=qe.pop();Ve=void 0===e||e}function We(e){const{cleanup:t}=e;if(e.cleanup=void 0,t){const e=xe;xe=void 0;try{t()}finally{xe=e}}}let Ke=0;class Ge{constructor(e,t){this.sub=e,this.dep=t,this.version=t.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class Je{constructor(e){this.computed=e,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0,this.subsHead=void 0}track(e){if(!xe||!Ve||xe===this.computed)return;let t=this.activeLink;if(void 0===t||t.sub!==xe)t=this.activeLink=new Ge(xe,this),xe.deps?(t.prevDep=xe.depsTail,xe.depsTail.nextDep=t,xe.depsTail=t):xe.deps=xe.depsTail=t,Ze(t);else if(-1===t.version&&(t.version=this.version,t.nextDep)){const e=t.nextDep;e.prevDep=t.prevDep,t.prevDep&&(t.prevDep.nextDep=e),t.prevDep=xe.depsTail,t.nextDep=void 0,xe.depsTail.nextDep=t,xe.depsTail=t,xe.deps===t&&(xe.deps=e)}return xe.onTrack&&xe.onTrack(u({effect:xe},e)),t}trigger(e){this.version++,Ke++,this.notify(e)}notify(e){Ne();try{for(let t=this.subsHead;t;t=t.nextSub)!t.sub.onTrigger||8&t.sub.flags||t.sub.onTrigger(u({effect:t.sub},e));for(let e=this.subs;e;e=e.prevSub)e.sub.notify()&&e.sub.dep.notify()}finally{Pe()}}}function Ze(e){if(e.dep.sc++,4&e.sub.flags){const t=e.dep.computed;if(t&&!e.dep.subs){t.flags|=20;for(let e=t.deps;e;e=e.nextDep)Ze(e)}const n=e.dep.subs;n!==e&&(e.prevSub=n,n&&(n.nextSub=e)),void 0===e.dep.subsHead&&(e.dep.subsHead=e),e.dep.subs=e}}const Xe=new WeakMap,Ye=Symbol("Object iterate"),Qe=Symbol("Map keys iterate"),et=Symbol("Array iterate");function tt(e,t,n){if(Ve&&xe){let o=Xe.get(e);o||Xe.set(e,o=new Map);let s=o.get(n);s||(o.set(n,s=new Je),s.map=o,s.key=n),s.track({target:e,type:t,key:n})}}function nt(e,t,n,o,s,r){const i=Xe.get(e);if(!i)return void Ke++;const a=i=>{i&&i.trigger({target:e,type:t,key:n,newValue:o,oldValue:s,oldTarget:r})};if(Ne(),"clear"===t)i.forEach(a);else{const s=h(e),r=s&&j(n);if(s&&"length"===n){const e=Number(o);i.forEach(((t,n)=>{("length"===n||n===et||!_(n)&&n>=e)&&a(t)}))}else switch((void 0!==n||i.has(void 0))&&a(i.get(n)),r&&a(i.get(et)),t){case"add":s?r&&a(i.get("length")):(a(i.get(Ye)),m(e)&&a(i.get(Qe)));break;case"delete":s||(a(i.get(Ye)),m(e)&&a(i.get(Qe)));break;case"set":m(e)&&a(i.get(Ye))}}Pe()}function ot(e){const t=zt(e);return t===e?t:(tt(t,"iterate",et),qt(e)?t:t.map(Kt))}function st(e){return tt(e=zt(e),"iterate",et),e}const rt={__proto__:null,[Symbol.iterator](){return it(this,Symbol.iterator,Kt)},concat(...e){return ot(this).concat(...e.map((e=>h(e)?ot(e):e)))},entries(){return it(this,"entries",(e=>(e[1]=Kt(e[1]),e)))},every(e,t){return lt(this,"every",e,t,void 0,arguments)},filter(e,t){return lt(this,"filter",e,t,(e=>e.map(Kt)),arguments)},find(e,t){return lt(this,"find",e,t,Kt,arguments)},findIndex(e,t){return lt(this,"findIndex",e,t,void 0,arguments)},findLast(e,t){return lt(this,"findLast",e,t,Kt,arguments)},findLastIndex(e,t){return lt(this,"findLastIndex",e,t,void 0,arguments)},forEach(e,t){return lt(this,"forEach",e,t,void 0,arguments)},includes(...e){return ut(this,"includes",e)},indexOf(...e){return ut(this,"indexOf",e)},join(e){return ot(this).join(e)},lastIndexOf(...e){return ut(this,"lastIndexOf",e)},map(e,t){return lt(this,"map",e,t,void 0,arguments)},pop(){return dt(this,"pop")},push(...e){return dt(this,"push",e)},reduce(e,...t){return ct(this,"reduce",e,t)},reduceRight(e,...t){return ct(this,"reduceRight",e,t)},shift(){return dt(this,"shift")},some(e,t){return lt(this,"some",e,t,void 0,arguments)},splice(...e){return dt(this,"splice",e)},toReversed(){return ot(this).toReversed()},toSorted(e){return ot(this).toSorted(e)},toSpliced(...e){return ot(this).toSpliced(...e)},unshift(...e){return dt(this,"unshift",e)},values(){return it(this,"values",Kt)}};function it(e,t,n){const o=st(e),s=o[t]();return o===e||qt(e)||(s._next=s.next,s.next=()=>{const e=s._next();return e.value&&(e.value=n(e.value)),e}),s}const at=Array.prototype;function lt(e,t,n,o,s,r){const i=st(e),a=i!==e&&!qt(e),l=i[t];if(l!==at[t]){const t=l.apply(e,r);return a?Kt(t):t}let c=n;i!==e&&(a?c=function(t,o){return n.call(this,Kt(t),o,e)}:n.length>2&&(c=function(t,o){return n.call(this,t,o,e)}));const u=l.call(i,c,o);return a&&s?s(u):u}function ct(e,t,n,o){const s=st(e);let r=n;return s!==e&&(qt(e)?n.length>3&&(r=function(t,o,s){return n.call(this,t,o,s,e)}):r=function(t,o,s){return n.call(this,t,Kt(o),s,e)}),s[t](r,...o)}function ut(e,t,n){const o=zt(e);tt(o,"iterate",et);const s=o[t](...n);return-1!==s&&!1!==s||!Ht(n[0])?s:(n[0]=zt(n[0]),o[t](...n))}function dt(e,t,n=[]){He(),Ne();const o=zt(e)[t].apply(e,n);return Pe(),ze(),o}const pt=o("__proto__,__v_isRef,__isVue"),ft=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(_));function ht(e){_(e)||(e=String(e));const t=zt(this);return tt(t,"has",e),t.hasOwnProperty(e)}class mt{constructor(e=!1,t=!1){this._isReadonly=e,this._isShallow=t}get(e,t,n){if("__v_skip"===t)return e.__v_skip;const o=this._isReadonly,s=this._isShallow;if("__v_isReactive"===t)return!o;if("__v_isReadonly"===t)return o;if("__v_isShallow"===t)return s;if("__v_raw"===t)return n===(o?s?Mt:It:s?Pt:Nt).get(e)||Object.getPrototypeOf(e)===Object.getPrototypeOf(n)?e:void 0;const r=h(e);if(!o){let e;if(r&&(e=rt[t]))return e;if("hasOwnProperty"===t)return ht}const i=Reflect.get(e,t,Jt(e)?e:n);return(_(t)?ft.has(t):pt(t))?i:(o||tt(e,"get",t),s?i:Jt(i)?r&&j(t)?i:i.value:x(i)?o?$t(i):Lt(i):i)}}class gt extends mt{constructor(e=!1){super(!1,e)}set(e,t,n,o){let s=e[t];if(!this._isShallow){const t=Vt(s);if(qt(n)||Vt(n)||(s=zt(s),n=zt(n)),!h(e)&&Jt(s)&&!Jt(n))return!t&&(s.value=n,!0)}const r=h(e)&&j(t)?Number(t)<e.length:f(e,t),i=Reflect.set(e,t,n,Jt(e)?e:o);return e===zt(o)&&(r?F(n,s)&&nt(e,"set",t,n,s):nt(e,"add",t,n)),i}deleteProperty(e,t){const n=f(e,t),o=e[t],s=Reflect.deleteProperty(e,t);return s&&n&&nt(e,"delete",t,void 0,o),s}has(e,t){const n=Reflect.has(e,t);return _(t)&&ft.has(t)||tt(e,"has",t),n}ownKeys(e){return tt(e,"iterate",h(e)?"length":Ye),Reflect.ownKeys(e)}}class vt extends mt{constructor(e=!1){super(!0,e)}set(e,t){return String(t),!0}deleteProperty(e,t){return String(t),!0}}const yt=new gt,bt=new vt,_t=new gt(!0),xt=new vt(!0),St=e=>e,wt=e=>Reflect.getPrototypeOf(e);function kt(e){return function(...t){t[0]&&t[0];M(e),zt(this);return"delete"!==e&&("clear"===e?void 0:this)}}function Ct(e,t){const n={get(n){const o=this.__v_raw,s=zt(o),r=zt(n);e||(F(n,r)&&tt(s,"get",n),tt(s,"get",r));const{has:i}=wt(s),a=t?St:e?Gt:Kt;return i.call(s,n)?a(o.get(n)):i.call(s,r)?a(o.get(r)):void(o!==s&&o.get(n))},get size(){const t=this.__v_raw;return!e&&tt(zt(t),"iterate",Ye),Reflect.get(t,"size",t)},has(t){const n=this.__v_raw,o=zt(n),s=zt(t);return e||(F(t,s)&&tt(o,"has",t),tt(o,"has",s)),t===s?n.has(t):n.has(t)||n.has(s)},forEach(n,o){const s=this,r=s.__v_raw,i=zt(r),a=t?St:e?Gt:Kt;return!e&&tt(i,"iterate",Ye),r.forEach(((e,t)=>n.call(o,a(e),a(t),s)))}};u(n,e?{add:kt("add"),set:kt("set"),delete:kt("delete"),clear:kt("clear")}:{add(e){t||qt(e)||Vt(e)||(e=zt(e));const n=zt(this);return wt(n).has.call(n,e)||(n.add(e),nt(n,"add",e,e)),this},set(e,n){t||qt(n)||Vt(n)||(n=zt(n));const o=zt(this),{has:s,get:r}=wt(o);let i=s.call(o,e);i?Ot(o,s,e):(e=zt(e),i=s.call(o,e));const a=r.call(o,e);return o.set(e,n),i?F(n,a)&&nt(o,"set",e,n,a):nt(o,"add",e,n),this},delete(e){const t=zt(this),{has:n,get:o}=wt(t);let s=n.call(t,e);s?Ot(t,n,e):(e=zt(e),s=n.call(t,e));const r=o?o.call(t,e):void 0,i=t.delete(e);return s&&nt(t,"delete",e,void 0,r),i},clear(){const e=zt(this),t=0!==e.size,n=m(e)?new Map(e):new Set(e),o=e.clear();return t&&nt(e,"clear",void 0,void 0,n),o}});return["keys","values","entries",Symbol.iterator].forEach((o=>{n[o]=function(e,t,n){return function(...o){const s=this.__v_raw,r=zt(s),i=m(r),a="entries"===e||e===Symbol.iterator&&i,l="keys"===e&&i,c=s[e](...o),u=n?St:t?Gt:Kt;return!t&&tt(r,"iterate",l?Qe:Ye),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:a?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}(o,e,t)})),n}function Et(e,t){const n=Ct(e,t);return(t,o,s)=>"__v_isReactive"===o?!e:"__v_isReadonly"===o?e:"__v_raw"===o?t:Reflect.get(f(n,o)&&o in t?n:t,o,s)}const jt={get:Et(!1,!1)},Tt={get:Et(!1,!0)},At={get:Et(!0,!1)},Rt={get:Et(!0,!0)};function Ot(e,t,n){const o=zt(n);if(o!==n&&t.call(e,o)){C(e)}}const Nt=new WeakMap,Pt=new WeakMap,It=new WeakMap,Mt=new WeakMap;function Lt(e){return Vt(e)?e:Bt(e,!1,yt,jt,Nt)}function Ft(e){return Bt(e,!1,_t,Tt,Pt)}function $t(e){return Bt(e,!0,bt,At,It)}function Dt(e){return Bt(e,!0,xt,Rt,Mt)}function Bt(e,t,n,o,s){if(!x(e))return String(e),e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const r=s.get(e);if(r)return r;const i=(a=e).__v_skip||!Object.isExtensible(a)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}(C(a));var a;if(0===i)return e;const l=new Proxy(e,2===i?o:n);return s.set(e,l),l}function Ut(e){return Vt(e)?Ut(e.__v_raw):!(!e||!e.__v_isReactive)}function Vt(e){return!(!e||!e.__v_isReadonly)}function qt(e){return!(!e||!e.__v_isShallow)}function Ht(e){return!!e&&!!e.__v_raw}function zt(e){const t=e&&e.__v_raw;return t?zt(t):e}function Wt(e){return!f(e,"__v_skip")&&Object.isExtensible(e)&&D(e,"__v_skip",!0),e}const Kt=e=>x(e)?Lt(e):e,Gt=e=>x(e)?$t(e):e;function Jt(e){return!!e&&!0===e.__v_isRef}function Zt(e){return Yt(e,!1)}function Xt(e){return Yt(e,!0)}function Yt(e,t){return Jt(e)?e:new Qt(e,t)}class Qt{constructor(e,t){this.dep=new Je,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=t?e:zt(e),this._value=t?e:Kt(e),this.__v_isShallow=t}get value(){return this.dep.track({target:this,type:"get",key:"value"}),this._value}set value(e){const t=this._rawValue,n=this.__v_isShallow||qt(e)||Vt(e);e=n?e:zt(e),F(e,t)&&(this._rawValue=e,this._value=n?e:Kt(e),this.dep.trigger({target:this,type:"set",key:"value",newValue:e,oldValue:t}))}}function en(e){e.dep&&e.dep.trigger({target:e,type:"set",key:"value",newValue:e._value})}function tn(e){return Jt(e)?e.value:e}function nn(e){return y(e)?e():tn(e)}const on={get:(e,t,n)=>"__v_raw"===t?e:tn(Reflect.get(e,t,n)),set:(e,t,n,o)=>{const s=e[t];return Jt(s)&&!Jt(n)?(s.value=n,!0):Reflect.set(e,t,n,o)}};function sn(e){return Ut(e)?e:new Proxy(e,on)}class rn{constructor(e){this.__v_isRef=!0,this._value=void 0;const t=this.dep=new Je,{get:n,set:o}=e(t.track.bind(t),t.trigger.bind(t));this._get=n,this._set=o}get value(){return this._value=this._get()}set value(e){this._set(e)}}function an(e){return new rn(e)}function ln(e){Ht(e);const t=h(e)?new Array(e.length):{};for(const n in e)t[n]=pn(e,n);return t}class cn{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0,this._value=void 0}get value(){const e=this._object[this._key];return this._value=void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}get dep(){return function(e,t){const n=Xe.get(e);return n&&n.get(t)}(zt(this._object),this._key)}}class un{constructor(e){this._getter=e,this.__v_isRef=!0,this.__v_isReadonly=!0,this._value=void 0}get value(){return this._value=this._getter()}}function dn(e,t,n){return Jt(e)?e:y(e)?new un(e):x(e)&&arguments.length>1?pn(e,t,n):Zt(e)}function pn(e,t,n){const o=e[t];return Jt(o)?o:new cn(e,t,n)}class fn{constructor(e,t,n){this.fn=e,this.setter=t,this._value=void 0,this.dep=new Je(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=Ke-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!t,this.isSSR=n}notify(){if(this.flags|=16,!(8&this.flags)&&xe!==this)return Oe(this,!0),!0}get value(){const e=this.dep.track({target:this,type:"get",key:"value"});return Fe(this),e&&(e.version=this.dep.version),this._value}set value(e){this.setter&&this.setter(e)}}const hn={GET:"get",HAS:"has",ITERATE:"iterate"},mn={SET:"set",ADD:"add",DELETE:"delete",CLEAR:"clear"},gn={},vn=new WeakMap;let yn;function bn(){return yn}function _n(e,t=!1,n=yn){if(n){let t=vn.get(n);t||vn.set(n,t=[]),t.push(e)}}function xn(e,t=1/0,n){if(t<=0||!x(e)||e.__v_skip)return e;if((n=n||new Set).has(e))return e;if(n.add(e),t--,Jt(e))xn(e.value,t,n);else if(h(e))for(let o=0;o<e.length;o++)xn(e[o],t,n);else if(g(e)||m(e))e.forEach((e=>{xn(e,t,n)}));else if(E(e)){for(const o in e)xn(e[o],t,n);for(const o of Object.getOwnPropertySymbols(e))Object.prototype.propertyIsEnumerable.call(e,o)&&xn(e[o],t,n)}return e}const Sn=[];function wn(e){Sn.push(e)}function kn(){Sn.pop()}let Cn=!1;function En(e,...t){if(Cn)return;Cn=!0,He();const n=Sn.length?Sn[Sn.length-1].component:null,o=n&&n.appContext.config.warnHandler,s=function(){let e=Sn[Sn.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}();if(o)Nn(o,n,11,[e+t.map((e=>{var t,n;return null!=(n=null==(t=e.toString)?void 0:t.call(e))?n:JSON.stringify(e)})).join(""),n&&n.proxy,s.map((({vnode:e})=>`at <${ml(n,e.type)}>`)).join("\n"),s]);else{const n=[`[Vue warn]: ${e}`,...t];s.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=!!e.component&&null==e.component.parent,s=` at <${ml(e.component,e.type,o)}`,r=">"+n;return e.props?[s,...jn(e.props),r]:[s+r]}(e))})),t}(s))}ze(),Cn=!1}function jn(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...Tn(n,e[n]))})),n.length>3&&t.push(" ..."),t}function Tn(e,t,n){return b(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:Jt(t)?(t=Tn(e,zt(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):y(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=zt(t),n?t:[`${e}=`,t])}function An(e,t){void 0!==e&&("number"!=typeof e?En(`${t} is not a valid number - got ${JSON.stringify(e)}.`):isNaN(e)&&En(`${t} is NaN - the duration expression might be incorrect.`))}const Rn={SETUP_FUNCTION:0,0:"SETUP_FUNCTION",RENDER_FUNCTION:1,1:"RENDER_FUNCTION",NATIVE_EVENT_HANDLER:5,5:"NATIVE_EVENT_HANDLER",COMPONENT_EVENT_HANDLER:6,6:"COMPONENT_EVENT_HANDLER",VNODE_HOOK:7,7:"VNODE_HOOK",DIRECTIVE_HOOK:8,8:"DIRECTIVE_HOOK",TRANSITION_HOOK:9,9:"TRANSITION_HOOK",APP_ERROR_HANDLER:10,10:"APP_ERROR_HANDLER",APP_WARN_HANDLER:11,11:"APP_WARN_HANDLER",FUNCTION_REF:12,12:"FUNCTION_REF",ASYNC_COMPONENT_LOADER:13,13:"ASYNC_COMPONENT_LOADER",SCHEDULER:14,14:"SCHEDULER",COMPONENT_UPDATE:15,15:"COMPONENT_UPDATE",APP_UNMOUNT_CLEANUP:16,16:"APP_UNMOUNT_CLEANUP"},On={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush",15:"component update",16:"app unmount cleanup function"};function Nn(e,t,n,o){try{return o?e(...o):e()}catch(e){In(e,t,n)}}function Pn(e,t,n,o){if(y(e)){const s=Nn(e,t,n,o);return s&&S(s)&&s.catch((e=>{In(e,t,n)})),s}if(h(e)){const s=[];for(let r=0;r<e.length;r++)s.push(Pn(e[r],t,n,o));return s}En("Invalid value type passed to callWithAsyncErrorHandling(): "+typeof e)}function In(e,t,n,o=!0){const r=t?t.vnode:null,{errorHandler:i,throwUnhandledErrorInProduction:a}=t&&t.appContext.config||s;if(t){let o=t.parent;const s=t.proxy,r=On[n];for(;o;){const t=o.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,s,r))return;o=o.parent}if(i)return He(),Nn(i,null,10,[e,s,r]),void ze()}!function(e,t,n,o=!0){{const s=On[t];if(n&&wn(n),En("Unhandled error"+(s?` during execution of ${s}`:"")),n&&kn(),o)throw e}}(e,n,r,o,a)}const Mn=[];let Ln=-1;const Fn=[];let $n=null,Dn=0;const Bn=Promise.resolve();let Un=null;const Vn=100;function qn(e){const t=Un||Bn;return e?t.then(this?e.bind(this):e):t}function Hn(e){if(!(1&e.flags)){const t=Jn(e),n=Mn[Mn.length-1];!n||!(2&e.flags)&&t>=Jn(n)?Mn.push(e):Mn.splice(function(e){let t=Ln+1,n=Mn.length;for(;t<n;){const o=t+n>>>1,s=Mn[o],r=Jn(s);r<e||r===e&&2&s.flags?t=o+1:n=o}return t}(t),0,e),e.flags|=1,zn()}}function zn(){Un||(Un=Bn.then(Zn))}function Wn(e){h(e)?Fn.push(...e):$n&&-1===e.id?$n.splice(Dn+1,0,e):1&e.flags||(Fn.push(e),e.flags|=1),zn()}function Kn(e,t,n=Ln+1){for(t=t||new Map;n<Mn.length;n++){const o=Mn[n];if(o&&2&o.flags){if(e&&o.id!==e.uid)continue;if(Xn(t,o))continue;Mn.splice(n,1),n--,4&o.flags&&(o.flags&=-2),o(),4&o.flags||(o.flags&=-2)}}}function Gn(e){if(Fn.length){const t=[...new Set(Fn)].sort(((e,t)=>Jn(e)-Jn(t)));if(Fn.length=0,$n)return void $n.push(...t);for($n=t,e=e||new Map,Dn=0;Dn<$n.length;Dn++){const t=$n[Dn];Xn(e,t)||(4&t.flags&&(t.flags&=-2),8&t.flags||t(),t.flags&=-2)}$n=null,Dn=0}}const Jn=e=>null==e.id?2&e.flags?-1:1/0:e.id;function Zn(e){e=e||new Map;const t=t=>Xn(e,t);try{for(Ln=0;Ln<Mn.length;Ln++){const e=Mn[Ln];if(e&&!(8&e.flags)){if(t(e))continue;4&e.flags&&(e.flags&=-2),Nn(e,e.i,e.i?15:14),4&e.flags||(e.flags&=-2)}}}finally{for(;Ln<Mn.length;Ln++){const e=Mn[Ln];e&&(e.flags&=-2)}Ln=-1,Mn.length=0,Gn(e),Un=null,(Mn.length||Fn.length)&&Zn(e)}}function Xn(e,t){const n=e.get(t)||0;if(n>Vn){const e=t.i,n=e&&hl(e.type);return In(`Maximum recursive updates exceeded${n?` in component <${n}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}return e.set(t,n+1),!1}let Yn=!1;const Qn=new Map;q().__VUE_HMR_RUNTIME__={createRecord:so(to),rerender:so((function(e,t){const n=eo.get(e);if(!n)return;n.initialDef.render=t,[...n.instances].forEach((e=>{t&&(e.render=t,no(e.type).render=t),e.renderCache=[],Yn=!0,e.update(),Yn=!1}))})),reload:so((function(e,t){const n=eo.get(e);if(!n)return;t=no(t),oo(n.initialDef,t);const o=[...n.instances];for(let e=0;e<o.length;e++){const s=o[e],r=no(s.type);let i=Qn.get(r);i||(r!==n.initialDef&&oo(r,t),Qn.set(r,i=new Set)),i.add(s),s.appContext.propsCache.delete(s.type),s.appContext.emitsCache.delete(s.type),s.appContext.optionsCache.delete(s.type),s.ceReload?(i.add(s),s.ceReload(t.styles),i.delete(s)):s.parent?Hn((()=>{Yn=!0,s.parent.update(),Yn=!1,i.delete(s)})):s.appContext.reload?s.appContext.reload():"undefined"!=typeof window&&window.location.reload(),s.root.ce&&s!==s.root&&s.root.ce._removeChildStyle(r)}Wn((()=>{Qn.clear()}))}))};const eo=new Map;function to(e,t){return!eo.has(e)&&(eo.set(e,{initialDef:no(t),instances:new Set}),!0)}function no(e){return gl(e)?e.__vccOpts:e}function oo(e,t){u(e,t);for(const n in e)"__file"===n||n in t||delete e[n]}function so(e){return(t,n)=>{try{return e(t,n)}catch(e){}}}let ro,io=[],ao=!1;function lo(e,...t){ro?ro.emit(e,...t):ao||io.push({event:e,args:t})}function co(e,t){var n,o;if(ro=e,ro)ro.enabled=!0,io.forEach((({event:e,args:t})=>ro.emit(e,...t))),io=[];else if("undefined"!=typeof window&&window.HTMLElement&&!(null==(o=null==(n=window.navigator)?void 0:n.userAgent)?void 0:o.includes("jsdom"))){(t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{co(e,t)})),setTimeout((()=>{ro||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,ao=!0,io=[])}),3e3)}else ao=!0,io=[]}const uo=mo("component:added"),po=mo("component:updated"),fo=mo("component:removed"),ho=e=>{ro&&"function"==typeof ro.cleanupBuffer&&!ro.cleanupBuffer(e)&&fo(e)};
/*! #__NO_SIDE_EFFECTS__ */
function mo(e){return t=>{lo(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}const go=yo("perf:start"),vo=yo("perf:end");function yo(e){return(t,n,o)=>{lo(e,t.appContext.app,t.uid,t,n,o)}}let bo=null,_o=null;function xo(e){const t=bo;return bo=e,_o=e&&e.type.__scopeId||null,t}function So(e){_o=e}function wo(){_o=null}const ko=e=>Co;function Co(e,t=bo,n){if(!t)return e;if(e._n)return e;const o=(...n)=>{o._d&&xa(-1);const s=xo(t);let r;try{r=e(...n)}finally{xo(s),o._d&&xa(1)}return po(t),r};return o._n=!0,o._c=!0,o._d=!0,o}function Eo(e){A(e)&&En("Do not use built-in directive ids as custom directive id: "+e)}function jo(e,t){if(null===bo)return En("withDirectives can only be used inside render functions."),e;const n=dl(bo),o=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[r,i,a,l=s]=t[e];r&&(y(r)&&(r={mounted:r,updated:r}),r.deep&&xn(i),o.push({dir:r,instance:n,value:i,oldValue:void 0,arg:a,modifiers:l}))}return e}function To(e,t,n,o){const s=e.dirs,r=t&&t.dirs;for(let i=0;i<s.length;i++){const a=s[i];r&&(a.oldValue=r[i].value);let l=a.dir[o];l&&(He(),Pn(l,n,8,[e.el,a,e,t]),ze())}}const Ao=Symbol("_vte"),Ro=e=>e.__isTeleport,Oo=e=>e&&(e.disabled||""===e.disabled),No=e=>e&&(e.defer||""===e.defer),Po=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,Io=e=>"function"==typeof MathMLElement&&e instanceof MathMLElement,Mo=(e,t)=>{const n=e&&e.to;if(b(n)){if(t){const o=t(n);return o||Oo(e)||En(`Failed to locate Teleport target with selector "${n}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`),o}return En("Current renderer does not support string target for Teleports. (missing querySelector renderer option)"),null}return n||Oo(e)||En(`Invalid Teleport target: ${n}`),n},Lo={name:"Teleport",__isTeleport:!0,process(e,t,n,o,s,r,i,a,l,c){const{mc:u,pc:d,pbc:p,o:{insert:f,querySelector:h,createText:m,createComment:g}}=c,v=Oo(t.props);let{shapeFlag:y,children:b,dynamicChildren:_}=t;if(Yn&&(l=!1,_=null),null==e){const e=t.el=g("teleport start"),c=t.anchor=g("teleport end");f(e,n,o),f(c,n,o);const d=(e,t)=>{16&y&&(s&&s.isCE&&(s.ce._teleportTarget=e),u(b,e,t,s,r,i,a,l))},p=()=>{const e=t.target=Mo(t.props,h),n=Bo(e,t,m,f);e?("svg"!==i&&Po(e)?i="svg":"mathml"!==i&&Io(e)&&(i="mathml"),v||(d(e,n),Do(t,!1))):v||En("Invalid Teleport target on mount:",e,`(${typeof e})`)};v&&(d(n,c),Do(t,!0)),No(t.props)?Si((()=>{p(),t.el.__isMounted=!0}),r):p()}else{if(No(t.props)&&!e.el.__isMounted)return void Si((()=>{Lo.process(e,t,n,o,s,r,i,a,l,c),delete e.el.__isMounted}),r);t.el=e.el,t.targetStart=e.targetStart;const u=t.anchor=e.anchor,f=t.target=e.target,m=t.targetAnchor=e.targetAnchor,g=Oo(e.props),y=g?n:f,b=g?u:m;if("svg"===i||Po(f)?i="svg":("mathml"===i||Io(f))&&(i="mathml"),_?(p(e.dynamicChildren,_,y,s,r,i,a),Ai(e,t,!0)):l||d(e,t,y,b,s,r,i,a,!1),v)g?t.props&&e.props&&t.props.to!==e.props.to&&(t.props.to=e.props.to):Fo(t,n,u,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=Mo(t.props,h);e?Fo(t,e,null,c,0):En("Invalid Teleport target on update:",f,`(${typeof f})`)}else g&&Fo(t,f,m,c,1);Do(t,v)}},remove(e,t,n,{um:o,o:{remove:s}},r){const{shapeFlag:i,children:a,anchor:l,targetStart:c,targetAnchor:u,target:d,props:p}=e;if(d&&(s(c),s(u)),r&&s(l),16&i){const e=r||!Oo(p);for(let s=0;s<a.length;s++){const r=a[s];o(r,t,n,e,!!r.dynamicChildren)}}},move:Fo,hydrate:function(e,t,n,o,s,r,{o:{nextSibling:i,parentNode:a,querySelector:l,insert:c,createText:u}},d){const p=t.target=Mo(t.props,l);if(p){const l=Oo(t.props),f=p._lpa||p.firstChild;if(16&t.shapeFlag)if(l)t.anchor=d(i(e),t,a(e),n,o,s,r),t.targetStart=f,t.targetAnchor=f&&i(f);else{t.anchor=i(e);let a=f;for(;a;){if(a&&8===a.nodeType)if("teleport start anchor"===a.data)t.targetStart=a;else if("teleport anchor"===a.data){t.targetAnchor=a,p._lpa=t.targetAnchor&&i(t.targetAnchor);break}a=i(a)}t.targetAnchor||Bo(p,t,u,c),d(f&&i(f),t,p,n,o,s,r)}Do(t,l)}return t.anchor&&i(t.anchor)}};function Fo(e,t,n,{o:{insert:o},m:s},r=2){0===r&&o(e.targetAnchor,t,n);const{el:i,anchor:a,shapeFlag:l,children:c,props:u}=e,d=2===r;if(d&&o(i,t,n),(!d||Oo(u))&&16&l)for(let e=0;e<c.length;e++)s(c[e],t,n,2);d&&o(a,t,n)}const $o=Lo;function Do(e,t){const n=e.ctx;if(n&&n.ut){let o,s;for(t?(o=e.el,s=e.anchor):(o=e.targetStart,s=e.targetAnchor);o&&o!==s;)1===o.nodeType&&o.setAttribute("data-v-owner",n.uid),o=o.nextSibling;n.ut()}}function Bo(e,t,n,o){const s=t.targetStart=n(""),r=t.targetAnchor=n("");return s[Ao]=r,e&&(o(s,e),o(r,e)),r}const Uo=Symbol("_leaveCb"),Vo=Symbol("_enterCb");function qo(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Bs((()=>{e.isMounted=!0})),qs((()=>{e.isUnmounting=!0})),e}const Ho=[Function,Array],zo={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Ho,onEnter:Ho,onAfterEnter:Ho,onEnterCancelled:Ho,onBeforeLeave:Ho,onLeave:Ho,onAfterLeave:Ho,onLeaveCancelled:Ho,onBeforeAppear:Ho,onAppear:Ho,onAfterAppear:Ho,onAppearCancelled:Ho},Wo=e=>{const t=e.subTree;return t.component?Wo(t.component):t};function Ko(e){let t=e[0];if(e.length>1){let n=!1;for(const o of e)if(o.type!==fa){if(n){En("<transition> can only be used on a single element or component. Use <transition-group> for lists.");break}t=o,n=!0}}return t}const Go={name:"BaseTransition",props:zo,setup(e,{slots:t}){const n=Ka(),o=qo();return()=>{const s=t.default&&es(t.default(),!0);if(!s||!s.length)return;const r=Ko(s),i=zt(e),{mode:a}=i;if(a&&"in-out"!==a&&"out-in"!==a&&"default"!==a&&En(`invalid <transition> mode: ${a}`),o.isLeaving)return Xo(r);const l=Yo(r);if(!l)return Xo(r);let c=Zo(l,i,o,n,(e=>c=e));l.type!==fa&&Qo(l,c);let u=n.subTree&&Yo(n.subTree);if(u&&u.type!==fa&&!Ea(l,u)&&Wo(n).type!==fa){let e=Zo(u,i,o,n);if(Qo(u,e),"out-in"===a&&l.type!==fa)return o.isLeaving=!0,e.afterLeave=()=>{o.isLeaving=!1,8&n.job.flags||n.update(),delete e.afterLeave,u=void 0},Xo(r);"in-out"===a&&l.type!==fa?e.delayLeave=(e,t,n)=>{Jo(o,u)[String(u.key)]=u,e[Uo]=()=>{t(),e[Uo]=void 0,delete c.delayedLeave,u=void 0},c.delayedLeave=()=>{n(),delete c.delayedLeave,u=void 0}}:u=void 0}else u&&(u=void 0);return r}}};function Jo(e,t){const{leavingVNodes:n}=e;let o=n.get(t.type);return o||(o=Object.create(null),n.set(t.type,o)),o}function Zo(e,t,n,o,s){const{appear:r,mode:i,persisted:a=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:p,onLeave:f,onAfterLeave:m,onLeaveCancelled:g,onBeforeAppear:v,onAppear:y,onAfterAppear:b,onAppearCancelled:_}=t,x=String(e.key),S=Jo(n,e),w=(e,t)=>{e&&Pn(e,o,9,t)},k=(e,t)=>{const n=t[1];w(e,t),h(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},C={mode:i,persisted:a,beforeEnter(t){let o=l;if(!n.isMounted){if(!r)return;o=v||l}t[Uo]&&t[Uo](!0);const s=S[x];s&&Ea(e,s)&&s.el[Uo]&&s.el[Uo](),w(o,[t])},enter(e){let t=c,o=u,s=d;if(!n.isMounted){if(!r)return;t=y||c,o=b||u,s=_||d}let i=!1;const a=e[Vo]=t=>{i||(i=!0,w(t?s:o,[e]),C.delayedLeave&&C.delayedLeave(),e[Vo]=void 0)};t?k(t,[e,a]):a()},leave(t,o){const s=String(e.key);if(t[Vo]&&t[Vo](!0),n.isUnmounting)return o();w(p,[t]);let r=!1;const i=t[Uo]=n=>{r||(r=!0,o(),w(n?g:m,[t]),t[Uo]=void 0,S[s]===e&&delete S[s])};S[s]=e,f?k(f,[t,i]):i()},clone(e){const r=Zo(e,t,n,o,s);return s&&s(r),r}};return C}function Xo(e){if(Ts(e))return(e=Pa(e)).children=null,e}function Yo(e){if(!Ts(e))return Ro(e.type)&&e.children?Ko(e.children):e;if(e.component)return e.component.subTree;const{shapeFlag:t,children:n}=e;if(n){if(16&t)return n[0];if(32&t&&y(n.default))return n.default()}}function Qo(e,t){6&e.shapeFlag&&e.component?(e.transition=t,Qo(e.component.subTree,t)):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function es(e,t=!1,n){let o=[],s=0;for(let r=0;r<e.length;r++){let i=e[r];const a=null==n?i.key:String(n)+String(null!=i.key?i.key:r);i.type===da?(128&i.patchFlag&&s++,o=o.concat(es(i.children,t,a))):(t||i.type!==fa)&&o.push(null!=a?Pa(i,{key:a}):i)}if(s>1)for(let e=0;e<o.length;e++)o[e].patchFlag=-2;return o}
/*! #__NO_SIDE_EFFECTS__ */function ts(e,t){return y(e)?(()=>u({name:e.name},t,{setup:e}))():e}function ns(){const e=Ka();return e?(e.appContext.config.idPrefix||"v")+"-"+e.ids[0]+e.ids[1]++:(En("useId() is called when there is no active component instance to be associated with."),"")}function os(e){e.ids=[e.ids[0]+e.ids[2]+++"-",0,0]}const ss=new WeakSet;function rs(e){const t=Ka(),n=Xt(null);if(t){const o=t.refs===s?t.refs={}:t.refs;let r;(r=Object.getOwnPropertyDescriptor(o,e))&&!r.configurable?En(`useTemplateRef('${e}') already exists.`):Object.defineProperty(o,e,{enumerable:!0,get:()=>n.value,set:e=>n.value=e})}else En("useTemplateRef() is called when there is no active component instance to be associated with.");const o=$t(n);return ss.add(o),o}function is(e,t,n,o,r=!1){if(h(e))return void e.forEach(((e,s)=>is(e,t&&(h(t)?t[s]:t),n,o,r)));if(Cs(o)&&!r)return void(512&o.shapeFlag&&o.type.__asyncResolved&&o.component.subTree.component&&is(e,t,n,o.component.subTree));const i=4&o.shapeFlag?dl(o.component):o.el,a=r?null:i,{i:l,r:c}=e;if(!l)return void En("Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.");const u=t&&t.r,p=l.refs===s?l.refs={}:l.refs,m=l.setupState,g=zt(m),v=m===s?()=>!1:e=>(f(g,e)&&!Jt(g[e])&&En(`Template ref "${e}" used on a non-ref value. It will not work in the production build.`),!ss.has(g[e])&&f(g,e));if(null!=u&&u!==c&&(b(u)?(p[u]=null,v(u)&&(m[u]=null)):Jt(u)&&(u.value=null)),y(c))Nn(c,l,12,[a,p]);else{const t=b(c),o=Jt(c);if(t||o){const s=()=>{if(e.f){const n=t?v(c)?m[c]:p[c]:c.value;r?h(n)&&d(n,i):h(n)?n.includes(i)||n.push(i):t?(p[c]=[i],v(c)&&(m[c]=p[c])):(c.value=[i],e.k&&(p[e.k]=c.value))}else t?(p[c]=a,v(c)&&(m[c]=a)):o?(c.value=a,e.k&&(p[e.k]=a)):En("Invalid template ref type:",c,`(${typeof c})`)};a?(s.id=-1,Si(s,n)):s()}else En("Invalid template ref type:",c,`(${typeof c})`)}}let as=!1;const ls=()=>{as||(as=!0)},cs=e=>{if(1===e.nodeType)return(e=>e.namespaceURI.includes("svg")&&"foreignObject"!==e.tagName)(e)?"svg":(e=>e.namespaceURI.includes("MathML"))(e)?"mathml":void 0},us=e=>8===e.nodeType;function ds(e){const{mt:t,p:n,o:{patchProp:o,createText:s,nextSibling:r,parentNode:i,remove:a,insert:c,createComment:u}}=e,d=(n,o,a,l,u,b=!1)=>{b=b||!!o.dynamicChildren;const _=us(n)&&"["===n.data,x=()=>m(n,o,a,l,u,_),{type:S,ref:w,shapeFlag:k,patchFlag:C}=o;let E=n.nodeType;o.el=n,D(n,"__vnode",o,!0),D(n,"__vueParentComponent",a,!0),-2===C&&(b=!1,o.dynamicChildren=null);let j=null;switch(S){case pa:3!==E?""===o.children?(c(o.el=s(""),i(n),n),j=n):j=x():(n.data!==o.children&&(En("Hydration text mismatch in",n.parentNode,`\n  - rendered on server: ${JSON.stringify(n.data)}\n  - expected on client: ${JSON.stringify(o.children)}`),ls(),n.data=o.children),j=r(n));break;case fa:y(n)?(j=r(n),v(o.el=n.content.firstChild,n,a)):j=8!==E||_?x():r(n);break;case ha:if(_&&(E=(n=r(n)).nodeType),1===E||3===E){j=n;const e=!o.children.length;for(let t=0;t<o.staticCount;t++)e&&(o.children+=1===j.nodeType?j.outerHTML:j.data),t===o.staticCount-1&&(o.anchor=j),j=r(j);return _?r(j):j}x();break;case da:j=_?h(n,o,a,l,u,b):x();break;default:if(1&k)j=1===E&&o.type.toLowerCase()===n.tagName.toLowerCase()||y(n)?p(n,o,a,l,u,b):x();else if(6&k){o.slotScopeIds=u;const e=i(n);if(j=_?g(n):us(n)&&"teleport start"===n.data?g(n,n.data,"teleport end"):r(n),t(o,e,null,a,l,cs(e),b),Cs(o)&&!o.type.__asyncResolved){let t;_?(t=Oa(da),t.anchor=j?j.previousSibling:e.lastChild):t=3===n.nodeType?Ma(""):Oa("div"),t.el=n,o.component.subTree=t}}else 64&k?j=8!==E?x():o.type.hydrate(n,o,a,l,u,b,e,f):128&k?j=o.type.hydrate(n,o,a,l,cs(i(n)),u,b,e,d):En("Invalid HostVNode type:",S,`(${typeof S})`)}return null!=w&&is(w,null,l,o),j},p=(e,t,n,s,r,i)=>{i=i||!!t.dynamicChildren;const{type:c,props:u,patchFlag:d,shapeFlag:p,dirs:h,transition:m}=t,g="input"===c||"option"===c;{h&&To(t,null,n,"created");let c,d=!1;if(y(e)){d=Ti(null,m)&&n&&n.vnode.props&&n.vnode.props.appear;const o=e.content.firstChild;d&&m.beforeEnter(o),v(o,e,n),t.el=e=o}if(16&p&&(!u||!u.innerHTML&&!u.textContent)){let o=f(e.firstChild,t,e,n,s,r,i),l=!1;for(;o;){ys(e,1)||(l||(En("Hydration children mismatch on",e,"\nServer rendered element contains more child nodes than client vdom."),l=!0),ls());const t=o;o=o.nextSibling,a(t)}}else if(8&p){let n=t.children;"\n"!==n[0]||"PRE"!==e.tagName&&"TEXTAREA"!==e.tagName||(n=n.slice(1)),e.textContent!==n&&(ys(e,0)||(En("Hydration text content mismatch on",e,`\n  - rendered on server: ${e.textContent}\n  - expected on client: ${t.children}`),ls()),e.textContent=t.children)}if(u){const s=e.tagName.includes("-");for(const r in u)h&&h.some((e=>e.dir.created))||!ps(e,r,u[r],t,n)||ls(),(g&&(r.endsWith("value")||"indeterminate"===r)||l(r)&&!T(r)||"."===r[0]||s)&&o(e,r,null,u[r],void 0,n)}(c=u&&u.onVnodeBeforeMount)&&Va(c,n,t),h&&To(t,null,n,"beforeMount"),((c=u&&u.onVnodeMounted)||h||d)&&ca((()=>{c&&Va(c,n,t),d&&m.enter(e),h&&To(t,null,n,"mounted")}),s)}return e.nextSibling},f=(e,t,o,i,a,l,u)=>{u=u||!!t.dynamicChildren;const p=t.children,f=p.length;let h=!1;for(let t=0;t<f;t++){const m=u?p[t]:p[t]=$a(p[t]),g=m.type===pa;e?(g&&!u&&t+1<f&&$a(p[t+1]).type===pa&&(c(s(e.data.slice(m.children.length)),o,r(e)),e.data=m.children),e=d(e,m,i,a,l,u)):g&&!m.children?c(m.el=s(""),o):(ys(o,1)||(h||(En("Hydration children mismatch on",o,"\nServer rendered element contains fewer child nodes than client vdom."),h=!0),ls()),n(null,m,o,null,i,a,cs(o),l))}return e},h=(e,t,n,o,s,a)=>{const{slotScopeIds:l}=t;l&&(s=s?s.concat(l):l);const d=i(e),p=f(r(e),t,d,n,o,s,a);return p&&us(p)&&"]"===p.data?r(t.anchor=p):(ls(),c(t.anchor=u("]"),d,p),p)},m=(e,t,o,s,l,c)=>{if(ys(e.parentElement,1)||(En("Hydration node mismatch:\n- rendered on server:",e,3===e.nodeType?"(text)":us(e)&&"["===e.data?"(start of fragment)":"","\n- expected on client:",t.type),ls()),t.el=null,c){const t=g(e);for(;;){const n=r(e);if(!n||n===t)break;a(n)}}const u=r(e),d=i(e);return a(e),n(null,t,d,u,o,s,cs(d),l),o&&(o.vnode.el=t.el,ta(o,t.el)),u},g=(e,t="[",n="]")=>{let o=0;for(;e;)if((e=r(e))&&us(e)&&(e.data===t&&o++,e.data===n)){if(0===o)return r(e);o--}return e},v=(e,t,n)=>{const o=t.parentNode;o&&o.replaceChild(e,t);let s=n;for(;s;)s.vnode.el===t&&(s.vnode.el=s.subTree.el=e),s=s.parent},y=e=>1===e.nodeType&&"TEMPLATE"===e.tagName;return[(e,t)=>{if(!t.hasChildNodes())return En("Attempting to hydrate existing markup but container is empty. Performing full mount instead."),n(null,e,t),Gn(),void(t._vnode=e);d(t.firstChild,e,null,null,null),Gn(),t._vnode=e},d]}function ps(e,t,n,o,s){let r,i,a,l;if("class"===t)a=e.getAttribute("class"),l=Q(n),function(e,t){if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0}(fs(a||""),fs(l))||(r=2,i="class");else if("style"===t){a=e.getAttribute("style")||"",l=b(n)?n:function(e){if(!e)return"";if(b(e))return e;let t="";for(const n in e){const o=e[n];(b(o)||"number"==typeof o)&&(t+=`${n.startsWith("--")?n:I(n)}:${o};`)}return t}(G(n));const t=hs(a),c=hs(l);if(o.dirs)for(const{dir:e,value:t}of o.dirs)"show"!==e.name||t||c.set("display","none");s&&ms(s,o,c),function(e,t){if(e.size!==t.size)return!1;for(const[n,o]of e)if(o!==t.get(n))return!1;return!0}(t,c)||(r=3,i="style")}else(e instanceof SVGElement&&ue(t)||e instanceof HTMLElement&&(ae(t)||ce(t)))&&(ae(t)?(a=e.hasAttribute(t),l=le(n)):null==n?(a=e.hasAttribute(t),l=!1):(a=e.hasAttribute(t)?e.getAttribute(t):"value"===t&&"TEXTAREA"===e.tagName&&e.value,l=!!function(e){if(null==e)return!1;const t=typeof e;return"string"===t||"number"===t||"boolean"===t}(n)&&String(n)),a!==l&&(r=4,i=t));if(null!=r&&!ys(e,r)){const t=e=>!1===e?"(not rendered)":`${i}="${e}"`;return En(`Hydration ${vs[r]} mismatch on`,e,`\n  - rendered on server: ${t(a)}\n  - expected on client: ${t(l)}\n  Note: this mismatch is check-only. The DOM will not be rectified in production due to performance overhead.\n  You should fix the source of the mismatch.`),!0}return!1}function fs(e){return new Set(e.trim().split(/\s+/))}function hs(e){const t=new Map;for(const n of e.split(";")){let[e,o]=n.split(":");e=e.trim(),o=o&&o.trim(),e&&o&&t.set(e,o)}return t}function ms(e,t,n){const o=e.subTree;if(e.getCssVars&&(t===o||o&&o.type===da&&o.children.includes(t))){const t=e.getCssVars();for(const e in t)n.set(`--${pe(e)}`,String(t[e]))}t===o&&e.parent&&ms(e.parent,e.vnode,n)}const gs="data-allow-mismatch",vs={0:"text",1:"children",2:"class",3:"style",4:"attribute"};function ys(e,t){if(0===t||1===t)for(;e&&!e.hasAttribute(gs);)e=e.parentElement;const n=e&&e.getAttribute(gs);if(null==n)return!1;if(""===n)return!0;{const e=n.split(",");return!(0!==t||!e.includes("children"))||n.split(",").includes(vs[t])}}const bs=q().requestIdleCallback||(e=>setTimeout(e,1)),_s=q().cancelIdleCallback||(e=>clearTimeout(e)),xs=(e=1e4)=>t=>{const n=bs(t,{timeout:e});return()=>_s(n)};const Ss=e=>(t,n)=>{const o=new IntersectionObserver((e=>{for(const n of e)if(n.isIntersecting){o.disconnect(),t();break}}),e);return n((e=>{if(e instanceof Element)return function(e){const{top:t,left:n,bottom:o,right:s}=e.getBoundingClientRect(),{innerHeight:r,innerWidth:i}=window;return(t>0&&t<r||o>0&&o<r)&&(n>0&&n<i||s>0&&s<i)}(e)?(t(),o.disconnect(),!1):void o.observe(e)})),()=>o.disconnect()},ws=e=>t=>{if(e){const n=matchMedia(e);if(!n.matches)return n.addEventListener("change",t,{once:!0}),()=>n.removeEventListener("change",t);t()}},ks=(e=[])=>(t,n)=>{b(e)&&(e=[e]);let o=!1;const s=e=>{o||(o=!0,r(),t(),e.target.dispatchEvent(new e.constructor(e.type,e)))},r=()=>{n((t=>{for(const n of e)t.removeEventListener(n,s)}))};return n((t=>{for(const n of e)t.addEventListener(n,s,{once:!0})})),r};const Cs=e=>!!e.type.__asyncLoader
/*! #__NO_SIDE_EFFECTS__ */;function Es(e){y(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:o,delay:s=200,hydrate:r,timeout:i,suspensible:a=!0,onError:l}=e;let c,u=null,d=0;const p=()=>{let e;return u||(e=u=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),l)return new Promise(((t,n)=>{l(e,(()=>t((d++,u=null,p()))),(()=>n(e)),d+1)}));throw e})).then((t=>{if(e!==u&&u)return u;if(t||En("Async component loader resolved to undefined. If you are using retry(), make sure to return its return value."),t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),t&&!x(t)&&!y(t))throw new Error(`Invalid async component load result: ${t}`);return c=t,t})))};return ts({name:"AsyncComponentWrapper",__asyncLoader:p,__asyncHydrate(e,t,n){const o=r?()=>{const o=r(n,(t=>function(e,t){if(us(e)&&"["===e.data){let n=1,o=e.nextSibling;for(;o;){if(1===o.nodeType){if(!1===t(o))break}else if(us(o))if("]"===o.data){if(0==--n)break}else"["===o.data&&n++;o=o.nextSibling}}else t(e)}(e,t)));o&&(t.bum||(t.bum=[])).push(o)}:n;c?o():p().then((()=>!t.isUnmounted&&o()))},get __asyncResolved(){return c},setup(){const e=Wa;if(os(e),c)return()=>js(c,e);const t=t=>{u=null,In(t,e,13,!o)};if(a&&e.suspense||ol)return p().then((t=>()=>js(t,e))).catch((e=>(t(e),()=>o?Oa(o,{error:e}):null)));const r=Zt(!1),l=Zt(),d=Zt(!!s);return s&&setTimeout((()=>{d.value=!1}),s),null!=i&&setTimeout((()=>{if(!r.value&&!l.value){const e=new Error(`Async component timed out after ${i}ms.`);t(e),l.value=e}}),i),p().then((()=>{r.value=!0,e.parent&&Ts(e.parent.vnode)&&e.parent.update()})).catch((e=>{t(e),l.value=e})),()=>r.value&&c?js(c,e):l.value&&o?Oa(o,{error:l.value}):n&&!d.value?Oa(n):void 0}})}function js(e,t){const{ref:n,props:o,children:s,ce:r}=t.vnode,i=Oa(e,o,s);return i.ref=n,i.ce=r,delete t.vnode.ce,i}const Ts=e=>e.type.__isKeepAlive,As={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=Ka(),o=n.ctx;if(!o.renderer)return()=>{const e=t.default&&t.default();return e&&1===e.length?e[0]:e};const s=new Map,r=new Set;let i=null;n.__v_cache=s;const a=n.suspense,{renderer:{p:l,m:c,um:u,o:{createElement:d}}}=o,p=d("div");function f(e){Ms(e),u(e,n,a,!0)}function h(e){s.forEach(((t,n)=>{const o=hl(t.type);o&&!e(o)&&m(n)}))}function m(e){const t=s.get(e);!t||i&&Ea(t,i)?i&&Ms(i):f(t),s.delete(e),r.delete(e)}o.activate=(e,t,n,o,s)=>{const r=e.component;c(e,t,n,0,a),l(r.vnode,e,t,n,r,a,o,e.slotScopeIds,s),Si((()=>{r.isDeactivated=!1,r.a&&$(r.a);const t=e.props&&e.props.onVnodeMounted;t&&Va(t,r.parent,e)}),a),uo(r)},o.deactivate=e=>{const t=e.component;Oi(t.m),Oi(t.a),c(e,p,null,1,a),Si((()=>{t.da&&$(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&Va(n,t.parent,e),t.isDeactivated=!0}),a),uo(t)},Fi((()=>[e.include,e.exclude]),(([e,t])=>{e&&h((t=>Rs(e,t))),t&&h((e=>!Rs(t,e)))}),{flush:"post",deep:!0});let g=null;const v=()=>{null!=g&&(na(n.subTree.type)?Si((()=>{s.set(g,Ls(n.subTree))}),n.subTree.suspense):s.set(g,Ls(n.subTree)))};return Bs(v),Vs(v),qs((()=>{s.forEach((e=>{const{subTree:t,suspense:o}=n,s=Ls(t);if(e.type!==s.type||e.key!==s.key)f(e);else{Ms(s);const e=s.component.da;e&&Si(e,o)}}))})),()=>{if(g=null,!t.default)return i=null;const n=t.default(),o=n[0];if(n.length>1)return En("KeepAlive should contain exactly one component child."),i=null,n;if(!(Ca(o)&&(4&o.shapeFlag||128&o.shapeFlag)))return i=null,o;let a=Ls(o);if(a.type===fa)return i=null,a;const l=a.type,c=hl(Cs(a)?a.type.__asyncResolved||{}:l),{include:u,exclude:d,max:p}=e;if(u&&(!c||!Rs(u,c))||d&&c&&Rs(d,c))return a.shapeFlag&=-257,i=a,o;const f=null==a.key?l:a.key,h=s.get(f);return a.el&&(a=Pa(a),128&o.shapeFlag&&(o.ssContent=a)),g=f,h?(a.el=h.el,a.component=h.component,a.transition&&Qo(a,a.transition),a.shapeFlag|=512,r.delete(f),r.add(f)):(r.add(f),p&&r.size>parseInt(p,10)&&m(r.values().next().value)),a.shapeFlag|=256,i=a,na(o.type)?o:a}}};function Rs(e,t){return h(e)?e.some((e=>Rs(e,t))):b(e)?e.split(",").includes(t):"[object RegExp]"===k(e)&&(e.lastIndex=0,e.test(t))}function Os(e,t){Ps(e,"a",t)}function Ns(e,t){Ps(e,"da",t)}function Ps(e,t,n=Wa){const o=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(Fs(t,o,n),n){let e=n.parent;for(;e&&e.parent;)Ts(e.parent.vnode)&&Is(o,t,n,e),e=e.parent}}function Is(e,t,n,o){const s=Fs(t,e,o,!0);Hs((()=>{d(o[t],s)}),n)}function Ms(e){e.shapeFlag&=-257,e.shapeFlag&=-513}function Ls(e){return 128&e.shapeFlag?e.ssContent:e}function Fs(e,t,n=Wa,o=!1){if(n){const s=n[e]||(n[e]=[]),r=t.__weh||(t.__weh=(...o)=>{He();const s=Za(n),r=Pn(t,n,e,o);return s(),ze(),r});return o?s.unshift(r):s.push(r),r}En(`${L(On[e].replace(/ hook$/,""))} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`)}const $s=e=>(t,n=Wa)=>{ol&&"sp"!==e||Fs(e,((...e)=>t(...e)),n)},Ds=$s("bm"),Bs=$s("m"),Us=$s("bu"),Vs=$s("u"),qs=$s("bum"),Hs=$s("um"),zs=$s("sp"),Ws=$s("rtg"),Ks=$s("rtc");function Gs(e,t=Wa){Fs("ec",e,t)}const Js="components",Zs="directives";function Xs(e,t){return tr(Js,e,!0,t)||e}const Ys=Symbol.for("v-ndc");function Qs(e){return b(e)?tr(Js,e,!1)||e:e||Ys}function er(e){return tr(Zs,e)}function tr(e,t,n=!0,o=!1){const s=bo||Wa;if(s){const r=s.type;if(e===Js){const e=hl(r,!1);if(e&&(e===t||e===N(t)||e===M(N(t))))return r}const i=nr(s[e]||r[e],t)||nr(s.appContext[e],t);if(!i&&o)return r;if(n&&!i){const n=e===Js?"\nIf this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.":"";En(`Failed to resolve ${e.slice(0,-1)}: ${t}${n}`)}return i}En(`resolve${M(e.slice(0,-1))} can only be used in render() or setup().`)}function nr(e,t){return e&&(e[t]||e[N(t)]||e[M(N(t))])}function or(e,t,n,o){let s;const r=n&&n[o],i=h(e);if(i||b(e)){let n=!1;i&&Ut(e)&&(n=!qt(e),e=st(e)),s=new Array(e.length);for(let o=0,i=e.length;o<i;o++)s[o]=t(n?Kt(e[o]):e[o],o,void 0,r&&r[o])}else if("number"==typeof e){Number.isInteger(e)||En(`The v-for range expect an integer value but got ${e}.`),s=new Array(e);for(let n=0;n<e;n++)s[n]=t(n+1,n,void 0,r&&r[n])}else if(x(e))if(e[Symbol.iterator])s=Array.from(e,((e,n)=>t(e,n,void 0,r&&r[n])));else{const n=Object.keys(e);s=new Array(n.length);for(let o=0,i=n.length;o<i;o++){const i=n[o];s[o]=t(e[i],i,o,r&&r[o])}}else s=[];return n&&(n[o]=s),s}function sr(e,t){for(let n=0;n<t.length;n++){const o=t[n];if(h(o))for(let t=0;t<o.length;t++)e[o[t].name]=o[t].fn;else o&&(e[o.name]=o.key?(...e)=>{const t=o.fn(...e);return t&&(t.key=o.key),t}:o.fn)}return e}function rr(e,t,n={},o,s){if(bo.ce||bo.parent&&Cs(bo.parent)&&bo.parent.ce)return"default"!==t&&(n.name=t),va(),ka(da,null,[Oa("slot",n,o&&o())],64);let r=e[t];r&&r.length>1&&(En("SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template."),r=()=>[]),r&&r._c&&(r._d=!1),va();const i=r&&ir(r(n)),a=n.key||i&&i.key,l=ka(da,{key:(a&&!_(a)?a:`_${t}`)+(!i&&o?"_fb":"")},i||(o?o():[]),i&&1===e._?64:-2);return!s&&l.scopeId&&(l.slotScopeIds=[l.scopeId+"-s"]),r&&r._c&&(r._d=!0),l}function ir(e){return e.some((e=>!Ca(e)||e.type!==fa&&!(e.type===da&&!ir(e.children))))?e:null}function ar(e,t){const n={};if(!x(e))return En("v-on with no argument expects an object value."),n;for(const o in e)n[t&&/[A-Z]/.test(o)?`on:${o}`:L(o)]=e[o];return n}const lr=e=>e?el(e)?dl(e):lr(e.parent):null,cr=u(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>Dt(e.props),$attrs:e=>Dt(e.attrs),$slots:e=>Dt(e.slots),$refs:e=>Dt(e.refs),$parent:e=>lr(e.parent),$root:e=>lr(e.root),$host:e=>e.ce,$emit:e=>e.emit,$options:e=>Ir(e),$forceUpdate:e=>e.f||(e.f=()=>{Hn(e.update)}),$nextTick:e=>e.n||(e.n=qn.bind(e.proxy)),$watch:e=>Di.bind(e)}),ur=e=>"_"===e||"$"===e,dr=(e,t)=>e!==s&&!e.__isScriptSetup&&f(e,t),pr={get({_:e},t){if("__v_skip"===t)return!0;const{ctx:n,setupState:o,data:r,props:i,accessCache:a,type:l,appContext:c}=e;if("__isVue"===t)return!0;let u;if("$"!==t[0]){const l=a[t];if(void 0!==l)switch(l){case 1:return o[t];case 2:return r[t];case 4:return n[t];case 3:return i[t]}else{if(dr(o,t))return a[t]=1,o[t];if(r!==s&&f(r,t))return a[t]=2,r[t];if((u=e.propsOptions[0])&&f(u,t))return a[t]=3,i[t];if(n!==s&&f(n,t))return a[t]=4,n[t];Rr&&(a[t]=0)}}const d=cr[t];let p,h;return d?("$attrs"===t?(tt(e.attrs,"get",""),Ki()):"$slots"===t&&tt(e,"get",t),d(e)):(p=l.__cssModules)&&(p=p[t])?p:n!==s&&f(n,t)?(a[t]=4,n[t]):(h=c.config.globalProperties,f(h,t)?h[t]:void(!bo||b(t)&&0===t.indexOf("__v")||(r!==s&&ur(t[0])&&f(r,t)?En(`Property ${JSON.stringify(t)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`):e===bo&&En(`Property ${JSON.stringify(t)} was accessed during render but is not defined on instance.`))))},set({_:e},t,n){const{data:o,setupState:r,ctx:i}=e;return dr(r,t)?(r[t]=n,!0):r.__isScriptSetup&&f(r,t)?(En(`Cannot mutate <script setup> binding "${t}" from Options API.`),!1):o!==s&&f(o,t)?(o[t]=n,!0):f(e.props,t)?(En(`Attempting to mutate prop "${t}". Props are readonly.`),!1):"$"===t[0]&&t.slice(1)in e?(En(`Attempting to mutate public property "${t}". Properties starting with $ are reserved and readonly.`),!1):(t in e.appContext.config.globalProperties?Object.defineProperty(i,t,{enumerable:!0,configurable:!0,value:n}):i[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:o,appContext:r,propsOptions:i}},a){let l;return!!n[a]||e!==s&&f(e,a)||dr(t,a)||(l=i[0])&&f(l,a)||f(o,a)||f(cr,a)||f(r.config.globalProperties,a)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:f(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)},ownKeys:e=>(En("Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead."),Reflect.ownKeys(e))},fr=u({},pr,{get(e,t){if(t!==Symbol.unscopables)return pr.get(e,t,e)},has(e,t){const n="_"!==t[0]&&!W(t);return!n&&pr.has(e,t)&&En(`Property ${JSON.stringify(t)} should not start with _ which is a reserved prefix for Vue internals.`),n}});const hr=e=>En(`${e}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);function mr(){return hr("defineProps"),null}function gr(){return hr("defineEmits"),null}function vr(e){hr("defineExpose")}function yr(e){hr("defineOptions")}function br(){return hr("defineSlots"),null}function _r(){hr("defineModel")}function xr(e,t){return hr("withDefaults"),null}function Sr(){return kr().slots}function wr(){return kr().attrs}function kr(){const e=Ka();return e||En("useContext() called without active instance."),e.setupContext||(e.setupContext=ul(e))}function Cr(e){return h(e)?e.reduce(((e,t)=>(e[t]=null,e)),{}):e}function Er(e,t){const n=Cr(e);for(const e in t){if(e.startsWith("__skip"))continue;let o=n[e];o?h(o)||y(o)?o=n[e]={type:o,default:t[e]}:o.default=t[e]:null===o?o=n[e]={default:t[e]}:En(`props default key "${e}" has no corresponding declaration.`),o&&t[`__skip_${e}`]&&(o.skipFactory=!0)}return n}function jr(e,t){return e&&t?h(e)&&h(t)?e.concat(t):u({},Cr(e),Cr(t)):e||t}function Tr(e,t){const n={};for(const o in e)t.includes(o)||Object.defineProperty(n,o,{enumerable:!0,get:()=>e[o]});return n}function Ar(e){const t=Ka();t||En("withAsyncContext called without active current instance. This is likely a bug.");let n=e();return Xa(),S(n)&&(n=n.catch((e=>{throw Za(t),e}))),[n,()=>Za(t)]}let Rr=!0;function Or(e){const t=Ir(e),n=e.proxy,o=e.ctx;Rr=!1,t.beforeCreate&&Nr(t.beforeCreate,e,"bc");const{data:s,computed:r,methods:a,watch:l,provide:c,inject:u,created:d,beforeMount:p,mounted:f,beforeUpdate:m,updated:g,activated:v,deactivated:b,beforeDestroy:_,beforeUnmount:w,destroyed:k,unmounted:C,render:E,renderTracked:j,renderTriggered:T,errorCaptured:A,serverPrefetch:R,expose:O,inheritAttrs:N,components:P,directives:I,filters:M}=t,L=function(){const e=Object.create(null);return(t,n)=>{e[n]?En(`${t} property "${n}" is already defined in ${e[n]}.`):e[n]=t}}();{const[t]=e.propsOptions;if(t)for(const e in t)L("Props",e)}if(u&&function(e,t,n=i){h(e)&&(e=$r(e));for(const o in e){const s=e[o];let r;r=x(s)?"default"in s?Kr(s.from||o,s.default,!0):Kr(s.from||o):Kr(s),Jt(r)?Object.defineProperty(t,o,{enumerable:!0,configurable:!0,get:()=>r.value,set:e=>r.value=e}):t[o]=r,n("Inject",o)}}(u,o,L),a)for(const e in a){const t=a[e];y(t)?(Object.defineProperty(o,e,{value:t.bind(n),configurable:!0,enumerable:!0,writable:!0}),L("Methods",e)):En(`Method "${e}" has type "${typeof t}" in the component definition. Did you reference the function correctly?`)}if(s){y(s)||En("The data option must be a function. Plain object usage is no longer supported.");const t=s.call(n,n);if(S(t)&&En("data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>."),x(t)){e.data=Lt(t);for(const e in t)L("Data",e),ur(e[0])||Object.defineProperty(o,e,{configurable:!0,enumerable:!0,get:()=>t[e],set:i})}else En("data() should return an object.")}if(Rr=!0,r)for(const e in r){const t=r[e],s=y(t)?t.bind(n,n):y(t.get)?t.get.bind(n,n):i;s===i&&En(`Computed property "${e}" has no getter.`);const a=!y(t)&&y(t.set)?t.set.bind(n):()=>{En(`Write operation failed: computed property "${e}" is readonly.`)},l=vl({get:s,set:a});Object.defineProperty(o,e,{enumerable:!0,configurable:!0,get:()=>l.value,set:e=>l.value=e}),L("Computed",e)}if(l)for(const e in l)Pr(l[e],o,n,e);if(c){const e=y(c)?c.call(n):c;Reflect.ownKeys(e).forEach((t=>{Wr(t,e[t])}))}function F(e,t){h(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(d&&Nr(d,e,"c"),F(Ds,p),F(Bs,f),F(Us,m),F(Vs,g),F(Os,v),F(Ns,b),F(Gs,A),F(Ks,j),F(Ws,T),F(qs,w),F(Hs,C),F(zs,R),h(O))if(O.length){const t=e.exposed||(e.exposed={});O.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});E&&e.render===i&&(e.render=E),null!=N&&(e.inheritAttrs=N),P&&(e.components=P),I&&(e.directives=I),R&&os(e)}function Nr(e,t,n){Pn(h(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function Pr(e,t,n,o){let s=o.includes(".")?Bi(n,o):()=>n[o];if(b(e)){const n=t[e];y(n)?Fi(s,n):En(`Invalid watch handler specified by key "${e}"`,n)}else if(y(e))Fi(s,e.bind(n));else if(x(e))if(h(e))e.forEach((e=>Pr(e,t,n,o)));else{const o=y(e.handler)?e.handler.bind(n):t[e.handler];y(o)?Fi(s,o,e):En(`Invalid watch handler specified by key "${e.handler}"`,o)}else En(`Invalid watch option: "${o}"`,e)}function Ir(e){const t=e.type,{mixins:n,extends:o}=t,{mixins:s,optionsCache:r,config:{optionMergeStrategies:i}}=e.appContext,a=r.get(t);let l;return a?l=a:s.length||n||o?(l={},s.length&&s.forEach((e=>Mr(l,e,i,!0))),Mr(l,t,i)):l=t,x(t)&&r.set(t,l),l}function Mr(e,t,n,o=!1){const{mixins:s,extends:r}=t;r&&Mr(e,r,n,!0),s&&s.forEach((t=>Mr(e,t,n,!0)));for(const s in t)if(o&&"expose"===s)En('"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.');else{const o=Lr[s]||n&&n[s];e[s]=o?o(e[s],t[s]):t[s]}return e}const Lr={data:Fr,props:Ur,emits:Ur,methods:Br,computed:Br,beforeCreate:Dr,created:Dr,beforeMount:Dr,mounted:Dr,beforeUpdate:Dr,updated:Dr,beforeDestroy:Dr,beforeUnmount:Dr,destroyed:Dr,unmounted:Dr,activated:Dr,deactivated:Dr,errorCaptured:Dr,serverPrefetch:Dr,components:Br,directives:Br,watch:function(e,t){if(!e)return t;if(!t)return e;const n=u(Object.create(null),e);for(const o in t)n[o]=Dr(e[o],t[o]);return n},provide:Fr,inject:function(e,t){return Br($r(e),$r(t))}};function Fr(e,t){return t?e?function(){return u(y(e)?e.call(this,this):e,y(t)?t.call(this,this):t)}:t:e}function $r(e){if(h(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Dr(e,t){return e?[...new Set([].concat(e,t))]:t}function Br(e,t){return e?u(Object.create(null),e,t):t}function Ur(e,t){return e?h(e)&&h(t)?[...new Set([...e,...t])]:u(Object.create(null),Cr(e),Cr(null!=t?t:{})):t}function Vr(){return{app:null,config:{isNativeTag:a,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let qr=0;function Hr(e,t){return function(n,o=null){y(n)||(n=u({},n)),null==o||x(o)||(En("root props passed to app.mount() must be an object."),o=null);const s=Vr(),r=new WeakSet,i=[];let a=!1;const l=s.app={_uid:qr++,_component:n,_props:o,_container:null,_context:s,_instance:null,version:Sl,get config(){return s.config},set config(e){En("app.config cannot be replaced. Modify individual options instead.")},use:(e,...t)=>(r.has(e)?En("Plugin has already been applied to target app."):e&&y(e.install)?(r.add(e),e.install(l,...t)):y(e)?(r.add(e),e(l,...t)):En('A plugin must either be a function or an object with an "install" function.'),l),mixin:e=>(s.mixins.includes(e)?En("Mixin has already been applied to target app"+(e.name?`: ${e.name}`:"")):s.mixins.push(e),l),component:(e,t)=>(Qa(e,s.config),t?(s.components[e]&&En(`Component "${e}" has already been registered in target app.`),s.components[e]=t,l):s.components[e]),directive:(e,t)=>(Eo(e),t?(s.directives[e]&&En(`Directive "${e}" has already been registered in target app.`),s.directives[e]=t,l):s.directives[e]),mount(r,i,c){if(!a){r.__vue_app__&&En("There is already an app instance mounted on the host container.\n If you want to mount another app on the same host container, you need to unmount the previous app by calling `app.unmount()` first.");const u=l._ceVNode||Oa(n,o);return u.appContext=s,!0===c?c="svg":!1===c&&(c=void 0),s.reload=()=>{e(Pa(u),r,c)},i&&t?t(u,r):e(u,r,c),a=!0,l._container=r,r.__vue_app__=l,l._instance=u.component,function(e,t){lo("app:init",e,t,{Fragment:da,Text:pa,Comment:fa,Static:ha})}(l,Sl),dl(u.component)}En("App has already been mounted.\nIf you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. `const createMyApp = () => createApp(App)`")},onUnmount(e){"function"!=typeof e&&En("Expected function as first argument to app.onUnmount(), but got "+typeof e),i.push(e)},unmount(){a?(Pn(i,l._instance,16),e(null,l._container),l._instance=null,function(e){lo("app:unmount",e)}(l),delete l._container.__vue_app__):En("Cannot unmount an app that is not mounted.")},provide:(e,t)=>(e in s.provides&&En(`App already provides property with key "${String(e)}". It will be overwritten with the new value.`),s.provides[e]=t,l),runWithContext(e){const t=zr;zr=l;try{return e()}finally{zr=t}}};return l}}let zr=null;function Wr(e,t){if(Wa){let n=Wa.provides;const o=Wa.parent&&Wa.parent.provides;o===n&&(n=Wa.provides=Object.create(o)),n[e]=t}else En("provide() can only be used inside setup().")}function Kr(e,t,n=!1){const o=Wa||bo;if(o||zr){const s=zr?zr._context.provides:o?null==o.parent?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides:void 0;if(s&&e in s)return s[e];if(arguments.length>1)return n&&y(t)?t.call(o&&o.proxy):t;En(`injection "${String(e)}" not found.`)}else En("inject() can only be used inside setup() or functional components.")}function Gr(){return!!(Wa||bo||zr)}const Jr={},Zr=()=>Object.create(Jr),Xr=e=>Object.getPrototypeOf(e)===Jr;function Yr(e,t,n,o){const[r,i]=e.propsOptions;let a,l=!1;if(t)for(let s in t){if(T(s))continue;const c=t[s];let u;r&&f(r,u=N(s))?i&&i.includes(u)?(a||(a={}))[u]=c:n[u]=c:zi(e.emitsOptions,s)||s in o&&c===o[s]||(o[s]=c,l=!0)}if(i){const t=zt(n),o=a||s;for(let s=0;s<i.length;s++){const a=i[s];n[a]=Qr(r,t,a,o[a],e,!f(o,a))}}return l}function Qr(e,t,n,o,s,r){const i=e[n];if(null!=i){const e=f(i,"default");if(e&&void 0===o){const e=i.default;if(i.type!==Function&&!i.skipFactory&&y(e)){const{propsDefaults:r}=s;if(n in r)o=r[n];else{const i=Za(s);o=r[n]=e.call(null,t),i()}}else o=e;s.ce&&s.ce._setProp(n,o)}i[0]&&(r&&!e?o=!1:!i[1]||""!==o&&o!==I(n)||(o=!0))}return o}const ei=new WeakMap;function ti(e,t,n=!1){const o=n?ei:t.propsCache,i=o.get(e);if(i)return i;const a=e.props,l={},c=[];let d=!1;if(!y(e)){const o=e=>{d=!0;const[n,o]=ti(e,t,!0);u(l,n),o&&c.push(...o)};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}if(!a&&!d)return x(e)&&o.set(e,r),r;if(h(a))for(let e=0;e<a.length;e++){b(a[e])||En("props must be strings when using array syntax.",a[e]);const t=N(a[e]);ni(t)&&(l[t]=s)}else if(a){x(a)||En("invalid props options",a);for(const e in a){const t=N(e);if(ni(t)){const n=a[e],o=l[t]=h(n)||y(n)?{type:n}:u({},n),s=o.type;let r=!1,i=!0;if(h(s))for(let e=0;e<s.length;++e){const t=s[e],n=y(t)&&t.name;if("Boolean"===n){r=!0;break}"String"===n&&(i=!1)}else r=y(s)&&"Boolean"===s.name;o[0]=r,o[1]=i,(r||f(o,"default"))&&c.push(t)}}}const p=[l,c];return x(e)&&o.set(e,p),p}function ni(e){return"$"!==e[0]&&!T(e)||(En(`Invalid prop name: "${e}" is a reserved property.`),!1)}function oi(e,t,n){const o=zt(t),s=n.propsOptions[0],r=Object.keys(e).map((e=>N(e)));for(const e in s){let t=s[e];null!=t&&si(e,o[e],t,Dt(o),!r.includes(e))}}function si(e,t,n,o,s){const{type:r,required:i,validator:a,skipCheck:l}=n;if(i&&s)En('Missing required prop: "'+e+'"');else if(null!=t||i){if(null!=r&&!0!==r&&!l){let n=!1;const o=h(r)?r:[r],s=[];for(let e=0;e<o.length&&!n;e++){const{valid:r,expectedType:i}=ii(t,o[e]);s.push(i||""),n=r}if(!n)return void En(function(e,t,n){if(0===n.length)return`Prop type [] for prop "${e}" won't match anything. Did you mean to use type Array instead?`;let o=`Invalid prop: type check failed for prop "${e}". Expected ${n.map(M).join(" | ")}`;const s=n[0],r=C(t),i=ai(t,s),a=ai(t,r);1===n.length&&li(s)&&!function(...e){return e.some((e=>"boolean"===e.toLowerCase()))}(s,r)&&(o+=` with value ${i}`);o+=`, got ${r} `,li(r)&&(o+=`with value ${a}.`);return o}(e,t,s))}a&&!a(t,o)&&En('Invalid prop: custom validator check failed for prop "'+e+'".')}}const ri=o("String,Number,Boolean,Function,Symbol,BigInt");function ii(e,t){let n;const o=function(e){if(null===e)return"null";if("function"==typeof e)return e.name||"";if("object"==typeof e)return e.constructor&&e.constructor.name||"";return""}(t);if("null"===o)n=null===e;else if(ri(o)){const s=typeof e;n=s===o.toLowerCase(),n||"object"!==s||(n=e instanceof t)}else n="Object"===o?x(e):"Array"===o?h(e):e instanceof t;return{valid:n,expectedType:o}}function ai(e,t){return"String"===t?`"${e}"`:"Number"===t?`${Number(e)}`:`${e}`}function li(e){return["string","number","boolean"].some((t=>e.toLowerCase()===t))}const ci=e=>"_"===e[0]||"$stable"===e,ui=e=>h(e)?e.map($a):[$a(e)],di=(e,t,n)=>{if(t._n)return t;const o=Co(((...o)=>(!Wa||n&&n.root!==Wa.root||En(`Slot "${e}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`),ui(t(...o)))),n);return o._c=!1,o},pi=(e,t,n)=>{const o=e._ctx;for(const n in e){if(ci(n))continue;const s=e[n];if(y(s))t[n]=di(n,s,o);else if(null!=s){En(`Non-function value encountered for slot "${n}". Prefer function slots for better performance.`);const e=ui(s);t[n]=()=>e}}},fi=(e,t)=>{Ts(e.vnode)||En("Non-function value encountered for default slot. Prefer function slots for better performance.");const n=ui(t);e.slots.default=()=>n},hi=(e,t,n)=>{for(const o in t)(n||"_"!==o)&&(e[o]=t[o])},mi=(e,t,n)=>{const o=e.slots=Zr();if(32&e.vnode.shapeFlag){const e=t._;e?(hi(o,t,n),n&&D(o,"_",e,!0)):pi(t,o)}else t&&fi(e,t)},gi=(e,t,n)=>{const{vnode:o,slots:r}=e;let i=!0,a=s;if(32&o.shapeFlag){const o=t._;o?Yn?(hi(r,t,n),nt(e,"set","$slots")):n&&1===o?i=!1:hi(r,t,n):(i=!t.$stable,pi(t,r)),a=t}else t&&(fi(e,t),a={default:1});if(i)for(const e in r)ci(e)||null!=a[e]||delete r[e]};let vi,yi;function bi(e,t){e.appContext.config.performance&&xi()&&yi.mark(`vue-${t}-${e.uid}`),go(e,t,xi()?yi.now():Date.now())}function _i(e,t){if(e.appContext.config.performance&&xi()){const n=`vue-${t}-${e.uid}`,o=n+":end";yi.mark(o),yi.measure(`<${ml(e,e.type)}> ${t}`,n,o),yi.clearMarks(n),yi.clearMarks(o)}vo(e,t,xi()?yi.now():Date.now())}function xi(){return void 0!==vi||("undefined"!=typeof window&&window.performance?(vi=!0,yi=window.performance):vi=!1),vi}const Si=ca;function wi(e){return Ci(e)}function ki(e){return Ci(e,ds)}function Ci(e,t){const n=q();n.__VUE__=!0,co(n.__VUE_DEVTOOLS_GLOBAL_HOOK__,n);const{insert:o,remove:a,patchProp:l,createElement:c,createText:u,createComment:d,setText:p,setElementText:h,parentNode:m,nextSibling:g,setScopeId:v=i,insertStaticContent:y}=e,b=(e,t,n,o=null,s=null,r=null,i=void 0,a=null,l=!Yn&&!!t.dynamicChildren)=>{if(e===t)return;e&&!Ea(e,t)&&(o=Q(e),G(e,s,r,!0),e=null),-2===t.patchFlag&&(l=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case pa:_(e,t,n,o);break;case fa:x(e,t,n,o);break;case ha:null==e?S(t,n,o,i):w(e,t,n,i);break;case da:M(e,t,n,o,s,r,i,a,l);break;default:1&d?C(e,t,n,o,s,r,i,a,l):6&d?L(e,t,n,o,s,r,i,a,l):64&d||128&d?c.process(e,t,n,o,s,r,i,a,l,ne):En("Invalid VNode type:",c,`(${typeof c})`)}null!=u&&s&&is(u,e&&e.ref,r,t||e,!t)},_=(e,t,n,s)=>{if(null==e)o(t.el=u(t.children),n,s);else{const n=t.el=e.el;t.children!==e.children&&p(n,t.children)}},x=(e,t,n,s)=>{null==e?o(t.el=d(t.children||""),n,s):t.el=e.el},S=(e,t,n,o)=>{[e.el,e.anchor]=y(e.children,t,n,o,e.el,e.anchor)},w=(e,t,n,o)=>{if(t.children!==e.children){const s=g(e.anchor);k(e),[t.el,t.anchor]=y(t.children,n,s,o)}else t.el=e.el,t.anchor=e.anchor},k=({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=g(e),a(e),e=n;a(t)},C=(e,t,n,o,s,r,i,a,l)=>{"svg"===t.type?i="svg":"math"===t.type&&(i="mathml"),null==e?E(t,n,o,s,r,i,a,l):R(e,t,s,r,i,a,l)},E=(e,t,n,s,r,i,a,u)=>{let d,p;const{props:f,shapeFlag:m,transition:g,dirs:v}=e;if(d=e.el=c(e.type,i,f&&f.is,f),8&m?h(d,e.children):16&m&&A(e.children,d,null,s,r,Ei(e,i),a,u),v&&To(e,null,s,"created"),j(d,e,e.scopeId,a,s),f){for(const e in f)"value"===e||T(e)||l(d,e,null,f[e],i,s);"value"in f&&l(d,"value",null,f.value,i),(p=f.onVnodeBeforeMount)&&Va(p,s,e)}D(d,"__vnode",e,!0),D(d,"__vueParentComponent",s,!0),v&&To(e,null,s,"beforeMount");const y=Ti(r,g);y&&g.beforeEnter(d),o(d,t,n),((p=f&&f.onVnodeMounted)||y||v)&&Si((()=>{p&&Va(p,s,e),y&&g.enter(d),v&&To(e,null,s,"mounted")}),r)},j=(e,t,n,o,s)=>{if(n&&v(e,n),o)for(let t=0;t<o.length;t++)v(e,o[t]);if(s){let n=s.subTree;if(n.patchFlag>0&&2048&n.patchFlag&&(n=Zi(n.children)||n),t===n||na(n.type)&&(n.ssContent===t||n.ssFallback===t)){const t=s.vnode;j(e,t,t.scopeId,t.slotScopeIds,s.parent)}}},A=(e,t,n,o,s,r,i,a,l=0)=>{for(let c=l;c<e.length;c++){const l=e[c]=a?Da(e[c]):$a(e[c]);b(null,l,t,n,o,s,r,i,a)}},R=(e,t,n,o,r,i,a)=>{const c=t.el=e.el;c.__vnode=t;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const f=e.props||s,m=t.props||s;let g;if(n&&ji(n,!1),(g=m.onVnodeBeforeUpdate)&&Va(g,n,t,e),p&&To(t,e,n,"beforeUpdate"),n&&ji(n,!0),Yn&&(u=0,a=!1,d=null),(f.innerHTML&&null==m.innerHTML||f.textContent&&null==m.textContent)&&h(c,""),d?(O(e.dynamicChildren,d,c,n,o,Ei(t,r),i),Ai(e,t)):a||H(e,t,c,null,n,o,Ei(t,r),i,!1),u>0){if(16&u)P(c,f,m,n,r);else if(2&u&&f.class!==m.class&&l(c,"class",null,m.class,r),4&u&&l(c,"style",f.style,m.style,r),8&u){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const o=e[t],s=f[o],i=m[o];i===s&&"value"!==o||l(c,o,s,i,r,n)}}1&u&&e.children!==t.children&&h(c,t.children)}else a||null!=d||P(c,f,m,n,r);((g=m.onVnodeUpdated)||p)&&Si((()=>{g&&Va(g,n,t,e),p&&To(t,e,n,"updated")}),o)},O=(e,t,n,o,s,r,i)=>{for(let a=0;a<t.length;a++){const l=e[a],c=t[a],u=l.el&&(l.type===da||!Ea(l,c)||70&l.shapeFlag)?m(l.el):n;b(l,c,u,null,o,s,r,i,!0)}},P=(e,t,n,o,r)=>{if(t!==n){if(t!==s)for(const s in t)T(s)||s in n||l(e,s,t[s],null,r,o);for(const s in n){if(T(s))continue;const i=n[s],a=t[s];i!==a&&"value"!==s&&l(e,s,a,i,r,o)}"value"in n&&l(e,"value",t.value,n.value,r)}},M=(e,t,n,s,r,i,a,l,c)=>{const d=t.el=e?e.el:u(""),p=t.anchor=e?e.anchor:u("");let{patchFlag:f,dynamicChildren:h,slotScopeIds:m}=t;(Yn||2048&f)&&(f=0,c=!1,h=null),m&&(l=l?l.concat(m):m),null==e?(o(d,n,s),o(p,n,s),A(t.children||[],n,p,r,i,a,l,c)):f>0&&64&f&&h&&e.dynamicChildren?(O(e.dynamicChildren,h,n,r,i,a,l),Ai(e,t)):H(e,t,n,p,r,i,a,l,c)},L=(e,t,n,o,s,r,i,a,l)=>{t.slotScopeIds=a,null==e?512&t.shapeFlag?s.ctx.activate(t,n,o,i,l):F(t,n,o,s,r,i,l):B(e,t,l)},F=(e,t,n,o,s,r,i)=>{const a=e.component=za(e,o,s);if(a.type.__hmrId&&function(e){const t=e.type.__hmrId;let n=eo.get(t);n||(to(t,e.type),n=eo.get(t)),n.instances.add(e)}(a),wn(e),bi(a,"mount"),Ts(e)&&(a.ctx.renderer=ne),bi(a,"init"),sl(a,!1,i),_i(a,"init"),a.asyncDep){if(Yn&&(e.el=null),s&&s.registerDep(a,U,i),!e.el){const e=a.subTree=Oa(fa);x(null,e,t,n)}}else U(a,e,t,n,s,r,i);kn(),_i(a,"mount")},B=(e,t,n)=>{const o=t.component=e.component;if(function(e,t,n){const{props:o,children:s,component:r}=e,{props:i,children:a,patchFlag:l}=t,c=r.emitsOptions;if((s||a)&&Yn)return!0;if(t.dirs||t.transition)return!0;if(!(n&&l>=0))return!(!s&&!a||a&&a.$stable)||o!==i&&(o?!i||ea(o,i,c):!!i);if(1024&l)return!0;if(16&l)return o?ea(o,i,c):!!i;if(8&l){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(i[n]!==o[n]&&!zi(c,n))return!0}}return!1}(e,t,n)){if(o.asyncDep&&!o.asyncResolved)return wn(t),V(o,t,n),void kn();o.next=t,o.update()}else t.el=e.el,o.vnode=t},U=(e,t,n,o,s,r,i)=>{const a=()=>{if(e.isMounted){let{next:t,bu:n,u:o,parent:l,vnode:c}=e;{const n=Ri(e);if(n)return t&&(t.el=c.el,V(e,t,i)),void n.asyncDep.then((()=>{e.isUnmounted||a()}))}let u,d=t;wn(t||e.vnode),ji(e,!1),t?(t.el=c.el,V(e,t,i)):t=c,n&&$(n),(u=t.props&&t.props.onVnodeBeforeUpdate)&&Va(u,l,t,c),ji(e,!0),bi(e,"render");const p=Gi(e);_i(e,"render");const f=e.subTree;e.subTree=p,bi(e,"patch"),b(f,p,m(f.el),Q(f),e,s,r),_i(e,"patch"),t.el=p.el,null===d&&ta(e,p.el),o&&Si(o,s),(u=t.props&&t.props.onVnodeUpdated)&&Si((()=>Va(u,l,t,c)),s),po(e),kn()}else{let i;const{el:a,props:l}=t,{bm:c,m:u,parent:d,root:p,type:f}=e,h=Cs(t);if(ji(e,!1),c&&$(c),!h&&(i=l&&l.onVnodeBeforeMount)&&Va(i,d,t),ji(e,!0),a&&se){const t=()=>{bi(e,"render"),e.subTree=Gi(e),_i(e,"render"),bi(e,"hydrate"),se(a,e.subTree,e,s,null),_i(e,"hydrate")};h&&f.__asyncHydrate?f.__asyncHydrate(a,e,t):t()}else{p.ce&&p.ce._injectChildStyle(f),bi(e,"render");const i=e.subTree=Gi(e);_i(e,"render"),bi(e,"patch"),b(null,i,n,o,e,s,r),_i(e,"patch"),t.el=i.el}if(u&&Si(u,s),!h&&(i=l&&l.onVnodeMounted)){const e=t;Si((()=>Va(i,d,e)),s)}(256&t.shapeFlag||d&&Cs(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&Si(e.a,s),e.isMounted=!0,uo(e),t=n=o=null}};e.scope.on();const l=e.effect=new je(a);e.scope.off();const c=e.update=l.run.bind(l),u=e.job=l.runIfDirty.bind(l);u.i=e,u.id=e.uid,l.scheduler=()=>Hn(u),ji(e,!0),l.onTrack=e.rtc?t=>$(e.rtc,t):void 0,l.onTrigger=e.rtg?t=>$(e.rtg,t):void 0,c()},V=(e,t,n)=>{t.component=e;const o=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,o){const{props:s,attrs:r,vnode:{patchFlag:i}}=e,a=zt(s),[l]=e.propsOptions;let c=!1;if(function(e){for(;e;){if(e.type.__hmrId)return!0;e=e.parent}}(e)||!(o||i>0)||16&i){let o;Yr(e,t,s,r)&&(c=!0);for(const r in a)t&&(f(t,r)||(o=I(r))!==r&&f(t,o))||(l?!n||void 0===n[r]&&void 0===n[o]||(s[r]=Qr(l,a,r,void 0,e,!0)):delete s[r]);if(r!==a)for(const e in r)t&&f(t,e)||(delete r[e],c=!0)}else if(8&i){const n=e.vnode.dynamicProps;for(let o=0;o<n.length;o++){let i=n[o];if(zi(e.emitsOptions,i))continue;const u=t[i];if(l)if(f(r,i))u!==r[i]&&(r[i]=u,c=!0);else{const t=N(i);s[t]=Qr(l,a,t,u,e,!1)}else u!==r[i]&&(r[i]=u,c=!0)}}c&&nt(e.attrs,"set",""),oi(t||{},s,e)}(e,t.props,o,n),gi(e,t.children,n),He(),Kn(e),ze()},H=(e,t,n,o,s,r,i,a,l=!1)=>{const c=e&&e.children,u=e?e.shapeFlag:0,d=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void W(c,d,n,o,s,r,i,a,l);if(256&p)return void z(c,d,n,o,s,r,i,a,l)}8&f?(16&u&&Y(c,s,r),d!==c&&h(n,d)):16&u?16&f?W(c,d,n,o,s,r,i,a,l):Y(c,s,r,!0):(8&u&&h(n,""),16&f&&A(d,n,o,s,r,i,a,l))},z=(e,t,n,o,s,i,a,l,c)=>{t=t||r;const u=(e=e||r).length,d=t.length,p=Math.min(u,d);let f;for(f=0;f<p;f++){const o=t[f]=c?Da(t[f]):$a(t[f]);b(e[f],o,n,null,s,i,a,l,c)}u>d?Y(e,s,i,!0,!1,p):A(t,n,o,s,i,a,l,c,p)},W=(e,t,n,o,s,i,a,l,c)=>{let u=0;const d=t.length;let p=e.length-1,f=d-1;for(;u<=p&&u<=f;){const o=e[u],r=t[u]=c?Da(t[u]):$a(t[u]);if(!Ea(o,r))break;b(o,r,n,null,s,i,a,l,c),u++}for(;u<=p&&u<=f;){const o=e[p],r=t[f]=c?Da(t[f]):$a(t[f]);if(!Ea(o,r))break;b(o,r,n,null,s,i,a,l,c),p--,f--}if(u>p){if(u<=f){const e=f+1,r=e<d?t[e].el:o;for(;u<=f;)b(null,t[u]=c?Da(t[u]):$a(t[u]),n,r,s,i,a,l,c),u++}}else if(u>f)for(;u<=p;)G(e[u],s,i,!0),u++;else{const h=u,m=u,g=new Map;for(u=m;u<=f;u++){const e=t[u]=c?Da(t[u]):$a(t[u]);null!=e.key&&(g.has(e.key)&&En("Duplicate keys found during update:",JSON.stringify(e.key),"Make sure keys are unique."),g.set(e.key,u))}let v,y=0;const _=f-m+1;let x=!1,S=0;const w=new Array(_);for(u=0;u<_;u++)w[u]=0;for(u=h;u<=p;u++){const o=e[u];if(y>=_){G(o,s,i,!0);continue}let r;if(null!=o.key)r=g.get(o.key);else for(v=m;v<=f;v++)if(0===w[v-m]&&Ea(o,t[v])){r=v;break}void 0===r?G(o,s,i,!0):(w[r-m]=u+1,r>=S?S=r:x=!0,b(o,t[r],n,null,s,i,a,l,c),y++)}const k=x?function(e){const t=e.slice(),n=[0];let o,s,r,i,a;const l=e.length;for(o=0;o<l;o++){const l=e[o];if(0!==l){if(s=n[n.length-1],e[s]<l){t[o]=s,n.push(o);continue}for(r=0,i=n.length-1;r<i;)a=r+i>>1,e[n[a]]<l?r=a+1:i=a;l<e[n[r]]&&(r>0&&(t[o]=n[r-1]),n[r]=o)}}r=n.length,i=n[r-1];for(;r-- >0;)n[r]=i,i=t[i];return n}(w):r;for(v=k.length-1,u=_-1;u>=0;u--){const e=m+u,r=t[e],p=e+1<d?t[e+1].el:o;0===w[u]?b(null,r,n,p,s,i,a,l,c):x&&(v<0||u!==k[v]?K(r,n,p,2):v--)}}},K=(e,t,n,s,r=null)=>{const{el:i,type:a,transition:l,children:c,shapeFlag:u}=e;if(6&u)return void K(e.component.subTree,t,n,s);if(128&u)return void e.suspense.move(t,n,s);if(64&u)return void a.move(e,t,n,ne);if(a===da){o(i,t,n);for(let e=0;e<c.length;e++)K(c[e],t,n,s);return void o(e.anchor,t,n)}if(a===ha)return void(({el:e,anchor:t},n,s)=>{let r;for(;e&&e!==t;)r=g(e),o(e,n,s),e=r;o(t,n,s)})(e,t,n);if(2!==s&&1&u&&l)if(0===s)l.beforeEnter(i),o(i,t,n),Si((()=>l.enter(i)),r);else{const{leave:e,delayLeave:s,afterLeave:r}=l,a=()=>o(i,t,n),c=()=>{e(i,(()=>{a(),r&&r()}))};s?s(i,a,c):c()}else o(i,t,n)},G=(e,t,n,o=!1,s=!1)=>{const{type:r,props:i,ref:a,children:l,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:p,cacheIndex:f}=e;if(-2===d&&(s=!1),null!=a&&is(a,null,n,e,!0),null!=f&&(t.renderCache[f]=void 0),256&u)return void t.ctx.deactivate(e);const h=1&u&&p,m=!Cs(e);let g;if(m&&(g=i&&i.onVnodeBeforeUnmount)&&Va(g,t,e),6&u)X(e.component,n,o);else{if(128&u)return void e.suspense.unmount(n,o);h&&To(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,ne,o):c&&!c.hasOnce&&(r!==da||d>0&&64&d)?Y(c,t,n,!1,!0):(r===da&&384&d||!s&&16&u)&&Y(l,t,n),o&&J(e)}(m&&(g=i&&i.onVnodeUnmounted)||h)&&Si((()=>{g&&Va(g,t,e),h&&To(e,null,t,"unmounted")}),n)},J=e=>{const{type:t,el:n,anchor:o,transition:s}=e;if(t===da)return void(e.patchFlag>0&&2048&e.patchFlag&&s&&!s.persisted?e.children.forEach((e=>{e.type===fa?a(e.el):J(e)})):Z(n,o));if(t===ha)return void k(e);const r=()=>{a(n),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:o}=s,i=()=>t(n,r);o?o(e.el,r,i):i()}else r()},Z=(e,t)=>{let n;for(;e!==t;)n=g(e),a(e),e=n;a(t)},X=(e,t,n)=>{e.type.__hmrId&&function(e){eo.get(e.type.__hmrId).instances.delete(e)}(e);const{bum:o,scope:s,job:r,subTree:i,um:a,m:l,a:c}=e;Oi(l),Oi(c),o&&$(o),s.stop(),r&&(r.flags|=8,G(i,e,t,n)),a&&Si(a,t),Si((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve()),ho(e)},Y=(e,t,n,o=!1,s=!1,r=0)=>{for(let i=r;i<e.length;i++)G(e[i],t,n,o,s)},Q=e=>{if(6&e.shapeFlag)return Q(e.component.subTree);if(128&e.shapeFlag)return e.suspense.next();const t=g(e.anchor||e.el),n=t&&t[Ao];return n?g(n):t};let ee=!1;const te=(e,t,n)=>{null==e?t._vnode&&G(t._vnode,null,null,!0):b(t._vnode||null,e,t,null,null,null,n),t._vnode=e,ee||(ee=!0,Kn(),Gn(),ee=!1)},ne={p:b,um:G,m:K,r:J,mt:F,mc:A,pc:H,pbc:O,n:Q,o:e};let oe,se;return t&&([oe,se]=t(ne)),{render:te,hydrate:oe,createApp:Hr(te,oe)}}function Ei({type:e,props:t},n){return"svg"===n&&"foreignObject"===e||"mathml"===n&&"annotation-xml"===e&&t&&t.encoding&&t.encoding.includes("html")?void 0:n}function ji({effect:e,job:t},n){n?(e.flags|=32,t.flags|=4):(e.flags&=-33,t.flags&=-5)}function Ti(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function Ai(e,t,n=!1){const o=e.children,s=t.children;if(h(o)&&h(s))for(let e=0;e<o.length;e++){const t=o[e];let r=s[e];1&r.shapeFlag&&!r.dynamicChildren&&((r.patchFlag<=0||32===r.patchFlag)&&(r=s[e]=Da(s[e]),r.el=t.el),n||-2===r.patchFlag||Ai(t,r)),r.type===pa&&(r.el=t.el),r.type!==fa||r.el||(r.el=t.el)}}function Ri(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:Ri(t)}function Oi(e){if(e)for(let t=0;t<e.length;t++)e[t].flags|=8}const Ni=Symbol.for("v-scx"),Pi=()=>{{const e=Kr(Ni);return e||En("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function Ii(e,t){return $i(e,null,t)}function Mi(e,t){return $i(e,null,u({},t,{flush:"post"}))}function Li(e,t){return $i(e,null,u({},t,{flush:"sync"}))}function Fi(e,t,n){return y(t)||En("`watch(fn, options?)` signature has been moved to a separate API. Use `watchEffect(fn, options?)` instead. `watch` now only supports `watch(source, cb, options?) signature."),$i(e,t,n)}function $i(e,t,n=s){const{immediate:o,deep:r,flush:a,once:l}=n;t||(void 0!==o&&En('watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.'),void 0!==r&&En('watch() "deep" option is only respected when using the watch(source, callback, options?) signature.'),void 0!==l&&En('watch() "once" option is only respected when using the watch(source, callback, options?) signature.'));const c=u({},n);c.onWarn=En;const p=t&&o||!t&&"post"!==a;let f;if(ol)if("sync"===a){const e=Pi();f=e.__watcherHandles||(e.__watcherHandles=[])}else if(!p){const e=()=>{};return e.stop=i,e.resume=i,e.pause=i,e}const m=Wa;c.call=(e,t,n)=>Pn(e,m,t,n);let g=!1;"post"===a?c.scheduler=e=>{Si(e,m&&m.suspense)}:"sync"!==a&&(g=!0,c.scheduler=(e,t)=>{t?e():Hn(e)}),c.augmentJob=e=>{t&&(e.flags|=4),g&&(e.flags|=2,m&&(e.id=m.uid,e.i=m))};const v=function(e,t,n=s){const{immediate:o,deep:r,once:a,scheduler:l,augmentJob:c,call:u}=n,p=e=>{(n.onWarn||be)("Invalid watch source: ",e,"A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.")},f=e=>r?e:qt(e)||!1===r||0===r?xn(e,1):xn(e);let m,g,v,b,_=!1,x=!1;if(Jt(e)?(g=()=>e.value,_=qt(e)):Ut(e)?(g=()=>f(e),_=!0):h(e)?(x=!0,_=e.some((e=>Ut(e)||qt(e))),g=()=>e.map((e=>Jt(e)?e.value:Ut(e)?f(e):y(e)?u?u(e,2):e():void p(e)))):y(e)?g=t?u?()=>u(e,2):e:()=>{if(v){He();try{v()}finally{ze()}}const t=yn;yn=m;try{return u?u(e,3,[b]):e(b)}finally{yn=t}}:(g=i,p(e)),t&&r){const e=g,t=!0===r?1/0:r;g=()=>xn(e(),t)}const S=ke(),w=()=>{m.stop(),S&&S.active&&d(S.effects,m)};if(a&&t){const e=t;t=(...t)=>{e(...t),w()}}let k=x?new Array(e.length).fill(gn):gn;const C=e=>{if(1&m.flags&&(m.dirty||e))if(t){const e=m.run();if(r||_||(x?e.some(((e,t)=>F(e,k[t]))):F(e,k))){v&&v();const n=yn;yn=m;try{const n=[e,k===gn?void 0:x&&k[0]===gn?[]:k,b];u?u(t,3,n):t(...n),k=e}finally{yn=n}}}else m.run()};return c&&c(C),m=new je(g),m.scheduler=l?()=>l(C,!1):C,b=e=>_n(e,!1,m),v=m.onStop=()=>{const e=vn.get(m);if(e){if(u)u(e,4);else for(const t of e)t();vn.delete(m)}},m.onTrack=n.onTrack,m.onTrigger=n.onTrigger,t?o?C(!0):k=m.run():l?l(C.bind(null,!0),!0):m.run(),w.pause=m.pause.bind(m),w.resume=m.resume.bind(m),w.stop=w,w}(e,t,c);return ol&&(f?f.push(v):p&&v()),v}function Di(e,t,n){const o=this.proxy,s=b(e)?e.includes(".")?Bi(o,e):()=>o[e]:e.bind(o,o);let r;y(t)?r=t:(r=t.handler,n=t);const i=Za(this),a=$i(s,r.bind(o),n);return i(),a}function Bi(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function Ui(e,t,n=s){const o=Ka();if(!o)return En("useModel() called without active instance."),Zt();const r=N(t);if(!o.propsOptions[0][r])return En(`useModel() called with prop "${t}" which is not declared.`),Zt();const i=I(t),a=Vi(e,r),l=an(((a,l)=>{let c,u,d=s;return Li((()=>{const t=e[r];F(c,t)&&(c=t,l())})),{get:()=>(a(),n.get?n.get(c):c),set(e){const a=n.set?n.set(e):e;if(!(F(a,c)||d!==s&&F(e,d)))return;const p=o.vnode.props;p&&(t in p||r in p||i in p)&&(`onUpdate:${t}`in p||`onUpdate:${r}`in p||`onUpdate:${i}`in p)||(c=e,l()),o.emit(`update:${t}`,a),F(e,a)&&F(e,d)&&!F(a,u)&&l(),d=e,u=a}}}));return l[Symbol.iterator]=()=>{let e=0;return{next:()=>e<2?{value:e++?a||s:l,done:!1}:{done:!0}}},l}const Vi=(e,t)=>"modelValue"===t||"model-value"===t?e.modelModifiers:e[`${t}Modifiers`]||e[`${N(t)}Modifiers`]||e[`${I(t)}Modifiers`];function qi(e,t,...n){if(e.isUnmounted)return;const o=e.vnode.props||s;{const{emitsOptions:o,propsOptions:[s]}=e;if(o)if(t in o){const e=o[t];if(y(e)){e(...n)||En(`Invalid event arguments: event validation failed for event "${t}".`)}}else s&&L(N(t))in s||En(`Component emitted event "${t}" but it is neither declared in the emits option nor as an "${L(N(t))}" prop.`)}let r=n;const i=t.startsWith("update:"),a=i&&Vi(o,t.slice(7));a&&(a.trim&&(r=n.map((e=>b(e)?e.trim():e))),a.number&&(r=n.map(B))),function(e,t,n){lo("component:emit",e.appContext.app,e,t,n)}(e,t,r);{const n=t.toLowerCase();n!==t&&o[L(n)]&&En(`Event "${n}" is emitted in component ${ml(e,e.type)} but the handler is registered for "${t}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${I(t)}" instead of "${t}".`)}let l,c=o[l=L(t)]||o[l=L(N(t))];!c&&i&&(c=o[l=L(I(t))]),c&&Pn(c,e,6,r);const u=o[l+"Once"];if(u){if(e.emitted){if(e.emitted[l])return}else e.emitted={};e.emitted[l]=!0,Pn(u,e,6,r)}}function Hi(e,t,n=!1){const o=t.emitsCache,s=o.get(e);if(void 0!==s)return s;const r=e.emits;let i={},a=!1;if(!y(e)){const o=e=>{const n=Hi(e,t,!0);n&&(a=!0,u(i,n))};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}return r||a?(h(r)?r.forEach((e=>i[e]=null)):u(i,r),x(e)&&o.set(e,i),i):(x(e)&&o.set(e,null),null)}function zi(e,t){return!(!e||!l(t))&&(t=t.slice(2).replace(/Once$/,""),f(e,t[0].toLowerCase()+t.slice(1))||f(e,I(t))||f(e,t))}let Wi=!1;function Ki(){Wi=!0}function Gi(e){const{type:t,vnode:n,proxy:o,withProxy:s,propsOptions:[r],slots:i,attrs:a,emit:u,render:d,renderCache:p,props:f,data:h,setupState:m,ctx:g,inheritAttrs:v}=e,y=xo(e);let b,_;Wi=!1;try{if(4&n.shapeFlag){const e=s||o,t=m.__isScriptSetup?new Proxy(e,{get:(e,t,n)=>(En(`Property '${String(t)}' was accessed via 'this'. Avoid using 'this' in templates.`),Reflect.get(e,t,n))}):e;b=$a(d.call(t,e,p,Dt(f),m,h,g)),_=a}else{const e=t;a===f&&Ki(),b=$a(e.length>1?e(Dt(f),{get attrs(){return Ki(),Dt(a)},slots:i,emit:u}):e(Dt(f),null)),_=t.props?a:Xi(a)}}catch(t){ma.length=0,In(t,e,1),b=Oa(fa)}let x,S=b;if(b.patchFlag>0&&2048&b.patchFlag&&([S,x]=Ji(b)),_&&!1!==v){const e=Object.keys(_),{shapeFlag:t}=S;if(e.length)if(7&t)r&&e.some(c)&&(_=Yi(_,r)),S=Pa(S,_,!1,!0);else if(!Wi&&S.type!==fa){const e=Object.keys(a),t=[],n=[];for(let o=0,s=e.length;o<s;o++){const s=e[o];l(s)?c(s)||t.push(s[2].toLowerCase()+s.slice(3)):n.push(s)}n.length&&En(`Extraneous non-props attributes (${n.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text or teleport root nodes.`),t.length&&En(`Extraneous non-emits event listeners (${t.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`)}}return n.dirs&&(Qi(S)||En("Runtime directive used on component with non-element root node. The directives will not function as intended."),S=Pa(S,null,!1,!0),S.dirs=S.dirs?S.dirs.concat(n.dirs):n.dirs),n.transition&&(Qi(S)||En("Component inside <Transition> renders non-element root node that cannot be animated."),Qo(S,n.transition)),x?x(S):b=S,xo(y),b}const Ji=e=>{const t=e.children,n=e.dynamicChildren,o=Zi(t,!1);if(!o)return[e,void 0];if(o.patchFlag>0&&2048&o.patchFlag)return Ji(o);const s=t.indexOf(o),r=n?n.indexOf(o):-1;return[$a(o),o=>{t[s]=o,n&&(r>-1?n[r]=o:o.patchFlag>0&&(e.dynamicChildren=[...n,o]))}]};function Zi(e,t=!0){let n;for(let o=0;o<e.length;o++){const s=e[o];if(!Ca(s))return;if(s.type!==fa||"v-if"===s.children){if(n)return;if(n=s,t&&n.patchFlag>0&&2048&n.patchFlag)return Zi(n.children)}}return n}const Xi=e=>{let t;for(const n in e)("class"===n||"style"===n||l(n))&&((t||(t={}))[n]=e[n]);return t},Yi=(e,t)=>{const n={};for(const o in e)c(o)&&o.slice(9)in t||(n[o]=e[o]);return n},Qi=e=>7&e.shapeFlag||e.type===fa;function ea(e,t,n){const o=Object.keys(t);if(o.length!==Object.keys(e).length)return!0;for(let s=0;s<o.length;s++){const r=o[s];if(t[r]!==e[r]&&!zi(n,r))return!0}return!1}function ta({vnode:e,parent:t},n){for(;t;){const o=t.subTree;if(o.suspense&&o.suspense.activeBranch===e&&(o.el=e.el),o!==e)break;(e=t.vnode).el=n,t=t.parent}}const na=e=>e.__isSuspense;let oa=0;const sa={name:"Suspense",__isSuspense:!0,process(e,t,n,o,s,r,i,a,l,c){if(null==e)!function(e,t,n,o,s,r,i,a,l){const{p:c,o:{createElement:u}}=l,d=u("div"),p=e.suspense=aa(e,s,o,t,d,n,r,i,a,l);c(null,p.pendingBranch=e.ssContent,d,null,o,p,r,i),p.deps>0?(ra(e,"onPending"),ra(e,"onFallback"),c(null,e.ssFallback,t,n,o,null,r,i),ua(p,e.ssFallback)):p.resolve(!1,!0)}(t,n,o,s,r,i,a,l,c);else{if(r&&r.deps>0&&!e.suspense.isInFallback)return t.suspense=e.suspense,t.suspense.vnode=t,void(t.el=e.el);!function(e,t,n,o,s,r,i,a,{p:l,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const p=t.ssContent,f=t.ssFallback,{activeBranch:h,pendingBranch:m,isInFallback:g,isHydrating:v}=d;if(m)d.pendingBranch=p,Ea(p,m)?(l(m,p,d.hiddenContainer,null,s,d,r,i,a),d.deps<=0?d.resolve():g&&(v||(l(h,f,n,o,s,null,r,i,a),ua(d,f)))):(d.pendingId=oa++,v?(d.isHydrating=!1,d.activeBranch=m):c(m,s,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),g?(l(null,p,d.hiddenContainer,null,s,d,r,i,a),d.deps<=0?d.resolve():(l(h,f,n,o,s,null,r,i,a),ua(d,f))):h&&Ea(p,h)?(l(h,p,n,o,s,d,r,i,a),d.resolve(!0)):(l(null,p,d.hiddenContainer,null,s,d,r,i,a),d.deps<=0&&d.resolve()));else if(h&&Ea(p,h))l(h,p,n,o,s,d,r,i,a),ua(d,p);else if(ra(t,"onPending"),d.pendingBranch=p,512&p.shapeFlag?d.pendingId=p.component.suspenseId:d.pendingId=oa++,l(null,p,d.hiddenContainer,null,s,d,r,i,a),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(f)}),e):0===e&&d.fallback(f)}}(e,t,n,o,s,i,a,l,c)}},hydrate:function(e,t,n,o,s,r,i,a,l){const c=t.suspense=aa(t,o,n,e.parentNode,document.createElement("div"),null,s,r,i,a,!0),u=l(e,c.pendingBranch=t.ssContent,n,c,r,i);0===c.deps&&c.resolve(!1,!0);return u},normalize:function(e){const{shapeFlag:t,children:n}=e,o=32&t;e.ssContent=la(o?n.default:n),e.ssFallback=o?la(n.fallback):Oa(fa)}};function ra(e,t){const n=e.props&&e.props[t];y(n)&&n()}let ia=!1;function aa(e,t,n,o,s,r,i,a,l,c,u=!1){ia||(ia=!0);const{p:d,m:p,um:f,n:h,o:{parentNode:m,remove:g}}=c;let v;const y=function(e){const t=e.props&&e.props.suspensible;return null!=t&&!1!==t}(e);y&&t&&t.pendingBranch&&(v=t.pendingId,t.deps++);const b=e.props?U(e.props.timeout):void 0;An(b,"Suspense timeout");const _=r,x={vnode:e,parent:t,parentComponent:n,namespace:i,container:o,hiddenContainer:s,deps:0,pendingId:oa++,timeout:"number"==typeof b?b:-1,activeBranch:null,pendingBranch:null,isInFallback:!u,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1,n=!1){if(!e&&!x.pendingBranch)throw new Error("suspense.resolve() is called without a pending branch.");if(x.isUnmounted)throw new Error("suspense.resolve() is called on an already unmounted suspense boundary.");const{vnode:o,activeBranch:s,pendingBranch:i,pendingId:a,effects:l,parentComponent:c,container:u}=x;let d=!1;x.isHydrating?x.isHydrating=!1:e||(d=s&&i.transition&&"out-in"===i.transition.mode,d&&(s.transition.afterLeave=()=>{a===x.pendingId&&(p(i,u,r===_?h(s):r,0),Wn(l))}),s&&(m(s.el)===u&&(r=h(s)),f(s,c,x,!0)),d||p(i,u,r,0)),ua(x,i),x.pendingBranch=null,x.isInFallback=!1;let g=x.parent,b=!1;for(;g;){if(g.pendingBranch){g.effects.push(...l),b=!0;break}g=g.parent}b||d||Wn(l),x.effects=[],y&&t&&t.pendingBranch&&v===t.pendingId&&(t.deps--,0!==t.deps||n||t.resolve()),ra(o,"onResolve")},fallback(e){if(!x.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:o,container:s,namespace:r}=x;ra(t,"onFallback");const i=h(n),c=()=>{x.isInFallback&&(d(null,e,s,i,o,null,r,a,l),ua(x,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(n.transition.afterLeave=c),x.isInFallback=!0,f(n,o,null,!0),u||c()},move(e,t,n){x.activeBranch&&p(x.activeBranch,e,t,n),x.container=e},next:()=>x.activeBranch&&h(x.activeBranch),registerDep(e,t,n){const o=!!x.pendingBranch;o&&x.deps++;const s=e.vnode.el;e.asyncDep.catch((t=>{In(t,e,0)})).then((r=>{if(e.isUnmounted||x.isUnmounted||x.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:a}=e;wn(a),rl(e,r,!1),s&&(a.el=s);const l=!s&&e.subTree.el;t(e,a,m(s||e.subTree.el),s?null:h(e.subTree),x,i,n),l&&g(l),ta(e,a.el),kn(),o&&0==--x.deps&&x.resolve()}))},unmount(e,t){x.isUnmounted=!0,x.activeBranch&&f(x.activeBranch,n,e,t),x.pendingBranch&&f(x.pendingBranch,n,e,t)}};return x}function la(e){let t;if(y(e)){const n=_a&&e._c;n&&(e._d=!1,va()),e=e(),n&&(e._d=!0,t=ga,ya())}if(h(e)){const t=Zi(e);!t&&e.filter((e=>e!==Ys)).length>0&&En("<Suspense> slots expect a single root node."),e=t}return e=$a(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function ca(e,t){t&&t.pendingBranch?h(e)?t.effects.push(...e):t.effects.push(e):Wn(e)}function ua(e,t){e.activeBranch=t;const{vnode:n,parentComponent:o}=e;let s=t.el;for(;!s&&t.component;)s=(t=t.component.subTree).el;n.el=s,o&&o.subTree===n&&(o.vnode.el=s,ta(o,s))}const da=Symbol.for("v-fgt"),pa=Symbol.for("v-txt"),fa=Symbol.for("v-cmt"),ha=Symbol.for("v-stc"),ma=[];let ga=null;function va(e=!1){ma.push(ga=e?null:[])}function ya(){ma.pop(),ga=ma[ma.length-1]||null}let ba,_a=1;function xa(e,t=!1){_a+=e,e<0&&ga&&t&&(ga.hasOnce=!0)}function Sa(e){return e.dynamicChildren=_a>0?ga||r:null,ya(),_a>0&&ga&&ga.push(e),e}function wa(e,t,n,o,s,r){return Sa(Ra(e,t,n,o,s,r,!0))}function ka(e,t,n,o,s){return Sa(Oa(e,t,n,o,s,!0))}function Ca(e){return!!e&&!0===e.__v_isVNode}function Ea(e,t){if(6&t.shapeFlag&&e.component){const n=Qn.get(t.type);if(n&&n.has(e.component))return e.shapeFlag&=-257,t.shapeFlag&=-513,!1}return e.type===t.type&&e.key===t.key}function ja(e){ba=e}const Ta=({key:e})=>null!=e?e:null,Aa=({ref:e,ref_key:t,ref_for:n})=>("number"==typeof e&&(e=""+e),null!=e?b(e)||Jt(e)||y(e)?{i:bo,r:e,k:t,f:!!n}:e:null);function Ra(e,t=null,n=null,o=0,s=null,r=(e===da?0:1),i=!1,a=!1){const l={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Ta(t),ref:t&&Aa(t),scopeId:_o,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:o,dynamicProps:s,dynamicChildren:null,appContext:null,ctx:bo};return a?(Ba(l,n),128&r&&e.normalize(l)):n&&(l.shapeFlag|=b(n)?8:16),l.key!=l.key&&En("VNode created with invalid key (NaN). VNode type:",l.type),_a>0&&!i&&ga&&(l.patchFlag>0||6&r)&&32!==l.patchFlag&&ga.push(l),l}const Oa=(...e)=>function(e,t=null,n=null,o=0,s=null,r=!1){e&&e!==Ys||(e||En(`Invalid vnode type when creating vnode: ${e}.`),e=fa);if(Ca(e)){const o=Pa(e,t,!0);return n&&Ba(o,n),_a>0&&!r&&ga&&(6&o.shapeFlag?ga[ga.indexOf(e)]=o:ga.push(o)),o.patchFlag=-2,o}gl(e)&&(e=e.__vccOpts);if(t){t=Na(t);let{class:e,style:n}=t;e&&!b(e)&&(t.class=Q(e)),x(n)&&(Ht(n)&&!h(n)&&(n=u({},n)),t.style=G(n))}const i=b(e)?1:na(e)?128:Ro(e)?64:x(e)?4:y(e)?2:0;4&i&&Ht(e)&&En("Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with `markRaw` or using `shallowRef` instead of `ref`.","\nComponent that was made reactive: ",e=zt(e));return Ra(e,t,n,o,s,i,r,!0)}(...ba?ba(e,bo):e);function Na(e){return e?Ht(e)||Xr(e)?u({},e):e:null}function Pa(e,t,n=!1,o=!1){const{props:s,ref:r,patchFlag:i,children:a,transition:l}=e,c=t?Ua(s||{},t):s,u={__v_isVNode:!0,__v_skip:!0,type:e.type,props:c,key:c&&Ta(c),ref:t&&t.ref?n&&r?h(r)?r.concat(Aa(t)):[r,Aa(t)]:Aa(t):r,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:-1===i&&h(a)?a.map(Ia):a,target:e.target,targetStart:e.targetStart,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==da?-1===i?16:16|i:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:l,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Pa(e.ssContent),ssFallback:e.ssFallback&&Pa(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return l&&o&&Qo(u,l.clone(u)),u}function Ia(e){const t=Pa(e);return h(e.children)&&(t.children=e.children.map(Ia)),t}function Ma(e=" ",t=0){return Oa(pa,null,e,t)}function La(e,t){const n=Oa(ha,null,e);return n.staticCount=t,n}function Fa(e="",t=!1){return t?(va(),ka(fa,null,e)):Oa(fa,null,e)}function $a(e){return null==e||"boolean"==typeof e?Oa(fa):h(e)?Oa(da,null,e.slice()):Ca(e)?Da(e):Oa(pa,null,String(e))}function Da(e){return null===e.el&&-1!==e.patchFlag||e.memo?e:Pa(e)}function Ba(e,t){let n=0;const{shapeFlag:o}=e;if(null==t)t=null;else if(h(t))n=16;else if("object"==typeof t){if(65&o){const n=t.default;return void(n&&(n._c&&(n._d=!1),Ba(e,n()),n._c&&(n._d=!0)))}{n=32;const o=t._;o||Xr(t)?3===o&&bo&&(1===bo.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=bo}}else y(t)?(t={default:t,_ctx:bo},n=32):(t=String(t),64&o?(n=16,t=[Ma(t)]):n=8);e.children=t,e.shapeFlag|=n}function Ua(...e){const t={};for(let n=0;n<e.length;n++){const o=e[n];for(const e in o)if("class"===e)t.class!==o.class&&(t.class=Q([t.class,o.class]));else if("style"===e)t.style=G([t.style,o.style]);else if(l(e)){const n=t[e],s=o[e];!s||n===s||h(n)&&n.includes(s)||(t[e]=n?[].concat(n,s):s)}else""!==e&&(t[e]=o[e])}return t}function Va(e,t,n,o=null){Pn(e,t,7,[n,o])}const qa=Vr();let Ha=0;function za(e,t,n){const o=e.type,r=(t?t.appContext:e.appContext)||qa,a={uid:Ha++,vnode:e,type:o,parent:t,appContext:r,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new Se(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(r.provides),ids:t?t.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:ti(o,r),emitsOptions:Hi(o,r),emit:null,emitted:null,propsDefaults:s,inheritAttrs:o.inheritAttrs,ctx:s,data:s,props:s,attrs:s,slots:s,refs:s,setupState:s,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return a.ctx=function(e){const t={};return Object.defineProperty(t,"_",{configurable:!0,enumerable:!1,get:()=>e}),Object.keys(cr).forEach((n=>{Object.defineProperty(t,n,{configurable:!0,enumerable:!1,get:()=>cr[n](e),set:i})})),t}(a),a.root=t?t.root:a,a.emit=qi.bind(null,a),e.ce&&e.ce(a),a}let Wa=null;const Ka=()=>Wa||bo;let Ga,Ja;{const e=q(),t=(t,n)=>{let o;return(o=e[t])||(o=e[t]=[]),o.push(n),e=>{o.length>1?o.forEach((t=>t(e))):o[0](e)}};Ga=t("__VUE_INSTANCE_SETTERS__",(e=>Wa=e)),Ja=t("__VUE_SSR_SETTERS__",(e=>ol=e))}const Za=e=>{const t=Wa;return Ga(e),e.scope.on(),()=>{e.scope.off(),Ga(t)}},Xa=()=>{Wa&&Wa.scope.off(),Ga(null)},Ya=o("slot,component");function Qa(e,{isNativeTag:t}){(Ya(e)||t(e))&&En("Do not use built-in or reserved HTML elements as component id: "+e)}function el(e){return 4&e.vnode.shapeFlag}let tl,nl,ol=!1;function sl(e,t=!1,n=!1){t&&Ja(t);const{props:o,children:s}=e.vnode,r=el(e);!function(e,t,n,o=!1){const s={},r=Zr();e.propsDefaults=Object.create(null),Yr(e,t,s,r);for(const t in e.propsOptions[0])t in s||(s[t]=void 0);oi(t||{},s,e),n?e.props=o?s:Ft(s):e.type.props?e.props=s:e.props=r,e.attrs=r}(e,o,r,t),mi(e,s,n);const a=r?function(e,t){var n;const o=e.type;o.name&&Qa(o.name,e.appContext.config);if(o.components){const t=Object.keys(o.components);for(let n=0;n<t.length;n++)Qa(t[n],e.appContext.config)}if(o.directives){const e=Object.keys(o.directives);for(let t=0;t<e.length;t++)Eo(e[t])}o.compilerOptions&&al()&&En('"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.');e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,pr),function(e){const{ctx:t,propsOptions:[n]}=e;n&&Object.keys(n).forEach((n=>{Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>e.props[n],set:i})}))}(e);const{setup:s}=o;if(s){He();const r=e.setupContext=s.length>1?ul(e):null,i=Za(e),a=Nn(s,e,0,[Dt(e.props),r]),l=S(a);if(ze(),i(),!l&&!e.sp||Cs(e)||os(e),l){if(a.then(Xa,Xa),t)return a.then((n=>{rl(e,n,t)})).catch((t=>{In(t,e,0)}));if(e.asyncDep=a,!e.suspense){En(`Component <${null!=(n=o.name)?n:"Anonymous"}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`)}}else rl(e,a,t)}else ll(e,t)}(e,t):void 0;return t&&Ja(!1),a}function rl(e,t,n){y(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:x(t)?(Ca(t)&&En("setup() should not return VNodes directly - return a render function instead."),e.devtoolsRawSetupState=t,e.setupState=sn(t),function(e){const{ctx:t,setupState:n}=e;Object.keys(zt(n)).forEach((e=>{if(!n.__isScriptSetup){if(ur(e[0]))return void En(`setup() return property ${JSON.stringify(e)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:()=>n[e],set:i})}}))}(e)):void 0!==t&&En("setup() should return an object. Received: "+(null===t?"null":typeof t)),ll(e,n)}function il(e){tl=e,nl=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,fr))}}const al=()=>!tl;function ll(e,t,n){const o=e.type;if(!e.render){if(!t&&tl&&!o.render){const t=o.template||Ir(e).template;if(t){bi(e,"compile");const{isCustomElement:n,compilerOptions:s}=e.appContext.config,{delimiters:r,compilerOptions:i}=o,a=u(u({isCustomElement:n,delimiters:r},s),i);o.render=tl(t,a),_i(e,"compile")}}e.render=o.render||i,nl&&nl(e)}{const t=Za(e);He();try{Or(e)}finally{ze(),t()}}o.render||e.render!==i||t||(!tl&&o.template?En('Component provided template option but runtime compilation is not supported in this build of Vue. Use "vue.esm-browser.js" instead.'):En("Component is missing template or render function: ",o))}const cl={get:(e,t)=>(Ki(),tt(e,"get",""),e[t]),set:()=>(En("setupContext.attrs is readonly."),!1),deleteProperty:()=>(En("setupContext.attrs is readonly."),!1)};function ul(e){const t=t=>{if(e.exposed&&En("expose() should be called only once per setup()."),null!=t){let e=typeof t;"object"===e&&(h(t)?e="array":Jt(t)&&(e="ref")),"object"!==e&&En(`expose() should be passed a plain object, received ${e}.`)}e.exposed=t||{}};{let n,o;return Object.freeze({get attrs(){return n||(n=new Proxy(e.attrs,cl))},get slots(){return o||(o=function(e){return new Proxy(e.slots,{get:(t,n)=>(tt(e,"get","$slots"),t[n])})}(e))},get emit(){return(t,...n)=>e.emit(t,...n)},expose:t})}}function dl(e){return e.exposed?e.exposeProxy||(e.exposeProxy=new Proxy(sn(Wt(e.exposed)),{get:(t,n)=>n in t?t[n]:n in cr?cr[n](e):void 0,has:(e,t)=>t in e||t in cr})):e.proxy}const pl=/(?:^|[-_])(\w)/g,fl=e=>e.replace(pl,(e=>e.toUpperCase())).replace(/[-_]/g,"");function hl(e,t=!0){return y(e)?e.displayName||e.name:e.name||t&&e.__name}function ml(e,t,n=!1){let o=hl(t);if(!o&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(o=e[1])}if(!o&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};o=n(e.components||e.parent.type.components)||n(e.appContext.components)}return o?fl(o):n?"App":"Anonymous"}function gl(e){return y(e)&&"__vccOpts"in e}const vl=(e,t)=>{const n=function(e,t,n=!1){let o,s;y(e)?o=e:(o=e.get,s=e.set);const r=new fn(o,s,n);return t&&!n&&(r.onTrack=t.onTrack,r.onTrigger=t.onTrigger),r}(e,t,ol);{const e=Ka();e&&e.appContext.config.warnRecursiveComputed&&(n._warnRecursive=!0)}return n};function yl(e,t,n){const o=arguments.length;return 2===o?x(t)&&!h(t)?Ca(t)?Oa(e,null,[t]):Oa(e,t):Oa(e,null,t):(o>3?n=Array.prototype.slice.call(arguments,2):3===o&&Ca(n)&&(n=[n]),Oa(e,t,n))}function bl(){if("undefined"==typeof window)return;const e={style:"color:#3ba776"},t={style:"color:#1677ff"},n={style:"color:#f5222d"},o={style:"color:#eb2f96"},r={__vue_custom_formatter:!0,header:t=>x(t)?t.__isVue?["div",e,"VueInstance"]:Jt(t)?["div",{},["span",e,p(t)],"<",l("_value"in t?t._value:t),">"]:Ut(t)?["div",{},["span",e,qt(t)?"ShallowReactive":"Reactive"],"<",l(t),">"+(Vt(t)?" (readonly)":"")]:Vt(t)?["div",{},["span",e,qt(t)?"ShallowReadonly":"Readonly"],"<",l(t),">"]:null:null,hasBody:e=>e&&e.__isVue,body(e){if(e&&e.__isVue)return["div",{},...i(e.$)]}};function i(e){const t=[];e.type.props&&e.props&&t.push(a("props",zt(e.props))),e.setupState!==s&&t.push(a("setup",e.setupState)),e.data!==s&&t.push(a("data",zt(e.data)));const n=c(e,"computed");n&&t.push(a("computed",n));const r=c(e,"inject");return r&&t.push(a("injected",r)),t.push(["div",{},["span",{style:o.style+";opacity:0.66"},"$ (internal): "],["object",{object:e}]]),t}function a(e,t){return t=u({},t),Object.keys(t).length?["div",{style:"line-height:1.25em;margin-bottom:0.6em"},["div",{style:"color:#476582"},e],["div",{style:"padding-left:1.25em"},...Object.keys(t).map((e=>["div",{},["span",o,e+": "],l(t[e],!1)]))]]:["span",{}]}function l(e,s=!0){return"number"==typeof e?["span",t,e]:"string"==typeof e?["span",n,JSON.stringify(e)]:"boolean"==typeof e?["span",o,e]:x(e)?["object",{object:s?zt(e):e}]:["span",n,String(e)]}function c(e,t){const n=e.type;if(y(n))return;const o={};for(const s in e.ctx)d(n,s,t)&&(o[s]=e.ctx[s]);return o}function d(e,t,n){const o=e[n];return!!(h(o)&&o.includes(t)||x(o)&&t in o)||(!(!e.extends||!d(e.extends,t,n))||(!(!e.mixins||!e.mixins.some((e=>d(e,t,n))))||void 0))}function p(e){return qt(e)?"ShallowRef":e.effect?"ComputedRef":"Ref"}window.devtoolsFormatters?window.devtoolsFormatters.push(r):window.devtoolsFormatters=[r]}function _l(e,t,n,o){const s=n[o];if(s&&xl(s,e))return s;const r=t();return r.memo=e.slice(),r.cacheIndex=o,n[o]=r}function xl(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if(F(n[e],t[e]))return!1;return _a>0&&ga&&ga.push(e),!0}const Sl="3.5.13",wl=En,kl=On,Cl=ro,El=co,jl={createComponentInstance:za,setupComponent:sl,renderComponentRoot:Gi,setCurrentRenderingInstance:xo,isVNode:Ca,normalizeVNode:$a,getComponentPublicInstance:dl,ensureValidVNode:ir,pushWarningContext:wn,popWarningContext:kn},Tl=null,Al=null,Rl=null;let Ol;const Nl="undefined"!=typeof window&&window.trustedTypes;if(Nl)try{Ol=Nl.createPolicy("vue",{createHTML:e=>e})}catch(e){wl(`Error creating trusted types policy: ${e}`)}const Pl=Ol?e=>Ol.createHTML(e):e=>e,Il="undefined"!=typeof document?document:null,Ml=Il&&Il.createElement("template"),Ll={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,o)=>{const s="svg"===t?Il.createElementNS("http://www.w3.org/2000/svg",e):"mathml"===t?Il.createElementNS("http://www.w3.org/1998/Math/MathML",e):n?Il.createElement(e,{is:n}):Il.createElement(e);return"select"===e&&o&&null!=o.multiple&&s.setAttribute("multiple",o.multiple),s},createText:e=>Il.createTextNode(e),createComment:e=>Il.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Il.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,o,s,r){const i=n?n.previousSibling:t.lastChild;if(s&&(s===r||s.nextSibling))for(;t.insertBefore(s.cloneNode(!0),n),s!==r&&(s=s.nextSibling););else{Ml.innerHTML=Pl("svg"===o?`<svg>${e}</svg>`:"mathml"===o?`<math>${e}</math>`:e);const s=Ml.content;if("svg"===o||"mathml"===o){const e=s.firstChild;for(;e.firstChild;)s.appendChild(e.firstChild);s.removeChild(e)}t.insertBefore(s,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},Fl="transition",$l="animation",Dl=Symbol("_vtc"),Bl={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Ul=u({},zo,Bl),Vl=(e=>(e.displayName="Transition",e.props=Ul,e))(((e,{slots:t})=>yl(Go,zl(e),t))),ql=(e,t=[])=>{h(e)?e.forEach((e=>e(...t))):e&&e(...t)},Hl=e=>!!e&&(h(e)?e.some((e=>e.length>1)):e.length>1);function zl(e){const t={};for(const n in e)n in Bl||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:o,duration:s,enterFromClass:r=`${n}-enter-from`,enterActiveClass:i=`${n}-enter-active`,enterToClass:a=`${n}-enter-to`,appearFromClass:l=r,appearActiveClass:c=i,appearToClass:d=a,leaveFromClass:p=`${n}-leave-from`,leaveActiveClass:f=`${n}-leave-active`,leaveToClass:h=`${n}-leave-to`}=e,m=function(e){if(null==e)return null;if(x(e))return[Wl(e.enter),Wl(e.leave)];{const t=Wl(e);return[t,t]}}(s),g=m&&m[0],v=m&&m[1],{onBeforeEnter:y,onEnter:b,onEnterCancelled:_,onLeave:S,onLeaveCancelled:w,onBeforeAppear:k=y,onAppear:C=b,onAppearCancelled:E=_}=t,j=(e,t,n,o)=>{e._enterCancelled=o,Gl(e,t?d:a),Gl(e,t?c:i),n&&n()},T=(e,t)=>{e._isLeaving=!1,Gl(e,p),Gl(e,h),Gl(e,f),t&&t()},A=e=>(t,n)=>{const s=e?C:b,i=()=>j(t,e,n);ql(s,[t,i]),Jl((()=>{Gl(t,e?l:r),Kl(t,e?d:a),Hl(s)||Xl(t,o,g,i)}))};return u(t,{onBeforeEnter(e){ql(y,[e]),Kl(e,r),Kl(e,i)},onBeforeAppear(e){ql(k,[e]),Kl(e,l),Kl(e,c)},onEnter:A(!1),onAppear:A(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>T(e,t);Kl(e,p),e._enterCancelled?(Kl(e,f),tc()):(tc(),Kl(e,f)),Jl((()=>{e._isLeaving&&(Gl(e,p),Kl(e,h),Hl(S)||Xl(e,o,v,n))})),ql(S,[e,n])},onEnterCancelled(e){j(e,!1,void 0,!0),ql(_,[e])},onAppearCancelled(e){j(e,!0,void 0,!0),ql(E,[e])},onLeaveCancelled(e){T(e),ql(w,[e])}})}function Wl(e){const t=U(e);return An(t,"<transition> explicit duration"),t}function Kl(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e[Dl]||(e[Dl]=new Set)).add(t)}function Gl(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const n=e[Dl];n&&(n.delete(t),n.size||(e[Dl]=void 0))}function Jl(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let Zl=0;function Xl(e,t,n,o){const s=e._endId=++Zl,r=()=>{s===e._endId&&o()};if(null!=n)return setTimeout(r,n);const{type:i,timeout:a,propCount:l}=Yl(e,t);if(!i)return o();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,p),r()},p=t=>{t.target===e&&++u>=l&&d()};setTimeout((()=>{u<l&&d()}),a+1),e.addEventListener(c,p)}function Yl(e,t){const n=window.getComputedStyle(e),o=e=>(n[e]||"").split(", "),s=o(`${Fl}Delay`),r=o(`${Fl}Duration`),i=Ql(s,r),a=o(`${$l}Delay`),l=o(`${$l}Duration`),c=Ql(a,l);let u=null,d=0,p=0;t===Fl?i>0&&(u=Fl,d=i,p=r.length):t===$l?c>0&&(u=$l,d=c,p=l.length):(d=Math.max(i,c),u=d>0?i>c?Fl:$l:null,p=u?u===Fl?r.length:l.length:0);return{type:u,timeout:d,propCount:p,hasTransform:u===Fl&&/\b(transform|all)(,|$)/.test(o(`${Fl}Property`).toString())}}function Ql(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>ec(t)+ec(e[n]))))}function ec(e){return"auto"===e?0:1e3*Number(e.slice(0,-1).replace(",","."))}function tc(){return document.body.offsetHeight}const nc=Symbol("_vod"),oc=Symbol("_vsh"),sc={beforeMount(e,{value:t},{transition:n}){e[nc]="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):rc(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:o}){!t!=!n&&(o?t?(o.beforeEnter(e),rc(e,!0),o.enter(e)):o.leave(e,(()=>{rc(e,!1)})):rc(e,t))},beforeUnmount(e,{value:t}){rc(e,t)}};function rc(e,t){e.style.display=t?e[nc]:"none",e[oc]=!t}sc.name="show";const ic=Symbol("CSS_VAR_TEXT");function ac(e){const t=Ka();if(!t)return void wl("useCssVars is called without current active component instance.");const n=t.ut=(n=e(t.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${t.uid}"]`)).forEach((e=>cc(e,n)))};t.getCssVars=()=>e(t.proxy);const o=()=>{const o=e(t.proxy);t.ce?cc(t.ce,o):lc(t.subTree,o),n(o)};Us((()=>{Wn(o)})),Bs((()=>{Fi(o,i,{flush:"post"});const e=new MutationObserver(o);e.observe(t.subTree.el.parentNode,{childList:!0}),Hs((()=>e.disconnect()))}))}function lc(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{lc(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)cc(e.el,t);else if(e.type===da)e.children.forEach((e=>lc(e,t)));else if(e.type===ha){let{el:n,anchor:o}=e;for(;n&&(cc(n,t),n!==o);)n=n.nextSibling}}function cc(e,t){if(1===e.nodeType){const n=e.style;let o="";for(const e in t)n.setProperty(`--${e}`,t[e]),o+=`--${e}: ${t[e]};`;n[ic]=o}}const uc=/(^|;)\s*display\s*:/;const dc=/[^\\];\s*$/,pc=/\s*!important$/;function fc(e,t,n){if(h(n))n.forEach((n=>fc(e,t,n)));else if(null==n&&(n=""),dc.test(n)&&wl(`Unexpected semicolon at the end of '${t}' style value: '${n}'`),t.startsWith("--"))e.setProperty(t,n);else{const o=function(e,t){const n=mc[t];if(n)return n;let o=N(t);if("filter"!==o&&o in e)return mc[t]=o;o=M(o);for(let n=0;n<hc.length;n++){const s=hc[n]+o;if(s in e)return mc[t]=s}return t}(e,t);pc.test(n)?e.setProperty(I(o),n.replace(pc,""),"important"):e[o]=n}}const hc=["Webkit","Moz","ms"],mc={};const gc="http://www.w3.org/1999/xlink";function vc(e,t,n,o,s,r=ie(t)){o&&t.startsWith("xlink:")?null==n?e.removeAttributeNS(gc,t.slice(6,t.length)):e.setAttributeNS(gc,t,n):null==n||r&&!le(n)?e.removeAttribute(t):e.setAttribute(t,r?"":_(n)?String(n):n)}function yc(e,t,n,o,s){if("innerHTML"===t||"textContent"===t)return void(null!=n&&(e[t]="innerHTML"===t?Pl(n):n));const r=e.tagName;if("value"===t&&"PROGRESS"!==r&&!r.includes("-")){const o="OPTION"===r?e.getAttribute("value")||"":e.value,s=null==n?"checkbox"===e.type?"on":"":String(n);return o===s&&"_value"in e||(e.value=s),null==n&&e.removeAttribute(t),void(e._value=n)}let i=!1;if(""===n||null==n){const o=typeof e[t];"boolean"===o?n=le(n):null==n&&"string"===o?(n="",i=!0):"number"===o&&(n=0,i=!0)}try{e[t]=n}catch(e){i||wl(`Failed setting prop "${t}" on <${r.toLowerCase()}>: value ${n} is invalid.`,e)}i&&e.removeAttribute(s||t)}function bc(e,t,n,o){e.addEventListener(t,n,o)}const _c=Symbol("_vei");function xc(e,t,n,o,s=null){const r=e[_c]||(e[_c]={}),i=r[t];if(o&&i)i.value=Ec(o,t);else{const[n,a]=function(e){let t;if(Sc.test(e)){let n;for(t={};n=e.match(Sc);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}const n=":"===e[2]?e.slice(3):I(e.slice(2));return[n,t]}(t);if(o){const i=r[t]=function(e,t){const n=e=>{if(e._vts){if(e._vts<=n.attached)return}else e._vts=Date.now();Pn(function(e,t){if(h(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=Cc(),n}(Ec(o,t),s);bc(e,n,i,a)}else i&&(!function(e,t,n,o){e.removeEventListener(t,n,o)}(e,n,i,a),r[t]=void 0)}}const Sc=/(?:Once|Passive|Capture)$/;let wc=0;const kc=Promise.resolve(),Cc=()=>wc||(kc.then((()=>wc=0)),wc=Date.now());function Ec(e,t){return y(e)||h(e)?e:(wl(`Wrong type passed as event handler to ${t} - did you forget @ or : in front of your prop?\nExpected function or array of functions, received type ${typeof e}.`),i)}const jc=e=>111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123;const Tc={};
/*! #__NO_SIDE_EFFECTS__ */function Ac(e,t,n){const o=ts(e,t);E(o)&&u(o,t);class s extends Nc{constructor(e){super(o,e,n)}}return s.def=o,s}
/*! #__NO_SIDE_EFFECTS__ */const Rc=(e,t)=>Ac(e,t,yu),Oc="undefined"!=typeof HTMLElement?HTMLElement:class{};class Nc extends Oc{constructor(e,t={},n=vu){super(),this._def=e,this._props=t,this._createApp=n,this._isVueCE=!0,this._instance=null,this._app=null,this._nonce=this._def.nonce,this._connected=!1,this._resolved=!1,this._numberProps=null,this._styleChildren=new WeakSet,this._ob=null,this.shadowRoot&&n!==vu?this._root=this.shadowRoot:(this.shadowRoot&&wl("Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use `defineSSRCustomElement`."),!1!==e.shadowRoot?(this.attachShadow({mode:"open"}),this._root=this.shadowRoot):this._root=this),this._def.__asyncLoader||this._resolveProps(this._def)}connectedCallback(){if(!this.isConnected)return;this.shadowRoot||this._parseSlots(),this._connected=!0;let e=this;for(;e=e&&(e.parentNode||e.host);)if(e instanceof Nc){this._parent=e;break}this._instance||(this._resolved?(this._setParent(),this._update()):e&&e._pendingResolve?this._pendingResolve=e._pendingResolve.then((()=>{this._pendingResolve=void 0,this._resolveDef()})):this._resolveDef())}_setParent(e=this._parent){e&&(this._instance.parent=e._instance,this._instance.provides=e._instance.provides)}disconnectedCallback(){this._connected=!1,qn((()=>{this._connected||(this._ob&&(this._ob.disconnect(),this._ob=null),this._app&&this._app.unmount(),this._instance&&(this._instance.ce=void 0),this._app=this._instance=null)}))}_resolveDef(){if(this._pendingResolve)return;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);this._ob=new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})),this._ob.observe(this,{attributes:!0});const e=(e,t=!1)=>{this._resolved=!0,this._pendingResolve=void 0;const{props:n,styles:o}=e;let s;if(n&&!h(n))for(const e in n){const t=n[e];(t===Number||t&&t.type===Number)&&(e in this._props&&(this._props[e]=U(this._props[e])),(s||(s=Object.create(null)))[N(e)]=!0)}this._numberProps=s,t&&this._resolveProps(e),this.shadowRoot?this._applyStyles(o):o&&wl("Custom element style injection is not supported when using shadowRoot: false"),this._mount(e)},t=this._def.__asyncLoader;t?this._pendingResolve=t().then((t=>e(this._def=t,!0))):e(this._def)}_mount(e){e.name||(e.name="VueElement"),this._app=this._createApp(e),e.configureApp&&e.configureApp(this._app),this._app._ceVNode=this._createVNode(),this._app.mount(this._root);const t=this._instance&&this._instance.exposed;if(t)for(const e in t)f(this,e)?wl(`Exposed property "${e}" already exists on custom element.`):Object.defineProperty(this,e,{get:()=>tn(t[e])})}_resolveProps(e){const{props:t}=e,n=h(t)?t:Object.keys(t||{});for(const e of Object.keys(this))"_"!==e[0]&&n.includes(e)&&this._setProp(e,this[e]);for(const e of n.map(N))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t,!0,!0)}})}_setAttr(e){if(e.startsWith("data-v-"))return;const t=this.hasAttribute(e);let n=t?this.getAttribute(e):Tc;const o=N(e);t&&this._numberProps&&this._numberProps[o]&&(n=U(n)),this._setProp(o,n,!1,!0)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,o=!1){if(t!==this._props[e]&&(t===Tc?delete this._props[e]:(this._props[e]=t,"key"===e&&this._app&&(this._app._ceVNode.key=t)),o&&this._instance&&this._update(),n)){const n=this._ob;n&&n.disconnect(),!0===t?this.setAttribute(I(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(I(e),t+""):t||this.removeAttribute(I(e)),n&&n.observe(this,{attributes:!0})}}_update(){mu(this._createVNode(),this._root)}_createVNode(){const e={};this.shadowRoot||(e.onVnodeMounted=e.onVnodeUpdated=this._renderSlots.bind(this));const t=Oa(this._def,u(e,this._props));return this._instance||(t.ce=e=>{this._instance=e,e.ce=this,e.isCE=!0,e.ceReload=e=>{this._styles&&(this._styles.forEach((e=>this._root.removeChild(e))),this._styles.length=0),this._applyStyles(e),this._instance=null,this._update()};const t=(e,t)=>{this.dispatchEvent(new CustomEvent(e,E(t[0])?u({detail:t},t[0]):{detail:t}))};e.emit=(e,...n)=>{t(e,n),I(e)!==e&&t(I(e),n)},this._setParent()}),t}_applyStyles(e,t){if(!e)return;if(t){if(t===this._def||this._styleChildren.has(t))return;this._styleChildren.add(t)}const n=this._nonce;for(let o=e.length-1;o>=0;o--){const s=document.createElement("style");if(n&&s.setAttribute("nonce",n),s.textContent=e[o],this.shadowRoot.prepend(s),t){if(t.__hmrId){this._childStyles||(this._childStyles=new Map);let e=this._childStyles.get(t.__hmrId);e||this._childStyles.set(t.__hmrId,e=[]),e.push(s)}}else(this._styles||(this._styles=[])).push(s)}}_parseSlots(){const e=this._slots={};let t;for(;t=this.firstChild;){const n=1===t.nodeType&&t.getAttribute("slot")||"default";(e[n]||(e[n]=[])).push(t),this.removeChild(t)}}_renderSlots(){const e=(this._teleportTarget||this).querySelectorAll("slot"),t=this._instance.type.__scopeId;for(let n=0;n<e.length;n++){const o=e[n],s=o.getAttribute("name")||"default",r=this._slots[s],i=o.parentNode;if(r)for(const e of r){if(t&&1===e.nodeType){const n=t+"-s",o=document.createTreeWalker(e,1);let s;for(e.setAttribute(n,"");s=o.nextNode();)s.setAttribute(n,"")}i.insertBefore(e,o)}else for(;o.firstChild;)i.insertBefore(o.firstChild,o);i.removeChild(o)}}_injectChildStyle(e){this._applyStyles(e.styles,e)}_removeChildStyle(e){if(this._styleChildren.delete(e),this._childStyles&&e.__hmrId){const t=this._childStyles.get(e.__hmrId);t&&(t.forEach((e=>this._root.removeChild(e))),t.length=0)}}}function Pc(e){const t=Ka(),n=t&&t.ce;return n||(wl(t?`${e||"useHost"} can only be used in components defined via defineCustomElement.`:`${e||"useHost"} called without an active component instance.`),null)}function Ic(){const e=Pc("useShadowRoot");return e&&e.shadowRoot}function Mc(e="$style"){{const t=Ka();if(!t)return wl("useCssModule must be called inside setup()"),s;const n=t.type.__cssModules;if(!n)return wl("Current instance does not have CSS modules injected."),s;const o=n[e];return o||(wl(`Current instance does not have CSS module named "${e}".`),s)}}const Lc=new WeakMap,Fc=new WeakMap,$c=Symbol("_moveCb"),Dc=Symbol("_enterCb"),Bc=(e=>(delete e.props.mode,e))({name:"TransitionGroup",props:u({},Ul,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=Ka(),o=qo();let s,r;return Vs((()=>{if(!s.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const o=e.cloneNode(),s=e[Dl];s&&s.forEach((e=>{e.split(/\s+/).forEach((e=>e&&o.classList.remove(e)))}));n.split(/\s+/).forEach((e=>e&&o.classList.add(e))),o.style.display="none";const r=1===t.nodeType?t:t.parentNode;r.appendChild(o);const{hasTransform:i}=Yl(o);return r.removeChild(o),i}(s[0].el,n.vnode.el,t))return;s.forEach(Uc),s.forEach(Vc);const o=s.filter(qc);tc(),o.forEach((e=>{const n=e.el,o=n.style;Kl(n,t),o.transform=o.webkitTransform=o.transitionDuration="";const s=n[$c]=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",s),n[$c]=null,Gl(n,t))};n.addEventListener("transitionend",s)}))})),()=>{const i=zt(e),a=zl(i);let l=i.tag||da;if(s=[],r)for(let e=0;e<r.length;e++){const t=r[e];t.el&&t.el instanceof Element&&(s.push(t),Qo(t,Zo(t,a,o,n)),Lc.set(t,t.el.getBoundingClientRect()))}r=t.default?es(t.default()):[];for(let e=0;e<r.length;e++){const t=r[e];null!=t.key?Qo(t,Zo(t,a,o,n)):t.type!==pa&&wl("<TransitionGroup> children must be keyed.")}return Oa(l,null,r)}}});function Uc(e){const t=e.el;t[$c]&&t[$c](),t[Dc]&&t[Dc]()}function Vc(e){Fc.set(e,e.el.getBoundingClientRect())}function qc(e){const t=Lc.get(e),n=Fc.get(e),o=t.left-n.left,s=t.top-n.top;if(o||s){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${o}px,${s}px)`,t.transitionDuration="0s",e}}const Hc=e=>{const t=e.props["onUpdate:modelValue"]||!1;return h(t)?e=>$(t,e):t};function zc(e){e.target.composing=!0}function Wc(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Kc=Symbol("_assign"),Gc={created(e,{modifiers:{lazy:t,trim:n,number:o}},s){e[Kc]=Hc(s);const r=o||s.props&&"number"===s.props.type;bc(e,t?"change":"input",(t=>{if(t.target.composing)return;let o=e.value;n&&(o=o.trim()),r&&(o=B(o)),e[Kc](o)})),n&&bc(e,"change",(()=>{e.value=e.value.trim()})),t||(bc(e,"compositionstart",zc),bc(e,"compositionend",Wc),bc(e,"change",Wc))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,oldValue:n,modifiers:{lazy:o,trim:s,number:r}},i){if(e[Kc]=Hc(i),e.composing)return;const a=null==t?"":t;if((!r&&"number"!==e.type||/^0\d/.test(e.value)?e.value:B(e.value))!==a){if(document.activeElement===e&&"range"!==e.type){if(o&&t===n)return;if(s&&e.value.trim()===a)return}e.value=a}}},Jc={deep:!0,created(e,t,n){e[Kc]=Hc(n),bc(e,"change",(()=>{const t=e._modelValue,n=eu(e),o=e.checked,s=e[Kc];if(h(t)){const e=he(t,n),r=-1!==e;if(o&&!r)s(t.concat(n));else if(!o&&r){const n=[...t];n.splice(e,1),s(n)}}else if(g(t)){const e=new Set(t);o?e.add(n):e.delete(n),s(e)}else s(tu(e,o))}))},mounted:Zc,beforeUpdate(e,t,n){e[Kc]=Hc(n),Zc(e,t,n)}};function Zc(e,{value:t,oldValue:n},o){let s;if(e._modelValue=t,h(t))s=he(t,o.props.value)>-1;else if(g(t))s=t.has(o.props.value);else{if(t===n)return;s=fe(t,tu(e,!0))}e.checked!==s&&(e.checked=s)}const Xc={created(e,{value:t},n){e.checked=fe(t,n.props.value),e[Kc]=Hc(n),bc(e,"change",(()=>{e[Kc](eu(e))}))},beforeUpdate(e,{value:t,oldValue:n},o){e[Kc]=Hc(o),t!==n&&(e.checked=fe(t,o.props.value))}},Yc={deep:!0,created(e,{value:t,modifiers:{number:n}},o){const s=g(t);bc(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?B(eu(e)):eu(e)));e[Kc](e.multiple?s?new Set(t):t:t[0]),e._assigning=!0,qn((()=>{e._assigning=!1}))})),e[Kc]=Hc(o)},mounted(e,{value:t}){Qc(e,t)},beforeUpdate(e,t,n){e[Kc]=Hc(n)},updated(e,{value:t}){e._assigning||Qc(e,t)}};function Qc(e,t){const n=e.multiple,o=h(t);if(!n||o||g(t)){for(let s=0,r=e.options.length;s<r;s++){const r=e.options[s],i=eu(r);if(n)if(o){const e=typeof i;r.selected="string"===e||"number"===e?t.some((e=>String(e)===String(i))):he(t,i)>-1}else r.selected=t.has(i);else if(fe(eu(r),t))return void(e.selectedIndex!==s&&(e.selectedIndex=s))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}else wl(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(t).slice(8,-1)}.`)}function eu(e){return"_value"in e?e._value:e.value}function tu(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const nu={created(e,t,n){su(e,t,n,null,"created")},mounted(e,t,n){su(e,t,n,null,"mounted")},beforeUpdate(e,t,n,o){su(e,t,n,o,"beforeUpdate")},updated(e,t,n,o){su(e,t,n,o,"updated")}};function ou(e,t){switch(e){case"SELECT":return Yc;case"TEXTAREA":return Gc;default:switch(t){case"checkbox":return Jc;case"radio":return Xc;default:return Gc}}}function su(e,t,n,o,s){const r=ou(e.tagName,n.props&&n.props.type)[s];r&&r(e,t,n,o)}const ru=["ctrl","shift","alt","meta"],iu={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>ru.some((n=>e[`${n}Key`]&&!t.includes(n)))},au=(e,t)=>{const n=e._withMods||(e._withMods={}),o=t.join(".");return n[o]||(n[o]=(n,...o)=>{for(let e=0;e<t.length;e++){const o=iu[t[e]];if(o&&o(n,t))return}return e(n,...o)})},lu={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},cu=(e,t)=>{const n=e._withKeys||(e._withKeys={}),o=t.join(".");return n[o]||(n[o]=n=>{if(!("key"in n))return;const o=I(n.key);return t.some((e=>e===o||lu[e]===o))?e(n):void 0})},uu=u({patchProp:(e,t,n,o,s,r)=>{const i="svg"===s;"class"===t?function(e,t,n){const o=e[Dl];o&&(t=(t?[t,...o]:[...o]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,o,i):"style"===t?function(e,t,n){const o=e.style,s=b(n);let r=!1;if(n&&!s){if(t)if(b(t))for(const e of t.split(";")){const t=e.slice(0,e.indexOf(":")).trim();null==n[t]&&fc(o,t,"")}else for(const e in t)null==n[e]&&fc(o,e,"");for(const e in n)"display"===e&&(r=!0),fc(o,e,n[e])}else if(s){if(t!==n){const e=o[ic];e&&(n+=";"+e),o.cssText=n,r=uc.test(n)}}else t&&e.removeAttribute("style");nc in e&&(e[nc]=r?o.display:"",e[oc]&&(o.display="none"))}(e,n,o):l(t)?c(t)||xc(e,t,0,o,r):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,o){if(o)return"innerHTML"===t||"textContent"===t||!!(t in e&&jc(t)&&y(n));if("spellcheck"===t||"draggable"===t||"translate"===t)return!1;if("form"===t)return!1;if("list"===t&&"INPUT"===e.tagName)return!1;if("type"===t&&"TEXTAREA"===e.tagName)return!1;if("width"===t||"height"===t){const t=e.tagName;if("IMG"===t||"VIDEO"===t||"CANVAS"===t||"SOURCE"===t)return!1}if(jc(t)&&b(n))return!1;return t in e}(e,t,o,i))?(yc(e,t,o),e.tagName.includes("-")||"value"!==t&&"checked"!==t&&"selected"!==t||vc(e,t,o,i,0,"value"!==t)):!e._isVueCE||!/[A-Z]/.test(t)&&b(o)?("true-value"===t?e._trueValue=o:"false-value"===t&&(e._falseValue=o),vc(e,t,o,i)):yc(e,N(t),o,0,t)}},Ll);let du,pu=!1;function fu(){return du||(du=wi(uu))}function hu(){return du=pu?du:ki(uu),pu=!0,du}const mu=(...e)=>{fu().render(...e)},gu=(...e)=>{hu().hydrate(...e)},vu=(...e)=>{const t=fu().createApp(...e);_u(t),xu(t);const{mount:n}=t;return t.mount=e=>{const o=Su(e);if(!o)return;const s=t._component;y(s)||s.render||s.template||(s.template=o.innerHTML),1===o.nodeType&&(o.textContent="");const r=n(o,!1,bu(o));return o instanceof Element&&(o.removeAttribute("v-cloak"),o.setAttribute("data-v-app","")),r},t},yu=(...e)=>{const t=hu().createApp(...e);_u(t),xu(t);const{mount:n}=t;return t.mount=e=>{const t=Su(e);if(t)return n(t,!0,bu(t))},t};function bu(e){return e instanceof SVGElement?"svg":"function"==typeof MathMLElement&&e instanceof MathMLElement?"mathml":void 0}function _u(e){Object.defineProperty(e.config,"isNativeTag",{value:e=>te(e)||ne(e)||oe(e),writable:!1})}function xu(e){if(al()){const t=e.config.isCustomElement;Object.defineProperty(e.config,"isCustomElement",{get:()=>t,set(){wl("The `isCustomElement` config option is deprecated. Use `compilerOptions.isCustomElement` instead.")}});const n=e.config.compilerOptions,o='The `compilerOptions` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, `compilerOptions` must be passed to `@vue/compiler-dom` in the build setup instead.\n- For vue-loader: pass it via vue-loader\'s `compilerOptions` loader option.\n- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc';Object.defineProperty(e.config,"compilerOptions",{get:()=>(wl(o),n),set(){wl(o)}})}}function Su(e){if(b(e)){const t=document.querySelector(e);return t||wl(`Failed to mount app: mount target selector "${e}" returned null.`),t}return window.ShadowRoot&&e instanceof window.ShadowRoot&&"closed"===e.mode&&wl('mounting on a ShadowRoot with `{mode: "closed"}` may lead to unpredictable bugs'),e}let wu=!1;const ku=()=>{wu||(wu=!0,Gc.getSSRProps=({value:e})=>({value:e}),Xc.getSSRProps=({value:e},t)=>{if(t.props&&fe(t.props.value,e))return{checked:!0}},Jc.getSSRProps=({value:e},t)=>{if(h(e)){if(t.props&&he(e,t.props.value)>-1)return{checked:!0}}else if(g(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},nu.getSSRProps=(e,t)=>{if("string"!=typeof t.type)return;const n=ou(t.type.toUpperCase(),t.props&&t.props.type);return n.getSSRProps?n.getSSRProps(e,t):void 0},sc.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}})};var Cu=Object.freeze({__proto__:null,BaseTransition:Go,BaseTransitionPropsValidators:zo,Comment:fa,DeprecationTypes:Rl,EffectScope:Se,ErrorCodes:Rn,ErrorTypeStrings:kl,Fragment:da,KeepAlive:As,ReactiveEffect:je,Static:ha,Suspense:sa,Teleport:$o,Text:pa,TrackOpTypes:hn,Transition:Vl,TransitionGroup:Bc,TriggerOpTypes:mn,VueElement:Nc,assertNumber:An,callWithAsyncErrorHandling:Pn,callWithErrorHandling:Nn,camelize:N,capitalize:M,cloneVNode:Pa,compatUtils:Al,computed:vl,createApp:vu,createBlock:ka,createCommentVNode:Fa,createElementBlock:wa,createElementVNode:Ra,createHydrationRenderer:ki,createPropsRestProxy:Tr,createRenderer:wi,createSSRApp:yu,createSlots:sr,createStaticVNode:La,createTextVNode:Ma,createVNode:Oa,customRef:an,defineAsyncComponent:Es,defineComponent:ts,defineCustomElement:Ac,defineEmits:gr,defineExpose:vr,defineModel:_r,defineOptions:yr,defineProps:mr,defineSSRCustomElement:Rc,defineSlots:br,devtools:Cl,effect:Be,effectScope:we,getCurrentInstance:Ka,getCurrentScope:ke,getCurrentWatcher:bn,getTransitionRawChildren:es,guardReactiveProps:Na,h:yl,handleError:In,hasInjectionContext:Gr,hydrate:gu,hydrateOnIdle:xs,hydrateOnInteraction:ks,hydrateOnMediaQuery:ws,hydrateOnVisible:Ss,initCustomFormatter:bl,initDirectivesForSSR:ku,inject:Kr,isMemoSame:xl,isProxy:Ht,isReactive:Ut,isReadonly:Vt,isRef:Jt,isRuntimeOnly:al,isShallow:qt,isVNode:Ca,markRaw:Wt,mergeDefaults:Er,mergeModels:jr,mergeProps:Ua,nextTick:qn,normalizeClass:Q,normalizeProps:ee,normalizeStyle:G,onActivated:Os,onBeforeMount:Ds,onBeforeUnmount:qs,onBeforeUpdate:Us,onDeactivated:Ns,onErrorCaptured:Gs,onMounted:Bs,onRenderTracked:Ks,onRenderTriggered:Ws,onScopeDispose:Ce,onServerPrefetch:zs,onUnmounted:Hs,onUpdated:Vs,onWatcherCleanup:_n,openBlock:va,popScopeId:wo,provide:Wr,proxyRefs:sn,pushScopeId:So,queuePostFlushCb:Wn,reactive:Lt,readonly:$t,ref:Zt,registerRuntimeCompiler:il,render:mu,renderList:or,renderSlot:rr,resolveComponent:Xs,resolveDirective:er,resolveDynamicComponent:Qs,resolveFilter:Tl,resolveTransitionHooks:Zo,setBlockTracking:xa,setDevtoolsHook:El,setTransitionHooks:Qo,shallowReactive:Ft,shallowReadonly:Dt,shallowRef:Xt,ssrContextKey:Ni,ssrUtils:jl,stop:Ue,toDisplayString:ge,toHandlerKey:L,toHandlers:ar,toRaw:zt,toRef:dn,toRefs:ln,toValue:nn,transformVNodeArgs:ja,triggerRef:en,unref:tn,useAttrs:wr,useCssModule:Mc,useCssVars:ac,useHost:Pc,useId:ns,useModel:Ui,useSSRContext:Pi,useShadowRoot:Ic,useSlots:Sr,useTemplateRef:rs,useTransitionState:qo,vModelCheckbox:Jc,vModelDynamic:nu,vModelRadio:Xc,vModelSelect:Yc,vModelText:Gc,vShow:sc,version:Sl,warn:wl,watch:Fi,watchEffect:Ii,watchPostEffect:Mi,watchSyncEffect:Li,withAsyncContext:Ar,withCtx:Co,withDefaults:xr,withDirectives:jo,withKeys:cu,withMemo:_l,withModifiers:au,withScopeId:ko});const Eu=Symbol("Fragment"),ju=Symbol("Teleport"),Tu=Symbol("Suspense"),Au=Symbol("KeepAlive"),Ru=Symbol("BaseTransition"),Ou=Symbol("openBlock"),Nu=Symbol("createBlock"),Pu=Symbol("createElementBlock"),Iu=Symbol("createVNode"),Mu=Symbol("createElementVNode"),Lu=Symbol("createCommentVNode"),Fu=Symbol("createTextVNode"),$u=Symbol("createStaticVNode"),Du=Symbol("resolveComponent"),Bu=Symbol("resolveDynamicComponent"),Uu=Symbol("resolveDirective"),Vu=Symbol("resolveFilter"),qu=Symbol("withDirectives"),Hu=Symbol("renderList"),zu=Symbol("renderSlot"),Wu=Symbol("createSlots"),Ku=Symbol("toDisplayString"),Gu=Symbol("mergeProps"),Ju=Symbol("normalizeClass"),Zu=Symbol("normalizeStyle"),Xu=Symbol("normalizeProps"),Yu=Symbol("guardReactiveProps"),Qu=Symbol("toHandlers"),ed=Symbol("camelize"),td=Symbol("capitalize"),nd=Symbol("toHandlerKey"),od=Symbol("setBlockTracking"),sd=Symbol("pushScopeId"),rd=Symbol("popScopeId"),id=Symbol("withCtx"),ad=Symbol("unref"),ld=Symbol("isRef"),cd=Symbol("withMemo"),ud=Symbol("isMemoSame"),dd={[Eu]:"Fragment",[ju]:"Teleport",[Tu]:"Suspense",[Au]:"KeepAlive",[Ru]:"BaseTransition",[Ou]:"openBlock",[Nu]:"createBlock",[Pu]:"createElementBlock",[Iu]:"createVNode",[Mu]:"createElementVNode",[Lu]:"createCommentVNode",[Fu]:"createTextVNode",[$u]:"createStaticVNode",[Du]:"resolveComponent",[Bu]:"resolveDynamicComponent",[Uu]:"resolveDirective",[Vu]:"resolveFilter",[qu]:"withDirectives",[Hu]:"renderList",[zu]:"renderSlot",[Wu]:"createSlots",[Ku]:"toDisplayString",[Gu]:"mergeProps",[Ju]:"normalizeClass",[Zu]:"normalizeStyle",[Xu]:"normalizeProps",[Yu]:"guardReactiveProps",[Qu]:"toHandlers",[ed]:"camelize",[td]:"capitalize",[nd]:"toHandlerKey",[od]:"setBlockTracking",[sd]:"pushScopeId",[rd]:"popScopeId",[id]:"withCtx",[ad]:"unref",[ld]:"isRef",[cd]:"withMemo",[ud]:"isMemoSame"};const pd={start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0},source:""};function fd(e,t,n,o,s,r,i,a=!1,l=!1,c=!1,u=pd){return e&&(a?(e.helper(Ou),e.helper(wd(e.inSSR,c))):e.helper(Sd(e.inSSR,c)),i&&e.helper(qu)),{type:13,tag:t,props:n,children:o,patchFlag:s,dynamicProps:r,directives:i,isBlock:a,disableTracking:l,isComponent:c,loc:u}}function hd(e,t=pd){return{type:17,loc:t,elements:e}}function md(e,t=pd){return{type:15,loc:t,properties:e}}function gd(e,t){return{type:16,loc:pd,key:b(e)?vd(e,!0):e,value:t}}function vd(e,t=!1,n=pd,o=0){return{type:4,loc:n,content:e,isStatic:t,constType:t?3:o}}function yd(e,t=pd){return{type:8,loc:t,children:e}}function bd(e,t=[],n=pd){return{type:14,loc:n,callee:e,arguments:t}}function _d(e,t=void 0,n=!1,o=!1,s=pd){return{type:18,params:e,returns:t,newline:n,isSlot:o,loc:s}}function xd(e,t,n,o=!0){return{type:19,test:e,consequent:t,alternate:n,newline:o,loc:pd}}function Sd(e,t){return e||t?Iu:Mu}function wd(e,t){return e||t?Nu:Pu}function kd(e,{helper:t,removeHelper:n,inSSR:o}){e.isBlock||(e.isBlock=!0,n(Sd(o,e.isComponent)),t(Ou),t(wd(o,e.isComponent)))}const Cd=new Uint8Array([123,123]),Ed=new Uint8Array([125,125]);function jd(e){return e>=97&&e<=122||e>=65&&e<=90}function Td(e){return 32===e||10===e||9===e||12===e||13===e}function Ad(e){return 47===e||62===e||Td(e)}function Rd(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}const Od={Cdata:new Uint8Array([67,68,65,84,65,91]),CdataEnd:new Uint8Array([93,93,62]),CommentEnd:new Uint8Array([45,45,62]),ScriptEnd:new Uint8Array([60,47,115,99,114,105,112,116]),StyleEnd:new Uint8Array([60,47,115,116,121,108,101]),TitleEnd:new Uint8Array([60,47,116,105,116,108,101]),TextareaEnd:new Uint8Array([60,47,116,101,120,116,97,114,101,97])};function Nd(e){throw e}function Pd(e){}function Id(e,t,n,o){const s=(n||Md)[e]+(o||""),r=new SyntaxError(String(s));return r.code=e,r.loc=t,r}const Md={0:"Illegal comment.",1:"CDATA section is allowed only in XML context.",2:"Duplicate attribute.",3:"End tag cannot have attributes.",4:"Illegal '/' in tags.",5:"Unexpected EOF in tag.",6:"Unexpected EOF in CDATA section.",7:"Unexpected EOF in comment.",8:"Unexpected EOF in script.",9:"Unexpected EOF in tag.",10:"Incorrectly closed comment.",11:"Incorrectly opened comment.",12:"Illegal tag name. Use '&lt;' to print '<'.",13:"Attribute value was expected.",14:"End tag name was expected.",15:"Whitespace was expected.",16:"Unexpected '\x3c!--' in comment.",17:"Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C (<).",18:"Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",19:"Attribute name cannot start with '='.",21:"'<?' is allowed only in XML context.",20:"Unexpected null character.",22:"Illegal '/' in tags.",23:"Invalid end tag.",24:"Element is missing end tag.",25:"Interpolation end sign was not found.",27:"End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",26:"Legal directive name was expected.",28:"v-if/v-else-if is missing expression.",29:"v-if/else branches must use unique keys.",30:"v-else/v-else-if has no adjacent v-if or v-else-if.",31:"v-for is missing expression.",32:"v-for has invalid expression.",33:"<template v-for> key should be placed on the <template> tag.",34:"v-bind is missing expression.",52:"v-bind with same-name shorthand only allows static argument.",35:"v-on is missing expression.",36:"Unexpected custom directive on <slot> outlet.",37:"Mixed v-slot usage on both the component and nested <template>. When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.",38:"Duplicate slot names found. ",39:"Extraneous children found when component already has explicitly named default slot. These children will be ignored.",40:"v-slot can only be used on components or <template> tags.",41:"v-model is missing expression.",42:"v-model value must be a valid JavaScript member expression.",43:"v-model cannot be used on v-for or v-slot scope variables because they are not writable.",44:"v-model cannot be used on a prop, because local prop bindings are not writable.\nUse a v-bind binding combined with a v-on listener that emits update:x event instead.",45:"Error parsing JavaScript expression: ",46:"<KeepAlive> expects exactly one child component.",51:"@vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, @vnode-mounted should be changed to @vue:mounted. @vnode-* hooks support has been removed in 3.4.",47:'"prefixIdentifiers" option is not supported in this build of compiler.',48:"ES module mode is not supported in this build of compiler.",49:'"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.',50:'"scopeId" option is only supported in module mode.',53:""},Ld=e=>4===e.type&&e.isStatic;function Fd(e){switch(e){case"Teleport":case"teleport":return ju;case"Suspense":case"suspense":return Tu;case"KeepAlive":case"keep-alive":return Au;case"BaseTransition":case"base-transition":return Ru}}const $d=/^\d|[^\$\w\xA0-\uFFFF]/,Dd=e=>!$d.test(e),Bd=/[A-Za-z_$\xA0-\uFFFF]/,Ud=/[\.\?\w$\xA0-\uFFFF]/,Vd=/\s+[.[]\s*|\s*[.[]\s+/g,qd=e=>4===e.type?e.content:e.loc.source,Hd=e=>{const t=qd(e).trim().replace(Vd,(e=>e.trim()));let n=0,o=[],s=0,r=0,i=null;for(let e=0;e<t.length;e++){const a=t.charAt(e);switch(n){case 0:if("["===a)o.push(n),n=1,s++;else if("("===a)o.push(n),n=2,r++;else if(!(0===e?Bd:Ud).test(a))return!1;break;case 1:"'"===a||'"'===a||"`"===a?(o.push(n),n=3,i=a):"["===a?s++:"]"===a&&(--s||(n=o.pop()));break;case 2:if("'"===a||'"'===a||"`"===a)o.push(n),n=3,i=a;else if("("===a)r++;else if(")"===a){if(e===t.length-1)return!1;--r||(n=o.pop())}break;case 3:a===i&&(n=o.pop(),i=null)}}return!s&&!r},zd=/^\s*(async\s*)?(\([^)]*?\)|[\w$_]+)\s*(:[^=]+)?=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Wd=e=>zd.test(qd(e));function Kd(e,t){if(!e)throw new Error(t||"unexpected compiler condition")}function Gd(e,t,n=!1){for(let o=0;o<e.props.length;o++){const s=e.props[o];if(7===s.type&&(n||s.exp)&&(b(t)?s.name===t:t.test(s.name)))return s}}function Jd(e,t,n=!1,o=!1){for(let s=0;s<e.props.length;s++){const r=e.props[s];if(6===r.type){if(n)continue;if(r.name===t&&(r.value||o))return r}else if("bind"===r.name&&(r.exp||o)&&Zd(r.arg,t))return r}}function Zd(e,t){return!(!e||!Ld(e)||e.content!==t)}function Xd(e){return 5===e.type||2===e.type}function Yd(e){return 7===e.type&&"slot"===e.name}function Qd(e){return 1===e.type&&3===e.tagType}function ep(e){return 1===e.type&&2===e.tagType}const tp=new Set([Xu,Yu]);function np(e,t=[]){if(e&&!b(e)&&14===e.type){const n=e.callee;if(!b(n)&&tp.has(n))return np(e.arguments[0],t.concat(e))}return[e,t]}function op(e,t,n){let o,s,r=13===e.type?e.props:e.arguments[2],i=[];if(r&&!b(r)&&14===r.type){const e=np(r);r=e[0],i=e[1],s=i[i.length-1]}if(null==r||b(r))o=md([t]);else if(14===r.type){const e=r.arguments[0];b(e)||15!==e.type?r.callee===Qu?o=bd(n.helper(Gu),[md([t]),r]):r.arguments.unshift(md([t])):sp(t,e)||e.properties.unshift(t),!o&&(o=r)}else 15===r.type?(sp(t,r)||r.properties.unshift(t),o=r):(o=bd(n.helper(Gu),[md([t]),r]),s&&s.callee===Yu&&(s=i[i.length-2]));13===e.type?s?s.arguments[0]=o:e.props=o:s?s.arguments[0]=o:e.arguments[2]=o}function sp(e,t){let n=!1;if(4===e.key.type){const o=e.key.content;n=t.properties.some((e=>4===e.key.type&&e.key.content===o))}return n}function rp(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,n)=>"-"===t?"_":e.charCodeAt(n).toString()))}`}const ip=/([\s\S]*?)\s+(?:in|of)\s+(\S[\s\S]*)/,ap={parseMode:"base",ns:0,delimiters:["{{","}}"],getNamespace:()=>0,isVoidTag:a,isPreTag:a,isIgnoreNewlineTag:a,isCustomElement:a,onError:Nd,onWarn:Pd,comments:!0,prefixIdentifiers:!1};let lp=ap,cp=null,up="",dp=null,pp=null,fp="",hp=-1,mp=-1,gp=0,vp=!1,yp=null;const bp=[],_p=new class{constructor(e,t){this.stack=e,this.cbs=t,this.state=1,this.buffer="",this.sectionStart=0,this.index=0,this.entityStart=0,this.baseState=1,this.inRCDATA=!1,this.inXML=!1,this.inVPre=!1,this.newlines=[],this.mode=0,this.delimiterOpen=Cd,this.delimiterClose=Ed,this.delimiterIndex=-1,this.currentSequence=void 0,this.sequenceIndex=0}get inSFCRoot(){return 2===this.mode&&0===this.stack.length}reset(){this.state=1,this.mode=0,this.buffer="",this.sectionStart=0,this.index=0,this.baseState=1,this.inRCDATA=!1,this.currentSequence=void 0,this.newlines.length=0,this.delimiterOpen=Cd,this.delimiterClose=Ed}getPos(e){let t=1,n=e+1;for(let o=this.newlines.length-1;o>=0;o--){const s=this.newlines[o];if(e>s){t=o+2,n=e-s;break}}return{column:n,line:t,offset:e}}peek(){return this.buffer.charCodeAt(this.index+1)}stateText(e){60===e?(this.index>this.sectionStart&&this.cbs.ontext(this.sectionStart,this.index),this.state=5,this.sectionStart=this.index):this.inVPre||e!==this.delimiterOpen[0]||(this.state=2,this.delimiterIndex=0,this.stateInterpolationOpen(e))}stateInterpolationOpen(e){if(e===this.delimiterOpen[this.delimiterIndex])if(this.delimiterIndex===this.delimiterOpen.length-1){const e=this.index+1-this.delimiterOpen.length;e>this.sectionStart&&this.cbs.ontext(this.sectionStart,e),this.state=3,this.sectionStart=e}else this.delimiterIndex++;else this.inRCDATA?(this.state=32,this.stateInRCDATA(e)):(this.state=1,this.stateText(e))}stateInterpolation(e){e===this.delimiterClose[0]&&(this.state=4,this.delimiterIndex=0,this.stateInterpolationClose(e))}stateInterpolationClose(e){e===this.delimiterClose[this.delimiterIndex]?this.delimiterIndex===this.delimiterClose.length-1?(this.cbs.oninterpolation(this.sectionStart,this.index+1),this.inRCDATA?this.state=32:this.state=1,this.sectionStart=this.index+1):this.delimiterIndex++:(this.state=3,this.stateInterpolation(e))}stateSpecialStartSequence(e){const t=this.sequenceIndex===this.currentSequence.length;if(t?Ad(e):(32|e)===this.currentSequence[this.sequenceIndex]){if(!t)return void this.sequenceIndex++}else this.inRCDATA=!1;this.sequenceIndex=0,this.state=6,this.stateInTagName(e)}stateInRCDATA(e){if(this.sequenceIndex===this.currentSequence.length){if(62===e||Td(e)){const t=this.index-this.currentSequence.length;if(this.sectionStart<t){const e=this.index;this.index=t,this.cbs.ontext(this.sectionStart,t),this.index=e}return this.sectionStart=t+2,this.stateInClosingTagName(e),void(this.inRCDATA=!1)}this.sequenceIndex=0}(32|e)===this.currentSequence[this.sequenceIndex]?this.sequenceIndex+=1:0===this.sequenceIndex?this.currentSequence===Od.TitleEnd||this.currentSequence===Od.TextareaEnd&&!this.inSFCRoot?this.inVPre||e!==this.delimiterOpen[0]||(this.state=2,this.delimiterIndex=0,this.stateInterpolationOpen(e)):this.fastForwardTo(60)&&(this.sequenceIndex=1):this.sequenceIndex=Number(60===e)}stateCDATASequence(e){e===Od.Cdata[this.sequenceIndex]?++this.sequenceIndex===Od.Cdata.length&&(this.state=28,this.currentSequence=Od.CdataEnd,this.sequenceIndex=0,this.sectionStart=this.index+1):(this.sequenceIndex=0,this.state=23,this.stateInDeclaration(e))}fastForwardTo(e){for(;++this.index<this.buffer.length;){const t=this.buffer.charCodeAt(this.index);if(10===t&&this.newlines.push(this.index),t===e)return!0}return this.index=this.buffer.length-1,!1}stateInCommentLike(e){e===this.currentSequence[this.sequenceIndex]?++this.sequenceIndex===this.currentSequence.length&&(this.currentSequence===Od.CdataEnd?this.cbs.oncdata(this.sectionStart,this.index-2):this.cbs.oncomment(this.sectionStart,this.index-2),this.sequenceIndex=0,this.sectionStart=this.index+1,this.state=1):0===this.sequenceIndex?this.fastForwardTo(this.currentSequence[0])&&(this.sequenceIndex=1):e!==this.currentSequence[this.sequenceIndex-1]&&(this.sequenceIndex=0)}startSpecial(e,t){this.enterRCDATA(e,t),this.state=31}enterRCDATA(e,t){this.inRCDATA=!0,this.currentSequence=e,this.sequenceIndex=t}stateBeforeTagName(e){33===e?(this.state=22,this.sectionStart=this.index+1):63===e?(this.state=24,this.sectionStart=this.index+1):jd(e)?(this.sectionStart=this.index,0===this.mode?this.state=6:this.inSFCRoot?this.state=34:this.inXML?this.state=6:this.state=116===e?30:115===e?29:6):47===e?this.state=8:(this.state=1,this.stateText(e))}stateInTagName(e){Ad(e)&&this.handleTagName(e)}stateInSFCRootTagName(e){if(Ad(e)){const t=this.buffer.slice(this.sectionStart,this.index);"template"!==t&&this.enterRCDATA(Rd("</"+t),0),this.handleTagName(e)}}handleTagName(e){this.cbs.onopentagname(this.sectionStart,this.index),this.sectionStart=-1,this.state=11,this.stateBeforeAttrName(e)}stateBeforeClosingTagName(e){Td(e)||(62===e?(this.cbs.onerr(14,this.index),this.state=1,this.sectionStart=this.index+1):(this.state=jd(e)?9:27,this.sectionStart=this.index))}stateInClosingTagName(e){(62===e||Td(e))&&(this.cbs.onclosetag(this.sectionStart,this.index),this.sectionStart=-1,this.state=10,this.stateAfterClosingTagName(e))}stateAfterClosingTagName(e){62===e&&(this.state=1,this.sectionStart=this.index+1)}stateBeforeAttrName(e){62===e?(this.cbs.onopentagend(this.index),this.inRCDATA?this.state=32:this.state=1,this.sectionStart=this.index+1):47===e?(this.state=7,62!==this.peek()&&this.cbs.onerr(22,this.index)):60===e&&47===this.peek()?(this.cbs.onopentagend(this.index),this.state=5,this.sectionStart=this.index):Td(e)||(61===e&&this.cbs.onerr(19,this.index),this.handleAttrStart(e))}handleAttrStart(e){118===e&&45===this.peek()?(this.state=13,this.sectionStart=this.index):46===e||58===e||64===e||35===e?(this.cbs.ondirname(this.index,this.index+1),this.state=14,this.sectionStart=this.index+1):(this.state=12,this.sectionStart=this.index)}stateInSelfClosingTag(e){62===e?(this.cbs.onselfclosingtag(this.index),this.state=1,this.sectionStart=this.index+1,this.inRCDATA=!1):Td(e)||(this.state=11,this.stateBeforeAttrName(e))}stateInAttrName(e){61===e||Ad(e)?(this.cbs.onattribname(this.sectionStart,this.index),this.handleAttrNameEnd(e)):34!==e&&39!==e&&60!==e||this.cbs.onerr(17,this.index)}stateInDirName(e){61===e||Ad(e)?(this.cbs.ondirname(this.sectionStart,this.index),this.handleAttrNameEnd(e)):58===e?(this.cbs.ondirname(this.sectionStart,this.index),this.state=14,this.sectionStart=this.index+1):46===e&&(this.cbs.ondirname(this.sectionStart,this.index),this.state=16,this.sectionStart=this.index+1)}stateInDirArg(e){61===e||Ad(e)?(this.cbs.ondirarg(this.sectionStart,this.index),this.handleAttrNameEnd(e)):91===e?this.state=15:46===e&&(this.cbs.ondirarg(this.sectionStart,this.index),this.state=16,this.sectionStart=this.index+1)}stateInDynamicDirArg(e){93===e?this.state=14:(61===e||Ad(e))&&(this.cbs.ondirarg(this.sectionStart,this.index+1),this.handleAttrNameEnd(e),this.cbs.onerr(27,this.index))}stateInDirModifier(e){61===e||Ad(e)?(this.cbs.ondirmodifier(this.sectionStart,this.index),this.handleAttrNameEnd(e)):46===e&&(this.cbs.ondirmodifier(this.sectionStart,this.index),this.sectionStart=this.index+1)}handleAttrNameEnd(e){this.sectionStart=this.index,this.state=17,this.cbs.onattribnameend(this.index),this.stateAfterAttrName(e)}stateAfterAttrName(e){61===e?this.state=18:47===e||62===e?(this.cbs.onattribend(0,this.sectionStart),this.sectionStart=-1,this.state=11,this.stateBeforeAttrName(e)):Td(e)||(this.cbs.onattribend(0,this.sectionStart),this.handleAttrStart(e))}stateBeforeAttrValue(e){34===e?(this.state=19,this.sectionStart=this.index+1):39===e?(this.state=20,this.sectionStart=this.index+1):Td(e)||(this.sectionStart=this.index,this.state=21,this.stateInAttrValueNoQuotes(e))}handleInAttrValue(e,t){(e===t||this.fastForwardTo(t))&&(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(34===t?3:2,this.index+1),this.state=11)}stateInAttrValueDoubleQuotes(e){this.handleInAttrValue(e,34)}stateInAttrValueSingleQuotes(e){this.handleInAttrValue(e,39)}stateInAttrValueNoQuotes(e){Td(e)||62===e?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(1,this.index),this.state=11,this.stateBeforeAttrName(e)):34!==e&&39!==e&&60!==e&&61!==e&&96!==e||this.cbs.onerr(18,this.index)}stateBeforeDeclaration(e){91===e?(this.state=26,this.sequenceIndex=0):this.state=45===e?25:23}stateInDeclaration(e){(62===e||this.fastForwardTo(62))&&(this.state=1,this.sectionStart=this.index+1)}stateInProcessingInstruction(e){(62===e||this.fastForwardTo(62))&&(this.cbs.onprocessinginstruction(this.sectionStart,this.index),this.state=1,this.sectionStart=this.index+1)}stateBeforeComment(e){45===e?(this.state=28,this.currentSequence=Od.CommentEnd,this.sequenceIndex=2,this.sectionStart=this.index+1):this.state=23}stateInSpecialComment(e){(62===e||this.fastForwardTo(62))&&(this.cbs.oncomment(this.sectionStart,this.index),this.state=1,this.sectionStart=this.index+1)}stateBeforeSpecialS(e){e===Od.ScriptEnd[3]?this.startSpecial(Od.ScriptEnd,4):e===Od.StyleEnd[3]?this.startSpecial(Od.StyleEnd,4):(this.state=6,this.stateInTagName(e))}stateBeforeSpecialT(e){e===Od.TitleEnd[3]?this.startSpecial(Od.TitleEnd,4):e===Od.TextareaEnd[3]?this.startSpecial(Od.TextareaEnd,4):(this.state=6,this.stateInTagName(e))}startEntity(){}stateInEntity(){}parse(e){for(this.buffer=e;this.index<this.buffer.length;){const e=this.buffer.charCodeAt(this.index);switch(10===e&&this.newlines.push(this.index),this.state){case 1:this.stateText(e);break;case 2:this.stateInterpolationOpen(e);break;case 3:this.stateInterpolation(e);break;case 4:this.stateInterpolationClose(e);break;case 31:this.stateSpecialStartSequence(e);break;case 32:this.stateInRCDATA(e);break;case 26:this.stateCDATASequence(e);break;case 19:this.stateInAttrValueDoubleQuotes(e);break;case 12:this.stateInAttrName(e);break;case 13:this.stateInDirName(e);break;case 14:this.stateInDirArg(e);break;case 15:this.stateInDynamicDirArg(e);break;case 16:this.stateInDirModifier(e);break;case 28:this.stateInCommentLike(e);break;case 27:this.stateInSpecialComment(e);break;case 11:this.stateBeforeAttrName(e);break;case 6:this.stateInTagName(e);break;case 34:this.stateInSFCRootTagName(e);break;case 9:this.stateInClosingTagName(e);break;case 5:this.stateBeforeTagName(e);break;case 17:this.stateAfterAttrName(e);break;case 20:this.stateInAttrValueSingleQuotes(e);break;case 18:this.stateBeforeAttrValue(e);break;case 8:this.stateBeforeClosingTagName(e);break;case 10:this.stateAfterClosingTagName(e);break;case 29:this.stateBeforeSpecialS(e);break;case 30:this.stateBeforeSpecialT(e);break;case 21:this.stateInAttrValueNoQuotes(e);break;case 7:this.stateInSelfClosingTag(e);break;case 23:this.stateInDeclaration(e);break;case 22:this.stateBeforeDeclaration(e);break;case 25:this.stateBeforeComment(e);break;case 24:this.stateInProcessingInstruction(e);break;case 33:this.stateInEntity()}this.index++}this.cleanup(),this.finish()}cleanup(){this.sectionStart!==this.index&&(1===this.state||32===this.state&&0===this.sequenceIndex?(this.cbs.ontext(this.sectionStart,this.index),this.sectionStart=this.index):19!==this.state&&20!==this.state&&21!==this.state||(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=this.index))}finish(){this.handleTrailingData(),this.cbs.onend()}handleTrailingData(){const e=this.buffer.length;this.sectionStart>=e||(28===this.state?this.currentSequence===Od.CdataEnd?this.cbs.oncdata(this.sectionStart,e):this.cbs.oncomment(this.sectionStart,e):6===this.state||11===this.state||18===this.state||17===this.state||12===this.state||13===this.state||14===this.state||15===this.state||16===this.state||20===this.state||19===this.state||21===this.state||9===this.state||this.cbs.ontext(this.sectionStart,e))}emitCodePoint(e,t){}}(bp,{onerr:Bp,ontext(e,t){Cp(wp(e,t),e,t)},ontextentity(e,t,n){Cp(e,t,n)},oninterpolation(e,t){if(vp)return Cp(wp(e,t),e,t);let n=e+_p.delimiterOpen.length,o=t-_p.delimiterClose.length;for(;Td(up.charCodeAt(n));)n++;for(;Td(up.charCodeAt(o-1));)o--;let s=wp(n,o);s.includes("&")&&(s=lp.decodeEntities(s,!1)),Ip({type:5,content:Dp(s,!1,Mp(n,o)),loc:Mp(e,t)})},onopentagname(e,t){const n=wp(e,t);dp={type:1,tag:n,ns:lp.getNamespace(n,bp[0],lp.ns),tagType:0,props:[],children:[],loc:Mp(e-1,t),codegenNode:void 0}},onopentagend(e){kp(e)},onclosetag(e,t){const n=wp(e,t);if(!lp.isVoidTag(n)){let o=!1;for(let e=0;e<bp.length;e++){if(bp[e].tag.toLowerCase()===n.toLowerCase()){o=!0,e>0&&Bp(24,bp[0].loc.start.offset);for(let n=0;n<=e;n++){Ep(bp.shift(),t,n<e)}break}}o||Bp(23,jp(e,60))}},onselfclosingtag(e){const t=dp.tag;dp.isSelfClosing=!0,kp(e),bp[0]&&bp[0].tag===t&&Ep(bp.shift(),e)},onattribname(e,t){pp={type:6,name:wp(e,t),nameLoc:Mp(e,t),value:void 0,loc:Mp(e)}},ondirname(e,t){const n=wp(e,t),o="."===n||":"===n?"bind":"@"===n?"on":"#"===n?"slot":n.slice(2);if(vp||""!==o||Bp(26,e),vp||""===o)pp={type:6,name:n,nameLoc:Mp(e,t),value:void 0,loc:Mp(e)};else if(pp={type:7,name:o,rawName:n,exp:void 0,arg:void 0,modifiers:"."===n?[vd("prop")]:[],loc:Mp(e)},"pre"===o){vp=_p.inVPre=!0,yp=dp;const e=dp.props;for(let t=0;t<e.length;t++)7===e[t].type&&(e[t]=$p(e[t]))}},ondirarg(e,t){if(e===t)return;const n=wp(e,t);if(vp)pp.name+=n,Fp(pp.nameLoc,t);else{const o="["!==n[0];pp.arg=Dp(o?n:n.slice(1,-1),o,Mp(e,t),o?3:0)}},ondirmodifier(e,t){const n=wp(e,t);if(vp)pp.name+="."+n,Fp(pp.nameLoc,t);else if("slot"===pp.name){const e=pp.arg;e&&(e.content+="."+n,Fp(e.loc,t))}else{const o=vd(n,!0,Mp(e,t));pp.modifiers.push(o)}},onattribdata(e,t){fp+=wp(e,t),hp<0&&(hp=e),mp=t},onattribentity(e,t,n){fp+=e,hp<0&&(hp=t),mp=n},onattribnameend(e){const t=pp.loc.start.offset,n=wp(t,e);7===pp.type&&(pp.rawName=n),dp.props.some((e=>(7===e.type?e.rawName:e.name)===n))&&Bp(2,t)},onattribend(e,t){if(dp&&pp){if(Fp(pp.loc,t),0!==e)if(fp.includes("&")&&(fp=lp.decodeEntities(fp,!0)),6===pp.type)"class"===pp.name&&(fp=Pp(fp).trim()),1!==e||fp||Bp(13,t),pp.value={type:2,content:fp,loc:1===e?Mp(hp,mp):Mp(hp-1,mp+1)},_p.inSFCRoot&&"template"===dp.tag&&"lang"===pp.name&&fp&&"html"!==fp&&_p.enterRCDATA(Rd("</template"),0);else{let e=0;pp.exp=Dp(fp,!1,Mp(hp,mp),0,e),"for"===pp.name&&(pp.forParseResult=function(e){const t=e.loc,n=e.content,o=n.match(ip);if(!o)return;const[,s,r]=o,i=(e,n,o=!1)=>{const s=t.start.offset+n;return Dp(e,!1,Mp(s,s+e.length),0,o?1:0)},a={source:i(r.trim(),n.indexOf(r,s.length)),value:void 0,key:void 0,index:void 0,finalized:!1};let l=s.trim().replace(Sp,"").trim();const c=s.indexOf(l),u=l.match(xp);if(u){l=l.replace(xp,"").trim();const e=u[1].trim();let t;if(e&&(t=n.indexOf(e,c+l.length),a.key=i(e,t,!0)),u[2]){const o=u[2].trim();o&&(a.index=i(o,n.indexOf(o,a.key?t+e.length:c+l.length),!0))}}l&&(a.value=i(l,c,!0));return a}(pp.exp))}7===pp.type&&"pre"===pp.name||dp.props.push(pp)}fp="",hp=mp=-1},oncomment(e,t){lp.comments&&Ip({type:3,content:wp(e,t),loc:Mp(e-4,t+3)})},onend(){const e=up.length;if(1!==_p.state)switch(_p.state){case 5:case 8:Bp(5,e);break;case 3:case 4:Bp(25,_p.sectionStart);break;case 28:_p.currentSequence===Od.CdataEnd?Bp(6,e):Bp(7,e);break;case 6:case 7:case 9:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:Bp(9,e)}for(let t=0;t<bp.length;t++)Ep(bp[t],e-1),Bp(24,bp[t].loc.start.offset)},oncdata(e,t){0!==bp[0].ns?Cp(wp(e,t),e,t):Bp(1,e-9)},onprocessinginstruction(e){0===(bp[0]?bp[0].ns:lp.ns)&&Bp(21,e-1)}}),xp=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Sp=/^\(|\)$/g;function wp(e,t){return up.slice(e,t)}function kp(e){_p.inSFCRoot&&(dp.innerLoc=Mp(e+1,e+1)),Ip(dp);const{tag:t,ns:n}=dp;0===n&&lp.isPreTag(t)&&gp++,lp.isVoidTag(t)?Ep(dp,e):(bp.unshift(dp),1!==n&&2!==n||(_p.inXML=!0)),dp=null}function Cp(e,t,n){{const t=bp[0]&&bp[0].tag;"script"!==t&&"style"!==t&&e.includes("&")&&(e=lp.decodeEntities(e,!1))}const o=bp[0]||cp,s=o.children[o.children.length-1];s&&2===s.type?(s.content+=e,Fp(s.loc,n)):o.children.push({type:2,content:e,loc:Mp(t,n)})}function Ep(e,t,n=!1){Fp(e.loc,n?jp(t,60):function(e,t){let n=e;for(;up.charCodeAt(n)!==t&&n<up.length-1;)n++;return n}(t,62)+1),_p.inSFCRoot&&(e.children.length?e.innerLoc.end=u({},e.children[e.children.length-1].loc.end):e.innerLoc.end=u({},e.innerLoc.start),e.innerLoc.source=wp(e.innerLoc.start.offset,e.innerLoc.end.offset));const{tag:o,ns:s,children:r}=e;if(vp||("slot"===o?e.tagType=2:!function({tag:e,props:t}){if("template"===e)for(let e=0;e<t.length;e++)if(7===t[e].type&&Tp.has(t[e].name))return!0;return!1}(e)?function({tag:e,props:t}){if(lp.isCustomElement(e))return!1;if("component"===e||(n=e.charCodeAt(0),n>64&&n<91)||Fd(e)||lp.isBuiltInComponent&&lp.isBuiltInComponent(e)||lp.isNativeTag&&!lp.isNativeTag(e))return!0;var n;for(let e=0;e<t.length;e++){const n=t[e];if(6===n.type&&"is"===n.name&&n.value&&n.value.content.startsWith("vue:"))return!0}return!1}(e)&&(e.tagType=1):e.tagType=3),_p.inRCDATA||(e.children=Rp(r)),0===s&&lp.isIgnoreNewlineTag(o)){const e=r[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}0===s&&lp.isPreTag(o)&&gp--,yp===e&&(vp=_p.inVPre=!1,yp=null),_p.inXML&&0===(bp[0]?bp[0].ns:lp.ns)&&(_p.inXML=!1)}function jp(e,t){let n=e;for(;up.charCodeAt(n)!==t&&n>=0;)n--;return n}const Tp=new Set(["if","else","else-if","for","slot"]);const Ap=/\r\n/g;function Rp(e,t){const n="preserve"!==lp.whitespace;let o=!1;for(let t=0;t<e.length;t++){const s=e[t];if(2===s.type)if(gp)s.content=s.content.replace(Ap,"\n");else if(Op(s.content)){const r=e[t-1]&&e[t-1].type,i=e[t+1]&&e[t+1].type;!r||!i||n&&(3===r&&(3===i||1===i)||1===r&&(3===i||1===i&&Np(s.content)))?(o=!0,e[t]=null):s.content=" "}else n&&(s.content=Pp(s.content))}return o?e.filter(Boolean):e}function Op(e){for(let t=0;t<e.length;t++)if(!Td(e.charCodeAt(t)))return!1;return!0}function Np(e){for(let t=0;t<e.length;t++){const n=e.charCodeAt(t);if(10===n||13===n)return!0}return!1}function Pp(e){let t="",n=!1;for(let o=0;o<e.length;o++)Td(e.charCodeAt(o))?n||(t+=" ",n=!0):(t+=e[o],n=!1);return t}function Ip(e){(bp[0]||cp).children.push(e)}function Mp(e,t){return{start:_p.getPos(e),end:null==t?t:_p.getPos(t),source:null==t?t:wp(e,t)}}function Lp(e){return Mp(e.start.offset,e.end.offset)}function Fp(e,t){e.end=_p.getPos(t),e.source=wp(e.start.offset,t)}function $p(e){const t={type:6,name:e.rawName,nameLoc:Mp(e.loc.start.offset,e.loc.start.offset+e.rawName.length),value:void 0,loc:e.loc};if(e.exp){const n=e.exp.loc;n.end.offset<e.loc.end.offset&&(n.start.offset--,n.start.column--,n.end.offset++,n.end.column++),t.value={type:2,content:e.exp.content,loc:n}}return t}function Dp(e,t=!1,n,o=0,s=0){return vd(e,t,n,o)}function Bp(e,t,n){lp.onError(Id(e,Mp(t,t),void 0,n))}function Up(e,t){if(_p.reset(),dp=null,pp=null,fp="",hp=-1,mp=-1,bp.length=0,up=e,lp=u({},ap),t){let e;for(e in t)null!=t[e]&&(lp[e]=t[e])}if(!lp.decodeEntities)throw new Error("[@vue/compiler-core] decodeEntities option is required in browser builds.");_p.mode="html"===lp.parseMode?1:"sfc"===lp.parseMode?2:0,_p.inXML=1===lp.ns||2===lp.ns;const n=t&&t.delimiters;n&&(_p.delimiterOpen=Rd(n[0]),_p.delimiterClose=Rd(n[1]));const o=cp=function(e,t=""){return{type:0,source:t,children:e,helpers:new Set,components:[],directives:[],hoists:[],imports:[],cached:[],temps:0,codegenNode:void 0,loc:pd}}([],e);return _p.parse(up),o.loc=Mp(0,e.length),o.children=Rp(o.children),cp=null,o}function Vp(e,t){Hp(e,void 0,t,qp(e,e.children[0]))}function qp(e,t){const{children:n}=e;return 1===n.length&&1===t.type&&!ep(t)}function Hp(e,t,n,o=!1,s=!1){const{children:r}=e,i=[];for(let t=0;t<r.length;t++){const a=r[t];if(1===a.type&&0===a.tagType){const e=o?0:zp(a,n);if(e>0){if(e>=2){a.codegenNode.patchFlag=-1,i.push(a);continue}}else{const e=a.codegenNode;if(13===e.type){const t=e.patchFlag;if((void 0===t||512===t||1===t)&&Gp(a,n)>=2){const t=Jp(a);t&&(e.props=n.hoist(t))}e.dynamicProps&&(e.dynamicProps=n.hoist(e.dynamicProps))}}}else if(12===a.type){if((o?0:zp(a,n))>=2){i.push(a);continue}}if(1===a.type){const t=1===a.tagType;t&&n.scopes.vSlot++,Hp(a,e,n,!1,s),t&&n.scopes.vSlot--}else if(11===a.type)Hp(a,e,n,1===a.children.length,!0);else if(9===a.type)for(let t=0;t<a.branches.length;t++)Hp(a.branches[t],e,n,1===a.branches[t].children.length,s)}let a=!1;if(i.length===r.length&&1===e.type)if(0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&h(e.codegenNode.children))e.codegenNode.children=l(hd(e.codegenNode.children)),a=!0;else if(1===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&e.codegenNode.children&&!h(e.codegenNode.children)&&15===e.codegenNode.children.type){const t=c(e.codegenNode,"default");t&&(t.returns=l(hd(t.returns)),a=!0)}else if(3===e.tagType&&t&&1===t.type&&1===t.tagType&&t.codegenNode&&13===t.codegenNode.type&&t.codegenNode.children&&!h(t.codegenNode.children)&&15===t.codegenNode.children.type){const n=Gd(e,"slot",!0),o=n&&n.arg&&c(t.codegenNode,n.arg);o&&(o.returns=l(hd(o.returns)),a=!0)}if(!a)for(const e of i)e.codegenNode=n.cache(e.codegenNode);function l(e){const t=n.cache(e);return s&&n.hmr&&(t.needArraySpread=!0),t}function c(e,t){if(e.children&&!h(e.children)&&15===e.children.type){const n=e.children.properties.find((e=>e.key===t||e.key.content===t));return n&&n.value}}i.length&&n.transformHoist&&n.transformHoist(r,n,e)}function zp(e,t){const{constantCache:n}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const o=n.get(e);if(void 0!==o)return o;const s=e.codegenNode;if(13!==s.type)return 0;if(s.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag&&"math"!==e.tag)return 0;if(void 0===s.patchFlag){let o=3;const r=Gp(e,t);if(0===r)return n.set(e,0),0;r<o&&(o=r);for(let s=0;s<e.children.length;s++){const r=zp(e.children[s],t);if(0===r)return n.set(e,0),0;r<o&&(o=r)}if(o>1)for(let s=0;s<e.props.length;s++){const r=e.props[s];if(7===r.type&&"bind"===r.name&&r.exp){const s=zp(r.exp,t);if(0===s)return n.set(e,0),0;s<o&&(o=s)}}if(s.isBlock){for(let t=0;t<e.props.length;t++){if(7===e.props[t].type)return n.set(e,0),0}t.removeHelper(Ou),t.removeHelper(wd(t.inSSR,s.isComponent)),s.isBlock=!1,t.helper(Sd(t.inSSR,s.isComponent))}return n.set(e,o),o}return n.set(e,0),0;case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return zp(e.content,t);case 4:return e.constType;case 8:let r=3;for(let n=0;n<e.children.length;n++){const o=e.children[n];if(b(o)||_(o))continue;const s=zp(o,t);if(0===s)return 0;s<r&&(r=s)}return r;case 20:return 2}}const Wp=new Set([Ju,Zu,Xu,Yu]);function Kp(e,t){if(14===e.type&&!b(e.callee)&&Wp.has(e.callee)){const n=e.arguments[0];if(4===n.type)return zp(n,t);if(14===n.type)return Kp(n,t)}return 0}function Gp(e,t){let n=3;const o=Jp(e);if(o&&15===o.type){const{properties:e}=o;for(let o=0;o<e.length;o++){const{key:s,value:r}=e[o],i=zp(s,t);if(0===i)return i;let a;if(i<n&&(n=i),a=4===r.type?zp(r,t):14===r.type?Kp(r,t):0,0===a)return a;a<n&&(n=a)}}return n}function Jp(e){const t=e.codegenNode;if(13===t.type)return t.props}function Zp(e,{filename:t="",prefixIdentifiers:n=!1,hoistStatic:o=!1,hmr:r=!1,cacheHandlers:a=!1,nodeTransforms:l=[],directiveTransforms:c={},transformHoist:u=null,isBuiltInComponent:d=i,isCustomElement:p=i,expressionPlugins:f=[],scopeId:h=null,slotted:m=!0,ssr:g=!1,inSSR:v=!1,ssrCssVars:y="",bindingMetadata:_=s,inline:x=!1,isTS:S=!1,onError:w=Nd,onWarn:k=Pd,compatConfig:C}){const E=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),j={filename:t,selfName:E&&M(N(E[1])),prefixIdentifiers:n,hoistStatic:o,hmr:r,cacheHandlers:a,nodeTransforms:l,directiveTransforms:c,transformHoist:u,isBuiltInComponent:d,isCustomElement:p,expressionPlugins:f,scopeId:h,slotted:m,ssr:g,inSSR:v,ssrCssVars:y,bindingMetadata:_,inline:x,isTS:S,onError:w,onWarn:k,compatConfig:C,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],cached:[],constantCache:new WeakMap,temps:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,grandParent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=j.helpers.get(e)||0;return j.helpers.set(e,t+1),e},removeHelper(e){const t=j.helpers.get(e);if(t){const n=t-1;n?j.helpers.set(e,n):j.helpers.delete(e)}},helperString:e=>`_${dd[j.helper(e)]}`,replaceNode(e){if(!j.currentNode)throw new Error("Node being replaced is already removed.");if(!j.parent)throw new Error("Cannot replace root node.");j.parent.children[j.childIndex]=j.currentNode=e},removeNode(e){if(!j.parent)throw new Error("Cannot remove root node.");const t=j.parent.children,n=e?t.indexOf(e):j.currentNode?j.childIndex:-1;if(n<0)throw new Error("node being removed is not a child of current parent");e&&e!==j.currentNode?j.childIndex>n&&(j.childIndex--,j.onNodeRemoved()):(j.currentNode=null,j.onNodeRemoved()),j.parent.children.splice(n,1)},onNodeRemoved:i,addIdentifiers(e){},removeIdentifiers(e){},hoist(e){b(e)&&(e=vd(e)),j.hoists.push(e);const t=vd(`_hoisted_${j.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache(e,t=!1,n=!1){const o=function(e,t,n=!1,o=!1){return{type:20,index:e,value:t,needPauseTracking:n,inVOnce:o,needArraySpread:!1,loc:pd}}(j.cached.length,e,t,n);return j.cached.push(o),o}};return j}function Xp(e,t){const n=Zp(e,t);Yp(e,n),t.hoistStatic&&Vp(e,n),t.ssr||function(e,t){const{helper:n}=t,{children:o}=e;if(1===o.length){const n=o[0];if(qp(e,n)&&n.codegenNode){const o=n.codegenNode;13===o.type&&kd(o,t),e.codegenNode=o}else e.codegenNode=n}else if(o.length>1){let s=64;1===o.filter((e=>3!==e.type)).length&&(s|=2048),e.codegenNode=fd(t,n(Eu),void 0,e.children,s,void 0,void 0,!0,void 0,!1)}}(e,n),e.helpers=new Set([...n.helpers.keys()]),e.components=[...n.components],e.directives=[...n.directives],e.imports=n.imports,e.hoists=n.hoists,e.temps=n.temps,e.cached=n.cached,e.transformed=!0}function Yp(e,t){t.currentNode=e;const{nodeTransforms:n}=t,o=[];for(let s=0;s<n.length;s++){const r=n[s](e,t);if(r&&(h(r)?o.push(...r):o.push(r)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(Lu);break;case 5:t.ssr||t.helper(Ku);break;case 9:for(let n=0;n<e.branches.length;n++)Yp(e.branches[n],t);break;case 10:case 11:case 1:case 0:!function(e,t){let n=0;const o=()=>{n--};for(;n<e.children.length;n++){const s=e.children[n];b(s)||(t.grandParent=t.parent,t.parent=e,t.childIndex=n,t.onNodeRemoved=o,Yp(s,t))}}(e,t)}t.currentNode=e;let s=o.length;for(;s--;)o[s]()}function Qp(e,t){const n=b(e)?t=>t===e:t=>e.test(t);return(e,o)=>{if(1===e.type){const{props:s}=e;if(3===e.tagType&&s.some(Yd))return;const r=[];for(let i=0;i<s.length;i++){const a=s[i];if(7===a.type&&n(a.name)){s.splice(i,1),i--;const n=t(e,a,o);n&&r.push(n)}}return r}}}const ef="/*@__PURE__*/",tf=e=>`${dd[e]}: _${dd[e]}`;function nf(e,t={}){const n=function(e,{mode:t="function",prefixIdentifiers:n="module"===t,sourceMap:o=!1,filename:s="template.vue.html",scopeId:r=null,optimizeImports:i=!1,runtimeGlobalName:a="Vue",runtimeModuleName:l="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:p=!1}){const f={mode:t,prefixIdentifiers:n,sourceMap:o,filename:s,scopeId:r,optimizeImports:i,runtimeGlobalName:a,runtimeModuleName:l,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:p,source:e.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${dd[e]}`,push(e,t=-2,n){f.code+=e},indent(){h(++f.indentLevel)},deindent(e=!1){e?--f.indentLevel:h(--f.indentLevel)},newline(){h(f.indentLevel)}};function h(e){f.push("\n"+"  ".repeat(e),0)}return f}(e,t);t.onContextCreated&&t.onContextCreated(n);const{mode:o,push:s,prefixIdentifiers:r,indent:i,deindent:a,newline:l,scopeId:c,ssr:u}=n,d=Array.from(e.helpers),p=d.length>0,f=!r&&"module"!==o;!function(e,t){const{ssr:n,prefixIdentifiers:o,push:s,newline:r,runtimeModuleName:i,runtimeGlobalName:a,ssrRuntimeModuleName:l}=t,c=a,u=Array.from(e.helpers);if(u.length>0&&(s(`const _Vue = ${c}\n`,-1),e.hoists.length)){s(`const { ${[Iu,Mu,Lu,Fu,$u].filter((e=>u.includes(e))).map(tf).join(", ")} } = _Vue\n`,-1)}(function(e,t){if(!e.length)return;t.pure=!0;const{push:n,newline:o}=t;o();for(let s=0;s<e.length;s++){const r=e[s];r&&(n(`const _hoisted_${s+1} = `),af(r,t),o())}t.pure=!1})(e.hoists,t),r(),s("return ")}(e,n);if(s(`function ${u?"ssrRender":"render"}(${(u?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),i(),f&&(s("with (_ctx) {"),i(),p&&(s(`const { ${d.map(tf).join(", ")} } = _Vue\n`,-1),l())),e.components.length&&(of(e.components,"component",n),(e.directives.length||e.temps>0)&&l()),e.directives.length&&(of(e.directives,"directive",n),e.temps>0&&l()),e.temps>0){s("let ");for(let t=0;t<e.temps;t++)s(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(s("\n",0),l()),u||s("return "),e.codegenNode?af(e.codegenNode,n):s("null"),f&&(a(),s("}")),a(),s("}"),{ast:e,code:n.code,preamble:"",map:n.map?n.map.toJSON():void 0}}function of(e,t,{helper:n,push:o,newline:s,isTS:r}){const i=n("component"===t?Du:Uu);for(let n=0;n<e.length;n++){let a=e[n];const l=a.endsWith("__self");l&&(a=a.slice(0,-6)),o(`const ${rp(a,t)} = ${i}(${JSON.stringify(a)}${l?", true":""})${r?"!":""}`),n<e.length-1&&s()}}function sf(e,t){const n=e.length>3||e.some((e=>h(e)||!function(e){return b(e)||4===e.type||2===e.type||5===e.type||8===e.type}(e)));t.push("["),n&&t.indent(),rf(e,t,n),n&&t.deindent(),t.push("]")}function rf(e,t,n=!1,o=!0){const{push:s,newline:r}=t;for(let i=0;i<e.length;i++){const a=e[i];b(a)?s(a,-3):h(a)?sf(a,t):af(a,t),i<e.length-1&&(n?(o&&s(","),r()):o&&s(", "))}}function af(e,t){if(b(e))t.push(e,-3);else if(_(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:Kd(null!=e.codegenNode,"Codegen node is missing for element/if/for node. Apply appropriate transforms first."),af(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),-3,e)}(e,t);break;case 4:lf(e,t);break;case 5:!function(e,t){const{push:n,helper:o,pure:s}=t;s&&n(ef);n(`${o(Ku)}(`),af(e.content,t),n(")")}(e,t);break;case 12:af(e.codegenNode,t);break;case 8:cf(e,t);break;case 3:!function(e,t){const{push:n,helper:o,pure:s}=t;s&&n(ef);n(`${o(Lu)}(${JSON.stringify(e.content)})`,-3,e)}(e,t);break;case 13:!function(e,t){const{push:n,helper:o,pure:s}=t,{tag:r,props:i,children:a,patchFlag:l,dynamicProps:c,directives:u,isBlock:d,disableTracking:p,isComponent:f}=e;let h;if(l)if(l<0)h=l+` /* ${H[l]} */`;else{const e=Object.keys(H).map(Number).filter((e=>e>0&&l&e)).map((e=>H[e])).join(", ");h=l+` /* ${e} */`}u&&n(o(qu)+"(");d&&n(`(${o(Ou)}(${p?"true":""}), `);s&&n(ef);const m=d?wd(t.inSSR,f):Sd(t.inSSR,f);n(o(m)+"(",-2,e),rf(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([r,i,a,h,c]),t),n(")"),d&&n(")");u&&(n(", "),af(u,t),n(")"))}(e,t);break;case 14:!function(e,t){const{push:n,helper:o,pure:s}=t,r=b(e.callee)?e.callee:o(e.callee);s&&n(ef);n(r+"(",-2,e),rf(e.arguments,t),n(")")}(e,t);break;case 15:!function(e,t){const{push:n,indent:o,deindent:s,newline:r}=t,{properties:i}=e;if(!i.length)return void n("{}",-2,e);const a=i.length>1||i.some((e=>4!==e.value.type));n(a?"{":"{ "),a&&o();for(let e=0;e<i.length;e++){const{key:o,value:s}=i[e];uf(o,t),n(": "),af(s,t),e<i.length-1&&(n(","),r())}a&&s(),n(a?"}":" }")}(e,t);break;case 17:!function(e,t){sf(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:n,indent:o,deindent:s}=t,{params:r,returns:i,body:a,newline:l,isSlot:c}=e;c&&n(`_${dd[id]}(`);n("(",-2,e),h(r)?rf(r,t):r&&af(r,t);n(") => "),(l||a)&&(n("{"),o());i?(l&&n("return "),h(i)?sf(i,t):af(i,t)):a&&af(a,t);(l||a)&&(s(),n("}"));c&&n(")")}(e,t);break;case 19:!function(e,t){const{test:n,consequent:o,alternate:s,newline:r}=e,{push:i,indent:a,deindent:l,newline:c}=t;if(4===n.type){const e=!Dd(n.content);e&&i("("),lf(n,t),e&&i(")")}else i("("),af(n,t),i(")");r&&a(),t.indentLevel++,r||i(" "),i("? "),af(o,t),t.indentLevel--,r&&c(),r||i(" "),i(": ");const u=19===s.type;u||t.indentLevel++;af(s,t),u||t.indentLevel--;r&&l(!0)}(e,t);break;case 20:!function(e,t){const{push:n,helper:o,indent:s,deindent:r,newline:i}=t,{needPauseTracking:a,needArraySpread:l}=e;l&&n("[...(");n(`_cache[${e.index}] || (`),a&&(s(),n(`${o(od)}(-1`),e.inVOnce&&n(", true"),n("),"),i(),n("("));n(`_cache[${e.index}] = `),af(e.value,t),a&&(n(`).cacheIndex = ${e.index},`),i(),n(`${o(od)}(1),`),i(),n(`_cache[${e.index}]`),r());n(")"),l&&n(")]")}(e,t);break;case 21:rf(e.body,t,!0,!1);break;case 22:case 23:case 24:case 25:case 26:case 10:break;default:Kd(!1,`unhandled codegen node type: ${e.type}`);return e}}function lf(e,t){const{content:n,isStatic:o}=e;t.push(o?JSON.stringify(n):n,-3,e)}function cf(e,t){for(let n=0;n<e.children.length;n++){const o=e.children[n];b(o)?t.push(o,-3):af(o,t)}}function uf(e,t){const{push:n}=t;if(8===e.type)n("["),cf(e,t),n("]");else if(e.isStatic){n(Dd(e.content)?e.content:JSON.stringify(e.content),-2,e)}else n(`[${e.content}]`,-3,e)}const df=new RegExp("\\b"+"arguments,await,break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,let,new,return,super,switch,throw,try,var,void,while,with,yield".split(",").join("\\b|\\b")+"\\b"),pf=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;function ff(e,t,n=!1,o=!1){const s=e.content;if(s.trim())try{new Function(o?` ${s} `:"return "+(n?`(${s}) => {}`:`(${s})`))}catch(n){let o=n.message;const r=s.replace(pf,"").match(df);r&&(o=`avoid using JavaScript keyword as property name: "${r[0]}"`),t.onError(Id(45,e.loc,void 0,o))}}const hf=(e,t)=>{if(5===e.type)e.content=mf(e.content,t);else if(1===e.type){const n=Gd(e,"memo");for(let o=0;o<e.props.length;o++){const s=e.props[o];if(7===s.type&&"for"!==s.name){const e=s.exp,o=s.arg;!e||4!==e.type||"on"===s.name&&o||n&&o&&4===o.type&&"key"===o.content||(s.exp=mf(e,t,"slot"===s.name)),o&&4===o.type&&!o.isStatic&&(s.arg=mf(o,t))}}}};function mf(e,t,n=!1,o=!1,s=Object.create(t.identifiers)){return ff(e,t,n,o),e}const gf=Qp(/^(if|else|else-if)$/,((e,t,n)=>function(e,t,n,o){if(!("else"===t.name||t.exp&&t.exp.content.trim())){const o=t.exp?t.exp.loc:e.loc;n.onError(Id(28,t.loc)),t.exp=vd("true",!1,o)}t.exp&&ff(t.exp,n);if("if"===t.name){const s=vf(e,t),r={type:9,loc:Lp(e.loc),branches:[s]};if(n.replaceNode(r),o)return o(r,s,!0)}else{const s=n.parent.children,r=[];let i=s.indexOf(e);for(;i-- >=-1;){const a=s[i];if(a&&3===a.type)n.removeNode(a),r.unshift(a);else{if(!a||2!==a.type||a.content.trim().length){if(a&&9===a.type){"else-if"===t.name&&void 0===a.branches[a.branches.length-1].condition&&n.onError(Id(30,e.loc)),n.removeNode();const s=vf(e,t);r.length&&(!n.parent||1!==n.parent.type||"transition"!==n.parent.tag&&"Transition"!==n.parent.tag)&&(s.children=[...r,...s.children]);{const e=s.userKey;e&&a.branches.forEach((({userKey:t})=>{_f(t,e)&&n.onError(Id(29,s.userKey.loc))}))}a.branches.push(s);const i=o&&o(a,s,!1);Yp(s,n),i&&i(),n.currentNode=null}else n.onError(Id(30,e.loc));break}n.removeNode(a)}}}}(e,t,n,((e,t,o)=>{const s=n.parent.children;let r=s.indexOf(e),i=0;for(;r-- >=0;){const e=s[r];e&&9===e.type&&(i+=e.branches.length)}return()=>{if(o)e.codegenNode=yf(t,i,n);else{const o=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);o.alternate=yf(t,i+e.branches.length-1,n)}}}))));function vf(e,t){const n=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:n&&!Gd(e,"for")?e.children:[e],userKey:Jd(e,"key"),isTemplateIf:n}}function yf(e,t,n){return e.condition?xd(e.condition,bf(e,t,n),bd(n.helper(Lu),['"v-if"',"true"])):bf(e,t,n)}function bf(e,t,n){const{helper:o}=n,s=gd("key",vd(`${t}`,!1,pd,2)),{children:r}=e,i=r[0];if(1!==r.length||1!==i.type){if(1===r.length&&11===i.type){const e=i.codegenNode;return op(e,s,n),e}{let t=64;return e.isTemplateIf||1!==r.filter((e=>3!==e.type)).length||(t|=2048),fd(n,o(Eu),md([s]),r,t,void 0,void 0,!0,!1,!1,e.loc)}}{const e=i.codegenNode,t=14===(a=e).type&&a.callee===cd?a.arguments[1].returns:a;return 13===t.type&&kd(t,n),op(t,s,n),e}var a}function _f(e,t){if(!e||e.type!==t.type)return!1;if(6===e.type){if(e.value.content!==t.value.content)return!1}else{const n=e.exp,o=t.exp;if(n.type!==o.type)return!1;if(4!==n.type||n.isStatic!==o.isStatic||n.content!==o.content)return!1}return!0}const xf=(e,t,n)=>{const{modifiers:o,loc:s}=e,r=e.arg;let{exp:i}=e;if(i&&4===i.type&&!i.content.trim()&&(i=void 0),!i){if(4!==r.type||!r.isStatic)return n.onError(Id(52,r.loc)),{props:[gd(r,vd("",!0,s))]};Sf(e),i=e.exp}return 4!==r.type?(r.children.unshift("("),r.children.push(') || ""')):r.isStatic||(r.content=`${r.content} || ""`),o.some((e=>"camel"===e.content))&&(4===r.type?r.isStatic?r.content=N(r.content):r.content=`${n.helperString(ed)}(${r.content})`:(r.children.unshift(`${n.helperString(ed)}(`),r.children.push(")"))),n.inSSR||(o.some((e=>"prop"===e.content))&&wf(r,"."),o.some((e=>"attr"===e.content))&&wf(r,"^")),{props:[gd(r,i)]}},Sf=(e,t)=>{const n=e.arg,o=N(n.content);e.exp=vd(o,!1,n.loc)},wf=(e,t)=>{4===e.type?e.isStatic?e.content=t+e.content:e.content=`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},kf=Qp("for",((e,t,n)=>{const{helper:o,removeHelper:s}=n;return function(e,t,n,o){if(!t.exp)return void n.onError(Id(31,t.loc));const s=t.forParseResult;if(!s)return void n.onError(Id(32,t.loc));Cf(s,n);const{addIdentifiers:r,removeIdentifiers:i,scopes:a}=n,{source:l,value:c,key:u,index:d}=s,p={type:11,loc:t.loc,source:l,valueAlias:c,keyAlias:u,objectIndexAlias:d,parseResult:s,children:Qd(e)?e.children:[e]};n.replaceNode(p),a.vFor++;const f=o&&o(p);return()=>{a.vFor--,f&&f()}}(e,t,n,(t=>{const r=bd(o(Hu),[t.source]),i=Qd(e),a=Gd(e,"memo"),l=Jd(e,"key",!1,!0);l&&7===l.type&&!l.exp&&Sf(l);let c=l&&(6===l.type?l.value?vd(l.value.content,!0):void 0:l.exp);const u=l&&c?gd("key",c):null,d=4===t.source.type&&t.source.constType>0,p=d?64:l?128:256;return t.codegenNode=fd(n,o(Eu),void 0,r,p,void 0,void 0,!0,!d,!1,e.loc),()=>{let l;const{children:p}=t;i&&e.children.some((e=>{if(1===e.type){const t=Jd(e,"key");if(t)return n.onError(Id(33,t.loc)),!0}}));const f=1!==p.length||1!==p[0].type,h=ep(e)?e:i&&1===e.children.length&&ep(e.children[0])?e.children[0]:null;if(h?(l=h.codegenNode,i&&u&&op(l,u,n)):f?l=fd(n,o(Eu),u?md([u]):void 0,e.children,64,void 0,void 0,!0,void 0,!1):(l=p[0].codegenNode,i&&u&&op(l,u,n),l.isBlock!==!d&&(l.isBlock?(s(Ou),s(wd(n.inSSR,l.isComponent))):s(Sd(n.inSSR,l.isComponent))),l.isBlock=!d,l.isBlock?(o(Ou),o(wd(n.inSSR,l.isComponent))):o(Sd(n.inSSR,l.isComponent))),a){const e=_d(Ef(t.parseResult,[vd("_cached")]));e.body={type:21,body:[yd(["const _memo = (",a.exp,")"]),yd(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${n.helperString(ud)}(_cached, _memo)) return _cached`]),yd(["const _item = ",l]),vd("_item.memo = _memo"),vd("return _item")],loc:pd},r.arguments.push(e,vd("_cache"),vd(String(n.cached.length))),n.cached.push(null)}else r.arguments.push(_d(Ef(t.parseResult),l,!0))}}))}));function Cf(e,t){e.finalized||(ff(e.source,t),e.key&&ff(e.key,t,!0),e.index&&ff(e.index,t,!0),e.value&&ff(e.value,t,!0),e.finalized=!0)}function Ef({value:e,key:t,index:n},o=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||vd("_".repeat(t+1),!1)))}([e,t,n,...o])}const jf=vd("undefined",!1),Tf=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){const n=Gd(e,"slot");if(n)return n.exp,t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Af=(e,t,n,o)=>_d(e,n,!1,!0,n.length?n[0].loc:o);function Rf(e,t,n=Af){t.helper(id);const{children:o,loc:s}=e,r=[],i=[];let a=t.scopes.vSlot>0||t.scopes.vFor>0;const l=Gd(e,"slot",!0);if(l){const{arg:e,exp:t}=l;e&&!Ld(e)&&(a=!0),r.push(gd(e||vd("default",!0),n(t,void 0,o,s)))}let c=!1,u=!1;const d=[],p=new Set;let f=0;for(let e=0;e<o.length;e++){const s=o[e];let h;if(!Qd(s)||!(h=Gd(s,"slot",!0))){3!==s.type&&d.push(s);continue}if(l){t.onError(Id(37,h.loc));break}c=!0;const{children:m,loc:g}=s,{arg:v=vd("default",!0),exp:y,loc:b}=h;let _;Ld(v)?_=v?v.content:"default":a=!0;const x=Gd(s,"for"),S=n(y,x,m,g);let w,k;if(w=Gd(s,"if"))a=!0,i.push(xd(w.exp,Of(v,S,f++),jf));else if(k=Gd(s,/^else(-if)?$/,!0)){let n,s=e;for(;s--&&(n=o[s],3===n.type););if(n&&Qd(n)&&Gd(n,/^(else-)?if$/)){let e=i[i.length-1];for(;19===e.alternate.type;)e=e.alternate;e.alternate=k.exp?xd(k.exp,Of(v,S,f++),jf):Of(v,S,f++)}else t.onError(Id(30,k.loc))}else if(x){a=!0;const e=x.forParseResult;e?(Cf(e,t),i.push(bd(t.helper(Hu),[e.source,_d(Ef(e),Of(v,S),!0)]))):t.onError(Id(32,x.loc))}else{if(_){if(p.has(_)){t.onError(Id(38,b));continue}p.add(_),"default"===_&&(u=!0)}r.push(gd(v,S))}}if(!l){const e=(e,t)=>gd("default",n(e,void 0,t,s));c?d.length&&d.some((e=>Pf(e)))&&(u?t.onError(Id(39,d[0].loc)):r.push(e(void 0,d))):r.push(e(void 0,o))}const h=a?2:Nf(e.children)?3:1;let m=md(r.concat(gd("_",vd(h+` /* ${z[h]} */`,!1))),s);return i.length&&(m=bd(t.helper(Wu),[m,hd(i)])),{slots:m,hasDynamicSlots:a}}function Of(e,t,n){const o=[gd("name",e),gd("fn",t)];return null!=n&&o.push(gd("key",vd(String(n),!0))),md(o)}function Nf(e){for(let t=0;t<e.length;t++){const n=e[t];switch(n.type){case 1:if(2===n.tagType||Nf(n.children))return!0;break;case 9:if(Nf(n.branches))return!0;break;case 10:case 11:if(Nf(n.children))return!0}}return!1}function Pf(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Pf(e.content))}const If=new WeakMap,Mf=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:n,props:o}=e,s=1===e.tagType;let r=s?function(e,t,n=!1){let{tag:o}=e;const s=Df(o),r=Jd(e,"is",!1,!0);if(r)if(s){let e;if(6===r.type?e=r.value&&vd(r.value.content,!0):(e=r.exp,e||(e=vd("is",!1,r.arg.loc))),e)return bd(t.helper(Bu),[e])}else 6===r.type&&r.value.content.startsWith("vue:")&&(o=r.value.content.slice(4));const i=Fd(o)||t.isBuiltInComponent(o);if(i)return n||t.helper(i),i;return t.helper(Du),t.components.add(o),rp(o,"component")}(e,t):`"${n}"`;const i=x(r)&&r.callee===Bu;let a,l,c,u,d,p=0,f=i||r===ju||r===Tu||!s&&("svg"===n||"foreignObject"===n||"math"===n);if(o.length>0){const n=Lf(e,t,void 0,s,i);a=n.props,p=n.patchFlag,u=n.dynamicPropNames;const o=n.directives;d=o&&o.length?hd(o.map((e=>function(e,t){const n=[],o=If.get(e);o?n.push(t.helperString(o)):(t.helper(Uu),t.directives.add(e.name),n.push(rp(e.name,"directive")));const{loc:s}=e;e.exp&&n.push(e.exp);e.arg&&(e.exp||n.push("void 0"),n.push(e.arg));if(Object.keys(e.modifiers).length){e.arg||(e.exp||n.push("void 0"),n.push("void 0"));const t=vd("true",!1,s);n.push(md(e.modifiers.map((e=>gd(e,t))),s))}return hd(n,e.loc)}(e,t)))):void 0,n.shouldUseBlock&&(f=!0)}if(e.children.length>0){r===Au&&(f=!0,p|=1024,e.children.length>1&&t.onError(Id(46,{start:e.children[0].loc.start,end:e.children[e.children.length-1].loc.end,source:""})));if(s&&r!==ju&&r!==Au){const{slots:n,hasDynamicSlots:o}=Rf(e,t);l=n,o&&(p|=1024)}else if(1===e.children.length&&r!==ju){const n=e.children[0],o=n.type,s=5===o||8===o;s&&0===zp(n,t)&&(p|=1),l=s||2===o?n:e.children}else l=e.children}u&&u.length&&(c=function(e){let t="[";for(let n=0,o=e.length;n<o;n++)t+=JSON.stringify(e[n]),n<o-1&&(t+=", ");return t+"]"}(u)),e.codegenNode=fd(t,r,a,l,0===p?void 0:p,c,d,!!f,!1,s,e.loc)};function Lf(e,t,n=e.props,o,s,r=!1){const{tag:i,loc:a,children:c}=e;let u=[];const d=[],p=[],f=c.length>0;let h=!1,m=0,g=!1,v=!1,y=!1,b=!1,x=!1,S=!1;const w=[],k=e=>{u.length&&(d.push(md(Ff(u),a)),u=[]),e&&d.push(e)},C=()=>{t.scopes.vFor>0&&u.push(gd(vd("ref_for",!0),vd("true")))},E=({key:e,value:n})=>{if(Ld(e)){const r=e.content,i=l(r);if(!i||o&&!s||"onclick"===r.toLowerCase()||"onUpdate:modelValue"===r||T(r)||(b=!0),i&&T(r)&&(S=!0),i&&14===n.type&&(n=n.arguments[0]),20===n.type||(4===n.type||8===n.type)&&zp(n,t)>0)return;"ref"===r?g=!0:"class"===r?v=!0:"style"===r?y=!0:"key"===r||w.includes(r)||w.push(r),!o||"class"!==r&&"style"!==r||w.includes(r)||w.push(r)}else x=!0};for(let s=0;s<n.length;s++){const l=n[s];if(6===l.type){const{loc:e,name:t,nameLoc:n,value:o}=l;let s=!0;if("ref"===t&&(g=!0,C()),"is"===t&&(Df(i)||o&&o.content.startsWith("vue:")))continue;u.push(gd(vd(t,!0,n),vd(o?o.content:"",s,o?o.loc:e)))}else{const{name:n,arg:s,exp:c,loc:g,modifiers:v}=l,y="bind"===n,b="on"===n;if("slot"===n){o||t.onError(Id(40,g));continue}if("once"===n||"memo"===n)continue;if("is"===n||y&&Zd(s,"is")&&Df(i))continue;if(b&&r)continue;if((y&&Zd(s,"key")||b&&f&&Zd(s,"vue:before-update"))&&(h=!0),y&&Zd(s,"ref")&&C(),!s&&(y||b)){x=!0,c?y?(C(),k(),d.push(c)):k({type:14,loc:g,callee:t.helper(Qu),arguments:o?[c]:[c,"true"]}):t.onError(Id(y?34:35,g));continue}y&&v.some((e=>"prop"===e.content))&&(m|=32);const S=t.directiveTransforms[n];if(S){const{props:n,needRuntime:o}=S(l,e,t);!r&&n.forEach(E),b&&s&&!Ld(s)?k(md(n,a)):u.push(...n),o&&(p.push(l),_(o)&&If.set(l,o))}else A(n)||(p.push(l),f&&(h=!0))}}let j;if(d.length?(k(),j=d.length>1?bd(t.helper(Gu),d,a):d[0]):u.length&&(j=md(Ff(u),a)),x?m|=16:(v&&!o&&(m|=2),y&&!o&&(m|=4),w.length&&(m|=8),b&&(m|=32)),h||0!==m&&32!==m||!(g||S||p.length>0)||(m|=512),!t.inSSR&&j)switch(j.type){case 15:let e=-1,n=-1,o=!1;for(let t=0;t<j.properties.length;t++){const s=j.properties[t].key;Ld(s)?"class"===s.content?e=t:"style"===s.content&&(n=t):s.isHandlerKey||(o=!0)}const s=j.properties[e],r=j.properties[n];o?j=bd(t.helper(Xu),[j]):(s&&!Ld(s.value)&&(s.value=bd(t.helper(Ju),[s.value])),r&&(y||4===r.value.type&&"["===r.value.content.trim()[0]||17===r.value.type)&&(r.value=bd(t.helper(Zu),[r.value])));break;case 14:break;default:j=bd(t.helper(Xu),[bd(t.helper(Yu),[j])])}return{props:j,directives:p,patchFlag:m,dynamicPropNames:w,shouldUseBlock:h}}function Ff(e){const t=new Map,n=[];for(let o=0;o<e.length;o++){const s=e[o];if(8===s.key.type||!s.key.isStatic){n.push(s);continue}const r=s.key.content,i=t.get(r);i?("style"===r||"class"===r||l(r))&&$f(i,s):(t.set(r,s),n.push(s))}return n}function $f(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=hd([e.value,t.value],e.loc)}function Df(e){return"component"===e||"Component"===e}const Bf=(e,t)=>{if(ep(e)){const{children:n,loc:o}=e,{slotName:s,slotProps:r}=function(e,t){let n,o='"default"';const s=[];for(let t=0;t<e.props.length;t++){const n=e.props[t];if(6===n.type)n.value&&("name"===n.name?o=JSON.stringify(n.value.content):(n.name=N(n.name),s.push(n)));else if("bind"===n.name&&Zd(n.arg,"name")){if(n.exp)o=n.exp;else if(n.arg&&4===n.arg.type){const e=N(n.arg.content);o=n.exp=vd(e,!1,n.arg.loc)}}else"bind"===n.name&&n.arg&&Ld(n.arg)&&(n.arg.content=N(n.arg.content)),s.push(n)}if(s.length>0){const{props:o,directives:r}=Lf(e,t,s,!1,!1);n=o,r.length&&t.onError(Id(36,r[0].loc))}return{slotName:o,slotProps:n}}(e,t),i=[t.prefixIdentifiers?"_ctx.$slots":"$slots",s,"{}","undefined","true"];let a=2;r&&(i[2]=r,a=3),n.length&&(i[3]=_d([],n,!1,!1,o),a=4),t.scopeId&&!t.slotted&&(a=5),i.splice(a),e.codegenNode=bd(t.helper(zu),i,o)}};const Uf=(e,t,n,o)=>{const{loc:s,modifiers:r,arg:i}=e;let a;if(e.exp||r.length||n.onError(Id(35,s)),4===i.type)if(i.isStatic){let e=i.content;e.startsWith("vnode")&&n.onError(Id(51,i.loc)),e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`);a=vd(0!==t.tagType||e.startsWith("vnode")||!/[A-Z]/.test(e)?L(N(e)):`on:${e}`,!0,i.loc)}else a=yd([`${n.helperString(nd)}(`,i,")"]);else a=i,a.children.unshift(`${n.helperString(nd)}(`),a.children.push(")");let l=e.exp;l&&!l.content.trim()&&(l=void 0);let c=n.cacheHandlers&&!l&&!n.inVOnce;if(l){const e=Hd(l),t=!(e||Wd(l)),o=l.content.includes(";");ff(l,n,!1,o),(t||c&&e)&&(l=yd([`${t?"$event":"(...args)"} => ${o?"{":"("}`,l,o?"}":")"]))}let u={props:[gd(a,l||vd("() => {}",!1,s))]};return o&&(u=o(u)),c&&(u.props[0].value=n.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Vf=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const n=e.children;let o,s=!1;for(let e=0;e<n.length;e++){const t=n[e];if(Xd(t)){s=!0;for(let s=e+1;s<n.length;s++){const r=n[s];if(!Xd(r)){o=void 0;break}o||(o=n[e]=yd([t],t.loc)),o.children.push(" + ",r),n.splice(s,1),s--}}}if(s&&(1!==n.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<n.length;e++){const o=n[e];if(Xd(o)||8===o.type){const s=[];2===o.type&&" "===o.content||s.push(o),t.ssr||0!==zp(o,t)||s.push(`1 /* ${H[1]} */`),n[e]={type:12,content:o,loc:o.loc,codegenNode:bd(t.helper(Fu),s)}}}}},qf=new WeakSet,Hf=(e,t)=>{if(1===e.type&&Gd(e,"once",!0)){if(qf.has(e)||t.inVOnce||t.inSSR)return;return qf.add(e),t.inVOnce=!0,t.helper(od),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0,!0))}}},zf=(e,t,n)=>{const{exp:o,arg:s}=e;if(!o)return n.onError(Id(41,e.loc)),Wf();const r=o.loc.source.trim(),i=4===o.type?o.content:r,a=n.bindingMetadata[r];if("props"===a||"props-aliased"===a)return n.onError(Id(44,o.loc)),Wf();if(!i.trim()||!Hd(o))return n.onError(Id(42,o.loc)),Wf();const l=s||vd("modelValue",!0),c=s?Ld(s)?`onUpdate:${N(s.content)}`:yd(['"onUpdate:" + ',s]):"onUpdate:modelValue";let u;u=yd([`${n.isTS?"($event: any)":"$event"} => ((`,o,") = $event)"]);const d=[gd(l,e.exp),gd(c,u)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>e.content)).map((e=>(Dd(e)?e:JSON.stringify(e))+": true")).join(", "),n=s?Ld(s)?`${s.content}Modifiers`:yd([s,' + "Modifiers"']):"modelModifiers";d.push(gd(n,vd(`{ ${t} }`,!1,e.loc,2)))}return Wf(d)};function Wf(e=[]){return{props:e}}const Kf=new WeakSet,Gf=(e,t)=>{if(1===e.type){const n=Gd(e,"memo");if(!n||Kf.has(e))return;return Kf.add(e),()=>{const o=e.codegenNode||t.currentNode.codegenNode;o&&13===o.type&&(1!==e.tagType&&kd(o,t),e.codegenNode=bd(t.helper(cd),[n.exp,_d(void 0,o),"_cache",String(t.cached.length)]),t.cached.push(null))}}};function Jf(e,t={}){const n=t.onError||Nd,o="module"===t.mode;!0===t.prefixIdentifiers?n(Id(47)):o&&n(Id(48));t.cacheHandlers&&n(Id(49)),t.scopeId&&!o&&n(Id(50));const s=u({},t,{prefixIdentifiers:!1}),r=b(e)?Up(e,s):e,[i,a]=[[Hf,gf,Gf,kf,hf,Bf,Mf,Tf,Vf],{on:Uf,bind:xf,model:zf}];return Xp(r,u({},s,{nodeTransforms:[...i,...t.nodeTransforms||[]],directiveTransforms:u({},a,t.directiveTransforms||{})})),nf(r,s)}const Zf=Symbol("vModelRadio"),Xf=Symbol("vModelCheckbox"),Yf=Symbol("vModelText"),Qf=Symbol("vModelSelect"),eh=Symbol("vModelDynamic"),th=Symbol("vOnModifiersGuard"),nh=Symbol("vOnKeysGuard"),oh=Symbol("vShow"),sh=Symbol("Transition"),rh=Symbol("TransitionGroup");var ih;let ah;ih={[Zf]:"vModelRadio",[Xf]:"vModelCheckbox",[Yf]:"vModelText",[Qf]:"vModelSelect",[eh]:"vModelDynamic",[th]:"withModifiers",[nh]:"withKeys",[oh]:"vShow",[sh]:"Transition",[rh]:"TransitionGroup"},Object.getOwnPropertySymbols(ih).forEach((e=>{dd[e]=ih[e]}));const lh={parseMode:"html",isVoidTag:se,isNativeTag:e=>te(e)||ne(e)||oe(e),isPreTag:e=>"pre"===e,isIgnoreNewlineTag:e=>"pre"===e||"textarea"===e,decodeEntities:function(e,t=!1){return ah||(ah=document.createElement("div")),t?(ah.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,ah.children[0].getAttribute("foo")):(ah.innerHTML=e,ah.textContent)},isBuiltInComponent:e=>"Transition"===e||"transition"===e?sh:"TransitionGroup"===e||"transition-group"===e?rh:void 0,getNamespace(e,t,n){let o=t?t.ns:n;if(t&&2===o)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(o=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(o=0);else t&&1===o&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(o=0));if(0===o){if("svg"===e)return 1;if("math"===e)return 2}return o}},ch=(e,t)=>{const n=Y(e);return vd(JSON.stringify(n),!1,t,3)};function uh(e,t){return Id(e,t,dh)}const dh={53:"v-html is missing expression.",54:"v-html will override element children.",55:"v-text is missing expression.",56:"v-text will override element children.",57:"v-model can only be used on <input>, <textarea> and <select> elements.",58:"v-model argument is not supported on plain elements.",59:"v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.",60:"Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.",61:"v-show is missing expression.",62:"<Transition> expects exactly one child element or component.",63:"Tags with side effect (<script> and <style>) are ignored in client component templates."},ph=o("passive,once,capture"),fh=o("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),hh=o("left,right"),mh=o("onkeyup,onkeydown,onkeypress"),gh=(e,t)=>Ld(e)&&"onclick"===e.content.toLowerCase()?vd(t,!0):4!==e.type?yd(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e;function vh(e){const t=e.children=e.children.filter((e=>3!==e.type&&!(2===e.type&&!e.content.trim()))),n=t[0];return 1!==t.length||11===n.type||9===n.type&&n.branches.some(vh)}const yh=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||(t.onError(uh(63,e.loc)),t.removeNode())};const bh=new Set(["h1","h2","h3","h4","h5","h6"]),_h=new Set([]),xh={head:new Set(["base","basefront","bgsound","link","meta","title","noscript","noframes","style","script","template"]),optgroup:new Set(["option"]),select:new Set(["optgroup","option","hr"]),table:new Set(["caption","colgroup","tbody","tfoot","thead"]),tr:new Set(["td","th"]),colgroup:new Set(["col"]),tbody:new Set(["tr"]),thead:new Set(["tr"]),tfoot:new Set(["tr"]),script:_h,iframe:_h,option:_h,textarea:_h,style:_h,title:_h},Sh={html:_h,body:new Set(["html"]),head:new Set(["html"]),td:new Set(["tr"]),colgroup:new Set(["table"]),caption:new Set(["table"]),tbody:new Set(["table"]),tfoot:new Set(["table"]),col:new Set(["colgroup"]),th:new Set(["tr"]),thead:new Set(["table"]),tr:new Set(["tbody","thead","tfoot"]),dd:new Set(["dl","div"]),dt:new Set(["dl","div"]),figcaption:new Set(["figure"]),summary:new Set(["details"]),area:new Set(["map"])},wh={p:new Set(["address","article","aside","blockquote","center","details","dialog","dir","div","dl","fieldset","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","li","main","nav","menu","ol","p","pre","section","table","ul"]),svg:new Set(["b","blockquote","br","code","dd","div","dl","dt","em","embed","h1","h2","h3","h4","h5","h6","hr","i","img","li","menu","meta","ol","p","pre","ruby","s","small","span","strong","sub","sup","table","u","ul","var"])},kh={a:new Set(["a"]),button:new Set(["button"]),dd:new Set(["dd","dt"]),dt:new Set(["dd","dt"]),form:new Set(["form"]),li:new Set(["li"]),h1:bh,h2:bh,h3:bh,h4:bh,h5:bh,h6:bh},Ch=[e=>{1===e.type&&e.props.forEach(((t,n)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[n]={type:7,name:"bind",arg:vd("style",!0,t.loc),exp:ch(t.value.content,t.loc),modifiers:[],loc:t.loc})}))},(e,t)=>{if(1===e.type&&1===e.tagType){if(t.isBuiltInComponent(e.tag)===sh)return()=>{if(!e.children.length)return;vh(e)&&t.onError(uh(62,{start:e.children[0].loc.start,end:e.children[e.children.length-1].loc.end,source:""}));const n=e.children[0];if(1===n.type)for(const t of n.props)7===t.type&&"show"===t.name&&e.props.push({type:6,name:"persisted",nameLoc:e.loc,value:void 0,loc:e.loc})}}},(e,t)=>{if(1===e.type&&0===e.tagType&&t.parent&&1===t.parent.type&&0===t.parent.tagType&&(n=t.parent.tag,o=e.tag,!(n in xh?xh[n].has(o):o in Sh?Sh[o].has(n):!(n in wh&&wh[n].has(o)||o in kh&&kh[o].has(n))))){const n=new SyntaxError(`<${e.tag}> cannot be child of <${t.parent.tag}>, according to HTML specifications. This can cause hydration errors or potentially disrupt future functionality.`);n.loc=e.loc,t.onWarn(n)}var n,o}],Eh={cloak:()=>({props:[]}),html:(e,t,n)=>{const{exp:o,loc:s}=e;return o||n.onError(uh(53,s)),t.children.length&&(n.onError(uh(54,s)),t.children.length=0),{props:[gd(vd("innerHTML",!0,s),o||vd("",!0))]}},text:(e,t,n)=>{const{exp:o,loc:s}=e;return o||n.onError(uh(55,s)),t.children.length&&(n.onError(uh(56,s)),t.children.length=0),{props:[gd(vd("textContent",!0),o?zp(o,n)>0?o:bd(n.helperString(Ku),[o],s):vd("",!0))]}},model:(e,t,n)=>{const o=zf(e,t,n);if(!o.props.length||1===t.tagType)return o;function s(){const e=Gd(t,"bind");e&&Zd(e.arg,"value")&&n.onError(uh(60,e.loc))}e.arg&&n.onError(uh(58,e.arg.loc));const{tag:r}=t,i=n.isCustomElement(r);if("input"===r||"textarea"===r||"select"===r||i){let a=Yf,l=!1;if("input"===r||i){const o=Jd(t,"type");if(o){if(7===o.type)a=eh;else if(o.value)switch(o.value.content){case"radio":a=Zf;break;case"checkbox":a=Xf;break;case"file":l=!0,n.onError(uh(59,e.loc));break;default:s()}}else!function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))}(t)?s():a=eh}else"select"===r?a=Qf:s();l||(o.needRuntime=n.helper(a))}else n.onError(uh(57,e.loc));return o.props=o.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),o},on:(e,t,n)=>Uf(e,t,n,(t=>{const{modifiers:o}=e;if(!o.length)return t;let{key:s,value:r}=t.props[0];const{keyModifiers:i,nonKeyModifiers:a,eventOptionModifiers:l}=((e,t)=>{const n=[],o=[],s=[];for(let r=0;r<t.length;r++){const i=t[r].content;ph(i)?s.push(i):hh(i)?Ld(e)?mh(e.content.toLowerCase())?n.push(i):o.push(i):(n.push(i),o.push(i)):fh(i)?o.push(i):n.push(i)}return{keyModifiers:n,nonKeyModifiers:o,eventOptionModifiers:s}})(s,o,0,e.loc);if(a.includes("right")&&(s=gh(s,"onContextmenu")),a.includes("middle")&&(s=gh(s,"onMouseup")),a.length&&(r=bd(n.helper(th),[r,JSON.stringify(a)])),!i.length||Ld(s)&&!mh(s.content.toLowerCase())||(r=bd(n.helper(nh),[r,JSON.stringify(i)])),l.length){const e=l.map(M).join("");s=Ld(s)?vd(`${s.content}${e}`,!0):yd(["(",s,`) + "${e}"`])}return{props:[gd(s,r)]}})),show:(e,t,n)=>{const{exp:o,loc:s}=e;return o||n.onError(uh(61,s)),{props:[],needRuntime:n.helper(oh)}}};bl();const jh=Object.create(null);function Th(e,t){if(!b(e)){if(!e.nodeType)return wl("invalid template option: ",e),i;e=e.innerHTML}const n=function(e,t){return e+JSON.stringify(t,((e,t)=>"function"==typeof t?t.toString():t))}(e,t),o=jh[n];if(o)return o;if("#"===e[0]){const t=document.querySelector(e);t||wl(`Template element not found or is empty: ${e}`),e=t?t.innerHTML:""}const s=u({hoistStatic:!0,onError:a,onWarn:e=>a(e,!0)},t);s.isCustomElement||"undefined"==typeof customElements||(s.isCustomElement=e=>!!customElements.get(e));const{code:r}=function(e,t={}){return Jf(e,u({},lh,t,{nodeTransforms:[yh,...Ch,...t.nodeTransforms||[]],directiveTransforms:u({},Eh,t.directiveTransforms||{}),transformHoist:null}))}(e,s);function a(t,n=!1){const o=n?t.message:`Template compilation error: ${t.message}`,s=t.loc&&function(e,t=0,n=e.length){if((t=Math.max(0,Math.min(t,e.length)))>(n=Math.max(0,Math.min(n,e.length))))return"";let o=e.split(/(\r?\n)/);const s=o.filter(((e,t)=>t%2==1));o=o.filter(((e,t)=>t%2==0));let r=0;const i=[];for(let e=0;e<o.length;e++)if(r+=o[e].length+(s[e]&&s[e].length||0),r>=t){for(let a=e-K;a<=e+K||n>r;a++){if(a<0||a>=o.length)continue;const l=a+1;i.push(`${l}${" ".repeat(Math.max(3-String(l).length,0))}|  ${o[a]}`);const c=o[a].length,u=s[a]&&s[a].length||0;if(a===e){const e=t-(r-(c+u)),o=Math.max(1,n>r?c-e:n-t);i.push("   |  "+" ".repeat(e)+"^".repeat(o))}else if(a>e){if(n>r){const e=Math.max(Math.min(n-r,c),1);i.push("   |  "+"^".repeat(e))}r+=c+u}}break}return i.join("\n")}(e,t.loc.start.offset,t.loc.end.offset);wl(s?`${o}\n${s}`:o)}const l=new Function("Vue",r)(Cu);return l._rc=!0,jh[n]=l}il(Th)},"./node_modules/vue3-google-map/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/vue3-google-map/dist/index.mjs ***!
  \*****************************************************/(e,t,n)=>{n.r(t),n.d(t,{AdvancedMarker:()=>A,Circle:()=>$,CustomControl:()=>U,CustomMarker:()=>Ne,GoogleMap:()=>k,HeatmapLayer:()=>Pe,InfoWindow:()=>z,Marker:()=>N,MarkerCluster:()=>Ae,Polygon:()=>I,Polyline:()=>P,Rectangle:()=>L});var o=n(/*! vue */"./node_modules/vue/dist/vue.esm-browser.js");!function(){try{if(typeof document<"u"){var e=document.createElement("style");e.appendChild(document.createTextNode(".mapdiv[data-v-d05fc6bc]{width:100%;height:100%}.custom-control-wrapper[data-v-d099a3a6]{display:none}.mapdiv .custom-control-wrapper[data-v-d099a3a6]{display:inline-block}.info-window-wrapper[data-v-cbe1707b]{display:none}.mapdiv .info-window-wrapper[data-v-cbe1707b]{display:inline-block}.custom-marker-wrapper[data-v-2d2d343a]{display:none}.mapdiv .custom-marker-wrapper[data-v-2d2d343a]{display:inline-block}")),document.head.appendChild(e)}}catch(e){}}();var s=Object.defineProperty,r=(e,t,n)=>(((e,t,n)=>{t in e?s(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);const i=Symbol("map"),a=Symbol("api"),l=Symbol("marker"),c=Symbol("markerCluster"),u=Symbol("CustomMarker"),d=Symbol("mapTilesLoaded"),p=["click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","rightclick"];
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function f(e,t,n,o){return new(n||(n=Promise))((function(s,r){function i(e){try{l(o.next(e))}catch(e){r(e)}}function a(e){try{l(o.throw(e))}catch(e){r(e)}}function l(e){e.done?s(e.value):function(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(i,a)}l((o=o.apply(e,t||[])).next())}))}var h=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var o,s,r;if(Array.isArray(t)){if((o=t.length)!=n.length)return!1;for(s=o;0!=s--;)if(!e(t[s],n[s]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((o=(r=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(s=o;0!=s--;)if(!Object.prototype.hasOwnProperty.call(n,r[s]))return!1;for(s=o;0!=s--;){var i=r[s];if(!e(t[i],n[i]))return!1}return!0}return t!=t&&n!=n};const m="__googleMapsScriptId";var g,v;(v=g||(g={}))[v.INITIALIZED=0]="INITIALIZED",v[v.LOADING=1]="LOADING",v[v.SUCCESS=2]="SUCCESS",v[v.FAILURE=3]="FAILURE";class y{constructor({apiKey:e,authReferrerPolicy:t,channel:n,client:o,id:s=m,language:r,libraries:i=[],mapIds:a,nonce:l,region:c,retries:u=3,url:d="https://maps.googleapis.com/maps/api/js",version:p}){if(this.callbacks=[],this.done=!1,this.loading=!1,this.errors=[],this.apiKey=e,this.authReferrerPolicy=t,this.channel=n,this.client=o,this.id=s||m,this.language=r,this.libraries=i,this.mapIds=a,this.nonce=l,this.region=c,this.retries=u,this.url=d,this.version=p,y.instance){if(!h(this.options,y.instance.options))throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(y.instance.options)}`);return y.instance}y.instance=this}get options(){return{version:this.version,apiKey:this.apiKey,channel:this.channel,client:this.client,id:this.id,libraries:this.libraries,language:this.language,region:this.region,mapIds:this.mapIds,nonce:this.nonce,url:this.url,authReferrerPolicy:this.authReferrerPolicy}}get status(){return this.errors.length?g.FAILURE:this.done?g.SUCCESS:this.loading?g.LOADING:g.INITIALIZED}get failed(){return this.done&&!this.loading&&this.errors.length>=this.retries+1}createUrl(){let e=this.url;return e+="?callback=__googleMapsCallback",this.apiKey&&(e+=`&key=${this.apiKey}`),this.channel&&(e+=`&channel=${this.channel}`),this.client&&(e+=`&client=${this.client}`),this.libraries.length>0&&(e+=`&libraries=${this.libraries.join(",")}`),this.language&&(e+=`&language=${this.language}`),this.region&&(e+=`&region=${this.region}`),this.version&&(e+=`&v=${this.version}`),this.mapIds&&(e+=`&map_ids=${this.mapIds.join(",")}`),this.authReferrerPolicy&&(e+=`&auth_referrer_policy=${this.authReferrerPolicy}`),e}deleteScript(){const e=document.getElementById(this.id);e&&e.remove()}load(){return this.loadPromise()}loadPromise(){return new Promise(((e,t)=>{this.loadCallback((n=>{n?t(n.error):e(window.google)}))}))}importLibrary(e){return this.execute(),google.maps.importLibrary(e)}loadCallback(e){this.callbacks.push(e),this.execute()}setScript(){var e,t;if(document.getElementById(this.id))return void this.callback();const n={key:this.apiKey,channel:this.channel,client:this.client,libraries:this.libraries.length&&this.libraries,v:this.version,mapIds:this.mapIds,language:this.language,region:this.region,authReferrerPolicy:this.authReferrerPolicy};Object.keys(n).forEach((e=>!n[e]&&delete n[e])),null!==(t=null===(e=null==window?void 0:window.google)||void 0===e?void 0:e.maps)&&void 0!==t&&t.importLibrary||(e=>{let t,n,o,s="google",r="importLibrary",i="__ib__",a=document,l=window;l=l[s]||(l[s]={});const c=l.maps||(l.maps={}),u=new Set,d=new URLSearchParams,p=()=>t||(t=new Promise(((r,l)=>f(this,void 0,void 0,(function*(){var p;for(o in yield n=a.createElement("script"),n.id=this.id,d.set("libraries",[...u]+""),e)d.set(o.replace(/[A-Z]/g,(e=>"_"+e[0].toLowerCase())),e[o]);d.set("callback",s+".maps."+i),n.src=this.url+"?"+d,c[i]=r,n.onerror=()=>t=l(Error("The Google Maps JavaScript API could not load.")),n.nonce=this.nonce||(null===(p=a.querySelector("script[nonce]"))||void 0===p?void 0:p.nonce)||"",a.head.append(n)})))));c[r]||(c[r]=(e,...t)=>u.add(e)&&p().then((()=>c[r](e,...t))))})(n);const o=this.libraries.map((e=>this.importLibrary(e)));o.length||o.push(this.importLibrary("core")),Promise.all(o).then((()=>this.callback()),(e=>{const t=new ErrorEvent("error",{error:e});this.loadErrorCallback(t)}))}reset(){this.deleteScript(),this.done=!1,this.loading=!1,this.errors=[],this.onerrorEvent=null}resetIfRetryingFailed(){this.failed&&this.reset()}loadErrorCallback(e){if(this.errors.push(e),this.errors.length<=this.retries){const e=this.errors.length*Math.pow(2,this.errors.length);setTimeout((()=>{this.deleteScript(),this.setScript()}),e)}else this.onerrorEvent=e,this.callback()}callback(){this.done=!0,this.loading=!1,this.callbacks.forEach((e=>{e(this.onerrorEvent)})),this.callbacks=[]}execute(){if(this.resetIfRetryingFailed(),this.done)this.callback();else{if(window.google&&window.google.maps&&window.google.maps.version)return void this.callback();this.loading||(this.loading=!0,this.setScript())}}}let b;const _=["bounds_changed","center_changed","click","contextmenu","dblclick","drag","dragend","dragstart","heading_changed","idle","isfractionalzoomenabled_changed","mapcapabilities_changed","maptypeid_changed","mousemove","mouseout","mouseover","projection_changed","renderingtype_changed","rightclick","tilesloaded","tilt_changed","zoom_changed"],x=(0,o.defineComponent)({props:{apiPromise:{type:Promise},apiKey:{type:String,default:""},version:{type:String,default:"weekly"},libraries:{type:Array,default:()=>["places","marker"]},region:{type:String,required:!1},language:{type:String,required:!1},backgroundColor:{type:String,required:!1},center:{type:Object,default:()=>({lat:0,lng:0})},clickableIcons:{type:Boolean,required:!1,default:void 0},controlSize:{type:Number,required:!1},disableDefaultUi:{type:Boolean,required:!1,default:void 0},disableDoubleClickZoom:{type:Boolean,required:!1,default:void 0},draggable:{type:Boolean,required:!1,default:void 0},draggableCursor:{type:String,required:!1},draggingCursor:{type:String,required:!1},fullscreenControl:{type:Boolean,required:!1,default:void 0},fullscreenControlPosition:{type:String,required:!1},gestureHandling:{type:String,required:!1},heading:{type:Number,required:!1},isFractionalZoomEnabled:{type:Boolean,required:!1,default:void 0},keyboardShortcuts:{type:Boolean,required:!1,default:void 0},mapTypeControl:{type:Boolean,required:!1,default:void 0},mapTypeControlOptions:{type:Object,required:!1},mapTypeId:{type:[Number,String],required:!1},mapId:{type:String,required:!1},maxZoom:{type:Number,required:!1},minZoom:{type:Number,required:!1},noClear:{type:Boolean,required:!1,default:void 0},panControl:{type:Boolean,required:!1,default:void 0},panControlPosition:{type:String,required:!1},restriction:{type:Object,required:!1},rotateControl:{type:Boolean,required:!1,default:void 0},rotateControlPosition:{type:String,required:!1},scaleControl:{type:Boolean,required:!1,default:void 0},scaleControlStyle:{type:Number,required:!1},scrollwheel:{type:Boolean,required:!1,default:void 0},streetView:{type:Object,required:!1},streetViewControl:{type:Boolean,required:!1,default:void 0},streetViewControlPosition:{type:String,required:!1},styles:{type:Array,required:!1},tilt:{type:Number,required:!1},zoom:{type:Number,required:!1},zoomControl:{type:Boolean,required:!1,default:void 0},zoomControlPosition:{type:String,required:!1},nonce:{type:String,default:""}},emits:_,setup(e,{emit:t}){const n=(0,o.ref)(),s=(0,o.ref)(!1),l=(0,o.ref)(),c=(0,o.ref)(),p=(0,o.ref)(!1);(0,o.provide)(i,l),(0,o.provide)(a,c),(0,o.provide)(d,p);const f=()=>{const t={...e};Object.keys(t).forEach((e=>{void 0===t[e]&&delete t[e]}));const n=e=>{var t;return e?{position:null==(t=c.value)?void 0:t.ControlPosition[e]}:{}},o={scaleControlOptions:e.scaleControlStyle?{style:e.scaleControlStyle}:{},panControlOptions:n(e.panControlPosition),zoomControlOptions:n(e.zoomControlPosition),rotateControlOptions:n(e.rotateControlPosition),streetViewControlOptions:n(e.streetViewControlPosition),fullscreenControlOptions:n(e.fullscreenControlPosition),disableDefaultUI:e.disableDefaultUi};return{...t,...o}},h=(0,o.watch)([c,l],(([e,t])=>{const n=t;e&&n&&(e.event.addListenerOnce(n,"tilesloaded",(()=>{p.value=!0})),setTimeout(h,0))}),{immediate:!0}),m=i=>{c.value=(0,o.markRaw)(i.maps),l.value=(0,o.markRaw)(new i.maps.Map(n.value,f()));const a=function(e){return class extends e.OverlayView{constructor(e){super(),r(this,"element"),r(this,"opts");const{element:t,...n}=e;this.element=t,this.opts=n,this.opts.map&&this.setMap(this.opts.map)}getPosition(){return this.opts.position?this.opts.position instanceof e.LatLng?this.opts.position:new e.LatLng(this.opts.position):null}getVisible(){if(!this.element)return!1;const e=this.element;return"none"!==e.style.display&&"hidden"!==e.style.visibility&&(""===e.style.opacity||Number(e.style.opacity)>.01)}onAdd(){if(!this.element)return;const e=this.getPanes();e&&e.overlayMouseTarget.appendChild(this.element)}draw(){if(!this.element)return;const e=this.getProjection(),t=null==e?void 0:e.fromLatLngToDivPixel(this.getPosition());if(t){let e,n;switch(this.element.style.position="absolute",this.opts.anchorPoint){case"TOP_CENTER":e="-50%",n="-100%";break;case"BOTTOM_CENTER":e="-50%",n="0";break;case"LEFT_CENTER":e="-100%",n="-50%";break;case"RIGHT_CENTER":e="0",n="-50%";break;case"TOP_LEFT":e="-100%",n="-100%";break;case"TOP_RIGHT":e="0",n="-100%";break;case"BOTTOM_LEFT":e="-100%",n="0";break;case"BOTTOM_RIGHT":e="0",n="0";break;default:e="-50%",n="-50%"}const o=t.x+(this.opts.offsetX||0)+"px",s=t.y+(this.opts.offsetY||0)+"px";this.element.style.transform=`translateX(${e}) translateX(${o}) translateY(${n}) translateY(${s})`,this.opts.zIndex&&(this.element.style.zIndex=this.opts.zIndex.toString())}}onRemove(){this.element&&this.element.remove()}setOptions(e){const{element:t,...n}=e;this.element=t,this.opts=n,this.draw()}}}(c.value);c.value[u]=a,_.forEach((e=>{var n;null==(n=l.value)||n.addListener(e,(n=>t(e,n)))})),s.value=!0;const d=Object.keys(e).filter((e=>!["apiPromise","apiKey","version","libraries","region","language","center","zoom","nonce"].includes(e))).map((t=>(0,o.toRef)(e,t)));(0,o.watch)([()=>e.center,()=>e.zoom,...d],(([e,t],[n,o])=>{var s,r,i;const{center:a,zoom:c,...u}=f();null==(s=l.value)||s.setOptions(u),void 0!==t&&t!==o&&(null==(r=l.value)||r.setZoom(t));const d=!n||e.lng!==n.lng||e.lat!==n.lat;e&&d&&(null==(i=l.value)||i.panTo(e))}))};return(0,o.onMounted)((()=>{e.apiPromise&&e.apiPromise instanceof Promise?e.apiPromise.then(m):((()=>{try{const{apiKey:t,region:n,version:o,language:s,libraries:r,nonce:i}=e;b=new y({apiKey:t,region:n,version:o,language:s,libraries:r,nonce:i})}catch(e){}})(),b.load().then(m))})),(0,o.onBeforeUnmount)((()=>{var e;p.value=!1,l.value&&(null==(e=c.value)||e.event.clearInstanceListeners(l.value))})),{mapRef:n,ready:s,map:l,api:c,mapTilesLoaded:p}}}),S=(e,t)=>{const n=e.__vccOpts||e;for(const[e,o]of t)n[e]=o;return n},w={ref:"mapRef",class:"mapdiv"};const k=S(x,[["render",function(e,t,n,s,r,i){return(0,o.openBlock)(),(0,o.createElementBlock)("div",null,[(0,o.createElementVNode)("div",w,null,512),(0,o.renderSlot)(e.$slots,"default",(0,o.normalizeProps)((0,o.guardReactiveProps)({ready:e.ready,map:e.map,api:e.api,mapTilesLoaded:e.mapTilesLoaded})),void 0,!0)])}],["__scopeId","data-v-d05fc6bc"]]);function C(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var E=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var o,s,r;if(Array.isArray(t)){if((o=t.length)!=n.length)return!1;for(s=o;0!=s--;)if(!e(t[s],n[s]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((o=(r=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(s=o;0!=s--;)if(!Object.prototype.hasOwnProperty.call(n,r[s]))return!1;for(s=o;0!=s--;){var i=r[s];if(!e(t[i],n[i]))return!1}return!0}return t!=t&&n!=n};const j=C(E),T=["click","drag","dragend","dragstart","gmp-click"],A=(0,o.defineComponent)({name:"AdvancedMarker",props:{options:{type:Object,required:!0},pinOptions:{type:Object,required:!1}},emits:T,setup(e,{emit:t,expose:n,slots:s}){const r=(0,o.toRef)(e,"options"),u=(0,o.toRef)(e,"pinOptions"),d=(0,o.ref)(),p=(0,o.inject)(i,(0,o.ref)()),f=(0,o.inject)(a,(0,o.ref)()),h=(0,o.inject)(c,(0,o.ref)()),m=(0,o.computed)((()=>!!(h.value&&f.value&&d.value instanceof google.maps.marker.AdvancedMarkerElement)));return(0,o.watch)([p,r,u],(async(e,[n,s,i])=>{var a,l,c;const g=!j(r.value,s)||!j(u.value,i)||p.value!==n;if(!p.value||!f.value||!g)return;const{AdvancedMarkerElement:v,PinElement:y}=f.value.marker;if(d.value){const{map:e,content:t,...n}=r.value;Object.assign(d.value,{content:u.value?new y(u.value).element:t,...n}),m.value&&(null==(a=h.value)||a.removeMarker(d.value),null==(l=h.value)||l.addMarker(d.value))}else u.value&&(r.value.content=new y(u.value).element),d.value=(0,o.markRaw)(new v(r.value)),m.value?null==(c=h.value)||c.addMarker(d.value):d.value.map=p.value,T.forEach((e=>{var n;null==(n=d.value)||n.addListener(e,(n=>t(e,n)))}))}),{immediate:!0}),(0,o.onBeforeUnmount)((()=>{var e,t;d.value&&(null==(e=f.value)||e.event.clearInstanceListeners(d.value),m.value?null==(t=h.value)||t.removeMarker(d.value):d.value.map=null)})),(0,o.provide)(l,d),n({marker:d}),()=>{var e;return null==(e=s.default)?void 0:e.call(s)}}}),R=(e,t,n,s)=>{const r=(0,o.ref)(),l=(0,o.inject)(i,(0,o.ref)()),d=(0,o.inject)(a,(0,o.ref)()),p=(0,o.inject)(c,(0,o.ref)()),f=(0,o.computed)((()=>!!(p.value&&d.value&&(r.value instanceof d.value.Marker||r.value instanceof d.value[u]))));return(0,o.watch)([l,n],((i,[a,c])=>{var h,m,g;const v=!j(n.value,c)||l.value!==a;!l.value||!d.value||!v||(r.value?(r.value.setOptions(n.value),f.value&&(null==(h=p.value)||h.removeMarker(r.value),null==(m=p.value)||m.addMarker(r.value))):((e=>"Marker"===e)(e)||(e=>e===u)(e)?r.value=(0,o.markRaw)(new d.value[e](n.value)):r.value=(0,o.markRaw)(new d.value[e]({...n.value,map:l.value})),f.value?null==(g=p.value)||g.addMarker(r.value):r.value.setMap(l.value),t.forEach((e=>{var t;null==(t=r.value)||t.addListener(e,(t=>s(e,t)))}))))}),{immediate:!0}),(0,o.onBeforeUnmount)((()=>{var e,t;r.value&&(null==(e=d.value)||e.event.clearInstanceListeners(r.value),f.value?null==(t=p.value)||t.removeMarker(r.value):r.value.setMap(null))})),r},O=["animation_changed","click","dblclick","rightclick","dragstart","dragend","drag","mouseover","mousedown","mouseout","mouseup","draggable_changed","clickable_changed","contextmenu","cursor_changed","flat_changed","rightclick","zindex_changed","icon_changed","position_changed","shape_changed","title_changed","visible_changed"],N=(0,o.defineComponent)({name:"Marker",props:{options:{type:Object,required:!0}},emits:O,setup(e,{emit:t,expose:n,slots:s}){const r=(0,o.toRef)(e,"options"),i=R("Marker",O,r,t);return(0,o.provide)(l,i),n({marker:i}),()=>{var e;return null==(e=s.default)?void 0:e.call(s)}}}),P=(0,o.defineComponent)({name:"Polyline",props:{options:{type:Object,required:!0}},emits:p,setup(e,{emit:t}){const n=(0,o.toRef)(e,"options");return{polyline:R("Polyline",p,n,t)}},render:()=>null}),I=(0,o.defineComponent)({name:"Polygon",props:{options:{type:Object,required:!0}},emits:p,setup(e,{emit:t}){const n=(0,o.toRef)(e,"options");return{polygon:R("Polygon",p,n,t)}},render:()=>null}),M=p.concat(["bounds_changed"]),L=(0,o.defineComponent)({name:"Rectangle",props:{options:{type:Object,required:!0}},emits:M,setup(e,{emit:t}){const n=(0,o.toRef)(e,"options");return{rectangle:R("Rectangle",M,n,t)}},render:()=>null}),F=p.concat(["center_changed","radius_changed"]),$=(0,o.defineComponent)({name:"Circle",props:{options:{type:Object,required:!0}},emits:F,setup(e,{emit:t}){const n=(0,o.toRef)(e,"options");return{circle:R("Circle",F,n,t)}},render:()=>null}),D=(0,o.defineComponent)({props:{position:{type:String,required:!0},index:{type:Number,default:1}},emits:["content:loaded"],setup(e,{emit:t}){const n=(0,o.ref)(null),s=(0,o.inject)(i,(0,o.ref)()),r=(0,o.inject)(a,(0,o.ref)()),l=(0,o.inject)(d,(0,o.ref)(!1)),c=(0,o.watch)([l,r,n],(([n,o,s])=>{o&&n&&s&&(u(e.position),t("content:loaded"),setTimeout(c,0))}),{immediate:!0}),u=e=>{if(s.value&&r.value&&n.value){const t=r.value.ControlPosition[e];s.value.controls[t].push(n.value)}},p=e=>{if(s.value&&r.value){let t=null;const o=r.value.ControlPosition[e];s.value.controls[o].forEach(((e,o)=>{e===n.value&&(t=o)})),null!==t&&s.value.controls[o].removeAt(t)}};return(0,o.onBeforeUnmount)((()=>p(e.position))),(0,o.watch)((()=>e.position),((e,t)=>{p(t),u(e)})),(0,o.watch)((()=>e.index),(t=>{t&&n.value&&(n.value.index=e.index)})),{controlRef:n}}}),B={ref:"controlRef",class:"custom-control-wrapper"};const U=S(D,[["render",function(e,t,n,s,r,i){return(0,o.openBlock)(),(0,o.createElementBlock)("div",B,[(0,o.renderSlot)(e.$slots,"default",{},void 0,!0)],512)}],["__scopeId","data-v-d099a3a6"]]),V=["closeclick","content_changed","domready","position_changed","visible","zindex_changed"],q=(0,o.defineComponent)({inheritAttrs:!1,props:{options:{type:Object,default:()=>({})},modelValue:{type:Boolean}},emits:[...V,"update:modelValue"],setup(e,{slots:t,emit:n,expose:s}){const r=(0,o.ref)(),c=(0,o.ref)(),u=(0,o.inject)(i,(0,o.ref)()),d=(0,o.inject)(a,(0,o.ref)()),p=(0,o.inject)(l,(0,o.ref)());let f,h=e.modelValue;const m=(0,o.computed)((()=>{var e;return null==(e=t.default)?void 0:e.call(t).some((e=>e.type!==o.Comment))})),g=e=>{h=e,n("update:modelValue",e)},v=e=>{r.value&&(r.value.open({map:u.value,anchor:p.value,...e}),g(!0))},y=()=>{r.value&&(r.value.close(),g(!1))};return(0,o.onMounted)((()=>{(0,o.watch)([u,()=>e.options],(([e,t],[s,i])=>{var a;const l=!j(t,i)||u.value!==s;u.value&&d.value&&l&&(r.value?(r.value.setOptions({...t,content:m.value?c.value:t.content}),p.value||v()):(r.value=(0,o.markRaw)(new d.value.InfoWindow({...t,content:m.value?c.value:t.content})),p.value&&(f=p.value.addListener("click",(()=>{v()}))),(!p.value||h)&&v(),V.forEach((e=>{var t;null==(t=r.value)||t.addListener(e,(t=>n(e,t)))})),null==(a=r.value)||a.addListener("closeclick",(()=>g(!1)))))}),{immediate:!0}),(0,o.watch)((()=>e.modelValue),(e=>{e!==h&&(e?v():y())}))})),(0,o.onBeforeUnmount)((()=>{var e;f&&f.remove(),r.value&&(null==(e=d.value)||e.event.clearInstanceListeners(r.value),y())})),s({infoWindow:r,open:v,close:y}),{infoWindow:r,infoWindowRef:c,hasSlotContent:m,open:v,close:y}}}),H={key:0,class:"info-window-wrapper"};const z=S(q,[["render",function(e,t,n,s,r,i){return e.hasSlotContent?((0,o.openBlock)(),(0,o.createElementBlock)("div",H,[(0,o.createElementVNode)("div",(0,o.mergeProps)({ref:"infoWindowRef"},e.$attrs),[(0,o.renderSlot)(e.$slots,"default",{},void 0,!0)],16)])):(0,o.createCommentVNode)("",!0)}],["__scopeId","data-v-cbe1707b"]]),W=[Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];class K{static from(e){if(!(e instanceof ArrayBuffer))throw new Error("Data must be an instance of ArrayBuffer.");const[t,n]=new Uint8Array(e,0,2);if(219!==t)throw new Error("Data does not appear to be in a KDBush format.");const o=n>>4;if(1!==o)throw new Error(`Got v${o} data when expected v1.`);const s=W[15&n];if(!s)throw new Error("Unrecognized array type.");const[r]=new Uint16Array(e,2,1),[i]=new Uint32Array(e,4,1);return new K(i,r,s,e)}constructor(e,t=64,n=Float64Array,o){if(isNaN(e)||e<0)throw new Error(`Unpexpected numItems value: ${e}.`);this.numItems=+e,this.nodeSize=Math.min(Math.max(+t,2),65535),this.ArrayType=n,this.IndexArrayType=e<65536?Uint16Array:Uint32Array;const s=W.indexOf(this.ArrayType),r=2*e*this.ArrayType.BYTES_PER_ELEMENT,i=e*this.IndexArrayType.BYTES_PER_ELEMENT,a=(8-i%8)%8;if(s<0)throw new Error(`Unexpected typed array class: ${n}.`);o&&o instanceof ArrayBuffer?(this.data=o,this.ids=new this.IndexArrayType(this.data,8,e),this.coords=new this.ArrayType(this.data,8+i+a,2*e),this._pos=2*e,this._finished=!0):(this.data=new ArrayBuffer(8+r+i+a),this.ids=new this.IndexArrayType(this.data,8,e),this.coords=new this.ArrayType(this.data,8+i+a,2*e),this._pos=0,this._finished=!1,new Uint8Array(this.data,0,2).set([219,16+s]),new Uint16Array(this.data,2,1)[0]=t,new Uint32Array(this.data,4,1)[0]=e)}add(e,t){const n=this._pos>>1;return this.ids[n]=n,this.coords[this._pos++]=e,this.coords[this._pos++]=t,n}finish(){const e=this._pos>>1;if(e!==this.numItems)throw new Error(`Added ${e} items when expected ${this.numItems}.`);return G(this.ids,this.coords,this.nodeSize,0,this.numItems-1,0),this._finished=!0,this}range(e,t,n,o){if(!this._finished)throw new Error("Data not yet indexed - call index.finish().");const{ids:s,coords:r,nodeSize:i}=this,a=[0,s.length-1,0],l=[];for(;a.length;){const c=a.pop()||0,u=a.pop()||0,d=a.pop()||0;if(u-d<=i){for(let i=d;i<=u;i++){const a=r[2*i],c=r[2*i+1];a>=e&&a<=n&&c>=t&&c<=o&&l.push(s[i])}continue}const p=d+u>>1,f=r[2*p],h=r[2*p+1];f>=e&&f<=n&&h>=t&&h<=o&&l.push(s[p]),(0===c?e<=f:t<=h)&&(a.push(d),a.push(p-1),a.push(1-c)),(0===c?n>=f:o>=h)&&(a.push(p+1),a.push(u),a.push(1-c))}return l}within(e,t,n){if(!this._finished)throw new Error("Data not yet indexed - call index.finish().");const{ids:o,coords:s,nodeSize:r}=this,i=[0,o.length-1,0],a=[],l=n*n;for(;i.length;){const c=i.pop()||0,u=i.pop()||0,d=i.pop()||0;if(u-d<=r){for(let n=d;n<=u;n++)Y(s[2*n],s[2*n+1],e,t)<=l&&a.push(o[n]);continue}const p=d+u>>1,f=s[2*p],h=s[2*p+1];Y(f,h,e,t)<=l&&a.push(o[p]),(0===c?e-n<=f:t-n<=h)&&(i.push(d),i.push(p-1),i.push(1-c)),(0===c?e+n>=f:t+n>=h)&&(i.push(p+1),i.push(u),i.push(1-c))}return a}}function G(e,t,n,o,s,r){if(s-o<=n)return;const i=o+s>>1;J(e,t,i,o,s,r),G(e,t,n,o,i-1,1-r),G(e,t,n,i+1,s,1-r)}function J(e,t,n,o,s,r){for(;s>o;){if(s-o>600){const i=s-o+1,a=n-o+1,l=Math.log(i),c=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*c*(i-c)/i)*(a-i/2<0?-1:1);J(e,t,n,Math.max(o,Math.floor(n-a*c/i+u)),Math.min(s,Math.floor(n+(i-a)*c/i+u)),r)}const i=t[2*n+r];let a=o,l=s;for(Z(e,t,o,n),t[2*s+r]>i&&Z(e,t,o,s);a<l;){for(Z(e,t,a,l),a++,l--;t[2*a+r]<i;)a++;for(;t[2*l+r]>i;)l--}t[2*o+r]===i?Z(e,t,o,l):(l++,Z(e,t,l,s)),l<=n&&(o=l+1),n<=l&&(s=l-1)}}function Z(e,t,n,o){X(e,n,o),X(t,2*n,2*o),X(t,2*n+1,2*o+1)}function X(e,t,n){const o=e[t];e[t]=e[n],e[n]=o}function Y(e,t,n,o){const s=e-n,r=t-o;return s*s+r*r}const Q={minZoom:0,maxZoom:16,minPoints:2,radius:40,extent:512,nodeSize:64,log:!1,generateId:!1,reduce:null,map:e=>e},ee=Math.fround||(e=>t=>(e[0]=+t,e[0]))(new Float32Array(1));class te{constructor(e){this.options=Object.assign(Object.create(Q),e),this.trees=new Array(this.options.maxZoom+1),this.stride=this.options.reduce?7:6,this.clusterProps=[]}load(e){const{log:t,minZoom:n,maxZoom:o}=this.options;e.length;this.points=e;const s=[];for(let t=0;t<e.length;t++){const n=e[t];if(!n.geometry)continue;const[o,r]=n.geometry.coordinates,i=ee(se(o)),a=ee(re(r));s.push(i,a,1/0,t,-1,1),this.options.reduce&&s.push(0)}let r=this.trees[o+1]=this._createTree(s);for(let e=o;e>=n;e--){Date.now();r=this.trees[e]=this._createTree(this._cluster(r,e))}return this}getClusters(e,t){let n=((e[0]+180)%360+360)%360-180;const o=Math.max(-90,Math.min(90,e[1]));let s=180===e[2]?180:((e[2]+180)%360+360)%360-180;const r=Math.max(-90,Math.min(90,e[3]));if(e[2]-e[0]>=360)n=-180,s=180;else if(n>s){const e=this.getClusters([n,o,180,r],t),i=this.getClusters([-180,o,s,r],t);return e.concat(i)}const i=this.trees[this._limitZoom(t)],a=i.range(se(n),re(r),se(s),re(o)),l=i.data,c=[];for(const e of a){const t=this.stride*e;c.push(l[t+5]>1?ne(l,t,this.clusterProps):this.points[l[t+3]])}return c}getChildren(e){const t=this._getOriginId(e),n=this._getOriginZoom(e),o="No cluster with the specified id.",s=this.trees[n];if(!s)throw new Error(o);const r=s.data;if(t*this.stride>=r.length)throw new Error(o);const i=this.options.radius/(this.options.extent*Math.pow(2,n-1)),a=r[t*this.stride],l=r[t*this.stride+1],c=s.within(a,l,i),u=[];for(const t of c){const n=t*this.stride;r[n+4]===e&&u.push(r[n+5]>1?ne(r,n,this.clusterProps):this.points[r[n+3]])}if(0===u.length)throw new Error(o);return u}getLeaves(e,t,n){t=t||10,n=n||0;const o=[];return this._appendLeaves(o,e,t,n,0),o}getTile(e,t,n){const o=this.trees[this._limitZoom(e)],s=Math.pow(2,e),{extent:r,radius:i}=this.options,a=i/r,l=(n-a)/s,c=(n+1+a)/s,u={features:[]};return this._addTileFeatures(o.range((t-a)/s,l,(t+1+a)/s,c),o.data,t,n,s,u),0===t&&this._addTileFeatures(o.range(1-a/s,l,1,c),o.data,s,n,s,u),t===s-1&&this._addTileFeatures(o.range(0,l,a/s,c),o.data,-1,n,s,u),u.features.length?u:null}getClusterExpansionZoom(e){let t=this._getOriginZoom(e)-1;for(;t<=this.options.maxZoom;){const n=this.getChildren(e);if(t++,1!==n.length)break;e=n[0].properties.cluster_id}return t}_appendLeaves(e,t,n,o,s){const r=this.getChildren(t);for(const t of r){const r=t.properties;if(r&&r.cluster?s+r.point_count<=o?s+=r.point_count:s=this._appendLeaves(e,r.cluster_id,n,o,s):s<o?s++:e.push(t),e.length===n)break}return s}_createTree(e){const t=new K(e.length/this.stride|0,this.options.nodeSize,Float32Array);for(let n=0;n<e.length;n+=this.stride)t.add(e[n],e[n+1]);return t.finish(),t.data=e,t}_addTileFeatures(e,t,n,o,s,r){for(const i of e){const e=i*this.stride,a=t[e+5]>1;let l,c,u;if(a)l=oe(t,e,this.clusterProps),c=t[e],u=t[e+1];else{const n=this.points[t[e+3]];l=n.properties;const[o,s]=n.geometry.coordinates;c=se(o),u=re(s)}const d={type:1,geometry:[[Math.round(this.options.extent*(c*s-n)),Math.round(this.options.extent*(u*s-o))]],tags:l};let p;p=a||this.options.generateId?t[e+3]:this.points[t[e+3]].id,void 0!==p&&(d.id=p),r.features.push(d)}}_limitZoom(e){return Math.max(this.options.minZoom,Math.min(Math.floor(+e),this.options.maxZoom+1))}_cluster(e,t){const{radius:n,extent:o,reduce:s,minPoints:r}=this.options,i=n/(o*Math.pow(2,t)),a=e.data,l=[],c=this.stride;for(let n=0;n<a.length;n+=c){if(a[n+2]<=t)continue;a[n+2]=t;const o=a[n],u=a[n+1],d=e.within(a[n],a[n+1],i),p=a[n+5];let f=p;for(const e of d){const n=e*c;a[n+2]>t&&(f+=a[n+5])}if(f>p&&f>=r){let e,r=o*p,i=u*p,h=-1;const m=(n/c<<5)+(t+1)+this.points.length;for(const o of d){const l=o*c;if(a[l+2]<=t)continue;a[l+2]=t;const u=a[l+5];r+=a[l]*u,i+=a[l+1]*u,a[l+4]=m,s&&(e||(e=this._map(a,n,!0),h=this.clusterProps.length,this.clusterProps.push(e)),s(e,this._map(a,l)))}a[n+4]=m,l.push(r/f,i/f,1/0,m,-1,f),s&&l.push(h)}else{for(let e=0;e<c;e++)l.push(a[n+e]);if(f>1)for(const e of d){const n=e*c;if(!(a[n+2]<=t)){a[n+2]=t;for(let e=0;e<c;e++)l.push(a[n+e])}}}}return l}_getOriginId(e){return e-this.points.length>>5}_getOriginZoom(e){return(e-this.points.length)%32}_map(e,t,n){if(e[t+5]>1){const o=this.clusterProps[e[t+6]];return n?Object.assign({},o):o}const o=this.points[e[t+3]].properties,s=this.options.map(o);return n&&s===o?Object.assign({},s):s}}function ne(e,t,n){return{type:"Feature",id:e[t+3],properties:oe(e,t,n),geometry:{type:"Point",coordinates:[ie(e[t]),ae(e[t+1])]}}}function oe(e,t,n){const o=e[t+5],s=o>=1e4?`${Math.round(o/1e3)}k`:o>=1e3?Math.round(o/100)/10+"k":o,r=e[t+6],i=-1===r?{}:Object.assign({},n[r]);return Object.assign(i,{cluster:!0,cluster_id:e[t+3],point_count:o,point_count_abbreviated:s})}function se(e){return e/360+.5}function re(e){const t=Math.sin(e*Math.PI/180),n=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return n<0?0:n>1?1:n}function ie(e){return 360*(e-.5)}function ae(e){const t=(180-360*e)*Math.PI/180;return 360*Math.atan(Math.exp(t))/Math.PI-90}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function le(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(o=Object.getOwnPropertySymbols(e);s<o.length;s++)t.indexOf(o[s])<0&&Object.prototype.propertyIsEnumerable.call(e,o[s])&&(n[o[s]]=e[o[s]])}return n}class ce{static isAdvancedMarkerAvailable(e){return google.maps.marker&&!0===e.getMapCapabilities().isAdvancedMarkersAvailable}static isAdvancedMarker(e){return google.maps.marker&&e instanceof google.maps.marker.AdvancedMarkerElement}static setMap(e,t){this.isAdvancedMarker(e)?e.map=t:e.setMap(t)}static getPosition(e){if(this.isAdvancedMarker(e)){if(e.position){if(e.position instanceof google.maps.LatLng)return e.position;if(e.position.lat&&e.position.lng)return new google.maps.LatLng(e.position.lat,e.position.lng)}return new google.maps.LatLng(null)}return e.getPosition()}static getVisible(e){return!!this.isAdvancedMarker(e)||e.getVisible()}}class ue{constructor({markers:e,position:t}){this.markers=e,t&&(t instanceof google.maps.LatLng?this._position=t:this._position=new google.maps.LatLng(t))}get bounds(){if(0===this.markers.length&&!this._position)return;const e=new google.maps.LatLngBounds(this._position,this._position);for(const t of this.markers)e.extend(ce.getPosition(t));return e}get position(){return this._position||this.bounds.getCenter()}get count(){return this.markers.filter((e=>ce.getVisible(e))).length}push(e){this.markers.push(e)}delete(){this.marker&&(ce.setMap(this.marker,null),this.marker=void 0),this.markers.length=0}}const de=(e,t,n,o)=>{const s=pe(e.getBounds(),t,o);return n.filter((e=>s.contains(ce.getPosition(e))))},pe=(e,t,n)=>{const{northEast:o,southWest:s}=he(e,t),r=me({northEast:o,southWest:s},n);return ge(r,t)},fe=(e,t,n)=>{const o=pe(e,t,n),s=o.getNorthEast(),r=o.getSouthWest();return[r.lng(),r.lat(),s.lng(),s.lat()]},he=(e,t)=>({northEast:t.fromLatLngToDivPixel(e.getNorthEast()),southWest:t.fromLatLngToDivPixel(e.getSouthWest())}),me=({northEast:e,southWest:t},n)=>(e.x+=n,e.y-=n,t.x-=n,t.y+=n,{northEast:e,southWest:t}),ge=({northEast:e,southWest:t},n)=>{const o=n.fromDivPixelToLatLng(t),s=n.fromDivPixelToLatLng(e);return new google.maps.LatLngBounds(o,s)};class ve{constructor({maxZoom:e=16}){this.maxZoom=e}noop({markers:e}){return be(e)}}class ye extends ve{constructor(e){var{viewportPadding:t=60}=e;super(le(e,["viewportPadding"])),this.viewportPadding=60,this.viewportPadding=t}calculate({markers:e,map:t,mapCanvasProjection:n}){return t.getZoom()>=this.maxZoom?{clusters:this.noop({markers:e}),changed:!1}:{clusters:this.cluster({markers:de(t,n,e,this.viewportPadding),map:t,mapCanvasProjection:n})}}}const be=e=>e.map((e=>new ue({position:ce.getPosition(e),markers:[e]})));class _e extends ve{constructor(e){var{maxZoom:t,radius:n=60}=e,o=le(e,["maxZoom","radius"]);super({maxZoom:t}),this.state={zoom:-1},this.superCluster=new te(Object.assign({maxZoom:this.maxZoom,radius:n},o))}calculate(e){let t=!1;const n={zoom:e.map.getZoom()};if(!j(e.markers,this.markers)){t=!0,this.markers=[...e.markers];const n=this.markers.map((e=>{const t=ce.getPosition(e);return{type:"Feature",geometry:{type:"Point",coordinates:[t.lng(),t.lat()]},properties:{marker:e}}}));this.superCluster.load(n)}return t||(this.state.zoom<=this.maxZoom||n.zoom<=this.maxZoom)&&(t=!j(this.state,n)),this.state=n,t&&(this.clusters=this.cluster(e)),{clusters:this.clusters,changed:t}}cluster({map:e}){return this.superCluster.getClusters([-180,-90,180,90],Math.round(e.getZoom())).map((e=>this.transformCluster(e)))}transformCluster({geometry:{coordinates:[e,t]},properties:n}){if(n.cluster)return new ue({markers:this.superCluster.getLeaves(n.cluster_id,1/0).map((e=>e.properties.marker)),position:{lat:t,lng:e}});const o=n.marker;return new ue({markers:[o],position:ce.getPosition(o)})}}class xe extends ye{constructor(e){var{maxZoom:t,radius:n=60,viewportPadding:o=60}=e,s=le(e,["maxZoom","radius","viewportPadding"]);super({maxZoom:t,viewportPadding:o}),this.superCluster=new te(Object.assign({maxZoom:this.maxZoom,radius:n},s)),this.state={zoom:-1,view:[0,0,0,0]}}calculate(e){const t={zoom:Math.round(e.map.getZoom()),view:fe(e.map.getBounds(),e.mapCanvasProjection,this.viewportPadding)};let n=!j(this.state,t);if(!j(e.markers,this.markers)){n=!0,this.markers=[...e.markers];const t=this.markers.map((e=>{const t=ce.getPosition(e);return{type:"Feature",geometry:{type:"Point",coordinates:[t.lng(),t.lat()]},properties:{marker:e}}}));this.superCluster.load(t)}return n&&(this.clusters=this.cluster(e),this.state=t),{clusters:this.clusters,changed:n}}cluster({map:e,mapCanvasProjection:t}){const n={zoom:Math.round(e.getZoom()),view:fe(e.getBounds(),t,this.viewportPadding)};return this.superCluster.getClusters(n.view,n.zoom).map((e=>this.transformCluster(e)))}transformCluster({geometry:{coordinates:[e,t]},properties:n}){if(n.cluster)return new ue({markers:this.superCluster.getLeaves(n.cluster_id,1/0).map((e=>e.properties.marker)),position:{lat:t,lng:e}});const o=n.marker;return new ue({markers:[o],position:ce.getPosition(o)})}}class Se{constructor(e,t){this.markers={sum:e.length};const n=t.map((e=>e.count)),o=n.reduce(((e,t)=>e+t),0);this.clusters={count:t.length,markers:{mean:o/t.length,sum:o,min:Math.min(...n),max:Math.max(...n)}}}}class we{render({count:e,position:t},n,o){const s=`<svg fill="${e>Math.max(10,n.clusters.markers.mean)?"#ff0000":"#0000ff"}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 240 240" width="50" height="50">\n<circle cx="120" cy="120" opacity=".6" r="70" />\n<circle cx="120" cy="120" opacity=".3" r="90" />\n<circle cx="120" cy="120" opacity=".2" r="110" />\n<text x="50%" y="50%" style="fill:#fff" text-anchor="middle" font-size="50" dominant-baseline="middle" font-family="roboto,arial,sans-serif">${e}</text>\n</svg>`,r=`Cluster of ${e} markers`,i=Number(google.maps.Marker.MAX_ZINDEX)+e;if(ce.isAdvancedMarkerAvailable(o)){const e=document.createElement("div");e.innerHTML=s;const n=e.firstElementChild;n.setAttribute("transform","translate(0 25)");const a={map:o,position:t,zIndex:i,title:r,content:n};return new google.maps.marker.AdvancedMarkerElement(a)}const a={position:t,zIndex:i,title:r,icon:{url:`data:image/svg+xml;base64,${btoa(s)}`,anchor:new google.maps.Point(25,25)}};return new google.maps.Marker(a)}}class ke{constructor(){!function(e,t){for(let n in t.prototype)e.prototype[n]=t.prototype[n]}(ke,google.maps.OverlayView)}}var Ce;!function(e){e.CLUSTERING_BEGIN="clusteringbegin",e.CLUSTERING_END="clusteringend",e.CLUSTER_CLICK="click"}(Ce||(Ce={}));const Ee=(e,t,n)=>{n.fitBounds(t.bounds)};class je extends ke{constructor({map:e,markers:t=[],algorithmOptions:n={},algorithm:o=new _e(n),renderer:s=new we,onClusterClick:r=Ee}){super(),this.markers=[...t],this.clusters=[],this.algorithm=o,this.renderer=s,this.onClusterClick=r,e&&this.setMap(e)}addMarker(e,t){this.markers.includes(e)||(this.markers.push(e),t||this.render())}addMarkers(e,t){e.forEach((e=>{this.addMarker(e,!0)})),t||this.render()}removeMarker(e,t){const n=this.markers.indexOf(e);return-1!==n&&(ce.setMap(e,null),this.markers.splice(n,1),t||this.render(),!0)}removeMarkers(e,t){let n=!1;return e.forEach((e=>{n=this.removeMarker(e,!0)||n})),n&&!t&&this.render(),n}clearMarkers(e){this.markers.length=0,e||this.render()}render(){const e=this.getMap();if(e instanceof google.maps.Map&&e.getProjection()){google.maps.event.trigger(this,Ce.CLUSTERING_BEGIN,this);const{clusters:t,changed:n}=this.algorithm.calculate({markers:this.markers,map:e,mapCanvasProjection:this.getProjection()});if(n||null==n){const e=new Set;for(const n of t)1==n.markers.length&&e.add(n.markers[0]);const n=[];for(const t of this.clusters)null!=t.marker&&(1==t.markers.length?e.has(t.marker)||ce.setMap(t.marker,null):n.push(t.marker));this.clusters=t,this.renderClusters(),requestAnimationFrame((()=>n.forEach((e=>ce.setMap(e,null)))))}google.maps.event.trigger(this,Ce.CLUSTERING_END,this)}}onAdd(){this.idleListener=this.getMap().addListener("idle",this.render.bind(this)),this.render()}onRemove(){google.maps.event.removeListener(this.idleListener),this.reset()}reset(){this.markers.forEach((e=>ce.setMap(e,null))),this.clusters.forEach((e=>e.delete())),this.clusters=[]}renderClusters(){const e=new Se(this.markers,this.clusters),t=this.getMap();this.clusters.forEach((n=>{1===n.markers.length?n.marker=n.markers[0]:(n.marker=this.renderer.render(n,e,t),n.markers.forEach((e=>ce.setMap(e,null))),this.onClusterClick&&n.marker.addListener("click",(e=>{google.maps.event.trigger(this,Ce.CLUSTER_CLICK,n),this.onClusterClick(e,n,t)}))),ce.setMap(n.marker,t)}))}}const Te=Object.values(Ce),Ae=(0,o.defineComponent)({name:"MarkerCluster",props:{options:{type:Object,default:()=>({})}},emits:Te,setup(e,{emit:t,expose:n,slots:s}){const r=(0,o.ref)(),l=(0,o.inject)(i,(0,o.ref)()),u=(0,o.inject)(a,(0,o.ref)());return(0,o.provide)(c,r),(0,o.watch)(l,(()=>{l.value&&(r.value=(0,o.markRaw)(new je({map:l.value,algorithm:new xe(e.options.algorithmOptions??{}),...e.options})),Te.forEach((e=>{var n;null==(n=r.value)||n.addListener(e,(n=>t(e,n)))})))}),{immediate:!0}),(0,o.onBeforeUnmount)((()=>{var e;r.value&&(null==(e=u.value)||e.event.clearInstanceListeners(r.value),r.value.clearMarkers(),r.value.setMap(null))})),n({markerCluster:r}),()=>{var e;return null==(e=s.default)?void 0:e.call(s)}}}),Re=(0,o.defineComponent)({inheritAttrs:!1,props:{options:{type:Object,required:!0}},setup(e,{slots:t,emit:n,expose:s}){const r=(0,o.ref)(),i=(0,o.computed)((()=>{var e;return null==(e=t.default)?void 0:e.call(t).some((e=>e.type!==o.Comment))})),a=(0,o.computed)((()=>({...e.options,element:r.value}))),l=R(u,[],a,n);return s({customMarker:l}),{customMarkerRef:r,customMarker:l,hasSlotContent:i}}}),Oe={key:0,class:"custom-marker-wrapper"};const Ne=S(Re,[["render",function(e,t,n,s,r,i){return e.hasSlotContent?((0,o.openBlock)(),(0,o.createElementBlock)("div",Oe,[(0,o.createElementVNode)("div",(0,o.mergeProps)({ref:"customMarkerRef",style:{cursor:e.$attrs.onClick?"pointer":void 0}},e.$attrs),[(0,o.renderSlot)(e.$slots,"default",{},void 0,!0)],16)])):(0,o.createCommentVNode)("",!0)}],["__scopeId","data-v-2d2d343a"]]),Pe=(0,o.defineComponent)({name:"HeatmapLayer",props:{options:{type:Object,default:()=>({})}},setup(e){const t=(0,o.ref)(),n=(0,o.inject)(i,(0,o.ref)()),s=(0,o.inject)(a,(0,o.ref)());return(0,o.watch)([n,()=>e.options],(([e,r],[i,a])=>{var l;const c=!j(r,a)||n.value!==i;if(n.value&&s.value&&c){const e=structuredClone(r);if(e.data&&!(e.data instanceof s.value.MVCArray)){const t=s.value.LatLng;e.data=null==(l=e.data)?void 0:l.map((e=>e instanceof t||"location"in e&&(e.location instanceof t||null===e.location)?e:"location"in e?{...e,location:new t(e.location)}:new t(e)))}t.value?t.value.setOptions(e):t.value=(0,o.markRaw)(new s.value.visualization.HeatmapLayer({...e,map:n.value}))}}),{immediate:!0}),(0,o.onBeforeUnmount)((()=>{t.value&&t.value.setMap(null)})),{heatmapLayer:t}},render:()=>null})}},t={};function n(o){var s=t[o];if(void 0!==s)return s.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,n),r.exports}n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{
/*!***********************************!*\
  !*** ./assets/js/indexAppPage.js ***!
  \***********************************/
n.r(o);n(/*! ../scss/main.scss */"./assets/scss/main.scss");var e=n(/*! vue */"./node_modules/vue/dist/vue.esm-browser.js"),t=n(/*! ./AppPage.vue */"./assets/js/AppPage.vue");(0,e.createApp)(t.default).mount("#appPage")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxDQUNBLENBUHVCLEdDQXhCazdGLEVBQW9CbnZFLEVBQUksQ0FBQ3JpQyxFQUFLNUssSUFBVXpHLE9BQU9pRyxVQUFVK2lCLGVBQWUxYixLQUFLK0QsRUFBSzVLLEdDQ2xGbzhHLEVBQW9CLzlFLEVBQUt6UyxJQUNILG9CQUFYOWdCLFFBQTBCQSxPQUFPeUMsYUFDMUNoVSxPQUFPQyxlQUFlb3lCLEVBQVM5Z0IsT0FBT3lDLFlBQWEsQ0FBRWpVLE1BQU8sV0FFN0RDLE9BQU9DLGVBQWVveUIsRUFBUyxhQUFjLENBQUV0eUIsT0FBTyxHQUFPLEU7Ozs7Z0xDQTlDbWlFLEVBQUFBLEVBQUFBLFdBQVVpaEQsRUFBQUEsU0FDbEIvdUUsTUFBTSxXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9hc3NldHMvanMvQXBwUGFnZS52dWU/MWI5MCIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL2Fzc2V0cy9qcy9jb21wb25lbnRzL0Zvb3Rlci52dWU/YWMwNSIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL2Fzc2V0cy9qcy9jb21wb25lbnRzL05hdmlnYXRpb25NZW51LnZ1ZT81ODkwIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vYXNzZXRzL2pzL3BhZ2VzL1NpbmdsZVBvc3RHb29nbGVNYXAudnVlPzEzNzQiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy9mZXRjaC5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21wb3NlU2lnbmFscy5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9udWxsLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZVByb3RvY29sLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3BlZWRvbWV0ZXIuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Rocm90dGxlLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90cmFja1N0cmVhbS5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9CbG9iLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvRm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2NvbW1vbi91dGlscy5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vYXNzZXRzL2pzL0FwcFBhZ2UudnVlIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vYXNzZXRzL2pzL2NvbXBvbmVudHMvRm9vdGVyLnZ1ZSIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL2Fzc2V0cy9qcy9jb21wb25lbnRzL05hdmlnYXRpb25NZW51LnZ1ZSIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL2Fzc2V0cy9qcy9wYWdlcy9TaW5nbGVQb3N0R29vZ2xlTWFwLnZ1ZSIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvZXhwb3J0SGVscGVyLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5lc20tYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy92dWUzLWdvb2dsZS1tYXAvZGlzdC9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vYXNzZXRzL2pzL2luZGV4QXBwUGFnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9BcHBQYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wNWVkYjBkOFwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FwcFBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FwcFBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcImFzc2V0cy9qcy9BcHBQYWdlLnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCIwNWVkYjBkOFwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzA1ZWRiMGQ4JywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnMDVlZGIwZDgnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0FwcFBhZ2UudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTA1ZWRiMGQ4XCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJzA1ZWRiMGQ4JywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9Gb290ZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWU0MTgxNTA4JnNjb3BlZD10cnVlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vRm9vdGVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9Gb290ZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IFwiLi9Gb290ZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZTQxODE1MDgmbGFuZz1zY3NzJnNjb3BlZD10cnVlXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19zY29wZUlkJyxcImRhdGEtdi1lNDE4MTUwOFwiXSxbJ19fZmlsZScsXCJhc3NldHMvanMvY29tcG9uZW50cy9Gb290ZXIudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcImU0MTgxNTA4XCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnZTQxODE1MDgnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBhcGkucmVsb2FkKCdlNDE4MTUwOCcsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vRm9vdGVyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1lNDE4MTUwOCZzY29wZWQ9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCdlNDE4MTUwOCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vTmF2aWdhdGlvbk1lbnUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTE4YTMxNDc0JnNjb3BlZD10cnVlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vTmF2aWdhdGlvbk1lbnUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL05hdmlnYXRpb25NZW51LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vTmF2aWdhdGlvbk1lbnUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MThhMzE0NzQmbGFuZz1zY3NzJnNjb3BlZD10cnVlXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19zY29wZUlkJyxcImRhdGEtdi0xOGEzMTQ3NFwiXSxbJ19fZmlsZScsXCJhc3NldHMvanMvY29tcG9uZW50cy9OYXZpZ2F0aW9uTWVudS52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiMThhMzE0NzRcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCcxOGEzMTQ3NCcsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzE4YTMxNDc0JywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9OYXZpZ2F0aW9uTWVudS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MThhMzE0NzQmc2NvcGVkPXRydWVcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignMThhMzE0NzQnLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL1NpbmdsZVBvc3RHb29nbGVNYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZiOTEyYzEwJnNjb3BlZD10cnVlXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vU2luZ2xlUG9zdEdvb2dsZU1hcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vU2luZ2xlUG9zdEdvb2dsZU1hcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL1NpbmdsZVBvc3RHb29nbGVNYXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NmI5MTJjMTAmbGFuZz1zY3NzJnNjb3BlZD10cnVlXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19zY29wZUlkJyxcImRhdGEtdi02YjkxMmMxMFwiXSxbJ19fZmlsZScsXCJhc3NldHMvanMvcGFnZXMvU2luZ2xlUG9zdEdvb2dsZU1hcC52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiNmI5MTJjMTBcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCc2YjkxMmMxMCcsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzZiOTEyYzEwJywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9TaW5nbGVQb3N0R29vZ2xlTWFwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02YjkxMmMxMCZzY29wZWQ9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCc2YjkxMmMxMCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IGZldGNoQWRhcHRlciBmcm9tICcuL2ZldGNoLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcblxuY29uc3Qga25vd25BZGFwdGVycyA9IHtcbiAgaHR0cDogaHR0cEFkYXB0ZXIsXG4gIHhocjogeGhyQWRhcHRlcixcbiAgZmV0Y2g6IGZldGNoQWRhcHRlclxufVxuXG51dGlscy5mb3JFYWNoKGtub3duQWRhcHRlcnMsIChmbiwgdmFsdWUpID0+IHtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ25hbWUnLCB7dmFsdWV9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnYWRhcHRlck5hbWUnLCB7dmFsdWV9KTtcbiAgfVxufSk7XG5cbmNvbnN0IHJlbmRlclJlYXNvbiA9IChyZWFzb24pID0+IGAtICR7cmVhc29ufWA7XG5cbmNvbnN0IGlzUmVzb2x2ZWRIYW5kbGUgPSAoYWRhcHRlcikgPT4gdXRpbHMuaXNGdW5jdGlvbihhZGFwdGVyKSB8fCBhZGFwdGVyID09PSBudWxsIHx8IGFkYXB0ZXIgPT09IGZhbHNlO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldEFkYXB0ZXI6IChhZGFwdGVycykgPT4ge1xuICAgIGFkYXB0ZXJzID0gdXRpbHMuaXNBcnJheShhZGFwdGVycykgPyBhZGFwdGVycyA6IFthZGFwdGVyc107XG5cbiAgICBjb25zdCB7bGVuZ3RofSA9IGFkYXB0ZXJzO1xuICAgIGxldCBuYW1lT3JBZGFwdGVyO1xuICAgIGxldCBhZGFwdGVyO1xuXG4gICAgY29uc3QgcmVqZWN0ZWRSZWFzb25zID0ge307XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBuYW1lT3JBZGFwdGVyID0gYWRhcHRlcnNbaV07XG4gICAgICBsZXQgaWQ7XG5cbiAgICAgIGFkYXB0ZXIgPSBuYW1lT3JBZGFwdGVyO1xuXG4gICAgICBpZiAoIWlzUmVzb2x2ZWRIYW5kbGUobmFtZU9yQWRhcHRlcikpIHtcbiAgICAgICAgYWRhcHRlciA9IGtub3duQWRhcHRlcnNbKGlkID0gU3RyaW5nKG5hbWVPckFkYXB0ZXIpKS50b0xvd2VyQ2FzZSgpXTtcblxuICAgICAgICBpZiAoYWRhcHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFVua25vd24gYWRhcHRlciAnJHtpZH0nYCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFkYXB0ZXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJlamVjdGVkUmVhc29uc1tpZCB8fCAnIycgKyBpXSA9IGFkYXB0ZXI7XG4gICAgfVxuXG4gICAgaWYgKCFhZGFwdGVyKSB7XG5cbiAgICAgIGNvbnN0IHJlYXNvbnMgPSBPYmplY3QuZW50cmllcyhyZWplY3RlZFJlYXNvbnMpXG4gICAgICAgIC5tYXAoKFtpZCwgc3RhdGVdKSA9PiBgYWRhcHRlciAke2lkfSBgICtcbiAgICAgICAgICAoc3RhdGUgPT09IGZhbHNlID8gJ2lzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGVudmlyb25tZW50JyA6ICdpcyBub3QgYXZhaWxhYmxlIGluIHRoZSBidWlsZCcpXG4gICAgICAgICk7XG5cbiAgICAgIGxldCBzID0gbGVuZ3RoID9cbiAgICAgICAgKHJlYXNvbnMubGVuZ3RoID4gMSA/ICdzaW5jZSA6XFxuJyArIHJlYXNvbnMubWFwKHJlbmRlclJlYXNvbikuam9pbignXFxuJykgOiAnICcgKyByZW5kZXJSZWFzb24ocmVhc29uc1swXSkpIDpcbiAgICAgICAgJ2FzIG5vIGFkYXB0ZXIgc3BlY2lmaWVkJztcblxuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGBUaGVyZSBpcyBubyBzdWl0YWJsZSBhZGFwdGVyIHRvIGRpc3BhdGNoIHRoZSByZXF1ZXN0IGAgKyBzLFxuICAgICAgICAnRVJSX05PVF9TVVBQT1JUJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRhcHRlcjtcbiAgfSxcbiAgYWRhcHRlcnM6IGtub3duQWRhcHRlcnNcbn1cbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcbmltcG9ydCBjb21wb3NlU2lnbmFscyBmcm9tIFwiLi4vaGVscGVycy9jb21wb3NlU2lnbmFscy5qc1wiO1xuaW1wb3J0IHt0cmFja1N0cmVhbX0gZnJvbSBcIi4uL2hlbHBlcnMvdHJhY2tTdHJlYW0uanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQge3Byb2dyZXNzRXZlbnRSZWR1Y2VyLCBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yLCBhc3luY0RlY29yYXRvcn0gZnJvbSBcIi4uL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanNcIjtcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcbmltcG9ydCBzZXR0bGUgZnJvbSBcIi4uL2NvcmUvc2V0dGxlLmpzXCI7XG5cbmNvbnN0IGlzRmV0Y2hTdXBwb3J0ZWQgPSB0eXBlb2YgZmV0Y2ggPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFJlcXVlc3QgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFJlc3BvbnNlID09PSAnZnVuY3Rpb24nO1xuY29uc3QgaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCA9IGlzRmV0Y2hTdXBwb3J0ZWQgJiYgdHlwZW9mIFJlYWRhYmxlU3RyZWFtID09PSAnZnVuY3Rpb24nO1xuXG4vLyB1c2VkIG9ubHkgaW5zaWRlIHRoZSBmZXRjaCBhZGFwdGVyXG5jb25zdCBlbmNvZGVUZXh0ID0gaXNGZXRjaFN1cHBvcnRlZCAmJiAodHlwZW9mIFRleHRFbmNvZGVyID09PSAnZnVuY3Rpb24nID9cbiAgICAoKGVuY29kZXIpID0+IChzdHIpID0+IGVuY29kZXIuZW5jb2RlKHN0cikpKG5ldyBUZXh0RW5jb2RlcigpKSA6XG4gICAgYXN5bmMgKHN0cikgPT4gbmV3IFVpbnQ4QXJyYXkoYXdhaXQgbmV3IFJlc3BvbnNlKHN0cikuYXJyYXlCdWZmZXIoKSlcbik7XG5cbmNvbnN0IHRlc3QgPSAoZm4sIC4uLmFyZ3MpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFmbiguLi5hcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmNvbnN0IHN1cHBvcnRzUmVxdWVzdFN0cmVhbSA9IGlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQgJiYgdGVzdCgoKSA9PiB7XG4gIGxldCBkdXBsZXhBY2Nlc3NlZCA9IGZhbHNlO1xuXG4gIGNvbnN0IGhhc0NvbnRlbnRUeXBlID0gbmV3IFJlcXVlc3QocGxhdGZvcm0ub3JpZ2luLCB7XG4gICAgYm9keTogbmV3IFJlYWRhYmxlU3RyZWFtKCksXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgZ2V0IGR1cGxleCgpIHtcbiAgICAgIGR1cGxleEFjY2Vzc2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiAnaGFsZic7XG4gICAgfSxcbiAgfSkuaGVhZGVycy5oYXMoJ0NvbnRlbnQtVHlwZScpO1xuXG4gIHJldHVybiBkdXBsZXhBY2Nlc3NlZCAmJiAhaGFzQ29udGVudFR5cGU7XG59KTtcblxuY29uc3QgREVGQVVMVF9DSFVOS19TSVpFID0gNjQgKiAxMDI0O1xuXG5jb25zdCBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtID0gaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCAmJlxuICB0ZXN0KCgpID0+IHV0aWxzLmlzUmVhZGFibGVTdHJlYW0obmV3IFJlc3BvbnNlKCcnKS5ib2R5KSk7XG5cblxuY29uc3QgcmVzb2x2ZXJzID0ge1xuICBzdHJlYW06IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gJiYgKChyZXMpID0+IHJlcy5ib2R5KVxufTtcblxuaXNGZXRjaFN1cHBvcnRlZCAmJiAoKChyZXMpID0+IHtcbiAgWyd0ZXh0JywgJ2FycmF5QnVmZmVyJywgJ2Jsb2InLCAnZm9ybURhdGEnLCAnc3RyZWFtJ10uZm9yRWFjaCh0eXBlID0+IHtcbiAgICAhcmVzb2x2ZXJzW3R5cGVdICYmIChyZXNvbHZlcnNbdHlwZV0gPSB1dGlscy5pc0Z1bmN0aW9uKHJlc1t0eXBlXSkgPyAocmVzKSA9PiByZXNbdHlwZV0oKSA6XG4gICAgICAoXywgY29uZmlnKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKGBSZXNwb25zZSB0eXBlICcke3R5cGV9JyBpcyBub3Qgc3VwcG9ydGVkYCwgQXhpb3NFcnJvci5FUlJfTk9UX1NVUFBPUlQsIGNvbmZpZyk7XG4gICAgICB9KVxuICB9KTtcbn0pKG5ldyBSZXNwb25zZSkpO1xuXG5jb25zdCBnZXRCb2R5TGVuZ3RoID0gYXN5bmMgKGJvZHkpID0+IHtcbiAgaWYgKGJvZHkgPT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYodXRpbHMuaXNCbG9iKGJvZHkpKSB7XG4gICAgcmV0dXJuIGJvZHkuc2l6ZTtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oYm9keSkpIHtcbiAgICBjb25zdCBfcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHBsYXRmb3JtLm9yaWdpbiwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5LFxuICAgIH0pO1xuICAgIHJldHVybiAoYXdhaXQgX3JlcXVlc3QuYXJyYXlCdWZmZXIoKSkuYnl0ZUxlbmd0aDtcbiAgfVxuXG4gIGlmKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpIHx8IHV0aWxzLmlzQXJyYXlCdWZmZXIoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgaWYodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoYm9keSkpIHtcbiAgICBib2R5ID0gYm9keSArICcnO1xuICB9XG5cbiAgaWYodXRpbHMuaXNTdHJpbmcoYm9keSkpIHtcbiAgICByZXR1cm4gKGF3YWl0IGVuY29kZVRleHQoYm9keSkpLmJ5dGVMZW5ndGg7XG4gIH1cbn1cblxuY29uc3QgcmVzb2x2ZUJvZHlMZW5ndGggPSBhc3luYyAoaGVhZGVycywgYm9keSkgPT4ge1xuICBjb25zdCBsZW5ndGggPSB1dGlscy50b0Zpbml0ZU51bWJlcihoZWFkZXJzLmdldENvbnRlbnRMZW5ndGgoKSk7XG5cbiAgcmV0dXJuIGxlbmd0aCA9PSBudWxsID8gZ2V0Qm9keUxlbmd0aChib2R5KSA6IGxlbmd0aDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNGZXRjaFN1cHBvcnRlZCAmJiAoYXN5bmMgKGNvbmZpZykgPT4ge1xuICBsZXQge1xuICAgIHVybCxcbiAgICBtZXRob2QsXG4gICAgZGF0YSxcbiAgICBzaWduYWwsXG4gICAgY2FuY2VsVG9rZW4sXG4gICAgdGltZW91dCxcbiAgICBvbkRvd25sb2FkUHJvZ3Jlc3MsXG4gICAgb25VcGxvYWRQcm9ncmVzcyxcbiAgICByZXNwb25zZVR5cGUsXG4gICAgaGVhZGVycyxcbiAgICB3aXRoQ3JlZGVudGlhbHMgPSAnc2FtZS1vcmlnaW4nLFxuICAgIGZldGNoT3B0aW9uc1xuICB9ID0gcmVzb2x2ZUNvbmZpZyhjb25maWcpO1xuXG4gIHJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZSA/IChyZXNwb25zZVR5cGUgKyAnJykudG9Mb3dlckNhc2UoKSA6ICd0ZXh0JztcblxuICBsZXQgY29tcG9zZWRTaWduYWwgPSBjb21wb3NlU2lnbmFscyhbc2lnbmFsLCBjYW5jZWxUb2tlbiAmJiBjYW5jZWxUb2tlbi50b0Fib3J0U2lnbmFsKCldLCB0aW1lb3V0KTtcblxuICBsZXQgcmVxdWVzdDtcblxuICBjb25zdCB1bnN1YnNjcmliZSA9IGNvbXBvc2VkU2lnbmFsICYmIGNvbXBvc2VkU2lnbmFsLnVuc3Vic2NyaWJlICYmICgoKSA9PiB7XG4gICAgICBjb21wb3NlZFNpZ25hbC51bnN1YnNjcmliZSgpO1xuICB9KTtcblxuICBsZXQgcmVxdWVzdENvbnRlbnRMZW5ndGg7XG5cbiAgdHJ5IHtcbiAgICBpZiAoXG4gICAgICBvblVwbG9hZFByb2dyZXNzICYmIHN1cHBvcnRzUmVxdWVzdFN0cmVhbSAmJiBtZXRob2QgIT09ICdnZXQnICYmIG1ldGhvZCAhPT0gJ2hlYWQnICYmXG4gICAgICAocmVxdWVzdENvbnRlbnRMZW5ndGggPSBhd2FpdCByZXNvbHZlQm9keUxlbmd0aChoZWFkZXJzLCBkYXRhKSkgIT09IDBcbiAgICApIHtcbiAgICAgIGxldCBfcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZGF0YSxcbiAgICAgICAgZHVwbGV4OiBcImhhbGZcIlxuICAgICAgfSk7XG5cbiAgICAgIGxldCBjb250ZW50VHlwZUhlYWRlcjtcblxuICAgICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgJiYgKGNvbnRlbnRUeXBlSGVhZGVyID0gX3JlcXVlc3QuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSkge1xuICAgICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKGNvbnRlbnRUeXBlSGVhZGVyKVxuICAgICAgfVxuXG4gICAgICBpZiAoX3JlcXVlc3QuYm9keSkge1xuICAgICAgICBjb25zdCBbb25Qcm9ncmVzcywgZmx1c2hdID0gcHJvZ3Jlc3NFdmVudERlY29yYXRvcihcbiAgICAgICAgICByZXF1ZXN0Q29udGVudExlbmd0aCxcbiAgICAgICAgICBwcm9ncmVzc0V2ZW50UmVkdWNlcihhc3luY0RlY29yYXRvcihvblVwbG9hZFByb2dyZXNzKSlcbiAgICAgICAgKTtcblxuICAgICAgICBkYXRhID0gdHJhY2tTdHJlYW0oX3JlcXVlc3QuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBvblByb2dyZXNzLCBmbHVzaCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF1dGlscy5pc1N0cmluZyh3aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICB3aXRoQ3JlZGVudGlhbHMgPSB3aXRoQ3JlZGVudGlhbHMgPyAnaW5jbHVkZScgOiAnb21pdCc7XG4gICAgfVxuXG4gICAgLy8gQ2xvdWRmbGFyZSBXb3JrZXJzIHRocm93cyB3aGVuIGNyZWRlbnRpYWxzIGFyZSBkZWZpbmVkXG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGZsYXJlL3dvcmtlcmQvaXNzdWVzLzkwMlxuICAgIGNvbnN0IGlzQ3JlZGVudGlhbHNTdXBwb3J0ZWQgPSBcImNyZWRlbnRpYWxzXCIgaW4gUmVxdWVzdC5wcm90b3R5cGU7XG4gICAgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHVybCwge1xuICAgICAgLi4uZmV0Y2hPcHRpb25zLFxuICAgICAgc2lnbmFsOiBjb21wb3NlZFNpZ25hbCxcbiAgICAgIG1ldGhvZDogbWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzLm5vcm1hbGl6ZSgpLnRvSlNPTigpLFxuICAgICAgYm9keTogZGF0YSxcbiAgICAgIGR1cGxleDogXCJoYWxmXCIsXG4gICAgICBjcmVkZW50aWFsczogaXNDcmVkZW50aWFsc1N1cHBvcnRlZCA/IHdpdGhDcmVkZW50aWFscyA6IHVuZGVmaW5lZFxuICAgIH0pO1xuXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocmVxdWVzdCk7XG5cbiAgICBjb25zdCBpc1N0cmVhbVJlc3BvbnNlID0gc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAocmVzcG9uc2VUeXBlID09PSAnc3RyZWFtJyB8fCByZXNwb25zZVR5cGUgPT09ICdyZXNwb25zZScpO1xuXG4gICAgaWYgKHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gJiYgKG9uRG93bmxvYWRQcm9ncmVzcyB8fCAoaXNTdHJlYW1SZXNwb25zZSAmJiB1bnN1YnNjcmliZSkpKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0ge307XG5cbiAgICAgIFsnc3RhdHVzJywgJ3N0YXR1c1RleHQnLCAnaGVhZGVycyddLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICAgIG9wdGlvbnNbcHJvcF0gPSByZXNwb25zZVtwcm9wXTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZUNvbnRlbnRMZW5ndGggPSB1dGlscy50b0Zpbml0ZU51bWJlcihyZXNwb25zZS5oZWFkZXJzLmdldCgnY29udGVudC1sZW5ndGgnKSk7XG5cbiAgICAgIGNvbnN0IFtvblByb2dyZXNzLCBmbHVzaF0gPSBvbkRvd25sb2FkUHJvZ3Jlc3MgJiYgcHJvZ3Jlc3NFdmVudERlY29yYXRvcihcbiAgICAgICAgcmVzcG9uc2VDb250ZW50TGVuZ3RoLFxuICAgICAgICBwcm9ncmVzc0V2ZW50UmVkdWNlcihhc3luY0RlY29yYXRvcihvbkRvd25sb2FkUHJvZ3Jlc3MpLCB0cnVlKVxuICAgICAgKSB8fCBbXTtcblxuICAgICAgcmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoXG4gICAgICAgIHRyYWNrU3RyZWFtKHJlc3BvbnNlLmJvZHksIERFRkFVTFRfQ0hVTktfU0laRSwgb25Qcm9ncmVzcywgKCkgPT4ge1xuICAgICAgICAgIGZsdXNoICYmIGZsdXNoKCk7XG4gICAgICAgICAgdW5zdWJzY3JpYmUgJiYgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfSksXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlIHx8ICd0ZXh0JztcblxuICAgIGxldCByZXNwb25zZURhdGEgPSBhd2FpdCByZXNvbHZlcnNbdXRpbHMuZmluZEtleShyZXNvbHZlcnMsIHJlc3BvbnNlVHlwZSkgfHwgJ3RleHQnXShyZXNwb25zZSwgY29uZmlnKTtcblxuICAgICFpc1N0cmVhbVJlc3BvbnNlICYmIHVuc3Vic2NyaWJlICYmIHVuc3Vic2NyaWJlKCk7XG5cbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIGhlYWRlcnM6IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpLFxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9KVxuICAgIH0pXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHVuc3Vic2NyaWJlICYmIHVuc3Vic2NyaWJlKCk7XG5cbiAgICBpZiAoZXJyICYmIGVyci5uYW1lID09PSAnVHlwZUVycm9yJyAmJiAvZmV0Y2gvaS50ZXN0KGVyci5tZXNzYWdlKSkge1xuICAgICAgdGhyb3cgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgbmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpLFxuICAgICAgICB7XG4gICAgICAgICAgY2F1c2U6IGVyci5jYXVzZSB8fCBlcnJcbiAgICAgICAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlcnIsIGVyciAmJiBlcnIuY29kZSwgY29uZmlnLCByZXF1ZXN0KTtcbiAgfVxufSk7XG5cblxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHNldHRsZSBmcm9tICcuLy4uL2NvcmUvc2V0dGxlLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBwYXJzZVByb3RvY29sIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQge3Byb2dyZXNzRXZlbnRSZWR1Y2VyfSBmcm9tICcuLi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzJztcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcblxuY29uc3QgaXNYSFJBZGFwdGVyU3VwcG9ydGVkID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJztcblxuZXhwb3J0IGRlZmF1bHQgaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBfY29uZmlnID0gcmVzb2x2ZUNvbmZpZyhjb25maWcpO1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IF9jb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKF9jb25maWcuaGVhZGVycykubm9ybWFsaXplKCk7XG4gICAgbGV0IHtyZXNwb25zZVR5cGUsIG9uVXBsb2FkUHJvZ3Jlc3MsIG9uRG93bmxvYWRQcm9ncmVzc30gPSBfY29uZmlnO1xuICAgIGxldCBvbkNhbmNlbGVkO1xuICAgIGxldCB1cGxvYWRUaHJvdHRsZWQsIGRvd25sb2FkVGhyb3R0bGVkO1xuICAgIGxldCBmbHVzaFVwbG9hZCwgZmx1c2hEb3dubG9hZDtcblxuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBmbHVzaFVwbG9hZCAmJiBmbHVzaFVwbG9hZCgpOyAvLyBmbHVzaCBldmVudHNcbiAgICAgIGZsdXNoRG93bmxvYWQgJiYgZmx1c2hEb3dubG9hZCgpOyAvLyBmbHVzaCBldmVudHNcblxuICAgICAgX2NvbmZpZy5jYW5jZWxUb2tlbiAmJiBfY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuXG4gICAgICBfY29uZmlnLnNpZ25hbCAmJiBfY29uZmlnLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgIH1cblxuICAgIGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oX2NvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgX2NvbmZpZy51cmwsIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBfY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKFxuICAgICAgICAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ICYmIHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICk7XG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCwgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIGxldCB0aW1lb3V0RXJyb3JNZXNzYWdlID0gX2NvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIF9jb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBfY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChfY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IF9jb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICByZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkICYmIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKG51bGwpO1xuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMudG9KU09OKCksIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKF9jb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIV9jb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IF9jb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAob25Eb3dubG9hZFByb2dyZXNzKSB7XG4gICAgICAoW2Rvd25sb2FkVGhyb3R0bGVkLCBmbHVzaERvd25sb2FkXSA9IHByb2dyZXNzRXZlbnRSZWR1Y2VyKG9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGRvd25sb2FkVGhyb3R0bGVkKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmIChvblVwbG9hZFByb2dyZXNzICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICAoW3VwbG9hZFRocm90dGxlZCwgZmx1c2hVcGxvYWRdID0gcHJvZ3Jlc3NFdmVudFJlZHVjZXIob25VcGxvYWRQcm9ncmVzcykpO1xuXG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHVwbG9hZFRocm90dGxlZCk7XG5cbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlbmQnLCBmbHVzaFVwbG9hZCk7XG4gICAgfVxuXG4gICAgaWYgKF9jb25maWcuY2FuY2VsVG9rZW4gfHwgX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gY2FuY2VsID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IGNhbmNlbC50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXF1ZXN0KSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBfY29uZmlnLmNhbmNlbFRva2VuICYmIF9jb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAgIF9jb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBfY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChfY29uZmlnLnVybCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5pbXBvcnQgQXhpb3MgZnJvbSAnLi9jb3JlL0F4aW9zLmpzJztcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tICcuL2NvcmUvbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBDYW5jZWxUb2tlbiBmcm9tICcuL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyc7XG5pbXBvcnQgaXNDYW5jZWwgZnJvbSAnLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuL2Vudi9kYXRhLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBzcHJlYWQgZnJvbSAnLi9oZWxwZXJzL3NwcmVhZC5qcyc7XG5pbXBvcnQgaXNBeGlvc0Vycm9yIGZyb20gJy4vaGVscGVycy9pc0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9jb3JlL0F4aW9zSGVhZGVycy5qc1wiO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gJy4vYWRhcHRlcnMvYWRhcHRlcnMuanMnO1xuaW1wb3J0IEh0dHBTdGF0dXNDb2RlIGZyb20gJy4vaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJucyB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgY29uc3QgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgY29uc3QgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0LCBudWxsLCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbmNvbnN0IGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsZWRFcnJvciA9IENhbmNlbGVkRXJyb3I7XG5heGlvcy5DYW5jZWxUb2tlbiA9IENhbmNlbFRva2VuO1xuYXhpb3MuaXNDYW5jZWwgPSBpc0NhbmNlbDtcbmF4aW9zLlZFUlNJT04gPSBWRVJTSU9OO1xuYXhpb3MudG9Gb3JtRGF0YSA9IHRvRm9ybURhdGE7XG5cbi8vIEV4cG9zZSBBeGlvc0Vycm9yIGNsYXNzXG5heGlvcy5BeGlvc0Vycm9yID0gQXhpb3NFcnJvcjtcblxuLy8gYWxpYXMgZm9yIENhbmNlbGVkRXJyb3IgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmF4aW9zLkNhbmNlbCA9IGF4aW9zLkNhbmNlbGVkRXJyb3I7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5cbmF4aW9zLnNwcmVhZCA9IHNwcmVhZDtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gaXNBeGlvc0Vycm9yO1xuXG4vLyBFeHBvc2UgbWVyZ2VDb25maWdcbmF4aW9zLm1lcmdlQ29uZmlnID0gbWVyZ2VDb25maWc7XG5cbmF4aW9zLkF4aW9zSGVhZGVycyA9IEF4aW9zSGVhZGVycztcblxuYXhpb3MuZm9ybVRvSlNPTiA9IHRoaW5nID0+IGZvcm1EYXRhVG9KU09OKHV0aWxzLmlzSFRNTEZvcm0odGhpbmcpID8gbmV3IEZvcm1EYXRhKHRoaW5nKSA6IHRoaW5nKTtcblxuYXhpb3MuZ2V0QWRhcHRlciA9IGFkYXB0ZXJzLmdldEFkYXB0ZXI7XG5cbmF4aW9zLkh0dHBTdGF0dXNDb2RlID0gSHR0cFN0YXR1c0NvZGU7XG5cbmF4aW9zLmRlZmF1bHQgPSBheGlvcztcblxuLy8gdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgaGF2ZSBhIGRlZmF1bHQgZXhwb3J0XG5leHBvcnQgZGVmYXVsdCBheGlvc1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL0NhbmNlbGVkRXJyb3IuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxUb2tlbn1cbiAqL1xuY2xhc3MgQ2FuY2VsVG9rZW4ge1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuICAgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzb2x2ZVByb21pc2U7XG5cbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdG9rZW4gPSB0aGlzO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbihjYW5jZWwgPT4ge1xuICAgICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICAgIGxldCBpID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICAgIH1cbiAgICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbiA9IG9uZnVsZmlsbGVkID0+IHtcbiAgICAgIGxldCBfcmVzb2x2ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAgICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpO1xuICAgICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAgICovXG4gIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIHRvQWJvcnRTaWduYWwoKSB7XG4gICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcblxuICAgIGNvbnN0IGFib3J0ID0gKGVycikgPT4ge1xuICAgICAgY29udHJvbGxlci5hYm9ydChlcnIpO1xuICAgIH07XG5cbiAgICB0aGlzLnN1YnNjcmliZShhYm9ydCk7XG5cbiAgICBjb250cm9sbGVyLnNpZ25hbC51bnN1YnNjcmliZSA9ICgpID0+IHRoaXMudW5zdWJzY3JpYmUoYWJvcnQpO1xuXG4gICAgcmV0dXJuIGNvbnRyb2xsZXIuc2lnbmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAgICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAgICovXG4gIHN0YXRpYyBzb3VyY2UoKSB7XG4gICAgbGV0IGNhbmNlbDtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgICBjYW5jZWwgPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbixcbiAgICAgIGNhbmNlbFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsVG9rZW47XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbGVkRXJyb3JgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3Q9fSByZXF1ZXN0IFRoZSByZXF1ZXN0LlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxlZEVycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQsIGNvbmZpZywgcmVxdWVzdCk7XG4gIHRoaXMubmFtZSA9ICdDYW5jZWxlZEVycm9yJztcbn1cblxudXRpbHMuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsZWRFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgSW50ZXJjZXB0b3JNYW5hZ2VyIGZyb20gJy4vSW50ZXJjZXB0b3JNYW5hZ2VyLmpzJztcbmltcG9ydCBkaXNwYXRjaFJlcXVlc3QgZnJvbSAnLi9kaXNwYXRjaFJlcXVlc3QuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSAnLi9idWlsZEZ1bGxQYXRoLmpzJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAnLi4vaGVscGVycy92YWxpZGF0b3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuL0F4aW9zSGVhZGVycy5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGxldCBkdW1teSA9IHt9O1xuXG4gICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID8gRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZHVtbXkpIDogKGR1bW15ID0gbmV3IEVycm9yKCkpO1xuXG4gICAgICAgIC8vIHNsaWNlIG9mZiB0aGUgRXJyb3I6IC4uLiBsaW5lXG4gICAgICAgIGNvbnN0IHN0YWNrID0gZHVtbXkuc3RhY2sgPyBkdW1teS5zdGFjay5yZXBsYWNlKC9eLitcXG4vLCAnJykgOiAnJztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIWVyci5zdGFjaykge1xuICAgICAgICAgICAgZXJyLnN0YWNrID0gc3RhY2s7XG4gICAgICAgICAgICAvLyBtYXRjaCB3aXRob3V0IHRoZSAyIHRvcCBzdGFjayBsaW5lc1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhY2sgJiYgIVN0cmluZyhlcnIuc3RhY2spLmVuZHNXaXRoKHN0YWNrLnJlcGxhY2UoL14uK1xcbi4rXFxuLywgJycpKSkge1xuICAgICAgICAgICAgZXJyLnN0YWNrICs9ICdcXG4nICsgc3RhY2tcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpZ25vcmUgdGhlIGNhc2Ugd2hlcmUgXCJzdGFja1wiIGlzIGFuIHVuLXdyaXRhYmxlIHByb3BlcnR5XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIF9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXIsIGhlYWRlcnN9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHBhcmFtc1NlcmlhbGl6ZXIsIHtcbiAgICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCBjb25maWcuYWxsb3dBYnNvbHV0ZVVybHNcbiAgICBpZiAoY29uZmlnLmFsbG93QWJzb2x1dGVVcmxzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMuYWxsb3dBYnNvbHV0ZVVybHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uZmlnLmFsbG93QWJzb2x1dGVVcmxzID0gdGhpcy5kZWZhdWx0cy5hbGxvd0Fic29sdXRlVXJscztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnLmFsbG93QWJzb2x1dGVVcmxzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhjb25maWcsIHtcbiAgICAgIGJhc2VVcmw6IHZhbGlkYXRvcnMuc3BlbGxpbmcoJ2Jhc2VVUkwnKSxcbiAgICAgIHdpdGhYc3JmVG9rZW46IHZhbGlkYXRvcnMuc3BlbGxpbmcoJ3dpdGhYU1JGVG9rZW4nKVxuICAgIH0sIHRydWUpO1xuXG4gICAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgICBjb25maWcubWV0aG9kID0gKGNvbmZpZy5tZXRob2QgfHwgdGhpcy5kZWZhdWx0cy5tZXRob2QgfHwgJ2dldCcpLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgICBsZXQgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzLm1lcmdlKFxuICAgICAgaGVhZGVycy5jb21tb24sXG4gICAgICBoZWFkZXJzW2NvbmZpZy5tZXRob2RdXG4gICAgKTtcblxuICAgIGhlYWRlcnMgJiYgdXRpbHMuZm9yRWFjaChcbiAgICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgICAgKG1ldGhvZCkgPT4ge1xuICAgICAgICBkZWxldGUgaGVhZGVyc1ttZXRob2RdO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5jb25jYXQoY29udGV4dEhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICAgIGNvbnN0IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgbGV0IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgICB9KTtcblxuICAgIGxldCBwcm9taXNlO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgbGVuO1xuXG4gICAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICAgIGNvbnN0IGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdC5iaW5kKHRoaXMpLCB1bmRlZmluZWRdO1xuICAgICAgY2hhaW4udW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgY2hhaW4ucHVzaC5hcHBseShjaGFpbiwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGxlbiA9IGNoYWluLmxlbmd0aDtcblxuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluW2krK10sIGNoYWluW2krK10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG5cbiAgICBsZW4gPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICBsZXQgbmV3Q29uZmlnID0gY29uZmlnO1xuXG4gICAgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgY29uc3Qgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgY29uc3Qgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICB0cnkge1xuICAgICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgb25SZWplY3RlZC5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QuY2FsbCh0aGlzLCBuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIGkgPSAwO1xuICAgIGxlbiA9IHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VXJpKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsLCBjb25maWcuYWxsb3dBYnNvbHV0ZVVybHMpO1xuICAgIHJldHVybiBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuICB9XG59XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlSFRUUE1ldGhvZChpc0Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaHR0cE1ldGhvZCh1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBoZWFkZXJzOiBpc0Zvcm0gPyB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICB9IDoge30sXG4gICAgICAgIHVybCxcbiAgICAgICAgZGF0YVxuICAgICAgfSkpO1xuICAgIH07XG4gIH1cblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCgpO1xuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2QgKyAnRm9ybSddID0gZ2VuZXJhdGVIVFRQTWV0aG9kKHRydWUpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIGlmIChyZXNwb25zZSkge1xuICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB0aGlzLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cyA/IHJlc3BvbnNlLnN0YXR1cyA6IG51bGw7XG4gIH1cbn1cblxudXRpbHMuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdXRpbHMudG9KU09OT2JqZWN0KHRoaXMuY29uZmlnKSxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXNcbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG5jb25zdCBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJyxcbiAgJ0VSUl9OT1RfU1VQUE9SVCcsXG4gICdFUlJfSU5WQUxJRF9VUkwnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGNvZGUgPT4ge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykgPT4ge1xuICBjb25zdCBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSwgcHJvcCA9PiB7XG4gICAgcmV0dXJuIHByb3AgIT09ICdpc0F4aW9zRXJyb3InO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0Vycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBhcnNlSGVhZGVycyBmcm9tICcuLi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyc7XG5cbmNvbnN0ICRpbnRlcm5hbHMgPSBTeW1ib2woJ2ludGVybmFscycpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIgJiYgU3RyaW5nKGhlYWRlcikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgICB2YWx1ZSA9IGhlYWRlcjtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0hlYWRlcnMoaGVhZGVyKSkge1xuICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgaGVhZGVyLmVudHJpZXMoKSkge1xuICAgICAgICBzZXRIZWFkZXIodmFsdWUsIGtleSwgcmV3cml0ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG4vLyByZXNlcnZlZCBuYW1lcyBob3RmaXhcbnV0aWxzLnJlZHVjZURlc2NyaXB0b3JzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUsICh7dmFsdWV9LCBrZXkpID0+IHtcbiAgbGV0IG1hcHBlZCA9IGtleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpOyAvLyBtYXAgYHNldGAgPT4gYFNldGBcbiAgcmV0dXJuIHtcbiAgICBnZXQ6ICgpID0+IHZhbHVlLFxuICAgIHNldChoZWFkZXJWYWx1ZSkge1xuICAgICAgdGhpc1ttYXBwZWRdID0gaGVhZGVyVmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuY2xhc3MgSW50ZXJjZXB0b3JNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gICAqL1xuICB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICAgIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgICBmdWxmaWxsZWQsXG4gICAgICByZWplY3RlZCxcbiAgICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGludGVyY2VwdG9yIHdhcyByZW1vdmVkLCBgZmFsc2VgIG90aGVyd2lzZVxuICAgKi9cbiAgZWplY3QoaWQpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIGludGVyY2VwdG9ycyBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gICAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZvckVhY2goZm4pIHtcbiAgICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICAgIGZuKGgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGlzQWJzb2x1dGVVUkwgZnJvbSAnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMLmpzJztcbmltcG9ydCBjb21iaW5lVVJMcyBmcm9tICcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMLCBhbGxvd0Fic29sdXRlVXJscykge1xuICBsZXQgaXNSZWxhdGl2ZVVybCA9ICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCk7XG4gIGlmIChiYXNlVVJMICYmIChpc1JlbGF0aXZlVXJsIHx8IGFsbG93QWJzb2x1dGVVcmxzID09IGZhbHNlKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0cmFuc2Zvcm1EYXRhIGZyb20gJy4vdHJhbnNmb3JtRGF0YS5qcyc7XG5pbXBvcnQgaXNDYW5jZWwgZnJvbSAnLi4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBhZGFwdGVycyBmcm9tIFwiLi4vYWRhcHRlcnMvYWRhcHRlcnMuanNcIjtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbmZpZy5oZWFkZXJzKTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIGlmIChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10uaW5kZXhPZihjb25maWcubWV0aG9kKSAhPT0gLTEpIHtcbiAgICBjb25maWcuaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywgZmFsc2UpO1xuICB9XG5cbiAgY29uc3QgYWRhcHRlciA9IGFkYXB0ZXJzLmdldEFkYXB0ZXIoY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcik7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICByZXNwb25zZVxuICAgICk7XG5cbiAgICByZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVzcG9uc2UuaGVhZGVycyk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20ocmVhc29uLnJlc3BvbnNlLmhlYWRlcnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vQXhpb3NIZWFkZXJzLmpzXCI7XG5cbmNvbnN0IGhlYWRlcnNUb09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgaW5zdGFuY2VvZiBBeGlvc0hlYWRlcnMgPyB7IC4uLnRoaW5nIH0gOiB0aGluZztcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgY29uc3QgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UsIHByb3AsIGNhc2VsZXNzKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZS5jYWxsKHtjYXNlbGVzc30sIHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhhLCBiLCBwcm9wICwgY2FzZWxlc3MpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgcHJvcCAsIGNhc2VsZXNzKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSwgcHJvcCAsIGNhc2VsZXNzKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKGEsIGIsIHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1lcmdlTWFwID0ge1xuICAgIHVybDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBtZXRob2Q6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgZGF0YTogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBiYXNlVVJMOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcGFyYW1zU2VyaWFsaXplcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXRNZXNzYWdlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhDcmVkZW50aWFsczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoWFNSRlRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGFkYXB0ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VUeXBlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZDb29raWVOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZIZWFkZXJOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGRlY29tcHJlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Q29udGVudExlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhCb2R5TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGJlZm9yZVJlZGlyZWN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zcG9ydDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cHNBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBjYW5jZWxUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBzb2NrZXRQYXRoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlRW5jb2Rpbmc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdmFsaWRhdGVTdGF0dXM6IG1lcmdlRGlyZWN0S2V5cyxcbiAgICBoZWFkZXJzOiAoYSwgYiAsIHByb3ApID0+IG1lcmdlRGVlcFByb3BlcnRpZXMoaGVhZGVyc1RvT2JqZWN0KGEpLCBoZWFkZXJzVG9PYmplY3QoYikscHJvcCwgdHJ1ZSlcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZzEsIGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICBjb25zdCBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgY29uc3QgY29uZmlnVmFsdWUgPSBtZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdLCBwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vQXhpb3NFcnJvci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcGFyYW0gez9PYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZSBvYmplY3RcbiAqXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZm5zLCByZXNwb25zZSkge1xuICBjb25zdCBjb25maWcgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICBjb25zdCBjb250ZXh0ID0gcmVzcG9uc2UgfHwgY29uZmlnO1xuICBjb25zdCBoZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29udGV4dC5oZWFkZXJzKTtcbiAgbGV0IGRhdGEgPSBjb250ZXh0LmRhdGE7XG5cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbmZpZywgZGF0YSwgaGVhZGVycy5ub3JtYWxpemUoKSwgcmVzcG9uc2UgPyByZXNwb25zZS5zdGF0dXMgOiB1bmRlZmluZWQpO1xuICB9KTtcblxuICBoZWFkZXJzLm5vcm1hbGl6ZSgpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHRvVVJMRW5jb2RlZEZvcm0gZnJvbSAnLi4vaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi4vaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG5jb25zdCBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IFsneGhyJywgJ2h0dHAnLCAnZmV0Y2gnXSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkgfHwgJyc7XG4gICAgY29uc3QgaGFzSlNPTkNvbnRlbnRUeXBlID0gY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID4gLTE7XG4gICAgY29uc3QgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzLmlzSFRNTEZvcm0oZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBuZXcgRm9ybURhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNGb3JtRGF0YSA9IHV0aWxzLmlzRm9ybURhdGEoZGF0YSk7XG5cbiAgICBpZiAoaXNGb3JtRGF0YSkge1xuICAgICAgcmV0dXJuIGhhc0pTT05Db250ZW50VHlwZSA/IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhVG9KU09OKGRhdGEpKSA6IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzUmVhZGFibGVTdHJlYW0oZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcsIGZhbHNlKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkKSB7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCB0aGlzLmZvcm1TZXJpYWxpemVyKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscy5pc0ZpbGVMaXN0KGRhdGEpKSB8fCBjb250ZW50VHlwZS5pbmRleE9mKCdtdWx0aXBhcnQvZm9ybS1kYXRhJykgPiAtMSkge1xuICAgICAgICBjb25zdCBfRm9ybURhdGEgPSB0aGlzLmVudiAmJiB0aGlzLmVudi5Gb3JtRGF0YTtcblxuICAgICAgICByZXR1cm4gdG9Gb3JtRGF0YShcbiAgICAgICAgICBpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLFxuICAgICAgICAgIF9Gb3JtRGF0YSAmJiBuZXcgX0Zvcm1EYXRhKCksXG4gICAgICAgICAgdGhpcy5mb3JtU2VyaWFsaXplclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgfHwgaGFzSlNPTkNvbnRlbnRUeXBlICkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicsIGZhbHNlKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICBjb25zdCBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgY29uc3QgSlNPTlJlcXVlc3RlZCA9IHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAodXRpbHMuaXNSZXNwb25zZShkYXRhKSB8fCB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiAoKGZvcmNlZEpTT05QYXJzaW5nICYmICF0aGlzLnJlc3BvbnNlVHlwZSkgfHwgSlNPTlJlcXVlc3RlZCkpIHtcbiAgICAgIGNvbnN0IHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICAgIGNvbnN0IHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIEpTT05SZXF1ZXN0ZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHBsYXRmb3JtLmNsYXNzZXMuRm9ybURhdGEsXG4gICAgQmxvYjogcGxhdGZvcm0uY2xhc3Nlcy5CbG9iXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXG4gICAgICAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIChtZXRob2QpID0+IHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcbiIsImV4cG9ydCBjb25zdCBWRVJTSU9OID0gXCIxLjguNFwiOyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi90b0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBJdCBlbmNvZGVzIGEgc3RyaW5nIGJ5IHJlcGxhY2luZyBhbGwgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgaW4gdGhlIHVucmVzZXJ2ZWQgc2V0IHdpdGhcbiAqIHRoZWlyIHBlcmNlbnQtZW5jb2RlZCBlcXVpdmFsZW50c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIGVuY29kZS5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShzdHIpIHtcbiAgY29uc3QgY2hhck1hcCA9IHtcbiAgICAnISc6ICclMjEnLFxuICAgIFwiJ1wiOiAnJTI3JyxcbiAgICAnKCc6ICclMjgnLFxuICAgICcpJzogJyUyOScsXG4gICAgJ34nOiAnJTdFJyxcbiAgICAnJTIwJzogJysnLFxuICAgICclMDAnOiAnXFx4MDAnXG4gIH07XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKX5dfCUyMHwlMDAvZywgZnVuY3Rpb24gcmVwbGFjZXIobWF0Y2gpIHtcbiAgICByZXR1cm4gY2hhck1hcFttYXRjaF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcGFyYW1zIG9iamVjdCBhbmQgY29udmVydHMgaXQgdG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IHBhcmFtcyAtIFRoZSBwYXJhbWV0ZXJzIHRvIGJlIGNvbnZlcnRlZCB0byBhIEZvcm1EYXRhIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCBwYXNzZWQgdG8gdGhlIEF4aW9zIGNvbnN0cnVjdG9yLlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgdGhpcy5fcGFpcnMgPSBbXTtcblxuICBwYXJhbXMgJiYgdG9Gb3JtRGF0YShwYXJhbXMsIHRoaXMsIG9wdGlvbnMpO1xufVxuXG5jb25zdCBwcm90b3R5cGUgPSBBeGlvc1VSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGU7XG5cbnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5fcGFpcnMucHVzaChbbmFtZSwgdmFsdWVdKTtcbn07XG5cbnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGVuY29kZXIpIHtcbiAgY29uc3QgX2VuY29kZSA9IGVuY29kZXIgPyBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlbmNvZGVyLmNhbGwodGhpcywgdmFsdWUsIGVuY29kZSk7XG4gIH0gOiBlbmNvZGU7XG5cbiAgcmV0dXJuIHRoaXMuX3BhaXJzLm1hcChmdW5jdGlvbiBlYWNoKHBhaXIpIHtcbiAgICByZXR1cm4gX2VuY29kZShwYWlyWzBdKSArICc9JyArIF9lbmNvZGUocGFpclsxXSk7XG4gIH0sICcnKS5qb2luKCcmJyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsImNvbnN0IEh0dHBTdGF0dXNDb2RlID0ge1xuICBDb250aW51ZTogMTAwLFxuICBTd2l0Y2hpbmdQcm90b2NvbHM6IDEwMSxcbiAgUHJvY2Vzc2luZzogMTAyLFxuICBFYXJseUhpbnRzOiAxMDMsXG4gIE9rOiAyMDAsXG4gIENyZWF0ZWQ6IDIwMSxcbiAgQWNjZXB0ZWQ6IDIwMixcbiAgTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uOiAyMDMsXG4gIE5vQ29udGVudDogMjA0LFxuICBSZXNldENvbnRlbnQ6IDIwNSxcbiAgUGFydGlhbENvbnRlbnQ6IDIwNixcbiAgTXVsdGlTdGF0dXM6IDIwNyxcbiAgQWxyZWFkeVJlcG9ydGVkOiAyMDgsXG4gIEltVXNlZDogMjI2LFxuICBNdWx0aXBsZUNob2ljZXM6IDMwMCxcbiAgTW92ZWRQZXJtYW5lbnRseTogMzAxLFxuICBGb3VuZDogMzAyLFxuICBTZWVPdGhlcjogMzAzLFxuICBOb3RNb2RpZmllZDogMzA0LFxuICBVc2VQcm94eTogMzA1LFxuICBVbnVzZWQ6IDMwNixcbiAgVGVtcG9yYXJ5UmVkaXJlY3Q6IDMwNyxcbiAgUGVybWFuZW50UmVkaXJlY3Q6IDMwOCxcbiAgQmFkUmVxdWVzdDogNDAwLFxuICBVbmF1dGhvcml6ZWQ6IDQwMSxcbiAgUGF5bWVudFJlcXVpcmVkOiA0MDIsXG4gIEZvcmJpZGRlbjogNDAzLFxuICBOb3RGb3VuZDogNDA0LFxuICBNZXRob2ROb3RBbGxvd2VkOiA0MDUsXG4gIE5vdEFjY2VwdGFibGU6IDQwNixcbiAgUHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA0MDcsXG4gIFJlcXVlc3RUaW1lb3V0OiA0MDgsXG4gIENvbmZsaWN0OiA0MDksXG4gIEdvbmU6IDQxMCxcbiAgTGVuZ3RoUmVxdWlyZWQ6IDQxMSxcbiAgUHJlY29uZGl0aW9uRmFpbGVkOiA0MTIsXG4gIFBheWxvYWRUb29MYXJnZTogNDEzLFxuICBVcmlUb29Mb25nOiA0MTQsXG4gIFVuc3VwcG9ydGVkTWVkaWFUeXBlOiA0MTUsXG4gIFJhbmdlTm90U2F0aXNmaWFibGU6IDQxNixcbiAgRXhwZWN0YXRpb25GYWlsZWQ6IDQxNyxcbiAgSW1BVGVhcG90OiA0MTgsXG4gIE1pc2RpcmVjdGVkUmVxdWVzdDogNDIxLFxuICBVbnByb2Nlc3NhYmxlRW50aXR5OiA0MjIsXG4gIExvY2tlZDogNDIzLFxuICBGYWlsZWREZXBlbmRlbmN5OiA0MjQsXG4gIFRvb0Vhcmx5OiA0MjUsXG4gIFVwZ3JhZGVSZXF1aXJlZDogNDI2LFxuICBQcmVjb25kaXRpb25SZXF1aXJlZDogNDI4LFxuICBUb29NYW55UmVxdWVzdHM6IDQyOSxcbiAgUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOiA0MzEsXG4gIFVuYXZhaWxhYmxlRm9yTGVnYWxSZWFzb25zOiA0NTEsXG4gIEludGVybmFsU2VydmVyRXJyb3I6IDUwMCxcbiAgTm90SW1wbGVtZW50ZWQ6IDUwMSxcbiAgQmFkR2F0ZXdheTogNTAyLFxuICBTZXJ2aWNlVW5hdmFpbGFibGU6IDUwMyxcbiAgR2F0ZXdheVRpbWVvdXQ6IDUwNCxcbiAgSHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQ6IDUwNSxcbiAgVmFyaWFudEFsc29OZWdvdGlhdGVzOiA1MDYsXG4gIEluc3VmZmljaWVudFN0b3JhZ2U6IDUwNyxcbiAgTG9vcERldGVjdGVkOiA1MDgsXG4gIE5vdEV4dGVuZGVkOiA1MTAsXG4gIE5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA1MTEsXG59O1xuXG5PYmplY3QuZW50cmllcyhIdHRwU3RhdHVzQ29kZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gIEh0dHBTdGF0dXNDb2RlW3ZhbHVlXSA9IGtleTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBIdHRwU3RhdHVzQ29kZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJndW1lbnRzKTtcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcblxuLyoqXG4gKiBJdCByZXBsYWNlcyBhbGwgaW5zdGFuY2VzIG9mIHRoZSBjaGFyYWN0ZXJzIGA6YCwgYCRgLCBgLGAsIGArYCwgYFtgLCBhbmQgYF1gIHdpdGggdGhlaXJcbiAqIFVSSSBlbmNvZGVkIGNvdW50ZXJwYXJ0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgVGhlIHZhbHVlIHRvIGJlIGVuY29kZWQuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcGFyYW0gez8ob2JqZWN0fEZ1bmN0aW9uKX0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgXG4gIGNvbnN0IF9lbmNvZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlIHx8IGVuY29kZTtcblxuICBpZiAodXRpbHMuaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBzZXJpYWxpemU6IG9wdGlvbnNcbiAgICB9O1xuICB9IFxuXG4gIGNvbnN0IHNlcmlhbGl6ZUZuID0gb3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZTtcblxuICBsZXQgc2VyaWFsaXplZFBhcmFtcztcblxuICBpZiAoc2VyaWFsaXplRm4pIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gc2VyaWFsaXplRm4ocGFyYW1zLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gdXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSA/XG4gICAgICBwYXJhbXMudG9TdHJpbmcoKSA6XG4gICAgICBuZXcgQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKS50b1N0cmluZyhfZW5jb2RlKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgY29uc3QgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvP1xcLyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cbiIsImltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gXCIuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qc1wiO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuY29uc3QgY29tcG9zZVNpZ25hbHMgPSAoc2lnbmFscywgdGltZW91dCkgPT4ge1xuICBjb25zdCB7bGVuZ3RofSA9IChzaWduYWxzID0gc2lnbmFscyA/IHNpZ25hbHMuZmlsdGVyKEJvb2xlYW4pIDogW10pO1xuXG4gIGlmICh0aW1lb3V0IHx8IGxlbmd0aCkge1xuICAgIGxldCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gICAgbGV0IGFib3J0ZWQ7XG5cbiAgICBjb25zdCBvbmFib3J0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgaWYgKCFhYm9ydGVkKSB7XG4gICAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICBjb25zdCBlcnIgPSByZWFzb24gaW5zdGFuY2VvZiBFcnJvciA/IHJlYXNvbiA6IHRoaXMucmVhc29uO1xuICAgICAgICBjb250cm9sbGVyLmFib3J0KGVyciBpbnN0YW5jZW9mIEF4aW9zRXJyb3IgPyBlcnIgOiBuZXcgQ2FuY2VsZWRFcnJvcihlcnIgaW5zdGFuY2VvZiBFcnJvciA/IGVyci5tZXNzYWdlIDogZXJyKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHRpbWVyID0gdGltZW91dCAmJiBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgIG9uYWJvcnQobmV3IEF4aW9zRXJyb3IoYHRpbWVvdXQgJHt0aW1lb3V0fSBvZiBtcyBleGNlZWRlZGAsIEF4aW9zRXJyb3IuRVRJTUVET1VUKSlcbiAgICB9LCB0aW1lb3V0KVxuXG4gICAgY29uc3QgdW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgICBpZiAoc2lnbmFscykge1xuICAgICAgICB0aW1lciAmJiBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgIHNpZ25hbHMuZm9yRWFjaChzaWduYWwgPT4ge1xuICAgICAgICAgIHNpZ25hbC51bnN1YnNjcmliZSA/IHNpZ25hbC51bnN1YnNjcmliZShvbmFib3J0KSA6IHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uYWJvcnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2lnbmFscyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2lnbmFscy5mb3JFYWNoKChzaWduYWwpID0+IHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uYWJvcnQpKTtcblxuICAgIGNvbnN0IHtzaWduYWx9ID0gY29udHJvbGxlcjtcblxuICAgIHNpZ25hbC51bnN1YnNjcmliZSA9ICgpID0+IHV0aWxzLmFzYXAodW5zdWJzY3JpYmUpO1xuXG4gICAgcmV0dXJuIHNpZ25hbDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb3NlU2lnbmFscztcbiIsImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIHtcbiAgICB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgIGNvbnN0IGNvb2tpZSA9IFtuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKV07XG5cbiAgICAgIHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpICYmIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcocGF0aCkgJiYgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhkb21haW4pICYmIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cbiAgICAgIHNlY3VyZSA9PT0gdHJ1ZSAmJiBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgIH0sXG5cbiAgICByZWFkKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShuYW1lKSB7XG4gICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgIH1cbiAgfVxuXG4gIDpcblxuICAvLyBOb24tc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIHtcbiAgICB3cml0ZSgpIHt9LFxuICAgIHJlYWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZSgpIHt9XG4gIH07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcblxuICAgIGlmIChuYW1lID09PSAnX19wcm90b19fJykgcmV0dXJuIHRydWU7XG5cbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvSlNPTjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID8gKChvcmlnaW4sIGlzTVNJRSkgPT4gKHVybCkgPT4ge1xuICB1cmwgPSBuZXcgVVJMKHVybCwgcGxhdGZvcm0ub3JpZ2luKTtcblxuICByZXR1cm4gKFxuICAgIG9yaWdpbi5wcm90b2NvbCA9PT0gdXJsLnByb3RvY29sICYmXG4gICAgb3JpZ2luLmhvc3QgPT09IHVybC5ob3N0ICYmXG4gICAgKGlzTVNJRSB8fCBvcmlnaW4ucG9ydCA9PT0gdXJsLnBvcnQpXG4gICk7XG59KShcbiAgbmV3IFVSTChwbGF0Zm9ybS5vcmlnaW4pLFxuICBwbGF0Zm9ybS5uYXZpZ2F0b3IgJiYgLyhtc2llfHRyaWRlbnQpL2kudGVzdChwbGF0Zm9ybS5uYXZpZ2F0b3IudXNlckFnZW50KVxuKSA6ICgpID0+IHRydWU7XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3RyaWN0XG5leHBvcnQgZGVmYXVsdCBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8vIFJhd0F4aW9zSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbmNvbnN0IGlnbm9yZUR1cGxpY2F0ZU9mID0gdXRpbHMudG9PYmplY3RTZXQoW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl0pO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3SGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKlxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgcmF3SGVhZGVycyA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHt9O1xuICBsZXQga2V5O1xuICBsZXQgdmFsO1xuICBsZXQgaTtcblxuICByYXdIZWFkZXJzICYmIHJhd0hlYWRlcnMuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gbGluZS5zdWJzdHJpbmcoMCwgaSkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gbGluZS5zdWJzdHJpbmcoaSArIDEpLnRyaW0oKTtcblxuICAgIGlmICgha2V5IHx8IChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZltrZXldKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgaWYgKHBhcnNlZFtrZXldKSB7XG4gICAgICAgIHBhcnNlZFtrZXldLnB1c2godmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gW3ZhbF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VQcm90b2NvbCh1cmwpIHtcbiAgY29uc3QgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59XG4iLCJpbXBvcnQgc3BlZWRvbWV0ZXIgZnJvbSBcIi4vc3BlZWRvbWV0ZXIuanNcIjtcbmltcG9ydCB0aHJvdHRsZSBmcm9tIFwiLi90aHJvdHRsZS5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi91dGlscy5qc1wiO1xuXG5leHBvcnQgY29uc3QgcHJvZ3Jlc3NFdmVudFJlZHVjZXIgPSAobGlzdGVuZXIsIGlzRG93bmxvYWRTdHJlYW0sIGZyZXEgPSAzKSA9PiB7XG4gIGxldCBieXRlc05vdGlmaWVkID0gMDtcbiAgY29uc3QgX3NwZWVkb21ldGVyID0gc3BlZWRvbWV0ZXIoNTAsIDI1MCk7XG5cbiAgcmV0dXJuIHRocm90dGxlKGUgPT4ge1xuICAgIGNvbnN0IGxvYWRlZCA9IGUubG9hZGVkO1xuICAgIGNvbnN0IHRvdGFsID0gZS5sZW5ndGhDb21wdXRhYmxlID8gZS50b3RhbCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwcm9ncmVzc0J5dGVzID0gbG9hZGVkIC0gYnl0ZXNOb3RpZmllZDtcbiAgICBjb25zdCByYXRlID0gX3NwZWVkb21ldGVyKHByb2dyZXNzQnl0ZXMpO1xuICAgIGNvbnN0IGluUmFuZ2UgPSBsb2FkZWQgPD0gdG90YWw7XG5cbiAgICBieXRlc05vdGlmaWVkID0gbG9hZGVkO1xuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGxvYWRlZCxcbiAgICAgIHRvdGFsLFxuICAgICAgcHJvZ3Jlc3M6IHRvdGFsID8gKGxvYWRlZCAvIHRvdGFsKSA6IHVuZGVmaW5lZCxcbiAgICAgIGJ5dGVzOiBwcm9ncmVzc0J5dGVzLFxuICAgICAgcmF0ZTogcmF0ZSA/IHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBlc3RpbWF0ZWQ6IHJhdGUgJiYgdG90YWwgJiYgaW5SYW5nZSA/ICh0b3RhbCAtIGxvYWRlZCkgLyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXZlbnQ6IGUsXG4gICAgICBsZW5ndGhDb21wdXRhYmxlOiB0b3RhbCAhPSBudWxsLFxuICAgICAgW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddOiB0cnVlXG4gICAgfTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9LCBmcmVxKTtcbn1cblxuZXhwb3J0IGNvbnN0IHByb2dyZXNzRXZlbnREZWNvcmF0b3IgPSAodG90YWwsIHRocm90dGxlZCkgPT4ge1xuICBjb25zdCBsZW5ndGhDb21wdXRhYmxlID0gdG90YWwgIT0gbnVsbDtcblxuICByZXR1cm4gWyhsb2FkZWQpID0+IHRocm90dGxlZFswXSh7XG4gICAgbGVuZ3RoQ29tcHV0YWJsZSxcbiAgICB0b3RhbCxcbiAgICBsb2FkZWRcbiAgfSksIHRocm90dGxlZFsxXV07XG59XG5cbmV4cG9ydCBjb25zdCBhc3luY0RlY29yYXRvciA9IChmbikgPT4gKC4uLmFyZ3MpID0+IHV0aWxzLmFzYXAoKCkgPT4gZm4oLi4uYXJncykpO1xuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gXCIuLi9wbGF0Zm9ybS9pbmRleC5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi91dGlscy5qc1wiO1xuaW1wb3J0IGlzVVJMU2FtZU9yaWdpbiBmcm9tIFwiLi9pc1VSTFNhbWVPcmlnaW4uanNcIjtcbmltcG9ydCBjb29raWVzIGZyb20gXCIuL2Nvb2tpZXMuanNcIjtcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gXCIuLi9jb3JlL2J1aWxkRnVsbFBhdGguanNcIjtcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tIFwiLi4vY29yZS9tZXJnZUNvbmZpZy5qc1wiO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBidWlsZFVSTCBmcm9tIFwiLi9idWlsZFVSTC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoY29uZmlnKSA9PiB7XG4gIGNvbnN0IG5ld0NvbmZpZyA9IG1lcmdlQ29uZmlnKHt9LCBjb25maWcpO1xuXG4gIGxldCB7ZGF0YSwgd2l0aFhTUkZUb2tlbiwgeHNyZkhlYWRlck5hbWUsIHhzcmZDb29raWVOYW1lLCBoZWFkZXJzLCBhdXRofSA9IG5ld0NvbmZpZztcblxuICBuZXdDb25maWcuaGVhZGVycyA9IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShoZWFkZXJzKTtcblxuICBuZXdDb25maWcudXJsID0gYnVpbGRVUkwoYnVpbGRGdWxsUGF0aChuZXdDb25maWcuYmFzZVVSTCwgbmV3Q29uZmlnLnVybCwgbmV3Q29uZmlnLmFsbG93QWJzb2x1dGVVcmxzKSwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuXG4gIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgaWYgKGF1dGgpIHtcbiAgICBoZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICtcbiAgICAgIGJ0b2EoKGF1dGgudXNlcm5hbWUgfHwgJycpICsgJzonICsgKGF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYXV0aC5wYXNzd29yZCkpIDogJycpKVxuICAgICk7XG4gIH1cblxuICBsZXQgY29udGVudFR5cGU7XG5cbiAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkpIHtcbiAgICBpZiAocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52IHx8IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudikge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSh1bmRlZmluZWQpOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfSBlbHNlIGlmICgoY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkpICE9PSBmYWxzZSkge1xuICAgICAgLy8gZml4IHNlbWljb2xvbiBkdXBsaWNhdGlvbiBpc3N1ZSBmb3IgUmVhY3ROYXRpdmUgRm9ybURhdGEgaW1wbGVtZW50YXRpb25cbiAgICAgIGNvbnN0IFt0eXBlLCAuLi50b2tlbnNdID0gY29udGVudFR5cGUgPyBjb250ZW50VHlwZS5zcGxpdCgnOycpLm1hcCh0b2tlbiA9PiB0b2tlbi50cmltKCkpLmZpbHRlcihCb29sZWFuKSA6IFtdO1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZShbdHlwZSB8fCAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScsIC4uLnRva2Vuc10uam9pbignOyAnKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuXG4gIGlmIChwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYpIHtcbiAgICB3aXRoWFNSRlRva2VuICYmIHV0aWxzLmlzRnVuY3Rpb24od2l0aFhTUkZUb2tlbikgJiYgKHdpdGhYU1JGVG9rZW4gPSB3aXRoWFNSRlRva2VuKG5ld0NvbmZpZykpO1xuXG4gICAgaWYgKHdpdGhYU1JGVG9rZW4gfHwgKHdpdGhYU1JGVG9rZW4gIT09IGZhbHNlICYmIGlzVVJMU2FtZU9yaWdpbihuZXdDb25maWcudXJsKSkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgY29uc3QgeHNyZlZhbHVlID0geHNyZkhlYWRlck5hbWUgJiYgeHNyZkNvb2tpZU5hbWUgJiYgY29va2llcy5yZWFkKHhzcmZDb29raWVOYW1lKTtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICBoZWFkZXJzLnNldCh4c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3Q29uZmlnO1xufVxuXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn1cbiIsIi8qKlxuICogVGhyb3R0bGUgZGVjb3JhdG9yXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtOdW1iZXJ9IGZyZXFcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmbiwgZnJlcSkge1xuICBsZXQgdGltZXN0YW1wID0gMDtcbiAgbGV0IHRocmVzaG9sZCA9IDEwMDAgLyBmcmVxO1xuICBsZXQgbGFzdEFyZ3M7XG4gIGxldCB0aW1lcjtcblxuICBjb25zdCBpbnZva2UgPSAoYXJncywgbm93ID0gRGF0ZS5ub3coKSkgPT4ge1xuICAgIHRpbWVzdGFtcCA9IG5vdztcbiAgICBsYXN0QXJncyA9IG51bGw7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgIH1cbiAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgfVxuXG4gIGNvbnN0IHRocm90dGxlZCA9ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBwYXNzZWQgPSBub3cgLSB0aW1lc3RhbXA7XG4gICAgaWYgKCBwYXNzZWQgPj0gdGhyZXNob2xkKSB7XG4gICAgICBpbnZva2UoYXJncywgbm93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdEFyZ3MgPSBhcmdzO1xuICAgICAgaWYgKCF0aW1lcikge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgICBpbnZva2UobGFzdEFyZ3MpXG4gICAgICAgIH0sIHRocmVzaG9sZCAtIHBhc3NlZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZmx1c2ggPSAoKSA9PiBsYXN0QXJncyAmJiBpbnZva2UobGFzdEFyZ3MpO1xuXG4gIHJldHVybiBbdGhyb3R0bGVkLCBmbHVzaF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRocm90dGxlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbi8vIHRlbXBvcmFyeSBob3RmaXggdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcyB1bnRpbCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBpcyByZWZhY3RvcmVkXG5pbXBvcnQgUGxhdGZvcm1Gb3JtRGF0YSBmcm9tICcuLi9wbGF0Zm9ybS9ub2RlL2NsYXNzZXMvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzLmlzUGxhaW5PYmplY3QodGhpbmcpIHx8IHV0aWxzLmlzQXJyYXkodGhpbmcpO1xufVxuXG4vKipcbiAqIEl0IHJlbW92ZXMgdGhlIGJyYWNrZXRzIGZyb20gdGhlIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGtleSB3aXRob3V0IHRoZSBicmFja2V0cy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscy5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkoYXJyKSAmJiAhYXJyLnNvbWUoaXNWaXNpdGFibGUpO1xufVxuXG5jb25zdCBwcmVkaWNhdGVzID0gdXRpbHMudG9GbGF0T2JqZWN0KHV0aWxzLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChQbGF0Zm9ybUZvcm1EYXRhIHx8IEZvcm1EYXRhKSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBvcHRpb25zID0gdXRpbHMudG9GbGF0T2JqZWN0KG9wdGlvbnMsIHtcbiAgICBtZXRhVG9rZW5zOiB0cnVlLFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGluZGV4ZXM6IGZhbHNlXG4gIH0sIGZhbHNlLCBmdW5jdGlvbiBkZWZpbmVkKG9wdGlvbiwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gICAgcmV0dXJuICF1dGlscy5pc1VuZGVmaW5lZChzb3VyY2Vbb3B0aW9uXSk7XG4gIH0pO1xuXG4gIGNvbnN0IG1ldGFUb2tlbnMgPSBvcHRpb25zLm1ldGFUb2tlbnM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICBjb25zdCB2aXNpdG9yID0gb3B0aW9ucy52aXNpdG9yIHx8IGRlZmF1bHRWaXNpdG9yO1xuICBjb25zdCBkb3RzID0gb3B0aW9ucy5kb3RzO1xuICBjb25zdCBpbmRleGVzID0gb3B0aW9ucy5pbmRleGVzO1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMuQmxvYiB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgQmxvYjtcbiAgY29uc3QgdXNlQmxvYiA9IF9CbG9iICYmIHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMuaXNGdW5jdGlvbih2aXNpdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Zpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoIXVzZUJsb2IgJiYgdXRpbHMuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1c2VCbG9iICYmIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgdmlzaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleVxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xOdW1iZXI+fSBwYXRoXG4gICAqIEB0aGlzIHtGb3JtRGF0YX1cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybiB0cnVlIHRvIHZpc2l0IHRoZSBlYWNoIHByb3Agb2YgdGhlIHZhbHVlIHJlY3Vyc2l2ZWx5XG4gICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0VmlzaXRvcih2YWx1ZSwga2V5LCBwYXRoKSB7XG4gICAgbGV0IGFyciA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICYmICFwYXRoICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh1dGlscy5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSBtZXRhVG9rZW5zID8ga2V5IDoga2V5LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHV0aWxzLmlzQXJyYXkodmFsdWUpICYmIGlzRmxhdEFycmF5KHZhbHVlKSkgfHxcbiAgICAgICAgKCh1dGlscy5pc0ZpbGVMaXN0KHZhbHVlKSB8fCB1dGlscy5lbmRzV2l0aChrZXksICdbXScpKSAmJiAoYXJyID0gdXRpbHMudG9BcnJheSh2YWx1ZSkpXG4gICAgICAgICkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IHJlbW92ZUJyYWNrZXRzKGtleSk7XG5cbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gZWFjaChlbCwgaW5kZXgpIHtcbiAgICAgICAgICAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICBpbmRleGVzID09PSB0cnVlID8gcmVuZGVyS2V5KFtrZXldLCBpbmRleCwgZG90cykgOiAoaW5kZXhlcyA9PT0gbnVsbCA/IGtleSA6IGtleSArICdbXScpLFxuICAgICAgICAgICAgY29udmVydFZhbHVlKGVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzVmlzaXRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9ybURhdGEuYXBwZW5kKHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpLCBjb252ZXJ0VmFsdWUodmFsdWUpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrID0gW107XG5cbiAgY29uc3QgZXhwb3NlZEhlbHBlcnMgPSBPYmplY3QuYXNzaWduKHByZWRpY2F0ZXMsIHtcbiAgICBkZWZhdWx0VmlzaXRvcixcbiAgICBjb252ZXJ0VmFsdWUsXG4gICAgaXNWaXNpdGFibGVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYnVpbGQodmFsdWUsIHBhdGgpIHtcbiAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiBlYWNoKGVsLCBrZXkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9ICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiB2aXNpdG9yLmNhbGwoXG4gICAgICAgIGZvcm1EYXRhLCBlbCwgdXRpbHMuaXNTdHJpbmcoa2V5KSA/IGtleS50cmltKCkgOiBrZXksIHBhdGgsIGV4cG9zZWRIZWxwZXJzXG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIGJ1aWxkKGVsLCBwYXRoID8gcGF0aC5jb25jYXQoa2V5KSA6IFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvRm9ybURhdGE7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cbiIsIlxuZXhwb3J0IGNvbnN0IHN0cmVhbUNodW5rID0gZnVuY3Rpb24qIChjaHVuaywgY2h1bmtTaXplKSB7XG4gIGxldCBsZW4gPSBjaHVuay5ieXRlTGVuZ3RoO1xuXG4gIGlmICghY2h1bmtTaXplIHx8IGxlbiA8IGNodW5rU2l6ZSkge1xuICAgIHlpZWxkIGNodW5rO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBwb3MgPSAwO1xuICBsZXQgZW5kO1xuXG4gIHdoaWxlIChwb3MgPCBsZW4pIHtcbiAgICBlbmQgPSBwb3MgKyBjaHVua1NpemU7XG4gICAgeWllbGQgY2h1bmsuc2xpY2UocG9zLCBlbmQpO1xuICAgIHBvcyA9IGVuZDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcmVhZEJ5dGVzID0gYXN5bmMgZnVuY3Rpb24qIChpdGVyYWJsZSwgY2h1bmtTaXplKSB7XG4gIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgcmVhZFN0cmVhbShpdGVyYWJsZSkpIHtcbiAgICB5aWVsZCogc3RyZWFtQ2h1bmsoY2h1bmssIGNodW5rU2l6ZSk7XG4gIH1cbn1cblxuY29uc3QgcmVhZFN0cmVhbSA9IGFzeW5jIGZ1bmN0aW9uKiAoc3RyZWFtKSB7XG4gIGlmIChzdHJlYW1bU3ltYm9sLmFzeW5jSXRlcmF0b3JdKSB7XG4gICAgeWllbGQqIHN0cmVhbTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gIHRyeSB7XG4gICAgZm9yICg7Oykge1xuICAgICAgY29uc3Qge2RvbmUsIHZhbHVlfSA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICBpZiAoZG9uZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHlpZWxkIHZhbHVlO1xuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBhd2FpdCByZWFkZXIuY2FuY2VsKCk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHRyYWNrU3RyZWFtID0gKHN0cmVhbSwgY2h1bmtTaXplLCBvblByb2dyZXNzLCBvbkZpbmlzaCkgPT4ge1xuICBjb25zdCBpdGVyYXRvciA9IHJlYWRCeXRlcyhzdHJlYW0sIGNodW5rU2l6ZSk7XG5cbiAgbGV0IGJ5dGVzID0gMDtcbiAgbGV0IGRvbmU7XG4gIGxldCBfb25GaW5pc2ggPSAoZSkgPT4ge1xuICAgIGlmICghZG9uZSkge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICBvbkZpbmlzaCAmJiBvbkZpbmlzaChlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICBhc3luYyBwdWxsKGNvbnRyb2xsZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCBpdGVyYXRvci5uZXh0KCk7XG5cbiAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgIF9vbkZpbmlzaCgpO1xuICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbGVuID0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICAgICAgaWYgKG9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICBsZXQgbG9hZGVkQnl0ZXMgPSBieXRlcyArPSBsZW47XG4gICAgICAgICAgb25Qcm9ncmVzcyhsb2FkZWRCeXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKG5ldyBVaW50OEFycmF5KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX29uRmluaXNoKGVycik7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNhbmNlbChyZWFzb24pIHtcbiAgICAgIF9vbkZpbmlzaChyZWFzb24pO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLnJldHVybigpO1xuICAgIH1cbiAgfSwge1xuICAgIGhpZ2hXYXRlck1hcms6IDJcbiAgfSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaCgodHlwZSwgaSkgPT4ge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxuY29uc3QgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gKHZhbHVlLCBvcHQsIG9wdHMpID0+IHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxudmFsaWRhdG9ycy5zcGVsbGluZyA9IGZ1bmN0aW9uIHNwZWxsaW5nKGNvcnJlY3RTcGVsbGluZykge1xuICByZXR1cm4gKHZhbHVlLCBvcHQpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUud2FybihgJHtvcHR9IGlzIGxpa2VseSBhIG1pc3NwZWxsaW5nIG9mICR7Y29ycmVjdFNwZWxsaW5nfWApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKlxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBjb25zdCBvcHQgPSBrZXlzW2ldO1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb3B0aW9uc1tvcHRdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXNzZXJ0T3B0aW9ucyxcbiAgdmFsaWRhdG9yc1xufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgPyBCbG9iIDogbnVsbFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnID8gRm9ybURhdGEgOiBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vLi4vLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyA/IFVSTFNlYXJjaFBhcmFtcyA6IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiaW1wb3J0IFVSTFNlYXJjaFBhcmFtcyBmcm9tICcuL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzJ1xuaW1wb3J0IEZvcm1EYXRhIGZyb20gJy4vY2xhc3Nlcy9Gb3JtRGF0YS5qcydcbmltcG9ydCBCbG9iIGZyb20gJy4vY2xhc3Nlcy9CbG9iLmpzJ1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQnJvd3NlcjogdHJ1ZSxcbiAgY2xhc3Nlczoge1xuICAgIFVSTFNlYXJjaFBhcmFtcyxcbiAgICBGb3JtRGF0YSxcbiAgICBCbG9iXG4gIH0sXG4gIHByb3RvY29sczogWydodHRwJywgJ2h0dHBzJywgJ2ZpbGUnLCAnYmxvYicsICd1cmwnLCAnZGF0YSddXG59O1xuIiwiY29uc3QgaGFzQnJvd3NlckVudiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbmNvbnN0IF9uYXZpZ2F0b3IgPSB0eXBlb2YgbmF2aWdhdG9yID09PSAnb2JqZWN0JyAmJiBuYXZpZ2F0b3IgfHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyRW52ID0gaGFzQnJvd3NlckVudiAmJlxuICAoIV9uYXZpZ2F0b3IgfHwgWydSZWFjdE5hdGl2ZScsICdOYXRpdmVTY3JpcHQnLCAnTlMnXS5pbmRleE9mKF9uYXZpZ2F0b3IucHJvZHVjdCkgPCAwKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgd2ViV29ya2VyIGVudmlyb25tZW50XG4gKlxuICogQWx0aG91Z2ggdGhlIGBpc1N0YW5kYXJkQnJvd3NlckVudmAgbWV0aG9kIGluZGljYXRlcyB0aGF0XG4gKiBgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXJgLCB0aGUgV2ViV29ya2VyIHdpbGwgc3RpbGwgYmVcbiAqIGZpbHRlcmVkIG91dCBkdWUgdG8gaXRzIGp1ZGdtZW50IHN0YW5kYXJkXG4gKiBgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ2AuXG4gKiBUaGlzIGxlYWRzIHRvIGEgcHJvYmxlbSB3aGVuIGF4aW9zIHBvc3QgYEZvcm1EYXRhYCBpbiB3ZWJXb3JrZXJcbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52ID0gKCgpID0+IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlICYmXG4gICAgdHlwZW9mIHNlbGYuaW1wb3J0U2NyaXB0cyA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufSkoKTtcblxuY29uc3Qgb3JpZ2luID0gaGFzQnJvd3NlckVudiAmJiB3aW5kb3cubG9jYXRpb24uaHJlZiB8fCAnaHR0cDovL2xvY2FsaG9zdCc7XG5cbmV4cG9ydCB7XG4gIGhhc0Jyb3dzZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyRW52LFxuICBfbmF2aWdhdG9yIGFzIG5hdmlnYXRvcixcbiAgb3JpZ2luXG59XG4iLCJpbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi9ub2RlL2luZGV4LmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vY29tbW9uL3V0aWxzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAuLi51dGlscyxcbiAgLi4ucGxhdGZvcm1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG5jb25zdCB7dG9TdHJpbmd9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHtnZXRQcm90b3R5cGVPZn0gPSBPYmplY3Q7XG5cbmNvbnN0IGtpbmRPZiA9IChjYWNoZSA9PiB0aGluZyA9PiB7XG4gICAgY29uc3Qgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmNvbnN0IGtpbmRPZlRlc3QgPSAodHlwZSkgPT4ge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKHRoaW5nKSA9PiBraW5kT2YodGhpbmcpID09PSB0eXBlXG59XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWwpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0RhdGUgPSBraW5kT2ZUZXN0KCdEYXRlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jsb2IgPSBraW5kT2ZUZXN0KCdCbG9iJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlTGlzdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlTGlzdCA9IGtpbmRPZlRlc3QoJ0ZpbGVMaXN0Jyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJlYW0gPSAodmFsKSA9PiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gRm9ybURhdGEsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Zvcm1EYXRhID0gKHRoaW5nKSA9PiB7XG4gIGxldCBraW5kO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHwgKFxuICAgICAgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIChcbiAgICAgICAgKGtpbmQgPSBraW5kT2YodGhpbmcpKSA9PT0gJ2Zvcm1kYXRhJyB8fFxuICAgICAgICAvLyBkZXRlY3QgZm9ybS1kYXRhIGluc3RhbmNlXG4gICAgICAgIChraW5kID09PSAnb2JqZWN0JyAmJiBpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSAnW29iamVjdCBGb3JtRGF0YV0nKVxuICAgICAgKVxuICAgIClcbiAgKVxufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuY29uc3QgW2lzUmVhZGFibGVTdHJlYW0sIGlzUmVxdWVzdCwgaXNSZXNwb25zZSwgaXNIZWFkZXJzXSA9IFsnUmVhZGFibGVTdHJlYW0nLCAnUmVxdWVzdCcsICdSZXNwb25zZScsICdIZWFkZXJzJ10ubWFwKGtpbmRPZlRlc3QpO1xuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5jb25zdCB0cmltID0gKHN0cikgPT4gc3RyLnRyaW0gP1xuICBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzID0gZmFsc2VdXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4sIHthbGxPd25LZXlzID0gZmFsc2V9ID0ge30pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaTtcbiAgbGV0IGw7XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGNvbnN0IGtleXMgPSBhbGxPd25LZXlzID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKSA6IE9iamVjdC5rZXlzKG9iaik7XG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGtleTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmosIGtleSkge1xuICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIGxldCBfa2V5O1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIF9rZXkgPSBrZXlzW2ldO1xuICAgIGlmIChrZXkgPT09IF9rZXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIF9rZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBfZ2xvYmFsID0gKCgpID0+IHtcbiAgLyplc2xpbnQgbm8tdW5kZWY6MCovXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpXG59KSgpO1xuXG5jb25zdCBpc0NvbnRleHREZWZpbmVkID0gKGNvbnRleHQpID0+ICFpc1VuZGVmaW5lZChjb250ZXh0KSAmJiBjb250ZXh0ICE9PSBfZ2xvYmFsO1xuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIGNvbnN0IHtjYXNlbGVzc30gPSBpc0NvbnRleHREZWZpbmVkKHRoaXMpICYmIHRoaXMgfHwge307XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBjb25zdCBhc3NpZ25WYWx1ZSA9ICh2YWwsIGtleSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEtleSA9IGNhc2VsZXNzICYmIGZpbmRLZXkocmVzdWx0LCBrZXkpIHx8IGtleTtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRbdGFyZ2V0S2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHJlc3VsdFt0YXJnZXRLZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBhcmd1bWVudHNbaV0gJiYgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5c11cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuY29uc3QgZXh0ZW5kID0gKGEsIGIsIHRoaXNBcmcsIHthbGxPd25LZXlzfT0ge30pID0+IHtcbiAgZm9yRWFjaChiLCAodmFsLCBrZXkpID0+IHtcbiAgICBpZiAodGhpc0FyZyAmJiBpc0Z1bmN0aW9uKHZhbCkpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSwge2FsbE93bktleXN9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmNvbnN0IHN0cmlwQk9NID0gKGNvbnRlbnQpID0+IHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVzY3JpcHRvcnNdXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGluaGVyaXRzID0gKGNvbnN0cnVjdG9yLCBzdXBlckNvbnN0cnVjdG9yLCBwcm9wcywgZGVzY3JpcHRvcnMpID0+IHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZSwgZGVzY3JpcHRvcnMpO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnN0cnVjdG9yLCAnc3VwZXInLCB7XG4gICAgdmFsdWU6IHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlXG4gIH0pO1xuICBwcm9wcyAmJiBPYmplY3QuYXNzaWduKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvcHMpO1xufVxuXG4vKipcbiAqIFJlc29sdmUgb2JqZWN0IHdpdGggZGVlcCBwcm90b3R5cGUgY2hhaW4gdG8gYSBmbGF0IG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZU9iaiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gW2Rlc3RPYmpdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEJvb2xlYW59IFtmaWx0ZXJdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcEZpbHRlcl1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5jb25zdCB0b0ZsYXRPYmplY3QgPSAoc291cmNlT2JqLCBkZXN0T2JqLCBmaWx0ZXIsIHByb3BGaWx0ZXIpID0+IHtcbiAgbGV0IHByb3BzO1xuICBsZXQgaTtcbiAgbGV0IHByb3A7XG4gIGNvbnN0IG1lcmdlZCA9IHt9O1xuXG4gIGRlc3RPYmogPSBkZXN0T2JqIHx8IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgaWYgKHNvdXJjZU9iaiA9PSBudWxsKSByZXR1cm4gZGVzdE9iajtcblxuICBkbyB7XG4gICAgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VPYmopO1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgIHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmICgoIXByb3BGaWx0ZXIgfHwgcHJvcEZpbHRlcihwcm9wLCBzb3VyY2VPYmosIGRlc3RPYmopKSAmJiAhbWVyZ2VkW3Byb3BdKSB7XG4gICAgICAgIGRlc3RPYmpbcHJvcF0gPSBzb3VyY2VPYmpbcHJvcF07XG4gICAgICAgIG1lcmdlZFtwcm9wXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZU9iaiA9IGZpbHRlciAhPT0gZmFsc2UgJiYgZ2V0UHJvdG90eXBlT2Yoc291cmNlT2JqKTtcbiAgfSB3aGlsZSAoc291cmNlT2JqICYmICghZmlsdGVyIHx8IGZpbHRlcihzb3VyY2VPYmosIGRlc3RPYmopKSAmJiBzb3VyY2VPYmogIT09IE9iamVjdC5wcm90b3R5cGUpO1xuXG4gIHJldHVybiBkZXN0T2JqO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIHN0cmluZyBlbmRzIHdpdGggdGhlIGNoYXJhY3RlcnMgb2YgYSBzcGVjaWZpZWQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbj0gMF1cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgZW5kc1dpdGggPSAoc3RyLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSA9PiB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbiA+IHN0ci5sZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgY29uc3QgbGFzdEluZGV4ID0gc3RyLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbik7XG4gIHJldHVybiBsYXN0SW5kZXggIT09IC0xICYmIGxhc3RJbmRleCA9PT0gcG9zaXRpb247XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIG5ldyBhcnJheSBmcm9tIGFycmF5IGxpa2Ugb2JqZWN0IG9yIG51bGwgaWYgZmFpbGVkXG4gKlxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKlxuICogQHJldHVybnMgez9BcnJheX1cbiAqL1xuY29uc3QgdG9BcnJheSA9ICh0aGluZykgPT4ge1xuICBpZiAoIXRoaW5nKSByZXR1cm4gbnVsbDtcbiAgaWYgKGlzQXJyYXkodGhpbmcpKSByZXR1cm4gdGhpbmc7XG4gIGxldCBpID0gdGhpbmcubGVuZ3RoO1xuICBpZiAoIWlzTnVtYmVyKGkpKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8qKlxuICogQ2hlY2tpbmcgaWYgdGhlIFVpbnQ4QXJyYXkgZXhpc3RzIGFuZCBpZiBpdCBkb2VzLCBpdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgdGhlXG4gKiB0aGluZyBwYXNzZWQgaW4gaXMgYW4gaW5zdGFuY2Ugb2YgVWludDhBcnJheVxuICpcbiAqIEBwYXJhbSB7VHlwZWRBcnJheX1cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5jb25zdCBpc1R5cGVkQXJyYXkgPSAoVHlwZWRBcnJheSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiB0aGluZyA9PiB7XG4gICAgcmV0dXJuIFR5cGVkQXJyYXkgJiYgdGhpbmcgaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICB9O1xufSkodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4QXJyYXkpKTtcblxuLyoqXG4gKiBGb3IgZWFjaCBlbnRyeSBpbiB0aGUgb2JqZWN0LCBjYWxsIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBrZXkgYW5kIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGVudHJ5LlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBmb3JFYWNoRW50cnkgPSAob2JqLCBmbikgPT4ge1xuICBjb25zdCBnZW5lcmF0b3IgPSBvYmogJiYgb2JqW1N5bWJvbC5pdGVyYXRvcl07XG5cbiAgY29uc3QgaXRlcmF0b3IgPSBnZW5lcmF0b3IuY2FsbChvYmopO1xuXG4gIGxldCByZXN1bHQ7XG5cbiAgd2hpbGUgKChyZXN1bHQgPSBpdGVyYXRvci5uZXh0KCkpICYmICFyZXN1bHQuZG9uZSkge1xuICAgIGNvbnN0IHBhaXIgPSByZXN1bHQudmFsdWU7XG4gICAgZm4uY2FsbChvYmosIHBhaXJbMF0sIHBhaXJbMV0pO1xuICB9XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gYW5kIGEgc3RyaW5nLCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBhbGwgdGhlIG1hdGNoZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnRXhwIC0gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBhZ2FpbnN0LlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gc2VhcmNoLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheTxib29sZWFuPn1cbiAqL1xuY29uc3QgbWF0Y2hBbGwgPSAocmVnRXhwLCBzdHIpID0+IHtcbiAgbGV0IG1hdGNoZXM7XG4gIGNvbnN0IGFyciA9IFtdO1xuXG4gIHdoaWxlICgobWF0Y2hlcyA9IHJlZ0V4cC5leGVjKHN0cikpICE9PSBudWxsKSB7XG4gICAgYXJyLnB1c2gobWF0Y2hlcyk7XG4gIH1cblxuICByZXR1cm4gYXJyO1xufVxuXG4vKiBDaGVja2luZyBpZiB0aGUga2luZE9mVGVzdCBmdW5jdGlvbiByZXR1cm5zIHRydWUgd2hlbiBwYXNzZWQgYW4gSFRNTEZvcm1FbGVtZW50LiAqL1xuY29uc3QgaXNIVE1MRm9ybSA9IGtpbmRPZlRlc3QoJ0hUTUxGb3JtRWxlbWVudCcpO1xuXG5jb25zdCB0b0NhbWVsQ2FzZSA9IHN0ciA9PiB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9cXHNdKFthLXpcXGRdKShcXHcqKS9nLFxuICAgIGZ1bmN0aW9uIHJlcGxhY2VyKG0sIHAxLCBwMikge1xuICAgICAgcmV0dXJuIHAxLnRvVXBwZXJDYXNlKCkgKyBwMjtcbiAgICB9XG4gICk7XG59O1xuXG4vKiBDcmVhdGluZyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBjaGVjayBpZiBhbiBvYmplY3QgaGFzIGEgcHJvcGVydHkuICovXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9ICgoe2hhc093blByb3BlcnR5fSkgPT4gKG9iaiwgcHJvcCkgPT4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKShPYmplY3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUmVnRXhwID0ga2luZE9mVGVzdCgnUmVnRXhwJyk7XG5cbmNvbnN0IHJlZHVjZURlc2NyaXB0b3JzID0gKG9iaiwgcmVkdWNlcikgPT4ge1xuICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaik7XG4gIGNvbnN0IHJlZHVjZWREZXNjcmlwdG9ycyA9IHt9O1xuXG4gIGZvckVhY2goZGVzY3JpcHRvcnMsIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgbGV0IHJldDtcbiAgICBpZiAoKHJldCA9IHJlZHVjZXIoZGVzY3JpcHRvciwgbmFtZSwgb2JqKSkgIT09IGZhbHNlKSB7XG4gICAgICByZWR1Y2VkRGVzY3JpcHRvcnNbbmFtZV0gPSByZXQgfHwgZGVzY3JpcHRvcjtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgcmVkdWNlZERlc2NyaXB0b3JzKTtcbn1cblxuLyoqXG4gKiBNYWtlcyBhbGwgbWV0aG9kcyByZWFkLW9ubHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqL1xuXG5jb25zdCBmcmVlemVNZXRob2RzID0gKG9iaikgPT4ge1xuICByZWR1Y2VEZXNjcmlwdG9ycyhvYmosIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgLy8gc2tpcCByZXN0cmljdGVkIHByb3BzIGluIHN0cmljdCBtb2RlXG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSAmJiBbJ2FyZ3VtZW50cycsICdjYWxsZXInLCAnY2FsbGVlJ10uaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IG9ialtuYW1lXTtcblxuICAgIGlmICghaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybjtcblxuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKCd3cml0YWJsZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2FuIG5vdCByZXdyaXRlIHJlYWQtb25seSBtZXRob2QgXFwnJyArIG5hbWUgKyAnXFwnJyk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbmNvbnN0IHRvT2JqZWN0U2V0ID0gKGFycmF5T3JTdHJpbmcsIGRlbGltaXRlcikgPT4ge1xuICBjb25zdCBvYmogPSB7fTtcblxuICBjb25zdCBkZWZpbmUgPSAoYXJyKSA9PiB7XG4gICAgYXJyLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgb2JqW3ZhbHVlXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBpc0FycmF5KGFycmF5T3JTdHJpbmcpID8gZGVmaW5lKGFycmF5T3JTdHJpbmcpIDogZGVmaW5lKFN0cmluZyhhcnJheU9yU3RyaW5nKS5zcGxpdChkZWxpbWl0ZXIpKTtcblxuICByZXR1cm4gb2JqO1xufVxuXG5jb25zdCBub29wID0gKCkgPT4ge31cblxuY29uc3QgdG9GaW5pdGVOdW1iZXIgPSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkgPT4ge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBOdW1iZXIuaXNGaW5pdGUodmFsdWUgPSArdmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5cbi8qKlxuICogSWYgdGhlIHRoaW5nIGlzIGEgRm9ybURhdGEgb2JqZWN0LCByZXR1cm4gdHJ1ZSwgb3RoZXJ3aXNlIHJldHVybiBmYWxzZS5cbiAqXG4gKiBAcGFyYW0ge3Vua25vd259IHRoaW5nIC0gVGhlIHRoaW5nIHRvIGNoZWNrLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1NwZWNDb21wbGlhbnRGb3JtKHRoaW5nKSB7XG4gIHJldHVybiAhISh0aGluZyAmJiBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgdGhpbmdbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ0Zvcm1EYXRhJyAmJiB0aGluZ1tTeW1ib2wuaXRlcmF0b3JdKTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIHZpc2l0KG9iaiwgMCk7XG59XG5cbmNvbnN0IGlzQXN5bmNGbiA9IGtpbmRPZlRlc3QoJ0FzeW5jRnVuY3Rpb24nKTtcblxuY29uc3QgaXNUaGVuYWJsZSA9ICh0aGluZykgPT5cbiAgdGhpbmcgJiYgKGlzT2JqZWN0KHRoaW5nKSB8fCBpc0Z1bmN0aW9uKHRoaW5nKSkgJiYgaXNGdW5jdGlvbih0aGluZy50aGVuKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLmNhdGNoKTtcblxuLy8gb3JpZ2luYWwgY29kZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0RpZ2l0YWxCcmFpbkpTL0F4aW9zUHJvbWlzZS9ibG9iLzE2ZGVhYjEzNzEwZWMwOTc3OTkyMjEzMWYzZmE1OTU0MzIwZjgzYWIvbGliL3V0aWxzLmpzI0wxMS1MMzRcblxuY29uc3QgX3NldEltbWVkaWF0ZSA9ICgoc2V0SW1tZWRpYXRlU3VwcG9ydGVkLCBwb3N0TWVzc2FnZVN1cHBvcnRlZCkgPT4ge1xuICBpZiAoc2V0SW1tZWRpYXRlU3VwcG9ydGVkKSB7XG4gICAgcmV0dXJuIHNldEltbWVkaWF0ZTtcbiAgfVxuXG4gIHJldHVybiBwb3N0TWVzc2FnZVN1cHBvcnRlZCA/ICgodG9rZW4sIGNhbGxiYWNrcykgPT4ge1xuICAgIF9nbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgKHtzb3VyY2UsIGRhdGF9KSA9PiB7XG4gICAgICBpZiAoc291cmNlID09PSBfZ2xvYmFsICYmIGRhdGEgPT09IHRva2VuKSB7XG4gICAgICAgIGNhbGxiYWNrcy5sZW5ndGggJiYgY2FsbGJhY2tzLnNoaWZ0KCkoKTtcbiAgICAgIH1cbiAgICB9LCBmYWxzZSk7XG5cbiAgICByZXR1cm4gKGNiKSA9PiB7XG4gICAgICBjYWxsYmFja3MucHVzaChjYik7XG4gICAgICBfZ2xvYmFsLnBvc3RNZXNzYWdlKHRva2VuLCBcIipcIik7XG4gICAgfVxuICB9KShgYXhpb3NAJHtNYXRoLnJhbmRvbSgpfWAsIFtdKSA6IChjYikgPT4gc2V0VGltZW91dChjYik7XG59KShcbiAgdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJyxcbiAgaXNGdW5jdGlvbihfZ2xvYmFsLnBvc3RNZXNzYWdlKVxuKTtcblxuY29uc3QgYXNhcCA9IHR5cGVvZiBxdWV1ZU1pY3JvdGFzayAhPT0gJ3VuZGVmaW5lZCcgP1xuICBxdWV1ZU1pY3JvdGFzay5iaW5kKF9nbG9iYWwpIDogKCB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5uZXh0VGljayB8fCBfc2V0SW1tZWRpYXRlKTtcblxuLy8gKioqKioqKioqKioqKioqKioqKioqXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXIsXG4gIGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZyxcbiAgaXNOdW1iZXIsXG4gIGlzQm9vbGVhbixcbiAgaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3QsXG4gIGlzUmVhZGFibGVTdHJlYW0sXG4gIGlzUmVxdWVzdCxcbiAgaXNSZXNwb25zZSxcbiAgaXNIZWFkZXJzLFxuICBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlLFxuICBpc0ZpbGUsXG4gIGlzQmxvYixcbiAgaXNSZWdFeHAsXG4gIGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNUeXBlZEFycmF5LFxuICBpc0ZpbGVMaXN0LFxuICBmb3JFYWNoLFxuICBtZXJnZSxcbiAgZXh0ZW5kLFxuICB0cmltLFxuICBzdHJpcEJPTSxcbiAgaW5oZXJpdHMsXG4gIHRvRmxhdE9iamVjdCxcbiAga2luZE9mLFxuICBraW5kT2ZUZXN0LFxuICBlbmRzV2l0aCxcbiAgdG9BcnJheSxcbiAgZm9yRWFjaEVudHJ5LFxuICBtYXRjaEFsbCxcbiAgaXNIVE1MRm9ybSxcbiAgaGFzT3duUHJvcGVydHksXG4gIGhhc093blByb3A6IGhhc093blByb3BlcnR5LCAvLyBhbiBhbGlhcyB0byBhdm9pZCBFU0xpbnQgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIGRldGVjdGlvblxuICByZWR1Y2VEZXNjcmlwdG9ycyxcbiAgZnJlZXplTWV0aG9kcyxcbiAgdG9PYmplY3RTZXQsXG4gIHRvQ2FtZWxDYXNlLFxuICBub29wLFxuICB0b0Zpbml0ZU51bWJlcixcbiAgZmluZEtleSxcbiAgZ2xvYmFsOiBfZ2xvYmFsLFxuICBpc0NvbnRleHREZWZpbmVkLFxuICBpc1NwZWNDb21wbGlhbnRGb3JtLFxuICB0b0pTT05PYmplY3QsXG4gIGlzQXN5bmNGbixcbiAgaXNUaGVuYWJsZSxcbiAgc2V0SW1tZWRpYXRlOiBfc2V0SW1tZWRpYXRlLFxuICBhc2FwXG59O1xuIiwiPHRlbXBsYXRlPlxuICAgIDxuYXZpZ2F0aW9uPjwvbmF2aWdhdGlvbj5cbiAgICA8c2luZ2xlcG9zdGdvb2dsZW1hcD48L3NpbmdsZXBvc3Rnb29nbGVtYXA+XG4gICAgPG1haW5mb290ZXI+PC9tYWluZm9vdGVyPlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgTmF2aWdhdGlvbk1lbnUgZnJvbSAnLi9jb21wb25lbnRzL05hdmlnYXRpb25NZW51LnZ1ZSc7XG5pbXBvcnQgU2luZ2xlUG9zdEdvb2dsZU1hcCBmcm9tICcuL3BhZ2VzL1NpbmdsZVBvc3RHb29nbGVNYXAudnVlJ1xuaW1wb3J0IE1haW5Gb290ZXIgZnJvbSAnLi9jb21wb25lbnRzL0Zvb3Rlci52dWUnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICAnbmF2aWdhdGlvbic6IE5hdmlnYXRpb25NZW51LFxuICAgICdzaW5nbGVwb3N0Z29vZ2xlbWFwJyA6IFNpbmdsZVBvc3RHb29nbGVNYXAsXG4gICAgJ21haW5mb290ZXInIDogTWFpbkZvb3RlcixcbiAgfSxcbn07XG48L3NjcmlwdD4iLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImZvb3RlclwiPlxuICAgICAgICA8cD4gQ29weXJpZ2h0IMKpIDIwMjUgT3BlbmVkIFJhbmdlLiBBbGwgUmlnaHRzIFJlc2VydmVkLjwvcD5cblx0XHQgICAgPHVsIGNsYXNzPVwibmF2aWdhdGlvblwiPlxuXHRcdFx0XHRcdFx0PGxpIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiBsb2NhbF9kYXRhX3ByaW1hcnlfbWVudV9mb290ZXJcIj5cblx0XHRcdFx0XHRcdFx0XHQ8YSBjbGFzcz1cImxpbmstbGlnaHQgbGluay1vZmZzZXQtMiBsaW5rLXVuZGVybGluZS1vcGFjaXR5LTI1IGxpbmstdW5kZXJsaW5lLW9wYWNpdHktMTAwLWhvdmVyXCIgOmhyZWY9aXRlbS51cmwgdGFyZ2V0PVwiXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPnt7IGl0ZW0udGl0bGUgfX08L2E+XG5cdFx0XHRcdFx0XHQ8L2xpPlxuXHRcdFx0XHQ8L3VsPlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cblxuICAgIGV4cG9ydCBkZWZhdWx0IHtcblx0XHRuYW1lOiAnTWFpbiBGb290ZXInLFxuXHRcdGRhdGEoKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRsb2NhbF9kYXRhX3ByaW1hcnlfbWVudV9mb290ZXI6IHRoZW1lX3ZhcnNbJ21lbnVfZm9vdGVyJ10sXG5cdFx0XHRcdG1vYmlsZTogdHJ1ZSxcblx0XHRcdFx0bW9iaWxlRm9vdGVyOiBudWxsLFxuXHRcdFx0XHR3aW5kb3dXaWR0aDogbnVsbFxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Y3JlYXRlZCgpIHtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmNoZWNrU2NyZWVuKTtcblx0XHRcdHRoaXMuY2hlY2tTY3JlZW4oKTtcblx0XHR9LFxuXHRcdG1vdW50ZWQoKSB7XG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2tPdXRzaWRlRHJvcGRvd25NZW51KTtcblx0XHR9LFxuXHRcdGJlZm9yZVVubW91bnQoKSB7XG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlQ2xpY2tPdXRzaWRlRHJvcGRvd25NZW51KTtcblx0XHR9LFxuXHRcdG1ldGhvZHM6IHtcblx0XHRcdHRvZ2dsZW1vYmlsZUZvb3Rlcigpe1xuXHRcdFx0XHR0aGlzLm1vYmlsZUZvb3RlciA9ICF0aGlzLm1vYmlsZUZvb3Rlcjtcblx0XHRcdH0sXG5cdFx0XHRjaGVja1NjcmVlbigpe1xuXHRcdFx0XHR0aGlzLndpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG5cdFx0XHRcdGlmKHRoaXMud2luZG93V2lkdGggPD0gNzUwKXtcblx0XHRcdFx0XHR0aGlzLm1vYmlsZSA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5tb2JpbGUgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5tb2JpbGVGb290ZXIgPSBmYWxzZTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSxcblx0XHRcdGhhbmRsZUNsaWNrT3V0c2lkZURyb3Bkb3duTWVudShldmVudCl7XG5cdFx0XHRcdGlmIChldmVudC50YXJnZXQuaWQgIT09IFwibW9iaWxlLW5hdlwiICYmIGV2ZW50LnRhcmdldC5pZCAhPT0gXCJ0b2dnbGUtaWNvblwiICYmIGV2ZW50LnRhcmdldC5jbGFzc05hbWUgIT09IFwibGlua1wiICYmIGV2ZW50LnRhcmdldC5jbGFzc05hbWUgIT09IFwibGluay13cmFwcGVyXCIgICkge1xuXHRcdFx0XHRcdHRoaXMubW9iaWxlRm9vdGVyID0gZmFsc2U7XG5cdFx0XHRcdH0gXG5cdFx0XHR9XG5cdFx0fSxcbiAgICB9XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxuICAgIC5mb290ZXJ7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAwcHg7XG5cdFx0XHRcdHBhZGRpbmc6IDIwcHggMTVweDtcblx0XHRcdFx0Zm9udC1zaXplOiAxNHB4O1xuXG5cdFx0XHRcdHB7XG5cdFx0XHRcdFx0bWFyZ2luLWJvdHRvbTogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHVse1xuXHRcdFx0XHRcdGxpc3Qtc3R5bGU6IG5vbmU7XG5cdFx0XHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRcdFx0XHRmbGV4LXdyYXA6IHdyYXA7XG5cdFx0XHRcdFx0bWFyZ2luLXRvcDogMTBweDtcblx0XHRcdFx0XHRwYWRkaW5nOiAwcHg7XG5cdFx0XHRcdFx0bGl7XG5cdFx0XHRcdFx0XHRwYWRkaW5nOiA1cHggNXB4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRhe1xuXHRcdFx0XHRcdFx0cGFkZGluZzogMCA1cHg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG4gICAgfVxuPC9zdHlsZT4iLCI8dGVtcGxhdGU+XG48ZGl2IGlmPVwidHJ1ZVwiPlxuICAgIDxoZWFkZXI+XG4gICAgICAgIDxuYXY+XG4gICAgICAgICAgICA8YSBocmVmPVwiL1wiIHRhcmdldD1cIlwiIGNsYXNzPVwiZmxleCBpdGVtcy1jZW50ZXIgdGV4dC13aGl0ZSAhbm8tdW5kZXJsaW5lXCI+XG5cdFx0XHRcdFx0XHRcdDxpbWcgY2xhc3M9XCJ3LTE0IGgtMTQgbXItNFwiIHNyYz1cIi93cC1jb250ZW50L3RoZW1lcy90aW1iZXItc3RhcnRlci10aGVtZS9hc3NldHMvaW1hZ2VzL29mZmljaWFsLWxvZ28tdjEtZ3JlZW4tRE1hck5xVkoud2VicFwiIGFsdD1cIk9wZW5lZCBSYW5nZSBMb2dvXCI+XG5cdFx0XHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJmaXQtc2l6ZSBoLWF1dG8gZm9udC1ib2xkXCI+T3BlbmVkIFJhbmdlPC9kaXY+XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8dWwgdi1zaG93PVwiIW1vYmlsZVwiIGNsYXNzPVwibmF2aWdhdGlvblwiPlxuICAgICAgICAgICAgICAgIDxsaSB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gbG9jYWxfZGF0YV9wcmltYXJ5X21lbnVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJsaW5rLWxpZ2h0IGxpbmstb2Zmc2V0LTIgbGluay11bmRlcmxpbmUtb3BhY2l0eS0yNSBsaW5rLXVuZGVybGluZS1vcGFjaXR5LTEwMC1ob3ZlclwiIDpocmVmPWl0ZW0udXJsIHRhcmdldD1cIlwiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIj57eyBpdGVtLnRpdGxlIH19PC9hPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb25cIj5cbiAgICAgICAgICAgICAgICA8aSBpZD1cInRvZ2dsZS1pY29uXCIgQGNsaWNrPVwidG9nZ2xlTW9iaWxlTmF2XCIgIHYtc2hvdz1cIm1vYmlsZVwiIDpjbGFzcz1cInsnaWNvbi1hY3RpdmUnIDogbW9iaWxlTmF2IH1cIiAgY2xhc3M9XCJmYS1zb2xpZCBmYS1iYXJzXCI+PC9pPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8VHJhbnNpdGlvbiBpZD1cIm1vYmlsZS1uYXZcIiBuYW1lPVwibW9iaWxlLW5hdlwiPlxuICAgICAgICAgICAgICAgIDx1bCB2LXNob3c9XCJtb2JpbGVOYXZcIiBjbGFzcz1cImRyb3Bkb3duLW5hdlwiPlxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJsaW5rLXJhcHBlclwiIHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiBsb2NhbF9kYXRhX3ByaW1hcnlfbWVudVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJmaXQtc2l6ZSBoLWF1dG8gZm9udC1ib2xkIG5vLXVuZGVybGluZSBob3Zlcjp1bmRlcmxpbmUgdGV4dC1ibGFja1wiIDpocmVmPWl0ZW0udXJsIHRhcmdldD1cIlwiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIj57eyBpdGVtLnRpdGxlIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L1RyYW5zaXRpb24+XG4gICAgICAgIDwvbmF2PlxuICAgIDwvaGVhZGVyPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5hbWU6ICdNYWluIE5hdicsXG4gICAgZGF0YSgpIHtcblx0XHRcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvY2FsX2RhdGFfcHJpbWFyeV9tZW51OiB0aGVtZV92YXJzWydtZW51J10sXG4gICAgICAgICAgICBtb2JpbGU6IHRydWUsXG4gICAgICAgICAgICBtb2JpbGVOYXY6IG51bGwsXG4gICAgICAgICAgICB3aW5kb3dXaWR0aDogbnVsbFxuICAgICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGVkKCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5jaGVja1NjcmVlbik7XG4gICAgICAgIHRoaXMuY2hlY2tTY3JlZW4oKTtcbiAgICB9LFxuICAgIG1vdW50ZWQoKSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGlja091dHNpZGVEcm9wZG93bk1lbnUpO1xuICAgIH0sXG4gICAgYmVmb3JlVW5tb3VudCgpIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrT3V0c2lkZURyb3Bkb3duTWVudSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHRvZ2dsZU1vYmlsZU5hdigpe1xuICAgICAgICAgICAgdGhpcy5tb2JpbGVOYXYgPSAhdGhpcy5tb2JpbGVOYXY7XG4gICAgICAgIH0sXG4gICAgICAgIGNoZWNrU2NyZWVuKCl7XG4gICAgICAgICAgICB0aGlzLndpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgICBpZih0aGlzLndpbmRvd1dpZHRoIDw9IDc1MCl7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2JpbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5tb2JpbGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMubW9iaWxlTmF2ID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZUNsaWNrT3V0c2lkZURyb3Bkb3duTWVudShldmVudCl7XG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmlkICE9PSBcIm1vYmlsZS1uYXZcIiAmJiBldmVudC50YXJnZXQuaWQgIT09IFwidG9nZ2xlLWljb25cIiAmJiBldmVudC50YXJnZXQuY2xhc3NOYW1lICE9PSBcImxpbmtcIiAmJiBldmVudC50YXJnZXQuY2xhc3NOYW1lICE9PSBcImxpbmstd3JhcHBlclwiICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vYmlsZU5hdiA9IGZhbHNlO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgfVxuICAgIH0sXG59XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxuaGVhZGVye1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XG4gICAgbmF2e1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMCwwLDAsMC44KTtcbiAgICAgICAgei1pbmRleDogOTk7XG4gICAgICAgIHBhZGRpbmc6IDEycHggMDtcbiAgICAgICAgdHJhbnNpdGlvbjogMC41cyBlYXNlIGFsbDtcbiAgICAgICAgd2lkdGg6IDkyJTtcbiAgICAgICAgbWFyZ2luOiAwIGF1dG87XG4gICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDExNDBweCkge1xuICAgICAgICAgICAgbWF4LXdpZHRoOiAxMjgwcHg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAubmF2aWdhdGlvbntcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZmxleDogMTtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICB9XG5cblxuICAgIHVsLFxuICAgIC5saW5re1xuICAgICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICB9XG5cbiAgICBsaXtcbiAgICAgICAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG4gICAgICAgIHBhZGRpbmc6IDE2cHg7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxNnB4O1xuICAgIH1cblxuICAgIC5saW5re1xuICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgIHRyYW5zaXRpb246IDAuNXMgZWFzZSBhbGw7XG4gICAgICAgIHBhZGRpbmctYm90dG9tOiA0cHg7XG4gICAgICAgIGJvcmRlci1ib3R0b206IDRweDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgICBjb2xvcjogYmxhY2s7XG5cbiAgICAgICAgJjpob3ZlcntcbiAgICAgICAgICAgIGNvbG9yOiAjMDBhZmVhO1xuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAjMDBhZmVhO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLmZhLWJhcnN7XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICB9XG5cbiAgICAuaWNvbntcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIHJpZ2h0OiAwcHg7XG4gICAgICAgIGhlaWdodDogMTAwJTtcblxuICAgICAgICBpe1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogMC44cyBlYXNlIGFsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC5kcm9wZG93bi1uYXZ7XG4gICAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIG1heC13aWR0aDogMjUwcHg7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgbGVmdDogMDtcblxuICAgICAgICBsaXtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgICAgICAgICAgLmxpbmt7XG4gICAgICAgICAgICAgICAgY29sb3I6ICMwMDA7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC5pY29uLWFjdGl2ZXtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcbiAgICB9XG5cbiAgICAud2Vic2l0ZS10aXRsZS1sb2dve1xuICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgfVxuXG4gICAgLm1vYmlsZS1uYXYtZW50ZXItYWN0aXZlLFxuICAgIC5tb2JpbGUtbmF2LWxlYXZlLWFjdGl2ZXtcbiAgICAgICAgdHJhbnNpdGlvbjogMXMgZWFzZSBhbGw7XG4gICAgfVxuICAgIC5tb2JpbGUtbmF2LWxlYXZlLXRvLFxuICAgIC5tb2JpbGUtbmF2LWVudGVyLWZyb217XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC0yNTBweCk7XG4gICAgfVxuXG4gICAgLm1vYmlsZS1uYXYtZW50ZXItdG97XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKDApO1xuICAgIH1cblxufVxuPC9zdHlsZT4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgdi1pZj1cIiFsb2FkaW5nXCIgY2xhc3M9XCJtYXgtdy03eGwgbWF4LXhsOnByLTQgbWF4LXhsOnBsLTQgbWwtYXV0byBtci1hdXRvIHB0LTQgcGItNFwiPlxuICAgICAgPGFydGljbGUgY2xhc3M9XCJ3LTEvMVwiPlxuICAgICAgICA8c2VjdGlvbiBjbGFzcz1cImFydGljbGUtY29udGVudFwiPlxuICAgICAgICAgICAgPGgxIGNsYXNzPVwiYXJ0aWNsZS1oMVwiIHYtdGV4dD1cImdldF90aXRsZShwb3N0LnRpdGxlLnJlbmRlcmVkKVwiPjwvaDE+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXJ0aWNsZS1ib2R5XCI+XG4gICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJibG9jayBtYi0zXCIgaHJlZj1cInt7IGdvb2dsZURpcmVjdGlvbkxpbmsgIH19IFwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIj5cbiAgICAgICAgICAgICAgICAgIEFkZHJlc3M6ICB7eyBwb3N0LmFjZi5ndWlkZXNfbG9jYXRpb24uYWRkcmVzc319XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgIDxwIHYtaWY9XCJwb3N0LmFjZi5yZWdpc3RyYXRpb25cIj5SZWdpc3RyYXRpb246ICB7eyBwb3N0LmFjZi5yZWdpc3RyYXRpb24gfX08L3A+XG4gICAgICAgICAgICAgICAgPHAgdi1pZj1cInBvc3QuYWNmLnBob25lXCI+UGhvbmU6IHt7IHBvc3QuYWNmLnBob25lIH19PC9wPlxuICAgICAgICAgICAgICAgIDxwIHYtaWY9XCJwb3N0LmFjZi5odW50X3VuaXRzXCI+SHVudCBVbml0czoge3sgcG9zdC5hY2YuaHVudF91bml0cyB9fTwvcD5cbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImJsb2NrIG1iLTNcIiB2LWlmPVwicG9zdC5hY2Yud2Vic2l0ZVwiIGhyZWY9XCJ7eyBwb3N0LmFjZi53ZWJzaXRlIH19XCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPnt7IHBvc3QuYWNmLndlYnNpdGUgfX08L2E+XG4gICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwicG9zdC5hY2Yub3BlbmVkcmFuZ2VfdmVyaWZpZWRcIj5cbiAgICAgICAgICAgICAgICAgIDxwPk9wZW5lZFJhbmdlIFZlcmlmaWVkOiBZZXM8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiB2LWVsc2U+XG4gICAgICAgICAgICAgICAgICA8cD5PcGVuZWRSYW5nZSBWZXJpZmllZDogTm88L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICA8L2FydGljbGU+XG5cbiAgICAgIDxHb29nbGVNYXAgXG4gICAgOmFwaS1rZXk9XCJZT1VSX0dPT0dMRV9NQVBTX0FQSV9LRVlcIiBcbiAgICBzdHlsZT1cIndpZHRoOiAxMDAlOyBoZWlnaHQ6IDUwMHB4XCIgXG4gICAgOmNlbnRlcj1cImNlbnRlclwiIFxuICAgIDp6b29tPVwiMTVcIlxuICA+XG4gICAgPE1hcmtlciA6b3B0aW9ucz1cInsgcG9zaXRpb246IGNlbnRlciB9XCI+XG4gICAgICA8SW5mb1dpbmRvdz5cbiAgICAgICAgPGRpdiBpZD1cImNvbnRlbnRcIj5cbiAgICAgICAgICA8ZGl2IGlkPVwic2l0ZU5vdGljZVwiPjwvZGl2PlxuICAgICAgICAgIDxoMyBpZD1cImZpcnN0SGVhZGluZ1wiIGNsYXNzPVwiZmlyc3RIZWFkaW5nXCIgdi10ZXh0PVwiZ2V0X3RpdGxlKHBvc3QudGl0bGUucmVuZGVyZWQpXCI+PC9oMz5cbiAgICAgICAgICA8YSA6aHJlZj1cImdldEdvb2dsZU1hcHNEaXJlY3Rpb25zTGlua2UoKVwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIj5EaXJlY3Rpb25zPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvSW5mb1dpbmRvdz5cbiAgICA8L01hcmtlcj5cbiAgXG4gIDwvR29vZ2xlTWFwPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBHb29nbGVNYXAsIE1hcmtlciwgSW5mb1dpbmRvdyB9IGZyb20gXCJ2dWUzLWdvb2dsZS1tYXBcIjtcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogXCJHb29nbGVNYXBDb21wb25lbnRcIixcbiAgY29tcG9uZW50czoge1xuICAgIEdvb2dsZU1hcCxcbiAgICBNYXJrZXIsXG4gICAgSW5mb1dpbmRvd1xuICB9LFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGxvY2FsX2RhdGFfcG9zdF9pZDogdGhlbWVfdmFyc1snY3VycmVudF9wb3N0X2lkJ10sXG4gICAgICAgIHBvc3Q6IG51bGwsXG4gICAgICAgIFlPVVJfR09PR0xFX01BUFNfQVBJX0tFWTogcHJvY2Vzcy5lbnYuR09PR0xFX01BUFNfQVBJLCAvLyBSZXBsYWNlIHdpdGggeW91ciBhY3R1YWwgQVBJIGtleVxuICAgICAgICB0aXRsZTogbnVsbCxcbiAgICAgICAgYWRkcmVzczogXCIxMTUwIEUgQXJrYW5zYXMgQXZlLCBEZW52ZXIsIENPIDgwMjEwLCBVU0FcIixcbiAgICAgICAgY2VudGVyOiBudWxsLFxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgbWFwWm9vbTogMTAsXG4gICAgICAgIGluZm9XaW5kb3dQb3NpdGlvbjogeyBcbiAgICAgICAgICAgICAgICAgIGxhdDogbnVsbCwgXG4gICAgICAgICAgICAgICAgICBsbmc6IG51bGxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgaW5mb1dpbmRvd09wZW5lZDogZmFsc2UsXG4gICAgICAgIHNlbGVjdGVkTWFya2VyOiBudWxsLFxuICAgIH07XG4gIH0sXG4gIGFzeW5jIGNyZWF0ZWQoKSB7XG4gICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChgL3dwLWpzb24vd3AvdjIvZ3VpZGVzLyR7dGhpcy5sb2NhbF9kYXRhX3Bvc3RfaWR9YCk7XG4gICAgY29uc3QgcG9zdCA9IHJlc3BvbnNlLmRhdGE7XG4gICAgdGhpcy5jZW50ZXIgPSB7XG4gICAgICBsYXQ6IHBvc3QuYWNmLmd1aWRlc19sb2NhdGlvbi5sYXQsXG4gICAgICBsbmc6IHBvc3QuYWNmLmd1aWRlc19sb2NhdGlvbi5sbmcsXG4gICAgfTtcbiAgICB0aGlzLnBvc3QgPSBwb3N0O1xuICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIFxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgb3BlbkluZm9XaW5kb3coKSB7XG4gICAgICB0aGlzLmluZm9XaW5kb3dPcGVuZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgY2xvc2VJbmZvV2luZG93KCkge1xuICAgICAgdGhpcy5pbmZvV2luZG93T3BlbmVkID0gZmFsc2U7XG4gICAgfSxcbiAgICBnZXRfdGl0bGUoY3VycmVudF90aXRsZSl7XG4gICAgICBjb25zb2xlLmxvZyhjdXJyZW50X3RpdGxlKTtcbiAgICAgIGxldCB0aXRsZSA9IGN1cnJlbnRfdGl0bGUucmVwbGFjZShcIiYjODIxMTtcIiwgXCItXCIpO1xuICAgICAgcmV0dXJuIHRpdGxlO1xuICAgIH0sXG4gICAgZ2V0R29vZ2xlTWFwc0RpcmVjdGlvbnNMaW5rZSgpe1xuICAgICAgcmV0dXJuIGBodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvZGlyLz9hcGk9MSZkZXN0aW5hdGlvbj0ke3RoaXMuYWRkcmVzc31gO1xuICAgIH1cbiAgfSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxuICAgIC5mb290ZXJ7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgfVxuPC9zdHlsZT4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIHJ1bnRpbWUgaGVscGVyIGZvciBzZXR0aW5nIHByb3BlcnRpZXMgb24gY29tcG9uZW50c1xuLy8gaW4gYSB0cmVlLXNoYWthYmxlIHdheVxuZXhwb3J0cy5kZWZhdWx0ID0gKHNmYywgcHJvcHMpID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSBzZmMuX192Y2NPcHRzIHx8IHNmYztcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgcHJvcHMpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59O1xuIiwiLyoqXG4qIHZ1ZSB2My41LjEzXG4qIChjKSAyMDE4LXByZXNlbnQgWXV4aSAoRXZhbikgWW91IGFuZCBWdWUgY29udHJpYnV0b3JzXG4qIEBsaWNlbnNlIE1JVFxuKiovXG4vKiEgI19fTk9fU0lERV9FRkZFQ1RTX18gKi9cbi8vIEBfX05PX1NJREVfRUZGRUNUU19fXG5mdW5jdGlvbiBtYWtlTWFwKHN0cikge1xuICBjb25zdCBtYXAgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZm9yIChjb25zdCBrZXkgb2Ygc3RyLnNwbGl0KFwiLFwiKSkgbWFwW2tleV0gPSAxO1xuICByZXR1cm4gKHZhbCkgPT4gdmFsIGluIG1hcDtcbn1cblxuY29uc3QgRU1QVFlfT0JKID0gT2JqZWN0LmZyZWV6ZSh7fSkgO1xuY29uc3QgRU1QVFlfQVJSID0gT2JqZWN0LmZyZWV6ZShbXSkgO1xuY29uc3QgTk9PUCA9ICgpID0+IHtcbn07XG5jb25zdCBOTyA9ICgpID0+IGZhbHNlO1xuY29uc3QgaXNPbiA9IChrZXkpID0+IGtleS5jaGFyQ29kZUF0KDApID09PSAxMTEgJiYga2V5LmNoYXJDb2RlQXQoMSkgPT09IDExMCAmJiAvLyB1cHBlcmNhc2UgbGV0dGVyXG4oa2V5LmNoYXJDb2RlQXQoMikgPiAxMjIgfHwga2V5LmNoYXJDb2RlQXQoMikgPCA5Nyk7XG5jb25zdCBpc01vZGVsTGlzdGVuZXIgPSAoa2V5KSA9PiBrZXkuc3RhcnRzV2l0aChcIm9uVXBkYXRlOlwiKTtcbmNvbnN0IGV4dGVuZCA9IE9iamVjdC5hc3NpZ247XG5jb25zdCByZW1vdmUgPSAoYXJyLCBlbCkgPT4ge1xuICBjb25zdCBpID0gYXJyLmluZGV4T2YoZWwpO1xuICBpZiAoaSA+IC0xKSB7XG4gICAgYXJyLnNwbGljZShpLCAxKTtcbiAgfVxufTtcbmNvbnN0IGhhc093blByb3BlcnR5JDEgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuY29uc3QgaGFzT3duID0gKHZhbCwga2V5KSA9PiBoYXNPd25Qcm9wZXJ0eSQxLmNhbGwodmFsLCBrZXkpO1xuY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5jb25zdCBpc01hcCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSBcIltvYmplY3QgTWFwXVwiO1xuY29uc3QgaXNTZXQgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gXCJbb2JqZWN0IFNldF1cIjtcbmNvbnN0IGlzRGF0ZSA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSBcIltvYmplY3QgRGF0ZV1cIjtcbmNvbnN0IGlzUmVnRXhwID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09IFwiW29iamVjdCBSZWdFeHBdXCI7XG5jb25zdCBpc0Z1bmN0aW9uID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiO1xuY29uc3QgaXNTdHJpbmcgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiO1xuY29uc3QgaXNTeW1ib2wgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcInN5bWJvbFwiO1xuY29uc3QgaXNPYmplY3QgPSAodmFsKSA9PiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIjtcbmNvbnN0IGlzUHJvbWlzZSA9ICh2YWwpID0+IHtcbiAgcmV0dXJuIChpc09iamVjdCh2YWwpIHx8IGlzRnVuY3Rpb24odmFsKSkgJiYgaXNGdW5jdGlvbih2YWwudGhlbikgJiYgaXNGdW5jdGlvbih2YWwuY2F0Y2gpO1xufTtcbmNvbnN0IG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmNvbnN0IHRvVHlwZVN0cmluZyA9ICh2YWx1ZSkgPT4gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5jb25zdCB0b1Jhd1R5cGUgPSAodmFsdWUpID0+IHtcbiAgcmV0dXJuIHRvVHlwZVN0cmluZyh2YWx1ZSkuc2xpY2UoOCwgLTEpO1xufTtcbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIjtcbmNvbnN0IGlzSW50ZWdlcktleSA9IChrZXkpID0+IGlzU3RyaW5nKGtleSkgJiYga2V5ICE9PSBcIk5hTlwiICYmIGtleVswXSAhPT0gXCItXCIgJiYgXCJcIiArIHBhcnNlSW50KGtleSwgMTApID09PSBrZXk7XG5jb25zdCBpc1Jlc2VydmVkUHJvcCA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFxuICAvLyB0aGUgbGVhZGluZyBjb21tYSBpcyBpbnRlbnRpb25hbCBzbyBlbXB0eSBzdHJpbmcgXCJcIiBpcyBhbHNvIGluY2x1ZGVkXG4gIFwiLGtleSxyZWYscmVmX2ZvcixyZWZfa2V5LG9uVm5vZGVCZWZvcmVNb3VudCxvblZub2RlTW91bnRlZCxvblZub2RlQmVmb3JlVXBkYXRlLG9uVm5vZGVVcGRhdGVkLG9uVm5vZGVCZWZvcmVVbm1vdW50LG9uVm5vZGVVbm1vdW50ZWRcIlxuKTtcbmNvbnN0IGlzQnVpbHRJbkRpcmVjdGl2ZSA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFxuICBcImJpbmQsY2xvYWssZWxzZS1pZixlbHNlLGZvcixodG1sLGlmLG1vZGVsLG9uLG9uY2UscHJlLHNob3csc2xvdCx0ZXh0LG1lbW9cIlxuKTtcbmNvbnN0IGNhY2hlU3RyaW5nRnVuY3Rpb24gPSAoZm4pID0+IHtcbiAgY29uc3QgY2FjaGUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChzdHIpID0+IHtcbiAgICBjb25zdCBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKTtcbiAgfTtcbn07XG5jb25zdCBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xuY29uc3QgY2FtZWxpemUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKFxuICAoc3RyKSA9PiB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIChfLCBjKSA9PiBjID8gYy50b1VwcGVyQ2FzZSgpIDogXCJcIik7XG4gIH1cbik7XG5jb25zdCBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG5jb25zdCBoeXBoZW5hdGUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKFxuICAoc3RyKSA9PiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgXCItJDFcIikudG9Mb3dlckNhc2UoKVxuKTtcbmNvbnN0IGNhcGl0YWxpemUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn0pO1xuY29uc3QgdG9IYW5kbGVyS2V5ID0gY2FjaGVTdHJpbmdGdW5jdGlvbihcbiAgKHN0cikgPT4ge1xuICAgIGNvbnN0IHMgPSBzdHIgPyBgb24ke2NhcGl0YWxpemUoc3RyKX1gIDogYGA7XG4gICAgcmV0dXJuIHM7XG4gIH1cbik7XG5jb25zdCBoYXNDaGFuZ2VkID0gKHZhbHVlLCBvbGRWYWx1ZSkgPT4gIU9iamVjdC5pcyh2YWx1ZSwgb2xkVmFsdWUpO1xuY29uc3QgaW52b2tlQXJyYXlGbnMgPSAoZm5zLCAuLi5hcmcpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICBmbnNbaV0oLi4uYXJnKTtcbiAgfVxufTtcbmNvbnN0IGRlZiA9IChvYmosIGtleSwgdmFsdWUsIHdyaXRhYmxlID0gZmFsc2UpID0+IHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlLFxuICAgIHZhbHVlXG4gIH0pO1xufTtcbmNvbnN0IGxvb3NlVG9OdW1iZXIgPSAodmFsKSA9PiB7XG4gIGNvbnN0IG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG47XG59O1xuY29uc3QgdG9OdW1iZXIgPSAodmFsKSA9PiB7XG4gIGNvbnN0IG4gPSBpc1N0cmluZyh2YWwpID8gTnVtYmVyKHZhbCkgOiBOYU47XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG47XG59O1xubGV0IF9nbG9iYWxUaGlzO1xuY29uc3QgZ2V0R2xvYmFsVGhpcyA9ICgpID0+IHtcbiAgcmV0dXJuIF9nbG9iYWxUaGlzIHx8IChfZ2xvYmFsVGhpcyA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDoge30pO1xufTtcbmZ1bmN0aW9uIGdlbkNhY2hlS2V5KHNvdXJjZSwgb3B0aW9ucykge1xuICByZXR1cm4gc291cmNlICsgSlNPTi5zdHJpbmdpZnkoXG4gICAgb3B0aW9ucyxcbiAgICAoXywgdmFsKSA9PiB0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIgPyB2YWwudG9TdHJpbmcoKSA6IHZhbFxuICApO1xufVxuXG5jb25zdCBQYXRjaEZsYWdOYW1lcyA9IHtcbiAgWzFdOiBgVEVYVGAsXG4gIFsyXTogYENMQVNTYCxcbiAgWzRdOiBgU1RZTEVgLFxuICBbOF06IGBQUk9QU2AsXG4gIFsxNl06IGBGVUxMX1BST1BTYCxcbiAgWzMyXTogYE5FRURfSFlEUkFUSU9OYCxcbiAgWzY0XTogYFNUQUJMRV9GUkFHTUVOVGAsXG4gIFsxMjhdOiBgS0VZRURfRlJBR01FTlRgLFxuICBbMjU2XTogYFVOS0VZRURfRlJBR01FTlRgLFxuICBbNTEyXTogYE5FRURfUEFUQ0hgLFxuICBbMTAyNF06IGBEWU5BTUlDX1NMT1RTYCxcbiAgWzIwNDhdOiBgREVWX1JPT1RfRlJBR01FTlRgLFxuICBbLTFdOiBgSE9JU1RFRGAsXG4gIFstMl06IGBCQUlMYFxufTtcblxuY29uc3Qgc2xvdEZsYWdzVGV4dCA9IHtcbiAgWzFdOiBcIlNUQUJMRVwiLFxuICBbMl06IFwiRFlOQU1JQ1wiLFxuICBbM106IFwiRk9SV0FSREVEXCJcbn07XG5cbmNvbnN0IEdMT0JBTFNfQUxMT1dFRCA9IFwiSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTixwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCxNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsQmlnSW50LGNvbnNvbGUsRXJyb3IsU3ltYm9sXCI7XG5jb25zdCBpc0dsb2JhbGx5QWxsb3dlZCA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKEdMT0JBTFNfQUxMT1dFRCk7XG5cbmNvbnN0IHJhbmdlID0gMjtcbmZ1bmN0aW9uIGdlbmVyYXRlQ29kZUZyYW1lKHNvdXJjZSwgc3RhcnQgPSAwLCBlbmQgPSBzb3VyY2UubGVuZ3RoKSB7XG4gIHN0YXJ0ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oc3RhcnQsIHNvdXJjZS5sZW5ndGgpKTtcbiAgZW5kID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oZW5kLCBzb3VyY2UubGVuZ3RoKSk7XG4gIGlmIChzdGFydCA+IGVuZCkgcmV0dXJuIFwiXCI7XG4gIGxldCBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvKFxccj9cXG4pLyk7XG4gIGNvbnN0IG5ld2xpbmVTZXF1ZW5jZXMgPSBsaW5lcy5maWx0ZXIoKF8sIGlkeCkgPT4gaWR4ICUgMiA9PT0gMSk7XG4gIGxpbmVzID0gbGluZXMuZmlsdGVyKChfLCBpZHgpID0+IGlkeCAlIDIgPT09IDApO1xuICBsZXQgY291bnQgPSAwO1xuICBjb25zdCByZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGNvdW50ICs9IGxpbmVzW2ldLmxlbmd0aCArIChuZXdsaW5lU2VxdWVuY2VzW2ldICYmIG5ld2xpbmVTZXF1ZW5jZXNbaV0ubGVuZ3RoIHx8IDApO1xuICAgIGlmIChjb3VudCA+PSBzdGFydCkge1xuICAgICAgZm9yIChsZXQgaiA9IGkgLSByYW5nZTsgaiA8PSBpICsgcmFuZ2UgfHwgZW5kID4gY291bnQ7IGorKykge1xuICAgICAgICBpZiAoaiA8IDAgfHwgaiA+PSBsaW5lcy5sZW5ndGgpIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBsaW5lID0gaiArIDE7XG4gICAgICAgIHJlcy5wdXNoKFxuICAgICAgICAgIGAke2xpbmV9JHtcIiBcIi5yZXBlYXQoTWF0aC5tYXgoMyAtIFN0cmluZyhsaW5lKS5sZW5ndGgsIDApKX18ICAke2xpbmVzW2pdfWBcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbGluZUxlbmd0aCA9IGxpbmVzW2pdLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbmV3TGluZVNlcUxlbmd0aCA9IG5ld2xpbmVTZXF1ZW5jZXNbal0gJiYgbmV3bGluZVNlcXVlbmNlc1tqXS5sZW5ndGggfHwgMDtcbiAgICAgICAgaWYgKGogPT09IGkpIHtcbiAgICAgICAgICBjb25zdCBwYWQgPSBzdGFydCAtIChjb3VudCAtIChsaW5lTGVuZ3RoICsgbmV3TGluZVNlcUxlbmd0aCkpO1xuICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIGVuZCA+IGNvdW50ID8gbGluZUxlbmd0aCAtIHBhZCA6IGVuZCAtIHN0YXJ0XG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArIFwiIFwiLnJlcGVhdChwYWQpICsgXCJeXCIucmVwZWF0KGxlbmd0aCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGogPiBpKSB7XG4gICAgICAgICAgaWYgKGVuZCA+IGNvdW50KSB7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heChNYXRoLm1pbihlbmQgLSBjb3VudCwgbGluZUxlbmd0aCksIDEpO1xuICAgICAgICAgICAgcmVzLnB1c2goYCAgIHwgIGAgKyBcIl5cIi5yZXBlYXQobGVuZ3RoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvdW50ICs9IGxpbmVMZW5ndGggKyBuZXdMaW5lU2VxTGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcy5qb2luKFwiXFxuXCIpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZSh2YWx1ZSkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBjb25zdCByZXMgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gdmFsdWVbaV07XG4gICAgICBjb25zdCBub3JtYWxpemVkID0gaXNTdHJpbmcoaXRlbSkgPyBwYXJzZVN0cmluZ1N0eWxlKGl0ZW0pIDogbm9ybWFsaXplU3R5bGUoaXRlbSk7XG4gICAgICBpZiAobm9ybWFsaXplZCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBub3JtYWxpemVkKSB7XG4gICAgICAgICAgcmVzW2tleV0gPSBub3JtYWxpemVkW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfSBlbHNlIGlmIChpc1N0cmluZyh2YWx1ZSkgfHwgaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5jb25zdCBsaXN0RGVsaW1pdGVyUkUgPSAvOyg/IVteKF0qXFwpKS9nO1xuY29uc3QgcHJvcGVydHlEZWxpbWl0ZXJSRSA9IC86KFteXSspLztcbmNvbnN0IHN0eWxlQ29tbWVudFJFID0gL1xcL1xcKlteXSo/XFwqXFwvL2c7XG5mdW5jdGlvbiBwYXJzZVN0cmluZ1N0eWxlKGNzc1RleHQpIHtcbiAgY29uc3QgcmV0ID0ge307XG4gIGNzc1RleHQucmVwbGFjZShzdHlsZUNvbW1lbnRSRSwgXCJcIikuc3BsaXQobGlzdERlbGltaXRlclJFKS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGNvbnN0IHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXJSRSk7XG4gICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmV0W3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVN0eWxlKHN0eWxlcykge1xuICBpZiAoIXN0eWxlcykgcmV0dXJuIFwiXCI7XG4gIGlmIChpc1N0cmluZyhzdHlsZXMpKSByZXR1cm4gc3R5bGVzO1xuICBsZXQgcmV0ID0gXCJcIjtcbiAgZm9yIChjb25zdCBrZXkgaW4gc3R5bGVzKSB7XG4gICAgY29uc3QgdmFsdWUgPSBzdHlsZXNba2V5XTtcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGtleS5zdGFydHNXaXRoKGAtLWApID8ga2V5IDogaHlwaGVuYXRlKGtleSk7XG4gICAgICByZXQgKz0gYCR7bm9ybWFsaXplZEtleX06JHt2YWx1ZX07YDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNsYXNzKHZhbHVlKSB7XG4gIGxldCByZXMgPSBcIlwiO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgcmVzID0gdmFsdWU7XG4gIH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplQ2xhc3ModmFsdWVbaV0pO1xuICAgICAgaWYgKG5vcm1hbGl6ZWQpIHtcbiAgICAgICAgcmVzICs9IG5vcm1hbGl6ZWQgKyBcIiBcIjtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWVbbmFtZV0pIHtcbiAgICAgICAgcmVzICs9IG5hbWUgKyBcIiBcIjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcy50cmltKCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyhwcm9wcykge1xuICBpZiAoIXByb3BzKSByZXR1cm4gbnVsbDtcbiAgbGV0IHsgY2xhc3M6IGtsYXNzLCBzdHlsZSB9ID0gcHJvcHM7XG4gIGlmIChrbGFzcyAmJiAhaXNTdHJpbmcoa2xhc3MpKSB7XG4gICAgcHJvcHMuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhrbGFzcyk7XG4gIH1cbiAgaWYgKHN0eWxlKSB7XG4gICAgcHJvcHMuc3R5bGUgPSBub3JtYWxpemVTdHlsZShzdHlsZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BzO1xufVxuXG5jb25zdCBIVE1MX1RBR1MgPSBcImh0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLGFkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGhncm91cCxoMSxoMixoMyxoNCxoNSxoNixuYXYsc2VjdGlvbixkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCxhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnVieSxzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbyxlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucyxjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0cixidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLG91dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsZGV0YWlscyxkaWFsb2csbWVudSxzdW1tYXJ5LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290XCI7XG5jb25zdCBTVkdfVEFHUyA9IFwic3ZnLGFuaW1hdGUsYW5pbWF0ZU1vdGlvbixhbmltYXRlVHJhbnNmb3JtLGNpcmNsZSxjbGlwUGF0aCxjb2xvci1wcm9maWxlLGRlZnMsZGVzYyxkaXNjYXJkLGVsbGlwc2UsZmVCbGVuZCxmZUNvbG9yTWF0cml4LGZlQ29tcG9uZW50VHJhbnNmZXIsZmVDb21wb3NpdGUsZmVDb252b2x2ZU1hdHJpeCxmZURpZmZ1c2VMaWdodGluZyxmZURpc3BsYWNlbWVudE1hcCxmZURpc3RhbnRMaWdodCxmZURyb3BTaGFkb3csZmVGbG9vZCxmZUZ1bmNBLGZlRnVuY0IsZmVGdW5jRyxmZUZ1bmNSLGZlR2F1c3NpYW5CbHVyLGZlSW1hZ2UsZmVNZXJnZSxmZU1lcmdlTm9kZSxmZU1vcnBob2xvZ3ksZmVPZmZzZXQsZmVQb2ludExpZ2h0LGZlU3BlY3VsYXJMaWdodGluZyxmZVNwb3RMaWdodCxmZVRpbGUsZmVUdXJidWxlbmNlLGZpbHRlcixmb3JlaWduT2JqZWN0LGcsaGF0Y2gsaGF0Y2hwYXRoLGltYWdlLGxpbmUsbGluZWFyR3JhZGllbnQsbWFya2VyLG1hc2ssbWVzaCxtZXNoZ3JhZGllbnQsbWVzaHBhdGNoLG1lc2hyb3csbWV0YWRhdGEsbXBhdGgscGF0aCxwYXR0ZXJuLHBvbHlnb24scG9seWxpbmUscmFkaWFsR3JhZGllbnQscmVjdCxzZXQsc29saWRjb2xvcixzdG9wLHN3aXRjaCxzeW1ib2wsdGV4dCx0ZXh0UGF0aCx0aXRsZSx0c3Bhbix1bmtub3duLHVzZSx2aWV3XCI7XG5jb25zdCBNQVRIX1RBR1MgPSBcImFubm90YXRpb24sYW5ub3RhdGlvbi14bWwsbWFjdGlvbixtYWxpZ25ncm91cCxtYWxpZ25tYXJrLG1hdGgsbWVuY2xvc2UsbWVycm9yLG1mZW5jZWQsbWZyYWMsbWZyYWN0aW9uLG1nbHlwaCxtaSxtbGFiZWxlZHRyLG1sb25nZGl2LG1tdWx0aXNjcmlwdHMsbW4sbW8sbW92ZXIsbXBhZGRlZCxtcGhhbnRvbSxtcHJlc2NyaXB0cyxtcm9vdCxtcm93LG1zLG1zY2Fycmllcyxtc2NhcnJ5LG1zZ3JvdXAsbXNsaW5lLG1zcGFjZSxtc3FydCxtc3Jvdyxtc3RhY2ssbXN0eWxlLG1zdWIsbXN1YnN1cCxtc3VwLG10YWJsZSxtdGQsbXRleHQsbXRyLG11bmRlcixtdW5kZXJvdmVyLG5vbmUsc2VtYW50aWNzXCI7XG5jb25zdCBWT0lEX1RBR1MgPSBcImFyZWEsYmFzZSxicixjb2wsZW1iZWQsaHIsaW1nLGlucHV0LGxpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyXCI7XG5jb25zdCBpc0hUTUxUYWcgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChIVE1MX1RBR1MpO1xuY29uc3QgaXNTVkdUYWcgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChTVkdfVEFHUyk7XG5jb25zdCBpc01hdGhNTFRhZyA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKE1BVEhfVEFHUyk7XG5jb25zdCBpc1ZvaWRUYWcgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChWT0lEX1RBR1MpO1xuXG5jb25zdCBzcGVjaWFsQm9vbGVhbkF0dHJzID0gYGl0ZW1zY29wZSxhbGxvd2Z1bGxzY3JlZW4sZm9ybW5vdmFsaWRhdGUsaXNtYXAsbm9tb2R1bGUsbm92YWxpZGF0ZSxyZWFkb25seWA7XG5jb25zdCBpc1NwZWNpYWxCb29sZWFuQXR0ciA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKHNwZWNpYWxCb29sZWFuQXR0cnMpO1xuY29uc3QgaXNCb29sZWFuQXR0ciA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFxuICBzcGVjaWFsQm9vbGVhbkF0dHJzICsgYCxhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY29udHJvbHMsZGVmYXVsdCxkZWZlcixkaXNhYmxlZCxoaWRkZW4saW5lcnQsbG9vcCxvcGVuLHJlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxjaGVja2VkLG11dGVkLG11bHRpcGxlLHNlbGVjdGVkYFxuKTtcbmZ1bmN0aW9uIGluY2x1ZGVCb29sZWFuQXR0cih2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSB8fCB2YWx1ZSA9PT0gXCJcIjtcbn1cbmNvbnN0IGlzS25vd25IdG1sQXR0ciA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFxuICBgYWNjZXB0LGFjY2VwdC1jaGFyc2V0LGFjY2Vzc2tleSxhY3Rpb24sYWxpZ24sYWxsb3csYWx0LGFzeW5jLGF1dG9jYXBpdGFsaXplLGF1dG9jb21wbGV0ZSxhdXRvZm9jdXMsYXV0b3BsYXksYmFja2dyb3VuZCxiZ2NvbG9yLGJvcmRlcixidWZmZXJlZCxjYXB0dXJlLGNoYWxsZW5nZSxjaGFyc2V0LGNoZWNrZWQsY2l0ZSxjbGFzcyxjb2RlLGNvZGViYXNlLGNvbG9yLGNvbHMsY29sc3Bhbixjb250ZW50LGNvbnRlbnRlZGl0YWJsZSxjb250ZXh0bWVudSxjb250cm9scyxjb29yZHMsY3Jvc3NvcmlnaW4sY3NwLGRhdGEsZGF0ZXRpbWUsZGVjb2RpbmcsZGVmYXVsdCxkZWZlcixkaXIsZGlybmFtZSxkaXNhYmxlZCxkb3dubG9hZCxkcmFnZ2FibGUsZHJvcHpvbmUsZW5jdHlwZSxlbnRlcmtleWhpbnQsZm9yLGZvcm0sZm9ybWFjdGlvbixmb3JtZW5jdHlwZSxmb3JtbWV0aG9kLGZvcm1ub3ZhbGlkYXRlLGZvcm10YXJnZXQsaGVhZGVycyxoZWlnaHQsaGlkZGVuLGhpZ2gsaHJlZixocmVmbGFuZyxodHRwLWVxdWl2LGljb24saWQsaW1wb3J0YW5jZSxpbmVydCxpbnRlZ3JpdHksaXNtYXAsaXRlbXByb3Asa2V5dHlwZSxraW5kLGxhYmVsLGxhbmcsbGFuZ3VhZ2UsbG9hZGluZyxsaXN0LGxvb3AsbG93LG1hbmlmZXN0LG1heCxtYXhsZW5ndGgsbWlubGVuZ3RoLG1lZGlhLG1pbixtdWx0aXBsZSxtdXRlZCxuYW1lLG5vdmFsaWRhdGUsb3BlbixvcHRpbXVtLHBhdHRlcm4scGluZyxwbGFjZWhvbGRlcixwb3N0ZXIscHJlbG9hZCxyYWRpb2dyb3VwLHJlYWRvbmx5LHJlZmVycmVycG9saWN5LHJlbCxyZXF1aXJlZCxyZXZlcnNlZCxyb3dzLHJvd3NwYW4sc2FuZGJveCxzY29wZSxzY29wZWQsc2VsZWN0ZWQsc2hhcGUsc2l6ZSxzaXplcyxzbG90LHNwYW4sc3BlbGxjaGVjayxzcmMsc3JjZG9jLHNyY2xhbmcsc3Jjc2V0LHN0YXJ0LHN0ZXAsc3R5bGUsc3VtbWFyeSx0YWJpbmRleCx0YXJnZXQsdGl0bGUsdHJhbnNsYXRlLHR5cGUsdXNlbWFwLHZhbHVlLHdpZHRoLHdyYXBgXG4pO1xuY29uc3QgaXNLbm93blN2Z0F0dHIgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgYHhtbG5zLGFjY2VudC1oZWlnaHQsYWNjdW11bGF0ZSxhZGRpdGl2ZSxhbGlnbm1lbnQtYmFzZWxpbmUsYWxwaGFiZXRpYyxhbXBsaXR1ZGUsYXJhYmljLWZvcm0sYXNjZW50LGF0dHJpYnV0ZU5hbWUsYXR0cmlidXRlVHlwZSxhemltdXRoLGJhc2VGcmVxdWVuY3ksYmFzZWxpbmUtc2hpZnQsYmFzZVByb2ZpbGUsYmJveCxiZWdpbixiaWFzLGJ5LGNhbGNNb2RlLGNhcC1oZWlnaHQsY2xhc3MsY2xpcCxjbGlwUGF0aFVuaXRzLGNsaXAtcGF0aCxjbGlwLXJ1bGUsY29sb3IsY29sb3ItaW50ZXJwb2xhdGlvbixjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMsY29sb3ItcHJvZmlsZSxjb2xvci1yZW5kZXJpbmcsY29udGVudFNjcmlwdFR5cGUsY29udGVudFN0eWxlVHlwZSxjcm9zc29yaWdpbixjdXJzb3IsY3gsY3ksZCxkZWNlbGVyYXRlLGRlc2NlbnQsZGlmZnVzZUNvbnN0YW50LGRpcmVjdGlvbixkaXNwbGF5LGRpdmlzb3IsZG9taW5hbnQtYmFzZWxpbmUsZHVyLGR4LGR5LGVkZ2VNb2RlLGVsZXZhdGlvbixlbmFibGUtYmFja2dyb3VuZCxlbmQsZXhwb25lbnQsZmlsbCxmaWxsLW9wYWNpdHksZmlsbC1ydWxlLGZpbHRlcixmaWx0ZXJSZXMsZmlsdGVyVW5pdHMsZmxvb2QtY29sb3IsZmxvb2Qtb3BhY2l0eSxmb250LWZhbWlseSxmb250LXNpemUsZm9udC1zaXplLWFkanVzdCxmb250LXN0cmV0Y2gsZm9udC1zdHlsZSxmb250LXZhcmlhbnQsZm9udC13ZWlnaHQsZm9ybWF0LGZyb20sZnIsZngsZnksZzEsZzIsZ2x5cGgtbmFtZSxnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsLGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsLGdseXBoUmVmLGdyYWRpZW50VHJhbnNmb3JtLGdyYWRpZW50VW5pdHMsaGFuZ2luZyxoZWlnaHQsaHJlZixocmVmbGFuZyxob3Jpei1hZHYteCxob3Jpei1vcmlnaW4teCxpZCxpZGVvZ3JhcGhpYyxpbWFnZS1yZW5kZXJpbmcsaW4saW4yLGludGVyY2VwdCxrLGsxLGsyLGszLGs0LGtlcm5lbE1hdHJpeCxrZXJuZWxVbml0TGVuZ3RoLGtlcm5pbmcsa2V5UG9pbnRzLGtleVNwbGluZXMsa2V5VGltZXMsbGFuZyxsZW5ndGhBZGp1c3QsbGV0dGVyLXNwYWNpbmcsbGlnaHRpbmctY29sb3IsbGltaXRpbmdDb25lQW5nbGUsbG9jYWwsbWFya2VyLWVuZCxtYXJrZXItbWlkLG1hcmtlci1zdGFydCxtYXJrZXJIZWlnaHQsbWFya2VyVW5pdHMsbWFya2VyV2lkdGgsbWFzayxtYXNrQ29udGVudFVuaXRzLG1hc2tVbml0cyxtYXRoZW1hdGljYWwsbWF4LG1lZGlhLG1ldGhvZCxtaW4sbW9kZSxuYW1lLG51bU9jdGF2ZXMsb2Zmc2V0LG9wYWNpdHksb3BlcmF0b3Isb3JkZXIsb3JpZW50LG9yaWVudGF0aW9uLG9yaWdpbixvdmVyZmxvdyxvdmVybGluZS1wb3NpdGlvbixvdmVybGluZS10aGlja25lc3MscGFub3NlLTEscGFpbnQtb3JkZXIscGF0aCxwYXRoTGVuZ3RoLHBhdHRlcm5Db250ZW50VW5pdHMscGF0dGVyblRyYW5zZm9ybSxwYXR0ZXJuVW5pdHMscGluZyxwb2ludGVyLWV2ZW50cyxwb2ludHMscG9pbnRzQXRYLHBvaW50c0F0WSxwb2ludHNBdFoscHJlc2VydmVBbHBoYSxwcmVzZXJ2ZUFzcGVjdFJhdGlvLHByaW1pdGl2ZVVuaXRzLHIscmFkaXVzLHJlZmVycmVyUG9saWN5LHJlZlgscmVmWSxyZWwscmVuZGVyaW5nLWludGVudCxyZXBlYXRDb3VudCxyZXBlYXREdXIscmVxdWlyZWRFeHRlbnNpb25zLHJlcXVpcmVkRmVhdHVyZXMscmVzdGFydCxyZXN1bHQscm90YXRlLHJ4LHJ5LHNjYWxlLHNlZWQsc2hhcGUtcmVuZGVyaW5nLHNsb3BlLHNwYWNpbmcsc3BlY3VsYXJDb25zdGFudCxzcGVjdWxhckV4cG9uZW50LHNwZWVkLHNwcmVhZE1ldGhvZCxzdGFydE9mZnNldCxzdGREZXZpYXRpb24sc3RlbWgsc3RlbXYsc3RpdGNoVGlsZXMsc3RvcC1jb2xvcixzdG9wLW9wYWNpdHksc3RyaWtldGhyb3VnaC1wb3NpdGlvbixzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyxzdHJpbmcsc3Ryb2tlLHN0cm9rZS1kYXNoYXJyYXksc3Ryb2tlLWRhc2hvZmZzZXQsc3Ryb2tlLWxpbmVjYXAsc3Ryb2tlLWxpbmVqb2luLHN0cm9rZS1taXRlcmxpbWl0LHN0cm9rZS1vcGFjaXR5LHN0cm9rZS13aWR0aCxzdHlsZSxzdXJmYWNlU2NhbGUsc3lzdGVtTGFuZ3VhZ2UsdGFiaW5kZXgsdGFibGVWYWx1ZXMsdGFyZ2V0LHRhcmdldFgsdGFyZ2V0WSx0ZXh0LWFuY2hvcix0ZXh0LWRlY29yYXRpb24sdGV4dC1yZW5kZXJpbmcsdGV4dExlbmd0aCx0byx0cmFuc2Zvcm0sdHJhbnNmb3JtLW9yaWdpbix0eXBlLHUxLHUyLHVuZGVybGluZS1wb3NpdGlvbix1bmRlcmxpbmUtdGhpY2tuZXNzLHVuaWNvZGUsdW5pY29kZS1iaWRpLHVuaWNvZGUtcmFuZ2UsdW5pdHMtcGVyLWVtLHYtYWxwaGFiZXRpYyx2LWhhbmdpbmcsdi1pZGVvZ3JhcGhpYyx2LW1hdGhlbWF0aWNhbCx2YWx1ZXMsdmVjdG9yLWVmZmVjdCx2ZXJzaW9uLHZlcnQtYWR2LXksdmVydC1vcmlnaW4teCx2ZXJ0LW9yaWdpbi15LHZpZXdCb3gsdmlld1RhcmdldCx2aXNpYmlsaXR5LHdpZHRoLHdpZHRocyx3b3JkLXNwYWNpbmcsd3JpdGluZy1tb2RlLHgseC1oZWlnaHQseDEseDIseENoYW5uZWxTZWxlY3Rvcix4bGluazphY3R1YXRlLHhsaW5rOmFyY3JvbGUseGxpbms6aHJlZix4bGluazpyb2xlLHhsaW5rOnNob3cseGxpbms6dGl0bGUseGxpbms6dHlwZSx4bWxuczp4bGluayx4bWw6YmFzZSx4bWw6bGFuZyx4bWw6c3BhY2UseSx5MSx5Mix5Q2hhbm5lbFNlbGVjdG9yLHosem9vbUFuZFBhbmBcbik7XG5mdW5jdGlvbiBpc1JlbmRlcmFibGVBdHRyVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHR5cGUgPT09IFwic3RyaW5nXCIgfHwgdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcImJvb2xlYW5cIjtcbn1cblxuY29uc3QgY3NzVmFyTmFtZUVzY2FwZVN5bWJvbHNSRSA9IC9bICFcIiMkJSYnKCkqKywuLzo7PD0+P0BbXFxcXFxcXV5ge3x9fl0vZztcbmZ1bmN0aW9uIGdldEVzY2FwZWRDc3NWYXJOYW1lKGtleSwgZG91YmxlRXNjYXBlKSB7XG4gIHJldHVybiBrZXkucmVwbGFjZShcbiAgICBjc3NWYXJOYW1lRXNjYXBlU3ltYm9sc1JFLFxuICAgIChzKSA9PiBgXFxcXCR7c31gXG4gICk7XG59XG5cbmZ1bmN0aW9uIGxvb3NlQ29tcGFyZUFycmF5cyhhLCBiKSB7XG4gIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgbGV0IGVxdWFsID0gdHJ1ZTtcbiAgZm9yIChsZXQgaSA9IDA7IGVxdWFsICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgZXF1YWwgPSBsb29zZUVxdWFsKGFbaV0sIGJbaV0pO1xuICB9XG4gIHJldHVybiBlcXVhbDtcbn1cbmZ1bmN0aW9uIGxvb3NlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG4gIGxldCBhVmFsaWRUeXBlID0gaXNEYXRlKGEpO1xuICBsZXQgYlZhbGlkVHlwZSA9IGlzRGF0ZShiKTtcbiAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKCkgOiBmYWxzZTtcbiAgfVxuICBhVmFsaWRUeXBlID0gaXNTeW1ib2woYSk7XG4gIGJWYWxpZFR5cGUgPSBpc1N5bWJvbChiKTtcbiAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9XG4gIGFWYWxpZFR5cGUgPSBpc0FycmF5KGEpO1xuICBiVmFsaWRUeXBlID0gaXNBcnJheShiKTtcbiAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBsb29zZUNvbXBhcmVBcnJheXMoYSwgYikgOiBmYWxzZTtcbiAgfVxuICBhVmFsaWRUeXBlID0gaXNPYmplY3QoYSk7XG4gIGJWYWxpZFR5cGUgPSBpc09iamVjdChiKTtcbiAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xuICAgIGlmICghYVZhbGlkVHlwZSB8fCAhYlZhbGlkVHlwZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBhS2V5c0NvdW50ID0gT2JqZWN0LmtleXMoYSkubGVuZ3RoO1xuICAgIGNvbnN0IGJLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhiKS5sZW5ndGg7XG4gICAgaWYgKGFLZXlzQ291bnQgIT09IGJLZXlzQ291bnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgICAgY29uc3QgYUhhc0tleSA9IGEuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgICAgIGNvbnN0IGJIYXNLZXkgPSBiLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICBpZiAoYUhhc0tleSAmJiAhYkhhc0tleSB8fCAhYUhhc0tleSAmJiBiSGFzS2V5IHx8ICFsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcbn1cbmZ1bmN0aW9uIGxvb3NlSW5kZXhPZihhcnIsIHZhbCkge1xuICByZXR1cm4gYXJyLmZpbmRJbmRleCgoaXRlbSkgPT4gbG9vc2VFcXVhbChpdGVtLCB2YWwpKTtcbn1cblxuY29uc3QgaXNSZWYkMSA9ICh2YWwpID0+IHtcbiAgcmV0dXJuICEhKHZhbCAmJiB2YWxbXCJfX3ZfaXNSZWZcIl0gPT09IHRydWUpO1xufTtcbmNvbnN0IHRvRGlzcGxheVN0cmluZyA9ICh2YWwpID0+IHtcbiAgcmV0dXJuIGlzU3RyaW5nKHZhbCkgPyB2YWwgOiB2YWwgPT0gbnVsbCA/IFwiXCIgOiBpc0FycmF5KHZhbCkgfHwgaXNPYmplY3QodmFsKSAmJiAodmFsLnRvU3RyaW5nID09PSBvYmplY3RUb1N0cmluZyB8fCAhaXNGdW5jdGlvbih2YWwudG9TdHJpbmcpKSA/IGlzUmVmJDEodmFsKSA/IHRvRGlzcGxheVN0cmluZyh2YWwudmFsdWUpIDogSlNPTi5zdHJpbmdpZnkodmFsLCByZXBsYWNlciwgMikgOiBTdHJpbmcodmFsKTtcbn07XG5jb25zdCByZXBsYWNlciA9IChfa2V5LCB2YWwpID0+IHtcbiAgaWYgKGlzUmVmJDEodmFsKSkge1xuICAgIHJldHVybiByZXBsYWNlcihfa2V5LCB2YWwudmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzTWFwKHZhbCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgW2BNYXAoJHt2YWwuc2l6ZX0pYF06IFsuLi52YWwuZW50cmllcygpXS5yZWR1Y2UoXG4gICAgICAgIChlbnRyaWVzLCBba2V5LCB2YWwyXSwgaSkgPT4ge1xuICAgICAgICAgIGVudHJpZXNbc3RyaW5naWZ5U3ltYm9sKGtleSwgaSkgKyBcIiA9PlwiXSA9IHZhbDI7XG4gICAgICAgICAgcmV0dXJuIGVudHJpZXM7XG4gICAgICAgIH0sXG4gICAgICAgIHt9XG4gICAgICApXG4gICAgfTtcbiAgfSBlbHNlIGlmIChpc1NldCh2YWwpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtgU2V0KCR7dmFsLnNpemV9KWBdOiBbLi4udmFsLnZhbHVlcygpXS5tYXAoKHYpID0+IHN0cmluZ2lmeVN5bWJvbCh2KSlcbiAgICB9O1xuICB9IGVsc2UgaWYgKGlzU3ltYm9sKHZhbCkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5U3ltYm9sKHZhbCk7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsKSAmJiAhaXNBcnJheSh2YWwpICYmICFpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICByZXR1cm4gU3RyaW5nKHZhbCk7XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn07XG5jb25zdCBzdHJpbmdpZnlTeW1ib2wgPSAodiwgaSA9IFwiXCIpID0+IHtcbiAgdmFyIF9hO1xuICByZXR1cm4gKFxuICAgIC8vIFN5bWJvbC5kZXNjcmlwdGlvbiBpbiBlczIwMTkrIHNvIHdlIG5lZWQgdG8gY2FzdCBoZXJlIHRvIHBhc3NcbiAgICAvLyB0aGUgbGliOiBlczIwMTYgY2hlY2tcbiAgICBpc1N5bWJvbCh2KSA/IGBTeW1ib2woJHsoX2EgPSB2LmRlc2NyaXB0aW9uKSAhPSBudWxsID8gX2EgOiBpfSlgIDogdlxuICApO1xufTtcblxuZnVuY3Rpb24gd2FybiQyKG1zZywgLi4uYXJncykge1xuICBjb25zb2xlLndhcm4oYFtWdWUgd2Fybl0gJHttc2d9YCwgLi4uYXJncyk7XG59XG5cbmxldCBhY3RpdmVFZmZlY3RTY29wZTtcbmNsYXNzIEVmZmVjdFNjb3BlIHtcbiAgY29uc3RydWN0b3IoZGV0YWNoZWQgPSBmYWxzZSkge1xuICAgIHRoaXMuZGV0YWNoZWQgPSBkZXRhY2hlZDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZWZmZWN0cyA9IFtdO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuY2xlYW51cHMgPSBbXTtcbiAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgIHRoaXMucGFyZW50ID0gYWN0aXZlRWZmZWN0U2NvcGU7XG4gICAgaWYgKCFkZXRhY2hlZCAmJiBhY3RpdmVFZmZlY3RTY29wZSkge1xuICAgICAgdGhpcy5pbmRleCA9IChhY3RpdmVFZmZlY3RTY29wZS5zY29wZXMgfHwgKGFjdGl2ZUVmZmVjdFNjb3BlLnNjb3BlcyA9IFtdKSkucHVzaChcbiAgICAgICAgdGhpc1xuICAgICAgKSAtIDE7XG4gICAgfVxuICB9XG4gIGdldCBhY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgfVxuICBwYXVzZSgpIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gICAgICBsZXQgaSwgbDtcbiAgICAgIGlmICh0aGlzLnNjb3Blcykge1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5zY29wZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5zY29wZXNbaV0ucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuZWZmZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5lZmZlY3RzW2ldLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXN1bWVzIHRoZSBlZmZlY3Qgc2NvcGUsIGluY2x1ZGluZyBhbGwgY2hpbGQgc2NvcGVzIGFuZCBlZmZlY3RzLlxuICAgKi9cbiAgcmVzdW1lKCkge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIGlmICh0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgaSwgbDtcbiAgICAgICAgaWYgKHRoaXMuc2NvcGVzKSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuc2NvcGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5zY29wZXNbaV0ucmVzdW1lKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmVmZmVjdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5lZmZlY3RzW2ldLnJlc3VtZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJ1bihmbikge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRFZmZlY3RTY29wZSA9IGFjdGl2ZUVmZmVjdFNjb3BlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gY3VycmVudEVmZmVjdFNjb3BlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDIoYGNhbm5vdCBydW4gYW4gaW5hY3RpdmUgZWZmZWN0IHNjb3BlLmApO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gbm9uLWRldGFjaGVkIHNjb3Blc1xuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG9uKCkge1xuICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gdGhpcztcbiAgfVxuICAvKipcbiAgICogVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gbm9uLWRldGFjaGVkIHNjb3Blc1xuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG9mZigpIHtcbiAgICBhY3RpdmVFZmZlY3RTY29wZSA9IHRoaXMucGFyZW50O1xuICB9XG4gIHN0b3AoZnJvbVBhcmVudCkge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGV0IGksIGw7XG4gICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5lZmZlY3RzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzLmVmZmVjdHNbaV0uc3RvcCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5lZmZlY3RzLmxlbmd0aCA9IDA7XG4gICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5jbGVhbnVwcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5jbGVhbnVwc1tpXSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5jbGVhbnVwcy5sZW5ndGggPSAwO1xuICAgICAgaWYgKHRoaXMuc2NvcGVzKSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLnNjb3Blcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICB0aGlzLnNjb3Blc1tpXS5zdG9wKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NvcGVzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuZGV0YWNoZWQgJiYgdGhpcy5wYXJlbnQgJiYgIWZyb21QYXJlbnQpIHtcbiAgICAgICAgY29uc3QgbGFzdCA9IHRoaXMucGFyZW50LnNjb3Blcy5wb3AoKTtcbiAgICAgICAgaWYgKGxhc3QgJiYgbGFzdCAhPT0gdGhpcykge1xuICAgICAgICAgIHRoaXMucGFyZW50LnNjb3Blc1t0aGlzLmluZGV4XSA9IGxhc3Q7XG4gICAgICAgICAgbGFzdC5pbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMucGFyZW50ID0gdm9pZCAwO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZWZmZWN0U2NvcGUoZGV0YWNoZWQpIHtcbiAgcmV0dXJuIG5ldyBFZmZlY3RTY29wZShkZXRhY2hlZCk7XG59XG5mdW5jdGlvbiBnZXRDdXJyZW50U2NvcGUoKSB7XG4gIHJldHVybiBhY3RpdmVFZmZlY3RTY29wZTtcbn1cbmZ1bmN0aW9uIG9uU2NvcGVEaXNwb3NlKGZuLCBmYWlsU2lsZW50bHkgPSBmYWxzZSkge1xuICBpZiAoYWN0aXZlRWZmZWN0U2NvcGUpIHtcbiAgICBhY3RpdmVFZmZlY3RTY29wZS5jbGVhbnVwcy5wdXNoKGZuKTtcbiAgfSBlbHNlIGlmICghZmFpbFNpbGVudGx5KSB7XG4gICAgd2FybiQyKFxuICAgICAgYG9uU2NvcGVEaXNwb3NlKCkgaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGVmZmVjdCBzY29wZSB0byBiZSBhc3NvY2lhdGVkIHdpdGguYFxuICAgICk7XG4gIH1cbn1cblxubGV0IGFjdGl2ZVN1YjtcbmNvbnN0IHBhdXNlZFF1ZXVlRWZmZWN0cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpO1xuY2xhc3MgUmVhY3RpdmVFZmZlY3Qge1xuICBjb25zdHJ1Y3Rvcihmbikge1xuICAgIHRoaXMuZm4gPSBmbjtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLmRlcHMgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5kZXBzVGFpbCA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLmZsYWdzID0gMSB8IDQ7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5uZXh0ID0gdm9pZCAwO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuY2xlYW51cCA9IHZvaWQgMDtcbiAgICB0aGlzLnNjaGVkdWxlciA9IHZvaWQgMDtcbiAgICBpZiAoYWN0aXZlRWZmZWN0U2NvcGUgJiYgYWN0aXZlRWZmZWN0U2NvcGUuYWN0aXZlKSB7XG4gICAgICBhY3RpdmVFZmZlY3RTY29wZS5lZmZlY3RzLnB1c2godGhpcyk7XG4gICAgfVxuICB9XG4gIHBhdXNlKCkge1xuICAgIHRoaXMuZmxhZ3MgfD0gNjQ7XG4gIH1cbiAgcmVzdW1lKCkge1xuICAgIGlmICh0aGlzLmZsYWdzICYgNjQpIHtcbiAgICAgIHRoaXMuZmxhZ3MgJj0gfjY0O1xuICAgICAgaWYgKHBhdXNlZFF1ZXVlRWZmZWN0cy5oYXModGhpcykpIHtcbiAgICAgICAgcGF1c2VkUXVldWVFZmZlY3RzLmRlbGV0ZSh0aGlzKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG5vdGlmeSgpIHtcbiAgICBpZiAodGhpcy5mbGFncyAmIDIgJiYgISh0aGlzLmZsYWdzICYgMzIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghKHRoaXMuZmxhZ3MgJiA4KSkge1xuICAgICAgYmF0Y2godGhpcyk7XG4gICAgfVxuICB9XG4gIHJ1bigpIHtcbiAgICBpZiAoISh0aGlzLmZsYWdzICYgMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmZuKCk7XG4gICAgfVxuICAgIHRoaXMuZmxhZ3MgfD0gMjtcbiAgICBjbGVhbnVwRWZmZWN0KHRoaXMpO1xuICAgIHByZXBhcmVEZXBzKHRoaXMpO1xuICAgIGNvbnN0IHByZXZFZmZlY3QgPSBhY3RpdmVTdWI7XG4gICAgY29uc3QgcHJldlNob3VsZFRyYWNrID0gc2hvdWxkVHJhY2s7XG4gICAgYWN0aXZlU3ViID0gdGhpcztcbiAgICBzaG91bGRUcmFjayA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB0aGlzLmZuKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChhY3RpdmVTdWIgIT09IHRoaXMpIHtcbiAgICAgICAgd2FybiQyKFxuICAgICAgICAgIFwiQWN0aXZlIGVmZmVjdCB3YXMgbm90IHJlc3RvcmVkIGNvcnJlY3RseSAtIHRoaXMgaXMgbGlrZWx5IGEgVnVlIGludGVybmFsIGJ1Zy5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2xlYW51cERlcHModGhpcyk7XG4gICAgICBhY3RpdmVTdWIgPSBwcmV2RWZmZWN0O1xuICAgICAgc2hvdWxkVHJhY2sgPSBwcmV2U2hvdWxkVHJhY2s7XG4gICAgICB0aGlzLmZsYWdzICY9IH4yO1xuICAgIH1cbiAgfVxuICBzdG9wKCkge1xuICAgIGlmICh0aGlzLmZsYWdzICYgMSkge1xuICAgICAgZm9yIChsZXQgbGluayA9IHRoaXMuZGVwczsgbGluazsgbGluayA9IGxpbmsubmV4dERlcCkge1xuICAgICAgICByZW1vdmVTdWIobGluayk7XG4gICAgICB9XG4gICAgICB0aGlzLmRlcHMgPSB0aGlzLmRlcHNUYWlsID0gdm9pZCAwO1xuICAgICAgY2xlYW51cEVmZmVjdCh0aGlzKTtcbiAgICAgIHRoaXMub25TdG9wICYmIHRoaXMub25TdG9wKCk7XG4gICAgICB0aGlzLmZsYWdzICY9IH4xO1xuICAgIH1cbiAgfVxuICB0cmlnZ2VyKCkge1xuICAgIGlmICh0aGlzLmZsYWdzICYgNjQpIHtcbiAgICAgIHBhdXNlZFF1ZXVlRWZmZWN0cy5hZGQodGhpcyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNjaGVkdWxlcikge1xuICAgICAgdGhpcy5zY2hlZHVsZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ydW5JZkRpcnR5KCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJ1bklmRGlydHkoKSB7XG4gICAgaWYgKGlzRGlydHkodGhpcykpIHtcbiAgICAgIHRoaXMucnVuKCk7XG4gICAgfVxuICB9XG4gIGdldCBkaXJ0eSgpIHtcbiAgICByZXR1cm4gaXNEaXJ0eSh0aGlzKTtcbiAgfVxufVxubGV0IGJhdGNoRGVwdGggPSAwO1xubGV0IGJhdGNoZWRTdWI7XG5sZXQgYmF0Y2hlZENvbXB1dGVkO1xuZnVuY3Rpb24gYmF0Y2goc3ViLCBpc0NvbXB1dGVkID0gZmFsc2UpIHtcbiAgc3ViLmZsYWdzIHw9IDg7XG4gIGlmIChpc0NvbXB1dGVkKSB7XG4gICAgc3ViLm5leHQgPSBiYXRjaGVkQ29tcHV0ZWQ7XG4gICAgYmF0Y2hlZENvbXB1dGVkID0gc3ViO1xuICAgIHJldHVybjtcbiAgfVxuICBzdWIubmV4dCA9IGJhdGNoZWRTdWI7XG4gIGJhdGNoZWRTdWIgPSBzdWI7XG59XG5mdW5jdGlvbiBzdGFydEJhdGNoKCkge1xuICBiYXRjaERlcHRoKys7XG59XG5mdW5jdGlvbiBlbmRCYXRjaCgpIHtcbiAgaWYgKC0tYmF0Y2hEZXB0aCA+IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGJhdGNoZWRDb21wdXRlZCkge1xuICAgIGxldCBlID0gYmF0Y2hlZENvbXB1dGVkO1xuICAgIGJhdGNoZWRDb21wdXRlZCA9IHZvaWQgMDtcbiAgICB3aGlsZSAoZSkge1xuICAgICAgY29uc3QgbmV4dCA9IGUubmV4dDtcbiAgICAgIGUubmV4dCA9IHZvaWQgMDtcbiAgICAgIGUuZmxhZ3MgJj0gfjg7XG4gICAgICBlID0gbmV4dDtcbiAgICB9XG4gIH1cbiAgbGV0IGVycm9yO1xuICB3aGlsZSAoYmF0Y2hlZFN1Yikge1xuICAgIGxldCBlID0gYmF0Y2hlZFN1YjtcbiAgICBiYXRjaGVkU3ViID0gdm9pZCAwO1xuICAgIHdoaWxlIChlKSB7XG4gICAgICBjb25zdCBuZXh0ID0gZS5uZXh0O1xuICAgICAgZS5uZXh0ID0gdm9pZCAwO1xuICAgICAgZS5mbGFncyAmPSB+ODtcbiAgICAgIGlmIChlLmZsYWdzICYgMSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIDtcbiAgICAgICAgICBlLnRyaWdnZXIoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgaWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGUgPSBuZXh0O1xuICAgIH1cbiAgfVxuICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xufVxuZnVuY3Rpb24gcHJlcGFyZURlcHMoc3ViKSB7XG4gIGZvciAobGV0IGxpbmsgPSBzdWIuZGVwczsgbGluazsgbGluayA9IGxpbmsubmV4dERlcCkge1xuICAgIGxpbmsudmVyc2lvbiA9IC0xO1xuICAgIGxpbmsucHJldkFjdGl2ZUxpbmsgPSBsaW5rLmRlcC5hY3RpdmVMaW5rO1xuICAgIGxpbmsuZGVwLmFjdGl2ZUxpbmsgPSBsaW5rO1xuICB9XG59XG5mdW5jdGlvbiBjbGVhbnVwRGVwcyhzdWIpIHtcbiAgbGV0IGhlYWQ7XG4gIGxldCB0YWlsID0gc3ViLmRlcHNUYWlsO1xuICBsZXQgbGluayA9IHRhaWw7XG4gIHdoaWxlIChsaW5rKSB7XG4gICAgY29uc3QgcHJldiA9IGxpbmsucHJldkRlcDtcbiAgICBpZiAobGluay52ZXJzaW9uID09PSAtMSkge1xuICAgICAgaWYgKGxpbmsgPT09IHRhaWwpIHRhaWwgPSBwcmV2O1xuICAgICAgcmVtb3ZlU3ViKGxpbmspO1xuICAgICAgcmVtb3ZlRGVwKGxpbmspO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkID0gbGluaztcbiAgICB9XG4gICAgbGluay5kZXAuYWN0aXZlTGluayA9IGxpbmsucHJldkFjdGl2ZUxpbms7XG4gICAgbGluay5wcmV2QWN0aXZlTGluayA9IHZvaWQgMDtcbiAgICBsaW5rID0gcHJldjtcbiAgfVxuICBzdWIuZGVwcyA9IGhlYWQ7XG4gIHN1Yi5kZXBzVGFpbCA9IHRhaWw7XG59XG5mdW5jdGlvbiBpc0RpcnR5KHN1Yikge1xuICBmb3IgKGxldCBsaW5rID0gc3ViLmRlcHM7IGxpbms7IGxpbmsgPSBsaW5rLm5leHREZXApIHtcbiAgICBpZiAobGluay5kZXAudmVyc2lvbiAhPT0gbGluay52ZXJzaW9uIHx8IGxpbmsuZGVwLmNvbXB1dGVkICYmIChyZWZyZXNoQ29tcHV0ZWQobGluay5kZXAuY29tcHV0ZWQpIHx8IGxpbmsuZGVwLnZlcnNpb24gIT09IGxpbmsudmVyc2lvbikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoc3ViLl9kaXJ0eSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHJlZnJlc2hDb21wdXRlZChjb21wdXRlZCkge1xuICBpZiAoY29tcHV0ZWQuZmxhZ3MgJiA0ICYmICEoY29tcHV0ZWQuZmxhZ3MgJiAxNikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29tcHV0ZWQuZmxhZ3MgJj0gfjE2O1xuICBpZiAoY29tcHV0ZWQuZ2xvYmFsVmVyc2lvbiA9PT0gZ2xvYmFsVmVyc2lvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb21wdXRlZC5nbG9iYWxWZXJzaW9uID0gZ2xvYmFsVmVyc2lvbjtcbiAgY29uc3QgZGVwID0gY29tcHV0ZWQuZGVwO1xuICBjb21wdXRlZC5mbGFncyB8PSAyO1xuICBpZiAoZGVwLnZlcnNpb24gPiAwICYmICFjb21wdXRlZC5pc1NTUiAmJiBjb21wdXRlZC5kZXBzICYmICFpc0RpcnR5KGNvbXB1dGVkKSkge1xuICAgIGNvbXB1dGVkLmZsYWdzICY9IH4yO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBwcmV2U3ViID0gYWN0aXZlU3ViO1xuICBjb25zdCBwcmV2U2hvdWxkVHJhY2sgPSBzaG91bGRUcmFjaztcbiAgYWN0aXZlU3ViID0gY29tcHV0ZWQ7XG4gIHNob3VsZFRyYWNrID0gdHJ1ZTtcbiAgdHJ5IHtcbiAgICBwcmVwYXJlRGVwcyhjb21wdXRlZCk7XG4gICAgY29uc3QgdmFsdWUgPSBjb21wdXRlZC5mbihjb21wdXRlZC5fdmFsdWUpO1xuICAgIGlmIChkZXAudmVyc2lvbiA9PT0gMCB8fCBoYXNDaGFuZ2VkKHZhbHVlLCBjb21wdXRlZC5fdmFsdWUpKSB7XG4gICAgICBjb21wdXRlZC5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgIGRlcC52ZXJzaW9uKys7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZXAudmVyc2lvbisrO1xuICAgIHRocm93IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICBhY3RpdmVTdWIgPSBwcmV2U3ViO1xuICAgIHNob3VsZFRyYWNrID0gcHJldlNob3VsZFRyYWNrO1xuICAgIGNsZWFudXBEZXBzKGNvbXB1dGVkKTtcbiAgICBjb21wdXRlZC5mbGFncyAmPSB+MjtcbiAgfVxufVxuZnVuY3Rpb24gcmVtb3ZlU3ViKGxpbmssIHNvZnQgPSBmYWxzZSkge1xuICBjb25zdCB7IGRlcCwgcHJldlN1YiwgbmV4dFN1YiB9ID0gbGluaztcbiAgaWYgKHByZXZTdWIpIHtcbiAgICBwcmV2U3ViLm5leHRTdWIgPSBuZXh0U3ViO1xuICAgIGxpbmsucHJldlN1YiA9IHZvaWQgMDtcbiAgfVxuICBpZiAobmV4dFN1Yikge1xuICAgIG5leHRTdWIucHJldlN1YiA9IHByZXZTdWI7XG4gICAgbGluay5uZXh0U3ViID0gdm9pZCAwO1xuICB9XG4gIGlmIChkZXAuc3Vic0hlYWQgPT09IGxpbmspIHtcbiAgICBkZXAuc3Vic0hlYWQgPSBuZXh0U3ViO1xuICB9XG4gIGlmIChkZXAuc3VicyA9PT0gbGluaykge1xuICAgIGRlcC5zdWJzID0gcHJldlN1YjtcbiAgICBpZiAoIXByZXZTdWIgJiYgZGVwLmNvbXB1dGVkKSB7XG4gICAgICBkZXAuY29tcHV0ZWQuZmxhZ3MgJj0gfjQ7XG4gICAgICBmb3IgKGxldCBsID0gZGVwLmNvbXB1dGVkLmRlcHM7IGw7IGwgPSBsLm5leHREZXApIHtcbiAgICAgICAgcmVtb3ZlU3ViKGwsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIXNvZnQgJiYgIS0tZGVwLnNjICYmIGRlcC5tYXApIHtcbiAgICBkZXAubWFwLmRlbGV0ZShkZXAua2V5KTtcbiAgfVxufVxuZnVuY3Rpb24gcmVtb3ZlRGVwKGxpbmspIHtcbiAgY29uc3QgeyBwcmV2RGVwLCBuZXh0RGVwIH0gPSBsaW5rO1xuICBpZiAocHJldkRlcCkge1xuICAgIHByZXZEZXAubmV4dERlcCA9IG5leHREZXA7XG4gICAgbGluay5wcmV2RGVwID0gdm9pZCAwO1xuICB9XG4gIGlmIChuZXh0RGVwKSB7XG4gICAgbmV4dERlcC5wcmV2RGVwID0gcHJldkRlcDtcbiAgICBsaW5rLm5leHREZXAgPSB2b2lkIDA7XG4gIH1cbn1cbmZ1bmN0aW9uIGVmZmVjdChmbiwgb3B0aW9ucykge1xuICBpZiAoZm4uZWZmZWN0IGluc3RhbmNlb2YgUmVhY3RpdmVFZmZlY3QpIHtcbiAgICBmbiA9IGZuLmVmZmVjdC5mbjtcbiAgfVxuICBjb25zdCBlID0gbmV3IFJlYWN0aXZlRWZmZWN0KGZuKTtcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBleHRlbmQoZSwgb3B0aW9ucyk7XG4gIH1cbiAgdHJ5IHtcbiAgICBlLnJ1bigpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlLnN0b3AoKTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbiAgY29uc3QgcnVubmVyID0gZS5ydW4uYmluZChlKTtcbiAgcnVubmVyLmVmZmVjdCA9IGU7XG4gIHJldHVybiBydW5uZXI7XG59XG5mdW5jdGlvbiBzdG9wKHJ1bm5lcikge1xuICBydW5uZXIuZWZmZWN0LnN0b3AoKTtcbn1cbmxldCBzaG91bGRUcmFjayA9IHRydWU7XG5jb25zdCB0cmFja1N0YWNrID0gW107XG5mdW5jdGlvbiBwYXVzZVRyYWNraW5nKCkge1xuICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xuICBzaG91bGRUcmFjayA9IGZhbHNlO1xufVxuZnVuY3Rpb24gcmVzZXRUcmFja2luZygpIHtcbiAgY29uc3QgbGFzdCA9IHRyYWNrU3RhY2sucG9wKCk7XG4gIHNob3VsZFRyYWNrID0gbGFzdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IGxhc3Q7XG59XG5mdW5jdGlvbiBjbGVhbnVwRWZmZWN0KGUpIHtcbiAgY29uc3QgeyBjbGVhbnVwIH0gPSBlO1xuICBlLmNsZWFudXAgPSB2b2lkIDA7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgY29uc3QgcHJldlN1YiA9IGFjdGl2ZVN1YjtcbiAgICBhY3RpdmVTdWIgPSB2b2lkIDA7XG4gICAgdHJ5IHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgYWN0aXZlU3ViID0gcHJldlN1YjtcbiAgICB9XG4gIH1cbn1cblxubGV0IGdsb2JhbFZlcnNpb24gPSAwO1xuY2xhc3MgTGluayB7XG4gIGNvbnN0cnVjdG9yKHN1YiwgZGVwKSB7XG4gICAgdGhpcy5zdWIgPSBzdWI7XG4gICAgdGhpcy5kZXAgPSBkZXA7XG4gICAgdGhpcy52ZXJzaW9uID0gZGVwLnZlcnNpb247XG4gICAgdGhpcy5uZXh0RGVwID0gdGhpcy5wcmV2RGVwID0gdGhpcy5uZXh0U3ViID0gdGhpcy5wcmV2U3ViID0gdGhpcy5wcmV2QWN0aXZlTGluayA9IHZvaWQgMDtcbiAgfVxufVxuY2xhc3MgRGVwIHtcbiAgY29uc3RydWN0b3IoY29tcHV0ZWQpIHtcbiAgICB0aGlzLmNvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICAvKipcbiAgICAgKiBMaW5rIGJldHdlZW4gdGhpcyBkZXAgYW5kIHRoZSBjdXJyZW50IGFjdGl2ZSBlZmZlY3RcbiAgICAgKi9cbiAgICB0aGlzLmFjdGl2ZUxpbmsgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogRG91Ymx5IGxpbmtlZCBsaXN0IHJlcHJlc2VudGluZyB0aGUgc3Vic2NyaWJpbmcgZWZmZWN0cyAodGFpbClcbiAgICAgKi9cbiAgICB0aGlzLnN1YnMgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogRm9yIG9iamVjdCBwcm9wZXJ0eSBkZXBzIGNsZWFudXBcbiAgICAgKi9cbiAgICB0aGlzLm1hcCA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVyIGNvdW50ZXJcbiAgICAgKi9cbiAgICB0aGlzLnNjID0gMDtcbiAgICB7XG4gICAgICB0aGlzLnN1YnNIZWFkID0gdm9pZCAwO1xuICAgIH1cbiAgfVxuICB0cmFjayhkZWJ1Z0luZm8pIHtcbiAgICBpZiAoIWFjdGl2ZVN1YiB8fCAhc2hvdWxkVHJhY2sgfHwgYWN0aXZlU3ViID09PSB0aGlzLmNvbXB1dGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBsaW5rID0gdGhpcy5hY3RpdmVMaW5rO1xuICAgIGlmIChsaW5rID09PSB2b2lkIDAgfHwgbGluay5zdWIgIT09IGFjdGl2ZVN1Yikge1xuICAgICAgbGluayA9IHRoaXMuYWN0aXZlTGluayA9IG5ldyBMaW5rKGFjdGl2ZVN1YiwgdGhpcyk7XG4gICAgICBpZiAoIWFjdGl2ZVN1Yi5kZXBzKSB7XG4gICAgICAgIGFjdGl2ZVN1Yi5kZXBzID0gYWN0aXZlU3ViLmRlcHNUYWlsID0gbGluaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpbmsucHJldkRlcCA9IGFjdGl2ZVN1Yi5kZXBzVGFpbDtcbiAgICAgICAgYWN0aXZlU3ViLmRlcHNUYWlsLm5leHREZXAgPSBsaW5rO1xuICAgICAgICBhY3RpdmVTdWIuZGVwc1RhaWwgPSBsaW5rO1xuICAgICAgfVxuICAgICAgYWRkU3ViKGxpbmspO1xuICAgIH0gZWxzZSBpZiAobGluay52ZXJzaW9uID09PSAtMSkge1xuICAgICAgbGluay52ZXJzaW9uID0gdGhpcy52ZXJzaW9uO1xuICAgICAgaWYgKGxpbmsubmV4dERlcCkge1xuICAgICAgICBjb25zdCBuZXh0ID0gbGluay5uZXh0RGVwO1xuICAgICAgICBuZXh0LnByZXZEZXAgPSBsaW5rLnByZXZEZXA7XG4gICAgICAgIGlmIChsaW5rLnByZXZEZXApIHtcbiAgICAgICAgICBsaW5rLnByZXZEZXAubmV4dERlcCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgbGluay5wcmV2RGVwID0gYWN0aXZlU3ViLmRlcHNUYWlsO1xuICAgICAgICBsaW5rLm5leHREZXAgPSB2b2lkIDA7XG4gICAgICAgIGFjdGl2ZVN1Yi5kZXBzVGFpbC5uZXh0RGVwID0gbGluaztcbiAgICAgICAgYWN0aXZlU3ViLmRlcHNUYWlsID0gbGluaztcbiAgICAgICAgaWYgKGFjdGl2ZVN1Yi5kZXBzID09PSBsaW5rKSB7XG4gICAgICAgICAgYWN0aXZlU3ViLmRlcHMgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhY3RpdmVTdWIub25UcmFjaykge1xuICAgICAgYWN0aXZlU3ViLm9uVHJhY2soXG4gICAgICAgIGV4dGVuZChcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlZmZlY3Q6IGFjdGl2ZVN1YlxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVidWdJbmZvXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBsaW5rO1xuICB9XG4gIHRyaWdnZXIoZGVidWdJbmZvKSB7XG4gICAgdGhpcy52ZXJzaW9uKys7XG4gICAgZ2xvYmFsVmVyc2lvbisrO1xuICAgIHRoaXMubm90aWZ5KGRlYnVnSW5mbyk7XG4gIH1cbiAgbm90aWZ5KGRlYnVnSW5mbykge1xuICAgIHN0YXJ0QmF0Y2goKTtcbiAgICB0cnkge1xuICAgICAgaWYgKHRydWUpIHtcbiAgICAgICAgZm9yIChsZXQgaGVhZCA9IHRoaXMuc3Vic0hlYWQ7IGhlYWQ7IGhlYWQgPSBoZWFkLm5leHRTdWIpIHtcbiAgICAgICAgICBpZiAoaGVhZC5zdWIub25UcmlnZ2VyICYmICEoaGVhZC5zdWIuZmxhZ3MgJiA4KSkge1xuICAgICAgICAgICAgaGVhZC5zdWIub25UcmlnZ2VyKFxuICAgICAgICAgICAgICBleHRlbmQoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgZWZmZWN0OiBoZWFkLnN1YlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVidWdJbmZvXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBsaW5rID0gdGhpcy5zdWJzOyBsaW5rOyBsaW5rID0gbGluay5wcmV2U3ViKSB7XG4gICAgICAgIGlmIChsaW5rLnN1Yi5ub3RpZnkoKSkge1xuICAgICAgICAgIDtcbiAgICAgICAgICBsaW5rLnN1Yi5kZXAubm90aWZ5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgZW5kQmF0Y2goKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGFkZFN1YihsaW5rKSB7XG4gIGxpbmsuZGVwLnNjKys7XG4gIGlmIChsaW5rLnN1Yi5mbGFncyAmIDQpIHtcbiAgICBjb25zdCBjb21wdXRlZCA9IGxpbmsuZGVwLmNvbXB1dGVkO1xuICAgIGlmIChjb21wdXRlZCAmJiAhbGluay5kZXAuc3Vicykge1xuICAgICAgY29tcHV0ZWQuZmxhZ3MgfD0gNCB8IDE2O1xuICAgICAgZm9yIChsZXQgbCA9IGNvbXB1dGVkLmRlcHM7IGw7IGwgPSBsLm5leHREZXApIHtcbiAgICAgICAgYWRkU3ViKGwpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjdXJyZW50VGFpbCA9IGxpbmsuZGVwLnN1YnM7XG4gICAgaWYgKGN1cnJlbnRUYWlsICE9PSBsaW5rKSB7XG4gICAgICBsaW5rLnByZXZTdWIgPSBjdXJyZW50VGFpbDtcbiAgICAgIGlmIChjdXJyZW50VGFpbCkgY3VycmVudFRhaWwubmV4dFN1YiA9IGxpbms7XG4gICAgfVxuICAgIGlmIChsaW5rLmRlcC5zdWJzSGVhZCA9PT0gdm9pZCAwKSB7XG4gICAgICBsaW5rLmRlcC5zdWJzSGVhZCA9IGxpbms7XG4gICAgfVxuICAgIGxpbmsuZGVwLnN1YnMgPSBsaW5rO1xuICB9XG59XG5jb25zdCB0YXJnZXRNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IElURVJBVEVfS0VZID0gU3ltYm9sKFxuICBcIk9iamVjdCBpdGVyYXRlXCIgXG4pO1xuY29uc3QgTUFQX0tFWV9JVEVSQVRFX0tFWSA9IFN5bWJvbChcbiAgXCJNYXAga2V5cyBpdGVyYXRlXCIgXG4pO1xuY29uc3QgQVJSQVlfSVRFUkFURV9LRVkgPSBTeW1ib2woXG4gIFwiQXJyYXkgaXRlcmF0ZVwiIFxuKTtcbmZ1bmN0aW9uIHRyYWNrKHRhcmdldCwgdHlwZSwga2V5KSB7XG4gIGlmIChzaG91bGRUcmFjayAmJiBhY3RpdmVTdWIpIHtcbiAgICBsZXQgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcbiAgICBpZiAoIWRlcHNNYXApIHtcbiAgICAgIHRhcmdldE1hcC5zZXQodGFyZ2V0LCBkZXBzTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSk7XG4gICAgfVxuICAgIGxldCBkZXAgPSBkZXBzTWFwLmdldChrZXkpO1xuICAgIGlmICghZGVwKSB7XG4gICAgICBkZXBzTWFwLnNldChrZXksIGRlcCA9IG5ldyBEZXAoKSk7XG4gICAgICBkZXAubWFwID0gZGVwc01hcDtcbiAgICAgIGRlcC5rZXkgPSBrZXk7XG4gICAgfVxuICAgIHtcbiAgICAgIGRlcC50cmFjayh7XG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgdHlwZSxcbiAgICAgICAga2V5XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHRyaWdnZXIodGFyZ2V0LCB0eXBlLCBrZXksIG5ld1ZhbHVlLCBvbGRWYWx1ZSwgb2xkVGFyZ2V0KSB7XG4gIGNvbnN0IGRlcHNNYXAgPSB0YXJnZXRNYXAuZ2V0KHRhcmdldCk7XG4gIGlmICghZGVwc01hcCkge1xuICAgIGdsb2JhbFZlcnNpb24rKztcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcnVuID0gKGRlcCkgPT4ge1xuICAgIGlmIChkZXApIHtcbiAgICAgIHtcbiAgICAgICAgZGVwLnRyaWdnZXIoe1xuICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICBvbGRWYWx1ZSxcbiAgICAgICAgICBvbGRUYXJnZXRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzdGFydEJhdGNoKCk7XG4gIGlmICh0eXBlID09PSBcImNsZWFyXCIpIHtcbiAgICBkZXBzTWFwLmZvckVhY2gocnVuKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB0YXJnZXRJc0FycmF5ID0gaXNBcnJheSh0YXJnZXQpO1xuICAgIGNvbnN0IGlzQXJyYXlJbmRleCA9IHRhcmdldElzQXJyYXkgJiYgaXNJbnRlZ2VyS2V5KGtleSk7XG4gICAgaWYgKHRhcmdldElzQXJyYXkgJiYga2V5ID09PSBcImxlbmd0aFwiKSB7XG4gICAgICBjb25zdCBuZXdMZW5ndGggPSBOdW1iZXIobmV3VmFsdWUpO1xuICAgICAgZGVwc01hcC5mb3JFYWNoKChkZXAsIGtleTIpID0+IHtcbiAgICAgICAgaWYgKGtleTIgPT09IFwibGVuZ3RoXCIgfHwga2V5MiA9PT0gQVJSQVlfSVRFUkFURV9LRVkgfHwgIWlzU3ltYm9sKGtleTIpICYmIGtleTIgPj0gbmV3TGVuZ3RoKSB7XG4gICAgICAgICAgcnVuKGRlcCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoa2V5ICE9PSB2b2lkIDAgfHwgZGVwc01hcC5oYXModm9pZCAwKSkge1xuICAgICAgICBydW4oZGVwc01hcC5nZXQoa2V5KSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUluZGV4KSB7XG4gICAgICAgIHJ1bihkZXBzTWFwLmdldChBUlJBWV9JVEVSQVRFX0tFWSkpO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJhZGRcIjpcbiAgICAgICAgICBpZiAoIXRhcmdldElzQXJyYXkpIHtcbiAgICAgICAgICAgIHJ1bihkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xuICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgcnVuKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlJbmRleCkge1xuICAgICAgICAgICAgcnVuKGRlcHNNYXAuZ2V0KFwibGVuZ3RoXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkZWxldGVcIjpcbiAgICAgICAgICBpZiAoIXRhcmdldElzQXJyYXkpIHtcbiAgICAgICAgICAgIHJ1bihkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xuICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgcnVuKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzZXRcIjpcbiAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xuICAgICAgICAgICAgcnVuKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbmRCYXRjaCgpO1xufVxuZnVuY3Rpb24gZ2V0RGVwRnJvbVJlYWN0aXZlKG9iamVjdCwga2V5KSB7XG4gIGNvbnN0IGRlcE1hcCA9IHRhcmdldE1hcC5nZXQob2JqZWN0KTtcbiAgcmV0dXJuIGRlcE1hcCAmJiBkZXBNYXAuZ2V0KGtleSk7XG59XG5cbmZ1bmN0aW9uIHJlYWN0aXZlUmVhZEFycmF5KGFycmF5KSB7XG4gIGNvbnN0IHJhdyA9IHRvUmF3KGFycmF5KTtcbiAgaWYgKHJhdyA9PT0gYXJyYXkpIHJldHVybiByYXc7XG4gIHRyYWNrKHJhdywgXCJpdGVyYXRlXCIsIEFSUkFZX0lURVJBVEVfS0VZKTtcbiAgcmV0dXJuIGlzU2hhbGxvdyhhcnJheSkgPyByYXcgOiByYXcubWFwKHRvUmVhY3RpdmUpO1xufVxuZnVuY3Rpb24gc2hhbGxvd1JlYWRBcnJheShhcnIpIHtcbiAgdHJhY2soYXJyID0gdG9SYXcoYXJyKSwgXCJpdGVyYXRlXCIsIEFSUkFZX0lURVJBVEVfS0VZKTtcbiAgcmV0dXJuIGFycjtcbn1cbmNvbnN0IGFycmF5SW5zdHJ1bWVudGF0aW9ucyA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gaXRlcmF0b3IodGhpcywgU3ltYm9sLml0ZXJhdG9yLCB0b1JlYWN0aXZlKTtcbiAgfSxcbiAgY29uY2F0KC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gcmVhY3RpdmVSZWFkQXJyYXkodGhpcykuY29uY2F0KFxuICAgICAgLi4uYXJncy5tYXAoKHgpID0+IGlzQXJyYXkoeCkgPyByZWFjdGl2ZVJlYWRBcnJheSh4KSA6IHgpXG4gICAgKTtcbiAgfSxcbiAgZW50cmllcygpIHtcbiAgICByZXR1cm4gaXRlcmF0b3IodGhpcywgXCJlbnRyaWVzXCIsICh2YWx1ZSkgPT4ge1xuICAgICAgdmFsdWVbMV0gPSB0b1JlYWN0aXZlKHZhbHVlWzFdKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbiAgfSxcbiAgZXZlcnkoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gYXBwbHkodGhpcywgXCJldmVyeVwiLCBmbiwgdGhpc0FyZywgdm9pZCAwLCBhcmd1bWVudHMpO1xuICB9LFxuICBmaWx0ZXIoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gYXBwbHkodGhpcywgXCJmaWx0ZXJcIiwgZm4sIHRoaXNBcmcsICh2KSA9PiB2Lm1hcCh0b1JlYWN0aXZlKSwgYXJndW1lbnRzKTtcbiAgfSxcbiAgZmluZChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBhcHBseSh0aGlzLCBcImZpbmRcIiwgZm4sIHRoaXNBcmcsIHRvUmVhY3RpdmUsIGFyZ3VtZW50cyk7XG4gIH0sXG4gIGZpbmRJbmRleChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBhcHBseSh0aGlzLCBcImZpbmRJbmRleFwiLCBmbiwgdGhpc0FyZywgdm9pZCAwLCBhcmd1bWVudHMpO1xuICB9LFxuICBmaW5kTGFzdChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBhcHBseSh0aGlzLCBcImZpbmRMYXN0XCIsIGZuLCB0aGlzQXJnLCB0b1JlYWN0aXZlLCBhcmd1bWVudHMpO1xuICB9LFxuICBmaW5kTGFzdEluZGV4KGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGFwcGx5KHRoaXMsIFwiZmluZExhc3RJbmRleFwiLCBmbiwgdGhpc0FyZywgdm9pZCAwLCBhcmd1bWVudHMpO1xuICB9LFxuICAvLyBmbGF0LCBmbGF0TWFwIGNvdWxkIGJlbmVmaXQgZnJvbSBBUlJBWV9JVEVSQVRFIGJ1dCBhcmUgbm90IHN0cmFpZ2h0LWZvcndhcmQgdG8gaW1wbGVtZW50XG4gIGZvckVhY2goZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gYXBwbHkodGhpcywgXCJmb3JFYWNoXCIsIGZuLCB0aGlzQXJnLCB2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH0sXG4gIGluY2x1ZGVzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gc2VhcmNoUHJveHkodGhpcywgXCJpbmNsdWRlc1wiLCBhcmdzKTtcbiAgfSxcbiAgaW5kZXhPZiguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHNlYXJjaFByb3h5KHRoaXMsIFwiaW5kZXhPZlwiLCBhcmdzKTtcbiAgfSxcbiAgam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gcmVhY3RpdmVSZWFkQXJyYXkodGhpcykuam9pbihzZXBhcmF0b3IpO1xuICB9LFxuICAvLyBrZXlzKCkgaXRlcmF0b3Igb25seSByZWFkcyBgbGVuZ3RoYCwgbm8gb3B0aW1pc2F0aW9uIHJlcXVpcmVkXG4gIGxhc3RJbmRleE9mKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gc2VhcmNoUHJveHkodGhpcywgXCJsYXN0SW5kZXhPZlwiLCBhcmdzKTtcbiAgfSxcbiAgbWFwKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGFwcGx5KHRoaXMsIFwibWFwXCIsIGZuLCB0aGlzQXJnLCB2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH0sXG4gIHBvcCgpIHtcbiAgICByZXR1cm4gbm9UcmFja2luZyh0aGlzLCBcInBvcFwiKTtcbiAgfSxcbiAgcHVzaCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIG5vVHJhY2tpbmcodGhpcywgXCJwdXNoXCIsIGFyZ3MpO1xuICB9LFxuICByZWR1Y2UoZm4sIC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gcmVkdWNlKHRoaXMsIFwicmVkdWNlXCIsIGZuLCBhcmdzKTtcbiAgfSxcbiAgcmVkdWNlUmlnaHQoZm4sIC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gcmVkdWNlKHRoaXMsIFwicmVkdWNlUmlnaHRcIiwgZm4sIGFyZ3MpO1xuICB9LFxuICBzaGlmdCgpIHtcbiAgICByZXR1cm4gbm9UcmFja2luZyh0aGlzLCBcInNoaWZ0XCIpO1xuICB9LFxuICAvLyBzbGljZSBjb3VsZCB1c2UgQVJSQVlfSVRFUkFURSBidXQgYWxzbyBzZWVtcyB0byBiZWcgZm9yIHJhbmdlIHRyYWNraW5nXG4gIHNvbWUoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gYXBwbHkodGhpcywgXCJzb21lXCIsIGZuLCB0aGlzQXJnLCB2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH0sXG4gIHNwbGljZSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIG5vVHJhY2tpbmcodGhpcywgXCJzcGxpY2VcIiwgYXJncyk7XG4gIH0sXG4gIHRvUmV2ZXJzZWQoKSB7XG4gICAgcmV0dXJuIHJlYWN0aXZlUmVhZEFycmF5KHRoaXMpLnRvUmV2ZXJzZWQoKTtcbiAgfSxcbiAgdG9Tb3J0ZWQoY29tcGFyZXIpIHtcbiAgICByZXR1cm4gcmVhY3RpdmVSZWFkQXJyYXkodGhpcykudG9Tb3J0ZWQoY29tcGFyZXIpO1xuICB9LFxuICB0b1NwbGljZWQoLi4uYXJncykge1xuICAgIHJldHVybiByZWFjdGl2ZVJlYWRBcnJheSh0aGlzKS50b1NwbGljZWQoLi4uYXJncyk7XG4gIH0sXG4gIHVuc2hpZnQoLi4uYXJncykge1xuICAgIHJldHVybiBub1RyYWNraW5nKHRoaXMsIFwidW5zaGlmdFwiLCBhcmdzKTtcbiAgfSxcbiAgdmFsdWVzKCkge1xuICAgIHJldHVybiBpdGVyYXRvcih0aGlzLCBcInZhbHVlc1wiLCB0b1JlYWN0aXZlKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGl0ZXJhdG9yKHNlbGYsIG1ldGhvZCwgd3JhcFZhbHVlKSB7XG4gIGNvbnN0IGFyciA9IHNoYWxsb3dSZWFkQXJyYXkoc2VsZik7XG4gIGNvbnN0IGl0ZXIgPSBhcnJbbWV0aG9kXSgpO1xuICBpZiAoYXJyICE9PSBzZWxmICYmICFpc1NoYWxsb3coc2VsZikpIHtcbiAgICBpdGVyLl9uZXh0ID0gaXRlci5uZXh0O1xuICAgIGl0ZXIubmV4dCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGl0ZXIuX25leHQoKTtcbiAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcbiAgICAgICAgcmVzdWx0LnZhbHVlID0gd3JhcFZhbHVlKHJlc3VsdC52YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGl0ZXI7XG59XG5jb25zdCBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuZnVuY3Rpb24gYXBwbHkoc2VsZiwgbWV0aG9kLCBmbiwgdGhpc0FyZywgd3JhcHBlZFJldEZuLCBhcmdzKSB7XG4gIGNvbnN0IGFyciA9IHNoYWxsb3dSZWFkQXJyYXkoc2VsZik7XG4gIGNvbnN0IG5lZWRzV3JhcCA9IGFyciAhPT0gc2VsZiAmJiAhaXNTaGFsbG93KHNlbGYpO1xuICBjb25zdCBtZXRob2RGbiA9IGFyclttZXRob2RdO1xuICBpZiAobWV0aG9kRm4gIT09IGFycmF5UHJvdG9bbWV0aG9kXSkge1xuICAgIGNvbnN0IHJlc3VsdDIgPSBtZXRob2RGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICByZXR1cm4gbmVlZHNXcmFwID8gdG9SZWFjdGl2ZShyZXN1bHQyKSA6IHJlc3VsdDI7XG4gIH1cbiAgbGV0IHdyYXBwZWRGbiA9IGZuO1xuICBpZiAoYXJyICE9PSBzZWxmKSB7XG4gICAgaWYgKG5lZWRzV3JhcCkge1xuICAgICAgd3JhcHBlZEZuID0gZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdG9SZWFjdGl2ZShpdGVtKSwgaW5kZXgsIHNlbGYpO1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGZuLmxlbmd0aCA+IDIpIHtcbiAgICAgIHdyYXBwZWRGbiA9IGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGl0ZW0sIGluZGV4LCBzZWxmKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlc3VsdCA9IG1ldGhvZEZuLmNhbGwoYXJyLCB3cmFwcGVkRm4sIHRoaXNBcmcpO1xuICByZXR1cm4gbmVlZHNXcmFwICYmIHdyYXBwZWRSZXRGbiA/IHdyYXBwZWRSZXRGbihyZXN1bHQpIDogcmVzdWx0O1xufVxuZnVuY3Rpb24gcmVkdWNlKHNlbGYsIG1ldGhvZCwgZm4sIGFyZ3MpIHtcbiAgY29uc3QgYXJyID0gc2hhbGxvd1JlYWRBcnJheShzZWxmKTtcbiAgbGV0IHdyYXBwZWRGbiA9IGZuO1xuICBpZiAoYXJyICE9PSBzZWxmKSB7XG4gICAgaWYgKCFpc1NoYWxsb3coc2VsZikpIHtcbiAgICAgIHdyYXBwZWRGbiA9IGZ1bmN0aW9uKGFjYywgaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgYWNjLCB0b1JlYWN0aXZlKGl0ZW0pLCBpbmRleCwgc2VsZik7XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZm4ubGVuZ3RoID4gMykge1xuICAgICAgd3JhcHBlZEZuID0gZnVuY3Rpb24oYWNjLCBpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBhY2MsIGl0ZW0sIGluZGV4LCBzZWxmKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJbbWV0aG9kXSh3cmFwcGVkRm4sIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gc2VhcmNoUHJveHkoc2VsZiwgbWV0aG9kLCBhcmdzKSB7XG4gIGNvbnN0IGFyciA9IHRvUmF3KHNlbGYpO1xuICB0cmFjayhhcnIsIFwiaXRlcmF0ZVwiLCBBUlJBWV9JVEVSQVRFX0tFWSk7XG4gIGNvbnN0IHJlcyA9IGFyclttZXRob2RdKC4uLmFyZ3MpO1xuICBpZiAoKHJlcyA9PT0gLTEgfHwgcmVzID09PSBmYWxzZSkgJiYgaXNQcm94eShhcmdzWzBdKSkge1xuICAgIGFyZ3NbMF0gPSB0b1JhdyhhcmdzWzBdKTtcbiAgICByZXR1cm4gYXJyW21ldGhvZF0oLi4uYXJncyk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIG5vVHJhY2tpbmcoc2VsZiwgbWV0aG9kLCBhcmdzID0gW10pIHtcbiAgcGF1c2VUcmFja2luZygpO1xuICBzdGFydEJhdGNoKCk7XG4gIGNvbnN0IHJlcyA9IHRvUmF3KHNlbGYpW21ldGhvZF0uYXBwbHkoc2VsZiwgYXJncyk7XG4gIGVuZEJhdGNoKCk7XG4gIHJlc2V0VHJhY2tpbmcoKTtcbiAgcmV0dXJuIHJlcztcbn1cblxuY29uc3QgaXNOb25UcmFja2FibGVLZXlzID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoYF9fcHJvdG9fXyxfX3ZfaXNSZWYsX19pc1Z1ZWApO1xuY29uc3QgYnVpbHRJblN5bWJvbHMgPSBuZXcgU2V0KFxuICAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoU3ltYm9sKS5maWx0ZXIoKGtleSkgPT4ga2V5ICE9PSBcImFyZ3VtZW50c1wiICYmIGtleSAhPT0gXCJjYWxsZXJcIikubWFwKChrZXkpID0+IFN5bWJvbFtrZXldKS5maWx0ZXIoaXNTeW1ib2wpXG4pO1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkoa2V5KSB7XG4gIGlmICghaXNTeW1ib2woa2V5KSkga2V5ID0gU3RyaW5nKGtleSk7XG4gIGNvbnN0IG9iaiA9IHRvUmF3KHRoaXMpO1xuICB0cmFjayhvYmosIFwiaGFzXCIsIGtleSk7XG4gIHJldHVybiBvYmouaGFzT3duUHJvcGVydHkoa2V5KTtcbn1cbmNsYXNzIEJhc2VSZWFjdGl2ZUhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcihfaXNSZWFkb25seSA9IGZhbHNlLCBfaXNTaGFsbG93ID0gZmFsc2UpIHtcbiAgICB0aGlzLl9pc1JlYWRvbmx5ID0gX2lzUmVhZG9ubHk7XG4gICAgdGhpcy5faXNTaGFsbG93ID0gX2lzU2hhbGxvdztcbiAgfVxuICBnZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSB7XG4gICAgaWYgKGtleSA9PT0gXCJfX3Zfc2tpcFwiKSByZXR1cm4gdGFyZ2V0W1wiX192X3NraXBcIl07XG4gICAgY29uc3QgaXNSZWFkb25seTIgPSB0aGlzLl9pc1JlYWRvbmx5LCBpc1NoYWxsb3cyID0gdGhpcy5faXNTaGFsbG93O1xuICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIikge1xuICAgICAgcmV0dXJuICFpc1JlYWRvbmx5MjtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiKSB7XG4gICAgICByZXR1cm4gaXNSZWFkb25seTI7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiX192X2lzU2hhbGxvd1wiKSB7XG4gICAgICByZXR1cm4gaXNTaGFsbG93MjtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIpIHtcbiAgICAgIGlmIChyZWNlaXZlciA9PT0gKGlzUmVhZG9ubHkyID8gaXNTaGFsbG93MiA/IHNoYWxsb3dSZWFkb25seU1hcCA6IHJlYWRvbmx5TWFwIDogaXNTaGFsbG93MiA/IHNoYWxsb3dSZWFjdGl2ZU1hcCA6IHJlYWN0aXZlTWFwKS5nZXQodGFyZ2V0KSB8fCAvLyByZWNlaXZlciBpcyBub3QgdGhlIHJlYWN0aXZlIHByb3h5LCBidXQgaGFzIHRoZSBzYW1lIHByb3RvdHlwZVxuICAgICAgLy8gdGhpcyBtZWFucyB0aGUgcmVjZWl2ZXIgaXMgYSB1c2VyIHByb3h5IG9mIHRoZSByZWFjdGl2ZSBwcm94eVxuICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCkgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZihyZWNlaXZlcikpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0SXNBcnJheSA9IGlzQXJyYXkodGFyZ2V0KTtcbiAgICBpZiAoIWlzUmVhZG9ubHkyKSB7XG4gICAgICBsZXQgZm47XG4gICAgICBpZiAodGFyZ2V0SXNBcnJheSAmJiAoZm4gPSBhcnJheUluc3RydW1lbnRhdGlvbnNba2V5XSkpIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gXCJoYXNPd25Qcm9wZXJ0eVwiKSB7XG4gICAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzID0gUmVmbGVjdC5nZXQoXG4gICAgICB0YXJnZXQsXG4gICAgICBrZXksXG4gICAgICAvLyBpZiB0aGlzIGlzIGEgcHJveHkgd3JhcHBpbmcgYSByZWYsIHJldHVybiBtZXRob2RzIHVzaW5nIHRoZSByYXcgcmVmXG4gICAgICAvLyBhcyByZWNlaXZlciBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG8gY2FsbCBgdG9SYXdgIG9uIHRoZSByZWYgaW4gYWxsXG4gICAgICAvLyBpdHMgY2xhc3MgbWV0aG9kc1xuICAgICAgaXNSZWYodGFyZ2V0KSA/IHRhcmdldCA6IHJlY2VpdmVyXG4gICAgKTtcbiAgICBpZiAoaXNTeW1ib2woa2V5KSA/IGJ1aWx0SW5TeW1ib2xzLmhhcyhrZXkpIDogaXNOb25UcmFja2FibGVLZXlzKGtleSkpIHtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmICghaXNSZWFkb25seTIpIHtcbiAgICAgIHRyYWNrKHRhcmdldCwgXCJnZXRcIiwga2V5KTtcbiAgICB9XG4gICAgaWYgKGlzU2hhbGxvdzIpIHtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmIChpc1JlZihyZXMpKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0SXNBcnJheSAmJiBpc0ludGVnZXJLZXkoa2V5KSA/IHJlcyA6IHJlcy52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIHJldHVybiBpc1JlYWRvbmx5MiA/IHJlYWRvbmx5KHJlcykgOiByZWFjdGl2ZShyZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG59XG5jbGFzcyBNdXRhYmxlUmVhY3RpdmVIYW5kbGVyIGV4dGVuZHMgQmFzZVJlYWN0aXZlSGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKGlzU2hhbGxvdzIgPSBmYWxzZSkge1xuICAgIHN1cGVyKGZhbHNlLCBpc1NoYWxsb3cyKTtcbiAgfVxuICBzZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikge1xuICAgIGxldCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xuICAgIGlmICghdGhpcy5faXNTaGFsbG93KSB7XG4gICAgICBjb25zdCBpc09sZFZhbHVlUmVhZG9ubHkgPSBpc1JlYWRvbmx5KG9sZFZhbHVlKTtcbiAgICAgIGlmICghaXNTaGFsbG93KHZhbHVlKSAmJiAhaXNSZWFkb25seSh2YWx1ZSkpIHtcbiAgICAgICAgb2xkVmFsdWUgPSB0b1JhdyhvbGRWYWx1ZSk7XG4gICAgICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkgJiYgaXNSZWYob2xkVmFsdWUpICYmICFpc1JlZih2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGlzT2xkVmFsdWVSZWFkb25seSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGhhZEtleSA9IGlzQXJyYXkodGFyZ2V0KSAmJiBpc0ludGVnZXJLZXkoa2V5KSA/IE51bWJlcihrZXkpIDwgdGFyZ2V0Lmxlbmd0aCA6IGhhc093bih0YXJnZXQsIGtleSk7XG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5zZXQoXG4gICAgICB0YXJnZXQsXG4gICAgICBrZXksXG4gICAgICB2YWx1ZSxcbiAgICAgIGlzUmVmKHRhcmdldCkgPyB0YXJnZXQgOiByZWNlaXZlclxuICAgICk7XG4gICAgaWYgKHRhcmdldCA9PT0gdG9SYXcocmVjZWl2ZXIpKSB7XG4gICAgICBpZiAoIWhhZEtleSkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJhZGRcIiwga2V5LCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJzZXRcIiwga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XG4gICAgY29uc3QgaGFkS2V5ID0gaGFzT3duKHRhcmdldCwga2V5KTtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpO1xuICAgIGlmIChyZXN1bHQgJiYgaGFkS2V5KSB7XG4gICAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiwga2V5LCB2b2lkIDAsIG9sZFZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBoYXModGFyZ2V0LCBrZXkpIHtcbiAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0Lmhhcyh0YXJnZXQsIGtleSk7XG4gICAgaWYgKCFpc1N5bWJvbChrZXkpIHx8ICFidWlsdEluU3ltYm9scy5oYXMoa2V5KSkge1xuICAgICAgdHJhY2sodGFyZ2V0LCBcImhhc1wiLCBrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIG93bktleXModGFyZ2V0KSB7XG4gICAgdHJhY2soXG4gICAgICB0YXJnZXQsXG4gICAgICBcIml0ZXJhdGVcIixcbiAgICAgIGlzQXJyYXkodGFyZ2V0KSA/IFwibGVuZ3RoXCIgOiBJVEVSQVRFX0tFWVxuICAgICk7XG4gICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xuICB9XG59XG5jbGFzcyBSZWFkb25seVJlYWN0aXZlSGFuZGxlciBleHRlbmRzIEJhc2VSZWFjdGl2ZUhhbmRsZXIge1xuICBjb25zdHJ1Y3Rvcihpc1NoYWxsb3cyID0gZmFsc2UpIHtcbiAgICBzdXBlcih0cnVlLCBpc1NoYWxsb3cyKTtcbiAgfVxuICBzZXQodGFyZ2V0LCBrZXkpIHtcbiAgICB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIGBTZXQgb3BlcmF0aW9uIG9uIGtleSBcIiR7U3RyaW5nKGtleSl9XCIgZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCxcbiAgICAgICAgdGFyZ2V0XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSkge1xuICAgIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgYERlbGV0ZSBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLFxuICAgICAgICB0YXJnZXRcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5jb25zdCBtdXRhYmxlSGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE11dGFibGVSZWFjdGl2ZUhhbmRsZXIoKTtcbmNvbnN0IHJlYWRvbmx5SGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFJlYWRvbmx5UmVhY3RpdmVIYW5kbGVyKCk7XG5jb25zdCBzaGFsbG93UmVhY3RpdmVIYW5kbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTXV0YWJsZVJlYWN0aXZlSGFuZGxlcih0cnVlKTtcbmNvbnN0IHNoYWxsb3dSZWFkb25seUhhbmRsZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBSZWFkb25seVJlYWN0aXZlSGFuZGxlcih0cnVlKTtcblxuY29uc3QgdG9TaGFsbG93ID0gKHZhbHVlKSA9PiB2YWx1ZTtcbmNvbnN0IGdldFByb3RvID0gKHYpID0+IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yodik7XG5mdW5jdGlvbiBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGlzUmVhZG9ubHkyLCBpc1NoYWxsb3cyKSB7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIl07XG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcbiAgICBjb25zdCB0YXJnZXRJc01hcCA9IGlzTWFwKHJhd1RhcmdldCk7XG4gICAgY29uc3QgaXNQYWlyID0gbWV0aG9kID09PSBcImVudHJpZXNcIiB8fCBtZXRob2QgPT09IFN5bWJvbC5pdGVyYXRvciAmJiB0YXJnZXRJc01hcDtcbiAgICBjb25zdCBpc0tleU9ubHkgPSBtZXRob2QgPT09IFwia2V5c1wiICYmIHRhcmdldElzTWFwO1xuICAgIGNvbnN0IGlubmVySXRlcmF0b3IgPSB0YXJnZXRbbWV0aG9kXSguLi5hcmdzKTtcbiAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93MiA/IHRvU2hhbGxvdyA6IGlzUmVhZG9ubHkyID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XG4gICAgIWlzUmVhZG9ubHkyICYmIHRyYWNrKFxuICAgICAgcmF3VGFyZ2V0LFxuICAgICAgXCJpdGVyYXRlXCIsXG4gICAgICBpc0tleU9ubHkgPyBNQVBfS0VZX0lURVJBVEVfS0VZIDogSVRFUkFURV9LRVlcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICAvLyBpdGVyYXRvciBwcm90b2NvbFxuICAgICAgbmV4dCgpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gaW5uZXJJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIHJldHVybiBkb25lID8geyB2YWx1ZSwgZG9uZSB9IDoge1xuICAgICAgICAgIHZhbHVlOiBpc1BhaXIgPyBbd3JhcCh2YWx1ZVswXSksIHdyYXAodmFsdWVbMV0pXSA6IHdyYXAodmFsdWUpLFxuICAgICAgICAgIGRvbmVcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICAvLyBpdGVyYWJsZSBwcm90b2NvbFxuICAgICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVSZWFkb25seU1ldGhvZCh0eXBlKSB7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAge1xuICAgICAgY29uc3Qga2V5ID0gYXJnc1swXSA/IGBvbiBrZXkgXCIke2FyZ3NbMF19XCIgYCA6IGBgO1xuICAgICAgd2FybiQyKFxuICAgICAgICBgJHtjYXBpdGFsaXplKHR5cGUpfSBvcGVyYXRpb24gJHtrZXl9ZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCxcbiAgICAgICAgdG9SYXcodGhpcylcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0eXBlID09PSBcImRlbGV0ZVwiID8gZmFsc2UgOiB0eXBlID09PSBcImNsZWFyXCIgPyB2b2lkIDAgOiB0aGlzO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSW5zdHJ1bWVudGF0aW9ucyhyZWFkb25seSwgc2hhbGxvdykge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0ge1xuICAgIGdldChrZXkpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbXCJfX3ZfcmF3XCJdO1xuICAgICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcbiAgICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gICAgICBpZiAoIXJlYWRvbmx5KSB7XG4gICAgICAgIGlmIChoYXNDaGFuZ2VkKGtleSwgcmF3S2V5KSkge1xuICAgICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJnZXRcIiwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIsIHJhd0tleSk7XG4gICAgICB9XG4gICAgICBjb25zdCB7IGhhcyB9ID0gZ2V0UHJvdG8ocmF3VGFyZ2V0KTtcbiAgICAgIGNvbnN0IHdyYXAgPSBzaGFsbG93ID8gdG9TaGFsbG93IDogcmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogdG9SZWFjdGl2ZTtcbiAgICAgIGlmIChoYXMuY2FsbChyYXdUYXJnZXQsIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0LmdldChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoaGFzLmNhbGwocmF3VGFyZ2V0LCByYXdLZXkpKSB7XG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldC5nZXQocmF3S2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldCAhPT0gcmF3VGFyZ2V0KSB7XG4gICAgICAgIHRhcmdldC5nZXQoa2V5KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldCBzaXplKCkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIl07XG4gICAgICAhcmVhZG9ubHkgJiYgdHJhY2sodG9SYXcodGFyZ2V0KSwgXCJpdGVyYXRlXCIsIElURVJBVEVfS0VZKTtcbiAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIFwic2l6ZVwiLCB0YXJnZXQpO1xuICAgIH0sXG4gICAgaGFzKGtleSkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIl07XG4gICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcbiAgICAgIGlmICghcmVhZG9ubHkpIHtcbiAgICAgICAgaWYgKGhhc0NoYW5nZWQoa2V5LCByYXdLZXkpKSB7XG4gICAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJoYXNcIiwgcmF3S2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXkgPT09IHJhd0tleSA/IHRhcmdldC5oYXMoa2V5KSA6IHRhcmdldC5oYXMoa2V5KSB8fCB0YXJnZXQuaGFzKHJhd0tleSk7XG4gICAgfSxcbiAgICBmb3JFYWNoKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICBjb25zdCBvYnNlcnZlZCA9IHRoaXM7XG4gICAgICBjb25zdCB0YXJnZXQgPSBvYnNlcnZlZFtcIl9fdl9yYXdcIl07XG4gICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgICAgY29uc3Qgd3JhcCA9IHNoYWxsb3cgPyB0b1NoYWxsb3cgOiByZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xuICAgICAgIXJlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIsIElURVJBVEVfS0VZKTtcbiAgICAgIHJldHVybiB0YXJnZXQuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB3cmFwKHZhbHVlKSwgd3JhcChrZXkpLCBvYnNlcnZlZCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIGV4dGVuZChcbiAgICBpbnN0cnVtZW50YXRpb25zLFxuICAgIHJlYWRvbmx5ID8ge1xuICAgICAgYWRkOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImFkZFwiKSxcbiAgICAgIHNldDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJzZXRcIiksXG4gICAgICBkZWxldGU6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiZGVsZXRlXCIpLFxuICAgICAgY2xlYXI6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiY2xlYXJcIilcbiAgICB9IDoge1xuICAgICAgYWRkKHZhbHVlKSB7XG4gICAgICAgIGlmICghc2hhbGxvdyAmJiAhaXNTaGFsbG93KHZhbHVlKSAmJiAhaXNSZWFkb25seSh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICAgICAgY29uc3QgcHJvdG8gPSBnZXRQcm90byh0YXJnZXQpO1xuICAgICAgICBjb25zdCBoYWRLZXkgPSBwcm90by5oYXMuY2FsbCh0YXJnZXQsIHZhbHVlKTtcbiAgICAgICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAgICB0YXJnZXQuYWRkKHZhbHVlKTtcbiAgICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJhZGRcIiwgdmFsdWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXNoYWxsb3cgJiYgIWlzU2hhbGxvdyh2YWx1ZSkgJiYgIWlzUmVhZG9ubHkodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XG4gICAgICAgIGNvbnN0IHsgaGFzLCBnZXQgfSA9IGdldFByb3RvKHRhcmdldCk7XG4gICAgICAgIGxldCBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgICAgIGlmICghaGFkS2V5KSB7XG4gICAgICAgICAga2V5ID0gdG9SYXcoa2V5KTtcbiAgICAgICAgICBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgICAgIHRhcmdldC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICghaGFkS2V5KSB7XG4gICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIsIGtleSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiLCBrZXksIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgZGVsZXRlKGtleSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyBoYXMsIGdldCB9ID0gZ2V0UHJvdG8odGFyZ2V0KTtcbiAgICAgICAgbGV0IGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcbiAgICAgICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xuICAgICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhcywga2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IGdldCA/IGdldC5jYWxsKHRhcmdldCwga2V5KSA6IHZvaWQgMDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmRlbGV0ZShrZXkpO1xuICAgICAgICBpZiAoaGFkS2V5KSB7XG4gICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiZGVsZXRlXCIsIGtleSwgdm9pZCAwLCBvbGRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sXG4gICAgICBjbGVhcigpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XG4gICAgICAgIGNvbnN0IGhhZEl0ZW1zID0gdGFyZ2V0LnNpemUgIT09IDA7XG4gICAgICAgIGNvbnN0IG9sZFRhcmdldCA9IGlzTWFwKHRhcmdldCkgPyBuZXcgTWFwKHRhcmdldCkgOiBuZXcgU2V0KHRhcmdldCkgO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuY2xlYXIoKTtcbiAgICAgICAgaWYgKGhhZEl0ZW1zKSB7XG4gICAgICAgICAgdHJpZ2dlcihcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIFwiY2xlYXJcIixcbiAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgIG9sZFRhcmdldFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIGNvbnN0IGl0ZXJhdG9yTWV0aG9kcyA9IFtcbiAgICBcImtleXNcIixcbiAgICBcInZhbHVlc1wiLFxuICAgIFwiZW50cmllc1wiLFxuICAgIFN5bWJvbC5pdGVyYXRvclxuICBdO1xuICBpdGVyYXRvck1ldGhvZHMuZm9yRWFjaCgobWV0aG9kKSA9PiB7XG4gICAgaW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCByZWFkb25seSwgc2hhbGxvdyk7XG4gIH0pO1xuICByZXR1cm4gaW5zdHJ1bWVudGF0aW9ucztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihpc1JlYWRvbmx5Miwgc2hhbGxvdykge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0gY3JlYXRlSW5zdHJ1bWVudGF0aW9ucyhpc1JlYWRvbmx5Miwgc2hhbGxvdyk7XG4gIHJldHVybiAodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSA9PiB7XG4gICAgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFjdGl2ZVwiKSB7XG4gICAgICByZXR1cm4gIWlzUmVhZG9ubHkyO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWRvbmx5XCIpIHtcbiAgICAgIHJldHVybiBpc1JlYWRvbmx5MjtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIpIHtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIHJldHVybiBSZWZsZWN0LmdldChcbiAgICAgIGhhc093bihpbnN0cnVtZW50YXRpb25zLCBrZXkpICYmIGtleSBpbiB0YXJnZXQgPyBpbnN0cnVtZW50YXRpb25zIDogdGFyZ2V0LFxuICAgICAga2V5LFxuICAgICAgcmVjZWl2ZXJcbiAgICApO1xuICB9O1xufVxuY29uc3QgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcbiAgZ2V0OiAvKiBAX19QVVJFX18gKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGZhbHNlLCBmYWxzZSlcbn07XG5jb25zdCBzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzID0ge1xuICBnZXQ6IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoZmFsc2UsIHRydWUpXG59O1xuY29uc3QgcmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gIGdldDogLyogQF9fUFVSRV9fICovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcih0cnVlLCBmYWxzZSlcbn07XG5jb25zdCBzaGFsbG93UmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gIGdldDogLyogQF9fUFVSRV9fICovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcih0cnVlLCB0cnVlKVxufTtcbmZ1bmN0aW9uIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpIHtcbiAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcbiAgaWYgKHJhd0tleSAhPT0ga2V5ICYmIGhhcy5jYWxsKHRhcmdldCwgcmF3S2V5KSkge1xuICAgIGNvbnN0IHR5cGUgPSB0b1Jhd1R5cGUodGFyZ2V0KTtcbiAgICB3YXJuJDIoXG4gICAgICBgUmVhY3RpdmUgJHt0eXBlfSBjb250YWlucyBib3RoIHRoZSByYXcgYW5kIHJlYWN0aXZlIHZlcnNpb25zIG9mIHRoZSBzYW1lIG9iamVjdCR7dHlwZSA9PT0gYE1hcGAgPyBgIGFzIGtleXNgIDogYGB9LCB3aGljaCBjYW4gbGVhZCB0byBpbmNvbnNpc3RlbmNpZXMuIEF2b2lkIGRpZmZlcmVudGlhdGluZyBiZXR3ZWVuIHRoZSByYXcgYW5kIHJlYWN0aXZlIHZlcnNpb25zIG9mIGFuIG9iamVjdCBhbmQgb25seSB1c2UgdGhlIHJlYWN0aXZlIHZlcnNpb24gaWYgcG9zc2libGUuYFxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgcmVhY3RpdmVNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHNoYWxsb3dSZWFjdGl2ZU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmVhZG9ubHlNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHNoYWxsb3dSZWFkb25seU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gdGFyZ2V0VHlwZU1hcChyYXdUeXBlKSB7XG4gIHN3aXRjaCAocmF3VHlwZSkge1xuICAgIGNhc2UgXCJPYmplY3RcIjpcbiAgICBjYXNlIFwiQXJyYXlcIjpcbiAgICAgIHJldHVybiAxIC8qIENPTU1PTiAqLztcbiAgICBjYXNlIFwiTWFwXCI6XG4gICAgY2FzZSBcIlNldFwiOlxuICAgIGNhc2UgXCJXZWFrTWFwXCI6XG4gICAgY2FzZSBcIldlYWtTZXRcIjpcbiAgICAgIHJldHVybiAyIC8qIENPTExFQ1RJT04gKi87XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAwIC8qIElOVkFMSUQgKi87XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRhcmdldFR5cGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlW1wiX192X3NraXBcIl0gfHwgIU9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpID8gMCAvKiBJTlZBTElEICovIDogdGFyZ2V0VHlwZU1hcCh0b1Jhd1R5cGUodmFsdWUpKTtcbn1cbmZ1bmN0aW9uIHJlYWN0aXZlKHRhcmdldCkge1xuICBpZiAoaXNSZWFkb25seSh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QoXG4gICAgdGFyZ2V0LFxuICAgIGZhbHNlLFxuICAgIG11dGFibGVIYW5kbGVycyxcbiAgICBtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzLFxuICAgIHJlYWN0aXZlTWFwXG4gICk7XG59XG5mdW5jdGlvbiBzaGFsbG93UmVhY3RpdmUodGFyZ2V0KSB7XG4gIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdChcbiAgICB0YXJnZXQsXG4gICAgZmFsc2UsXG4gICAgc2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMsXG4gICAgc2hhbGxvd0NvbGxlY3Rpb25IYW5kbGVycyxcbiAgICBzaGFsbG93UmVhY3RpdmVNYXBcbiAgKTtcbn1cbmZ1bmN0aW9uIHJlYWRvbmx5KHRhcmdldCkge1xuICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QoXG4gICAgdGFyZ2V0LFxuICAgIHRydWUsXG4gICAgcmVhZG9ubHlIYW5kbGVycyxcbiAgICByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyxcbiAgICByZWFkb25seU1hcFxuICApO1xufVxuZnVuY3Rpb24gc2hhbGxvd1JlYWRvbmx5KHRhcmdldCkge1xuICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QoXG4gICAgdGFyZ2V0LFxuICAgIHRydWUsXG4gICAgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMsXG4gICAgc2hhbGxvd1JlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzLFxuICAgIHNoYWxsb3dSZWFkb25seU1hcFxuICApO1xufVxuZnVuY3Rpb24gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBpc1JlYWRvbmx5MiwgYmFzZUhhbmRsZXJzLCBjb2xsZWN0aW9uSGFuZGxlcnMsIHByb3h5TWFwKSB7XG4gIGlmICghaXNPYmplY3QodGFyZ2V0KSkge1xuICAgIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgYHZhbHVlIGNhbm5vdCBiZSBtYWRlICR7aXNSZWFkb25seTIgPyBcInJlYWRvbmx5XCIgOiBcInJlYWN0aXZlXCJ9OiAke1N0cmluZyhcbiAgICAgICAgICB0YXJnZXRcbiAgICAgICAgKX1gXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIGlmICh0YXJnZXRbXCJfX3ZfcmF3XCJdICYmICEoaXNSZWFkb25seTIgJiYgdGFyZ2V0W1wiX192X2lzUmVhY3RpdmVcIl0pKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICBjb25zdCBleGlzdGluZ1Byb3h5ID0gcHJveHlNYXAuZ2V0KHRhcmdldCk7XG4gIGlmIChleGlzdGluZ1Byb3h5KSB7XG4gICAgcmV0dXJuIGV4aXN0aW5nUHJveHk7XG4gIH1cbiAgY29uc3QgdGFyZ2V0VHlwZSA9IGdldFRhcmdldFR5cGUodGFyZ2V0KTtcbiAgaWYgKHRhcmdldFR5cGUgPT09IDAgLyogSU5WQUxJRCAqLykge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkoXG4gICAgdGFyZ2V0LFxuICAgIHRhcmdldFR5cGUgPT09IDIgLyogQ09MTEVDVElPTiAqLyA/IGNvbGxlY3Rpb25IYW5kbGVycyA6IGJhc2VIYW5kbGVyc1xuICApO1xuICBwcm94eU1hcC5zZXQodGFyZ2V0LCBwcm94eSk7XG4gIHJldHVybiBwcm94eTtcbn1cbmZ1bmN0aW9uIGlzUmVhY3RpdmUodmFsdWUpIHtcbiAgaWYgKGlzUmVhZG9ubHkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGlzUmVhY3RpdmUodmFsdWVbXCJfX3ZfcmF3XCJdKTtcbiAgfVxuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFjdGl2ZVwiXSk7XG59XG5mdW5jdGlvbiBpc1JlYWRvbmx5KHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1JlYWRvbmx5XCJdKTtcbn1cbmZ1bmN0aW9uIGlzU2hhbGxvdyh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNTaGFsbG93XCJdKTtcbn1cbmZ1bmN0aW9uIGlzUHJveHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID8gISF2YWx1ZVtcIl9fdl9yYXdcIl0gOiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHRvUmF3KG9ic2VydmVkKSB7XG4gIGNvbnN0IHJhdyA9IG9ic2VydmVkICYmIG9ic2VydmVkW1wiX192X3Jhd1wiXTtcbiAgcmV0dXJuIHJhdyA/IHRvUmF3KHJhdykgOiBvYnNlcnZlZDtcbn1cbmZ1bmN0aW9uIG1hcmtSYXcodmFsdWUpIHtcbiAgaWYgKCFoYXNPd24odmFsdWUsIFwiX192X3NraXBcIikgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkpIHtcbiAgICBkZWYodmFsdWUsIFwiX192X3NraXBcIiwgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuY29uc3QgdG9SZWFjdGl2ZSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhY3RpdmUodmFsdWUpIDogdmFsdWU7XG5jb25zdCB0b1JlYWRvbmx5ID0gKHZhbHVlKSA9PiBpc09iamVjdCh2YWx1ZSkgPyByZWFkb25seSh2YWx1ZSkgOiB2YWx1ZTtcblxuZnVuY3Rpb24gaXNSZWYocikge1xuICByZXR1cm4gciA/IHJbXCJfX3ZfaXNSZWZcIl0gPT09IHRydWUgOiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHJlZih2YWx1ZSkge1xuICByZXR1cm4gY3JlYXRlUmVmKHZhbHVlLCBmYWxzZSk7XG59XG5mdW5jdGlvbiBzaGFsbG93UmVmKHZhbHVlKSB7XG4gIHJldHVybiBjcmVhdGVSZWYodmFsdWUsIHRydWUpO1xufVxuZnVuY3Rpb24gY3JlYXRlUmVmKHJhd1ZhbHVlLCBzaGFsbG93KSB7XG4gIGlmIChpc1JlZihyYXdWYWx1ZSkpIHtcbiAgICByZXR1cm4gcmF3VmFsdWU7XG4gIH1cbiAgcmV0dXJuIG5ldyBSZWZJbXBsKHJhd1ZhbHVlLCBzaGFsbG93KTtcbn1cbmNsYXNzIFJlZkltcGwge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSwgaXNTaGFsbG93Mikge1xuICAgIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICAgIHRoaXNbXCJfX3ZfaXNSZWZcIl0gPSB0cnVlO1xuICAgIHRoaXNbXCJfX3ZfaXNTaGFsbG93XCJdID0gZmFsc2U7XG4gICAgdGhpcy5fcmF3VmFsdWUgPSBpc1NoYWxsb3cyID8gdmFsdWUgOiB0b1Jhdyh2YWx1ZSk7XG4gICAgdGhpcy5fdmFsdWUgPSBpc1NoYWxsb3cyID8gdmFsdWUgOiB0b1JlYWN0aXZlKHZhbHVlKTtcbiAgICB0aGlzW1wiX192X2lzU2hhbGxvd1wiXSA9IGlzU2hhbGxvdzI7XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHtcbiAgICAgIHRoaXMuZGVwLnRyYWNrKHtcbiAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICB0eXBlOiBcImdldFwiLFxuICAgICAgICBrZXk6IFwidmFsdWVcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuX3Jhd1ZhbHVlO1xuICAgIGNvbnN0IHVzZURpcmVjdFZhbHVlID0gdGhpc1tcIl9fdl9pc1NoYWxsb3dcIl0gfHwgaXNTaGFsbG93KG5ld1ZhbHVlKSB8fCBpc1JlYWRvbmx5KG5ld1ZhbHVlKTtcbiAgICBuZXdWYWx1ZSA9IHVzZURpcmVjdFZhbHVlID8gbmV3VmFsdWUgOiB0b1JhdyhuZXdWYWx1ZSk7XG4gICAgaWYgKGhhc0NoYW5nZWQobmV3VmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgdGhpcy5fcmF3VmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIHRoaXMuX3ZhbHVlID0gdXNlRGlyZWN0VmFsdWUgPyBuZXdWYWx1ZSA6IHRvUmVhY3RpdmUobmV3VmFsdWUpO1xuICAgICAge1xuICAgICAgICB0aGlzLmRlcC50cmlnZ2VyKHtcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICAgICAgdHlwZTogXCJzZXRcIixcbiAgICAgICAgICBrZXk6IFwidmFsdWVcIixcbiAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICBvbGRWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHRyaWdnZXJSZWYocmVmMikge1xuICBpZiAocmVmMi5kZXApIHtcbiAgICB7XG4gICAgICByZWYyLmRlcC50cmlnZ2VyKHtcbiAgICAgICAgdGFyZ2V0OiByZWYyLFxuICAgICAgICB0eXBlOiBcInNldFwiLFxuICAgICAgICBrZXk6IFwidmFsdWVcIixcbiAgICAgICAgbmV3VmFsdWU6IHJlZjIuX3ZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHVucmVmKHJlZjIpIHtcbiAgcmV0dXJuIGlzUmVmKHJlZjIpID8gcmVmMi52YWx1ZSA6IHJlZjI7XG59XG5mdW5jdGlvbiB0b1ZhbHVlKHNvdXJjZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbihzb3VyY2UpID8gc291cmNlKCkgOiB1bnJlZihzb3VyY2UpO1xufVxuY29uc3Qgc2hhbGxvd1Vud3JhcEhhbmRsZXJzID0ge1xuICBnZXQ6ICh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpID0+IGtleSA9PT0gXCJfX3ZfcmF3XCIgPyB0YXJnZXQgOiB1bnJlZihSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpKSxcbiAgc2V0OiAodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikgPT4ge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgaWYgKGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XG4gICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBwcm94eVJlZnMob2JqZWN0V2l0aFJlZnMpIHtcbiAgcmV0dXJuIGlzUmVhY3RpdmUob2JqZWN0V2l0aFJlZnMpID8gb2JqZWN0V2l0aFJlZnMgOiBuZXcgUHJveHkob2JqZWN0V2l0aFJlZnMsIHNoYWxsb3dVbndyYXBIYW5kbGVycyk7XG59XG5jbGFzcyBDdXN0b21SZWZJbXBsIHtcbiAgY29uc3RydWN0b3IoZmFjdG9yeSkge1xuICAgIHRoaXNbXCJfX3ZfaXNSZWZcIl0gPSB0cnVlO1xuICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICAgIGNvbnN0IGRlcCA9IHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICAgIGNvbnN0IHsgZ2V0LCBzZXQgfSA9IGZhY3RvcnkoZGVwLnRyYWNrLmJpbmQoZGVwKSwgZGVwLnRyaWdnZXIuYmluZChkZXApKTtcbiAgICB0aGlzLl9nZXQgPSBnZXQ7XG4gICAgdGhpcy5fc2V0ID0gc2V0O1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSB0aGlzLl9nZXQoKTtcbiAgfVxuICBzZXQgdmFsdWUobmV3VmFsKSB7XG4gICAgdGhpcy5fc2V0KG5ld1ZhbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGN1c3RvbVJlZihmYWN0b3J5KSB7XG4gIHJldHVybiBuZXcgQ3VzdG9tUmVmSW1wbChmYWN0b3J5KTtcbn1cbmZ1bmN0aW9uIHRvUmVmcyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3h5KG9iamVjdCkpIHtcbiAgICB3YXJuJDIoYHRvUmVmcygpIGV4cGVjdHMgYSByZWFjdGl2ZSBvYmplY3QgYnV0IHJlY2VpdmVkIGEgcGxhaW4gb25lLmApO1xuICB9XG4gIGNvbnN0IHJldCA9IGlzQXJyYXkob2JqZWN0KSA/IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKSA6IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICByZXRba2V5XSA9IHByb3BlcnR5VG9SZWYob2JqZWN0LCBrZXkpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5jbGFzcyBPYmplY3RSZWZJbXBsIHtcbiAgY29uc3RydWN0b3IoX29iamVjdCwgX2tleSwgX2RlZmF1bHRWYWx1ZSkge1xuICAgIHRoaXMuX29iamVjdCA9IF9vYmplY3Q7XG4gICAgdGhpcy5fa2V5ID0gX2tleTtcbiAgICB0aGlzLl9kZWZhdWx0VmFsdWUgPSBfZGVmYXVsdFZhbHVlO1xuICAgIHRoaXNbXCJfX3ZfaXNSZWZcIl0gPSB0cnVlO1xuICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICBjb25zdCB2YWwgPSB0aGlzLl9vYmplY3RbdGhpcy5fa2V5XTtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSB2YWwgPT09IHZvaWQgMCA/IHRoaXMuX2RlZmF1bHRWYWx1ZSA6IHZhbDtcbiAgfVxuICBzZXQgdmFsdWUobmV3VmFsKSB7XG4gICAgdGhpcy5fb2JqZWN0W3RoaXMuX2tleV0gPSBuZXdWYWw7XG4gIH1cbiAgZ2V0IGRlcCgpIHtcbiAgICByZXR1cm4gZ2V0RGVwRnJvbVJlYWN0aXZlKHRvUmF3KHRoaXMuX29iamVjdCksIHRoaXMuX2tleSk7XG4gIH1cbn1cbmNsYXNzIEdldHRlclJlZkltcGwge1xuICBjb25zdHJ1Y3RvcihfZ2V0dGVyKSB7XG4gICAgdGhpcy5fZ2V0dGVyID0gX2dldHRlcjtcbiAgICB0aGlzW1wiX192X2lzUmVmXCJdID0gdHJ1ZTtcbiAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIl0gPSB0cnVlO1xuICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSB0aGlzLl9nZXR0ZXIoKTtcbiAgfVxufVxuZnVuY3Rpb24gdG9SZWYoc291cmNlLCBrZXksIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoaXNSZWYoc291cmNlKSkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XG4gICAgcmV0dXJuIG5ldyBHZXR0ZXJSZWZJbXBsKHNvdXJjZSk7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3Qoc291cmNlKSAmJiBhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiBwcm9wZXJ0eVRvUmVmKHNvdXJjZSwga2V5LCBkZWZhdWx0VmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZWYoc291cmNlKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJvcGVydHlUb1JlZihzb3VyY2UsIGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gIGNvbnN0IHZhbCA9IHNvdXJjZVtrZXldO1xuICByZXR1cm4gaXNSZWYodmFsKSA/IHZhbCA6IG5ldyBPYmplY3RSZWZJbXBsKHNvdXJjZSwga2V5LCBkZWZhdWx0VmFsdWUpO1xufVxuXG5jbGFzcyBDb21wdXRlZFJlZkltcGwge1xuICBjb25zdHJ1Y3Rvcihmbiwgc2V0dGVyLCBpc1NTUikge1xuICAgIHRoaXMuZm4gPSBmbjtcbiAgICB0aGlzLnNldHRlciA9IHNldHRlcjtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLl92YWx1ZSA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLmRlcCA9IG5ldyBEZXAodGhpcyk7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xuICAgIC8vIFRPRE8gaXNvbGF0ZWREZWNsYXJhdGlvbnMgXCJfX3ZfaXNSZWFkb25seVwiXG4gICAgLy8gQSBjb21wdXRlZCBpcyBhbHNvIGEgc3Vic2NyaWJlciB0aGF0IHRyYWNrcyBvdGhlciBkZXBzXG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5kZXBzID0gdm9pZCAwO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZGVwc1RhaWwgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5mbGFncyA9IDE2O1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZ2xvYmFsVmVyc2lvbiA9IGdsb2JhbFZlcnNpb24gLSAxO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMubmV4dCA9IHZvaWQgMDtcbiAgICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgIHRoaXMuZWZmZWN0ID0gdGhpcztcbiAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIl0gPSAhc2V0dGVyO1xuICAgIHRoaXMuaXNTU1IgPSBpc1NTUjtcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBub3RpZnkoKSB7XG4gICAgdGhpcy5mbGFncyB8PSAxNjtcbiAgICBpZiAoISh0aGlzLmZsYWdzICYgOCkgJiYgLy8gYXZvaWQgaW5maW5pdGUgc2VsZiByZWN1cnNpb25cbiAgICBhY3RpdmVTdWIgIT09IHRoaXMpIHtcbiAgICAgIGJhdGNoKHRoaXMsIHRydWUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICBjb25zdCBsaW5rID0gdGhpcy5kZXAudHJhY2soe1xuICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgdHlwZTogXCJnZXRcIixcbiAgICAgIGtleTogXCJ2YWx1ZVwiXG4gICAgfSkgO1xuICAgIHJlZnJlc2hDb21wdXRlZCh0aGlzKTtcbiAgICBpZiAobGluaykge1xuICAgICAgbGluay52ZXJzaW9uID0gdGhpcy5kZXAudmVyc2lvbjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG4gIHNldCB2YWx1ZShuZXdWYWx1ZSkge1xuICAgIGlmICh0aGlzLnNldHRlcikge1xuICAgICAgdGhpcy5zZXR0ZXIobmV3VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDIoXCJXcml0ZSBvcGVyYXRpb24gZmFpbGVkOiBjb21wdXRlZCB2YWx1ZSBpcyByZWFkb25seVwiKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbXB1dGVkJDEoZ2V0dGVyT3JPcHRpb25zLCBkZWJ1Z09wdGlvbnMsIGlzU1NSID0gZmFsc2UpIHtcbiAgbGV0IGdldHRlcjtcbiAgbGV0IHNldHRlcjtcbiAgaWYgKGlzRnVuY3Rpb24oZ2V0dGVyT3JPcHRpb25zKSkge1xuICAgIGdldHRlciA9IGdldHRlck9yT3B0aW9ucztcbiAgfSBlbHNlIHtcbiAgICBnZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnMuZ2V0O1xuICAgIHNldHRlciA9IGdldHRlck9yT3B0aW9ucy5zZXQ7XG4gIH1cbiAgY29uc3QgY1JlZiA9IG5ldyBDb21wdXRlZFJlZkltcGwoZ2V0dGVyLCBzZXR0ZXIsIGlzU1NSKTtcbiAgaWYgKGRlYnVnT3B0aW9ucyAmJiAhaXNTU1IpIHtcbiAgICBjUmVmLm9uVHJhY2sgPSBkZWJ1Z09wdGlvbnMub25UcmFjaztcbiAgICBjUmVmLm9uVHJpZ2dlciA9IGRlYnVnT3B0aW9ucy5vblRyaWdnZXI7XG4gIH1cbiAgcmV0dXJuIGNSZWY7XG59XG5cbmNvbnN0IFRyYWNrT3BUeXBlcyA9IHtcbiAgXCJHRVRcIjogXCJnZXRcIixcbiAgXCJIQVNcIjogXCJoYXNcIixcbiAgXCJJVEVSQVRFXCI6IFwiaXRlcmF0ZVwiXG59O1xuY29uc3QgVHJpZ2dlck9wVHlwZXMgPSB7XG4gIFwiU0VUXCI6IFwic2V0XCIsXG4gIFwiQUREXCI6IFwiYWRkXCIsXG4gIFwiREVMRVRFXCI6IFwiZGVsZXRlXCIsXG4gIFwiQ0xFQVJcIjogXCJjbGVhclwiXG59O1xuXG5jb25zdCBJTklUSUFMX1dBVENIRVJfVkFMVUUgPSB7fTtcbmNvbnN0IGNsZWFudXBNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmxldCBhY3RpdmVXYXRjaGVyID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0Q3VycmVudFdhdGNoZXIoKSB7XG4gIHJldHVybiBhY3RpdmVXYXRjaGVyO1xufVxuZnVuY3Rpb24gb25XYXRjaGVyQ2xlYW51cChjbGVhbnVwRm4sIGZhaWxTaWxlbnRseSA9IGZhbHNlLCBvd25lciA9IGFjdGl2ZVdhdGNoZXIpIHtcbiAgaWYgKG93bmVyKSB7XG4gICAgbGV0IGNsZWFudXBzID0gY2xlYW51cE1hcC5nZXQob3duZXIpO1xuICAgIGlmICghY2xlYW51cHMpIGNsZWFudXBNYXAuc2V0KG93bmVyLCBjbGVhbnVwcyA9IFtdKTtcbiAgICBjbGVhbnVwcy5wdXNoKGNsZWFudXBGbik7XG4gIH0gZWxzZSBpZiAoIWZhaWxTaWxlbnRseSkge1xuICAgIHdhcm4kMihcbiAgICAgIGBvbldhdGNoZXJDbGVhbnVwKCkgd2FzIGNhbGxlZCB3aGVuIHRoZXJlIHdhcyBubyBhY3RpdmUgd2F0Y2hlciB0byBhc3NvY2lhdGUgd2l0aC5gXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gd2F0Y2gkMShzb3VyY2UsIGNiLCBvcHRpb25zID0gRU1QVFlfT0JKKSB7XG4gIGNvbnN0IHsgaW1tZWRpYXRlLCBkZWVwLCBvbmNlLCBzY2hlZHVsZXIsIGF1Z21lbnRKb2IsIGNhbGwgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHdhcm5JbnZhbGlkU291cmNlID0gKHMpID0+IHtcbiAgICAob3B0aW9ucy5vbldhcm4gfHwgd2FybiQyKShcbiAgICAgIGBJbnZhbGlkIHdhdGNoIHNvdXJjZTogYCxcbiAgICAgIHMsXG4gICAgICBgQSB3YXRjaCBzb3VyY2UgY2FuIG9ubHkgYmUgYSBnZXR0ZXIvZWZmZWN0IGZ1bmN0aW9uLCBhIHJlZiwgYSByZWFjdGl2ZSBvYmplY3QsIG9yIGFuIGFycmF5IG9mIHRoZXNlIHR5cGVzLmBcbiAgICApO1xuICB9O1xuICBjb25zdCByZWFjdGl2ZUdldHRlciA9IChzb3VyY2UyKSA9PiB7XG4gICAgaWYgKGRlZXApIHJldHVybiBzb3VyY2UyO1xuICAgIGlmIChpc1NoYWxsb3coc291cmNlMikgfHwgZGVlcCA9PT0gZmFsc2UgfHwgZGVlcCA9PT0gMClcbiAgICAgIHJldHVybiB0cmF2ZXJzZShzb3VyY2UyLCAxKTtcbiAgICByZXR1cm4gdHJhdmVyc2Uoc291cmNlMik7XG4gIH07XG4gIGxldCBlZmZlY3Q7XG4gIGxldCBnZXR0ZXI7XG4gIGxldCBjbGVhbnVwO1xuICBsZXQgYm91bmRDbGVhbnVwO1xuICBsZXQgZm9yY2VUcmlnZ2VyID0gZmFsc2U7XG4gIGxldCBpc011bHRpU291cmNlID0gZmFsc2U7XG4gIGlmIChpc1JlZihzb3VyY2UpKSB7XG4gICAgZ2V0dGVyID0gKCkgPT4gc291cmNlLnZhbHVlO1xuICAgIGZvcmNlVHJpZ2dlciA9IGlzU2hhbGxvdyhzb3VyY2UpO1xuICB9IGVsc2UgaWYgKGlzUmVhY3RpdmUoc291cmNlKSkge1xuICAgIGdldHRlciA9ICgpID0+IHJlYWN0aXZlR2V0dGVyKHNvdXJjZSk7XG4gICAgZm9yY2VUcmlnZ2VyID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICBpc011bHRpU291cmNlID0gdHJ1ZTtcbiAgICBmb3JjZVRyaWdnZXIgPSBzb3VyY2Uuc29tZSgocykgPT4gaXNSZWFjdGl2ZShzKSB8fCBpc1NoYWxsb3cocykpO1xuICAgIGdldHRlciA9ICgpID0+IHNvdXJjZS5tYXAoKHMpID0+IHtcbiAgICAgIGlmIChpc1JlZihzKSkge1xuICAgICAgICByZXR1cm4gcy52YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNSZWFjdGl2ZShzKSkge1xuICAgICAgICByZXR1cm4gcmVhY3RpdmVHZXR0ZXIocyk7XG4gICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24ocykpIHtcbiAgICAgICAgcmV0dXJuIGNhbGwgPyBjYWxsKHMsIDIpIDogcygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybkludmFsaWRTb3VyY2Uocyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBnZXR0ZXIgPSBjYWxsID8gKCkgPT4gY2FsbChzb3VyY2UsIDIpIDogc291cmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZXR0ZXIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjbGVhbnVwKSB7XG4gICAgICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudEVmZmVjdCA9IGFjdGl2ZVdhdGNoZXI7XG4gICAgICAgIGFjdGl2ZVdhdGNoZXIgPSBlZmZlY3Q7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGwgPyBjYWxsKHNvdXJjZSwgMywgW2JvdW5kQ2xlYW51cF0pIDogc291cmNlKGJvdW5kQ2xlYW51cCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgYWN0aXZlV2F0Y2hlciA9IGN1cnJlbnRFZmZlY3Q7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGdldHRlciA9IE5PT1A7XG4gICAgd2FybkludmFsaWRTb3VyY2Uoc291cmNlKTtcbiAgfVxuICBpZiAoY2IgJiYgZGVlcCkge1xuICAgIGNvbnN0IGJhc2VHZXR0ZXIgPSBnZXR0ZXI7XG4gICAgY29uc3QgZGVwdGggPSBkZWVwID09PSB0cnVlID8gSW5maW5pdHkgOiBkZWVwO1xuICAgIGdldHRlciA9ICgpID0+IHRyYXZlcnNlKGJhc2VHZXR0ZXIoKSwgZGVwdGgpO1xuICB9XG4gIGNvbnN0IHNjb3BlID0gZ2V0Q3VycmVudFNjb3BlKCk7XG4gIGNvbnN0IHdhdGNoSGFuZGxlID0gKCkgPT4ge1xuICAgIGVmZmVjdC5zdG9wKCk7XG4gICAgaWYgKHNjb3BlICYmIHNjb3BlLmFjdGl2ZSkge1xuICAgICAgcmVtb3ZlKHNjb3BlLmVmZmVjdHMsIGVmZmVjdCk7XG4gICAgfVxuICB9O1xuICBpZiAob25jZSAmJiBjYikge1xuICAgIGNvbnN0IF9jYiA9IGNiO1xuICAgIGNiID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIF9jYiguLi5hcmdzKTtcbiAgICAgIHdhdGNoSGFuZGxlKCk7XG4gICAgfTtcbiAgfVxuICBsZXQgb2xkVmFsdWUgPSBpc011bHRpU291cmNlID8gbmV3IEFycmF5KHNvdXJjZS5sZW5ndGgpLmZpbGwoSU5JVElBTF9XQVRDSEVSX1ZBTFVFKSA6IElOSVRJQUxfV0FUQ0hFUl9WQUxVRTtcbiAgY29uc3Qgam9iID0gKGltbWVkaWF0ZUZpcnN0UnVuKSA9PiB7XG4gICAgaWYgKCEoZWZmZWN0LmZsYWdzICYgMSkgfHwgIWVmZmVjdC5kaXJ0eSAmJiAhaW1tZWRpYXRlRmlyc3RSdW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNiKSB7XG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IGVmZmVjdC5ydW4oKTtcbiAgICAgIGlmIChkZWVwIHx8IGZvcmNlVHJpZ2dlciB8fCAoaXNNdWx0aVNvdXJjZSA/IG5ld1ZhbHVlLnNvbWUoKHYsIGkpID0+IGhhc0NoYW5nZWQodiwgb2xkVmFsdWVbaV0pKSA6IGhhc0NoYW5nZWQobmV3VmFsdWUsIG9sZFZhbHVlKSkpIHtcbiAgICAgICAgaWYgKGNsZWFudXApIHtcbiAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudFdhdGNoZXIgPSBhY3RpdmVXYXRjaGVyO1xuICAgICAgICBhY3RpdmVXYXRjaGVyID0gZWZmZWN0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGFyZ3MgPSBbXG4gICAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICAgIC8vIHBhc3MgdW5kZWZpbmVkIGFzIHRoZSBvbGQgdmFsdWUgd2hlbiBpdCdzIGNoYW5nZWQgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgICAgICBvbGRWYWx1ZSA9PT0gSU5JVElBTF9XQVRDSEVSX1ZBTFVFID8gdm9pZCAwIDogaXNNdWx0aVNvdXJjZSAmJiBvbGRWYWx1ZVswXSA9PT0gSU5JVElBTF9XQVRDSEVSX1ZBTFVFID8gW10gOiBvbGRWYWx1ZSxcbiAgICAgICAgICAgIGJvdW5kQ2xlYW51cFxuICAgICAgICAgIF07XG4gICAgICAgICAgY2FsbCA/IGNhbGwoY2IsIDMsIGFyZ3MpIDogKFxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgY2IoLi4uYXJncylcbiAgICAgICAgICApO1xuICAgICAgICAgIG9sZFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgYWN0aXZlV2F0Y2hlciA9IGN1cnJlbnRXYXRjaGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVmZmVjdC5ydW4oKTtcbiAgICB9XG4gIH07XG4gIGlmIChhdWdtZW50Sm9iKSB7XG4gICAgYXVnbWVudEpvYihqb2IpO1xuICB9XG4gIGVmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChnZXR0ZXIpO1xuICBlZmZlY3Quc2NoZWR1bGVyID0gc2NoZWR1bGVyID8gKCkgPT4gc2NoZWR1bGVyKGpvYiwgZmFsc2UpIDogam9iO1xuICBib3VuZENsZWFudXAgPSAoZm4pID0+IG9uV2F0Y2hlckNsZWFudXAoZm4sIGZhbHNlLCBlZmZlY3QpO1xuICBjbGVhbnVwID0gZWZmZWN0Lm9uU3RvcCA9ICgpID0+IHtcbiAgICBjb25zdCBjbGVhbnVwcyA9IGNsZWFudXBNYXAuZ2V0KGVmZmVjdCk7XG4gICAgaWYgKGNsZWFudXBzKSB7XG4gICAgICBpZiAoY2FsbCkge1xuICAgICAgICBjYWxsKGNsZWFudXBzLCA0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3QgY2xlYW51cDIgb2YgY2xlYW51cHMpIGNsZWFudXAyKCk7XG4gICAgICB9XG4gICAgICBjbGVhbnVwTWFwLmRlbGV0ZShlZmZlY3QpO1xuICAgIH1cbiAgfTtcbiAge1xuICAgIGVmZmVjdC5vblRyYWNrID0gb3B0aW9ucy5vblRyYWNrO1xuICAgIGVmZmVjdC5vblRyaWdnZXIgPSBvcHRpb25zLm9uVHJpZ2dlcjtcbiAgfVxuICBpZiAoY2IpIHtcbiAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICBqb2IodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9sZFZhbHVlID0gZWZmZWN0LnJ1bigpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzY2hlZHVsZXIpIHtcbiAgICBzY2hlZHVsZXIoam9iLmJpbmQobnVsbCwgdHJ1ZSksIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGVmZmVjdC5ydW4oKTtcbiAgfVxuICB3YXRjaEhhbmRsZS5wYXVzZSA9IGVmZmVjdC5wYXVzZS5iaW5kKGVmZmVjdCk7XG4gIHdhdGNoSGFuZGxlLnJlc3VtZSA9IGVmZmVjdC5yZXN1bWUuYmluZChlZmZlY3QpO1xuICB3YXRjaEhhbmRsZS5zdG9wID0gd2F0Y2hIYW5kbGU7XG4gIHJldHVybiB3YXRjaEhhbmRsZTtcbn1cbmZ1bmN0aW9uIHRyYXZlcnNlKHZhbHVlLCBkZXB0aCA9IEluZmluaXR5LCBzZWVuKSB7XG4gIGlmIChkZXB0aCA8PSAwIHx8ICFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWVbXCJfX3Zfc2tpcFwiXSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBzZWVuID0gc2VlbiB8fCAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBpZiAoc2Vlbi5oYXModmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHNlZW4uYWRkKHZhbHVlKTtcbiAgZGVwdGgtLTtcbiAgaWYgKGlzUmVmKHZhbHVlKSkge1xuICAgIHRyYXZlcnNlKHZhbHVlLnZhbHVlLCBkZXB0aCwgc2Vlbik7XG4gIH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZVtpXSwgZGVwdGgsIHNlZW4pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1NldCh2YWx1ZSkgfHwgaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaCgodikgPT4ge1xuICAgICAgdHJhdmVyc2UodiwgZGVwdGgsIHNlZW4pO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcbiAgICAgIHRyYXZlcnNlKHZhbHVlW2tleV0sIGRlcHRoLCBzZWVuKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh2YWx1ZSkpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgICAgdHJhdmVyc2UodmFsdWVba2V5XSwgZGVwdGgsIHNlZW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmNvbnN0IHN0YWNrJDEgPSBbXTtcbmZ1bmN0aW9uIHB1c2hXYXJuaW5nQ29udGV4dCh2bm9kZSkge1xuICBzdGFjayQxLnB1c2godm5vZGUpO1xufVxuZnVuY3Rpb24gcG9wV2FybmluZ0NvbnRleHQoKSB7XG4gIHN0YWNrJDEucG9wKCk7XG59XG5sZXQgaXNXYXJuaW5nID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuJDEobXNnLCAuLi5hcmdzKSB7XG4gIGlmIChpc1dhcm5pbmcpIHJldHVybjtcbiAgaXNXYXJuaW5nID0gdHJ1ZTtcbiAgcGF1c2VUcmFja2luZygpO1xuICBjb25zdCBpbnN0YW5jZSA9IHN0YWNrJDEubGVuZ3RoID8gc3RhY2skMVtzdGFjayQxLmxlbmd0aCAtIDFdLmNvbXBvbmVudCA6IG51bGw7XG4gIGNvbnN0IGFwcFdhcm5IYW5kbGVyID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcud2FybkhhbmRsZXI7XG4gIGNvbnN0IHRyYWNlID0gZ2V0Q29tcG9uZW50VHJhY2UoKTtcbiAgaWYgKGFwcFdhcm5IYW5kbGVyKSB7XG4gICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKFxuICAgICAgYXBwV2FybkhhbmRsZXIsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDExLFxuICAgICAgW1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgbXNnICsgYXJncy5tYXAoKGEpID0+IHtcbiAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSBhLnRvU3RyaW5nKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChhKSkgIT0gbnVsbCA/IF9iIDogSlNPTi5zdHJpbmdpZnkoYSk7XG4gICAgICAgIH0pLmpvaW4oXCJcIiksXG4gICAgICAgIGluc3RhbmNlICYmIGluc3RhbmNlLnByb3h5LFxuICAgICAgICB0cmFjZS5tYXAoXG4gICAgICAgICAgKHsgdm5vZGUgfSkgPT4gYGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIHZub2RlLnR5cGUpfT5gXG4gICAgICAgICkuam9pbihcIlxcblwiKSxcbiAgICAgICAgdHJhY2VcbiAgICAgIF1cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHdhcm5BcmdzID0gW2BbVnVlIHdhcm5dOiAke21zZ31gLCAuLi5hcmdzXTtcbiAgICBpZiAodHJhY2UubGVuZ3RoICYmIC8vIGF2b2lkIHNwYW1taW5nIGNvbnNvbGUgZHVyaW5nIHRlc3RzXG4gICAgdHJ1ZSkge1xuICAgICAgd2FybkFyZ3MucHVzaChgXG5gLCAuLi5mb3JtYXRUcmFjZSh0cmFjZSkpO1xuICAgIH1cbiAgICBjb25zb2xlLndhcm4oLi4ud2FybkFyZ3MpO1xuICB9XG4gIHJlc2V0VHJhY2tpbmcoKTtcbiAgaXNXYXJuaW5nID0gZmFsc2U7XG59XG5mdW5jdGlvbiBnZXRDb21wb25lbnRUcmFjZSgpIHtcbiAgbGV0IGN1cnJlbnRWTm9kZSA9IHN0YWNrJDFbc3RhY2skMS5sZW5ndGggLSAxXTtcbiAgaWYgKCFjdXJyZW50Vk5vZGUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3Qgbm9ybWFsaXplZFN0YWNrID0gW107XG4gIHdoaWxlIChjdXJyZW50Vk5vZGUpIHtcbiAgICBjb25zdCBsYXN0ID0gbm9ybWFsaXplZFN0YWNrWzBdO1xuICAgIGlmIChsYXN0ICYmIGxhc3Qudm5vZGUgPT09IGN1cnJlbnRWTm9kZSkge1xuICAgICAgbGFzdC5yZWN1cnNlQ291bnQrKztcbiAgICB9IGVsc2Uge1xuICAgICAgbm9ybWFsaXplZFN0YWNrLnB1c2goe1xuICAgICAgICB2bm9kZTogY3VycmVudFZOb2RlLFxuICAgICAgICByZWN1cnNlQ291bnQ6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBwYXJlbnRJbnN0YW5jZSA9IGN1cnJlbnRWTm9kZS5jb21wb25lbnQgJiYgY3VycmVudFZOb2RlLmNvbXBvbmVudC5wYXJlbnQ7XG4gICAgY3VycmVudFZOb2RlID0gcGFyZW50SW5zdGFuY2UgJiYgcGFyZW50SW5zdGFuY2Uudm5vZGU7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWRTdGFjaztcbn1cbmZ1bmN0aW9uIGZvcm1hdFRyYWNlKHRyYWNlKSB7XG4gIGNvbnN0IGxvZ3MgPSBbXTtcbiAgdHJhY2UuZm9yRWFjaCgoZW50cnksIGkpID0+IHtcbiAgICBsb2dzLnB1c2goLi4uaSA9PT0gMCA/IFtdIDogW2BcbmBdLCAuLi5mb3JtYXRUcmFjZUVudHJ5KGVudHJ5KSk7XG4gIH0pO1xuICByZXR1cm4gbG9ncztcbn1cbmZ1bmN0aW9uIGZvcm1hdFRyYWNlRW50cnkoeyB2bm9kZSwgcmVjdXJzZUNvdW50IH0pIHtcbiAgY29uc3QgcG9zdGZpeCA9IHJlY3Vyc2VDb3VudCA+IDAgPyBgLi4uICgke3JlY3Vyc2VDb3VudH0gcmVjdXJzaXZlIGNhbGxzKWAgOiBgYDtcbiAgY29uc3QgaXNSb290ID0gdm5vZGUuY29tcG9uZW50ID8gdm5vZGUuY29tcG9uZW50LnBhcmVudCA9PSBudWxsIDogZmFsc2U7XG4gIGNvbnN0IG9wZW4gPSBgIGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUoXG4gICAgdm5vZGUuY29tcG9uZW50LFxuICAgIHZub2RlLnR5cGUsXG4gICAgaXNSb290XG4gICl9YDtcbiAgY29uc3QgY2xvc2UgPSBgPmAgKyBwb3N0Zml4O1xuICByZXR1cm4gdm5vZGUucHJvcHMgPyBbb3BlbiwgLi4uZm9ybWF0UHJvcHModm5vZGUucHJvcHMpLCBjbG9zZV0gOiBbb3BlbiArIGNsb3NlXTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFByb3BzKHByb3BzKSB7XG4gIGNvbnN0IHJlcyA9IFtdO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xuICBrZXlzLnNsaWNlKDAsIDMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIHJlcy5wdXNoKC4uLmZvcm1hdFByb3Aoa2V5LCBwcm9wc1trZXldKSk7XG4gIH0pO1xuICBpZiAoa2V5cy5sZW5ndGggPiAzKSB7XG4gICAgcmVzLnB1c2goYCAuLi5gKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gZm9ybWF0UHJvcChrZXksIHZhbHVlLCByYXcpIHtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XG4gIH0gZWxzZSBpZiAoaXNSZWYodmFsdWUpKSB7XG4gICAgdmFsdWUgPSBmb3JtYXRQcm9wKGtleSwgdG9SYXcodmFsdWUudmFsdWUpLCB0cnVlKTtcbiAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT1SZWY8YCwgdmFsdWUsIGA+YF07XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICByZXR1cm4gW2Ake2tleX09Zm4ke3ZhbHVlLm5hbWUgPyBgPCR7dmFsdWUubmFtZX0+YCA6IGBgfWBdO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PWAsIHZhbHVlXTtcbiAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0TnVtYmVyKHZhbCwgdHlwZSkge1xuICBpZiAodmFsID09PSB2b2lkIDApIHtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCAhPT0gXCJudW1iZXJcIikge1xuICAgIHdhcm4kMShgJHt0eXBlfSBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBnb3QgJHtKU09OLnN0cmluZ2lmeSh2YWwpfS5gKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybiQxKGAke3R5cGV9IGlzIE5hTiAtIHRoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC5gKTtcbiAgfVxufVxuXG5jb25zdCBFcnJvckNvZGVzID0ge1xuICBcIlNFVFVQX0ZVTkNUSU9OXCI6IDAsXG4gIFwiMFwiOiBcIlNFVFVQX0ZVTkNUSU9OXCIsXG4gIFwiUkVOREVSX0ZVTkNUSU9OXCI6IDEsXG4gIFwiMVwiOiBcIlJFTkRFUl9GVU5DVElPTlwiLFxuICBcIk5BVElWRV9FVkVOVF9IQU5ETEVSXCI6IDUsXG4gIFwiNVwiOiBcIk5BVElWRV9FVkVOVF9IQU5ETEVSXCIsXG4gIFwiQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVJcIjogNixcbiAgXCI2XCI6IFwiQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVJcIixcbiAgXCJWTk9ERV9IT09LXCI6IDcsXG4gIFwiN1wiOiBcIlZOT0RFX0hPT0tcIixcbiAgXCJESVJFQ1RJVkVfSE9PS1wiOiA4LFxuICBcIjhcIjogXCJESVJFQ1RJVkVfSE9PS1wiLFxuICBcIlRSQU5TSVRJT05fSE9PS1wiOiA5LFxuICBcIjlcIjogXCJUUkFOU0lUSU9OX0hPT0tcIixcbiAgXCJBUFBfRVJST1JfSEFORExFUlwiOiAxMCxcbiAgXCIxMFwiOiBcIkFQUF9FUlJPUl9IQU5ETEVSXCIsXG4gIFwiQVBQX1dBUk5fSEFORExFUlwiOiAxMSxcbiAgXCIxMVwiOiBcIkFQUF9XQVJOX0hBTkRMRVJcIixcbiAgXCJGVU5DVElPTl9SRUZcIjogMTIsXG4gIFwiMTJcIjogXCJGVU5DVElPTl9SRUZcIixcbiAgXCJBU1lOQ19DT01QT05FTlRfTE9BREVSXCI6IDEzLFxuICBcIjEzXCI6IFwiQVNZTkNfQ09NUE9ORU5UX0xPQURFUlwiLFxuICBcIlNDSEVEVUxFUlwiOiAxNCxcbiAgXCIxNFwiOiBcIlNDSEVEVUxFUlwiLFxuICBcIkNPTVBPTkVOVF9VUERBVEVcIjogMTUsXG4gIFwiMTVcIjogXCJDT01QT05FTlRfVVBEQVRFXCIsXG4gIFwiQVBQX1VOTU9VTlRfQ0xFQU5VUFwiOiAxNixcbiAgXCIxNlwiOiBcIkFQUF9VTk1PVU5UX0NMRUFOVVBcIlxufTtcbmNvbnN0IEVycm9yVHlwZVN0cmluZ3MkMSA9IHtcbiAgW1wic3BcIl06IFwic2VydmVyUHJlZmV0Y2ggaG9va1wiLFxuICBbXCJiY1wiXTogXCJiZWZvcmVDcmVhdGUgaG9va1wiLFxuICBbXCJjXCJdOiBcImNyZWF0ZWQgaG9va1wiLFxuICBbXCJibVwiXTogXCJiZWZvcmVNb3VudCBob29rXCIsXG4gIFtcIm1cIl06IFwibW91bnRlZCBob29rXCIsXG4gIFtcImJ1XCJdOiBcImJlZm9yZVVwZGF0ZSBob29rXCIsXG4gIFtcInVcIl06IFwidXBkYXRlZFwiLFxuICBbXCJidW1cIl06IFwiYmVmb3JlVW5tb3VudCBob29rXCIsXG4gIFtcInVtXCJdOiBcInVubW91bnRlZCBob29rXCIsXG4gIFtcImFcIl06IFwiYWN0aXZhdGVkIGhvb2tcIixcbiAgW1wiZGFcIl06IFwiZGVhY3RpdmF0ZWQgaG9va1wiLFxuICBbXCJlY1wiXTogXCJlcnJvckNhcHR1cmVkIGhvb2tcIixcbiAgW1wicnRjXCJdOiBcInJlbmRlclRyYWNrZWQgaG9va1wiLFxuICBbXCJydGdcIl06IFwicmVuZGVyVHJpZ2dlcmVkIGhvb2tcIixcbiAgWzBdOiBcInNldHVwIGZ1bmN0aW9uXCIsXG4gIFsxXTogXCJyZW5kZXIgZnVuY3Rpb25cIixcbiAgWzJdOiBcIndhdGNoZXIgZ2V0dGVyXCIsXG4gIFszXTogXCJ3YXRjaGVyIGNhbGxiYWNrXCIsXG4gIFs0XTogXCJ3YXRjaGVyIGNsZWFudXAgZnVuY3Rpb25cIixcbiAgWzVdOiBcIm5hdGl2ZSBldmVudCBoYW5kbGVyXCIsXG4gIFs2XTogXCJjb21wb25lbnQgZXZlbnQgaGFuZGxlclwiLFxuICBbN106IFwidm5vZGUgaG9va1wiLFxuICBbOF06IFwiZGlyZWN0aXZlIGhvb2tcIixcbiAgWzldOiBcInRyYW5zaXRpb24gaG9va1wiLFxuICBbMTBdOiBcImFwcCBlcnJvckhhbmRsZXJcIixcbiAgWzExXTogXCJhcHAgd2FybkhhbmRsZXJcIixcbiAgWzEyXTogXCJyZWYgZnVuY3Rpb25cIixcbiAgWzEzXTogXCJhc3luYyBjb21wb25lbnQgbG9hZGVyXCIsXG4gIFsxNF06IFwic2NoZWR1bGVyIGZsdXNoXCIsXG4gIFsxNV06IFwiY29tcG9uZW50IHVwZGF0ZVwiLFxuICBbMTZdOiBcImFwcCB1bm1vdW50IGNsZWFudXAgZnVuY3Rpb25cIlxufTtcbmZ1bmN0aW9uIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXJncyA/IGZuKC4uLmFyZ3MpIDogZm4oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncykge1xuICBpZiAoaXNGdW5jdGlvbihmbikpIHtcbiAgICBjb25zdCByZXMgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKTtcbiAgICBpZiAocmVzICYmIGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGlmIChpc0FycmF5KGZuKSkge1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlcy5wdXNoKGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuW2ldLCBpbnN0YW5jZSwgdHlwZSwgYXJncykpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9IGVsc2Uge1xuICAgIHdhcm4kMShcbiAgICAgIGBJbnZhbGlkIHZhbHVlIHR5cGUgcGFzc2VkIHRvIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKCk6ICR7dHlwZW9mIGZufWBcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlLCB0aHJvd0luRGV2ID0gdHJ1ZSkge1xuICBjb25zdCBjb250ZXh0Vk5vZGUgPSBpbnN0YW5jZSA/IGluc3RhbmNlLnZub2RlIDogbnVsbDtcbiAgY29uc3QgeyBlcnJvckhhbmRsZXIsIHRocm93VW5oYW5kbGVkRXJyb3JJblByb2R1Y3Rpb24gfSA9IGluc3RhbmNlICYmIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnIHx8IEVNUFRZX09CSjtcbiAgaWYgKGluc3RhbmNlKSB7XG4gICAgbGV0IGN1ciA9IGluc3RhbmNlLnBhcmVudDtcbiAgICBjb25zdCBleHBvc2VkSW5zdGFuY2UgPSBpbnN0YW5jZS5wcm94eTtcbiAgICBjb25zdCBlcnJvckluZm8gPSBFcnJvclR5cGVTdHJpbmdzJDFbdHlwZV0gO1xuICAgIHdoaWxlIChjdXIpIHtcbiAgICAgIGNvbnN0IGVycm9yQ2FwdHVyZWRIb29rcyA9IGN1ci5lYztcbiAgICAgIGlmIChlcnJvckNhcHR1cmVkSG9va3MpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcnJvckNhcHR1cmVkSG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZXJyb3JDYXB0dXJlZEhvb2tzW2ldKGVyciwgZXhwb3NlZEluc3RhbmNlLCBlcnJvckluZm8pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3VyID0gY3VyLnBhcmVudDtcbiAgICB9XG4gICAgaWYgKGVycm9ySGFuZGxlcikge1xuICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGVycm9ySGFuZGxlciwgbnVsbCwgMTAsIFtcbiAgICAgICAgZXJyLFxuICAgICAgICBleHBvc2VkSW5zdGFuY2UsXG4gICAgICAgIGVycm9ySW5mb1xuICAgICAgXSk7XG4gICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGxvZ0Vycm9yKGVyciwgdHlwZSwgY29udGV4dFZOb2RlLCB0aHJvd0luRGV2LCB0aHJvd1VuaGFuZGxlZEVycm9ySW5Qcm9kdWN0aW9uKTtcbn1cbmZ1bmN0aW9uIGxvZ0Vycm9yKGVyciwgdHlwZSwgY29udGV4dFZOb2RlLCB0aHJvd0luRGV2ID0gdHJ1ZSwgdGhyb3dJblByb2QgPSBmYWxzZSkge1xuICB7XG4gICAgY29uc3QgaW5mbyA9IEVycm9yVHlwZVN0cmluZ3MkMVt0eXBlXTtcbiAgICBpZiAoY29udGV4dFZOb2RlKSB7XG4gICAgICBwdXNoV2FybmluZ0NvbnRleHQoY29udGV4dFZOb2RlKTtcbiAgICB9XG4gICAgd2FybiQxKGBVbmhhbmRsZWQgZXJyb3Ike2luZm8gPyBgIGR1cmluZyBleGVjdXRpb24gb2YgJHtpbmZvfWAgOiBgYH1gKTtcbiAgICBpZiAoY29udGV4dFZOb2RlKSB7XG4gICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgIH1cbiAgICBpZiAodGhyb3dJbkRldikge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHF1ZXVlID0gW107XG5sZXQgZmx1c2hJbmRleCA9IC0xO1xuY29uc3QgcGVuZGluZ1Bvc3RGbHVzaENicyA9IFtdO1xubGV0IGFjdGl2ZVBvc3RGbHVzaENicyA9IG51bGw7XG5sZXQgcG9zdEZsdXNoSW5kZXggPSAwO1xuY29uc3QgcmVzb2x2ZWRQcm9taXNlID0gLyogQF9fUFVSRV9fICovIFByb21pc2UucmVzb2x2ZSgpO1xubGV0IGN1cnJlbnRGbHVzaFByb21pc2UgPSBudWxsO1xuY29uc3QgUkVDVVJTSU9OX0xJTUlUID0gMTAwO1xuZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgY29uc3QgcCA9IGN1cnJlbnRGbHVzaFByb21pc2UgfHwgcmVzb2x2ZWRQcm9taXNlO1xuICByZXR1cm4gZm4gPyBwLnRoZW4odGhpcyA/IGZuLmJpbmQodGhpcykgOiBmbikgOiBwO1xufVxuZnVuY3Rpb24gZmluZEluc2VydGlvbkluZGV4KGlkKSB7XG4gIGxldCBzdGFydCA9IGZsdXNoSW5kZXggKyAxO1xuICBsZXQgZW5kID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICBjb25zdCBtaWRkbGUgPSBzdGFydCArIGVuZCA+Pj4gMTtcbiAgICBjb25zdCBtaWRkbGVKb2IgPSBxdWV1ZVttaWRkbGVdO1xuICAgIGNvbnN0IG1pZGRsZUpvYklkID0gZ2V0SWQobWlkZGxlSm9iKTtcbiAgICBpZiAobWlkZGxlSm9iSWQgPCBpZCB8fCBtaWRkbGVKb2JJZCA9PT0gaWQgJiYgbWlkZGxlSm9iLmZsYWdzICYgMikge1xuICAgICAgc3RhcnQgPSBtaWRkbGUgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmQgPSBtaWRkbGU7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdGFydDtcbn1cbmZ1bmN0aW9uIHF1ZXVlSm9iKGpvYikge1xuICBpZiAoIShqb2IuZmxhZ3MgJiAxKSkge1xuICAgIGNvbnN0IGpvYklkID0gZ2V0SWQoam9iKTtcbiAgICBjb25zdCBsYXN0Sm9iID0gcXVldWVbcXVldWUubGVuZ3RoIC0gMV07XG4gICAgaWYgKCFsYXN0Sm9iIHx8IC8vIGZhc3QgcGF0aCB3aGVuIHRoZSBqb2IgaWQgaXMgbGFyZ2VyIHRoYW4gdGhlIHRhaWxcbiAgICAhKGpvYi5mbGFncyAmIDIpICYmIGpvYklkID49IGdldElkKGxhc3RKb2IpKSB7XG4gICAgICBxdWV1ZS5wdXNoKGpvYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXVlLnNwbGljZShmaW5kSW5zZXJ0aW9uSW5kZXgoam9iSWQpLCAwLCBqb2IpO1xuICAgIH1cbiAgICBqb2IuZmxhZ3MgfD0gMTtcbiAgICBxdWV1ZUZsdXNoKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHF1ZXVlRmx1c2goKSB7XG4gIGlmICghY3VycmVudEZsdXNoUHJvbWlzZSkge1xuICAgIGN1cnJlbnRGbHVzaFByb21pc2UgPSByZXNvbHZlZFByb21pc2UudGhlbihmbHVzaEpvYnMpO1xuICB9XG59XG5mdW5jdGlvbiBxdWV1ZVBvc3RGbHVzaENiKGNiKSB7XG4gIGlmICghaXNBcnJheShjYikpIHtcbiAgICBpZiAoYWN0aXZlUG9zdEZsdXNoQ2JzICYmIGNiLmlkID09PSAtMSkge1xuICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzLnNwbGljZShwb3N0Rmx1c2hJbmRleCArIDEsIDAsIGNiKTtcbiAgICB9IGVsc2UgaWYgKCEoY2IuZmxhZ3MgJiAxKSkge1xuICAgICAgcGVuZGluZ1Bvc3RGbHVzaENicy5wdXNoKGNiKTtcbiAgICAgIGNiLmZsYWdzIHw9IDE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBlbmRpbmdQb3N0Rmx1c2hDYnMucHVzaCguLi5jYik7XG4gIH1cbiAgcXVldWVGbHVzaCgpO1xufVxuZnVuY3Rpb24gZmx1c2hQcmVGbHVzaENicyhpbnN0YW5jZSwgc2VlbiwgaSA9IGZsdXNoSW5kZXggKyAxKSB7XG4gIHtcbiAgICBzZWVuID0gc2VlbiB8fCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICB9XG4gIGZvciAoOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjYiA9IHF1ZXVlW2ldO1xuICAgIGlmIChjYiAmJiBjYi5mbGFncyAmIDIpIHtcbiAgICAgIGlmIChpbnN0YW5jZSAmJiBjYi5pZCAhPT0gaW5zdGFuY2UudWlkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBjYikpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSwgMSk7XG4gICAgICBpLS07XG4gICAgICBpZiAoY2IuZmxhZ3MgJiA0KSB7XG4gICAgICAgIGNiLmZsYWdzICY9IH4xO1xuICAgICAgfVxuICAgICAgY2IoKTtcbiAgICAgIGlmICghKGNiLmZsYWdzICYgNCkpIHtcbiAgICAgICAgY2IuZmxhZ3MgJj0gfjE7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBmbHVzaFBvc3RGbHVzaENicyhzZWVuKSB7XG4gIGlmIChwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xuICAgIGNvbnN0IGRlZHVwZWQgPSBbLi4ubmV3IFNldChwZW5kaW5nUG9zdEZsdXNoQ2JzKV0uc29ydChcbiAgICAgIChhLCBiKSA9PiBnZXRJZChhKSAtIGdldElkKGIpXG4gICAgKTtcbiAgICBwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCA9IDA7XG4gICAgaWYgKGFjdGl2ZVBvc3RGbHVzaENicykge1xuICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzLnB1c2goLi4uZGVkdXBlZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFjdGl2ZVBvc3RGbHVzaENicyA9IGRlZHVwZWQ7XG4gICAge1xuICAgICAgc2VlbiA9IHNlZW4gfHwgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICB9XG4gICAgZm9yIChwb3N0Rmx1c2hJbmRleCA9IDA7IHBvc3RGbHVzaEluZGV4IDwgYWN0aXZlUG9zdEZsdXNoQ2JzLmxlbmd0aDsgcG9zdEZsdXNoSW5kZXgrKykge1xuICAgICAgY29uc3QgY2IgPSBhY3RpdmVQb3N0Rmx1c2hDYnNbcG9zdEZsdXNoSW5kZXhdO1xuICAgICAgaWYgKGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBjYikpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoY2IuZmxhZ3MgJiA0KSB7XG4gICAgICAgIGNiLmZsYWdzICY9IH4xO1xuICAgICAgfVxuICAgICAgaWYgKCEoY2IuZmxhZ3MgJiA4KSkgY2IoKTtcbiAgICAgIGNiLmZsYWdzICY9IH4xO1xuICAgIH1cbiAgICBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBudWxsO1xuICAgIHBvc3RGbHVzaEluZGV4ID0gMDtcbiAgfVxufVxuY29uc3QgZ2V0SWQgPSAoam9iKSA9PiBqb2IuaWQgPT0gbnVsbCA/IGpvYi5mbGFncyAmIDIgPyAtMSA6IEluZmluaXR5IDogam9iLmlkO1xuZnVuY3Rpb24gZmx1c2hKb2JzKHNlZW4pIHtcbiAge1xuICAgIHNlZW4gPSBzZWVuIHx8IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIH1cbiAgY29uc3QgY2hlY2sgPSAoam9iKSA9PiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2Vlbiwgam9iKSA7XG4gIHRyeSB7XG4gICAgZm9yIChmbHVzaEluZGV4ID0gMDsgZmx1c2hJbmRleCA8IHF1ZXVlLmxlbmd0aDsgZmx1c2hJbmRleCsrKSB7XG4gICAgICBjb25zdCBqb2IgPSBxdWV1ZVtmbHVzaEluZGV4XTtcbiAgICAgIGlmIChqb2IgJiYgIShqb2IuZmxhZ3MgJiA4KSkge1xuICAgICAgICBpZiAoY2hlY2soam9iKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqb2IuZmxhZ3MgJiA0KSB7XG4gICAgICAgICAgam9iLmZsYWdzICY9IH4xO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhcbiAgICAgICAgICBqb2IsXG4gICAgICAgICAgam9iLmksXG4gICAgICAgICAgam9iLmkgPyAxNSA6IDE0XG4gICAgICAgICk7XG4gICAgICAgIGlmICghKGpvYi5mbGFncyAmIDQpKSB7XG4gICAgICAgICAgam9iLmZsYWdzICY9IH4xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGZvciAoOyBmbHVzaEluZGV4IDwgcXVldWUubGVuZ3RoOyBmbHVzaEluZGV4KyspIHtcbiAgICAgIGNvbnN0IGpvYiA9IHF1ZXVlW2ZsdXNoSW5kZXhdO1xuICAgICAgaWYgKGpvYikge1xuICAgICAgICBqb2IuZmxhZ3MgJj0gfjE7XG4gICAgICB9XG4gICAgfVxuICAgIGZsdXNoSW5kZXggPSAtMTtcbiAgICBxdWV1ZS5sZW5ndGggPSAwO1xuICAgIGZsdXNoUG9zdEZsdXNoQ2JzKHNlZW4pO1xuICAgIGN1cnJlbnRGbHVzaFByb21pc2UgPSBudWxsO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggfHwgcGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGgpIHtcbiAgICAgIGZsdXNoSm9icyhzZWVuKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBmbikge1xuICBjb25zdCBjb3VudCA9IHNlZW4uZ2V0KGZuKSB8fCAwO1xuICBpZiAoY291bnQgPiBSRUNVUlNJT05fTElNSVQpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGZuLmk7XG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9IGluc3RhbmNlICYmIGdldENvbXBvbmVudE5hbWUoaW5zdGFuY2UudHlwZSk7XG4gICAgaGFuZGxlRXJyb3IoXG4gICAgICBgTWF4aW11bSByZWN1cnNpdmUgdXBkYXRlcyBleGNlZWRlZCR7Y29tcG9uZW50TmFtZSA/IGAgaW4gY29tcG9uZW50IDwke2NvbXBvbmVudE5hbWV9PmAgOiBgYH0uIFRoaXMgbWVhbnMgeW91IGhhdmUgYSByZWFjdGl2ZSBlZmZlY3QgdGhhdCBpcyBtdXRhdGluZyBpdHMgb3duIGRlcGVuZGVuY2llcyBhbmQgdGh1cyByZWN1cnNpdmVseSB0cmlnZ2VyaW5nIGl0c2VsZi4gUG9zc2libGUgc291cmNlcyBpbmNsdWRlIGNvbXBvbmVudCB0ZW1wbGF0ZSwgcmVuZGVyIGZ1bmN0aW9uLCB1cGRhdGVkIGhvb2sgb3Igd2F0Y2hlciBzb3VyY2UgZnVuY3Rpb24uYCxcbiAgICAgIG51bGwsXG4gICAgICAxMFxuICAgICk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgc2Vlbi5zZXQoZm4sIGNvdW50ICsgMSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubGV0IGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcbmNvbnN0IGhtckRpcnR5Q29tcG9uZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG57XG4gIGdldEdsb2JhbFRoaXMoKS5fX1ZVRV9ITVJfUlVOVElNRV9fID0ge1xuICAgIGNyZWF0ZVJlY29yZDogdHJ5V3JhcChjcmVhdGVSZWNvcmQpLFxuICAgIHJlcmVuZGVyOiB0cnlXcmFwKHJlcmVuZGVyKSxcbiAgICByZWxvYWQ6IHRyeVdyYXAocmVsb2FkKVxuICB9O1xufVxuY29uc3QgbWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmZ1bmN0aW9uIHJlZ2lzdGVySE1SKGluc3RhbmNlKSB7XG4gIGNvbnN0IGlkID0gaW5zdGFuY2UudHlwZS5fX2htcklkO1xuICBsZXQgcmVjb3JkID0gbWFwLmdldChpZCk7XG4gIGlmICghcmVjb3JkKSB7XG4gICAgY3JlYXRlUmVjb3JkKGlkLCBpbnN0YW5jZS50eXBlKTtcbiAgICByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcbiAgfVxuICByZWNvcmQuaW5zdGFuY2VzLmFkZChpbnN0YW5jZSk7XG59XG5mdW5jdGlvbiB1bnJlZ2lzdGVySE1SKGluc3RhbmNlKSB7XG4gIG1hcC5nZXQoaW5zdGFuY2UudHlwZS5fX2htcklkKS5pbnN0YW5jZXMuZGVsZXRlKGluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlY29yZChpZCwgaW5pdGlhbERlZikge1xuICBpZiAobWFwLmhhcyhpZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbWFwLnNldChpZCwge1xuICAgIGluaXRpYWxEZWY6IG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluaXRpYWxEZWYpLFxuICAgIGluc3RhbmNlczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKVxuICB9KTtcbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBub3JtYWxpemVDbGFzc0NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgcmV0dXJuIGlzQ2xhc3NDb21wb25lbnQoY29tcG9uZW50KSA/IGNvbXBvbmVudC5fX3ZjY09wdHMgOiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiByZXJlbmRlcihpZCwgbmV3UmVuZGVyKSB7XG4gIGNvbnN0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICBpZiAoIXJlY29yZCkge1xuICAgIHJldHVybjtcbiAgfVxuICByZWNvcmQuaW5pdGlhbERlZi5yZW5kZXIgPSBuZXdSZW5kZXI7XG4gIFsuLi5yZWNvcmQuaW5zdGFuY2VzXS5mb3JFYWNoKChpbnN0YW5jZSkgPT4ge1xuICAgIGlmIChuZXdSZW5kZXIpIHtcbiAgICAgIGluc3RhbmNlLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgICAgIG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluc3RhbmNlLnR5cGUpLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgICB9XG4gICAgaW5zdGFuY2UucmVuZGVyQ2FjaGUgPSBbXTtcbiAgICBpc0htclVwZGF0aW5nID0gdHJ1ZTtcbiAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICBpc0htclVwZGF0aW5nID0gZmFsc2U7XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVsb2FkKGlkLCBuZXdDb21wKSB7XG4gIGNvbnN0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICBpZiAoIXJlY29yZCkgcmV0dXJuO1xuICBuZXdDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQobmV3Q29tcCk7XG4gIHVwZGF0ZUNvbXBvbmVudERlZihyZWNvcmQuaW5pdGlhbERlZiwgbmV3Q29tcCk7XG4gIGNvbnN0IGluc3RhbmNlcyA9IFsuLi5yZWNvcmQuaW5zdGFuY2VzXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGluc3RhbmNlc1tpXTtcbiAgICBjb25zdCBvbGRDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5zdGFuY2UudHlwZSk7XG4gICAgbGV0IGRpcnR5SW5zdGFuY2VzID0gaG1yRGlydHlDb21wb25lbnRzLmdldChvbGRDb21wKTtcbiAgICBpZiAoIWRpcnR5SW5zdGFuY2VzKSB7XG4gICAgICBpZiAob2xkQ29tcCAhPT0gcmVjb3JkLmluaXRpYWxEZWYpIHtcbiAgICAgICAgdXBkYXRlQ29tcG9uZW50RGVmKG9sZENvbXAsIG5ld0NvbXApO1xuICAgICAgfVxuICAgICAgaG1yRGlydHlDb21wb25lbnRzLnNldChvbGRDb21wLCBkaXJ0eUluc3RhbmNlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpO1xuICAgIH1cbiAgICBkaXJ0eUluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xuICAgIGluc3RhbmNlLmFwcENvbnRleHQucHJvcHNDYWNoZS5kZWxldGUoaW5zdGFuY2UudHlwZSk7XG4gICAgaW5zdGFuY2UuYXBwQ29udGV4dC5lbWl0c0NhY2hlLmRlbGV0ZShpbnN0YW5jZS50eXBlKTtcbiAgICBpbnN0YW5jZS5hcHBDb250ZXh0Lm9wdGlvbnNDYWNoZS5kZWxldGUoaW5zdGFuY2UudHlwZSk7XG4gICAgaWYgKGluc3RhbmNlLmNlUmVsb2FkKSB7XG4gICAgICBkaXJ0eUluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xuICAgICAgaW5zdGFuY2UuY2VSZWxvYWQobmV3Q29tcC5zdHlsZXMpO1xuICAgICAgZGlydHlJbnN0YW5jZXMuZGVsZXRlKGluc3RhbmNlKTtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlLnBhcmVudCkge1xuICAgICAgcXVldWVKb2IoKCkgPT4ge1xuICAgICAgICBpc0htclVwZGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgaW5zdGFuY2UucGFyZW50LnVwZGF0ZSgpO1xuICAgICAgICBpc0htclVwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgIGRpcnR5SW5zdGFuY2VzLmRlbGV0ZShpbnN0YW5jZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlLmFwcENvbnRleHQucmVsb2FkKSB7XG4gICAgICBpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCgpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiW0hNUl0gUm9vdCBvciBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlIG1vZGlmaWVkLiBGdWxsIHJlbG9hZCByZXF1aXJlZC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLnJvb3QuY2UgJiYgaW5zdGFuY2UgIT09IGluc3RhbmNlLnJvb3QpIHtcbiAgICAgIGluc3RhbmNlLnJvb3QuY2UuX3JlbW92ZUNoaWxkU3R5bGUob2xkQ29tcCk7XG4gICAgfVxuICB9XG4gIHF1ZXVlUG9zdEZsdXNoQ2IoKCkgPT4ge1xuICAgIGhtckRpcnR5Q29tcG9uZW50cy5jbGVhcigpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudERlZihvbGRDb21wLCBuZXdDb21wKSB7XG4gIGV4dGVuZChvbGRDb21wLCBuZXdDb21wKTtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2xkQ29tcCkge1xuICAgIGlmIChrZXkgIT09IFwiX19maWxlXCIgJiYgIShrZXkgaW4gbmV3Q29tcCkpIHtcbiAgICAgIGRlbGV0ZSBvbGRDb21wW2tleV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiB0cnlXcmFwKGZuKSB7XG4gIHJldHVybiAoaWQsIGFyZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4oaWQsIGFyZyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFtITVJdIFNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyBWdWUgY29tcG9uZW50IGhvdC1yZWxvYWQuIEZ1bGwgcmVsb2FkIHJlcXVpcmVkLmBcbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuXG5sZXQgZGV2dG9vbHMkMTtcbmxldCBidWZmZXIgPSBbXTtcbmxldCBkZXZ0b29sc05vdEluc3RhbGxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZW1pdCQxKGV2ZW50LCAuLi5hcmdzKSB7XG4gIGlmIChkZXZ0b29scyQxKSB7XG4gICAgZGV2dG9vbHMkMS5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgfSBlbHNlIGlmICghZGV2dG9vbHNOb3RJbnN0YWxsZWQpIHtcbiAgICBidWZmZXIucHVzaCh7IGV2ZW50LCBhcmdzIH0pO1xuICB9XG59XG5mdW5jdGlvbiBzZXREZXZ0b29sc0hvb2skMShob29rLCB0YXJnZXQpIHtcbiAgdmFyIF9hLCBfYjtcbiAgZGV2dG9vbHMkMSA9IGhvb2s7XG4gIGlmIChkZXZ0b29scyQxKSB7XG4gICAgZGV2dG9vbHMkMS5lbmFibGVkID0gdHJ1ZTtcbiAgICBidWZmZXIuZm9yRWFjaCgoeyBldmVudCwgYXJncyB9KSA9PiBkZXZ0b29scyQxLmVtaXQoZXZlbnQsIC4uLmFyZ3MpKTtcbiAgICBidWZmZXIgPSBbXTtcbiAgfSBlbHNlIGlmIChcbiAgICAvLyBoYW5kbGUgbGF0ZSBkZXZ0b29scyBpbmplY3Rpb24gLSBvbmx5IGRvIHRoaXMgaWYgd2UgYXJlIGluIGFuIGFjdHVhbFxuICAgIC8vIGJyb3dzZXIgZW52aXJvbm1lbnQgdG8gYXZvaWQgdGhlIHRpbWVyIGhhbmRsZSBzdGFsbGluZyB0ZXN0IHJ1bm5lciBleGl0XG4gICAgLy8gKCM0ODE1KVxuICAgIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgLy8gc29tZSBlbnZzIG1vY2sgd2luZG93IGJ1dCBub3QgZnVsbHlcbiAgICB3aW5kb3cuSFRNTEVsZW1lbnQgJiYgLy8gYWxzbyBleGNsdWRlIGpzZG9tXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgISgoX2IgPSAoX2EgPSB3aW5kb3cubmF2aWdhdG9yKSA9PSBudWxsID8gdm9pZCAwIDogX2EudXNlckFnZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2IuaW5jbHVkZXMoXCJqc2RvbVwiKSlcbiAgKSB7XG4gICAgY29uc3QgcmVwbGF5ID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18gPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyB8fCBbXTtcbiAgICByZXBsYXkucHVzaCgobmV3SG9vaykgPT4ge1xuICAgICAgc2V0RGV2dG9vbHNIb29rJDEobmV3SG9vaywgdGFyZ2V0KTtcbiAgICB9KTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICghZGV2dG9vbHMkMSkge1xuICAgICAgICB0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyA9IG51bGw7XG4gICAgICAgIGRldnRvb2xzTm90SW5zdGFsbGVkID0gdHJ1ZTtcbiAgICAgICAgYnVmZmVyID0gW107XG4gICAgICB9XG4gICAgfSwgM2UzKTtcbiAgfSBlbHNlIHtcbiAgICBkZXZ0b29sc05vdEluc3RhbGxlZCA9IHRydWU7XG4gICAgYnVmZmVyID0gW107XG4gIH1cbn1cbmZ1bmN0aW9uIGRldnRvb2xzSW5pdEFwcChhcHAsIHZlcnNpb24pIHtcbiAgZW1pdCQxKFwiYXBwOmluaXRcIiAvKiBBUFBfSU5JVCAqLywgYXBwLCB2ZXJzaW9uLCB7XG4gICAgRnJhZ21lbnQsXG4gICAgVGV4dCxcbiAgICBDb21tZW50LFxuICAgIFN0YXRpY1xuICB9KTtcbn1cbmZ1bmN0aW9uIGRldnRvb2xzVW5tb3VudEFwcChhcHApIHtcbiAgZW1pdCQxKFwiYXBwOnVubW91bnRcIiAvKiBBUFBfVU5NT1VOVCAqLywgYXBwKTtcbn1cbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50QWRkZWQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OmFkZGVkXCIgLyogQ09NUE9ORU5UX0FEREVEICovKTtcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6dXBkYXRlZFwiIC8qIENPTVBPTkVOVF9VUERBVEVEICovKTtcbmNvbnN0IF9kZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFxuICBcImNvbXBvbmVudDpyZW1vdmVkXCIgLyogQ09NUE9ORU5UX1JFTU9WRUQgKi9cbik7XG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAoY29tcG9uZW50KSA9PiB7XG4gIGlmIChkZXZ0b29scyQxICYmIHR5cGVvZiBkZXZ0b29scyQxLmNsZWFudXBCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiAvLyByZW1vdmUgdGhlIGNvbXBvbmVudCBpZiBpdCB3YXNuJ3QgYnVmZmVyZWRcbiAgIWRldnRvb2xzJDEuY2xlYW51cEJ1ZmZlcihjb21wb25lbnQpKSB7XG4gICAgX2RldnRvb2xzQ29tcG9uZW50UmVtb3ZlZChjb21wb25lbnQpO1xuICB9XG59O1xuLyohICNfX05PX1NJREVfRUZGRUNUU19fICovXG4vLyBAX19OT19TSURFX0VGRkVDVFNfX1xuZnVuY3Rpb24gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKGhvb2spIHtcbiAgcmV0dXJuIChjb21wb25lbnQpID0+IHtcbiAgICBlbWl0JDEoXG4gICAgICBob29rLFxuICAgICAgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLFxuICAgICAgY29tcG9uZW50LnVpZCxcbiAgICAgIGNvbXBvbmVudC5wYXJlbnQgPyBjb21wb25lbnQucGFyZW50LnVpZCA6IHZvaWQgMCxcbiAgICAgIGNvbXBvbmVudFxuICAgICk7XG4gIH07XG59XG5jb25zdCBkZXZ0b29sc1BlcmZTdGFydCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhcInBlcmY6c3RhcnRcIiAvKiBQRVJGT1JNQU5DRV9TVEFSVCAqLyk7XG5jb25zdCBkZXZ0b29sc1BlcmZFbmQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNQZXJmb3JtYW5jZUhvb2soXCJwZXJmOmVuZFwiIC8qIFBFUkZPUk1BTkNFX0VORCAqLyk7XG5mdW5jdGlvbiBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhob29rKSB7XG4gIHJldHVybiAoY29tcG9uZW50LCB0eXBlLCB0aW1lKSA9PiB7XG4gICAgZW1pdCQxKGhvb2ssIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LnVpZCwgY29tcG9uZW50LCB0eXBlLCB0aW1lKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGRldnRvb2xzQ29tcG9uZW50RW1pdChjb21wb25lbnQsIGV2ZW50LCBwYXJhbXMpIHtcbiAgZW1pdCQxKFxuICAgIFwiY29tcG9uZW50OmVtaXRcIiAvKiBDT01QT05FTlRfRU1JVCAqLyxcbiAgICBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsXG4gICAgY29tcG9uZW50LFxuICAgIGV2ZW50LFxuICAgIHBhcmFtc1xuICApO1xufVxuXG5sZXQgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbmxldCBjdXJyZW50U2NvcGVJZCA9IG51bGw7XG5mdW5jdGlvbiBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgY29uc3QgcHJldiA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gaW5zdGFuY2U7XG4gIGN1cnJlbnRTY29wZUlkID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UudHlwZS5fX3Njb3BlSWQgfHwgbnVsbDtcbiAgcmV0dXJuIHByZXY7XG59XG5mdW5jdGlvbiBwdXNoU2NvcGVJZChpZCkge1xuICBjdXJyZW50U2NvcGVJZCA9IGlkO1xufVxuZnVuY3Rpb24gcG9wU2NvcGVJZCgpIHtcbiAgY3VycmVudFNjb3BlSWQgPSBudWxsO1xufVxuY29uc3Qgd2l0aFNjb3BlSWQgPSAoX2lkKSA9PiB3aXRoQ3R4O1xuZnVuY3Rpb24gd2l0aEN0eChmbiwgY3R4ID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLCBpc05vblNjb3BlZFNsb3QpIHtcbiAgaWYgKCFjdHgpIHJldHVybiBmbjtcbiAgaWYgKGZuLl9uKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG4gIGNvbnN0IHJlbmRlckZuV2l0aENvbnRleHQgPSAoLi4uYXJncykgPT4ge1xuICAgIGlmIChyZW5kZXJGbldpdGhDb250ZXh0Ll9kKSB7XG4gICAgICBzZXRCbG9ja1RyYWNraW5nKC0xKTtcbiAgICB9XG4gICAgY29uc3QgcHJldkluc3RhbmNlID0gc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGN0eCk7XG4gICAgbGV0IHJlcztcbiAgICB0cnkge1xuICAgICAgcmVzID0gZm4oLi4uYXJncyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2SW5zdGFuY2UpO1xuICAgICAgaWYgKHJlbmRlckZuV2l0aENvbnRleHQuX2QpIHtcbiAgICAgICAgc2V0QmxvY2tUcmFja2luZygxKTtcbiAgICAgIH1cbiAgICB9XG4gICAge1xuICAgICAgZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkKGN0eCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG4gIHJlbmRlckZuV2l0aENvbnRleHQuX24gPSB0cnVlO1xuICByZW5kZXJGbldpdGhDb250ZXh0Ll9jID0gdHJ1ZTtcbiAgcmVuZGVyRm5XaXRoQ29udGV4dC5fZCA9IHRydWU7XG4gIHJldHVybiByZW5kZXJGbldpdGhDb250ZXh0O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZSkge1xuICBpZiAoaXNCdWlsdEluRGlyZWN0aXZlKG5hbWUpKSB7XG4gICAgd2FybiQxKFwiRG8gbm90IHVzZSBidWlsdC1pbiBkaXJlY3RpdmUgaWRzIGFzIGN1c3RvbSBkaXJlY3RpdmUgaWQ6IFwiICsgbmFtZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHdpdGhEaXJlY3RpdmVzKHZub2RlLCBkaXJlY3RpdmVzKSB7XG4gIGlmIChjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICB3YXJuJDEoYHdpdGhEaXJlY3RpdmVzIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHJlbmRlciBmdW5jdGlvbnMuYCk7XG4gICAgcmV0dXJuIHZub2RlO1xuICB9XG4gIGNvbnN0IGluc3RhbmNlID0gZ2V0Q29tcG9uZW50UHVibGljSW5zdGFuY2UoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKTtcbiAgY29uc3QgYmluZGluZ3MgPSB2bm9kZS5kaXJzIHx8ICh2bm9kZS5kaXJzID0gW10pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcmVjdGl2ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgW2RpciwgdmFsdWUsIGFyZywgbW9kaWZpZXJzID0gRU1QVFlfT0JKXSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgaWYgKGRpcikge1xuICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyKSkge1xuICAgICAgICBkaXIgPSB7XG4gICAgICAgICAgbW91bnRlZDogZGlyLFxuICAgICAgICAgIHVwZGF0ZWQ6IGRpclxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKGRpci5kZWVwKSB7XG4gICAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGJpbmRpbmdzLnB1c2goe1xuICAgICAgICBkaXIsXG4gICAgICAgIGluc3RhbmNlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgb2xkVmFsdWU6IHZvaWQgMCxcbiAgICAgICAgYXJnLFxuICAgICAgICBtb2RpZmllcnNcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdm5vZGU7XG59XG5mdW5jdGlvbiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBwcmV2Vk5vZGUsIGluc3RhbmNlLCBuYW1lKSB7XG4gIGNvbnN0IGJpbmRpbmdzID0gdm5vZGUuZGlycztcbiAgY29uc3Qgb2xkQmluZGluZ3MgPSBwcmV2Vk5vZGUgJiYgcHJldlZOb2RlLmRpcnM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYmluZGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbaV07XG4gICAgaWYgKG9sZEJpbmRpbmdzKSB7XG4gICAgICBiaW5kaW5nLm9sZFZhbHVlID0gb2xkQmluZGluZ3NbaV0udmFsdWU7XG4gICAgfVxuICAgIGxldCBob29rID0gYmluZGluZy5kaXJbbmFtZV07XG4gICAgaWYgKGhvb2spIHtcbiAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA4LCBbXG4gICAgICAgIHZub2RlLmVsLFxuICAgICAgICBiaW5kaW5nLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgcHJldlZOb2RlXG4gICAgICBdKTtcbiAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgVGVsZXBvcnRFbmRLZXkgPSBTeW1ib2woXCJfdnRlXCIpO1xuY29uc3QgaXNUZWxlcG9ydCA9ICh0eXBlKSA9PiB0eXBlLl9faXNUZWxlcG9ydDtcbmNvbnN0IGlzVGVsZXBvcnREaXNhYmxlZCA9IChwcm9wcykgPT4gcHJvcHMgJiYgKHByb3BzLmRpc2FibGVkIHx8IHByb3BzLmRpc2FibGVkID09PSBcIlwiKTtcbmNvbnN0IGlzVGVsZXBvcnREZWZlcnJlZCA9IChwcm9wcykgPT4gcHJvcHMgJiYgKHByb3BzLmRlZmVyIHx8IHByb3BzLmRlZmVyID09PSBcIlwiKTtcbmNvbnN0IGlzVGFyZ2V0U1ZHID0gKHRhcmdldCkgPT4gdHlwZW9mIFNWR0VsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudDtcbmNvbnN0IGlzVGFyZ2V0TWF0aE1MID0gKHRhcmdldCkgPT4gdHlwZW9mIE1hdGhNTEVsZW1lbnQgPT09IFwiZnVuY3Rpb25cIiAmJiB0YXJnZXQgaW5zdGFuY2VvZiBNYXRoTUxFbGVtZW50O1xuY29uc3QgcmVzb2x2ZVRhcmdldCA9IChwcm9wcywgc2VsZWN0KSA9PiB7XG4gIGNvbnN0IHRhcmdldFNlbGVjdG9yID0gcHJvcHMgJiYgcHJvcHMudG87XG4gIGlmIChpc1N0cmluZyh0YXJnZXRTZWxlY3RvcikpIHtcbiAgICBpZiAoIXNlbGVjdCkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgQ3VycmVudCByZW5kZXJlciBkb2VzIG5vdCBzdXBwb3J0IHN0cmluZyB0YXJnZXQgZm9yIFRlbGVwb3J0cy4gKG1pc3NpbmcgcXVlcnlTZWxlY3RvciByZW5kZXJlciBvcHRpb24pYFxuICAgICAgKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBzZWxlY3QodGFyZ2V0U2VsZWN0b3IpO1xuICAgICAgaWYgKCF0YXJnZXQgJiYgIWlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcbiAgICAgICAgd2FybiQxKFxuICAgICAgICAgIGBGYWlsZWQgdG8gbG9jYXRlIFRlbGVwb3J0IHRhcmdldCB3aXRoIHNlbGVjdG9yIFwiJHt0YXJnZXRTZWxlY3Rvcn1cIi4gTm90ZSB0aGUgdGFyZ2V0IGVsZW1lbnQgbXVzdCBleGlzdCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkIC0gaS5lLiB0aGUgdGFyZ2V0IGNhbm5vdCBiZSByZW5kZXJlZCBieSB0aGUgY29tcG9uZW50IGl0c2VsZiwgYW5kIGlkZWFsbHkgc2hvdWxkIGJlIG91dHNpZGUgb2YgdGhlIGVudGlyZSBWdWUgY29tcG9uZW50IHRyZWUuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKCF0YXJnZXRTZWxlY3RvciAmJiAhaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgICAgd2FybiQxKGBJbnZhbGlkIFRlbGVwb3J0IHRhcmdldDogJHt0YXJnZXRTZWxlY3Rvcn1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldFNlbGVjdG9yO1xuICB9XG59O1xuY29uc3QgVGVsZXBvcnRJbXBsID0ge1xuICBuYW1lOiBcIlRlbGVwb3J0XCIsXG4gIF9faXNUZWxlcG9ydDogdHJ1ZSxcbiAgcHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBpbnRlcm5hbHMpIHtcbiAgICBjb25zdCB7XG4gICAgICBtYzogbW91bnRDaGlsZHJlbixcbiAgICAgIHBjOiBwYXRjaENoaWxkcmVuLFxuICAgICAgcGJjOiBwYXRjaEJsb2NrQ2hpbGRyZW4sXG4gICAgICBvOiB7IGluc2VydCwgcXVlcnlTZWxlY3RvciwgY3JlYXRlVGV4dCwgY3JlYXRlQ29tbWVudCB9XG4gICAgfSA9IGludGVybmFscztcbiAgICBjb25zdCBkaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZChuMi5wcm9wcyk7XG4gICAgbGV0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuIH0gPSBuMjtcbiAgICBpZiAoaXNIbXJVcGRhdGluZykge1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSBuMi5lbCA9IGNyZWF0ZUNvbW1lbnQoXCJ0ZWxlcG9ydCBzdGFydFwiKSA7XG4gICAgICBjb25zdCBtYWluQW5jaG9yID0gbjIuYW5jaG9yID0gY3JlYXRlQ29tbWVudChcInRlbGVwb3J0IGVuZFwiKSA7XG4gICAgICBpbnNlcnQocGxhY2Vob2xkZXIsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIGluc2VydChtYWluQW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICBjb25zdCBtb3VudCA9IChjb250YWluZXIyLCBhbmNob3IyKSA9PiB7XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgICAgIGlmIChwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LmlzQ0UpIHtcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudC5jZS5fdGVsZXBvcnRUYXJnZXQgPSBjb250YWluZXIyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtb3VudENoaWxkcmVuKFxuICAgICAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgICAgICBjb250YWluZXIyLFxuICAgICAgICAgICAgYW5jaG9yMixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IG1vdW50VG9UYXJnZXQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IG4yLnRhcmdldCA9IHJlc29sdmVUYXJnZXQobjIucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpO1xuICAgICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSBwcmVwYXJlQW5jaG9yKHRhcmdldCwgbjIsIGNyZWF0ZVRleHQsIGluc2VydCk7XG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICBpZiAobmFtZXNwYWNlICE9PSBcInN2Z1wiICYmIGlzVGFyZ2V0U1ZHKHRhcmdldCkpIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZSA9IFwic3ZnXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChuYW1lc3BhY2UgIT09IFwibWF0aG1sXCIgJiYgaXNUYXJnZXRNYXRoTUwodGFyZ2V0KSkge1xuICAgICAgICAgICAgbmFtZXNwYWNlID0gXCJtYXRobWxcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICAgICAgbW91bnQodGFyZ2V0LCB0YXJnZXRBbmNob3IpO1xuICAgICAgICAgICAgdXBkYXRlQ3NzVmFycyhuMiwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBcIkludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIG1vdW50OlwiLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgYCgke3R5cGVvZiB0YXJnZXR9KWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIG1vdW50KGNvbnRhaW5lciwgbWFpbkFuY2hvcik7XG4gICAgICAgIHVwZGF0ZUNzc1ZhcnMobjIsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVGVsZXBvcnREZWZlcnJlZChuMi5wcm9wcykpIHtcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICBtb3VudFRvVGFyZ2V0KCk7XG4gICAgICAgICAgbjIuZWwuX19pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb3VudFRvVGFyZ2V0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RlbGVwb3J0RGVmZXJyZWQobjIucHJvcHMpICYmICFuMS5lbC5fX2lzTW91bnRlZCkge1xuICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgIFRlbGVwb3J0SW1wbC5wcm9jZXNzKFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICAgICAgaW50ZXJuYWxzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBkZWxldGUgbjEuZWwuX19pc01vdW50ZWQ7XG4gICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbjIuZWwgPSBuMS5lbDtcbiAgICAgIG4yLnRhcmdldFN0YXJ0ID0gbjEudGFyZ2V0U3RhcnQ7XG4gICAgICBjb25zdCBtYWluQW5jaG9yID0gbjIuYW5jaG9yID0gbjEuYW5jaG9yO1xuICAgICAgY29uc3QgdGFyZ2V0ID0gbjIudGFyZ2V0ID0gbjEudGFyZ2V0O1xuICAgICAgY29uc3QgdGFyZ2V0QW5jaG9yID0gbjIudGFyZ2V0QW5jaG9yID0gbjEudGFyZ2V0QW5jaG9yO1xuICAgICAgY29uc3Qgd2FzRGlzYWJsZWQgPSBpc1RlbGVwb3J0RGlzYWJsZWQobjEucHJvcHMpO1xuICAgICAgY29uc3QgY3VycmVudENvbnRhaW5lciA9IHdhc0Rpc2FibGVkID8gY29udGFpbmVyIDogdGFyZ2V0O1xuICAgICAgY29uc3QgY3VycmVudEFuY2hvciA9IHdhc0Rpc2FibGVkID8gbWFpbkFuY2hvciA6IHRhcmdldEFuY2hvcjtcbiAgICAgIGlmIChuYW1lc3BhY2UgPT09IFwic3ZnXCIgfHwgaXNUYXJnZXRTVkcodGFyZ2V0KSkge1xuICAgICAgICBuYW1lc3BhY2UgPSBcInN2Z1wiO1xuICAgICAgfSBlbHNlIGlmIChuYW1lc3BhY2UgPT09IFwibWF0aG1sXCIgfHwgaXNUYXJnZXRNYXRoTUwodGFyZ2V0KSkge1xuICAgICAgICBuYW1lc3BhY2UgPSBcIm1hdGhtbFwiO1xuICAgICAgfVxuICAgICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4oXG4gICAgICAgICAgbjEuZHluYW1pY0NoaWxkcmVuLFxuICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgICBjdXJyZW50Q29udGFpbmVyLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzXG4gICAgICAgICk7XG4gICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoIW9wdGltaXplZCkge1xuICAgICAgICBwYXRjaENoaWxkcmVuKFxuICAgICAgICAgIG4xLFxuICAgICAgICAgIG4yLFxuICAgICAgICAgIGN1cnJlbnRDb250YWluZXIsXG4gICAgICAgICAgY3VycmVudEFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIGlmICghd2FzRGlzYWJsZWQpIHtcbiAgICAgICAgICBtb3ZlVGVsZXBvcnQoXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIG1haW5BbmNob3IsXG4gICAgICAgICAgICBpbnRlcm5hbHMsXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobjIucHJvcHMgJiYgbjEucHJvcHMgJiYgbjIucHJvcHMudG8gIT09IG4xLnByb3BzLnRvKSB7XG4gICAgICAgICAgICBuMi5wcm9wcy50byA9IG4xLnByb3BzLnRvO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChuMi5wcm9wcyAmJiBuMi5wcm9wcy50bykgIT09IChuMS5wcm9wcyAmJiBuMS5wcm9wcy50bykpIHtcbiAgICAgICAgICBjb25zdCBuZXh0VGFyZ2V0ID0gbjIudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChcbiAgICAgICAgICAgIG4yLnByb3BzLFxuICAgICAgICAgICAgcXVlcnlTZWxlY3RvclxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKG5leHRUYXJnZXQpIHtcbiAgICAgICAgICAgIG1vdmVUZWxlcG9ydChcbiAgICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICAgIG5leHRUYXJnZXQsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGludGVybmFscyxcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgICBcIkludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIHVwZGF0ZTpcIixcbiAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICBgKCR7dHlwZW9mIHRhcmdldH0pYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAod2FzRGlzYWJsZWQpIHtcbiAgICAgICAgICBtb3ZlVGVsZXBvcnQoXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIHRhcmdldEFuY2hvcixcbiAgICAgICAgICAgIGludGVybmFscyxcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB1cGRhdGVDc3NWYXJzKG4yLCBkaXNhYmxlZCk7XG4gICAgfVxuICB9LFxuICByZW1vdmUodm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHsgdW06IHVubW91bnQsIG86IHsgcmVtb3ZlOiBob3N0UmVtb3ZlIH0gfSwgZG9SZW1vdmUpIHtcbiAgICBjb25zdCB7XG4gICAgICBzaGFwZUZsYWcsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGFuY2hvcixcbiAgICAgIHRhcmdldFN0YXJ0LFxuICAgICAgdGFyZ2V0QW5jaG9yLFxuICAgICAgdGFyZ2V0LFxuICAgICAgcHJvcHNcbiAgICB9ID0gdm5vZGU7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgaG9zdFJlbW92ZSh0YXJnZXRTdGFydCk7XG4gICAgICBob3N0UmVtb3ZlKHRhcmdldEFuY2hvcik7XG4gICAgfVxuICAgIGRvUmVtb3ZlICYmIGhvc3RSZW1vdmUoYW5jaG9yKTtcbiAgICBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgIGNvbnN0IHNob3VsZFJlbW92ZSA9IGRvUmVtb3ZlIHx8ICFpc1RlbGVwb3J0RGlzYWJsZWQocHJvcHMpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICB1bm1vdW50KFxuICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzaG91bGRSZW1vdmUsXG4gICAgICAgICAgISFjaGlsZC5keW5hbWljQ2hpbGRyZW5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1vdmU6IG1vdmVUZWxlcG9ydCxcbiAgaHlkcmF0ZTogaHlkcmF0ZVRlbGVwb3J0XG59O1xuZnVuY3Rpb24gbW92ZVRlbGVwb3J0KHZub2RlLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgeyBvOiB7IGluc2VydCB9LCBtOiBtb3ZlIH0sIG1vdmVUeXBlID0gMikge1xuICBpZiAobW92ZVR5cGUgPT09IDApIHtcbiAgICBpbnNlcnQodm5vZGUudGFyZ2V0QW5jaG9yLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gIH1cbiAgY29uc3QgeyBlbCwgYW5jaG9yLCBzaGFwZUZsYWcsIGNoaWxkcmVuLCBwcm9wcyB9ID0gdm5vZGU7XG4gIGNvbnN0IGlzUmVvcmRlciA9IG1vdmVUeXBlID09PSAyO1xuICBpZiAoaXNSZW9yZGVyKSB7XG4gICAgaW5zZXJ0KGVsLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gIH1cbiAgaWYgKCFpc1Jlb3JkZXIgfHwgaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBtb3ZlKFxuICAgICAgICAgIGNoaWxkcmVuW2ldLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBwYXJlbnRBbmNob3IsXG4gICAgICAgICAgMlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaXNSZW9yZGVyKSB7XG4gICAgaW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xuICB9XG59XG5mdW5jdGlvbiBoeWRyYXRlVGVsZXBvcnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCB7XG4gIG86IHsgbmV4dFNpYmxpbmcsIHBhcmVudE5vZGUsIHF1ZXJ5U2VsZWN0b3IsIGluc2VydCwgY3JlYXRlVGV4dCB9XG59LCBoeWRyYXRlQ2hpbGRyZW4pIHtcbiAgY29uc3QgdGFyZ2V0ID0gdm5vZGUudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChcbiAgICB2bm9kZS5wcm9wcyxcbiAgICBxdWVyeVNlbGVjdG9yXG4gICk7XG4gIGlmICh0YXJnZXQpIHtcbiAgICBjb25zdCBkaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZCh2bm9kZS5wcm9wcyk7XG4gICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRhcmdldC5fbHBhIHx8IHRhcmdldC5maXJzdENoaWxkO1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxNikge1xuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIHZub2RlLmFuY2hvciA9IGh5ZHJhdGVDaGlsZHJlbihcbiAgICAgICAgICBuZXh0U2libGluZyhub2RlKSxcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBwYXJlbnROb2RlKG5vZGUpLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIHZub2RlLnRhcmdldFN0YXJ0ID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgdm5vZGUudGFyZ2V0QW5jaG9yID0gdGFyZ2V0Tm9kZSAmJiBuZXh0U2libGluZyh0YXJnZXROb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmFuY2hvciA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICBsZXQgdGFyZ2V0QW5jaG9yID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgd2hpbGUgKHRhcmdldEFuY2hvcikge1xuICAgICAgICAgIGlmICh0YXJnZXRBbmNob3IgJiYgdGFyZ2V0QW5jaG9yLm5vZGVUeXBlID09PSA4KSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0QW5jaG9yLmRhdGEgPT09IFwidGVsZXBvcnQgc3RhcnQgYW5jaG9yXCIpIHtcbiAgICAgICAgICAgICAgdm5vZGUudGFyZ2V0U3RhcnQgPSB0YXJnZXRBbmNob3I7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldEFuY2hvci5kYXRhID09PSBcInRlbGVwb3J0IGFuY2hvclwiKSB7XG4gICAgICAgICAgICAgIHZub2RlLnRhcmdldEFuY2hvciA9IHRhcmdldEFuY2hvcjtcbiAgICAgICAgICAgICAgdGFyZ2V0Ll9scGEgPSB2bm9kZS50YXJnZXRBbmNob3IgJiYgbmV4dFNpYmxpbmcodm5vZGUudGFyZ2V0QW5jaG9yKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRhcmdldEFuY2hvciA9IG5leHRTaWJsaW5nKHRhcmdldEFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2bm9kZS50YXJnZXRBbmNob3IpIHtcbiAgICAgICAgICBwcmVwYXJlQW5jaG9yKHRhcmdldCwgdm5vZGUsIGNyZWF0ZVRleHQsIGluc2VydCk7XG4gICAgICAgIH1cbiAgICAgICAgaHlkcmF0ZUNoaWxkcmVuKFxuICAgICAgICAgIHRhcmdldE5vZGUgJiYgbmV4dFNpYmxpbmcodGFyZ2V0Tm9kZSksXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUNzc1ZhcnModm5vZGUsIGRpc2FibGVkKTtcbiAgfVxuICByZXR1cm4gdm5vZGUuYW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLmFuY2hvcik7XG59XG5jb25zdCBUZWxlcG9ydCA9IFRlbGVwb3J0SW1wbDtcbmZ1bmN0aW9uIHVwZGF0ZUNzc1ZhcnModm5vZGUsIGlzRGlzYWJsZWQpIHtcbiAgY29uc3QgY3R4ID0gdm5vZGUuY3R4O1xuICBpZiAoY3R4ICYmIGN0eC51dCkge1xuICAgIGxldCBub2RlLCBhbmNob3I7XG4gICAgaWYgKGlzRGlzYWJsZWQpIHtcbiAgICAgIG5vZGUgPSB2bm9kZS5lbDtcbiAgICAgIGFuY2hvciA9IHZub2RlLmFuY2hvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZSA9IHZub2RlLnRhcmdldFN0YXJ0O1xuICAgICAgYW5jaG9yID0gdm5vZGUudGFyZ2V0QW5jaG9yO1xuICAgIH1cbiAgICB3aGlsZSAobm9kZSAmJiBub2RlICE9PSBhbmNob3IpIHtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSBub2RlLnNldEF0dHJpYnV0ZShcImRhdGEtdi1vd25lclwiLCBjdHgudWlkKTtcbiAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIH1cbiAgICBjdHgudXQoKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZUFuY2hvcih0YXJnZXQsIHZub2RlLCBjcmVhdGVUZXh0LCBpbnNlcnQpIHtcbiAgY29uc3QgdGFyZ2V0U3RhcnQgPSB2bm9kZS50YXJnZXRTdGFydCA9IGNyZWF0ZVRleHQoXCJcIik7XG4gIGNvbnN0IHRhcmdldEFuY2hvciA9IHZub2RlLnRhcmdldEFuY2hvciA9IGNyZWF0ZVRleHQoXCJcIik7XG4gIHRhcmdldFN0YXJ0W1RlbGVwb3J0RW5kS2V5XSA9IHRhcmdldEFuY2hvcjtcbiAgaWYgKHRhcmdldCkge1xuICAgIGluc2VydCh0YXJnZXRTdGFydCwgdGFyZ2V0KTtcbiAgICBpbnNlcnQodGFyZ2V0QW5jaG9yLCB0YXJnZXQpO1xuICB9XG4gIHJldHVybiB0YXJnZXRBbmNob3I7XG59XG5cbmNvbnN0IGxlYXZlQ2JLZXkgPSBTeW1ib2woXCJfbGVhdmVDYlwiKTtcbmNvbnN0IGVudGVyQ2JLZXkkMSA9IFN5bWJvbChcIl9lbnRlckNiXCIpO1xuZnVuY3Rpb24gdXNlVHJhbnNpdGlvblN0YXRlKCkge1xuICBjb25zdCBzdGF0ZSA9IHtcbiAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgIGlzTGVhdmluZzogZmFsc2UsXG4gICAgaXNVbm1vdW50aW5nOiBmYWxzZSxcbiAgICBsZWF2aW5nVk5vZGVzOiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpXG4gIH07XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgc3RhdGUuaXNNb3VudGVkID0gdHJ1ZTtcbiAgfSk7XG4gIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgc3RhdGUuaXNVbm1vdW50aW5nID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiBzdGF0ZTtcbn1cbmNvbnN0IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yID0gW0Z1bmN0aW9uLCBBcnJheV07XG5jb25zdCBCYXNlVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyA9IHtcbiAgbW9kZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIHBlcnNpc3RlZDogQm9vbGVhbixcbiAgLy8gZW50ZXJcbiAgb25CZWZvcmVFbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkFmdGVyRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkVudGVyQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgLy8gbGVhdmVcbiAgb25CZWZvcmVMZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uTGVhdmU6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkFmdGVyTGVhdmU6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkxlYXZlQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgLy8gYXBwZWFyXG4gIG9uQmVmb3JlQXBwZWFyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25BcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkFmdGVyQXBwZWFyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25BcHBlYXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yXG59O1xuY29uc3QgcmVjdXJzaXZlR2V0U3VidHJlZSA9IChpbnN0YW5jZSkgPT4ge1xuICBjb25zdCBzdWJUcmVlID0gaW5zdGFuY2Uuc3ViVHJlZTtcbiAgcmV0dXJuIHN1YlRyZWUuY29tcG9uZW50ID8gcmVjdXJzaXZlR2V0U3VidHJlZShzdWJUcmVlLmNvbXBvbmVudCkgOiBzdWJUcmVlO1xufTtcbmNvbnN0IEJhc2VUcmFuc2l0aW9uSW1wbCA9IHtcbiAgbmFtZTogYEJhc2VUcmFuc2l0aW9uYCxcbiAgcHJvcHM6IEJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzdGF0ZSA9IHVzZVRyYW5zaXRpb25TdGF0ZSgpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQgJiYgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuKHNsb3RzLmRlZmF1bHQoKSwgdHJ1ZSk7XG4gICAgICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hpbGQgPSBmaW5kTm9uQ29tbWVudENoaWxkKGNoaWxkcmVuKTtcbiAgICAgIGNvbnN0IHJhd1Byb3BzID0gdG9SYXcocHJvcHMpO1xuICAgICAgY29uc3QgeyBtb2RlIH0gPSByYXdQcm9wcztcbiAgICAgIGlmIChtb2RlICYmIG1vZGUgIT09IFwiaW4tb3V0XCIgJiYgbW9kZSAhPT0gXCJvdXQtaW5cIiAmJiBtb2RlICE9PSBcImRlZmF1bHRcIikge1xuICAgICAgICB3YXJuJDEoYGludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICR7bW9kZX1gKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5pc0xlYXZpbmcpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgfVxuICAgICAgY29uc3QgaW5uZXJDaGlsZCA9IGdldElubmVyQ2hpbGQkMShjaGlsZCk7XG4gICAgICBpZiAoIWlubmVyQ2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgfVxuICAgICAgbGV0IGVudGVySG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKFxuICAgICAgICBpbm5lckNoaWxkLFxuICAgICAgICByYXdQcm9wcyxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGluc3RhbmNlLFxuICAgICAgICAvLyAjMTEwNjEsIGVuc3VyZSBlbnRlckhvb2tzIGlzIGZyZXNoIGFmdGVyIGNsb25lXG4gICAgICAgIChob29rcykgPT4gZW50ZXJIb29rcyA9IGhvb2tzXG4gICAgICApO1xuICAgICAgaWYgKGlubmVyQ2hpbGQudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoaW5uZXJDaGlsZCwgZW50ZXJIb29rcyk7XG4gICAgICB9XG4gICAgICBsZXQgb2xkSW5uZXJDaGlsZCA9IGluc3RhbmNlLnN1YlRyZWUgJiYgZ2V0SW5uZXJDaGlsZCQxKGluc3RhbmNlLnN1YlRyZWUpO1xuICAgICAgaWYgKG9sZElubmVyQ2hpbGQgJiYgb2xkSW5uZXJDaGlsZC50eXBlICE9PSBDb21tZW50ICYmICFpc1NhbWVWTm9kZVR5cGUoaW5uZXJDaGlsZCwgb2xkSW5uZXJDaGlsZCkgJiYgcmVjdXJzaXZlR2V0U3VidHJlZShpbnN0YW5jZSkudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICBsZXQgbGVhdmluZ0hvb2tzID0gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhcbiAgICAgICAgICBvbGRJbm5lckNoaWxkLFxuICAgICAgICAgIHJhd1Byb3BzLFxuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICk7XG4gICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCBsZWF2aW5nSG9va3MpO1xuICAgICAgICBpZiAobW9kZSA9PT0gXCJvdXQtaW5cIiAmJiBpbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSB0cnVlO1xuICAgICAgICAgIGxlYXZpbmdIb29rcy5hZnRlckxlYXZlID0gKCkgPT4ge1xuICAgICAgICAgICAgc3RhdGUuaXNMZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIShpbnN0YW5jZS5qb2IuZmxhZ3MgJiA4KSkge1xuICAgICAgICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSBsZWF2aW5nSG9va3MuYWZ0ZXJMZWF2ZTtcbiAgICAgICAgICAgIG9sZElubmVyQ2hpbGQgPSB2b2lkIDA7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gZW1wdHlQbGFjZWhvbGRlcihjaGlsZCk7XG4gICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJpbi1vdXRcIiAmJiBpbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgICBsZWF2aW5nSG9va3MuZGVsYXlMZWF2ZSA9IChlbCwgZWFybHlSZW1vdmUsIGRlbGF5ZWRMZWF2ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gZ2V0TGVhdmluZ05vZGVzRm9yVHlwZShcbiAgICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICAgIG9sZElubmVyQ2hpbGRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVbU3RyaW5nKG9sZElubmVyQ2hpbGQua2V5KV0gPSBvbGRJbm5lckNoaWxkO1xuICAgICAgICAgICAgZWxbbGVhdmVDYktleV0gPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGVhcmx5UmVtb3ZlKCk7XG4gICAgICAgICAgICAgIGVsW2xlYXZlQ2JLZXldID0gdm9pZCAwO1xuICAgICAgICAgICAgICBkZWxldGUgZW50ZXJIb29rcy5kZWxheWVkTGVhdmU7XG4gICAgICAgICAgICAgIG9sZElubmVyQ2hpbGQgPSB2b2lkIDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZW50ZXJIb29rcy5kZWxheWVkTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGRlbGF5ZWRMZWF2ZSgpO1xuICAgICAgICAgICAgICBkZWxldGUgZW50ZXJIb29rcy5kZWxheWVkTGVhdmU7XG4gICAgICAgICAgICAgIG9sZElubmVyQ2hpbGQgPSB2b2lkIDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2xkSW5uZXJDaGlsZCA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvbGRJbm5lckNoaWxkKSB7XG4gICAgICAgIG9sZElubmVyQ2hpbGQgPSB2b2lkIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfTtcbiAgfVxufTtcbmZ1bmN0aW9uIGZpbmROb25Db21tZW50Q2hpbGQoY2hpbGRyZW4pIHtcbiAgbGV0IGNoaWxkID0gY2hpbGRyZW5bMF07XG4gIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgbGV0IGhhc0ZvdW5kID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBjIG9mIGNoaWxkcmVuKSB7XG4gICAgICBpZiAoYy50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgIGlmIChoYXNGb3VuZCkge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIFwiPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudCBvciBjb21wb25lbnQuIFVzZSA8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjaGlsZCA9IGM7XG4gICAgICAgIGhhc0ZvdW5kID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkO1xufVxuY29uc3QgQmFzZVRyYW5zaXRpb24gPSBCYXNlVHJhbnNpdGlvbkltcGw7XG5mdW5jdGlvbiBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSkge1xuICBjb25zdCB7IGxlYXZpbmdWTm9kZXMgfSA9IHN0YXRlO1xuICBsZXQgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gbGVhdmluZ1ZOb2Rlcy5nZXQodm5vZGUudHlwZSk7XG4gIGlmICghbGVhdmluZ1ZOb2Rlc0NhY2hlKSB7XG4gICAgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgbGVhdmluZ1ZOb2Rlcy5zZXQodm5vZGUudHlwZSwgbGVhdmluZ1ZOb2Rlc0NhY2hlKTtcbiAgfVxuICByZXR1cm4gbGVhdmluZ1ZOb2Rlc0NhY2hlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSwgcG9zdENsb25lKSB7XG4gIGNvbnN0IHtcbiAgICBhcHBlYXIsXG4gICAgbW9kZSxcbiAgICBwZXJzaXN0ZWQgPSBmYWxzZSxcbiAgICBvbkJlZm9yZUVudGVyLFxuICAgIG9uRW50ZXIsXG4gICAgb25BZnRlckVudGVyLFxuICAgIG9uRW50ZXJDYW5jZWxsZWQsXG4gICAgb25CZWZvcmVMZWF2ZSxcbiAgICBvbkxlYXZlLFxuICAgIG9uQWZ0ZXJMZWF2ZSxcbiAgICBvbkxlYXZlQ2FuY2VsbGVkLFxuICAgIG9uQmVmb3JlQXBwZWFyLFxuICAgIG9uQXBwZWFyLFxuICAgIG9uQWZ0ZXJBcHBlYXIsXG4gICAgb25BcHBlYXJDYW5jZWxsZWRcbiAgfSA9IHByb3BzO1xuICBjb25zdCBrZXkgPSBTdHJpbmcodm5vZGUua2V5KTtcbiAgY29uc3QgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gZ2V0TGVhdmluZ05vZGVzRm9yVHlwZShzdGF0ZSwgdm5vZGUpO1xuICBjb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzKSA9PiB7XG4gICAgaG9vayAmJiBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhcbiAgICAgIGhvb2ssXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDksXG4gICAgICBhcmdzXG4gICAgKTtcbiAgfTtcbiAgY29uc3QgY2FsbEFzeW5jSG9vayA9IChob29rLCBhcmdzKSA9PiB7XG4gICAgY29uc3QgZG9uZSA9IGFyZ3NbMV07XG4gICAgY2FsbEhvb2soaG9vaywgYXJncyk7XG4gICAgaWYgKGlzQXJyYXkoaG9vaykpIHtcbiAgICAgIGlmIChob29rLmV2ZXJ5KChob29rMikgPT4gaG9vazIubGVuZ3RoIDw9IDEpKSBkb25lKCk7XG4gICAgfSBlbHNlIGlmIChob29rLmxlbmd0aCA8PSAxKSB7XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBob29rcyA9IHtcbiAgICBtb2RlLFxuICAgIHBlcnNpc3RlZCxcbiAgICBiZWZvcmVFbnRlcihlbCkge1xuICAgICAgbGV0IGhvb2sgPSBvbkJlZm9yZUVudGVyO1xuICAgICAgaWYgKCFzdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICAgIGhvb2sgPSBvbkJlZm9yZUFwcGVhciB8fCBvbkJlZm9yZUVudGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVsW2xlYXZlQ2JLZXldKSB7XG4gICAgICAgIGVsW2xlYXZlQ2JLZXldKFxuICAgICAgICAgIHRydWVcbiAgICAgICAgICAvKiBjYW5jZWxsZWQgKi9cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxlYXZpbmdWTm9kZSA9IGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldO1xuICAgICAgaWYgKGxlYXZpbmdWTm9kZSAmJiBpc1NhbWVWTm9kZVR5cGUodm5vZGUsIGxlYXZpbmdWTm9kZSkgJiYgbGVhdmluZ1ZOb2RlLmVsW2xlYXZlQ2JLZXldKSB7XG4gICAgICAgIGxlYXZpbmdWTm9kZS5lbFtsZWF2ZUNiS2V5XSgpO1xuICAgICAgfVxuICAgICAgY2FsbEhvb2soaG9vaywgW2VsXSk7XG4gICAgfSxcbiAgICBlbnRlcihlbCkge1xuICAgICAgbGV0IGhvb2sgPSBvbkVudGVyO1xuICAgICAgbGV0IGFmdGVySG9vayA9IG9uQWZ0ZXJFbnRlcjtcbiAgICAgIGxldCBjYW5jZWxIb29rID0gb25FbnRlckNhbmNlbGxlZDtcbiAgICAgIGlmICghc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgICBob29rID0gb25BcHBlYXIgfHwgb25FbnRlcjtcbiAgICAgICAgICBhZnRlckhvb2sgPSBvbkFmdGVyQXBwZWFyIHx8IG9uQWZ0ZXJFbnRlcjtcbiAgICAgICAgICBjYW5jZWxIb29rID0gb25BcHBlYXJDYW5jZWxsZWQgfHwgb25FbnRlckNhbmNlbGxlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGRvbmUgPSBlbFtlbnRlckNiS2V5JDFdID0gKGNhbmNlbGxlZCkgPT4ge1xuICAgICAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICBjYWxsSG9vayhjYW5jZWxIb29rLCBbZWxdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsSG9vayhhZnRlckhvb2ssIFtlbF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChob29rcy5kZWxheWVkTGVhdmUpIHtcbiAgICAgICAgICBob29rcy5kZWxheWVkTGVhdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbFtlbnRlckNiS2V5JDFdID0gdm9pZCAwO1xuICAgICAgfTtcbiAgICAgIGlmIChob29rKSB7XG4gICAgICAgIGNhbGxBc3luY0hvb2soaG9vaywgW2VsLCBkb25lXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25lKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBsZWF2ZShlbCwgcmVtb3ZlKSB7XG4gICAgICBjb25zdCBrZXkyID0gU3RyaW5nKHZub2RlLmtleSk7XG4gICAgICBpZiAoZWxbZW50ZXJDYktleSQxXSkge1xuICAgICAgICBlbFtlbnRlckNiS2V5JDFdKFxuICAgICAgICAgIHRydWVcbiAgICAgICAgICAvKiBjYW5jZWxsZWQgKi9cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5pc1VubW91bnRpbmcpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgY2FsbEhvb2sob25CZWZvcmVMZWF2ZSwgW2VsXSk7XG4gICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XG4gICAgICBjb25zdCBkb25lID0gZWxbbGVhdmVDYktleV0gPSAoY2FuY2VsbGVkKSA9PiB7XG4gICAgICAgIGlmIChjYWxsZWQpIHJldHVybjtcbiAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgcmVtb3ZlKCk7XG4gICAgICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICBjYWxsSG9vayhvbkxlYXZlQ2FuY2VsbGVkLCBbZWxdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsSG9vayhvbkFmdGVyTGVhdmUsIFtlbF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsW2xlYXZlQ2JLZXldID0gdm9pZCAwO1xuICAgICAgICBpZiAobGVhdmluZ1ZOb2Rlc0NhY2hlW2tleTJdID09PSB2bm9kZSkge1xuICAgICAgICAgIGRlbGV0ZSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5Ml07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5Ml0gPSB2bm9kZTtcbiAgICAgIGlmIChvbkxlYXZlKSB7XG4gICAgICAgIGNhbGxBc3luY0hvb2sob25MZWF2ZSwgW2VsLCBkb25lXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25lKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjbG9uZSh2bm9kZTIpIHtcbiAgICAgIGNvbnN0IGhvb2tzMiA9IHJlc29sdmVUcmFuc2l0aW9uSG9va3MoXG4gICAgICAgIHZub2RlMixcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgcG9zdENsb25lXG4gICAgICApO1xuICAgICAgaWYgKHBvc3RDbG9uZSkgcG9zdENsb25lKGhvb2tzMik7XG4gICAgICByZXR1cm4gaG9va3MyO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhvb2tzO1xufVxuZnVuY3Rpb24gZW1wdHlQbGFjZWhvbGRlcih2bm9kZSkge1xuICBpZiAoaXNLZWVwQWxpdmUodm5vZGUpKSB7XG4gICAgdm5vZGUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB2bm9kZS5jaGlsZHJlbiA9IG51bGw7XG4gICAgcmV0dXJuIHZub2RlO1xuICB9XG59XG5mdW5jdGlvbiBnZXRJbm5lckNoaWxkJDEodm5vZGUpIHtcbiAgaWYgKCFpc0tlZXBBbGl2ZSh2bm9kZSkpIHtcbiAgICBpZiAoaXNUZWxlcG9ydCh2bm9kZS50eXBlKSAmJiB2bm9kZS5jaGlsZHJlbikge1xuICAgICAgcmV0dXJuIGZpbmROb25Db21tZW50Q2hpbGQodm5vZGUuY2hpbGRyZW4pO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGU7XG4gIH1cbiAgaWYgKHZub2RlLmNvbXBvbmVudCkge1xuICAgIHJldHVybiB2bm9kZS5jb21wb25lbnQuc3ViVHJlZTtcbiAgfVxuICBjb25zdCB7IHNoYXBlRmxhZywgY2hpbGRyZW4gfSA9IHZub2RlO1xuICBpZiAoY2hpbGRyZW4pIHtcbiAgICBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlblswXTtcbiAgICB9XG4gICAgaWYgKHNoYXBlRmxhZyAmIDMyICYmIGlzRnVuY3Rpb24oY2hpbGRyZW4uZGVmYXVsdCkpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbi5kZWZhdWx0KCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUsIGhvb2tzKSB7XG4gIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2ICYmIHZub2RlLmNvbXBvbmVudCkge1xuICAgIHZub2RlLnRyYW5zaXRpb24gPSBob29rcztcbiAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGhvb2tzKTtcbiAgfSBlbHNlIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxMjgpIHtcbiAgICB2bm9kZS5zc0NvbnRlbnQudHJhbnNpdGlvbiA9IGhvb2tzLmNsb25lKHZub2RlLnNzQ29udGVudCk7XG4gICAgdm5vZGUuc3NGYWxsYmFjay50cmFuc2l0aW9uID0gaG9va3MuY2xvbmUodm5vZGUuc3NGYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgdm5vZGUudHJhbnNpdGlvbiA9IGhvb2tzO1xuICB9XG59XG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGRyZW4sIGtlZXBDb21tZW50ID0gZmFsc2UsIHBhcmVudEtleSkge1xuICBsZXQgcmV0ID0gW107XG4gIGxldCBrZXllZEZyYWdtZW50Q291bnQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgY29uc3Qga2V5ID0gcGFyZW50S2V5ID09IG51bGwgPyBjaGlsZC5rZXkgOiBTdHJpbmcocGFyZW50S2V5KSArIFN0cmluZyhjaGlsZC5rZXkgIT0gbnVsbCA/IGNoaWxkLmtleSA6IGkpO1xuICAgIGlmIChjaGlsZC50eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgaWYgKGNoaWxkLnBhdGNoRmxhZyAmIDEyOCkga2V5ZWRGcmFnbWVudENvdW50Kys7XG4gICAgICByZXQgPSByZXQuY29uY2F0KFxuICAgICAgICBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGQuY2hpbGRyZW4sIGtlZXBDb21tZW50LCBrZXkpXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoa2VlcENvbW1lbnQgfHwgY2hpbGQudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgcmV0LnB1c2goa2V5ICE9IG51bGwgPyBjbG9uZVZOb2RlKGNoaWxkLCB7IGtleSB9KSA6IGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgaWYgKGtleWVkRnJhZ21lbnRDb3VudCA+IDEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJldC5sZW5ndGg7IGkrKykge1xuICAgICAgcmV0W2ldLnBhdGNoRmxhZyA9IC0yO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vKiEgI19fTk9fU0lERV9FRkZFQ1RTX18gKi9cbi8vIEBfX05PX1NJREVfRUZGRUNUU19fXG5mdW5jdGlvbiBkZWZpbmVDb21wb25lbnQob3B0aW9ucywgZXh0cmFPcHRpb25zKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKG9wdGlvbnMpID8gKFxuICAgIC8vICM4MjM2OiBleHRlbmQgY2FsbCBhbmQgb3B0aW9ucy5uYW1lIGFjY2VzcyBhcmUgY29uc2lkZXJlZCBzaWRlLWVmZmVjdHNcbiAgICAvLyBieSBSb2xsdXAsIHNvIHdlIGhhdmUgdG8gd3JhcCBpdCBpbiBhIHB1cmUtYW5ub3RhdGVkIElJRkUuXG4gICAgLyogQF9fUFVSRV9fICovICgoKSA9PiBleHRlbmQoeyBuYW1lOiBvcHRpb25zLm5hbWUgfSwgZXh0cmFPcHRpb25zLCB7IHNldHVwOiBvcHRpb25zIH0pKSgpXG4gICkgOiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiB1c2VJZCgpIHtcbiAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoaSkge1xuICAgIHJldHVybiAoaS5hcHBDb250ZXh0LmNvbmZpZy5pZFByZWZpeCB8fCBcInZcIikgKyBcIi1cIiArIGkuaWRzWzBdICsgaS5pZHNbMV0rKztcbiAgfSBlbHNlIHtcbiAgICB3YXJuJDEoXG4gICAgICBgdXNlSWQoKSBpcyBjYWxsZWQgd2hlbiB0aGVyZSBpcyBubyBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlIHRvIGJlIGFzc29jaWF0ZWQgd2l0aC5gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gXCJcIjtcbn1cbmZ1bmN0aW9uIG1hcmtBc3luY0JvdW5kYXJ5KGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLmlkcyA9IFtpbnN0YW5jZS5pZHNbMF0gKyBpbnN0YW5jZS5pZHNbMl0rKyArIFwiLVwiLCAwLCAwXTtcbn1cblxuY29uc3Qga25vd25UZW1wbGF0ZVJlZnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbmZ1bmN0aW9uIHVzZVRlbXBsYXRlUmVmKGtleSkge1xuICBjb25zdCBpID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIGNvbnN0IHIgPSBzaGFsbG93UmVmKG51bGwpO1xuICBpZiAoaSkge1xuICAgIGNvbnN0IHJlZnMgPSBpLnJlZnMgPT09IEVNUFRZX09CSiA/IGkucmVmcyA9IHt9IDogaS5yZWZzO1xuICAgIGxldCBkZXNjO1xuICAgIGlmICgoZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocmVmcywga2V5KSkgJiYgIWRlc2MuY29uZmlndXJhYmxlKSB7XG4gICAgICB3YXJuJDEoYHVzZVRlbXBsYXRlUmVmKCcke2tleX0nKSBhbHJlYWR5IGV4aXN0cy5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlZnMsIGtleSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IHIudmFsdWUsXG4gICAgICAgIHNldDogKHZhbCkgPT4gci52YWx1ZSA9IHZhbFxuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHdhcm4kMShcbiAgICAgIGB1c2VUZW1wbGF0ZVJlZigpIGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UgdG8gYmUgYXNzb2NpYXRlZCB3aXRoLmBcbiAgICApO1xuICB9XG4gIGNvbnN0IHJldCA9IHJlYWRvbmx5KHIpIDtcbiAge1xuICAgIGtub3duVGVtcGxhdGVSZWZzLmFkZChyZXQpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHNldFJlZihyYXdSZWYsIG9sZFJhd1JlZiwgcGFyZW50U3VzcGVuc2UsIHZub2RlLCBpc1VubW91bnQgPSBmYWxzZSkge1xuICBpZiAoaXNBcnJheShyYXdSZWYpKSB7XG4gICAgcmF3UmVmLmZvckVhY2goXG4gICAgICAociwgaSkgPT4gc2V0UmVmKFxuICAgICAgICByLFxuICAgICAgICBvbGRSYXdSZWYgJiYgKGlzQXJyYXkob2xkUmF3UmVmKSA/IG9sZFJhd1JlZltpXSA6IG9sZFJhd1JlZiksXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgaXNVbm1vdW50XG4gICAgICApXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGlzQXN5bmNXcmFwcGVyKHZub2RlKSAmJiAhaXNVbm1vdW50KSB7XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDUxMiAmJiB2bm9kZS50eXBlLl9fYXN5bmNSZXNvbHZlZCAmJiB2bm9kZS5jb21wb25lbnQuc3ViVHJlZS5jb21wb25lbnQpIHtcbiAgICAgIHNldFJlZihyYXdSZWYsIG9sZFJhd1JlZiwgcGFyZW50U3VzcGVuc2UsIHZub2RlLmNvbXBvbmVudC5zdWJUcmVlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHJlZlZhbHVlID0gdm5vZGUuc2hhcGVGbGFnICYgNCA/IGdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlKHZub2RlLmNvbXBvbmVudCkgOiB2bm9kZS5lbDtcbiAgY29uc3QgdmFsdWUgPSBpc1VubW91bnQgPyBudWxsIDogcmVmVmFsdWU7XG4gIGNvbnN0IHsgaTogb3duZXIsIHI6IHJlZiB9ID0gcmF3UmVmO1xuICBpZiAoIW93bmVyKSB7XG4gICAgd2FybiQxKFxuICAgICAgYE1pc3NpbmcgcmVmIG93bmVyIGNvbnRleHQuIHJlZiBjYW5ub3QgYmUgdXNlZCBvbiBob2lzdGVkIHZub2Rlcy4gQSB2bm9kZSB3aXRoIHJlZiBtdXN0IGJlIGNyZWF0ZWQgaW5zaWRlIHRoZSByZW5kZXIgZnVuY3Rpb24uYFxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG9sZFJlZiA9IG9sZFJhd1JlZiAmJiBvbGRSYXdSZWYucjtcbiAgY29uc3QgcmVmcyA9IG93bmVyLnJlZnMgPT09IEVNUFRZX09CSiA/IG93bmVyLnJlZnMgPSB7fSA6IG93bmVyLnJlZnM7XG4gIGNvbnN0IHNldHVwU3RhdGUgPSBvd25lci5zZXR1cFN0YXRlO1xuICBjb25zdCByYXdTZXR1cFN0YXRlID0gdG9SYXcoc2V0dXBTdGF0ZSk7XG4gIGNvbnN0IGNhblNldFNldHVwUmVmID0gc2V0dXBTdGF0ZSA9PT0gRU1QVFlfT0JKID8gKCkgPT4gZmFsc2UgOiAoa2V5KSA9PiB7XG4gICAge1xuICAgICAgaWYgKGhhc093bihyYXdTZXR1cFN0YXRlLCBrZXkpICYmICFpc1JlZihyYXdTZXR1cFN0YXRlW2tleV0pKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgVGVtcGxhdGUgcmVmIFwiJHtrZXl9XCIgdXNlZCBvbiBhIG5vbi1yZWYgdmFsdWUuIEl0IHdpbGwgbm90IHdvcmsgaW4gdGhlIHByb2R1Y3Rpb24gYnVpbGQuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGtub3duVGVtcGxhdGVSZWZzLmhhcyhyYXdTZXR1cFN0YXRlW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhc093bihyYXdTZXR1cFN0YXRlLCBrZXkpO1xuICB9O1xuICBpZiAob2xkUmVmICE9IG51bGwgJiYgb2xkUmVmICE9PSByZWYpIHtcbiAgICBpZiAoaXNTdHJpbmcob2xkUmVmKSkge1xuICAgICAgcmVmc1tvbGRSZWZdID0gbnVsbDtcbiAgICAgIGlmIChjYW5TZXRTZXR1cFJlZihvbGRSZWYpKSB7XG4gICAgICAgIHNldHVwU3RhdGVbb2xkUmVmXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1JlZihvbGRSZWYpKSB7XG4gICAgICBvbGRSZWYudmFsdWUgPSBudWxsO1xuICAgIH1cbiAgfVxuICBpZiAoaXNGdW5jdGlvbihyZWYpKSB7XG4gICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKHJlZiwgb3duZXIsIDEyLCBbdmFsdWUsIHJlZnNdKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBfaXNTdHJpbmcgPSBpc1N0cmluZyhyZWYpO1xuICAgIGNvbnN0IF9pc1JlZiA9IGlzUmVmKHJlZik7XG4gICAgaWYgKF9pc1N0cmluZyB8fCBfaXNSZWYpIHtcbiAgICAgIGNvbnN0IGRvU2V0ID0gKCkgPT4ge1xuICAgICAgICBpZiAocmF3UmVmLmYpIHtcbiAgICAgICAgICBjb25zdCBleGlzdGluZyA9IF9pc1N0cmluZyA/IGNhblNldFNldHVwUmVmKHJlZikgPyBzZXR1cFN0YXRlW3JlZl0gOiByZWZzW3JlZl0gOiByZWYudmFsdWU7XG4gICAgICAgICAgaWYgKGlzVW5tb3VudCkge1xuICAgICAgICAgICAgaXNBcnJheShleGlzdGluZykgJiYgcmVtb3ZlKGV4aXN0aW5nLCByZWZWYWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaXNBcnJheShleGlzdGluZykpIHtcbiAgICAgICAgICAgICAgaWYgKF9pc1N0cmluZykge1xuICAgICAgICAgICAgICAgIHJlZnNbcmVmXSA9IFtyZWZWYWx1ZV07XG4gICAgICAgICAgICAgICAgaWYgKGNhblNldFNldHVwUmVmKHJlZikpIHtcbiAgICAgICAgICAgICAgICAgIHNldHVwU3RhdGVbcmVmXSA9IHJlZnNbcmVmXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVmLnZhbHVlID0gW3JlZlZhbHVlXTtcbiAgICAgICAgICAgICAgICBpZiAocmF3UmVmLmspIHJlZnNbcmF3UmVmLmtdID0gcmVmLnZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFleGlzdGluZy5pbmNsdWRlcyhyZWZWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgZXhpc3RpbmcucHVzaChyZWZWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF9pc1N0cmluZykge1xuICAgICAgICAgIHJlZnNbcmVmXSA9IHZhbHVlO1xuICAgICAgICAgIGlmIChjYW5TZXRTZXR1cFJlZihyZWYpKSB7XG4gICAgICAgICAgICBzZXR1cFN0YXRlW3JlZl0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoX2lzUmVmKSB7XG4gICAgICAgICAgcmVmLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgaWYgKHJhd1JlZi5rKSByZWZzW3Jhd1JlZi5rXSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4kMShcIkludmFsaWQgdGVtcGxhdGUgcmVmIHR5cGU6XCIsIHJlZiwgYCgke3R5cGVvZiByZWZ9KWApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRvU2V0LmlkID0gLTE7XG4gICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkb1NldCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9TZXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2FybiQxKFwiSW52YWxpZCB0ZW1wbGF0ZSByZWYgdHlwZTpcIiwgcmVmLCBgKCR7dHlwZW9mIHJlZn0pYCk7XG4gICAgfVxuICB9XG59XG5cbmxldCBoYXNMb2dnZWRNaXNtYXRjaEVycm9yID0gZmFsc2U7XG5jb25zdCBsb2dNaXNtYXRjaEVycm9yID0gKCkgPT4ge1xuICBpZiAoaGFzTG9nZ2VkTWlzbWF0Y2hFcnJvcikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zb2xlLmVycm9yKFwiSHlkcmF0aW9uIGNvbXBsZXRlZCBidXQgY29udGFpbnMgbWlzbWF0Y2hlcy5cIik7XG4gIGhhc0xvZ2dlZE1pc21hdGNoRXJyb3IgPSB0cnVlO1xufTtcbmNvbnN0IGlzU1ZHQ29udGFpbmVyID0gKGNvbnRhaW5lcikgPT4gY29udGFpbmVyLm5hbWVzcGFjZVVSSS5pbmNsdWRlcyhcInN2Z1wiKSAmJiBjb250YWluZXIudGFnTmFtZSAhPT0gXCJmb3JlaWduT2JqZWN0XCI7XG5jb25zdCBpc01hdGhNTENvbnRhaW5lciA9IChjb250YWluZXIpID0+IGNvbnRhaW5lci5uYW1lc3BhY2VVUkkuaW5jbHVkZXMoXCJNYXRoTUxcIik7XG5jb25zdCBnZXRDb250YWluZXJUeXBlID0gKGNvbnRhaW5lcikgPT4ge1xuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlICE9PSAxKSByZXR1cm4gdm9pZCAwO1xuICBpZiAoaXNTVkdDb250YWluZXIoY29udGFpbmVyKSkgcmV0dXJuIFwic3ZnXCI7XG4gIGlmIChpc01hdGhNTENvbnRhaW5lcihjb250YWluZXIpKSByZXR1cm4gXCJtYXRobWxcIjtcbiAgcmV0dXJuIHZvaWQgMDtcbn07XG5jb25zdCBpc0NvbW1lbnQgPSAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gODtcbmZ1bmN0aW9uIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyhyZW5kZXJlckludGVybmFscykge1xuICBjb25zdCB7XG4gICAgbXQ6IG1vdW50Q29tcG9uZW50LFxuICAgIHA6IHBhdGNoLFxuICAgIG86IHtcbiAgICAgIHBhdGNoUHJvcCxcbiAgICAgIGNyZWF0ZVRleHQsXG4gICAgICBuZXh0U2libGluZyxcbiAgICAgIHBhcmVudE5vZGUsXG4gICAgICByZW1vdmUsXG4gICAgICBpbnNlcnQsXG4gICAgICBjcmVhdGVDb21tZW50XG4gICAgfVxuICB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XG4gIGNvbnN0IGh5ZHJhdGUgPSAodm5vZGUsIGNvbnRhaW5lcikgPT4ge1xuICAgIGlmICghY29udGFpbmVyLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgQXR0ZW1wdGluZyB0byBoeWRyYXRlIGV4aXN0aW5nIG1hcmt1cCBidXQgY29udGFpbmVyIGlzIGVtcHR5LiBQZXJmb3JtaW5nIGZ1bGwgbW91bnQgaW5zdGVhZC5gXG4gICAgICApO1xuICAgICAgcGF0Y2gobnVsbCwgdm5vZGUsIGNvbnRhaW5lcik7XG4gICAgICBmbHVzaFBvc3RGbHVzaENicygpO1xuICAgICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBoeWRyYXRlTm9kZShjb250YWluZXIuZmlyc3RDaGlsZCwgdm5vZGUsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XG4gICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xuICB9O1xuICBjb25zdCBoeWRyYXRlTm9kZSA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xuICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXZub2RlLmR5bmFtaWNDaGlsZHJlbjtcbiAgICBjb25zdCBpc0ZyYWdtZW50U3RhcnQgPSBpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSBcIltcIjtcbiAgICBjb25zdCBvbk1pc21hdGNoID0gKCkgPT4gaGFuZGxlTWlzbWF0Y2goXG4gICAgICBub2RlLFxuICAgICAgdm5vZGUsXG4gICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgIGlzRnJhZ21lbnRTdGFydFxuICAgICk7XG4gICAgY29uc3QgeyB0eXBlLCByZWYsIHNoYXBlRmxhZywgcGF0Y2hGbGFnIH0gPSB2bm9kZTtcbiAgICBsZXQgZG9tVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgdm5vZGUuZWwgPSBub2RlO1xuICAgIHtcbiAgICAgIGRlZihub2RlLCBcIl9fdm5vZGVcIiwgdm5vZGUsIHRydWUpO1xuICAgICAgZGVmKG5vZGUsIFwiX192dWVQYXJlbnRDb21wb25lbnRcIiwgcGFyZW50Q29tcG9uZW50LCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKHBhdGNoRmxhZyA9PT0gLTIpIHtcbiAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xuICAgICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcbiAgICB9XG4gICAgbGV0IG5leHROb2RlID0gbnVsbDtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgVGV4dDpcbiAgICAgICAgaWYgKGRvbVR5cGUgIT09IDMpIHtcbiAgICAgICAgICBpZiAodm5vZGUuY2hpbGRyZW4gPT09IFwiXCIpIHtcbiAgICAgICAgICAgIGluc2VydCh2bm9kZS5lbCA9IGNyZWF0ZVRleHQoXCJcIiksIHBhcmVudE5vZGUobm9kZSksIG5vZGUpO1xuICAgICAgICAgICAgbmV4dE5vZGUgPSBub2RlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG5vZGUuZGF0YSAhPT0gdm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYEh5ZHJhdGlvbiB0ZXh0IG1pc21hdGNoIGluYCxcbiAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICBgXG4gIC0gcmVuZGVyZWQgb24gc2VydmVyOiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIG5vZGUuZGF0YVxuICAgICAgICAgICAgICApfVxuICAtIGV4cGVjdGVkIG9uIGNsaWVudDogJHtKU09OLnN0cmluZ2lmeSh2bm9kZS5jaGlsZHJlbil9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgICAgIG5vZGUuZGF0YSA9IHZub2RlLmNoaWxkcmVuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDb21tZW50OlxuICAgICAgICBpZiAoaXNUZW1wbGF0ZU5vZGUobm9kZSkpIHtcbiAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgIHJlcGxhY2VOb2RlKFxuICAgICAgICAgICAgdm5vZGUuZWwgPSBub2RlLmNvbnRlbnQuZmlyc3RDaGlsZCxcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKGRvbVR5cGUgIT09IDggfHwgaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU3RhdGljOlxuICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgbm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgIGRvbVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb21UeXBlID09PSAxIHx8IGRvbVR5cGUgPT09IDMpIHtcbiAgICAgICAgICBuZXh0Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgY29uc3QgbmVlZFRvQWRvcHRDb250ZW50ID0gIXZub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZub2RlLnN0YXRpY0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChuZWVkVG9BZG9wdENvbnRlbnQpXG4gICAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuICs9IG5leHROb2RlLm5vZGVUeXBlID09PSAxID8gbmV4dE5vZGUub3V0ZXJIVE1MIDogbmV4dE5vZGUuZGF0YTtcbiAgICAgICAgICAgIGlmIChpID09PSB2bm9kZS5zdGF0aWNDb3VudCAtIDEpIHtcbiAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gbmV4dE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5leHROb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGlzRnJhZ21lbnRTdGFydCA/IG5leHRTaWJsaW5nKG5leHROb2RlKSA6IG5leHROb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uTWlzbWF0Y2goKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgICAgIGlmICghaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBoeWRyYXRlRnJhZ21lbnQoXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSkge1xuICAgICAgICAgIGlmICgoZG9tVHlwZSAhPT0gMSB8fCB2bm9kZS50eXBlLnRvTG93ZXJDYXNlKCkgIT09IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSAmJiAhaXNUZW1wbGF0ZU5vZGUobm9kZSkpIHtcbiAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IGh5ZHJhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDYpIHtcbiAgICAgICAgICB2bm9kZS5zbG90U2NvcGVJZHMgPSBzbG90U2NvcGVJZHM7XG4gICAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcbiAgICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IGxvY2F0ZUNsb3NpbmdBbmNob3Iobm9kZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSBcInRlbGVwb3J0IHN0YXJ0XCIpIHtcbiAgICAgICAgICAgIG5leHROb2RlID0gbG9jYXRlQ2xvc2luZ0FuY2hvcihub2RlLCBub2RlLmRhdGEsIFwidGVsZXBvcnQgZW5kXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtb3VudENvbXBvbmVudChcbiAgICAgICAgICAgIHZub2RlLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgZ2V0Q29udGFpbmVyVHlwZShjb250YWluZXIpLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoaXNBc3luY1dyYXBwZXIodm5vZGUpICYmICF2bm9kZS50eXBlLl9fYXN5bmNSZXNvbHZlZCkge1xuICAgICAgICAgICAgbGV0IHN1YlRyZWU7XG4gICAgICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgICAgIHN1YlRyZWUgPSBjcmVhdGVWTm9kZShGcmFnbWVudCk7XG4gICAgICAgICAgICAgIHN1YlRyZWUuYW5jaG9yID0gbmV4dE5vZGUgPyBuZXh0Tm9kZS5wcmV2aW91c1NpYmxpbmcgOiBjb250YWluZXIubGFzdENoaWxkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3ViVHJlZSA9IG5vZGUubm9kZVR5cGUgPT09IDMgPyBjcmVhdGVUZXh0Vk5vZGUoXCJcIikgOiBjcmVhdGVWTm9kZShcImRpdlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YlRyZWUuZWwgPSBub2RlO1xuICAgICAgICAgICAgdm5vZGUuY29tcG9uZW50LnN1YlRyZWUgPSBzdWJUcmVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCkge1xuICAgICAgICAgIGlmIChkb21UeXBlICE9PSA4KSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dE5vZGUgPSB2bm9kZS50eXBlLmh5ZHJhdGUoXG4gICAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICAgIHZub2RlLFxuICAgICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICAgIG9wdGltaXplZCxcbiAgICAgICAgICAgICAgcmVuZGVyZXJJbnRlcm5hbHMsXG4gICAgICAgICAgICAgIGh5ZHJhdGVDaGlsZHJlblxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSB2bm9kZS50eXBlLmh5ZHJhdGUoXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIGdldENvbnRhaW5lclR5cGUocGFyZW50Tm9kZShub2RlKSksXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWQsXG4gICAgICAgICAgICByZW5kZXJlckludGVybmFscyxcbiAgICAgICAgICAgIGh5ZHJhdGVOb2RlXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuJDEoXCJJbnZhbGlkIEhvc3RWTm9kZSB0eXBlOlwiLCB0eXBlLCBgKCR7dHlwZW9mIHR5cGV9KWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgc2V0UmVmKHJlZiwgbnVsbCwgcGFyZW50U3VzcGVuc2UsIHZub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHROb2RlO1xuICB9O1xuICBjb25zdCBoeWRyYXRlRWxlbWVudCA9IChlbCwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgb3B0aW1pemVkID0gb3B0aW1pemVkIHx8ICEhdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xuICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHBhdGNoRmxhZywgc2hhcGVGbGFnLCBkaXJzLCB0cmFuc2l0aW9uIH0gPSB2bm9kZTtcbiAgICBjb25zdCBmb3JjZVBhdGNoID0gdHlwZSA9PT0gXCJpbnB1dFwiIHx8IHR5cGUgPT09IFwib3B0aW9uXCI7XG4gICAge1xuICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcImNyZWF0ZWRcIik7XG4gICAgICB9XG4gICAgICBsZXQgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSBmYWxzZTtcbiAgICAgIGlmIChpc1RlbXBsYXRlTm9kZShlbCkpIHtcbiAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSBuZWVkVHJhbnNpdGlvbihcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIC8vIG5vIG5lZWQgY2hlY2sgcGFyZW50U3VzcGVuc2UgaW4gaHlkcmF0aW9uXG4gICAgICAgICAgdHJhbnNpdGlvblxuICAgICAgICApICYmIHBhcmVudENvbXBvbmVudCAmJiBwYXJlbnRDb21wb25lbnQudm5vZGUucHJvcHMgJiYgcGFyZW50Q29tcG9uZW50LnZub2RlLnByb3BzLmFwcGVhcjtcbiAgICAgICAgY29uc3QgY29udGVudCA9IGVsLmNvbnRlbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXBsYWNlTm9kZShjb250ZW50LCBlbCwgcGFyZW50Q29tcG9uZW50KTtcbiAgICAgICAgdm5vZGUuZWwgPSBlbCA9IGNvbnRlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoc2hhcGVGbGFnICYgMTYgJiYgLy8gc2tpcCBpZiBlbGVtZW50IGhhcyBpbm5lckhUTUwgLyB0ZXh0Q29udGVudFxuICAgICAgIShwcm9wcyAmJiAocHJvcHMuaW5uZXJIVE1MIHx8IHByb3BzLnRleHRDb250ZW50KSkpIHtcbiAgICAgICAgbGV0IG5leHQgPSBoeWRyYXRlQ2hpbGRyZW4oXG4gICAgICAgICAgZWwuZmlyc3RDaGlsZCxcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBlbCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICBsZXQgaGFzV2FybmVkID0gZmFsc2U7XG4gICAgICAgIHdoaWxlIChuZXh0KSB7XG4gICAgICAgICAgaWYgKCFpc01pc21hdGNoQWxsb3dlZChlbCwgMSAvKiBDSElMRFJFTiAqLykpIHtcbiAgICAgICAgICAgIGlmICghaGFzV2FybmVkKSB7XG4gICAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgICBgSHlkcmF0aW9uIGNoaWxkcmVuIG1pc21hdGNoIG9uYCxcbiAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICBgXG5TZXJ2ZXIgcmVuZGVyZWQgZWxlbWVudCBjb250YWlucyBtb3JlIGNoaWxkIG5vZGVzIHRoYW4gY2xpZW50IHZkb20uYFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBoYXNXYXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nTWlzbWF0Y2hFcnJvcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBjdXIgPSBuZXh0O1xuICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xuICAgICAgICAgIHJlbW92ZShjdXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDgpIHtcbiAgICAgICAgbGV0IGNsaWVudFRleHQgPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgICAgaWYgKGNsaWVudFRleHRbMF0gPT09IFwiXFxuXCIgJiYgKGVsLnRhZ05hbWUgPT09IFwiUFJFXCIgfHwgZWwudGFnTmFtZSA9PT0gXCJURVhUQVJFQVwiKSkge1xuICAgICAgICAgIGNsaWVudFRleHQgPSBjbGllbnRUZXh0LnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbC50ZXh0Q29udGVudCAhPT0gY2xpZW50VGV4dCkge1xuICAgICAgICAgIGlmICghaXNNaXNtYXRjaEFsbG93ZWQoZWwsIDAgLyogVEVYVCAqLykpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYEh5ZHJhdGlvbiB0ZXh0IGNvbnRlbnQgbWlzbWF0Y2ggb25gLFxuICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgYFxuICAtIHJlbmRlcmVkIG9uIHNlcnZlcjogJHtlbC50ZXh0Q29udGVudH1cbiAgLSBleHBlY3RlZCBvbiBjbGllbnQ6ICR7dm5vZGUuY2hpbGRyZW59YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWwudGV4dENvbnRlbnQgPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBpc0N1c3RvbUVsZW1lbnQgPSBlbC50YWdOYW1lLmluY2x1ZGVzKFwiLVwiKTtcbiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICAgICAgaWYgKC8vICMxMTE4OSBza2lwIGlmIHRoaXMgbm9kZSBoYXMgZGlyZWN0aXZlcyB0aGF0IGhhdmUgY3JlYXRlZCBob29rc1xuICAgICAgICAgICAgLy8gYXMgaXQgY291bGQgaGF2ZSBtdXRhdGVkIHRoZSBET00gaW4gYW55IHBvc3NpYmxlIHdheVxuICAgICAgICAgICAgIShkaXJzICYmIGRpcnMuc29tZSgoZCkgPT4gZC5kaXIuY3JlYXRlZCkpICYmIHByb3BIYXNNaXNtYXRjaChlbCwga2V5LCBwcm9wc1trZXldLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50KSkge1xuICAgICAgICAgICAgICBsb2dNaXNtYXRjaEVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm9yY2VQYXRjaCAmJiAoa2V5LmVuZHNXaXRoKFwidmFsdWVcIikgfHwga2V5ID09PSBcImluZGV0ZXJtaW5hdGVcIikgfHwgaXNPbihrZXkpICYmICFpc1Jlc2VydmVkUHJvcChrZXkpIHx8IC8vIGZvcmNlIGh5ZHJhdGUgdi1iaW5kIHdpdGggLnByb3AgbW9kaWZpZXJzXG4gICAgICAgICAgICBrZXlbMF0gPT09IFwiLlwiIHx8IGlzQ3VzdG9tRWxlbWVudCkge1xuICAgICAgICAgICAgICBwYXRjaFByb3AoZWwsIGtleSwgbnVsbCwgcHJvcHNba2V5XSwgdm9pZCAwLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IHZub2RlSG9va3M7XG4gICAgICBpZiAodm5vZGVIb29rcyA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkge1xuICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rcywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICB9XG4gICAgICBpZiAoZGlycykge1xuICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIFwiYmVmb3JlTW91bnRcIik7XG4gICAgICB9XG4gICAgICBpZiAoKHZub2RlSG9va3MgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkgfHwgZGlycyB8fCBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcykge1xuICAgICAgICBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSgoKSA9PiB7XG4gICAgICAgICAgdm5vZGVIb29rcyAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rcywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgJiYgdHJhbnNpdGlvbi5lbnRlcihlbCk7XG4gICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIFwibW91bnRlZFwiKTtcbiAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWwubmV4dFNpYmxpbmc7XG4gIH07XG4gIGNvbnN0IGh5ZHJhdGVDaGlsZHJlbiA9IChub2RlLCBwYXJlbnRWTm9kZSwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXBhcmVudFZOb2RlLmR5bmFtaWNDaGlsZHJlbjtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHBhcmVudFZOb2RlLmNoaWxkcmVuO1xuICAgIGNvbnN0IGwgPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgbGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCB2bm9kZSA9IG9wdGltaXplZCA/IGNoaWxkcmVuW2ldIDogY2hpbGRyZW5baV0gPSBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpXSk7XG4gICAgICBjb25zdCBpc1RleHQgPSB2bm9kZS50eXBlID09PSBUZXh0O1xuICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgaWYgKGlzVGV4dCAmJiAhb3B0aW1pemVkKSB7XG4gICAgICAgICAgaWYgKGkgKyAxIDwgbCAmJiBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpICsgMV0pLnR5cGUgPT09IFRleHQpIHtcbiAgICAgICAgICAgIGluc2VydChcbiAgICAgICAgICAgICAgY3JlYXRlVGV4dChcbiAgICAgICAgICAgICAgICBub2RlLmRhdGEuc2xpY2Uodm5vZGUuY2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICAgIG5leHRTaWJsaW5nKG5vZGUpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbm9kZS5kYXRhID0gdm5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBoeWRyYXRlTm9kZShcbiAgICAgICAgICBub2RlLFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGlzVGV4dCAmJiAhdm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgaW5zZXJ0KHZub2RlLmVsID0gY3JlYXRlVGV4dChcIlwiKSwgY29udGFpbmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaXNNaXNtYXRjaEFsbG93ZWQoY29udGFpbmVyLCAxIC8qIENISUxEUkVOICovKSkge1xuICAgICAgICAgIGlmICghaGFzV2FybmVkKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIGBIeWRyYXRpb24gY2hpbGRyZW4gbWlzbWF0Y2ggb25gLFxuICAgICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICAgIGBcblNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIGZld2VyIGNoaWxkIG5vZGVzIHRoYW4gY2xpZW50IHZkb20uYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBwYXRjaChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBnZXRDb250YWluZXJUeXBlKGNvbnRhaW5lciksXG4gICAgICAgICAgc2xvdFNjb3BlSWRzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9O1xuICBjb25zdCBoeWRyYXRlRnJhZ21lbnQgPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgY29uc3QgeyBzbG90U2NvcGVJZHM6IGZyYWdtZW50U2xvdFNjb3BlSWRzIH0gPSB2bm9kZTtcbiAgICBpZiAoZnJhZ21lbnRTbG90U2NvcGVJZHMpIHtcbiAgICAgIHNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkcyA/IHNsb3RTY29wZUlkcy5jb25jYXQoZnJhZ21lbnRTbG90U2NvcGVJZHMpIDogZnJhZ21lbnRTbG90U2NvcGVJZHM7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XG4gICAgY29uc3QgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihcbiAgICAgIG5leHRTaWJsaW5nKG5vZGUpLFxuICAgICAgdm5vZGUsXG4gICAgICBjb250YWluZXIsXG4gICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgIG9wdGltaXplZFxuICAgICk7XG4gICAgaWYgKG5leHQgJiYgaXNDb21tZW50KG5leHQpICYmIG5leHQuZGF0YSA9PT0gXCJdXCIpIHtcbiAgICAgIHJldHVybiBuZXh0U2libGluZyh2bm9kZS5hbmNob3IgPSBuZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nTWlzbWF0Y2hFcnJvcigpO1xuICAgICAgaW5zZXJ0KHZub2RlLmFuY2hvciA9IGNyZWF0ZUNvbW1lbnQoYF1gKSwgY29udGFpbmVyLCBuZXh0KTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlTWlzbWF0Y2ggPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgaXNGcmFnbWVudCkgPT4ge1xuICAgIGlmICghaXNNaXNtYXRjaEFsbG93ZWQobm9kZS5wYXJlbnRFbGVtZW50LCAxIC8qIENISUxEUkVOICovKSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgSHlkcmF0aW9uIG5vZGUgbWlzbWF0Y2g6XG4tIHJlbmRlcmVkIG9uIHNlcnZlcjpgLFxuICAgICAgICBub2RlLFxuICAgICAgICBub2RlLm5vZGVUeXBlID09PSAzID8gYCh0ZXh0KWAgOiBpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSBcIltcIiA/IGAoc3RhcnQgb2YgZnJhZ21lbnQpYCA6IGBgLFxuICAgICAgICBgXG4tIGV4cGVjdGVkIG9uIGNsaWVudDpgLFxuICAgICAgICB2bm9kZS50eXBlXG4gICAgICApO1xuICAgICAgbG9nTWlzbWF0Y2hFcnJvcigpO1xuICAgIH1cbiAgICB2bm9kZS5lbCA9IG51bGw7XG4gICAgaWYgKGlzRnJhZ21lbnQpIHtcbiAgICAgIGNvbnN0IGVuZCA9IGxvY2F0ZUNsb3NpbmdBbmNob3Iobm9kZSk7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCBuZXh0MiA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICBpZiAobmV4dDIgJiYgbmV4dDIgIT09IGVuZCkge1xuICAgICAgICAgIHJlbW92ZShuZXh0Mik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbmV4dCA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XG4gICAgcmVtb3ZlKG5vZGUpO1xuICAgIHBhdGNoKFxuICAgICAgbnVsbCxcbiAgICAgIHZub2RlLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgbmV4dCxcbiAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgZ2V0Q29udGFpbmVyVHlwZShjb250YWluZXIpLFxuICAgICAgc2xvdFNjb3BlSWRzXG4gICAgKTtcbiAgICBpZiAocGFyZW50Q29tcG9uZW50KSB7XG4gICAgICBwYXJlbnRDb21wb25lbnQudm5vZGUuZWwgPSB2bm9kZS5lbDtcbiAgICAgIHVwZGF0ZUhPQ0hvc3RFbChwYXJlbnRDb21wb25lbnQsIHZub2RlLmVsKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQ7XG4gIH07XG4gIGNvbnN0IGxvY2F0ZUNsb3NpbmdBbmNob3IgPSAobm9kZSwgb3BlbiA9IFwiW1wiLCBjbG9zZSA9IFwiXVwiKSA9PiB7XG4gICAgbGV0IG1hdGNoID0gMDtcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgbm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgaWYgKG5vZGUgJiYgaXNDb21tZW50KG5vZGUpKSB7XG4gICAgICAgIGlmIChub2RlLmRhdGEgPT09IG9wZW4pIG1hdGNoKys7XG4gICAgICAgIGlmIChub2RlLmRhdGEgPT09IGNsb3NlKSB7XG4gICAgICAgICAgaWYgKG1hdGNoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1hdGNoLS07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9O1xuICBjb25zdCByZXBsYWNlTm9kZSA9IChuZXdOb2RlLCBvbGROb2RlLCBwYXJlbnRDb21wb25lbnQpID0+IHtcbiAgICBjb25zdCBwYXJlbnROb2RlMiA9IG9sZE5vZGUucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50Tm9kZTIpIHtcbiAgICAgIHBhcmVudE5vZGUyLnJlcGxhY2VDaGlsZChuZXdOb2RlLCBvbGROb2RlKTtcbiAgICB9XG4gICAgbGV0IHBhcmVudCA9IHBhcmVudENvbXBvbmVudDtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LnZub2RlLmVsID09PSBvbGROb2RlKSB7XG4gICAgICAgIHBhcmVudC52bm9kZS5lbCA9IHBhcmVudC5zdWJUcmVlLmVsID0gbmV3Tm9kZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICB9O1xuICBjb25zdCBpc1RlbXBsYXRlTm9kZSA9IChub2RlKSA9PiB7XG4gICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgbm9kZS50YWdOYW1lID09PSBcIlRFTVBMQVRFXCI7XG4gIH07XG4gIHJldHVybiBbaHlkcmF0ZSwgaHlkcmF0ZU5vZGVdO1xufVxuZnVuY3Rpb24gcHJvcEhhc01pc21hdGNoKGVsLCBrZXksIGNsaWVudFZhbHVlLCB2bm9kZSwgaW5zdGFuY2UpIHtcbiAgbGV0IG1pc21hdGNoVHlwZTtcbiAgbGV0IG1pc21hdGNoS2V5O1xuICBsZXQgYWN0dWFsO1xuICBsZXQgZXhwZWN0ZWQ7XG4gIGlmIChrZXkgPT09IFwiY2xhc3NcIikge1xuICAgIGFjdHVhbCA9IGVsLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpO1xuICAgIGV4cGVjdGVkID0gbm9ybWFsaXplQ2xhc3MoY2xpZW50VmFsdWUpO1xuICAgIGlmICghaXNTZXRFcXVhbCh0b0NsYXNzU2V0KGFjdHVhbCB8fCBcIlwiKSwgdG9DbGFzc1NldChleHBlY3RlZCkpKSB7XG4gICAgICBtaXNtYXRjaFR5cGUgPSAyIC8qIENMQVNTICovO1xuICAgICAgbWlzbWF0Y2hLZXkgPSBgY2xhc3NgO1xuICAgIH1cbiAgfSBlbHNlIGlmIChrZXkgPT09IFwic3R5bGVcIikge1xuICAgIGFjdHVhbCA9IGVsLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpIHx8IFwiXCI7XG4gICAgZXhwZWN0ZWQgPSBpc1N0cmluZyhjbGllbnRWYWx1ZSkgPyBjbGllbnRWYWx1ZSA6IHN0cmluZ2lmeVN0eWxlKG5vcm1hbGl6ZVN0eWxlKGNsaWVudFZhbHVlKSk7XG4gICAgY29uc3QgYWN0dWFsTWFwID0gdG9TdHlsZU1hcChhY3R1YWwpO1xuICAgIGNvbnN0IGV4cGVjdGVkTWFwID0gdG9TdHlsZU1hcChleHBlY3RlZCk7XG4gICAgaWYgKHZub2RlLmRpcnMpIHtcbiAgICAgIGZvciAoY29uc3QgeyBkaXIsIHZhbHVlIH0gb2Ygdm5vZGUuZGlycykge1xuICAgICAgICBpZiAoZGlyLm5hbWUgPT09IFwic2hvd1wiICYmICF2YWx1ZSkge1xuICAgICAgICAgIGV4cGVjdGVkTWFwLnNldChcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgcmVzb2x2ZUNzc1ZhcnMoaW5zdGFuY2UsIHZub2RlLCBleHBlY3RlZE1hcCk7XG4gICAgfVxuICAgIGlmICghaXNNYXBFcXVhbChhY3R1YWxNYXAsIGV4cGVjdGVkTWFwKSkge1xuICAgICAgbWlzbWF0Y2hUeXBlID0gMyAvKiBTVFlMRSAqLztcbiAgICAgIG1pc21hdGNoS2V5ID0gXCJzdHlsZVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChlbCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQgJiYgaXNLbm93blN2Z0F0dHIoa2V5KSB8fCBlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIChpc0Jvb2xlYW5BdHRyKGtleSkgfHwgaXNLbm93bkh0bWxBdHRyKGtleSkpKSB7XG4gICAgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgICAgYWN0dWFsID0gZWwuaGFzQXR0cmlidXRlKGtleSk7XG4gICAgICBleHBlY3RlZCA9IGluY2x1ZGVCb29sZWFuQXR0cihjbGllbnRWYWx1ZSk7XG4gICAgfSBlbHNlIGlmIChjbGllbnRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICBhY3R1YWwgPSBlbC5oYXNBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIGV4cGVjdGVkID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChlbC5oYXNBdHRyaWJ1dGUoa2V5KSkge1xuICAgICAgICBhY3R1YWwgPSBlbC5nZXRBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcInZhbHVlXCIgJiYgZWwudGFnTmFtZSA9PT0gXCJURVhUQVJFQVwiKSB7XG4gICAgICAgIGFjdHVhbCA9IGVsLnZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0dWFsID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBleHBlY3RlZCA9IGlzUmVuZGVyYWJsZUF0dHJWYWx1ZShjbGllbnRWYWx1ZSkgPyBTdHJpbmcoY2xpZW50VmFsdWUpIDogZmFsc2U7XG4gICAgfVxuICAgIGlmIChhY3R1YWwgIT09IGV4cGVjdGVkKSB7XG4gICAgICBtaXNtYXRjaFR5cGUgPSA0IC8qIEFUVFJJQlVURSAqLztcbiAgICAgIG1pc21hdGNoS2V5ID0ga2V5O1xuICAgIH1cbiAgfVxuICBpZiAobWlzbWF0Y2hUeXBlICE9IG51bGwgJiYgIWlzTWlzbWF0Y2hBbGxvd2VkKGVsLCBtaXNtYXRjaFR5cGUpKSB7XG4gICAgY29uc3QgZm9ybWF0ID0gKHYpID0+IHYgPT09IGZhbHNlID8gYChub3QgcmVuZGVyZWQpYCA6IGAke21pc21hdGNoS2V5fT1cIiR7dn1cImA7XG4gICAgY29uc3QgcHJlU2VnbWVudCA9IGBIeWRyYXRpb24gJHtNaXNtYXRjaFR5cGVTdHJpbmdbbWlzbWF0Y2hUeXBlXX0gbWlzbWF0Y2ggb25gO1xuICAgIGNvbnN0IHBvc3RTZWdtZW50ID0gYFxuICAtIHJlbmRlcmVkIG9uIHNlcnZlcjogJHtmb3JtYXQoYWN0dWFsKX1cbiAgLSBleHBlY3RlZCBvbiBjbGllbnQ6ICR7Zm9ybWF0KGV4cGVjdGVkKX1cbiAgTm90ZTogdGhpcyBtaXNtYXRjaCBpcyBjaGVjay1vbmx5LiBUaGUgRE9NIHdpbGwgbm90IGJlIHJlY3RpZmllZCBpbiBwcm9kdWN0aW9uIGR1ZSB0byBwZXJmb3JtYW5jZSBvdmVyaGVhZC5cbiAgWW91IHNob3VsZCBmaXggdGhlIHNvdXJjZSBvZiB0aGUgbWlzbWF0Y2guYDtcbiAgICB7XG4gICAgICB3YXJuJDEocHJlU2VnbWVudCwgZWwsIHBvc3RTZWdtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gdG9DbGFzc1NldChzdHIpIHtcbiAgcmV0dXJuIG5ldyBTZXQoc3RyLnRyaW0oKS5zcGxpdCgvXFxzKy8pKTtcbn1cbmZ1bmN0aW9uIGlzU2V0RXF1YWwoYSwgYikge1xuICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChjb25zdCBzIG9mIGEpIHtcbiAgICBpZiAoIWIuaGFzKHMpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gdG9TdHlsZU1hcChzdHIpIHtcbiAgY29uc3Qgc3R5bGVNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc3RyLnNwbGl0KFwiO1wiKSkge1xuICAgIGxldCBba2V5LCB2YWx1ZV0gPSBpdGVtLnNwbGl0KFwiOlwiKTtcbiAgICBrZXkgPSBrZXkudHJpbSgpO1xuICAgIHZhbHVlID0gdmFsdWUgJiYgdmFsdWUudHJpbSgpO1xuICAgIGlmIChrZXkgJiYgdmFsdWUpIHtcbiAgICAgIHN0eWxlTWFwLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0eWxlTWFwO1xufVxuZnVuY3Rpb24gaXNNYXBFcXVhbChhLCBiKSB7XG4gIGlmIChhLnNpemUgIT09IGIuc2l6ZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBhKSB7XG4gICAgaWYgKHZhbHVlICE9PSBiLmdldChrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUNzc1ZhcnMoaW5zdGFuY2UsIHZub2RlLCBleHBlY3RlZE1hcCkge1xuICBjb25zdCByb290ID0gaW5zdGFuY2Uuc3ViVHJlZTtcbiAgaWYgKGluc3RhbmNlLmdldENzc1ZhcnMgJiYgKHZub2RlID09PSByb290IHx8IHJvb3QgJiYgcm9vdC50eXBlID09PSBGcmFnbWVudCAmJiByb290LmNoaWxkcmVuLmluY2x1ZGVzKHZub2RlKSkpIHtcbiAgICBjb25zdCBjc3NWYXJzID0gaW5zdGFuY2UuZ2V0Q3NzVmFycygpO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGNzc1ZhcnMpIHtcbiAgICAgIGV4cGVjdGVkTWFwLnNldChcbiAgICAgICAgYC0tJHtnZXRFc2NhcGVkQ3NzVmFyTmFtZShrZXkpfWAsXG4gICAgICAgIFN0cmluZyhjc3NWYXJzW2tleV0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAodm5vZGUgPT09IHJvb3QgJiYgaW5zdGFuY2UucGFyZW50KSB7XG4gICAgcmVzb2x2ZUNzc1ZhcnMoaW5zdGFuY2UucGFyZW50LCBpbnN0YW5jZS52bm9kZSwgZXhwZWN0ZWRNYXApO1xuICB9XG59XG5jb25zdCBhbGxvd01pc21hdGNoQXR0ciA9IFwiZGF0YS1hbGxvdy1taXNtYXRjaFwiO1xuY29uc3QgTWlzbWF0Y2hUeXBlU3RyaW5nID0ge1xuICBbMCAvKiBURVhUICovXTogXCJ0ZXh0XCIsXG4gIFsxIC8qIENISUxEUkVOICovXTogXCJjaGlsZHJlblwiLFxuICBbMiAvKiBDTEFTUyAqL106IFwiY2xhc3NcIixcbiAgWzMgLyogU1RZTEUgKi9dOiBcInN0eWxlXCIsXG4gIFs0IC8qIEFUVFJJQlVURSAqL106IFwiYXR0cmlidXRlXCJcbn07XG5mdW5jdGlvbiBpc01pc21hdGNoQWxsb3dlZChlbCwgYWxsb3dlZFR5cGUpIHtcbiAgaWYgKGFsbG93ZWRUeXBlID09PSAwIC8qIFRFWFQgKi8gfHwgYWxsb3dlZFR5cGUgPT09IDEgLyogQ0hJTERSRU4gKi8pIHtcbiAgICB3aGlsZSAoZWwgJiYgIWVsLmhhc0F0dHJpYnV0ZShhbGxvd01pc21hdGNoQXR0cikpIHtcbiAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgICB9XG4gIH1cbiAgY29uc3QgYWxsb3dlZEF0dHIgPSBlbCAmJiBlbC5nZXRBdHRyaWJ1dGUoYWxsb3dNaXNtYXRjaEF0dHIpO1xuICBpZiAoYWxsb3dlZEF0dHIgPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChhbGxvd2VkQXR0ciA9PT0gXCJcIikge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGxpc3QgPSBhbGxvd2VkQXR0ci5zcGxpdChcIixcIik7XG4gICAgaWYgKGFsbG93ZWRUeXBlID09PSAwIC8qIFRFWFQgKi8gJiYgbGlzdC5pbmNsdWRlcyhcImNoaWxkcmVuXCIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFsbG93ZWRBdHRyLnNwbGl0KFwiLFwiKS5pbmNsdWRlcyhNaXNtYXRjaFR5cGVTdHJpbmdbYWxsb3dlZFR5cGVdKTtcbiAgfVxufVxuXG5jb25zdCByZXF1ZXN0SWRsZUNhbGxiYWNrID0gZ2V0R2xvYmFsVGhpcygpLnJlcXVlc3RJZGxlQ2FsbGJhY2sgfHwgKChjYikgPT4gc2V0VGltZW91dChjYiwgMSkpO1xuY29uc3QgY2FuY2VsSWRsZUNhbGxiYWNrID0gZ2V0R2xvYmFsVGhpcygpLmNhbmNlbElkbGVDYWxsYmFjayB8fCAoKGlkKSA9PiBjbGVhclRpbWVvdXQoaWQpKTtcbmNvbnN0IGh5ZHJhdGVPbklkbGUgPSAodGltZW91dCA9IDFlNCkgPT4gKGh5ZHJhdGUpID0+IHtcbiAgY29uc3QgaWQgPSByZXF1ZXN0SWRsZUNhbGxiYWNrKGh5ZHJhdGUsIHsgdGltZW91dCB9KTtcbiAgcmV0dXJuICgpID0+IGNhbmNlbElkbGVDYWxsYmFjayhpZCk7XG59O1xuZnVuY3Rpb24gZWxlbWVudElzVmlzaWJsZUluVmlld3BvcnQoZWwpIHtcbiAgY29uc3QgeyB0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQgfSA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCB7IGlubmVySGVpZ2h0LCBpbm5lcldpZHRoIH0gPSB3aW5kb3c7XG4gIHJldHVybiAodG9wID4gMCAmJiB0b3AgPCBpbm5lckhlaWdodCB8fCBib3R0b20gPiAwICYmIGJvdHRvbSA8IGlubmVySGVpZ2h0KSAmJiAobGVmdCA+IDAgJiYgbGVmdCA8IGlubmVyV2lkdGggfHwgcmlnaHQgPiAwICYmIHJpZ2h0IDwgaW5uZXJXaWR0aCk7XG59XG5jb25zdCBoeWRyYXRlT25WaXNpYmxlID0gKG9wdHMpID0+IChoeWRyYXRlLCBmb3JFYWNoKSA9PiB7XG4gIGNvbnN0IG9iID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzKSA9PiB7XG4gICAgZm9yIChjb25zdCBlIG9mIGVudHJpZXMpIHtcbiAgICAgIGlmICghZS5pc0ludGVyc2VjdGluZykgY29udGludWU7XG4gICAgICBvYi5kaXNjb25uZWN0KCk7XG4gICAgICBoeWRyYXRlKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0sIG9wdHMpO1xuICBmb3JFYWNoKChlbCkgPT4ge1xuICAgIGlmICghKGVsIGluc3RhbmNlb2YgRWxlbWVudCkpIHJldHVybjtcbiAgICBpZiAoZWxlbWVudElzVmlzaWJsZUluVmlld3BvcnQoZWwpKSB7XG4gICAgICBoeWRyYXRlKCk7XG4gICAgICBvYi5kaXNjb25uZWN0KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iLm9ic2VydmUoZWwpO1xuICB9KTtcbiAgcmV0dXJuICgpID0+IG9iLmRpc2Nvbm5lY3QoKTtcbn07XG5jb25zdCBoeWRyYXRlT25NZWRpYVF1ZXJ5ID0gKHF1ZXJ5KSA9PiAoaHlkcmF0ZSkgPT4ge1xuICBpZiAocXVlcnkpIHtcbiAgICBjb25zdCBtcWwgPSBtYXRjaE1lZGlhKHF1ZXJ5KTtcbiAgICBpZiAobXFsLm1hdGNoZXMpIHtcbiAgICAgIGh5ZHJhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbXFsLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgaHlkcmF0ZSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuICgpID0+IG1xbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGh5ZHJhdGUpO1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IGh5ZHJhdGVPbkludGVyYWN0aW9uID0gKGludGVyYWN0aW9ucyA9IFtdKSA9PiAoaHlkcmF0ZSwgZm9yRWFjaCkgPT4ge1xuICBpZiAoaXNTdHJpbmcoaW50ZXJhY3Rpb25zKSkgaW50ZXJhY3Rpb25zID0gW2ludGVyYWN0aW9uc107XG4gIGxldCBoYXNIeWRyYXRlZCA9IGZhbHNlO1xuICBjb25zdCBkb0h5ZHJhdGUgPSAoZSkgPT4ge1xuICAgIGlmICghaGFzSHlkcmF0ZWQpIHtcbiAgICAgIGhhc0h5ZHJhdGVkID0gdHJ1ZTtcbiAgICAgIHRlYXJkb3duKCk7XG4gICAgICBoeWRyYXRlKCk7XG4gICAgICBlLnRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBlLmNvbnN0cnVjdG9yKGUudHlwZSwgZSkpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdGVhcmRvd24gPSAoKSA9PiB7XG4gICAgZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGZvciAoY29uc3QgaSBvZiBpbnRlcmFjdGlvbnMpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihpLCBkb0h5ZHJhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICBmb3JFYWNoKChlbCkgPT4ge1xuICAgIGZvciAoY29uc3QgaSBvZiBpbnRlcmFjdGlvbnMpIHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoaSwgZG9IeWRyYXRlLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHRlYXJkb3duO1xufTtcbmZ1bmN0aW9uIGZvckVhY2hFbGVtZW50KG5vZGUsIGNiKSB7XG4gIGlmIChpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSBcIltcIikge1xuICAgIGxldCBkZXB0aCA9IDE7XG4gICAgbGV0IG5leHQgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIHdoaWxlIChuZXh0KSB7XG4gICAgICBpZiAobmV4dC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjYihuZXh0KTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0NvbW1lbnQobmV4dCkpIHtcbiAgICAgICAgaWYgKG5leHQuZGF0YSA9PT0gXCJdXCIpIHtcbiAgICAgICAgICBpZiAoLS1kZXB0aCA9PT0gMCkgYnJlYWs7XG4gICAgICAgIH0gZWxzZSBpZiAobmV4dC5kYXRhID09PSBcIltcIikge1xuICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjYihub2RlKTtcbiAgfVxufVxuXG5jb25zdCBpc0FzeW5jV3JhcHBlciA9IChpKSA9PiAhIWkudHlwZS5fX2FzeW5jTG9hZGVyO1xuLyohICNfX05PX1NJREVfRUZGRUNUU19fICovXG4vLyBAX19OT19TSURFX0VGRkVDVFNfX1xuZnVuY3Rpb24gZGVmaW5lQXN5bmNDb21wb25lbnQoc291cmNlKSB7XG4gIGlmIChpc0Z1bmN0aW9uKHNvdXJjZSkpIHtcbiAgICBzb3VyY2UgPSB7IGxvYWRlcjogc291cmNlIH07XG4gIH1cbiAgY29uc3Qge1xuICAgIGxvYWRlcixcbiAgICBsb2FkaW5nQ29tcG9uZW50LFxuICAgIGVycm9yQ29tcG9uZW50LFxuICAgIGRlbGF5ID0gMjAwLFxuICAgIGh5ZHJhdGU6IGh5ZHJhdGVTdHJhdGVneSxcbiAgICB0aW1lb3V0LFxuICAgIC8vIHVuZGVmaW5lZCA9IG5ldmVyIHRpbWVzIG91dFxuICAgIHN1c3BlbnNpYmxlID0gdHJ1ZSxcbiAgICBvbkVycm9yOiB1c2VyT25FcnJvclxuICB9ID0gc291cmNlO1xuICBsZXQgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xuICBsZXQgcmVzb2x2ZWRDb21wO1xuICBsZXQgcmV0cmllcyA9IDA7XG4gIGNvbnN0IHJldHJ5ID0gKCkgPT4ge1xuICAgIHJldHJpZXMrKztcbiAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XG4gICAgcmV0dXJuIGxvYWQoKTtcbiAgfTtcbiAgY29uc3QgbG9hZCA9ICgpID0+IHtcbiAgICBsZXQgdGhpc1JlcXVlc3Q7XG4gICAgcmV0dXJuIHBlbmRpbmdSZXF1ZXN0IHx8ICh0aGlzUmVxdWVzdCA9IHBlbmRpbmdSZXF1ZXN0ID0gbG9hZGVyKCkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgZXJyID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpO1xuICAgICAgaWYgKHVzZXJPbkVycm9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3QgdXNlclJldHJ5ID0gKCkgPT4gcmVzb2x2ZShyZXRyeSgpKTtcbiAgICAgICAgICBjb25zdCB1c2VyRmFpbCA9ICgpID0+IHJlamVjdChlcnIpO1xuICAgICAgICAgIHVzZXJPbkVycm9yKGVyciwgdXNlclJldHJ5LCB1c2VyRmFpbCwgcmV0cmllcyArIDEpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9KS50aGVuKChjb21wKSA9PiB7XG4gICAgICBpZiAodGhpc1JlcXVlc3QgIT09IHBlbmRpbmdSZXF1ZXN0ICYmIHBlbmRpbmdSZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybiBwZW5kaW5nUmVxdWVzdDtcbiAgICAgIH1cbiAgICAgIGlmICghY29tcCkge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgYEFzeW5jIGNvbXBvbmVudCBsb2FkZXIgcmVzb2x2ZWQgdG8gdW5kZWZpbmVkLiBJZiB5b3UgYXJlIHVzaW5nIHJldHJ5KCksIG1ha2Ugc3VyZSB0byByZXR1cm4gaXRzIHJldHVybiB2YWx1ZS5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoY29tcCAmJiAoY29tcC5fX2VzTW9kdWxlIHx8IGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gXCJNb2R1bGVcIikpIHtcbiAgICAgICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wICYmICFpc09iamVjdChjb21wKSAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYXN5bmMgY29tcG9uZW50IGxvYWQgcmVzdWx0OiAke2NvbXB9YCk7XG4gICAgICB9XG4gICAgICByZXNvbHZlZENvbXAgPSBjb21wO1xuICAgICAgcmV0dXJuIGNvbXA7XG4gICAgfSkpO1xuICB9O1xuICByZXR1cm4gZGVmaW5lQ29tcG9uZW50KHtcbiAgICBuYW1lOiBcIkFzeW5jQ29tcG9uZW50V3JhcHBlclwiLFxuICAgIF9fYXN5bmNMb2FkZXI6IGxvYWQsXG4gICAgX19hc3luY0h5ZHJhdGUoZWwsIGluc3RhbmNlLCBoeWRyYXRlKSB7XG4gICAgICBjb25zdCBkb0h5ZHJhdGUgPSBoeWRyYXRlU3RyYXRlZ3kgPyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlYXJkb3duID0gaHlkcmF0ZVN0cmF0ZWd5KFxuICAgICAgICAgIGh5ZHJhdGUsXG4gICAgICAgICAgKGNiKSA9PiBmb3JFYWNoRWxlbWVudChlbCwgY2IpXG4gICAgICAgICk7XG4gICAgICAgIGlmICh0ZWFyZG93bikge1xuICAgICAgICAgIChpbnN0YW5jZS5idW0gfHwgKGluc3RhbmNlLmJ1bSA9IFtdKSkucHVzaCh0ZWFyZG93bik7XG4gICAgICAgIH1cbiAgICAgIH0gOiBoeWRyYXRlO1xuICAgICAgaWYgKHJlc29sdmVkQ29tcCkge1xuICAgICAgICBkb0h5ZHJhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvYWQoKS50aGVuKCgpID0+ICFpbnN0YW5jZS5pc1VubW91bnRlZCAmJiBkb0h5ZHJhdGUoKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXQgX19hc3luY1Jlc29sdmVkKCkge1xuICAgICAgcmV0dXJuIHJlc29sdmVkQ29tcDtcbiAgICB9LFxuICAgIHNldHVwKCkge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2U7XG4gICAgICBtYXJrQXN5bmNCb3VuZGFyeShpbnN0YW5jZSk7XG4gICAgICBpZiAocmVzb2x2ZWRDb21wKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiBjcmVhdGVJbm5lckNvbXAocmVzb2x2ZWRDb21wLCBpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgICBjb25zdCBvbkVycm9yID0gKGVycikgPT4ge1xuICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XG4gICAgICAgIGhhbmRsZUVycm9yKFxuICAgICAgICAgIGVycixcbiAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAxMyxcbiAgICAgICAgICAhZXJyb3JDb21wb25lbnRcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgICBpZiAoc3VzcGVuc2libGUgJiYgaW5zdGFuY2Uuc3VzcGVuc2UgfHwgaXNJblNTUkNvbXBvbmVudFNldHVwKSB7XG4gICAgICAgIHJldHVybiBsb2FkKCkudGhlbigoY29tcCkgPT4ge1xuICAgICAgICAgIHJldHVybiAoKSA9PiBjcmVhdGVJbm5lckNvbXAoY29tcCwgaW5zdGFuY2UpO1xuICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgIHJldHVybiAoKSA9PiBlcnJvckNvbXBvbmVudCA/IGNyZWF0ZVZOb2RlKGVycm9yQ29tcG9uZW50LCB7XG4gICAgICAgICAgICBlcnJvcjogZXJyXG4gICAgICAgICAgfSkgOiBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxvYWRlZCA9IHJlZihmYWxzZSk7XG4gICAgICBjb25zdCBlcnJvciA9IHJlZigpO1xuICAgICAgY29uc3QgZGVsYXllZCA9IHJlZighIWRlbGF5KTtcbiAgICAgIGlmIChkZWxheSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBkZWxheWVkLnZhbHVlID0gZmFsc2U7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCFsb2FkZWQudmFsdWUgJiYgIWVycm9yLnZhbHVlKSB7XG4gICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGBBc3luYyBjb21wb25lbnQgdGltZWQgb3V0IGFmdGVyICR7dGltZW91dH1tcy5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgZXJyb3IudmFsdWUgPSBlcnI7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgIH1cbiAgICAgIGxvYWQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgbG9hZGVkLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgaWYgKGluc3RhbmNlLnBhcmVudCAmJiBpc0tlZXBBbGl2ZShpbnN0YW5jZS5wYXJlbnQudm5vZGUpKSB7XG4gICAgICAgICAgaW5zdGFuY2UucGFyZW50LnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgZXJyb3IudmFsdWUgPSBlcnI7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChsb2FkZWQudmFsdWUgJiYgcmVzb2x2ZWRDb21wKSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZUlubmVyQ29tcChyZXNvbHZlZENvbXAsIGluc3RhbmNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChlcnJvci52YWx1ZSAmJiBlcnJvckNvbXBvbmVudCkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShlcnJvckNvbXBvbmVudCwge1xuICAgICAgICAgICAgZXJyb3I6IGVycm9yLnZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAobG9hZGluZ0NvbXBvbmVudCAmJiAhZGVsYXllZC52YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShsb2FkaW5nQ29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlSW5uZXJDb21wKGNvbXAsIHBhcmVudCkge1xuICBjb25zdCB7IHJlZjogcmVmMiwgcHJvcHMsIGNoaWxkcmVuLCBjZSB9ID0gcGFyZW50LnZub2RlO1xuICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKGNvbXAsIHByb3BzLCBjaGlsZHJlbik7XG4gIHZub2RlLnJlZiA9IHJlZjI7XG4gIHZub2RlLmNlID0gY2U7XG4gIGRlbGV0ZSBwYXJlbnQudm5vZGUuY2U7XG4gIHJldHVybiB2bm9kZTtcbn1cblxuY29uc3QgaXNLZWVwQWxpdmUgPSAodm5vZGUpID0+IHZub2RlLnR5cGUuX19pc0tlZXBBbGl2ZTtcbmNvbnN0IEtlZXBBbGl2ZUltcGwgPSB7XG4gIG5hbWU6IGBLZWVwQWxpdmVgLFxuICAvLyBNYXJrZXIgZm9yIHNwZWNpYWwgaGFuZGxpbmcgaW5zaWRlIHRoZSByZW5kZXJlci4gV2UgYXJlIG5vdCB1c2luZyBhID09PVxuICAvLyBjaGVjayBkaXJlY3RseSBvbiBLZWVwQWxpdmUgaW4gdGhlIHJlbmRlcmVyLCBiZWNhdXNlIGltcG9ydGluZyBpdCBkaXJlY3RseVxuICAvLyB3b3VsZCBwcmV2ZW50IGl0IGZyb20gYmVpbmcgdHJlZS1zaGFrZW4uXG4gIF9faXNLZWVwQWxpdmU6IHRydWUsXG4gIHByb3BzOiB7XG4gICAgaW5jbHVkZTogW1N0cmluZywgUmVnRXhwLCBBcnJheV0sXG4gICAgZXhjbHVkZTogW1N0cmluZywgUmVnRXhwLCBBcnJheV0sXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHNoYXJlZENvbnRleHQgPSBpbnN0YW5jZS5jdHg7XG4gICAgaWYgKCFzaGFyZWRDb250ZXh0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQgJiYgc2xvdHMuZGVmYXVsdCgpO1xuICAgICAgICByZXR1cm4gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAxID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGNhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICBjb25zdCBrZXlzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICBsZXQgY3VycmVudCA9IG51bGw7XG4gICAge1xuICAgICAgaW5zdGFuY2UuX192X2NhY2hlID0gY2FjaGU7XG4gICAgfVxuICAgIGNvbnN0IHBhcmVudFN1c3BlbnNlID0gaW5zdGFuY2Uuc3VzcGVuc2U7XG4gICAgY29uc3Qge1xuICAgICAgcmVuZGVyZXI6IHtcbiAgICAgICAgcDogcGF0Y2gsXG4gICAgICAgIG06IG1vdmUsXG4gICAgICAgIHVtOiBfdW5tb3VudCxcbiAgICAgICAgbzogeyBjcmVhdGVFbGVtZW50IH1cbiAgICAgIH1cbiAgICB9ID0gc2hhcmVkQ29udGV4dDtcbiAgICBjb25zdCBzdG9yYWdlQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBzaGFyZWRDb250ZXh0LmFjdGl2YXRlID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgbmFtZXNwYWNlLCBvcHRpbWl6ZWQpID0+IHtcbiAgICAgIGNvbnN0IGluc3RhbmNlMiA9IHZub2RlLmNvbXBvbmVudDtcbiAgICAgIG1vdmUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCAwLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICBwYXRjaChcbiAgICAgICAgaW5zdGFuY2UyLnZub2RlLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIGluc3RhbmNlMixcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgdm5vZGUuc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpbnN0YW5jZTIuaXNEZWFjdGl2YXRlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoaW5zdGFuY2UyLmEpIHtcbiAgICAgICAgICBpbnZva2VBcnJheUZucyhpbnN0YW5jZTIuYSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZU1vdW50ZWQ7XG4gICAgICAgIGlmICh2bm9kZUhvb2spIHtcbiAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZTIucGFyZW50LCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIHtcbiAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZTIpO1xuICAgICAgfVxuICAgIH07XG4gICAgc2hhcmVkQ29udGV4dC5kZWFjdGl2YXRlID0gKHZub2RlKSA9PiB7XG4gICAgICBjb25zdCBpbnN0YW5jZTIgPSB2bm9kZS5jb21wb25lbnQ7XG4gICAgICBpbnZhbGlkYXRlTW91bnQoaW5zdGFuY2UyLm0pO1xuICAgICAgaW52YWxpZGF0ZU1vdW50KGluc3RhbmNlMi5hKTtcbiAgICAgIG1vdmUodm5vZGUsIHN0b3JhZ2VDb250YWluZXIsIG51bGwsIDEsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmIChpbnN0YW5jZTIuZGEpIHtcbiAgICAgICAgICBpbnZva2VBcnJheUZucyhpbnN0YW5jZTIuZGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZub2RlSG9vayA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uVm5vZGVVbm1vdW50ZWQ7XG4gICAgICAgIGlmICh2bm9kZUhvb2spIHtcbiAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZTIucGFyZW50LCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UyLmlzRGVhY3RpdmF0ZWQgPSB0cnVlO1xuICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAge1xuICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlMik7XG4gICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiB1bm1vdW50KHZub2RlKSB7XG4gICAgICByZXNldFNoYXBlRmxhZyh2bm9kZSk7XG4gICAgICBfdW5tb3VudCh2bm9kZSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJ1bmVDYWNoZShmaWx0ZXIpIHtcbiAgICAgIGNhY2hlLmZvckVhY2goKHZub2RlLCBrZXkpID0+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUodm5vZGUudHlwZSk7XG4gICAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoa2V5KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeShrZXkpIHtcbiAgICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChrZXkpO1xuICAgICAgaWYgKGNhY2hlZCAmJiAoIWN1cnJlbnQgfHwgIWlzU2FtZVZOb2RlVHlwZShjYWNoZWQsIGN1cnJlbnQpKSkge1xuICAgICAgICB1bm1vdW50KGNhY2hlZCk7XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgcmVzZXRTaGFwZUZsYWcoY3VycmVudCk7XG4gICAgICB9XG4gICAgICBjYWNoZS5kZWxldGUoa2V5KTtcbiAgICAgIGtleXMuZGVsZXRlKGtleSk7XG4gICAgfVxuICAgIHdhdGNoKFxuICAgICAgKCkgPT4gW3Byb3BzLmluY2x1ZGUsIHByb3BzLmV4Y2x1ZGVdLFxuICAgICAgKFtpbmNsdWRlLCBleGNsdWRlXSkgPT4ge1xuICAgICAgICBpbmNsdWRlICYmIHBydW5lQ2FjaGUoKG5hbWUpID0+IG1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpO1xuICAgICAgICBleGNsdWRlICYmIHBydW5lQ2FjaGUoKG5hbWUpID0+ICFtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKTtcbiAgICAgIH0sXG4gICAgICAvLyBwcnVuZSBwb3N0LXJlbmRlciBhZnRlciBgY3VycmVudGAgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgeyBmbHVzaDogXCJwb3N0XCIsIGRlZXA6IHRydWUgfVxuICAgICk7XG4gICAgbGV0IHBlbmRpbmdDYWNoZUtleSA9IG51bGw7XG4gICAgY29uc3QgY2FjaGVTdWJ0cmVlID0gKCkgPT4ge1xuICAgICAgaWYgKHBlbmRpbmdDYWNoZUtleSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc1N1c3BlbnNlKGluc3RhbmNlLnN1YlRyZWUudHlwZSkpIHtcbiAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgICAgY2FjaGUuc2V0KHBlbmRpbmdDYWNoZUtleSwgZ2V0SW5uZXJDaGlsZChpbnN0YW5jZS5zdWJUcmVlKSk7XG4gICAgICAgICAgfSwgaW5zdGFuY2Uuc3ViVHJlZS5zdXNwZW5zZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FjaGUuc2V0KHBlbmRpbmdDYWNoZUtleSwgZ2V0SW5uZXJDaGlsZChpbnN0YW5jZS5zdWJUcmVlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIG9uTW91bnRlZChjYWNoZVN1YnRyZWUpO1xuICAgIG9uVXBkYXRlZChjYWNoZVN1YnRyZWUpO1xuICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgICBjYWNoZS5mb3JFYWNoKChjYWNoZWQpID0+IHtcbiAgICAgICAgY29uc3QgeyBzdWJUcmVlLCBzdXNwZW5zZSB9ID0gaW5zdGFuY2U7XG4gICAgICAgIGNvbnN0IHZub2RlID0gZ2V0SW5uZXJDaGlsZChzdWJUcmVlKTtcbiAgICAgICAgaWYgKGNhY2hlZC50eXBlID09PSB2bm9kZS50eXBlICYmIGNhY2hlZC5rZXkgPT09IHZub2RlLmtleSkge1xuICAgICAgICAgIHJlc2V0U2hhcGVGbGFnKHZub2RlKTtcbiAgICAgICAgICBjb25zdCBkYSA9IHZub2RlLmNvbXBvbmVudC5kYTtcbiAgICAgICAgICBkYSAmJiBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoZGEsIHN1c3BlbnNlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdW5tb3VudChjYWNoZWQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHBlbmRpbmdDYWNoZUtleSA9IG51bGw7XG4gICAgICBpZiAoIXNsb3RzLmRlZmF1bHQpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0KCk7XG4gICAgICBjb25zdCByYXdWTm9kZSA9IGNoaWxkcmVuWzBdO1xuICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAge1xuICAgICAgICAgIHdhcm4kMShgS2VlcEFsaXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIGNvbXBvbmVudCBjaGlsZC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgfSBlbHNlIGlmICghaXNWTm9kZShyYXdWTm9kZSkgfHwgIShyYXdWTm9kZS5zaGFwZUZsYWcgJiA0KSAmJiAhKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDEyOCkpIHtcbiAgICAgICAgY3VycmVudCA9IG51bGw7XG4gICAgICAgIHJldHVybiByYXdWTm9kZTtcbiAgICAgIH1cbiAgICAgIGxldCB2bm9kZSA9IGdldElubmVyQ2hpbGQocmF3Vk5vZGUpO1xuICAgICAgaWYgKHZub2RlLnR5cGUgPT09IENvbW1lbnQpIHtcbiAgICAgICAgY3VycmVudCA9IG51bGw7XG4gICAgICAgIHJldHVybiB2bm9kZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbXAgPSB2bm9kZS50eXBlO1xuICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoXG4gICAgICAgIGlzQXN5bmNXcmFwcGVyKHZub2RlKSA/IHZub2RlLnR5cGUuX19hc3luY1Jlc29sdmVkIHx8IHt9IDogY29tcFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHsgaW5jbHVkZSwgZXhjbHVkZSwgbWF4IH0gPSBwcm9wcztcbiAgICAgIGlmIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkgfHwgZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpIHtcbiAgICAgICAgdm5vZGUuc2hhcGVGbGFnICY9IH4yNTY7XG4gICAgICAgIGN1cnJlbnQgPSB2bm9kZTtcbiAgICAgICAgcmV0dXJuIHJhd1ZOb2RlO1xuICAgICAgfVxuICAgICAgY29uc3Qga2V5ID0gdm5vZGUua2V5ID09IG51bGwgPyBjb21wIDogdm5vZGUua2V5O1xuICAgICAgY29uc3QgY2FjaGVkVk5vZGUgPSBjYWNoZS5nZXQoa2V5KTtcbiAgICAgIGlmICh2bm9kZS5lbCkge1xuICAgICAgICB2bm9kZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgICAgICBpZiAocmF3Vk5vZGUuc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICAgICAgcmF3Vk5vZGUuc3NDb250ZW50ID0gdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBlbmRpbmdDYWNoZUtleSA9IGtleTtcbiAgICAgIGlmIChjYWNoZWRWTm9kZSkge1xuICAgICAgICB2bm9kZS5lbCA9IGNhY2hlZFZOb2RlLmVsO1xuICAgICAgICB2bm9kZS5jb21wb25lbnQgPSBjYWNoZWRWTm9kZS5jb21wb25lbnQ7XG4gICAgICAgIGlmICh2bm9kZS50cmFuc2l0aW9uKSB7XG4gICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCB2bm9kZS50cmFuc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICB2bm9kZS5zaGFwZUZsYWcgfD0gNTEyO1xuICAgICAgICBrZXlzLmRlbGV0ZShrZXkpO1xuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5cy5hZGQoa2V5KTtcbiAgICAgICAgaWYgKG1heCAmJiBrZXlzLnNpemUgPiBwYXJzZUludChtYXgsIDEwKSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShrZXlzLnZhbHVlcygpLm5leHQoKS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSAyNTY7XG4gICAgICBjdXJyZW50ID0gdm5vZGU7XG4gICAgICByZXR1cm4gaXNTdXNwZW5zZShyYXdWTm9kZS50eXBlKSA/IHJhd1ZOb2RlIDogdm5vZGU7XG4gICAgfTtcbiAgfVxufTtcbmNvbnN0IEtlZXBBbGl2ZSA9IEtlZXBBbGl2ZUltcGw7XG5mdW5jdGlvbiBtYXRjaGVzKHBhdHRlcm4sIG5hbWUpIHtcbiAgaWYgKGlzQXJyYXkocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi5zb21lKChwKSA9PiBtYXRjaGVzKHAsIG5hbWUpKTtcbiAgfSBlbHNlIGlmIChpc1N0cmluZyhwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KFwiLFwiKS5pbmNsdWRlcyhuYW1lKTtcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgIHBhdHRlcm4ubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIG9uQWN0aXZhdGVkKGhvb2ssIHRhcmdldCkge1xuICByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgXCJhXCIsIHRhcmdldCk7XG59XG5mdW5jdGlvbiBvbkRlYWN0aXZhdGVkKGhvb2ssIHRhcmdldCkge1xuICByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgXCJkYVwiLCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIHR5cGUsIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xuICBjb25zdCB3cmFwcGVkSG9vayA9IGhvb2suX193ZGMgfHwgKGhvb2suX193ZGMgPSAoKSA9PiB7XG4gICAgbGV0IGN1cnJlbnQgPSB0YXJnZXQ7XG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgIGlmIChjdXJyZW50LmlzRGVhY3RpdmF0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gaG9vaygpO1xuICB9KTtcbiAgaW5qZWN0SG9vayh0eXBlLCB3cmFwcGVkSG9vaywgdGFyZ2V0KTtcbiAgaWYgKHRhcmdldCkge1xuICAgIGxldCBjdXJyZW50ID0gdGFyZ2V0LnBhcmVudDtcbiAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50LnBhcmVudCkge1xuICAgICAgaWYgKGlzS2VlcEFsaXZlKGN1cnJlbnQucGFyZW50LnZub2RlKSkge1xuICAgICAgICBpbmplY3RUb0tlZXBBbGl2ZVJvb3Qod3JhcHBlZEhvb2ssIHR5cGUsIHRhcmdldCwgY3VycmVudCk7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBpbmplY3RUb0tlZXBBbGl2ZVJvb3QoaG9vaywgdHlwZSwgdGFyZ2V0LCBrZWVwQWxpdmVSb290KSB7XG4gIGNvbnN0IGluamVjdGVkID0gaW5qZWN0SG9vayhcbiAgICB0eXBlLFxuICAgIGhvb2ssXG4gICAga2VlcEFsaXZlUm9vdCxcbiAgICB0cnVlXG4gICAgLyogcHJlcGVuZCAqL1xuICApO1xuICBvblVubW91bnRlZCgoKSA9PiB7XG4gICAgcmVtb3ZlKGtlZXBBbGl2ZVJvb3RbdHlwZV0sIGluamVjdGVkKTtcbiAgfSwgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIHJlc2V0U2hhcGVGbGFnKHZub2RlKSB7XG4gIHZub2RlLnNoYXBlRmxhZyAmPSB+MjU2O1xuICB2bm9kZS5zaGFwZUZsYWcgJj0gfjUxMjtcbn1cbmZ1bmN0aW9uIGdldElubmVyQ2hpbGQodm5vZGUpIHtcbiAgcmV0dXJuIHZub2RlLnNoYXBlRmxhZyAmIDEyOCA/IHZub2RlLnNzQ29udGVudCA6IHZub2RlO1xufVxuXG5mdW5jdGlvbiBpbmplY3RIb29rKHR5cGUsIGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSwgcHJlcGVuZCA9IGZhbHNlKSB7XG4gIGlmICh0YXJnZXQpIHtcbiAgICBjb25zdCBob29rcyA9IHRhcmdldFt0eXBlXSB8fCAodGFyZ2V0W3R5cGVdID0gW10pO1xuICAgIGNvbnN0IHdyYXBwZWRIb29rID0gaG9vay5fX3dlaCB8fCAoaG9vay5fX3dlaCA9ICguLi5hcmdzKSA9PiB7XG4gICAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgICBjb25zdCByZXNldCA9IHNldEN1cnJlbnRJbnN0YW5jZSh0YXJnZXQpO1xuICAgICAgY29uc3QgcmVzID0gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgdGFyZ2V0LCB0eXBlLCBhcmdzKTtcbiAgICAgIHJlc2V0KCk7XG4gICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0pO1xuICAgIGlmIChwcmVwZW5kKSB7XG4gICAgICBob29rcy51bnNoaWZ0KHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaG9va3MucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgfVxuICAgIHJldHVybiB3cmFwcGVkSG9vaztcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBhcGlOYW1lID0gdG9IYW5kbGVyS2V5KEVycm9yVHlwZVN0cmluZ3MkMVt0eXBlXS5yZXBsYWNlKC8gaG9vayQvLCBcIlwiKSk7XG4gICAgd2FybiQxKFxuICAgICAgYCR7YXBpTmFtZX0gaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZSB0byBiZSBhc3NvY2lhdGVkIHdpdGguIExpZmVjeWNsZSBpbmplY3Rpb24gQVBJcyBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBleGVjdXRpb24gb2Ygc2V0dXAoKS5gICsgKGAgSWYgeW91IGFyZSB1c2luZyBhc3luYyBzZXR1cCgpLCBtYWtlIHN1cmUgdG8gcmVnaXN0ZXIgbGlmZWN5Y2xlIGhvb2tzIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQgc3RhdGVtZW50LmAgKVxuICAgICk7XG4gIH1cbn1cbmNvbnN0IGNyZWF0ZUhvb2sgPSAobGlmZWN5Y2xlKSA9PiAoaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSA9PiB7XG4gIGlmICghaXNJblNTUkNvbXBvbmVudFNldHVwIHx8IGxpZmVjeWNsZSA9PT0gXCJzcFwiKSB7XG4gICAgaW5qZWN0SG9vayhsaWZlY3ljbGUsICguLi5hcmdzKSA9PiBob29rKC4uLmFyZ3MpLCB0YXJnZXQpO1xuICB9XG59O1xuY29uc3Qgb25CZWZvcmVNb3VudCA9IGNyZWF0ZUhvb2soXCJibVwiKTtcbmNvbnN0IG9uTW91bnRlZCA9IGNyZWF0ZUhvb2soXCJtXCIpO1xuY29uc3Qgb25CZWZvcmVVcGRhdGUgPSBjcmVhdGVIb29rKFxuICBcImJ1XCJcbik7XG5jb25zdCBvblVwZGF0ZWQgPSBjcmVhdGVIb29rKFwidVwiKTtcbmNvbnN0IG9uQmVmb3JlVW5tb3VudCA9IGNyZWF0ZUhvb2soXG4gIFwiYnVtXCJcbik7XG5jb25zdCBvblVubW91bnRlZCA9IGNyZWF0ZUhvb2soXCJ1bVwiKTtcbmNvbnN0IG9uU2VydmVyUHJlZmV0Y2ggPSBjcmVhdGVIb29rKFxuICBcInNwXCJcbik7XG5jb25zdCBvblJlbmRlclRyaWdnZXJlZCA9IGNyZWF0ZUhvb2soXCJydGdcIik7XG5jb25zdCBvblJlbmRlclRyYWNrZWQgPSBjcmVhdGVIb29rKFwicnRjXCIpO1xuZnVuY3Rpb24gb25FcnJvckNhcHR1cmVkKGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xuICBpbmplY3RIb29rKFwiZWNcIiwgaG9vaywgdGFyZ2V0KTtcbn1cblxuY29uc3QgQ09NUE9ORU5UUyA9IFwiY29tcG9uZW50c1wiO1xuY29uc3QgRElSRUNUSVZFUyA9IFwiZGlyZWN0aXZlc1wiO1xuZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudChuYW1lLCBtYXliZVNlbGZSZWZlcmVuY2UpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBuYW1lLCB0cnVlLCBtYXliZVNlbGZSZWZlcmVuY2UpIHx8IG5hbWU7XG59XG5jb25zdCBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UID0gU3ltYm9sLmZvcihcInYtbmRjXCIpO1xuZnVuY3Rpb24gcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQoY29tcG9uZW50KSB7XG4gIGlmIChpc1N0cmluZyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBjb21wb25lbnQsIGZhbHNlKSB8fCBjb21wb25lbnQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudCB8fCBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UO1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlRGlyZWN0aXZlKG5hbWUpIHtcbiAgcmV0dXJuIHJlc29sdmVBc3NldChESVJFQ1RJVkVTLCBuYW1lKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCh0eXBlLCBuYW1lLCB3YXJuTWlzc2luZyA9IHRydWUsIG1heWJlU2VsZlJlZmVyZW5jZSA9IGZhbHNlKSB7XG4gIGNvbnN0IGluc3RhbmNlID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIHx8IGN1cnJlbnRJbnN0YW5jZTtcbiAgaWYgKGluc3RhbmNlKSB7XG4gICAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcbiAgICBpZiAodHlwZSA9PT0gQ09NUE9ORU5UUykge1xuICAgICAgY29uc3Qgc2VsZk5hbWUgPSBnZXRDb21wb25lbnROYW1lKFxuICAgICAgICBDb21wb25lbnQsXG4gICAgICAgIGZhbHNlXG4gICAgICApO1xuICAgICAgaWYgKHNlbGZOYW1lICYmIChzZWxmTmFtZSA9PT0gbmFtZSB8fCBzZWxmTmFtZSA9PT0gY2FtZWxpemUobmFtZSkgfHwgc2VsZk5hbWUgPT09IGNhcGl0YWxpemUoY2FtZWxpemUobmFtZSkpKSkge1xuICAgICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXMgPSAoXG4gICAgICAvLyBsb2NhbCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGNoZWNrIGluc3RhbmNlW3R5cGVdIGZpcnN0IHdoaWNoIGlzIHJlc29sdmVkIGZvciBvcHRpb25zIEFQSVxuICAgICAgcmVzb2x2ZShpbnN0YW5jZVt0eXBlXSB8fCBDb21wb25lbnRbdHlwZV0sIG5hbWUpIHx8IC8vIGdsb2JhbCByZWdpc3RyYXRpb25cbiAgICAgIHJlc29sdmUoaW5zdGFuY2UuYXBwQ29udGV4dFt0eXBlXSwgbmFtZSlcbiAgICApO1xuICAgIGlmICghcmVzICYmIG1heWJlU2VsZlJlZmVyZW5jZSkge1xuICAgICAgcmV0dXJuIENvbXBvbmVudDtcbiAgICB9XG4gICAgaWYgKHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICAgIGNvbnN0IGV4dHJhID0gdHlwZSA9PT0gQ09NUE9ORU5UUyA/IGBcbklmIHRoaXMgaXMgYSBuYXRpdmUgY3VzdG9tIGVsZW1lbnQsIG1ha2Ugc3VyZSB0byBleGNsdWRlIGl0IGZyb20gY29tcG9uZW50IHJlc29sdXRpb24gdmlhIGNvbXBpbGVyT3B0aW9ucy5pc0N1c3RvbUVsZW1lbnQuYCA6IGBgO1xuICAgICAgd2FybiQxKGBGYWlsZWQgdG8gcmVzb2x2ZSAke3R5cGUuc2xpY2UoMCwgLTEpfTogJHtuYW1lfSR7ZXh0cmF9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH0gZWxzZSB7XG4gICAgd2FybiQxKFxuICAgICAgYHJlc29sdmUke2NhcGl0YWxpemUodHlwZS5zbGljZSgwLCAtMSkpfSBjYW4gb25seSBiZSB1c2VkIGluIHJlbmRlcigpIG9yIHNldHVwKCkuYFxuICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlc29sdmUocmVnaXN0cnksIG5hbWUpIHtcbiAgcmV0dXJuIHJlZ2lzdHJ5ICYmIChyZWdpc3RyeVtuYW1lXSB8fCByZWdpc3RyeVtjYW1lbGl6ZShuYW1lKV0gfHwgcmVnaXN0cnlbY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lKSldKTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyTGlzdChzb3VyY2UsIHJlbmRlckl0ZW0sIGNhY2hlLCBpbmRleCkge1xuICBsZXQgcmV0O1xuICBjb25zdCBjYWNoZWQgPSBjYWNoZSAmJiBjYWNoZVtpbmRleF07XG4gIGNvbnN0IHNvdXJjZUlzQXJyYXkgPSBpc0FycmF5KHNvdXJjZSk7XG4gIGlmIChzb3VyY2VJc0FycmF5IHx8IGlzU3RyaW5nKHNvdXJjZSkpIHtcbiAgICBjb25zdCBzb3VyY2VJc1JlYWN0aXZlQXJyYXkgPSBzb3VyY2VJc0FycmF5ICYmIGlzUmVhY3RpdmUoc291cmNlKTtcbiAgICBsZXQgbmVlZHNXcmFwID0gZmFsc2U7XG4gICAgaWYgKHNvdXJjZUlzUmVhY3RpdmVBcnJheSkge1xuICAgICAgbmVlZHNXcmFwID0gIWlzU2hhbGxvdyhzb3VyY2UpO1xuICAgICAgc291cmNlID0gc2hhbGxvd1JlYWRBcnJheShzb3VyY2UpO1xuICAgIH1cbiAgICByZXQgPSBuZXcgQXJyYXkoc291cmNlLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBzb3VyY2UubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXJJdGVtKFxuICAgICAgICBuZWVkc1dyYXAgPyB0b1JlYWN0aXZlKHNvdXJjZVtpXSkgOiBzb3VyY2VbaV0sXG4gICAgICAgIGksXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgY2FjaGVkICYmIGNhY2hlZFtpXVxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNvdXJjZSA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihzb3VyY2UpKSB7XG4gICAgICB3YXJuJDEoYFRoZSB2LWZvciByYW5nZSBleHBlY3QgYW4gaW50ZWdlciB2YWx1ZSBidXQgZ290ICR7c291cmNlfS5gKTtcbiAgICB9XG4gICAgcmV0ID0gbmV3IEFycmF5KHNvdXJjZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2U7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShpICsgMSwgaSwgdm9pZCAwLCBjYWNoZWQgJiYgY2FjaGVkW2ldKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgIGlmIChzb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gQXJyYXkuZnJvbShcbiAgICAgICAgc291cmNlLFxuICAgICAgICAoaXRlbSwgaSkgPT4gcmVuZGVySXRlbShpdGVtLCBpLCB2b2lkIDAsIGNhY2hlZCAmJiBjYWNoZWRbaV0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oc291cmNlW2tleV0sIGtleSwgaSwgY2FjaGVkICYmIGNhY2hlZFtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIGlmIChjYWNoZSkge1xuICAgIGNhY2hlW2luZGV4XSA9IHJldDtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTbG90cyhzbG90cywgZHluYW1pY1Nsb3RzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Nsb3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2xvdCA9IGR5bmFtaWNTbG90c1tpXTtcbiAgICBpZiAoaXNBcnJheShzbG90KSkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzbG90Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHNsb3RzW3Nsb3Rbal0ubmFtZV0gPSBzbG90W2pdLmZuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2xvdCkge1xuICAgICAgc2xvdHNbc2xvdC5uYW1lXSA9IHNsb3Qua2V5ID8gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgcmVzID0gc2xvdC5mbiguLi5hcmdzKTtcbiAgICAgICAgaWYgKHJlcykgcmVzLmtleSA9IHNsb3Qua2V5O1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSA6IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90cztcbn1cblxuZnVuY3Rpb24gcmVuZGVyU2xvdChzbG90cywgbmFtZSwgcHJvcHMgPSB7fSwgZmFsbGJhY2ssIG5vU2xvdHRlZCkge1xuICBpZiAoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5wYXJlbnQgJiYgaXNBc3luY1dyYXBwZXIoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnBhcmVudCkgJiYgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnBhcmVudC5jZSkge1xuICAgIGlmIChuYW1lICE9PSBcImRlZmF1bHRcIikgcHJvcHMubmFtZSA9IG5hbWU7XG4gICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhcbiAgICAgIEZyYWdtZW50LFxuICAgICAgbnVsbCxcbiAgICAgIFtjcmVhdGVWTm9kZShcInNsb3RcIiwgcHJvcHMsIGZhbGxiYWNrICYmIGZhbGxiYWNrKCkpXSxcbiAgICAgIDY0XG4gICAgKTtcbiAgfVxuICBsZXQgc2xvdCA9IHNsb3RzW25hbWVdO1xuICBpZiAoc2xvdCAmJiBzbG90Lmxlbmd0aCA+IDEpIHtcbiAgICB3YXJuJDEoXG4gICAgICBgU1NSLW9wdGltaXplZCBzbG90IGZ1bmN0aW9uIGRldGVjdGVkIGluIGEgbm9uLVNTUi1vcHRpbWl6ZWQgcmVuZGVyIGZ1bmN0aW9uLiBZb3UgbmVlZCB0byBtYXJrIHRoaXMgY29tcG9uZW50IHdpdGggJGR5bmFtaWMtc2xvdHMgaW4gdGhlIHBhcmVudCB0ZW1wbGF0ZS5gXG4gICAgKTtcbiAgICBzbG90ID0gKCkgPT4gW107XG4gIH1cbiAgaWYgKHNsb3QgJiYgc2xvdC5fYykge1xuICAgIHNsb3QuX2QgPSBmYWxzZTtcbiAgfVxuICBvcGVuQmxvY2soKTtcbiAgY29uc3QgdmFsaWRTbG90Q29udGVudCA9IHNsb3QgJiYgZW5zdXJlVmFsaWRWTm9kZShzbG90KHByb3BzKSk7XG4gIGNvbnN0IHNsb3RLZXkgPSBwcm9wcy5rZXkgfHwgLy8gc2xvdCBjb250ZW50IGFycmF5IG9mIGEgZHluYW1pYyBjb25kaXRpb25hbCBzbG90IG1heSBoYXZlIGEgYnJhbmNoXG4gIC8vIGtleSBhdHRhY2hlZCBpbiB0aGUgYGNyZWF0ZVNsb3RzYCBoZWxwZXIsIHJlc3BlY3QgdGhhdFxuICB2YWxpZFNsb3RDb250ZW50ICYmIHZhbGlkU2xvdENvbnRlbnQua2V5O1xuICBjb25zdCByZW5kZXJlZCA9IGNyZWF0ZUJsb2NrKFxuICAgIEZyYWdtZW50LFxuICAgIHtcbiAgICAgIGtleTogKHNsb3RLZXkgJiYgIWlzU3ltYm9sKHNsb3RLZXkpID8gc2xvdEtleSA6IGBfJHtuYW1lfWApICsgLy8gIzcyNTYgZm9yY2UgZGlmZmVyZW50aWF0ZSBmYWxsYmFjayBjb250ZW50IGZyb20gYWN0dWFsIGNvbnRlbnRcbiAgICAgICghdmFsaWRTbG90Q29udGVudCAmJiBmYWxsYmFjayA/IFwiX2ZiXCIgOiBcIlwiKVxuICAgIH0sXG4gICAgdmFsaWRTbG90Q29udGVudCB8fCAoZmFsbGJhY2sgPyBmYWxsYmFjaygpIDogW10pLFxuICAgIHZhbGlkU2xvdENvbnRlbnQgJiYgc2xvdHMuXyA9PT0gMSA/IDY0IDogLTJcbiAgKTtcbiAgaWYgKCFub1Nsb3R0ZWQgJiYgcmVuZGVyZWQuc2NvcGVJZCkge1xuICAgIHJlbmRlcmVkLnNsb3RTY29wZUlkcyA9IFtyZW5kZXJlZC5zY29wZUlkICsgXCItc1wiXTtcbiAgfVxuICBpZiAoc2xvdCAmJiBzbG90Ll9jKSB7XG4gICAgc2xvdC5fZCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlbmRlcmVkO1xufVxuZnVuY3Rpb24gZW5zdXJlVmFsaWRWTm9kZSh2bm9kZXMpIHtcbiAgcmV0dXJuIHZub2Rlcy5zb21lKChjaGlsZCkgPT4ge1xuICAgIGlmICghaXNWTm9kZShjaGlsZCkpIHJldHVybiB0cnVlO1xuICAgIGlmIChjaGlsZC50eXBlID09PSBDb21tZW50KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGNoaWxkLnR5cGUgPT09IEZyYWdtZW50ICYmICFlbnN1cmVWYWxpZFZOb2RlKGNoaWxkLmNoaWxkcmVuKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSkgPyB2bm9kZXMgOiBudWxsO1xufVxuXG5mdW5jdGlvbiB0b0hhbmRsZXJzKG9iaiwgcHJlc2VydmVDYXNlSWZOZWNlc3NhcnkpIHtcbiAgY29uc3QgcmV0ID0ge307XG4gIGlmICghaXNPYmplY3Qob2JqKSkge1xuICAgIHdhcm4kMShgdi1vbiB3aXRoIG5vIGFyZ3VtZW50IGV4cGVjdHMgYW4gb2JqZWN0IHZhbHVlLmApO1xuICAgIHJldHVybiByZXQ7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmV0W3ByZXNlcnZlQ2FzZUlmTmVjZXNzYXJ5ICYmIC9bQS1aXS8udGVzdChrZXkpID8gYG9uOiR7a2V5fWAgOiB0b0hhbmRsZXJLZXkoa2V5KV0gPSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5jb25zdCBnZXRQdWJsaWNJbnN0YW5jZSA9IChpKSA9PiB7XG4gIGlmICghaSkgcmV0dXJuIG51bGw7XG4gIGlmIChpc1N0YXRlZnVsQ29tcG9uZW50KGkpKSByZXR1cm4gZ2V0Q29tcG9uZW50UHVibGljSW5zdGFuY2UoaSk7XG4gIHJldHVybiBnZXRQdWJsaWNJbnN0YW5jZShpLnBhcmVudCk7XG59O1xuY29uc3QgcHVibGljUHJvcGVydGllc01hcCA9IChcbiAgLy8gTW92ZSBQVVJFIG1hcmtlciB0byBuZXcgbGluZSB0byB3b3JrYXJvdW5kIGNvbXBpbGVyIGRpc2NhcmRpbmcgaXRcbiAgLy8gZHVlIHRvIHR5cGUgYW5ub3RhdGlvblxuICAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpLCB7XG4gICAgJDogKGkpID0+IGksXG4gICAgJGVsOiAoaSkgPT4gaS52bm9kZS5lbCxcbiAgICAkZGF0YTogKGkpID0+IGkuZGF0YSxcbiAgICAkcHJvcHM6IChpKSA9PiBzaGFsbG93UmVhZG9ubHkoaS5wcm9wcykgLFxuICAgICRhdHRyczogKGkpID0+IHNoYWxsb3dSZWFkb25seShpLmF0dHJzKSAsXG4gICAgJHNsb3RzOiAoaSkgPT4gc2hhbGxvd1JlYWRvbmx5KGkuc2xvdHMpICxcbiAgICAkcmVmczogKGkpID0+IHNoYWxsb3dSZWFkb25seShpLnJlZnMpICxcbiAgICAkcGFyZW50OiAoaSkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5wYXJlbnQpLFxuICAgICRyb290OiAoaSkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5yb290KSxcbiAgICAkaG9zdDogKGkpID0+IGkuY2UsXG4gICAgJGVtaXQ6IChpKSA9PiBpLmVtaXQsXG4gICAgJG9wdGlvbnM6IChpKSA9PiByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpKSAsXG4gICAgJGZvcmNlVXBkYXRlOiAoaSkgPT4gaS5mIHx8IChpLmYgPSAoKSA9PiB7XG4gICAgICBxdWV1ZUpvYihpLnVwZGF0ZSk7XG4gICAgfSksXG4gICAgJG5leHRUaWNrOiAoaSkgPT4gaS5uIHx8IChpLm4gPSBuZXh0VGljay5iaW5kKGkucHJveHkpKSxcbiAgICAkd2F0Y2g6IChpKSA9PiBpbnN0YW5jZVdhdGNoLmJpbmQoaSkgXG4gIH0pXG4pO1xuY29uc3QgaXNSZXNlcnZlZFByZWZpeCA9IChrZXkpID0+IGtleSA9PT0gXCJfXCIgfHwga2V5ID09PSBcIiRcIjtcbmNvbnN0IGhhc1NldHVwQmluZGluZyA9IChzdGF0ZSwga2V5KSA9PiBzdGF0ZSAhPT0gRU1QVFlfT0JKICYmICFzdGF0ZS5fX2lzU2NyaXB0U2V0dXAgJiYgaGFzT3duKHN0YXRlLCBrZXkpO1xuY29uc3QgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzID0ge1xuICBnZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXkpIHtcbiAgICBpZiAoa2V5ID09PSBcIl9fdl9za2lwXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCB7IGN0eCwgc2V0dXBTdGF0ZSwgZGF0YSwgcHJvcHMsIGFjY2Vzc0NhY2hlLCB0eXBlLCBhcHBDb250ZXh0IH0gPSBpbnN0YW5jZTtcbiAgICBpZiAoa2V5ID09PSBcIl9faXNWdWVcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCBub3JtYWxpemVkUHJvcHM7XG4gICAgaWYgKGtleVswXSAhPT0gXCIkXCIpIHtcbiAgICAgIGNvbnN0IG4gPSBhY2Nlc3NDYWNoZVtrZXldO1xuICAgICAgaWYgKG4gIT09IHZvaWQgMCkge1xuICAgICAgICBzd2l0Y2ggKG4pIHtcbiAgICAgICAgICBjYXNlIDEgLyogU0VUVVAgKi86XG4gICAgICAgICAgICByZXR1cm4gc2V0dXBTdGF0ZVtrZXldO1xuICAgICAgICAgIGNhc2UgMiAvKiBEQVRBICovOlxuICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgICAgICBjYXNlIDQgLyogQ09OVEVYVCAqLzpcbiAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcbiAgICAgICAgICBjYXNlIDMgLyogUFJPUFMgKi86XG4gICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChoYXNTZXR1cEJpbmRpbmcoc2V0dXBTdGF0ZSwga2V5KSkge1xuICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMSAvKiBTRVRVUCAqLztcbiAgICAgICAgcmV0dXJuIHNldHVwU3RhdGVba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB7XG4gICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAyIC8qIERBVEEgKi87XG4gICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAvLyBvbmx5IGNhY2hlIG90aGVyIHByb3BlcnRpZXMgd2hlbiBpbnN0YW5jZSBoYXMgZGVjbGFyZWQgKHRodXMgc3RhYmxlKVxuICAgICAgICAvLyBwcm9wc1xuICAgICAgICAobm9ybWFsaXplZFByb3BzID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdKSAmJiBoYXNPd24obm9ybWFsaXplZFByb3BzLCBrZXkpXG4gICAgICApIHtcbiAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDMgLyogUFJPUFMgKi87XG4gICAgICAgIHJldHVybiBwcm9wc1trZXldO1xuICAgICAgfSBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XG4gICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSA0IC8qIENPTlRFWFQgKi87XG4gICAgICAgIHJldHVybiBjdHhba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkQ2FjaGVBY2Nlc3MpIHtcbiAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDAgLyogT1RIRVIgKi87XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHB1YmxpY0dldHRlciA9IHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XTtcbiAgICBsZXQgY3NzTW9kdWxlLCBnbG9iYWxQcm9wZXJ0aWVzO1xuICAgIGlmIChwdWJsaWNHZXR0ZXIpIHtcbiAgICAgIGlmIChrZXkgPT09IFwiJGF0dHJzXCIpIHtcbiAgICAgICAgdHJhY2soaW5zdGFuY2UuYXR0cnMsIFwiZ2V0XCIsIFwiXCIpO1xuICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT09IFwiJHNsb3RzXCIpIHtcbiAgICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHVibGljR2V0dGVyKGluc3RhbmNlKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gY3NzIG1vZHVsZSAoaW5qZWN0ZWQgYnkgdnVlLWxvYWRlcilcbiAgICAgIChjc3NNb2R1bGUgPSB0eXBlLl9fY3NzTW9kdWxlcykgJiYgKGNzc01vZHVsZSA9IGNzc01vZHVsZVtrZXldKVxuICAgICkge1xuICAgICAgcmV0dXJuIGNzc01vZHVsZTtcbiAgICB9IGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcbiAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSA0IC8qIENPTlRFWFQgKi87XG4gICAgICByZXR1cm4gY3R4W2tleV07XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIGdsb2JhbCBwcm9wZXJ0aWVzXG4gICAgICBnbG9iYWxQcm9wZXJ0aWVzID0gYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywgaGFzT3duKGdsb2JhbFByb3BlcnRpZXMsIGtleSlcbiAgICApIHtcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFByb3BlcnRpZXNba2V5XTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSAmJiAoIWlzU3RyaW5nKGtleSkgfHwgLy8gIzEwOTEgYXZvaWQgaW50ZXJuYWwgaXNSZWYvaXNWTm9kZSBjaGVja3Mgb24gY29tcG9uZW50IGluc3RhbmNlIGxlYWRpbmdcbiAgICAvLyB0byBpbmZpbml0ZSB3YXJuaW5nIGxvb3BcbiAgICBrZXkuaW5kZXhPZihcIl9fdlwiKSAhPT0gMCkpIHtcbiAgICAgIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaXNSZXNlcnZlZFByZWZpeChrZXlbMF0pICYmIGhhc093bihkYXRhLCBrZXkpKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIGtleVxuICAgICAgICAgICl9IG11c3QgYmUgYWNjZXNzZWQgdmlhICRkYXRhIGJlY2F1c2UgaXQgc3RhcnRzIHdpdGggYSByZXNlcnZlZCBjaGFyYWN0ZXIgKFwiJFwiIG9yIFwiX1wiKSBhbmQgaXMgbm90IHByb3hpZWQgb24gdGhlIHJlbmRlciBjb250ZXh0LmBcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UgPT09IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gd2FzIGFjY2Vzc2VkIGR1cmluZyByZW5kZXIgYnV0IGlzIG5vdCBkZWZpbmVkIG9uIGluc3RhbmNlLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNldCh7IF86IGluc3RhbmNlIH0sIGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCB7IGRhdGEsIHNldHVwU3RhdGUsIGN0eCB9ID0gaW5zdGFuY2U7XG4gICAgaWYgKGhhc1NldHVwQmluZGluZyhzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICBzZXR1cFN0YXRlW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc2V0dXBTdGF0ZS5fX2lzU2NyaXB0U2V0dXAgJiYgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcbiAgICAgIHdhcm4kMShgQ2Fubm90IG11dGF0ZSA8c2NyaXB0IHNldHVwPiBiaW5kaW5nIFwiJHtrZXl9XCIgZnJvbSBPcHRpb25zIEFQSS5gKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xuICAgICAgZGF0YVtrZXldID0gdmFsdWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGhhc093bihpbnN0YW5jZS5wcm9wcywga2V5KSkge1xuICAgICAgd2FybiQxKGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwcm9wIFwiJHtrZXl9XCIuIFByb3BzIGFyZSByZWFkb25seS5gKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGtleVswXSA9PT0gXCIkXCIgJiYga2V5LnNsaWNlKDEpIGluIGluc3RhbmNlKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwdWJsaWMgcHJvcGVydHkgXCIke2tleX1cIi4gUHJvcGVydGllcyBzdGFydGluZyB3aXRoICQgYXJlIHJlc2VydmVkIGFuZCByZWFkb25seS5gXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoa2V5IGluIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHhba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgaGFzKHtcbiAgICBfOiB7IGRhdGEsIHNldHVwU3RhdGUsIGFjY2Vzc0NhY2hlLCBjdHgsIGFwcENvbnRleHQsIHByb3BzT3B0aW9ucyB9XG4gIH0sIGtleSkge1xuICAgIGxldCBub3JtYWxpemVkUHJvcHM7XG4gICAgcmV0dXJuICEhYWNjZXNzQ2FjaGVba2V5XSB8fCBkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkgfHwgaGFzU2V0dXBCaW5kaW5nKHNldHVwU3RhdGUsIGtleSkgfHwgKG5vcm1hbGl6ZWRQcm9wcyA9IHByb3BzT3B0aW9uc1swXSkgJiYgaGFzT3duKG5vcm1hbGl6ZWRQcm9wcywga2V5KSB8fCBoYXNPd24oY3R4LCBrZXkpIHx8IGhhc093bihwdWJsaWNQcm9wZXJ0aWVzTWFwLCBrZXkpIHx8IGhhc093bihhcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLCBrZXkpO1xuICB9LFxuICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICAgIGlmIChkZXNjcmlwdG9yLmdldCAhPSBudWxsKSB7XG4gICAgICB0YXJnZXQuXy5hY2Nlc3NDYWNoZVtrZXldID0gMDtcbiAgICB9IGVsc2UgaWYgKGhhc093bihkZXNjcmlwdG9yLCBcInZhbHVlXCIpKSB7XG4gICAgICB0aGlzLnNldCh0YXJnZXQsIGtleSwgZGVzY3JpcHRvci52YWx1ZSwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufTtcbntcbiAgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLm93bktleXMgPSAodGFyZ2V0KSA9PiB7XG4gICAgd2FybiQxKFxuICAgICAgYEF2b2lkIGFwcCBsb2dpYyB0aGF0IHJlbGllcyBvbiBlbnVtZXJhdGluZyBrZXlzIG9uIGEgY29tcG9uZW50IGluc3RhbmNlLiBUaGUga2V5cyB3aWxsIGJlIGVtcHR5IGluIHByb2R1Y3Rpb24gbW9kZSB0byBhdm9pZCBwZXJmb3JtYW5jZSBvdmVyaGVhZC5gXG4gICAgKTtcbiAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XG4gIH07XG59XG5jb25zdCBSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKHt9LCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMsIHtcbiAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgaWYgKGtleSA9PT0gU3ltYm9sLnVuc2NvcGFibGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMuZ2V0KHRhcmdldCwga2V5LCB0YXJnZXQpO1xuICB9LFxuICBoYXMoXywga2V5KSB7XG4gICAgY29uc3QgaGFzID0ga2V5WzBdICE9PSBcIl9cIiAmJiAhaXNHbG9iYWxseUFsbG93ZWQoa2V5KTtcbiAgICBpZiAoIWhhcyAmJiBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMuaGFzKF8sIGtleSkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAga2V5XG4gICAgICAgICl9IHNob3VsZCBub3Qgc3RhcnQgd2l0aCBfIHdoaWNoIGlzIGEgcmVzZXJ2ZWQgcHJlZml4IGZvciBWdWUgaW50ZXJuYWxzLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBoYXM7XG4gIH1cbn0pO1xuZnVuY3Rpb24gY3JlYXRlRGV2UmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xuICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgYF9gLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogKCkgPT4gaW5zdGFuY2VcbiAgfSk7XG4gIE9iamVjdC5rZXlzKHB1YmxpY1Byb3BlcnRpZXNNYXApLmZvckVhY2goKGtleSkgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBnZXQ6ICgpID0+IHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XShpbnN0YW5jZSksXG4gICAgICAvLyBpbnRlcmNlcHRlZCBieSB0aGUgcHJveHkgc28gbm8gbmVlZCBmb3IgaW1wbGVtZW50YXRpb24sXG4gICAgICAvLyBidXQgbmVlZGVkIHRvIHByZXZlbnQgc2V0IGVycm9yc1xuICAgICAgc2V0OiBOT09QXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gZXhwb3NlUHJvcHNPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpIHtcbiAgY29uc3Qge1xuICAgIGN0eCxcbiAgICBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdXG4gIH0gPSBpbnN0YW5jZTtcbiAgaWYgKHByb3BzT3B0aW9ucykge1xuICAgIE9iamVjdC5rZXlzKHByb3BzT3B0aW9ucykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IGluc3RhbmNlLnByb3BzW2tleV0sXG4gICAgICAgIHNldDogTk9PUFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGV4cG9zZVNldHVwU3RhdGVPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpIHtcbiAgY29uc3QgeyBjdHgsIHNldHVwU3RhdGUgfSA9IGluc3RhbmNlO1xuICBPYmplY3Qua2V5cyh0b1JhdyhzZXR1cFN0YXRlKSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKCFzZXR1cFN0YXRlLl9faXNTY3JpcHRTZXR1cCkge1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRQcmVmaXgoa2V5WzBdKSkge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgYHNldHVwKCkgcmV0dXJuIHByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICBrZXlcbiAgICAgICAgICApfSBzaG91bGQgbm90IHN0YXJ0IHdpdGggXCIkXCIgb3IgXCJfXCIgd2hpY2ggYXJlIHJlc2VydmVkIHByZWZpeGVzIGZvciBWdWUgaW50ZXJuYWxzLmBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiBzZXR1cFN0YXRlW2tleV0sXG4gICAgICAgIHNldDogTk9PUFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3Qgd2FyblJ1bnRpbWVVc2FnZSA9IChtZXRob2QpID0+IHdhcm4kMShcbiAgYCR7bWV0aG9kfSgpIGlzIGEgY29tcGlsZXItaGludCBoZWxwZXIgdGhhdCBpcyBvbmx5IHVzYWJsZSBpbnNpZGUgPHNjcmlwdCBzZXR1cD4gb2YgYSBzaW5nbGUgZmlsZSBjb21wb25lbnQuIEl0cyBhcmd1bWVudHMgc2hvdWxkIGJlIGNvbXBpbGVkIGF3YXkgYW5kIHBhc3NpbmcgaXQgYXQgcnVudGltZSBoYXMgbm8gZWZmZWN0LmBcbik7XG5mdW5jdGlvbiBkZWZpbmVQcm9wcygpIHtcbiAge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZVByb3BzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBkZWZpbmVFbWl0cygpIHtcbiAge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZUVtaXRzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBkZWZpbmVFeHBvc2UoZXhwb3NlZCkge1xuICB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShgZGVmaW5lRXhwb3NlYCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRlZmluZU9wdGlvbnMob3B0aW9ucykge1xuICB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShgZGVmaW5lT3B0aW9uc2ApO1xuICB9XG59XG5mdW5jdGlvbiBkZWZpbmVTbG90cygpIHtcbiAge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZVNsb3RzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBkZWZpbmVNb2RlbCgpIHtcbiAge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoXCJkZWZpbmVNb2RlbFwiKTtcbiAgfVxufVxuZnVuY3Rpb24gd2l0aERlZmF1bHRzKHByb3BzLCBkZWZhdWx0cykge1xuICB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShgd2l0aERlZmF1bHRzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiB1c2VTbG90cygpIHtcbiAgcmV0dXJuIGdldENvbnRleHQoKS5zbG90cztcbn1cbmZ1bmN0aW9uIHVzZUF0dHJzKCkge1xuICByZXR1cm4gZ2V0Q29udGV4dCgpLmF0dHJzO1xufVxuZnVuY3Rpb24gZ2V0Q29udGV4dCgpIHtcbiAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoIWkpIHtcbiAgICB3YXJuJDEoYHVzZUNvbnRleHQoKSBjYWxsZWQgd2l0aG91dCBhY3RpdmUgaW5zdGFuY2UuYCk7XG4gIH1cbiAgcmV0dXJuIGkuc2V0dXBDb250ZXh0IHx8IChpLnNldHVwQ29udGV4dCA9IGNyZWF0ZVNldHVwQ29udGV4dChpKSk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVQcm9wc09yRW1pdHMocHJvcHMpIHtcbiAgcmV0dXJuIGlzQXJyYXkocHJvcHMpID8gcHJvcHMucmVkdWNlKFxuICAgIChub3JtYWxpemVkLCBwKSA9PiAobm9ybWFsaXplZFtwXSA9IG51bGwsIG5vcm1hbGl6ZWQpLFxuICAgIHt9XG4gICkgOiBwcm9wcztcbn1cbmZ1bmN0aW9uIG1lcmdlRGVmYXVsdHMocmF3LCBkZWZhdWx0cykge1xuICBjb25zdCBwcm9wcyA9IG5vcm1hbGl6ZVByb3BzT3JFbWl0cyhyYXcpO1xuICBmb3IgKGNvbnN0IGtleSBpbiBkZWZhdWx0cykge1xuICAgIGlmIChrZXkuc3RhcnRzV2l0aChcIl9fc2tpcFwiKSkgY29udGludWU7XG4gICAgbGV0IG9wdCA9IHByb3BzW2tleV07XG4gICAgaWYgKG9wdCkge1xuICAgICAgaWYgKGlzQXJyYXkob3B0KSB8fCBpc0Z1bmN0aW9uKG9wdCkpIHtcbiAgICAgICAgb3B0ID0gcHJvcHNba2V5XSA9IHsgdHlwZTogb3B0LCBkZWZhdWx0OiBkZWZhdWx0c1trZXldIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHQuZGVmYXVsdCA9IGRlZmF1bHRzW2tleV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcHQgPT09IG51bGwpIHtcbiAgICAgIG9wdCA9IHByb3BzW2tleV0gPSB7IGRlZmF1bHQ6IGRlZmF1bHRzW2tleV0gfTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybiQxKGBwcm9wcyBkZWZhdWx0IGtleSBcIiR7a2V5fVwiIGhhcyBubyBjb3JyZXNwb25kaW5nIGRlY2xhcmF0aW9uLmApO1xuICAgIH1cbiAgICBpZiAob3B0ICYmIGRlZmF1bHRzW2BfX3NraXBfJHtrZXl9YF0pIHtcbiAgICAgIG9wdC5za2lwRmFjdG9yeSA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wcztcbn1cbmZ1bmN0aW9uIG1lcmdlTW9kZWxzKGEsIGIpIHtcbiAgaWYgKCFhIHx8ICFiKSByZXR1cm4gYSB8fCBiO1xuICBpZiAoaXNBcnJheShhKSAmJiBpc0FycmF5KGIpKSByZXR1cm4gYS5jb25jYXQoYik7XG4gIHJldHVybiBleHRlbmQoe30sIG5vcm1hbGl6ZVByb3BzT3JFbWl0cyhhKSwgbm9ybWFsaXplUHJvcHNPckVtaXRzKGIpKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVByb3BzUmVzdFByb3h5KHByb3BzLCBleGNsdWRlZEtleXMpIHtcbiAgY29uc3QgcmV0ID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKCFleGNsdWRlZEtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJldCwga2V5LCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogKCkgPT4gcHJvcHNba2V5XVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiB3aXRoQXN5bmNDb250ZXh0KGdldEF3YWl0YWJsZSkge1xuICBjb25zdCBjdHggPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgaWYgKCFjdHgpIHtcbiAgICB3YXJuJDEoXG4gICAgICBgd2l0aEFzeW5jQ29udGV4dCBjYWxsZWQgd2l0aG91dCBhY3RpdmUgY3VycmVudCBpbnN0YW5jZS4gVGhpcyBpcyBsaWtlbHkgYSBidWcuYFxuICAgICk7XG4gIH1cbiAgbGV0IGF3YWl0YWJsZSA9IGdldEF3YWl0YWJsZSgpO1xuICB1bnNldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoaXNQcm9taXNlKGF3YWl0YWJsZSkpIHtcbiAgICBhd2FpdGFibGUgPSBhd2FpdGFibGUuY2F0Y2goKGUpID0+IHtcbiAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShjdHgpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gW2F3YWl0YWJsZSwgKCkgPT4gc2V0Q3VycmVudEluc3RhbmNlKGN0eCldO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEdXBsaWNhdGVDaGVja2VyKCkge1xuICBjb25zdCBjYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKHR5cGUsIGtleSkgPT4ge1xuICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICB3YXJuJDEoYCR7dHlwZX0gcHJvcGVydHkgXCIke2tleX1cIiBpcyBhbHJlYWR5IGRlZmluZWQgaW4gJHtjYWNoZVtrZXldfS5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FjaGVba2V5XSA9IHR5cGU7XG4gICAgfVxuICB9O1xufVxubGV0IHNob3VsZENhY2hlQWNjZXNzID0gdHJ1ZTtcbmZ1bmN0aW9uIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSkge1xuICBjb25zdCBvcHRpb25zID0gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpO1xuICBjb25zdCBwdWJsaWNUaGlzID0gaW5zdGFuY2UucHJveHk7XG4gIGNvbnN0IGN0eCA9IGluc3RhbmNlLmN0eDtcbiAgc2hvdWxkQ2FjaGVBY2Nlc3MgPSBmYWxzZTtcbiAgaWYgKG9wdGlvbnMuYmVmb3JlQ3JlYXRlKSB7XG4gICAgY2FsbEhvb2skMShvcHRpb25zLmJlZm9yZUNyZWF0ZSwgaW5zdGFuY2UsIFwiYmNcIik7XG4gIH1cbiAgY29uc3Qge1xuICAgIC8vIHN0YXRlXG4gICAgZGF0YTogZGF0YU9wdGlvbnMsXG4gICAgY29tcHV0ZWQ6IGNvbXB1dGVkT3B0aW9ucyxcbiAgICBtZXRob2RzLFxuICAgIHdhdGNoOiB3YXRjaE9wdGlvbnMsXG4gICAgcHJvdmlkZTogcHJvdmlkZU9wdGlvbnMsXG4gICAgaW5qZWN0OiBpbmplY3RPcHRpb25zLFxuICAgIC8vIGxpZmVjeWNsZVxuICAgIGNyZWF0ZWQsXG4gICAgYmVmb3JlTW91bnQsXG4gICAgbW91bnRlZCxcbiAgICBiZWZvcmVVcGRhdGUsXG4gICAgdXBkYXRlZCxcbiAgICBhY3RpdmF0ZWQsXG4gICAgZGVhY3RpdmF0ZWQsXG4gICAgYmVmb3JlRGVzdHJveSxcbiAgICBiZWZvcmVVbm1vdW50LFxuICAgIGRlc3Ryb3llZCxcbiAgICB1bm1vdW50ZWQsXG4gICAgcmVuZGVyLFxuICAgIHJlbmRlclRyYWNrZWQsXG4gICAgcmVuZGVyVHJpZ2dlcmVkLFxuICAgIGVycm9yQ2FwdHVyZWQsXG4gICAgc2VydmVyUHJlZmV0Y2gsXG4gICAgLy8gcHVibGljIEFQSVxuICAgIGV4cG9zZSxcbiAgICBpbmhlcml0QXR0cnMsXG4gICAgLy8gYXNzZXRzXG4gICAgY29tcG9uZW50cyxcbiAgICBkaXJlY3RpdmVzLFxuICAgIGZpbHRlcnNcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSA7XG4gIHtcbiAgICBjb25zdCBbcHJvcHNPcHRpb25zXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcbiAgICBpZiAocHJvcHNPcHRpb25zKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wc09wdGlvbnMpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiUHJvcHNcIiAvKiBQUk9QUyAqLywga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGluamVjdE9wdGlvbnMpIHtcbiAgICByZXNvbHZlSW5qZWN0aW9ucyhpbmplY3RPcHRpb25zLCBjdHgsIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyk7XG4gIH1cbiAgaWYgKG1ldGhvZHMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBjb25zdCBtZXRob2RIYW5kbGVyID0gbWV0aG9kc1trZXldO1xuICAgICAgaWYgKGlzRnVuY3Rpb24obWV0aG9kSGFuZGxlcikpIHtcbiAgICAgICAge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IG1ldGhvZEhhbmRsZXIuYmluZChwdWJsaWNUaGlzKSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJNZXRob2RzXCIgLyogTUVUSE9EUyAqLywga2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybiQxKFxuICAgICAgICAgIGBNZXRob2QgXCIke2tleX1cIiBoYXMgdHlwZSBcIiR7dHlwZW9mIG1ldGhvZEhhbmRsZXJ9XCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P2BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGRhdGFPcHRpb25zKSB7XG4gICAgaWYgKCFpc0Z1bmN0aW9uKGRhdGFPcHRpb25zKSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgVGhlIGRhdGEgb3B0aW9uIG11c3QgYmUgYSBmdW5jdGlvbi4gUGxhaW4gb2JqZWN0IHVzYWdlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGRhdGFPcHRpb25zLmNhbGwocHVibGljVGhpcywgcHVibGljVGhpcyk7XG4gICAgaWYgKGlzUHJvbWlzZShkYXRhKSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgZGF0YSgpIHJldHVybmVkIGEgUHJvbWlzZSAtIG5vdGUgZGF0YSgpIGNhbm5vdCBiZSBhc3luYzsgSWYgeW91IGludGVuZCB0byBwZXJmb3JtIGRhdGEgZmV0Y2hpbmcgYmVmb3JlIGNvbXBvbmVudCByZW5kZXJzLCB1c2UgYXN5bmMgc2V0dXAoKSArIDxTdXNwZW5zZT4uYFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgd2FybiQxKGBkYXRhKCkgc2hvdWxkIHJldHVybiBhbiBvYmplY3QuYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLmRhdGEgPSByZWFjdGl2ZShkYXRhKTtcbiAgICAgIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkRhdGFcIiAvKiBEQVRBICovLCBrZXkpO1xuICAgICAgICAgIGlmICghaXNSZXNlcnZlZFByZWZpeChrZXlbMF0pKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBnZXQ6ICgpID0+IGRhdGFba2V5XSxcbiAgICAgICAgICAgICAgc2V0OiBOT09QXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc2hvdWxkQ2FjaGVBY2Nlc3MgPSB0cnVlO1xuICBpZiAoY29tcHV0ZWRPcHRpb25zKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gY29tcHV0ZWRPcHRpb25zKSB7XG4gICAgICBjb25zdCBvcHQgPSBjb21wdXRlZE9wdGlvbnNba2V5XTtcbiAgICAgIGNvbnN0IGdldCA9IGlzRnVuY3Rpb24ob3B0KSA/IG9wdC5iaW5kKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpIDogaXNGdW5jdGlvbihvcHQuZ2V0KSA/IG9wdC5nZXQuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKSA6IE5PT1A7XG4gICAgICBpZiAoZ2V0ID09PSBOT09QKSB7XG4gICAgICAgIHdhcm4kMShgQ29tcHV0ZWQgcHJvcGVydHkgXCIke2tleX1cIiBoYXMgbm8gZ2V0dGVyLmApO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2V0ID0gIWlzRnVuY3Rpb24ob3B0KSAmJiBpc0Z1bmN0aW9uKG9wdC5zZXQpID8gb3B0LnNldC5iaW5kKHB1YmxpY1RoaXMpIDogKCkgPT4ge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgYFdyaXRlIG9wZXJhdGlvbiBmYWlsZWQ6IGNvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgcmVhZG9ubHkuYFxuICAgICAgICApO1xuICAgICAgfSA7XG4gICAgICBjb25zdCBjID0gY29tcHV0ZWQoe1xuICAgICAgICBnZXQsXG4gICAgICAgIHNldFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IGMudmFsdWUsXG4gICAgICAgIHNldDogKHYpID0+IGMudmFsdWUgPSB2XG4gICAgICB9KTtcbiAgICAgIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiQ29tcHV0ZWRcIiAvKiBDT01QVVRFRCAqLywga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHdhdGNoT3B0aW9ucykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHdhdGNoT3B0aW9ucykge1xuICAgICAgY3JlYXRlV2F0Y2hlcih3YXRjaE9wdGlvbnNba2V5XSwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpO1xuICAgIH1cbiAgfVxuICBpZiAocHJvdmlkZU9wdGlvbnMpIHtcbiAgICBjb25zdCBwcm92aWRlcyA9IGlzRnVuY3Rpb24ocHJvdmlkZU9wdGlvbnMpID8gcHJvdmlkZU9wdGlvbnMuY2FsbChwdWJsaWNUaGlzKSA6IHByb3ZpZGVPcHRpb25zO1xuICAgIFJlZmxlY3Qub3duS2V5cyhwcm92aWRlcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBwcm92aWRlKGtleSwgcHJvdmlkZXNba2V5XSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKGNyZWF0ZWQpIHtcbiAgICBjYWxsSG9vayQxKGNyZWF0ZWQsIGluc3RhbmNlLCBcImNcIik7XG4gIH1cbiAgZnVuY3Rpb24gcmVnaXN0ZXJMaWZlY3ljbGVIb29rKHJlZ2lzdGVyLCBob29rKSB7XG4gICAgaWYgKGlzQXJyYXkoaG9vaykpIHtcbiAgICAgIGhvb2suZm9yRWFjaCgoX2hvb2spID0+IHJlZ2lzdGVyKF9ob29rLmJpbmQocHVibGljVGhpcykpKTtcbiAgICB9IGVsc2UgaWYgKGhvb2spIHtcbiAgICAgIHJlZ2lzdGVyKGhvb2suYmluZChwdWJsaWNUaGlzKSk7XG4gICAgfVxuICB9XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkJlZm9yZU1vdW50LCBiZWZvcmVNb3VudCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbk1vdW50ZWQsIG1vdW50ZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVVcGRhdGUsIGJlZm9yZVVwZGF0ZSk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblVwZGF0ZWQsIHVwZGF0ZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25BY3RpdmF0ZWQsIGFjdGl2YXRlZCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkRlYWN0aXZhdGVkLCBkZWFjdGl2YXRlZCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkVycm9yQ2FwdHVyZWQsIGVycm9yQ2FwdHVyZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25SZW5kZXJUcmFja2VkLCByZW5kZXJUcmFja2VkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uUmVuZGVyVHJpZ2dlcmVkLCByZW5kZXJUcmlnZ2VyZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVVbm1vdW50LCBiZWZvcmVVbm1vdW50KTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uVW5tb3VudGVkLCB1bm1vdW50ZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25TZXJ2ZXJQcmVmZXRjaCwgc2VydmVyUHJlZmV0Y2gpO1xuICBpZiAoaXNBcnJheShleHBvc2UpKSB7XG4gICAgaWYgKGV4cG9zZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGV4cG9zZWQgPSBpbnN0YW5jZS5leHBvc2VkIHx8IChpbnN0YW5jZS5leHBvc2VkID0ge30pO1xuICAgICAgZXhwb3NlLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3NlZCwga2V5LCB7XG4gICAgICAgICAgZ2V0OiAoKSA9PiBwdWJsaWNUaGlzW2tleV0sXG4gICAgICAgICAgc2V0OiAodmFsKSA9PiBwdWJsaWNUaGlzW2tleV0gPSB2YWxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFpbnN0YW5jZS5leHBvc2VkKSB7XG4gICAgICBpbnN0YW5jZS5leHBvc2VkID0ge307XG4gICAgfVxuICB9XG4gIGlmIChyZW5kZXIgJiYgaW5zdGFuY2UucmVuZGVyID09PSBOT09QKSB7XG4gICAgaW5zdGFuY2UucmVuZGVyID0gcmVuZGVyO1xuICB9XG4gIGlmIChpbmhlcml0QXR0cnMgIT0gbnVsbCkge1xuICAgIGluc3RhbmNlLmluaGVyaXRBdHRycyA9IGluaGVyaXRBdHRycztcbiAgfVxuICBpZiAoY29tcG9uZW50cykgaW5zdGFuY2UuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gIGlmIChkaXJlY3RpdmVzKSBpbnN0YW5jZS5kaXJlY3RpdmVzID0gZGlyZWN0aXZlcztcbiAgaWYgKHNlcnZlclByZWZldGNoKSB7XG4gICAgbWFya0FzeW5jQm91bmRhcnkoaW5zdGFuY2UpO1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0aW9ucyhpbmplY3RPcHRpb25zLCBjdHgsIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IE5PT1ApIHtcbiAgaWYgKGlzQXJyYXkoaW5qZWN0T3B0aW9ucykpIHtcbiAgICBpbmplY3RPcHRpb25zID0gbm9ybWFsaXplSW5qZWN0KGluamVjdE9wdGlvbnMpO1xuICB9XG4gIGZvciAoY29uc3Qga2V5IGluIGluamVjdE9wdGlvbnMpIHtcbiAgICBjb25zdCBvcHQgPSBpbmplY3RPcHRpb25zW2tleV07XG4gICAgbGV0IGluamVjdGVkO1xuICAgIGlmIChpc09iamVjdChvcHQpKSB7XG4gICAgICBpZiAoXCJkZWZhdWx0XCIgaW4gb3B0KSB7XG4gICAgICAgIGluamVjdGVkID0gaW5qZWN0KFxuICAgICAgICAgIG9wdC5mcm9tIHx8IGtleSxcbiAgICAgICAgICBvcHQuZGVmYXVsdCxcbiAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmplY3RlZCA9IGluamVjdChvcHQuZnJvbSB8fCBrZXkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmplY3RlZCA9IGluamVjdChvcHQpO1xuICAgIH1cbiAgICBpZiAoaXNSZWYoaW5qZWN0ZWQpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IGluamVjdGVkLnZhbHVlLFxuICAgICAgICBzZXQ6ICh2KSA9PiBpbmplY3RlZC52YWx1ZSA9IHZcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHhba2V5XSA9IGluamVjdGVkO1xuICAgIH1cbiAgICB7XG4gICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJJbmplY3RcIiAvKiBJTkpFQ1QgKi8sIGtleSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBjYWxsSG9vayQxKGhvb2ssIGluc3RhbmNlLCB0eXBlKSB7XG4gIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKFxuICAgIGlzQXJyYXkoaG9vaykgPyBob29rLm1hcCgoaCkgPT4gaC5iaW5kKGluc3RhbmNlLnByb3h5KSkgOiBob29rLmJpbmQoaW5zdGFuY2UucHJveHkpLFxuICAgIGluc3RhbmNlLFxuICAgIHR5cGVcbiAgKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIocmF3LCBjdHgsIHB1YmxpY1RoaXMsIGtleSkge1xuICBsZXQgZ2V0dGVyID0ga2V5LmluY2x1ZGVzKFwiLlwiKSA/IGNyZWF0ZVBhdGhHZXR0ZXIocHVibGljVGhpcywga2V5KSA6ICgpID0+IHB1YmxpY1RoaXNba2V5XTtcbiAgaWYgKGlzU3RyaW5nKHJhdykpIHtcbiAgICBjb25zdCBoYW5kbGVyID0gY3R4W3Jhd107XG4gICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICAgIHtcbiAgICAgICAgd2F0Y2goZ2V0dGVyLCBoYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2FybiQxKGBJbnZhbGlkIHdhdGNoIGhhbmRsZXIgc3BlY2lmaWVkIGJ5IGtleSBcIiR7cmF3fVwiYCwgaGFuZGxlcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24ocmF3KSkge1xuICAgIHtcbiAgICAgIHdhdGNoKGdldHRlciwgcmF3LmJpbmQocHVibGljVGhpcykpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChyYXcpKSB7XG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgICAgcmF3LmZvckVhY2goKHIpID0+IGNyZWF0ZVdhdGNoZXIociwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaGFuZGxlciA9IGlzRnVuY3Rpb24ocmF3LmhhbmRsZXIpID8gcmF3LmhhbmRsZXIuYmluZChwdWJsaWNUaGlzKSA6IGN0eFtyYXcuaGFuZGxlcl07XG4gICAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgICB3YXRjaChnZXR0ZXIsIGhhbmRsZXIsIHJhdyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuJDEoYEludmFsaWQgd2F0Y2ggaGFuZGxlciBzcGVjaWZpZWQgYnkga2V5IFwiJHtyYXcuaGFuZGxlcn1cImAsIGhhbmRsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3YXJuJDEoYEludmFsaWQgd2F0Y2ggb3B0aW9uOiBcIiR7a2V5fVwiYCwgcmF3KTtcbiAgfVxufVxuZnVuY3Rpb24gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpIHtcbiAgY29uc3QgYmFzZSA9IGluc3RhbmNlLnR5cGU7XG4gIGNvbnN0IHsgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucyB9ID0gYmFzZTtcbiAgY29uc3Qge1xuICAgIG1peGluczogZ2xvYmFsTWl4aW5zLFxuICAgIG9wdGlvbnNDYWNoZTogY2FjaGUsXG4gICAgY29uZmlnOiB7IG9wdGlvbk1lcmdlU3RyYXRlZ2llcyB9XG4gIH0gPSBpbnN0YW5jZS5hcHBDb250ZXh0O1xuICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoYmFzZSk7XG4gIGxldCByZXNvbHZlZDtcbiAgaWYgKGNhY2hlZCkge1xuICAgIHJlc29sdmVkID0gY2FjaGVkO1xuICB9IGVsc2UgaWYgKCFnbG9iYWxNaXhpbnMubGVuZ3RoICYmICFtaXhpbnMgJiYgIWV4dGVuZHNPcHRpb25zKSB7XG4gICAge1xuICAgICAgcmVzb2x2ZWQgPSBiYXNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXNvbHZlZCA9IHt9O1xuICAgIGlmIChnbG9iYWxNaXhpbnMubGVuZ3RoKSB7XG4gICAgICBnbG9iYWxNaXhpbnMuZm9yRWFjaChcbiAgICAgICAgKG0pID0+IG1lcmdlT3B0aW9ucyhyZXNvbHZlZCwgbSwgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzLCB0cnVlKVxuICAgICAgKTtcbiAgICB9XG4gICAgbWVyZ2VPcHRpb25zKHJlc29sdmVkLCBiYXNlLCBvcHRpb25NZXJnZVN0cmF0ZWdpZXMpO1xuICB9XG4gIGlmIChpc09iamVjdChiYXNlKSkge1xuICAgIGNhY2hlLnNldChiYXNlLCByZXNvbHZlZCk7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVkO1xufVxuZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHRvLCBmcm9tLCBzdHJhdHMsIGFzTWl4aW4gPSBmYWxzZSkge1xuICBjb25zdCB7IG1peGlucywgZXh0ZW5kczogZXh0ZW5kc09wdGlvbnMgfSA9IGZyb207XG4gIGlmIChleHRlbmRzT3B0aW9ucykge1xuICAgIG1lcmdlT3B0aW9ucyh0bywgZXh0ZW5kc09wdGlvbnMsIHN0cmF0cywgdHJ1ZSk7XG4gIH1cbiAgaWYgKG1peGlucykge1xuICAgIG1peGlucy5mb3JFYWNoKFxuICAgICAgKG0pID0+IG1lcmdlT3B0aW9ucyh0bywgbSwgc3RyYXRzLCB0cnVlKVxuICAgICk7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gZnJvbSkge1xuICAgIGlmIChhc01peGluICYmIGtleSA9PT0gXCJleHBvc2VcIikge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgXCJleHBvc2VcIiBvcHRpb24gaXMgaWdub3JlZCB3aGVuIGRlY2xhcmVkIGluIG1peGlucyBvciBleHRlbmRzLiBJdCBzaG91bGQgb25seSBiZSBkZWNsYXJlZCBpbiB0aGUgYmFzZSBjb21wb25lbnQgaXRzZWxmLmBcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHN0cmF0ID0gaW50ZXJuYWxPcHRpb25NZXJnZVN0cmF0c1trZXldIHx8IHN0cmF0cyAmJiBzdHJhdHNba2V5XTtcbiAgICAgIHRvW2tleV0gPSBzdHJhdCA/IHN0cmF0KHRvW2tleV0sIGZyb21ba2V5XSkgOiBmcm9tW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0bztcbn1cbmNvbnN0IGludGVybmFsT3B0aW9uTWVyZ2VTdHJhdHMgPSB7XG4gIGRhdGE6IG1lcmdlRGF0YUZuLFxuICBwcm9wczogbWVyZ2VFbWl0c09yUHJvcHNPcHRpb25zLFxuICBlbWl0czogbWVyZ2VFbWl0c09yUHJvcHNPcHRpb25zLFxuICAvLyBvYmplY3RzXG4gIG1ldGhvZHM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgY29tcHV0ZWQ6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgLy8gbGlmZWN5Y2xlXG4gIGJlZm9yZUNyZWF0ZTogbWVyZ2VBc0FycmF5JDEsXG4gIGNyZWF0ZWQ6IG1lcmdlQXNBcnJheSQxLFxuICBiZWZvcmVNb3VudDogbWVyZ2VBc0FycmF5JDEsXG4gIG1vdW50ZWQ6IG1lcmdlQXNBcnJheSQxLFxuICBiZWZvcmVVcGRhdGU6IG1lcmdlQXNBcnJheSQxLFxuICB1cGRhdGVkOiBtZXJnZUFzQXJyYXkkMSxcbiAgYmVmb3JlRGVzdHJveTogbWVyZ2VBc0FycmF5JDEsXG4gIGJlZm9yZVVubW91bnQ6IG1lcmdlQXNBcnJheSQxLFxuICBkZXN0cm95ZWQ6IG1lcmdlQXNBcnJheSQxLFxuICB1bm1vdW50ZWQ6IG1lcmdlQXNBcnJheSQxLFxuICBhY3RpdmF0ZWQ6IG1lcmdlQXNBcnJheSQxLFxuICBkZWFjdGl2YXRlZDogbWVyZ2VBc0FycmF5JDEsXG4gIGVycm9yQ2FwdHVyZWQ6IG1lcmdlQXNBcnJheSQxLFxuICBzZXJ2ZXJQcmVmZXRjaDogbWVyZ2VBc0FycmF5JDEsXG4gIC8vIGFzc2V0c1xuICBjb21wb25lbnRzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gIGRpcmVjdGl2ZXM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgLy8gd2F0Y2hcbiAgd2F0Y2g6IG1lcmdlV2F0Y2hPcHRpb25zLFxuICAvLyBwcm92aWRlIC8gaW5qZWN0XG4gIHByb3ZpZGU6IG1lcmdlRGF0YUZuLFxuICBpbmplY3Q6IG1lcmdlSW5qZWN0XG59O1xuZnVuY3Rpb24gbWVyZ2VEYXRhRm4odG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7XG4gICAgcmV0dXJuIHRvO1xuICB9XG4gIGlmICghdG8pIHtcbiAgICByZXR1cm4gZnJvbTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuKCkge1xuICAgIHJldHVybiAoZXh0ZW5kKShcbiAgICAgIGlzRnVuY3Rpb24odG8pID8gdG8uY2FsbCh0aGlzLCB0aGlzKSA6IHRvLFxuICAgICAgaXNGdW5jdGlvbihmcm9tKSA/IGZyb20uY2FsbCh0aGlzLCB0aGlzKSA6IGZyb21cbiAgICApO1xuICB9O1xufVxuZnVuY3Rpb24gbWVyZ2VJbmplY3QodG8sIGZyb20pIHtcbiAgcmV0dXJuIG1lcmdlT2JqZWN0T3B0aW9ucyhub3JtYWxpemVJbmplY3QodG8pLCBub3JtYWxpemVJbmplY3QoZnJvbSkpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0KHJhdykge1xuICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tyYXdbaV1dID0gcmF3W2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIHJldHVybiByYXc7XG59XG5mdW5jdGlvbiBtZXJnZUFzQXJyYXkkMSh0bywgZnJvbSkge1xuICByZXR1cm4gdG8gPyBbLi4ubmV3IFNldChbXS5jb25jYXQodG8sIGZyb20pKV0gOiBmcm9tO1xufVxuZnVuY3Rpb24gbWVyZ2VPYmplY3RPcHRpb25zKHRvLCBmcm9tKSB7XG4gIHJldHVybiB0byA/IGV4dGVuZCgvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSwgdG8sIGZyb20pIDogZnJvbTtcbn1cbmZ1bmN0aW9uIG1lcmdlRW1pdHNPclByb3BzT3B0aW9ucyh0bywgZnJvbSkge1xuICBpZiAodG8pIHtcbiAgICBpZiAoaXNBcnJheSh0bykgJiYgaXNBcnJheShmcm9tKSkge1xuICAgICAgcmV0dXJuIFsuLi4vKiBAX19QVVJFX18gKi8gbmV3IFNldChbLi4udG8sIC4uLmZyb21dKV07XG4gICAgfVxuICAgIHJldHVybiBleHRlbmQoXG4gICAgICAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIG5vcm1hbGl6ZVByb3BzT3JFbWl0cyh0byksXG4gICAgICBub3JtYWxpemVQcm9wc09yRW1pdHMoZnJvbSAhPSBudWxsID8gZnJvbSA6IHt9KVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZyb207XG4gIH1cbn1cbmZ1bmN0aW9uIG1lcmdlV2F0Y2hPcHRpb25zKHRvLCBmcm9tKSB7XG4gIGlmICghdG8pIHJldHVybiBmcm9tO1xuICBpZiAoIWZyb20pIHJldHVybiB0bztcbiAgY29uc3QgbWVyZ2VkID0gZXh0ZW5kKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpLCB0byk7XG4gIGZvciAoY29uc3Qga2V5IGluIGZyb20pIHtcbiAgICBtZXJnZWRba2V5XSA9IG1lcmdlQXNBcnJheSQxKHRvW2tleV0sIGZyb21ba2V5XSk7XG4gIH1cbiAgcmV0dXJuIG1lcmdlZDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXBwQ29udGV4dCgpIHtcbiAgcmV0dXJuIHtcbiAgICBhcHA6IG51bGwsXG4gICAgY29uZmlnOiB7XG4gICAgICBpc05hdGl2ZVRhZzogTk8sXG4gICAgICBwZXJmb3JtYW5jZTogZmFsc2UsXG4gICAgICBnbG9iYWxQcm9wZXJ0aWVzOiB7fSxcbiAgICAgIG9wdGlvbk1lcmdlU3RyYXRlZ2llczoge30sXG4gICAgICBlcnJvckhhbmRsZXI6IHZvaWQgMCxcbiAgICAgIHdhcm5IYW5kbGVyOiB2b2lkIDAsXG4gICAgICBjb21waWxlck9wdGlvbnM6IHt9XG4gICAgfSxcbiAgICBtaXhpbnM6IFtdLFxuICAgIGNvbXBvbmVudHM6IHt9LFxuICAgIGRpcmVjdGl2ZXM6IHt9LFxuICAgIHByb3ZpZGVzOiAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICBvcHRpb25zQ2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLFxuICAgIHByb3BzQ2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLFxuICAgIGVtaXRzQ2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpXG4gIH07XG59XG5sZXQgdWlkJDEgPSAwO1xuZnVuY3Rpb24gY3JlYXRlQXBwQVBJKHJlbmRlciwgaHlkcmF0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQXBwKHJvb3RDb21wb25lbnQsIHJvb3RQcm9wcyA9IG51bGwpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24ocm9vdENvbXBvbmVudCkpIHtcbiAgICAgIHJvb3RDb21wb25lbnQgPSBleHRlbmQoe30sIHJvb3RDb21wb25lbnQpO1xuICAgIH1cbiAgICBpZiAocm9vdFByb3BzICE9IG51bGwgJiYgIWlzT2JqZWN0KHJvb3RQcm9wcykpIHtcbiAgICAgIHdhcm4kMShgcm9vdCBwcm9wcyBwYXNzZWQgdG8gYXBwLm1vdW50KCkgbXVzdCBiZSBhbiBvYmplY3QuYCk7XG4gICAgICByb290UHJvcHMgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xuICAgIGNvbnN0IGluc3RhbGxlZFBsdWdpbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbiAgICBjb25zdCBwbHVnaW5DbGVhbnVwRm5zID0gW107XG4gICAgbGV0IGlzTW91bnRlZCA9IGZhbHNlO1xuICAgIGNvbnN0IGFwcCA9IGNvbnRleHQuYXBwID0ge1xuICAgICAgX3VpZDogdWlkJDErKyxcbiAgICAgIF9jb21wb25lbnQ6IHJvb3RDb21wb25lbnQsXG4gICAgICBfcHJvcHM6IHJvb3RQcm9wcyxcbiAgICAgIF9jb250YWluZXI6IG51bGwsXG4gICAgICBfY29udGV4dDogY29udGV4dCxcbiAgICAgIF9pbnN0YW5jZTogbnVsbCxcbiAgICAgIHZlcnNpb24sXG4gICAgICBnZXQgY29uZmlnKCkge1xuICAgICAgICByZXR1cm4gY29udGV4dC5jb25maWc7XG4gICAgICB9LFxuICAgICAgc2V0IGNvbmZpZyh2KSB7XG4gICAgICAgIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgYXBwLmNvbmZpZyBjYW5ub3QgYmUgcmVwbGFjZWQuIE1vZGlmeSBpbmRpdmlkdWFsIG9wdGlvbnMgaW5zdGVhZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHVzZShwbHVnaW4sIC4uLm9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaGFzKHBsdWdpbikpIHtcbiAgICAgICAgICB3YXJuJDEoYFBsdWdpbiBoYXMgYWxyZWFkeSBiZWVuIGFwcGxpZWQgdG8gdGFyZ2V0IGFwcC5gKTtcbiAgICAgICAgfSBlbHNlIGlmIChwbHVnaW4gJiYgaXNGdW5jdGlvbihwbHVnaW4uaW5zdGFsbCkpIHtcbiAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xuICAgICAgICAgIHBsdWdpbi5pbnN0YWxsKGFwcCwgLi4ub3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihwbHVnaW4pKSB7XG4gICAgICAgICAgaW5zdGFsbGVkUGx1Z2lucy5hZGQocGx1Z2luKTtcbiAgICAgICAgICBwbHVnaW4oYXBwLCAuLi5vcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgQSBwbHVnaW4gbXVzdCBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgd2l0aCBhbiBcImluc3RhbGxcIiBmdW5jdGlvbi5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgfSxcbiAgICAgIG1peGluKG1peGluKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIWNvbnRleHQubWl4aW5zLmluY2x1ZGVzKG1peGluKSkge1xuICAgICAgICAgICAgY29udGV4dC5taXhpbnMucHVzaChtaXhpbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJNaXhpbiBoYXMgYWxyZWFkeSBiZWVuIGFwcGxpZWQgdG8gdGFyZ2V0IGFwcFwiICsgKG1peGluLm5hbWUgPyBgOiAke21peGluLm5hbWV9YCA6IFwiXCIpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgfSxcbiAgICAgIGNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpIHtcbiAgICAgICAge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lLCBjb250ZXh0LmNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4gY29udGV4dC5jb21wb25lbnRzW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0LmNvbXBvbmVudHNbbmFtZV0pIHtcbiAgICAgICAgICB3YXJuJDEoYENvbXBvbmVudCBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV0gPSBjb21wb25lbnQ7XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgICB9LFxuICAgICAgZGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZSkge1xuICAgICAgICB7XG4gICAgICAgICAgdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGlyZWN0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5kaXJlY3RpdmVzW25hbWVdKSB7XG4gICAgICAgICAgd2FybiQxKGBEaXJlY3RpdmUgXCIke25hbWV9XCIgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIGluIHRhcmdldCBhcHAuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5kaXJlY3RpdmVzW25hbWVdID0gZGlyZWN0aXZlO1xuICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgfSxcbiAgICAgIG1vdW50KHJvb3RDb250YWluZXIsIGlzSHlkcmF0ZSwgbmFtZXNwYWNlKSB7XG4gICAgICAgIGlmICghaXNNb3VudGVkKSB7XG4gICAgICAgICAgaWYgKHJvb3RDb250YWluZXIuX192dWVfYXBwX18pIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYFRoZXJlIGlzIGFscmVhZHkgYW4gYXBwIGluc3RhbmNlIG1vdW50ZWQgb24gdGhlIGhvc3QgY29udGFpbmVyLlxuIElmIHlvdSB3YW50IHRvIG1vdW50IGFub3RoZXIgYXBwIG9uIHRoZSBzYW1lIGhvc3QgY29udGFpbmVyLCB5b3UgbmVlZCB0byB1bm1vdW50IHRoZSBwcmV2aW91cyBhcHAgYnkgY2FsbGluZyBcXGBhcHAudW5tb3VudCgpXFxgIGZpcnN0LmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHZub2RlID0gYXBwLl9jZVZOb2RlIHx8IGNyZWF0ZVZOb2RlKHJvb3RDb21wb25lbnQsIHJvb3RQcm9wcyk7XG4gICAgICAgICAgdm5vZGUuYXBwQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgICAgaWYgKG5hbWVzcGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbmFtZXNwYWNlID0gXCJzdmdcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZSA9IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29udGV4dC5yZWxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIHJlbmRlcihcbiAgICAgICAgICAgICAgICBjbG9uZVZOb2RlKHZub2RlKSxcbiAgICAgICAgICAgICAgICByb290Q29udGFpbmVyLFxuICAgICAgICAgICAgICAgIG5hbWVzcGFjZVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzSHlkcmF0ZSAmJiBoeWRyYXRlKSB7XG4gICAgICAgICAgICBoeWRyYXRlKHZub2RlLCByb290Q29udGFpbmVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVuZGVyKHZub2RlLCByb290Q29udGFpbmVyLCBuYW1lc3BhY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICAgIGFwcC5fY29udGFpbmVyID0gcm9vdENvbnRhaW5lcjtcbiAgICAgICAgICByb290Q29udGFpbmVyLl9fdnVlX2FwcF9fID0gYXBwO1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFwcC5faW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnQ7XG4gICAgICAgICAgICBkZXZ0b29sc0luaXRBcHAoYXBwLCB2ZXJzaW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlKHZub2RlLmNvbXBvbmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYEFwcCBoYXMgYWxyZWFkeSBiZWVuIG1vdW50ZWQuXG5JZiB5b3Ugd2FudCB0byByZW1vdW50IHRoZSBzYW1lIGFwcCwgbW92ZSB5b3VyIGFwcCBjcmVhdGlvbiBsb2dpYyBpbnRvIGEgZmFjdG9yeSBmdW5jdGlvbiBhbmQgY3JlYXRlIGZyZXNoIGFwcCBpbnN0YW5jZXMgZm9yIGVhY2ggbW91bnQgLSBlLmcuIFxcYGNvbnN0IGNyZWF0ZU15QXBwID0gKCkgPT4gY3JlYXRlQXBwKEFwcClcXGBgXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudChjbGVhbnVwRm4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhbnVwRm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIGBFeHBlY3RlZCBmdW5jdGlvbiBhcyBmaXJzdCBhcmd1bWVudCB0byBhcHAub25Vbm1vdW50KCksIGJ1dCBnb3QgJHt0eXBlb2YgY2xlYW51cEZufWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHBsdWdpbkNsZWFudXBGbnMucHVzaChjbGVhbnVwRm4pO1xuICAgICAgfSxcbiAgICAgIHVubW91bnQoKSB7XG4gICAgICAgIGlmIChpc01vdW50ZWQpIHtcbiAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhcbiAgICAgICAgICAgIHBsdWdpbkNsZWFudXBGbnMsXG4gICAgICAgICAgICBhcHAuX2luc3RhbmNlLFxuICAgICAgICAgICAgMTZcbiAgICAgICAgICApO1xuICAgICAgICAgIHJlbmRlcihudWxsLCBhcHAuX2NvbnRhaW5lcik7XG4gICAgICAgICAge1xuICAgICAgICAgICAgYXBwLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICBkZXZ0b29sc1VubW91bnRBcHAoYXBwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIGFwcC5fY29udGFpbmVyLl9fdnVlX2FwcF9fO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4kMShgQ2Fubm90IHVubW91bnQgYW4gYXBwIHRoYXQgaXMgbm90IG1vdW50ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm92aWRlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGtleSBpbiBjb250ZXh0LnByb3ZpZGVzKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYEFwcCBhbHJlYWR5IHByb3ZpZGVzIHByb3BlcnR5IHdpdGgga2V5IFwiJHtTdHJpbmcoa2V5KX1cIi4gSXQgd2lsbCBiZSBvdmVyd3JpdHRlbiB3aXRoIHRoZSBuZXcgdmFsdWUuYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5wcm92aWRlc1trZXldID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgICB9LFxuICAgICAgcnVuV2l0aENvbnRleHQoZm4pIHtcbiAgICAgICAgY29uc3QgbGFzdEFwcCA9IGN1cnJlbnRBcHA7XG4gICAgICAgIGN1cnJlbnRBcHAgPSBhcHA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgY3VycmVudEFwcCA9IGxhc3RBcHA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBhcHA7XG4gIH07XG59XG5sZXQgY3VycmVudEFwcCA9IG51bGw7XG5cbmZ1bmN0aW9uIHByb3ZpZGUoa2V5LCB2YWx1ZSkge1xuICBpZiAoIWN1cnJlbnRJbnN0YW5jZSkge1xuICAgIHtcbiAgICAgIHdhcm4kMShgcHJvdmlkZSgpIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHNldHVwKCkuYCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcztcbiAgICBjb25zdCBwYXJlbnRQcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wYXJlbnQgJiYgY3VycmVudEluc3RhbmNlLnBhcmVudC5wcm92aWRlcztcbiAgICBpZiAocGFyZW50UHJvdmlkZXMgPT09IHByb3ZpZGVzKSB7XG4gICAgICBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50UHJvdmlkZXMpO1xuICAgIH1cbiAgICBwcm92aWRlc1trZXldID0gdmFsdWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGluamVjdChrZXksIGRlZmF1bHRWYWx1ZSwgdHJlYXREZWZhdWx0QXNGYWN0b3J5ID0gZmFsc2UpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICBpZiAoaW5zdGFuY2UgfHwgY3VycmVudEFwcCkge1xuICAgIGNvbnN0IHByb3ZpZGVzID0gY3VycmVudEFwcCA/IGN1cnJlbnRBcHAuX2NvbnRleHQucHJvdmlkZXMgOiBpbnN0YW5jZSA/IGluc3RhbmNlLnBhcmVudCA9PSBudWxsID8gaW5zdGFuY2Uudm5vZGUuYXBwQ29udGV4dCAmJiBpbnN0YW5jZS52bm9kZS5hcHBDb250ZXh0LnByb3ZpZGVzIDogaW5zdGFuY2UucGFyZW50LnByb3ZpZGVzIDogdm9pZCAwO1xuICAgIGlmIChwcm92aWRlcyAmJiBrZXkgaW4gcHJvdmlkZXMpIHtcbiAgICAgIHJldHVybiBwcm92aWRlc1trZXldO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB0cmVhdERlZmF1bHRBc0ZhY3RvcnkgJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpID8gZGVmYXVsdFZhbHVlLmNhbGwoaW5zdGFuY2UgJiYgaW5zdGFuY2UucHJveHkpIDogZGVmYXVsdFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDEoYGluamVjdGlvbiBcIiR7U3RyaW5nKGtleSl9XCIgbm90IGZvdW5kLmApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3YXJuJDEoYGluamVjdCgpIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHNldHVwKCkgb3IgZnVuY3Rpb25hbCBjb21wb25lbnRzLmApO1xuICB9XG59XG5mdW5jdGlvbiBoYXNJbmplY3Rpb25Db250ZXh0KCkge1xuICByZXR1cm4gISEoY3VycmVudEluc3RhbmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSB8fCBjdXJyZW50QXBwKTtcbn1cblxuY29uc3QgaW50ZXJuYWxPYmplY3RQcm90byA9IHt9O1xuY29uc3QgY3JlYXRlSW50ZXJuYWxPYmplY3QgPSAoKSA9PiBPYmplY3QuY3JlYXRlKGludGVybmFsT2JqZWN0UHJvdG8pO1xuY29uc3QgaXNJbnRlcm5hbE9iamVjdCA9IChvYmopID0+IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBpbnRlcm5hbE9iamVjdFByb3RvO1xuXG5mdW5jdGlvbiBpbml0UHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBpc1N0YXRlZnVsLCBpc1NTUiA9IGZhbHNlKSB7XG4gIGNvbnN0IHByb3BzID0ge307XG4gIGNvbnN0IGF0dHJzID0gY3JlYXRlSW50ZXJuYWxPYmplY3QoKTtcbiAgaW5zdGFuY2UucHJvcHNEZWZhdWx0cyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpO1xuICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5wcm9wc09wdGlvbnNbMF0pIHtcbiAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7XG4gICAgICBwcm9wc1trZXldID0gdm9pZCAwO1xuICAgIH1cbiAgfVxuICB7XG4gICAgdmFsaWRhdGVQcm9wcyhyYXdQcm9wcyB8fCB7fSwgcHJvcHMsIGluc3RhbmNlKTtcbiAgfVxuICBpZiAoaXNTdGF0ZWZ1bCkge1xuICAgIGluc3RhbmNlLnByb3BzID0gaXNTU1IgPyBwcm9wcyA6IHNoYWxsb3dSZWFjdGl2ZShwcm9wcyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnN0YW5jZS50eXBlLnByb3BzKSB7XG4gICAgICBpbnN0YW5jZS5wcm9wcyA9IGF0dHJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZS5wcm9wcyA9IHByb3BzO1xuICAgIH1cbiAgfVxuICBpbnN0YW5jZS5hdHRycyA9IGF0dHJzO1xufVxuZnVuY3Rpb24gaXNJbkhtckNvbnRleHQoaW5zdGFuY2UpIHtcbiAgd2hpbGUgKGluc3RhbmNlKSB7XG4gICAgaWYgKGluc3RhbmNlLnR5cGUuX19obXJJZCkgcmV0dXJuIHRydWU7XG4gICAgaW5zdGFuY2UgPSBpbnN0YW5jZS5wYXJlbnQ7XG4gIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZVByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcmF3UHJldlByb3BzLCBvcHRpbWl6ZWQpIHtcbiAgY29uc3Qge1xuICAgIHByb3BzLFxuICAgIGF0dHJzLFxuICAgIHZub2RlOiB7IHBhdGNoRmxhZyB9XG4gIH0gPSBpbnN0YW5jZTtcbiAgY29uc3QgcmF3Q3VycmVudFByb3BzID0gdG9SYXcocHJvcHMpO1xuICBjb25zdCBbb3B0aW9uc10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XG4gIGxldCBoYXNBdHRyc0NoYW5nZWQgPSBmYWxzZTtcbiAgaWYgKFxuICAgIC8vIGFsd2F5cyBmb3JjZSBmdWxsIGRpZmYgaW4gZGV2XG4gICAgLy8gLSAjMTk0MiBpZiBobXIgaXMgZW5hYmxlZCB3aXRoIHNmYyBjb21wb25lbnRcbiAgICAvLyAtIHZpdGUjODcyIG5vbi1zZmMgY29tcG9uZW50IHVzZWQgYnkgc2ZjIGNvbXBvbmVudFxuICAgICFpc0luSG1yQ29udGV4dChpbnN0YW5jZSkgJiYgKG9wdGltaXplZCB8fCBwYXRjaEZsYWcgPiAwKSAmJiAhKHBhdGNoRmxhZyAmIDE2KVxuICApIHtcbiAgICBpZiAocGF0Y2hGbGFnICYgOCkge1xuICAgICAgY29uc3QgcHJvcHNUb1VwZGF0ZSA9IGluc3RhbmNlLnZub2RlLmR5bmFtaWNQcm9wcztcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHNUb1VwZGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQga2V5ID0gcHJvcHNUb1VwZGF0ZVtpXTtcbiAgICAgICAgaWYgKGlzRW1pdExpc3RlbmVyKGluc3RhbmNlLmVtaXRzT3B0aW9ucywga2V5KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcmF3UHJvcHNba2V5XTtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoaGFzT3duKGF0dHJzLCBrZXkpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IGF0dHJzW2tleV0pIHtcbiAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICBoYXNBdHRyc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjYW1lbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICAgICAgcHJvcHNbY2FtZWxpemVkS2V5XSA9IHJlc29sdmVQcm9wVmFsdWUoXG4gICAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICAgIHJhd0N1cnJlbnRQcm9wcyxcbiAgICAgICAgICAgICAgY2FtZWxpemVkS2V5LFxuICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodmFsdWUgIT09IGF0dHJzW2tleV0pIHtcbiAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpKSB7XG4gICAgICBoYXNBdHRyc0NoYW5nZWQgPSB0cnVlO1xuICAgIH1cbiAgICBsZXQga2ViYWJLZXk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmF3Q3VycmVudFByb3BzKSB7XG4gICAgICBpZiAoIXJhd1Byb3BzIHx8IC8vIGZvciBjYW1lbENhc2VcbiAgICAgICFoYXNPd24ocmF3UHJvcHMsIGtleSkgJiYgLy8gaXQncyBwb3NzaWJsZSB0aGUgb3JpZ2luYWwgcHJvcHMgd2FzIHBhc3NlZCBpbiBhcyBrZWJhYi1jYXNlXG4gICAgICAvLyBhbmQgY29udmVydGVkIHRvIGNhbWVsQ2FzZSAoIzk1NSlcbiAgICAgICgoa2ViYWJLZXkgPSBoeXBoZW5hdGUoa2V5KSkgPT09IGtleSB8fCAhaGFzT3duKHJhd1Byb3BzLCBrZWJhYktleSkpKSB7XG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgaWYgKHJhd1ByZXZQcm9wcyAmJiAvLyBmb3IgY2FtZWxDYXNlXG4gICAgICAgICAgKHJhd1ByZXZQcm9wc1trZXldICE9PSB2b2lkIDAgfHwgLy8gZm9yIGtlYmFiLWNhc2VcbiAgICAgICAgICByYXdQcmV2UHJvcHNba2ViYWJLZXldICE9PSB2b2lkIDApKSB7XG4gICAgICAgICAgICBwcm9wc1trZXldID0gcmVzb2x2ZVByb3BWYWx1ZShcbiAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgcmF3Q3VycmVudFByb3BzLFxuICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhdHRycyAhPT0gcmF3Q3VycmVudFByb3BzKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRycykge1xuICAgICAgICBpZiAoIXJhd1Byb3BzIHx8ICFoYXNPd24ocmF3UHJvcHMsIGtleSkgJiYgdHJ1ZSkge1xuICAgICAgICAgIGRlbGV0ZSBhdHRyc1trZXldO1xuICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGhhc0F0dHJzQ2hhbmdlZCkge1xuICAgIHRyaWdnZXIoaW5zdGFuY2UuYXR0cnMsIFwic2V0XCIsIFwiXCIpO1xuICB9XG4gIHtcbiAgICB2YWxpZGF0ZVByb3BzKHJhd1Byb3BzIHx8IHt9LCBwcm9wcywgaW5zdGFuY2UpO1xuICB9XG59XG5mdW5jdGlvbiBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpIHtcbiAgY29uc3QgW29wdGlvbnMsIG5lZWRDYXN0S2V5c10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XG4gIGxldCBoYXNBdHRyc0NoYW5nZWQgPSBmYWxzZTtcbiAgbGV0IHJhd0Nhc3RWYWx1ZXM7XG4gIGlmIChyYXdQcm9wcykge1xuICAgIGZvciAobGV0IGtleSBpbiByYXdQcm9wcykge1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZSA9IHJhd1Byb3BzW2tleV07XG4gICAgICBsZXQgY2FtZWxLZXk7XG4gICAgICBpZiAob3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgY2FtZWxLZXkgPSBjYW1lbGl6ZShrZXkpKSkge1xuICAgICAgICBpZiAoIW5lZWRDYXN0S2V5cyB8fCAhbmVlZENhc3RLZXlzLmluY2x1ZGVzKGNhbWVsS2V5KSkge1xuICAgICAgICAgIHByb3BzW2NhbWVsS2V5XSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIChyYXdDYXN0VmFsdWVzIHx8IChyYXdDYXN0VmFsdWVzID0ge30pKVtjYW1lbEtleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghaXNFbWl0TGlzdGVuZXIoaW5zdGFuY2UuZW1pdHNPcHRpb25zLCBrZXkpKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBhdHRycykgfHwgdmFsdWUgIT09IGF0dHJzW2tleV0pIHtcbiAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAobmVlZENhc3RLZXlzKSB7XG4gICAgY29uc3QgcmF3Q3VycmVudFByb3BzID0gdG9SYXcocHJvcHMpO1xuICAgIGNvbnN0IGNhc3RWYWx1ZXMgPSByYXdDYXN0VmFsdWVzIHx8IEVNUFRZX09CSjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5lZWRDYXN0S2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gbmVlZENhc3RLZXlzW2ldO1xuICAgICAgcHJvcHNba2V5XSA9IHJlc29sdmVQcm9wVmFsdWUoXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIHJhd0N1cnJlbnRQcm9wcyxcbiAgICAgICAga2V5LFxuICAgICAgICBjYXN0VmFsdWVzW2tleV0sXG4gICAgICAgIGluc3RhbmNlLFxuICAgICAgICAhaGFzT3duKGNhc3RWYWx1ZXMsIGtleSlcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBoYXNBdHRyc0NoYW5nZWQ7XG59XG5mdW5jdGlvbiByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHByb3BzLCBrZXksIHZhbHVlLCBpbnN0YW5jZSwgaXNBYnNlbnQpIHtcbiAgY29uc3Qgb3B0ID0gb3B0aW9uc1trZXldO1xuICBpZiAob3B0ICE9IG51bGwpIHtcbiAgICBjb25zdCBoYXNEZWZhdWx0ID0gaGFzT3duKG9wdCwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChoYXNEZWZhdWx0ICYmIHZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IG9wdC5kZWZhdWx0O1xuICAgICAgaWYgKG9wdC50eXBlICE9PSBGdW5jdGlvbiAmJiAhb3B0LnNraXBGYWN0b3J5ICYmIGlzRnVuY3Rpb24oZGVmYXVsdFZhbHVlKSkge1xuICAgICAgICBjb25zdCB7IHByb3BzRGVmYXVsdHMgfSA9IGluc3RhbmNlO1xuICAgICAgICBpZiAoa2V5IGluIHByb3BzRGVmYXVsdHMpIHtcbiAgICAgICAgICB2YWx1ZSA9IHByb3BzRGVmYXVsdHNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCByZXNldCA9IHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICAgICAgdmFsdWUgPSBwcm9wc0RlZmF1bHRzW2tleV0gPSBkZWZhdWx0VmFsdWUuY2FsbChcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwcm9wc1xuICAgICAgICAgICk7XG4gICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5zdGFuY2UuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UuY2UuX3NldFByb3Aoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRbMCAvKiBzaG91bGRDYXN0ICovXSkge1xuICAgICAgaWYgKGlzQWJzZW50ICYmICFoYXNEZWZhdWx0KSB7XG4gICAgICAgIHZhbHVlID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKG9wdFsxIC8qIHNob3VsZENhc3RUcnVlICovXSAmJiAodmFsdWUgPT09IFwiXCIgfHwgdmFsdWUgPT09IGh5cGhlbmF0ZShrZXkpKSkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmNvbnN0IG1peGluUHJvcHNDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xuICBjb25zdCBjYWNoZSA9IGFzTWl4aW4gPyBtaXhpblByb3BzQ2FjaGUgOiBhcHBDb250ZXh0LnByb3BzQ2FjaGU7XG4gIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChjb21wKTtcbiAgaWYgKGNhY2hlZCkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cbiAgY29uc3QgcmF3ID0gY29tcC5wcm9wcztcbiAgY29uc3Qgbm9ybWFsaXplZCA9IHt9O1xuICBjb25zdCBuZWVkQ2FzdEtleXMgPSBbXTtcbiAgbGV0IGhhc0V4dGVuZHMgPSBmYWxzZTtcbiAgaWYgKCFpc0Z1bmN0aW9uKGNvbXApKSB7XG4gICAgY29uc3QgZXh0ZW5kUHJvcHMgPSAocmF3MikgPT4ge1xuICAgICAgaGFzRXh0ZW5kcyA9IHRydWU7XG4gICAgICBjb25zdCBbcHJvcHMsIGtleXNdID0gbm9ybWFsaXplUHJvcHNPcHRpb25zKHJhdzIsIGFwcENvbnRleHQsIHRydWUpO1xuICAgICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIHByb3BzKTtcbiAgICAgIGlmIChrZXlzKSBuZWVkQ2FzdEtleXMucHVzaCguLi5rZXlzKTtcbiAgICB9O1xuICAgIGlmICghYXNNaXhpbiAmJiBhcHBDb250ZXh0Lm1peGlucy5sZW5ndGgpIHtcbiAgICAgIGFwcENvbnRleHQubWl4aW5zLmZvckVhY2goZXh0ZW5kUHJvcHMpO1xuICAgIH1cbiAgICBpZiAoY29tcC5leHRlbmRzKSB7XG4gICAgICBleHRlbmRQcm9wcyhjb21wLmV4dGVuZHMpO1xuICAgIH1cbiAgICBpZiAoY29tcC5taXhpbnMpIHtcbiAgICAgIGNvbXAubWl4aW5zLmZvckVhY2goZXh0ZW5kUHJvcHMpO1xuICAgIH1cbiAgfVxuICBpZiAoIXJhdyAmJiAhaGFzRXh0ZW5kcykge1xuICAgIGlmIChpc09iamVjdChjb21wKSkge1xuICAgICAgY2FjaGUuc2V0KGNvbXAsIEVNUFRZX0FSUik7XG4gICAgfVxuICAgIHJldHVybiBFTVBUWV9BUlI7XG4gIH1cbiAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWlzU3RyaW5nKHJhd1tpXSkpIHtcbiAgICAgICAgd2FybiQxKGBwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguYCwgcmF3W2ldKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBjYW1lbGl6ZShyYXdbaV0pO1xuICAgICAgaWYgKHZhbGlkYXRlUHJvcE5hbWUobm9ybWFsaXplZEtleSkpIHtcbiAgICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9IEVNUFRZX09CSjtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAocmF3KSB7XG4gICAgaWYgKCFpc09iamVjdChyYXcpKSB7XG4gICAgICB3YXJuJDEoYGludmFsaWQgcHJvcHMgb3B0aW9uc2AsIHJhdyk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHJhdykge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICBpZiAodmFsaWRhdGVQcm9wTmFtZShub3JtYWxpemVkS2V5KSkge1xuICAgICAgICBjb25zdCBvcHQgPSByYXdba2V5XTtcbiAgICAgICAgY29uc3QgcHJvcCA9IG5vcm1hbGl6ZWRbbm9ybWFsaXplZEtleV0gPSBpc0FycmF5KG9wdCkgfHwgaXNGdW5jdGlvbihvcHQpID8geyB0eXBlOiBvcHQgfSA6IGV4dGVuZCh7fSwgb3B0KTtcbiAgICAgICAgY29uc3QgcHJvcFR5cGUgPSBwcm9wLnR5cGU7XG4gICAgICAgIGxldCBzaG91bGRDYXN0ID0gZmFsc2U7XG4gICAgICAgIGxldCBzaG91bGRDYXN0VHJ1ZSA9IHRydWU7XG4gICAgICAgIGlmIChpc0FycmF5KHByb3BUeXBlKSkge1xuICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBwcm9wVHlwZS5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBwcm9wVHlwZVtpbmRleF07XG4gICAgICAgICAgICBjb25zdCB0eXBlTmFtZSA9IGlzRnVuY3Rpb24odHlwZSkgJiYgdHlwZS5uYW1lO1xuICAgICAgICAgICAgaWYgKHR5cGVOYW1lID09PSBcIkJvb2xlYW5cIikge1xuICAgICAgICAgICAgICBzaG91bGRDYXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVOYW1lID09PSBcIlN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgIHNob3VsZENhc3RUcnVlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNob3VsZENhc3QgPSBpc0Z1bmN0aW9uKHByb3BUeXBlKSAmJiBwcm9wVHlwZS5uYW1lID09PSBcIkJvb2xlYW5cIjtcbiAgICAgICAgfVxuICAgICAgICBwcm9wWzAgLyogc2hvdWxkQ2FzdCAqL10gPSBzaG91bGRDYXN0O1xuICAgICAgICBwcm9wWzEgLyogc2hvdWxkQ2FzdFRydWUgKi9dID0gc2hvdWxkQ2FzdFRydWU7XG4gICAgICAgIGlmIChzaG91bGRDYXN0IHx8IGhhc093bihwcm9wLCBcImRlZmF1bHRcIikpIHtcbiAgICAgICAgICBuZWVkQ2FzdEtleXMucHVzaChub3JtYWxpemVkS2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCByZXMgPSBbbm9ybWFsaXplZCwgbmVlZENhc3RLZXlzXTtcbiAgaWYgKGlzT2JqZWN0KGNvbXApKSB7XG4gICAgY2FjaGUuc2V0KGNvbXAsIHJlcyk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcE5hbWUoa2V5KSB7XG4gIGlmIChrZXlbMF0gIT09IFwiJFwiICYmICFpc1Jlc2VydmVkUHJvcChrZXkpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgd2FybiQxKGBJbnZhbGlkIHByb3AgbmFtZTogXCIke2tleX1cIiBpcyBhIHJlc2VydmVkIHByb3BlcnR5LmApO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGdldFR5cGUoY3Rvcikge1xuICBpZiAoY3RvciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBcIm51bGxcIjtcbiAgfVxuICBpZiAodHlwZW9mIGN0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBjdG9yLm5hbWUgfHwgXCJcIjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY3RvciA9PT0gXCJvYmplY3RcIikge1xuICAgIGNvbnN0IG5hbWUgPSBjdG9yLmNvbnN0cnVjdG9yICYmIGN0b3IuY29uc3RydWN0b3IubmFtZTtcbiAgICByZXR1cm4gbmFtZSB8fCBcIlwiO1xuICB9XG4gIHJldHVybiBcIlwiO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhyYXdQcm9wcywgcHJvcHMsIGluc3RhbmNlKSB7XG4gIGNvbnN0IHJlc29sdmVkVmFsdWVzID0gdG9SYXcocHJvcHMpO1xuICBjb25zdCBvcHRpb25zID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdO1xuICBjb25zdCBjYW1lbGl6ZVByb3BzS2V5ID0gT2JqZWN0LmtleXMocmF3UHJvcHMpLm1hcCgoa2V5KSA9PiBjYW1lbGl6ZShrZXkpKTtcbiAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucykge1xuICAgIGxldCBvcHQgPSBvcHRpb25zW2tleV07XG4gICAgaWYgKG9wdCA9PSBudWxsKSBjb250aW51ZTtcbiAgICB2YWxpZGF0ZVByb3AoXG4gICAgICBrZXksXG4gICAgICByZXNvbHZlZFZhbHVlc1trZXldLFxuICAgICAgb3B0LFxuICAgICAgc2hhbGxvd1JlYWRvbmx5KHJlc29sdmVkVmFsdWVzKSAsXG4gICAgICAhY2FtZWxpemVQcm9wc0tleS5pbmNsdWRlcyhrZXkpXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wKG5hbWUsIHZhbHVlLCBwcm9wLCBwcm9wcywgaXNBYnNlbnQpIHtcbiAgY29uc3QgeyB0eXBlLCByZXF1aXJlZCwgdmFsaWRhdG9yLCBza2lwQ2hlY2sgfSA9IHByb3A7XG4gIGlmIChyZXF1aXJlZCAmJiBpc0Fic2VudCkge1xuICAgIHdhcm4kMSgnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFyZXF1aXJlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodHlwZSAhPSBudWxsICYmIHR5cGUgIT09IHRydWUgJiYgIXNraXBDaGVjaykge1xuICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XG4gICAgY29uc3QgdHlwZXMgPSBpc0FycmF5KHR5cGUpID8gdHlwZSA6IFt0eXBlXTtcbiAgICBjb25zdCBleHBlY3RlZFR5cGVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGggJiYgIWlzVmFsaWQ7IGkrKykge1xuICAgICAgY29uc3QgeyB2YWxpZCwgZXhwZWN0ZWRUeXBlIH0gPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlc1tpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goZXhwZWN0ZWRUeXBlIHx8IFwiXCIpO1xuICAgICAgaXNWYWxpZCA9IHZhbGlkO1xuICAgIH1cbiAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgIHdhcm4kMShnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKHZhbGlkYXRvciAmJiAhdmFsaWRhdG9yKHZhbHVlLCBwcm9wcykpIHtcbiAgICB3YXJuJDEoJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nKTtcbiAgfVxufVxuY29uc3QgaXNTaW1wbGVUeXBlID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoXG4gIFwiU3RyaW5nLE51bWJlcixCb29sZWFuLEZ1bmN0aW9uLFN5bWJvbCxCaWdJbnRcIlxuKTtcbmZ1bmN0aW9uIGFzc2VydFR5cGUodmFsdWUsIHR5cGUpIHtcbiAgbGV0IHZhbGlkO1xuICBjb25zdCBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBcIm51bGxcIikge1xuICAgIHZhbGlkID0gdmFsdWUgPT09IG51bGw7XG4gIH0gZWxzZSBpZiAoaXNTaW1wbGVUeXBlKGV4cGVjdGVkVHlwZSkpIHtcbiAgICBjb25zdCB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSBcIm9iamVjdFwiKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBcIk9iamVjdFwiKSB7XG4gICAgdmFsaWQgPSBpc09iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBcIkFycmF5XCIpIHtcbiAgICB2YWxpZCA9IGlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlXG4gIH07XG59XG5mdW5jdGlvbiBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGBQcm9wIHR5cGUgW10gZm9yIHByb3AgXCIke25hbWV9XCIgd29uJ3QgbWF0Y2ggYW55dGhpbmcuIERpZCB5b3UgbWVhbiB0byB1c2UgdHlwZSBBcnJheSBpbnN0ZWFkP2A7XG4gIH1cbiAgbGV0IG1lc3NhZ2UgPSBgSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIiR7bmFtZX1cIi4gRXhwZWN0ZWQgJHtleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKFwiIHwgXCIpfWA7XG4gIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIGNvbnN0IHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XG4gIGNvbnN0IGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICBjb25zdCByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBgIHdpdGggdmFsdWUgJHtleHBlY3RlZFZhbHVlfWA7XG4gIH1cbiAgbWVzc2FnZSArPSBgLCBnb3QgJHtyZWNlaXZlZFR5cGV9IGA7XG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gYHdpdGggdmFsdWUgJHtyZWNlaXZlZFZhbHVlfS5gO1xuICB9XG4gIHJldHVybiBtZXNzYWdlO1xufVxuZnVuY3Rpb24gc3R5bGVWYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gXCJTdHJpbmdcIikge1xuICAgIHJldHVybiBgXCIke3ZhbHVlfVwiYDtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcIk51bWJlclwiKSB7XG4gICAgcmV0dXJuIGAke051bWJlcih2YWx1ZSl9YDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYCR7dmFsdWV9YDtcbiAgfVxufVxuZnVuY3Rpb24gaXNFeHBsaWNhYmxlKHR5cGUpIHtcbiAgY29uc3QgZXhwbGljaXRUeXBlcyA9IFtcInN0cmluZ1wiLCBcIm51bWJlclwiLCBcImJvb2xlYW5cIl07XG4gIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoKGVsZW0pID0+IHR5cGUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbSk7XG59XG5mdW5jdGlvbiBpc0Jvb2xlYW4oLi4uYXJncykge1xuICByZXR1cm4gYXJncy5zb21lKChlbGVtKSA9PiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09IFwiYm9vbGVhblwiKTtcbn1cblxuY29uc3QgaXNJbnRlcm5hbEtleSA9IChrZXkpID0+IGtleVswXSA9PT0gXCJfXCIgfHwga2V5ID09PSBcIiRzdGFibGVcIjtcbmNvbnN0IG5vcm1hbGl6ZVNsb3RWYWx1ZSA9ICh2YWx1ZSkgPT4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAobm9ybWFsaXplVk5vZGUpIDogW25vcm1hbGl6ZVZOb2RlKHZhbHVlKV07XG5jb25zdCBub3JtYWxpemVTbG90ID0gKGtleSwgcmF3U2xvdCwgY3R4KSA9PiB7XG4gIGlmIChyYXdTbG90Ll9uKSB7XG4gICAgcmV0dXJuIHJhd1Nsb3Q7XG4gIH1cbiAgY29uc3Qgbm9ybWFsaXplZCA9IHdpdGhDdHgoKC4uLmFyZ3MpID0+IHtcbiAgICBpZiAoY3VycmVudEluc3RhbmNlICYmICghY3R4IHx8IGN0eC5yb290ID09PSBjdXJyZW50SW5zdGFuY2Uucm9vdCkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYFNsb3QgXCIke2tleX1cIiBpbnZva2VkIG91dHNpZGUgb2YgdGhlIHJlbmRlciBmdW5jdGlvbjogdGhpcyB3aWxsIG5vdCB0cmFjayBkZXBlbmRlbmNpZXMgdXNlZCBpbiB0aGUgc2xvdC4gSW52b2tlIHRoZSBzbG90IGZ1bmN0aW9uIGluc2lkZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGluc3RlYWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVNsb3RWYWx1ZShyYXdTbG90KC4uLmFyZ3MpKTtcbiAgfSwgY3R4KTtcbiAgbm9ybWFsaXplZC5fYyA9IGZhbHNlO1xuICByZXR1cm4gbm9ybWFsaXplZDtcbn07XG5jb25zdCBub3JtYWxpemVPYmplY3RTbG90cyA9IChyYXdTbG90cywgc2xvdHMsIGluc3RhbmNlKSA9PiB7XG4gIGNvbnN0IGN0eCA9IHJhd1Nsb3RzLl9jdHg7XG4gIGZvciAoY29uc3Qga2V5IGluIHJhd1Nsb3RzKSB7XG4gICAgaWYgKGlzSW50ZXJuYWxLZXkoa2V5KSkgY29udGludWU7XG4gICAgY29uc3QgdmFsdWUgPSByYXdTbG90c1trZXldO1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgc2xvdHNba2V5XSA9IG5vcm1hbGl6ZVNsb3Qoa2V5LCB2YWx1ZSwgY3R4KTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIHtcbiAgICAgICAgd2FybiQxKFxuICAgICAgICAgIGBOb24tZnVuY3Rpb24gdmFsdWUgZW5jb3VudGVyZWQgZm9yIHNsb3QgXCIke2tleX1cIi4gUHJlZmVyIGZ1bmN0aW9uIHNsb3RzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVNsb3RWYWx1ZSh2YWx1ZSk7XG4gICAgICBzbG90c1trZXldID0gKCkgPT4gbm9ybWFsaXplZDtcbiAgICB9XG4gIH1cbn07XG5jb25zdCBub3JtYWxpemVWTm9kZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbikgPT4ge1xuICBpZiAoIWlzS2VlcEFsaXZlKGluc3RhbmNlLnZub2RlKSAmJiB0cnVlKSB7XG4gICAgd2FybiQxKFxuICAgICAgYE5vbi1mdW5jdGlvbiB2YWx1ZSBlbmNvdW50ZXJlZCBmb3IgZGVmYXVsdCBzbG90LiBQcmVmZXIgZnVuY3Rpb24gc2xvdHMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5gXG4gICAgKTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKGNoaWxkcmVuKTtcbiAgaW5zdGFuY2Uuc2xvdHMuZGVmYXVsdCA9ICgpID0+IG5vcm1hbGl6ZWQ7XG59O1xuY29uc3QgYXNzaWduU2xvdHMgPSAoc2xvdHMsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpID0+IHtcbiAgZm9yIChjb25zdCBrZXkgaW4gY2hpbGRyZW4pIHtcbiAgICBpZiAob3B0aW1pemVkIHx8IGtleSAhPT0gXCJfXCIpIHtcbiAgICAgIHNsb3RzW2tleV0gPSBjaGlsZHJlbltrZXldO1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IGluaXRTbG90cyA9IChpbnN0YW5jZSwgY2hpbGRyZW4sIG9wdGltaXplZCkgPT4ge1xuICBjb25zdCBzbG90cyA9IGluc3RhbmNlLnNsb3RzID0gY3JlYXRlSW50ZXJuYWxPYmplY3QoKTtcbiAgaWYgKGluc3RhbmNlLnZub2RlLnNoYXBlRmxhZyAmIDMyKSB7XG4gICAgY29uc3QgdHlwZSA9IGNoaWxkcmVuLl87XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIGFzc2lnblNsb3RzKHNsb3RzLCBjaGlsZHJlbiwgb3B0aW1pemVkKTtcbiAgICAgIGlmIChvcHRpbWl6ZWQpIHtcbiAgICAgICAgZGVmKHNsb3RzLCBcIl9cIiwgdHlwZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vcm1hbGl6ZU9iamVjdFNsb3RzKGNoaWxkcmVuLCBzbG90cyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNoaWxkcmVuKSB7XG4gICAgbm9ybWFsaXplVk5vZGVTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xuICB9XG59O1xuY29uc3QgdXBkYXRlU2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpID0+IHtcbiAgY29uc3QgeyB2bm9kZSwgc2xvdHMgfSA9IGluc3RhbmNlO1xuICBsZXQgbmVlZERlbGV0aW9uQ2hlY2sgPSB0cnVlO1xuICBsZXQgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0gRU1QVFlfT0JKO1xuICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMzIpIHtcbiAgICBjb25zdCB0eXBlID0gY2hpbGRyZW4uXztcbiAgICBpZiAodHlwZSkge1xuICAgICAgaWYgKGlzSG1yVXBkYXRpbmcpIHtcbiAgICAgICAgYXNzaWduU2xvdHMoc2xvdHMsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpO1xuICAgICAgICB0cmlnZ2VyKGluc3RhbmNlLCBcInNldFwiLCBcIiRzbG90c1wiKTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW1pemVkICYmIHR5cGUgPT09IDEpIHtcbiAgICAgICAgbmVlZERlbGV0aW9uQ2hlY2sgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFzc2lnblNsb3RzKHNsb3RzLCBjaGlsZHJlbiwgb3B0aW1pemVkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmVlZERlbGV0aW9uQ2hlY2sgPSAhY2hpbGRyZW4uJHN0YWJsZTtcbiAgICAgIG5vcm1hbGl6ZU9iamVjdFNsb3RzKGNoaWxkcmVuLCBzbG90cyk7XG4gICAgfVxuICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuKSB7XG4gICAgbm9ybWFsaXplVk5vZGVTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xuICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IHsgZGVmYXVsdDogMSB9O1xuICB9XG4gIGlmIChuZWVkRGVsZXRpb25DaGVjaykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNsb3RzKSB7XG4gICAgICBpZiAoIWlzSW50ZXJuYWxLZXkoa2V5KSAmJiBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIGRlbGV0ZSBzbG90c1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxubGV0IHN1cHBvcnRlZDtcbmxldCBwZXJmO1xuZnVuY3Rpb24gc3RhcnRNZWFzdXJlKGluc3RhbmNlLCB0eXBlKSB7XG4gIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5wZXJmb3JtYW5jZSAmJiBpc1N1cHBvcnRlZCgpKSB7XG4gICAgcGVyZi5tYXJrKGB2dWUtJHt0eXBlfS0ke2luc3RhbmNlLnVpZH1gKTtcbiAgfVxuICB7XG4gICAgZGV2dG9vbHNQZXJmU3RhcnQoaW5zdGFuY2UsIHR5cGUsIGlzU3VwcG9ydGVkKCkgPyBwZXJmLm5vdygpIDogRGF0ZS5ub3coKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVuZE1lYXN1cmUoaW5zdGFuY2UsIHR5cGUpIHtcbiAgaWYgKGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLnBlcmZvcm1hbmNlICYmIGlzU3VwcG9ydGVkKCkpIHtcbiAgICBjb25zdCBzdGFydFRhZyA9IGB2dWUtJHt0eXBlfS0ke2luc3RhbmNlLnVpZH1gO1xuICAgIGNvbnN0IGVuZFRhZyA9IHN0YXJ0VGFnICsgYDplbmRgO1xuICAgIHBlcmYubWFyayhlbmRUYWcpO1xuICAgIHBlcmYubWVhc3VyZShcbiAgICAgIGA8JHtmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBpbnN0YW5jZS50eXBlKX0+ICR7dHlwZX1gLFxuICAgICAgc3RhcnRUYWcsXG4gICAgICBlbmRUYWdcbiAgICApO1xuICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gIH1cbiAge1xuICAgIGRldnRvb2xzUGVyZkVuZChpbnN0YW5jZSwgdHlwZSwgaXNTdXBwb3J0ZWQoKSA/IHBlcmYubm93KCkgOiBEYXRlLm5vdygpKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNTdXBwb3J0ZWQoKSB7XG4gIGlmIChzdXBwb3J0ZWQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiBzdXBwb3J0ZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LnBlcmZvcm1hbmNlKSB7XG4gICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICBwZXJmID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICB9IGVsc2Uge1xuICAgIHN1cHBvcnRlZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiBzdXBwb3J0ZWQ7XG59XG5cbmNvbnN0IHF1ZXVlUG9zdFJlbmRlckVmZmVjdCA9IHF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlIDtcbmZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zLCBjcmVhdGVIeWRyYXRpb25GdW5jdGlvbnMpO1xufVxuZnVuY3Rpb24gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMsIGNyZWF0ZUh5ZHJhdGlvbkZucykge1xuICBjb25zdCB0YXJnZXQgPSBnZXRHbG9iYWxUaGlzKCk7XG4gIHRhcmdldC5fX1ZVRV9fID0gdHJ1ZTtcbiAge1xuICAgIHNldERldnRvb2xzSG9vayQxKHRhcmdldC5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fLCB0YXJnZXQpO1xuICB9XG4gIGNvbnN0IHtcbiAgICBpbnNlcnQ6IGhvc3RJbnNlcnQsXG4gICAgcmVtb3ZlOiBob3N0UmVtb3ZlLFxuICAgIHBhdGNoUHJvcDogaG9zdFBhdGNoUHJvcCxcbiAgICBjcmVhdGVFbGVtZW50OiBob3N0Q3JlYXRlRWxlbWVudCxcbiAgICBjcmVhdGVUZXh0OiBob3N0Q3JlYXRlVGV4dCxcbiAgICBjcmVhdGVDb21tZW50OiBob3N0Q3JlYXRlQ29tbWVudCxcbiAgICBzZXRUZXh0OiBob3N0U2V0VGV4dCxcbiAgICBzZXRFbGVtZW50VGV4dDogaG9zdFNldEVsZW1lbnRUZXh0LFxuICAgIHBhcmVudE5vZGU6IGhvc3RQYXJlbnROb2RlLFxuICAgIG5leHRTaWJsaW5nOiBob3N0TmV4dFNpYmxpbmcsXG4gICAgc2V0U2NvcGVJZDogaG9zdFNldFNjb3BlSWQgPSBOT09QLFxuICAgIGluc2VydFN0YXRpY0NvbnRlbnQ6IGhvc3RJbnNlcnRTdGF0aWNDb250ZW50XG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCBwYXRjaCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yID0gbnVsbCwgcGFyZW50Q29tcG9uZW50ID0gbnVsbCwgcGFyZW50U3VzcGVuc2UgPSBudWxsLCBuYW1lc3BhY2UgPSB2b2lkIDAsIHNsb3RTY29wZUlkcyA9IG51bGwsIG9wdGltaXplZCA9IGlzSG1yVXBkYXRpbmcgPyBmYWxzZSA6ICEhbjIuZHluYW1pY0NoaWxkcmVuKSA9PiB7XG4gICAgaWYgKG4xID09PSBuMikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobjEgJiYgIWlzU2FtZVZOb2RlVHlwZShuMSwgbjIpKSB7XG4gICAgICBhbmNob3IgPSBnZXROZXh0SG9zdE5vZGUobjEpO1xuICAgICAgdW5tb3VudChuMSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICBuMSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChuMi5wYXRjaEZsYWcgPT09IC0yKSB7XG4gICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgIG4yLmR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHsgdHlwZSwgcmVmLCBzaGFwZUZsYWcgfSA9IG4yO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBUZXh0OlxuICAgICAgICBwcm9jZXNzVGV4dChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENvbW1lbnQ6XG4gICAgICAgIHByb2Nlc3NDb21tZW50Tm9kZShuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFN0YXRpYzpcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgICAgICBtb3VudFN0YXRpY05vZGUobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBuYW1lc3BhY2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdGNoU3RhdGljTm9kZShuMSwgbjIsIGNvbnRhaW5lciwgbmFtZXNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgICAgIHByb2Nlc3NGcmFnbWVudChcbiAgICAgICAgICBuMSxcbiAgICAgICAgICBuMixcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxKSB7XG4gICAgICAgICAgcHJvY2Vzc0VsZW1lbnQoXG4gICAgICAgICAgICBuMSxcbiAgICAgICAgICAgIG4yLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDYpIHtcbiAgICAgICAgICBwcm9jZXNzQ29tcG9uZW50KFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCkge1xuICAgICAgICAgIHR5cGUucHJvY2VzcyhcbiAgICAgICAgICAgIG4xLFxuICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZCxcbiAgICAgICAgICAgIGludGVybmFsc1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICAgICAgdHlwZS5wcm9jZXNzKFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICAgICAgaW50ZXJuYWxzXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuJDEoXCJJbnZhbGlkIFZOb2RlIHR5cGU6XCIsIHR5cGUsIGAoJHt0eXBlb2YgdHlwZX0pYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlZiAhPSBudWxsICYmIHBhcmVudENvbXBvbmVudCkge1xuICAgICAgc2V0UmVmKHJlZiwgbjEgJiYgbjEucmVmLCBwYXJlbnRTdXNwZW5zZSwgbjIgfHwgbjEsICFuMik7XG4gICAgfVxuICB9O1xuICBjb25zdCBwcm9jZXNzVGV4dCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIGhvc3RJbnNlcnQoXG4gICAgICAgIG4yLmVsID0gaG9zdENyZWF0ZVRleHQobjIuY2hpbGRyZW4pLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvclxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZWwgPSBuMi5lbCA9IG4xLmVsO1xuICAgICAgaWYgKG4yLmNoaWxkcmVuICE9PSBuMS5jaGlsZHJlbikge1xuICAgICAgICBob3N0U2V0VGV4dChlbCwgbjIuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0NvbW1lbnROb2RlID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpID0+IHtcbiAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgaG9zdEluc2VydChcbiAgICAgICAgbjIuZWwgPSBob3N0Q3JlYXRlQ29tbWVudChuMi5jaGlsZHJlbiB8fCBcIlwiKSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3JcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3VudFN0YXRpY05vZGUgPSAobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBuYW1lc3BhY2UpID0+IHtcbiAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChcbiAgICAgIG4yLmNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgYW5jaG9yLFxuICAgICAgbmFtZXNwYWNlLFxuICAgICAgbjIuZWwsXG4gICAgICBuMi5hbmNob3JcbiAgICApO1xuICB9O1xuICBjb25zdCBwYXRjaFN0YXRpY05vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIG5hbWVzcGFjZSkgPT4ge1xuICAgIGlmIChuMi5jaGlsZHJlbiAhPT0gbjEuY2hpbGRyZW4pIHtcbiAgICAgIGNvbnN0IGFuY2hvciA9IGhvc3ROZXh0U2libGluZyhuMS5hbmNob3IpO1xuICAgICAgcmVtb3ZlU3RhdGljTm9kZShuMSk7XG4gICAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChcbiAgICAgICAgbjIuY2hpbGRyZW4sXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBuYW1lc3BhY2VcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICBuMi5hbmNob3IgPSBuMS5hbmNob3I7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3ZlU3RhdGljTm9kZSA9ICh7IGVsLCBhbmNob3IgfSwgY29udGFpbmVyLCBuZXh0U2libGluZykgPT4ge1xuICAgIGxldCBuZXh0O1xuICAgIHdoaWxlIChlbCAmJiBlbCAhPT0gYW5jaG9yKSB7XG4gICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGVsKTtcbiAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpO1xuICAgICAgZWwgPSBuZXh0O1xuICAgIH1cbiAgICBob3N0SW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBuZXh0U2libGluZyk7XG4gIH07XG4gIGNvbnN0IHJlbW92ZVN0YXRpY05vZGUgPSAoeyBlbCwgYW5jaG9yIH0pID0+IHtcbiAgICBsZXQgbmV4dDtcbiAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xuICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhlbCk7XG4gICAgICBob3N0UmVtb3ZlKGVsKTtcbiAgICAgIGVsID0gbmV4dDtcbiAgICB9XG4gICAgaG9zdFJlbW92ZShhbmNob3IpO1xuICB9O1xuICBjb25zdCBwcm9jZXNzRWxlbWVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgaWYgKG4yLnR5cGUgPT09IFwic3ZnXCIpIHtcbiAgICAgIG5hbWVzcGFjZSA9IFwic3ZnXCI7XG4gICAgfSBlbHNlIGlmIChuMi50eXBlID09PSBcIm1hdGhcIikge1xuICAgICAgbmFtZXNwYWNlID0gXCJtYXRobWxcIjtcbiAgICB9XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIG1vdW50RWxlbWVudChcbiAgICAgICAgbjIsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRjaEVsZW1lbnQoXG4gICAgICAgIG4xLFxuICAgICAgICBuMixcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG1vdW50RWxlbWVudCA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBsZXQgZWw7XG4gICAgbGV0IHZub2RlSG9vaztcbiAgICBjb25zdCB7IHByb3BzLCBzaGFwZUZsYWcsIHRyYW5zaXRpb24sIGRpcnMgfSA9IHZub2RlO1xuICAgIGVsID0gdm5vZGUuZWwgPSBob3N0Q3JlYXRlRWxlbWVudChcbiAgICAgIHZub2RlLnR5cGUsXG4gICAgICBuYW1lc3BhY2UsXG4gICAgICBwcm9wcyAmJiBwcm9wcy5pcyxcbiAgICAgIHByb3BzXG4gICAgKTtcbiAgICBpZiAoc2hhcGVGbGFnICYgOCkge1xuICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCB2bm9kZS5jaGlsZHJlbik7XG4gICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgbW91bnRDaGlsZHJlbihcbiAgICAgICAgdm5vZGUuY2hpbGRyZW4sXG4gICAgICAgIGVsLFxuICAgICAgICBudWxsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICByZXNvbHZlQ2hpbGRyZW5OYW1lc3BhY2Uodm5vZGUsIG5hbWVzcGFjZSksXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZGlycykge1xuICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcImNyZWF0ZWRcIik7XG4gICAgfVxuICAgIHNldFNjb3BlSWQoZWwsIHZub2RlLCB2bm9kZS5zY29wZUlkLCBzbG90U2NvcGVJZHMsIHBhcmVudENvbXBvbmVudCk7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoa2V5ICE9PSBcInZhbHVlXCIgJiYgIWlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcbiAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIG51bGwsIHByb3BzW2tleV0sIG5hbWVzcGFjZSwgcGFyZW50Q29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFwidmFsdWVcIiBpbiBwcm9wcykge1xuICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBcInZhbHVlXCIsIG51bGwsIHByb3BzLnZhbHVlLCBuYW1lc3BhY2UpO1xuICAgICAgfVxuICAgICAgaWYgKHZub2RlSG9vayA9IHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkge1xuICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAge1xuICAgICAgZGVmKGVsLCBcIl9fdm5vZGVcIiwgdm5vZGUsIHRydWUpO1xuICAgICAgZGVmKGVsLCBcIl9fdnVlUGFyZW50Q29tcG9uZW50XCIsIHBhcmVudENvbXBvbmVudCwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChkaXJzKSB7XG4gICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIFwiYmVmb3JlTW91bnRcIik7XG4gICAgfVxuICAgIGNvbnN0IG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzID0gbmVlZFRyYW5zaXRpb24ocGFyZW50U3VzcGVuc2UsIHRyYW5zaXRpb24pO1xuICAgIGlmIChuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcykge1xuICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XG4gICAgfVxuICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICBpZiAoKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSB8fCBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyB8fCBkaXJzKSB7XG4gICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICB2bm9kZUhvb2sgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICAgIG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzICYmIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xuICAgICAgICBkaXJzICYmIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgXCJtb3VudGVkXCIpO1xuICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2V0U2NvcGVJZCA9IChlbCwgdm5vZGUsIHNjb3BlSWQsIHNsb3RTY29wZUlkcywgcGFyZW50Q29tcG9uZW50KSA9PiB7XG4gICAgaWYgKHNjb3BlSWQpIHtcbiAgICAgIGhvc3RTZXRTY29wZUlkKGVsLCBzY29wZUlkKTtcbiAgICB9XG4gICAgaWYgKHNsb3RTY29wZUlkcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbG90U2NvcGVJZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaG9zdFNldFNjb3BlSWQoZWwsIHNsb3RTY29wZUlkc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJlbnRDb21wb25lbnQpIHtcbiAgICAgIGxldCBzdWJUcmVlID0gcGFyZW50Q29tcG9uZW50LnN1YlRyZWU7XG4gICAgICBpZiAoc3ViVHJlZS5wYXRjaEZsYWcgPiAwICYmIHN1YlRyZWUucGF0Y2hGbGFnICYgMjA0OCkge1xuICAgICAgICBzdWJUcmVlID0gZmlsdGVyU2luZ2xlUm9vdChzdWJUcmVlLmNoaWxkcmVuKSB8fCBzdWJUcmVlO1xuICAgICAgfVxuICAgICAgaWYgKHZub2RlID09PSBzdWJUcmVlIHx8IGlzU3VzcGVuc2Uoc3ViVHJlZS50eXBlKSAmJiAoc3ViVHJlZS5zc0NvbnRlbnQgPT09IHZub2RlIHx8IHN1YlRyZWUuc3NGYWxsYmFjayA9PT0gdm5vZGUpKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFZOb2RlID0gcGFyZW50Q29tcG9uZW50LnZub2RlO1xuICAgICAgICBzZXRTY29wZUlkKFxuICAgICAgICAgIGVsLFxuICAgICAgICAgIHBhcmVudFZOb2RlLFxuICAgICAgICAgIHBhcmVudFZOb2RlLnNjb3BlSWQsXG4gICAgICAgICAgcGFyZW50Vk5vZGUuc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudC5wYXJlbnRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IG1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBzdGFydCA9IDApID0+IHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXSA9IG9wdGltaXplZCA/IGNsb25lSWZNb3VudGVkKGNoaWxkcmVuW2ldKSA6IG5vcm1hbGl6ZVZOb2RlKGNoaWxkcmVuW2ldKTtcbiAgICAgIHBhdGNoKFxuICAgICAgICBudWxsLFxuICAgICAgICBjaGlsZCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgfVxuICB9O1xuICBjb25zdCBwYXRjaEVsZW1lbnQgPSAobjEsIG4yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgY29uc3QgZWwgPSBuMi5lbCA9IG4xLmVsO1xuICAgIHtcbiAgICAgIGVsLl9fdm5vZGUgPSBuMjtcbiAgICB9XG4gICAgbGV0IHsgcGF0Y2hGbGFnLCBkeW5hbWljQ2hpbGRyZW4sIGRpcnMgfSA9IG4yO1xuICAgIHBhdGNoRmxhZyB8PSBuMS5wYXRjaEZsYWcgJiAxNjtcbiAgICBjb25zdCBvbGRQcm9wcyA9IG4xLnByb3BzIHx8IEVNUFRZX09CSjtcbiAgICBjb25zdCBuZXdQcm9wcyA9IG4yLnByb3BzIHx8IEVNUFRZX09CSjtcbiAgICBsZXQgdm5vZGVIb29rO1xuICAgIHBhcmVudENvbXBvbmVudCAmJiB0b2dnbGVSZWN1cnNlKHBhcmVudENvbXBvbmVudCwgZmFsc2UpO1xuICAgIGlmICh2bm9kZUhvb2sgPSBuZXdQcm9wcy5vblZub2RlQmVmb3JlVXBkYXRlKSB7XG4gICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIG4yLCBuMSk7XG4gICAgfVxuICAgIGlmIChkaXJzKSB7XG4gICAgICBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCBcImJlZm9yZVVwZGF0ZVwiKTtcbiAgICB9XG4gICAgcGFyZW50Q29tcG9uZW50ICYmIHRvZ2dsZVJlY3Vyc2UocGFyZW50Q29tcG9uZW50LCB0cnVlKTtcbiAgICBpZiAoaXNIbXJVcGRhdGluZykge1xuICAgICAgcGF0Y2hGbGFnID0gMDtcbiAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xuICAgICAgZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKG9sZFByb3BzLmlubmVySFRNTCAmJiBuZXdQcm9wcy5pbm5lckhUTUwgPT0gbnVsbCB8fCBvbGRQcm9wcy50ZXh0Q29udGVudCAmJiBuZXdQcm9wcy50ZXh0Q29udGVudCA9PSBudWxsKSB7XG4gICAgICBob3N0U2V0RWxlbWVudFRleHQoZWwsIFwiXCIpO1xuICAgIH1cbiAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICBwYXRjaEJsb2NrQ2hpbGRyZW4oXG4gICAgICAgIG4xLmR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgZHluYW1pY0NoaWxkcmVuLFxuICAgICAgICBlbCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgcmVzb2x2ZUNoaWxkcmVuTmFtZXNwYWNlKG4yLCBuYW1lc3BhY2UpLFxuICAgICAgICBzbG90U2NvcGVJZHNcbiAgICAgICk7XG4gICAgICB7XG4gICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFvcHRpbWl6ZWQpIHtcbiAgICAgIHBhdGNoQ2hpbGRyZW4oXG4gICAgICAgIG4xLFxuICAgICAgICBuMixcbiAgICAgICAgZWwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIHJlc29sdmVDaGlsZHJlbk5hbWVzcGFjZShuMiwgbmFtZXNwYWNlKSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHBhdGNoRmxhZyA+IDApIHtcbiAgICAgIGlmIChwYXRjaEZsYWcgJiAxNikge1xuICAgICAgICBwYXRjaFByb3BzKGVsLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgbmFtZXNwYWNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiAyKSB7XG4gICAgICAgICAgaWYgKG9sZFByb3BzLmNsYXNzICE9PSBuZXdQcm9wcy5jbGFzcykge1xuICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgXCJjbGFzc1wiLCBudWxsLCBuZXdQcm9wcy5jbGFzcywgbmFtZXNwYWNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDQpIHtcbiAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBcInN0eWxlXCIsIG9sZFByb3BzLnN0eWxlLCBuZXdQcm9wcy5zdHlsZSwgbmFtZXNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF0Y2hGbGFnICYgOCkge1xuICAgICAgICAgIGNvbnN0IHByb3BzVG9VcGRhdGUgPSBuMi5keW5hbWljUHJvcHM7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IG9sZFByb3BzW2tleV07XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV3UHJvcHNba2V5XTtcbiAgICAgICAgICAgIGlmIChuZXh0ICE9PSBwcmV2IHx8IGtleSA9PT0gXCJ2YWx1ZVwiKSB7XG4gICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgcHJldiwgbmV4dCwgbmFtZXNwYWNlLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhdGNoRmxhZyAmIDEpIHtcbiAgICAgICAgaWYgKG4xLmNoaWxkcmVuICE9PSBuMi5jaGlsZHJlbikge1xuICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChlbCwgbjIuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghb3B0aW1pemVkICYmIGR5bmFtaWNDaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICBwYXRjaFByb3BzKGVsLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgbmFtZXNwYWNlKTtcbiAgICB9XG4gICAgaWYgKCh2bm9kZUhvb2sgPSBuZXdQcm9wcy5vblZub2RlVXBkYXRlZCkgfHwgZGlycykge1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgbjIsIG4xKTtcbiAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCBcInVwZGF0ZWRcIik7XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBwYXRjaEJsb2NrQ2hpbGRyZW4gPSAob2xkQ2hpbGRyZW4sIG5ld0NoaWxkcmVuLCBmYWxsYmFja0NvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBvbGRWTm9kZSA9IG9sZENoaWxkcmVuW2ldO1xuICAgICAgY29uc3QgbmV3Vk5vZGUgPSBuZXdDaGlsZHJlbltpXTtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IChcbiAgICAgICAgLy8gb2xkVk5vZGUgbWF5IGJlIGFuIGVycm9yZWQgYXN5bmMgc2V0dXAoKSBjb21wb25lbnQgaW5zaWRlIFN1c3BlbnNlXG4gICAgICAgIC8vIHdoaWNoIHdpbGwgbm90IGhhdmUgYSBtb3VudGVkIGVsZW1lbnRcbiAgICAgICAgb2xkVk5vZGUuZWwgJiYgLy8gLSBJbiB0aGUgY2FzZSBvZiBhIEZyYWdtZW50LCB3ZSBuZWVkIHRvIHByb3ZpZGUgdGhlIGFjdHVhbCBwYXJlbnRcbiAgICAgICAgLy8gb2YgdGhlIEZyYWdtZW50IGl0c2VsZiBzbyBpdCBjYW4gbW92ZSBpdHMgY2hpbGRyZW4uXG4gICAgICAgIChvbGRWTm9kZS50eXBlID09PSBGcmFnbWVudCB8fCAvLyAtIEluIHRoZSBjYXNlIG9mIGRpZmZlcmVudCBub2RlcywgdGhlcmUgaXMgZ29pbmcgdG8gYmUgYSByZXBsYWNlbWVudFxuICAgICAgICAvLyB3aGljaCBhbHNvIHJlcXVpcmVzIHRoZSBjb3JyZWN0IHBhcmVudCBjb250YWluZXJcbiAgICAgICAgIWlzU2FtZVZOb2RlVHlwZShvbGRWTm9kZSwgbmV3Vk5vZGUpIHx8IC8vIC0gSW4gdGhlIGNhc2Ugb2YgYSBjb21wb25lbnQsIGl0IGNvdWxkIGNvbnRhaW4gYW55dGhpbmcuXG4gICAgICAgIG9sZFZOb2RlLnNoYXBlRmxhZyAmICg2IHwgNjQpKSA/IGhvc3RQYXJlbnROb2RlKG9sZFZOb2RlLmVsKSA6IChcbiAgICAgICAgICAvLyBJbiBvdGhlciBjYXNlcywgdGhlIHBhcmVudCBjb250YWluZXIgaXMgbm90IGFjdHVhbGx5IHVzZWQgc28gd2VcbiAgICAgICAgICAvLyBqdXN0IHBhc3MgdGhlIGJsb2NrIGVsZW1lbnQgaGVyZSB0byBhdm9pZCBhIERPTSBwYXJlbnROb2RlIGNhbGwuXG4gICAgICAgICAgZmFsbGJhY2tDb250YWluZXJcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIHBhdGNoKFxuICAgICAgICBvbGRWTm9kZSxcbiAgICAgICAgbmV3Vk5vZGUsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICB9O1xuICBjb25zdCBwYXRjaFByb3BzID0gKGVsLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgbmFtZXNwYWNlKSA9PiB7XG4gICAgaWYgKG9sZFByb3BzICE9PSBuZXdQcm9wcykge1xuICAgICAgaWYgKG9sZFByb3BzICE9PSBFTVBUWV9PQkopIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcm9wKGtleSkgJiYgIShrZXkgaW4gbmV3UHJvcHMpKSB7XG4gICAgICAgICAgICBob3N0UGF0Y2hQcm9wKFxuICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgICBvbGRQcm9wc1trZXldLFxuICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld1Byb3BzKSB7XG4gICAgICAgIGlmIChpc1Jlc2VydmVkUHJvcChrZXkpKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgbmV4dCA9IG5ld1Byb3BzW2tleV07XG4gICAgICAgIGNvbnN0IHByZXYgPSBvbGRQcm9wc1trZXldO1xuICAgICAgICBpZiAobmV4dCAhPT0gcHJldiAmJiBrZXkgIT09IFwidmFsdWVcIikge1xuICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgcHJldiwgbmV4dCwgbmFtZXNwYWNlLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIG5ld1Byb3BzKSB7XG4gICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIFwidmFsdWVcIiwgb2xkUHJvcHMudmFsdWUsIG5ld1Byb3BzLnZhbHVlLCBuYW1lc3BhY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0ZyYWdtZW50ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCBmcmFnbWVudFN0YXJ0QW5jaG9yID0gbjIuZWwgPSBuMSA/IG4xLmVsIDogaG9zdENyZWF0ZVRleHQoXCJcIik7XG4gICAgY29uc3QgZnJhZ21lbnRFbmRBbmNob3IgPSBuMi5hbmNob3IgPSBuMSA/IG4xLmFuY2hvciA6IGhvc3RDcmVhdGVUZXh0KFwiXCIpO1xuICAgIGxldCB7IHBhdGNoRmxhZywgZHluYW1pY0NoaWxkcmVuLCBzbG90U2NvcGVJZHM6IGZyYWdtZW50U2xvdFNjb3BlSWRzIH0gPSBuMjtcbiAgICBpZiAoXG4gICAgICAvLyAjNTUyMyBkZXYgcm9vdCBmcmFnbWVudCBtYXkgaW5oZXJpdCBkaXJlY3RpdmVzXG4gICAgICBpc0htclVwZGF0aW5nIHx8IHBhdGNoRmxhZyAmIDIwNDhcbiAgICApIHtcbiAgICAgIHBhdGNoRmxhZyA9IDA7XG4gICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgfVxuICAgIGlmIChmcmFnbWVudFNsb3RTY29wZUlkcykge1xuICAgICAgc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzID8gc2xvdFNjb3BlSWRzLmNvbmNhdChmcmFnbWVudFNsb3RTY29wZUlkcykgOiBmcmFnbWVudFNsb3RTY29wZUlkcztcbiAgICB9XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIGhvc3RJbnNlcnQoZnJhZ21lbnRTdGFydEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgaG9zdEluc2VydChmcmFnbWVudEVuZEFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgbW91bnRDaGlsZHJlbihcbiAgICAgICAgLy8gIzEwMDA3XG4gICAgICAgIC8vIHN1Y2ggZnJhZ21lbnQgbGlrZSBgPD48Lz5gIHdpbGwgYmUgY29tcGlsZWQgaW50b1xuICAgICAgICAvLyBhIGZyYWdtZW50IHdoaWNoIGRvZXNuJ3QgaGF2ZSBhIGNoaWxkcmVuLlxuICAgICAgICAvLyBJbiB0aGlzIGNhc2UgZmFsbGJhY2sgdG8gYW4gZW1wdHkgYXJyYXlcbiAgICAgICAgbjIuY2hpbGRyZW4gfHwgW10sXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgZnJhZ21lbnRFbmRBbmNob3IsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXRjaEZsYWcgPiAwICYmIHBhdGNoRmxhZyAmIDY0ICYmIGR5bmFtaWNDaGlsZHJlbiAmJiAvLyAjMjcxNSB0aGUgcHJldmlvdXMgZnJhZ21lbnQgY291bGQndmUgYmVlbiBhIEJBSUxlZCBvbmUgYXMgYSByZXN1bHRcbiAgICAgIC8vIG9mIHJlbmRlclNsb3QoKSB3aXRoIG5vIHZhbGlkIGNoaWxkcmVuXG4gICAgICBuMS5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKFxuICAgICAgICAgIG4xLmR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4sXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzXG4gICAgICAgICk7XG4gICAgICAgIHtcbiAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdGNoQ2hpbGRyZW4oXG4gICAgICAgICAgbjEsXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGZyYWdtZW50RW5kQW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0NvbXBvbmVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgbjIuc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzO1xuICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICBpZiAobjIuc2hhcGVGbGFnICYgNTEyKSB7XG4gICAgICAgIHBhcmVudENvbXBvbmVudC5jdHguYWN0aXZhdGUoXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb3VudENvbXBvbmVudChcbiAgICAgICAgICBuMixcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3VudENvbXBvbmVudCA9IChpbml0aWFsVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIG9wdGltaXplZCkgPT4ge1xuICAgIGNvbnN0IGluc3RhbmNlID0gKGluaXRpYWxWTm9kZS5jb21wb25lbnQgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZShcbiAgICAgIGluaXRpYWxWTm9kZSxcbiAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgIHBhcmVudFN1c3BlbnNlXG4gICAgKSk7XG4gICAgaWYgKGluc3RhbmNlLnR5cGUuX19obXJJZCkge1xuICAgICAgcmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xuICAgIH1cbiAgICB7XG4gICAgICBwdXNoV2FybmluZ0NvbnRleHQoaW5pdGlhbFZOb2RlKTtcbiAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XG4gICAgfVxuICAgIGlmIChpc0tlZXBBbGl2ZShpbml0aWFsVk5vZGUpKSB7XG4gICAgICBpbnN0YW5jZS5jdHgucmVuZGVyZXIgPSBpbnRlcm5hbHM7XG4gICAgfVxuICAgIHtcbiAgICAgIHtcbiAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgaW5pdGApO1xuICAgICAgfVxuICAgICAgc2V0dXBDb21wb25lbnQoaW5zdGFuY2UsIGZhbHNlLCBvcHRpbWl6ZWQpO1xuICAgICAge1xuICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaW5pdGApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5zdGFuY2UuYXN5bmNEZXApIHtcbiAgICAgIGlmIChpc0htclVwZGF0aW5nKSBpbml0aWFsVk5vZGUuZWwgPSBudWxsO1xuICAgICAgcGFyZW50U3VzcGVuc2UgJiYgcGFyZW50U3VzcGVuc2UucmVnaXN0ZXJEZXAoaW5zdGFuY2UsIHNldHVwUmVuZGVyRWZmZWN0LCBvcHRpbWl6ZWQpO1xuICAgICAgaWYgKCFpbml0aWFsVk5vZGUuZWwpIHtcbiAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSBpbnN0YW5jZS5zdWJUcmVlID0gY3JlYXRlVk5vZGUoQ29tbWVudCk7XG4gICAgICAgIHByb2Nlc3NDb21tZW50Tm9kZShudWxsLCBwbGFjZWhvbGRlciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXR1cFJlbmRlckVmZmVjdChcbiAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgIGluaXRpYWxWTm9kZSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICB9XG4gICAge1xuICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBtb3VudGApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdXBkYXRlQ29tcG9uZW50ID0gKG4xLCBuMiwgb3B0aW1pemVkKSA9PiB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBuMi5jb21wb25lbnQgPSBuMS5jb21wb25lbnQ7XG4gICAgaWYgKHNob3VsZFVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCkpIHtcbiAgICAgIGlmIChpbnN0YW5jZS5hc3luY0RlcCAmJiAhaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCkge1xuICAgICAgICB7XG4gICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG4yKTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIoaW5zdGFuY2UsIG4yLCBvcHRpbWl6ZWQpO1xuICAgICAgICB7XG4gICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0YW5jZS5uZXh0ID0gbjI7XG4gICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuMi5lbCA9IG4xLmVsO1xuICAgICAgaW5zdGFuY2Uudm5vZGUgPSBuMjtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldHVwUmVuZGVyRWZmZWN0ID0gKGluc3RhbmNlLCBpbml0aWFsVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCBjb21wb25lbnRVcGRhdGVGbiA9ICgpID0+IHtcbiAgICAgIGlmICghaW5zdGFuY2UuaXNNb3VudGVkKSB7XG4gICAgICAgIGxldCB2bm9kZUhvb2s7XG4gICAgICAgIGNvbnN0IHsgZWwsIHByb3BzIH0gPSBpbml0aWFsVk5vZGU7XG4gICAgICAgIGNvbnN0IHsgYm0sIG0sIHBhcmVudCwgcm9vdCwgdHlwZSB9ID0gaW5zdGFuY2U7XG4gICAgICAgIGNvbnN0IGlzQXN5bmNXcmFwcGVyVk5vZGUgPSBpc0FzeW5jV3JhcHBlcihpbml0aWFsVk5vZGUpO1xuICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCBmYWxzZSk7XG4gICAgICAgIGlmIChibSkge1xuICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXN5bmNXcmFwcGVyVk5vZGUgJiYgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkpIHtcbiAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIGluaXRpYWxWTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgdHJ1ZSk7XG4gICAgICAgIGlmIChlbCAmJiBoeWRyYXRlTm9kZSkge1xuICAgICAgICAgIGNvbnN0IGh5ZHJhdGVTdWJUcmVlID0gKCkgPT4ge1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluc3RhbmNlLnN1YlRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKTtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBoeWRyYXRlYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoeWRyYXRlTm9kZShcbiAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgIGluc3RhbmNlLnN1YlRyZWUsXG4gICAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgICAgbnVsbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGh5ZHJhdGVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChpc0FzeW5jV3JhcHBlclZOb2RlICYmIHR5cGUuX19hc3luY0h5ZHJhdGUpIHtcbiAgICAgICAgICAgIHR5cGUuX19hc3luY0h5ZHJhdGUoXG4gICAgICAgICAgICAgIGVsLFxuICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgaHlkcmF0ZVN1YlRyZWVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGh5ZHJhdGVTdWJUcmVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChyb290LmNlKSB7XG4gICAgICAgICAgICByb290LmNlLl9pbmplY3RDaGlsZFN0eWxlKHR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc3ViVHJlZSA9IGluc3RhbmNlLnN1YlRyZWUgPSByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKTtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhdGNoKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHN1YlRyZWUsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlXG4gICAgICAgICAgKTtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5pdGlhbFZOb2RlLmVsID0gc3ViVHJlZS5lbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobSkge1xuICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChtLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0FzeW5jV3JhcHBlclZOb2RlICYmICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkpIHtcbiAgICAgICAgICBjb25zdCBzY29wZWRJbml0aWFsVk5vZGUgPSBpbml0aWFsVk5vZGU7XG4gICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KFxuICAgICAgICAgICAgKCkgPT4gaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBzY29wZWRJbml0aWFsVk5vZGUpLFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2VcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbml0aWFsVk5vZGUuc2hhcGVGbGFnICYgMjU2IHx8IHBhcmVudCAmJiBpc0FzeW5jV3JhcHBlcihwYXJlbnQudm5vZGUpICYmIHBhcmVudC52bm9kZS5zaGFwZUZsYWcgJiAyNTYpIHtcbiAgICAgICAgICBpbnN0YW5jZS5hICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChpbnN0YW5jZS5hLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2UuaXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgICAge1xuICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50QWRkZWQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGluaXRpYWxWTm9kZSA9IGNvbnRhaW5lciA9IGFuY2hvciA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgeyBuZXh0LCBidSwgdSwgcGFyZW50LCB2bm9kZSB9ID0gaW5zdGFuY2U7XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBub25IeWRyYXRlZEFzeW5jUm9vdCA9IGxvY2F0ZU5vbkh5ZHJhdGVkQXN5bmNSb290KGluc3RhbmNlKTtcbiAgICAgICAgICBpZiAobm9uSHlkcmF0ZWRBc3luY1Jvb3QpIHtcbiAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgIG5leHQuZWwgPSB2bm9kZS5lbDtcbiAgICAgICAgICAgICAgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyKGluc3RhbmNlLCBuZXh0LCBvcHRpbWl6ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9uSHlkcmF0ZWRBc3luY1Jvb3QuYXN5bmNEZXAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghaW5zdGFuY2UuaXNVbm1vdW50ZWQpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRVcGRhdGVGbigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG9yaWdpbk5leHQgPSBuZXh0O1xuICAgICAgICBsZXQgdm5vZGVIb29rO1xuICAgICAgICB7XG4gICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG5leHQgfHwgaW5zdGFuY2Uudm5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIGZhbHNlKTtcbiAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICBuZXh0LmVsID0gdm5vZGUuZWw7XG4gICAgICAgICAgdXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyKGluc3RhbmNlLCBuZXh0LCBvcHRpbWl6ZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHQgPSB2bm9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnUpIHtcbiAgICAgICAgICBpbnZva2VBcnJheUZucyhidSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZub2RlSG9vayA9IG5leHQucHJvcHMgJiYgbmV4dC5wcm9wcy5vblZub2RlQmVmb3JlVXBkYXRlKSB7XG4gICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBuZXh0LCB2bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgdHJ1ZSk7XG4gICAgICAgIHtcbiAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXh0VHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xuICAgICAgICB7XG4gICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXZUcmVlID0gaW5zdGFuY2Uuc3ViVHJlZTtcbiAgICAgICAgaW5zdGFuY2Uuc3ViVHJlZSA9IG5leHRUcmVlO1xuICAgICAgICB7XG4gICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgfVxuICAgICAgICBwYXRjaChcbiAgICAgICAgICBwcmV2VHJlZSxcbiAgICAgICAgICBuZXh0VHJlZSxcbiAgICAgICAgICAvLyBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBpZiBpdCdzIGluIGEgdGVsZXBvcnRcbiAgICAgICAgICBob3N0UGFyZW50Tm9kZShwcmV2VHJlZS5lbCksXG4gICAgICAgICAgLy8gYW5jaG9yIG1heSBoYXZlIGNoYW5nZWQgaWYgaXQncyBpbiBhIGZyYWdtZW50XG4gICAgICAgICAgZ2V0TmV4dEhvc3ROb2RlKHByZXZUcmVlKSxcbiAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2VcbiAgICAgICAgKTtcbiAgICAgICAge1xuICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICB9XG4gICAgICAgIG5leHQuZWwgPSBuZXh0VHJlZS5lbDtcbiAgICAgICAgaWYgKG9yaWdpbk5leHQgPT09IG51bGwpIHtcbiAgICAgICAgICB1cGRhdGVIT0NIb3N0RWwoaW5zdGFuY2UsIG5leHRUcmVlLmVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodSkge1xuICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCh1LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZub2RlSG9vayA9IG5leHQucHJvcHMgJiYgbmV4dC5wcm9wcy5vblZub2RlVXBkYXRlZCkge1xuICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChcbiAgICAgICAgICAgICgpID0+IGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgbmV4dCwgdm5vZGUpLFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2VcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFVwZGF0ZWQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBpbnN0YW5jZS5zY29wZS5vbigpO1xuICAgIGNvbnN0IGVmZmVjdCA9IGluc3RhbmNlLmVmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChjb21wb25lbnRVcGRhdGVGbik7XG4gICAgaW5zdGFuY2Uuc2NvcGUub2ZmKCk7XG4gICAgY29uc3QgdXBkYXRlID0gaW5zdGFuY2UudXBkYXRlID0gZWZmZWN0LnJ1bi5iaW5kKGVmZmVjdCk7XG4gICAgY29uc3Qgam9iID0gaW5zdGFuY2Uuam9iID0gZWZmZWN0LnJ1bklmRGlydHkuYmluZChlZmZlY3QpO1xuICAgIGpvYi5pID0gaW5zdGFuY2U7XG4gICAgam9iLmlkID0gaW5zdGFuY2UudWlkO1xuICAgIGVmZmVjdC5zY2hlZHVsZXIgPSAoKSA9PiBxdWV1ZUpvYihqb2IpO1xuICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIHRydWUpO1xuICAgIHtcbiAgICAgIGVmZmVjdC5vblRyYWNrID0gaW5zdGFuY2UucnRjID8gKGUpID0+IGludm9rZUFycmF5Rm5zKGluc3RhbmNlLnJ0YywgZSkgOiB2b2lkIDA7XG4gICAgICBlZmZlY3Qub25UcmlnZ2VyID0gaW5zdGFuY2UucnRnID8gKGUpID0+IGludm9rZUFycmF5Rm5zKGluc3RhbmNlLnJ0ZywgZSkgOiB2b2lkIDA7XG4gICAgfVxuICAgIHVwZGF0ZSgpO1xuICB9O1xuICBjb25zdCB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIgPSAoaW5zdGFuY2UsIG5leHRWTm9kZSwgb3B0aW1pemVkKSA9PiB7XG4gICAgbmV4dFZOb2RlLmNvbXBvbmVudCA9IGluc3RhbmNlO1xuICAgIGNvbnN0IHByZXZQcm9wcyA9IGluc3RhbmNlLnZub2RlLnByb3BzO1xuICAgIGluc3RhbmNlLnZub2RlID0gbmV4dFZOb2RlO1xuICAgIGluc3RhbmNlLm5leHQgPSBudWxsO1xuICAgIHVwZGF0ZVByb3BzKGluc3RhbmNlLCBuZXh0Vk5vZGUucHJvcHMsIHByZXZQcm9wcywgb3B0aW1pemVkKTtcbiAgICB1cGRhdGVTbG90cyhpbnN0YW5jZSwgbmV4dFZOb2RlLmNoaWxkcmVuLCBvcHRpbWl6ZWQpO1xuICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICBmbHVzaFByZUZsdXNoQ2JzKGluc3RhbmNlKTtcbiAgICByZXNldFRyYWNraW5nKCk7XG4gIH07XG4gIGNvbnN0IHBhdGNoQ2hpbGRyZW4gPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XG4gICAgY29uc3QgYzEgPSBuMSAmJiBuMS5jaGlsZHJlbjtcbiAgICBjb25zdCBwcmV2U2hhcGVGbGFnID0gbjEgPyBuMS5zaGFwZUZsYWcgOiAwO1xuICAgIGNvbnN0IGMyID0gbjIuY2hpbGRyZW47XG4gICAgY29uc3QgeyBwYXRjaEZsYWcsIHNoYXBlRmxhZyB9ID0gbjI7XG4gICAgaWYgKHBhdGNoRmxhZyA+IDApIHtcbiAgICAgIGlmIChwYXRjaEZsYWcgJiAxMjgpIHtcbiAgICAgICAgcGF0Y2hLZXllZENoaWxkcmVuKFxuICAgICAgICAgIGMxLFxuICAgICAgICAgIGMyLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAocGF0Y2hGbGFnICYgMjU2KSB7XG4gICAgICAgIHBhdGNoVW5rZXllZENoaWxkcmVuKFxuICAgICAgICAgIGMxLFxuICAgICAgICAgIGMyLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNoYXBlRmxhZyAmIDgpIHtcbiAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgMTYpIHtcbiAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChjMiAhPT0gYzEpIHtcbiAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGNvbnRhaW5lciwgYzIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDE2KSB7XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgICAgIHBhdGNoS2V5ZWRDaGlsZHJlbihcbiAgICAgICAgICAgIGMxLFxuICAgICAgICAgICAgYzIsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiA4KSB7XG4gICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGNvbnRhaW5lciwgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2KSB7XG4gICAgICAgICAgbW91bnRDaGlsZHJlbihcbiAgICAgICAgICAgIGMyLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBwYXRjaFVua2V5ZWRDaGlsZHJlbiA9IChjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgYzEgPSBjMSB8fCBFTVBUWV9BUlI7XG4gICAgYzIgPSBjMiB8fCBFTVBUWV9BUlI7XG4gICAgY29uc3Qgb2xkTGVuZ3RoID0gYzEubGVuZ3RoO1xuICAgIGNvbnN0IG5ld0xlbmd0aCA9IGMyLmxlbmd0aDtcbiAgICBjb25zdCBjb21tb25MZW5ndGggPSBNYXRoLm1pbihvbGRMZW5ndGgsIG5ld0xlbmd0aCk7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGNvbW1vbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBuZXh0Q2hpbGQgPSBjMltpXSA9IG9wdGltaXplZCA/IGNsb25lSWZNb3VudGVkKGMyW2ldKSA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKTtcbiAgICAgIHBhdGNoKFxuICAgICAgICBjMVtpXSxcbiAgICAgICAgbmV4dENoaWxkLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChvbGRMZW5ndGggPiBuZXdMZW5ndGgpIHtcbiAgICAgIHVubW91bnRDaGlsZHJlbihcbiAgICAgICAgYzEsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIHRydWUsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBjb21tb25MZW5ndGhcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vdW50Q2hpbGRyZW4oXG4gICAgICAgIGMyLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZCxcbiAgICAgICAgY29tbW9uTGVuZ3RoXG4gICAgICApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcGF0Y2hLZXllZENoaWxkcmVuID0gKGMxLCBjMiwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBsZXQgaSA9IDA7XG4gICAgY29uc3QgbDIgPSBjMi5sZW5ndGg7XG4gICAgbGV0IGUxID0gYzEubGVuZ3RoIC0gMTtcbiAgICBsZXQgZTIgPSBsMiAtIDE7XG4gICAgd2hpbGUgKGkgPD0gZTEgJiYgaSA8PSBlMikge1xuICAgICAgY29uc3QgbjEgPSBjMVtpXTtcbiAgICAgIGNvbnN0IG4yID0gYzJbaV0gPSBvcHRpbWl6ZWQgPyBjbG9uZUlmTW91bnRlZChjMltpXSkgOiBub3JtYWxpemVWTm9kZShjMltpXSk7XG4gICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbjEsXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9XG4gICAgd2hpbGUgKGkgPD0gZTEgJiYgaSA8PSBlMikge1xuICAgICAgY29uc3QgbjEgPSBjMVtlMV07XG4gICAgICBjb25zdCBuMiA9IGMyW2UyXSA9IG9wdGltaXplZCA/IGNsb25lSWZNb3VudGVkKGMyW2UyXSkgOiBub3JtYWxpemVWTm9kZShjMltlMl0pO1xuICAgICAgaWYgKGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpKSB7XG4gICAgICAgIHBhdGNoKFxuICAgICAgICAgIG4xLFxuICAgICAgICAgIG4yLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBlMS0tO1xuICAgICAgZTItLTtcbiAgICB9XG4gICAgaWYgKGkgPiBlMSkge1xuICAgICAgaWYgKGkgPD0gZTIpIHtcbiAgICAgICAgY29uc3QgbmV4dFBvcyA9IGUyICsgMTtcbiAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dFBvcyA8IGwyID8gYzJbbmV4dFBvc10uZWwgOiBwYXJlbnRBbmNob3I7XG4gICAgICAgIHdoaWxlIChpIDw9IGUyKSB7XG4gICAgICAgICAgcGF0Y2goXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgYzJbaV0gPSBvcHRpbWl6ZWQgPyBjbG9uZUlmTW91bnRlZChjMltpXSkgOiBub3JtYWxpemVWTm9kZShjMltpXSksXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpID4gZTIpIHtcbiAgICAgIHdoaWxlIChpIDw9IGUxKSB7XG4gICAgICAgIHVubW91bnQoYzFbaV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHMxID0gaTtcbiAgICAgIGNvbnN0IHMyID0gaTtcbiAgICAgIGNvbnN0IGtleVRvTmV3SW5kZXhNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgZm9yIChpID0gczI7IGkgPD0gZTI7IGkrKykge1xuICAgICAgICBjb25zdCBuZXh0Q2hpbGQgPSBjMltpXSA9IG9wdGltaXplZCA/IGNsb25lSWZNb3VudGVkKGMyW2ldKSA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKTtcbiAgICAgICAgaWYgKG5leHRDaGlsZC5rZXkgIT0gbnVsbCkge1xuICAgICAgICAgIGlmIChrZXlUb05ld0luZGV4TWFwLmhhcyhuZXh0Q2hpbGQua2V5KSkge1xuICAgICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgICBgRHVwbGljYXRlIGtleXMgZm91bmQgZHVyaW5nIHVwZGF0ZTpgLFxuICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShuZXh0Q2hpbGQua2V5KSxcbiAgICAgICAgICAgICAgYE1ha2Ugc3VyZSBrZXlzIGFyZSB1bmlxdWUuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAga2V5VG9OZXdJbmRleE1hcC5zZXQobmV4dENoaWxkLmtleSwgaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBqO1xuICAgICAgbGV0IHBhdGNoZWQgPSAwO1xuICAgICAgY29uc3QgdG9CZVBhdGNoZWQgPSBlMiAtIHMyICsgMTtcbiAgICAgIGxldCBtb3ZlZCA9IGZhbHNlO1xuICAgICAgbGV0IG1heE5ld0luZGV4U29GYXIgPSAwO1xuICAgICAgY29uc3QgbmV3SW5kZXhUb09sZEluZGV4TWFwID0gbmV3IEFycmF5KHRvQmVQYXRjaGVkKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0b0JlUGF0Y2hlZDsgaSsrKSBuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPSAwO1xuICAgICAgZm9yIChpID0gczE7IGkgPD0gZTE7IGkrKykge1xuICAgICAgICBjb25zdCBwcmV2Q2hpbGQgPSBjMVtpXTtcbiAgICAgICAgaWYgKHBhdGNoZWQgPj0gdG9CZVBhdGNoZWQpIHtcbiAgICAgICAgICB1bm1vdW50KHByZXZDaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5ld0luZGV4O1xuICAgICAgICBpZiAocHJldkNoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgbmV3SW5kZXggPSBrZXlUb05ld0luZGV4TWFwLmdldChwcmV2Q2hpbGQua2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKGogPSBzMjsgaiA8PSBlMjsgaisrKSB7XG4gICAgICAgICAgICBpZiAobmV3SW5kZXhUb09sZEluZGV4TWFwW2ogLSBzMl0gPT09IDAgJiYgaXNTYW1lVk5vZGVUeXBlKHByZXZDaGlsZCwgYzJbal0pKSB7XG4gICAgICAgICAgICAgIG5ld0luZGV4ID0gajtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdJbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgdW5tb3VudChwcmV2Q2hpbGQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0luZGV4VG9PbGRJbmRleE1hcFtuZXdJbmRleCAtIHMyXSA9IGkgKyAxO1xuICAgICAgICAgIGlmIChuZXdJbmRleCA+PSBtYXhOZXdJbmRleFNvRmFyKSB7XG4gICAgICAgICAgICBtYXhOZXdJbmRleFNvRmFyID0gbmV3SW5kZXg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGF0Y2goXG4gICAgICAgICAgICBwcmV2Q2hpbGQsXG4gICAgICAgICAgICBjMltuZXdJbmRleF0sXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICAgIHBhdGNoZWQrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UgPSBtb3ZlZCA/IGdldFNlcXVlbmNlKG5ld0luZGV4VG9PbGRJbmRleE1hcCkgOiBFTVBUWV9BUlI7XG4gICAgICBqID0gaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UubGVuZ3RoIC0gMTtcbiAgICAgIGZvciAoaSA9IHRvQmVQYXRjaGVkIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gczIgKyBpO1xuICAgICAgICBjb25zdCBuZXh0Q2hpbGQgPSBjMltuZXh0SW5kZXhdO1xuICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0SW5kZXggKyAxIDwgbDIgPyBjMltuZXh0SW5kZXggKyAxXS5lbCA6IHBhcmVudEFuY2hvcjtcbiAgICAgICAgaWYgKG5ld0luZGV4VG9PbGRJbmRleE1hcFtpXSA9PT0gMCkge1xuICAgICAgICAgIHBhdGNoKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG5leHRDaGlsZCxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChtb3ZlZCkge1xuICAgICAgICAgIGlmIChqIDwgMCB8fCBpICE9PSBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZVtqXSkge1xuICAgICAgICAgICAgbW92ZShuZXh0Q2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCAyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgai0tO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgbW92ZSA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlLCBwYXJlbnRTdXNwZW5zZSA9IG51bGwpID0+IHtcbiAgICBjb25zdCB7IGVsLCB0eXBlLCB0cmFuc2l0aW9uLCBjaGlsZHJlbiwgc2hhcGVGbGFnIH0gPSB2bm9kZTtcbiAgICBpZiAoc2hhcGVGbGFnICYgNikge1xuICAgICAgbW92ZSh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSwgY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHNoYXBlRmxhZyAmIDEyOCkge1xuICAgICAgdm5vZGUuc3VzcGVuc2UubW92ZShjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgNjQpIHtcbiAgICAgIHR5cGUubW92ZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGludGVybmFscyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBtb3ZlKGNoaWxkcmVuW2ldLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xuICAgICAgfVxuICAgICAgaG9zdEluc2VydCh2bm9kZS5hbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IFN0YXRpYykge1xuICAgICAgbW92ZVN0YXRpY05vZGUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbmVlZFRyYW5zaXRpb24yID0gbW92ZVR5cGUgIT09IDIgJiYgc2hhcGVGbGFnICYgMSAmJiB0cmFuc2l0aW9uO1xuICAgIGlmIChuZWVkVHJhbnNpdGlvbjIpIHtcbiAgICAgIGlmIChtb3ZlVHlwZSA9PT0gMCkge1xuICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcbiAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4gdHJhbnNpdGlvbi5lbnRlcihlbCksIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgbGVhdmUsIGRlbGF5TGVhdmUsIGFmdGVyTGVhdmUgfSA9IHRyYW5zaXRpb247XG4gICAgICAgIGNvbnN0IHJlbW92ZTIgPSAoKSA9PiBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIGNvbnN0IHBlcmZvcm1MZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgICBsZWF2ZShlbCwgKCkgPT4ge1xuICAgICAgICAgICAgcmVtb3ZlMigpO1xuICAgICAgICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGlmIChkZWxheUxlYXZlKSB7XG4gICAgICAgICAgZGVsYXlMZWF2ZShlbCwgcmVtb3ZlMiwgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZXJmb3JtTGVhdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgfVxuICB9O1xuICBjb25zdCB1bm1vdW50ID0gKHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSA9IGZhbHNlLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHR5cGUsXG4gICAgICBwcm9wcyxcbiAgICAgIHJlZixcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZHluYW1pY0NoaWxkcmVuLFxuICAgICAgc2hhcGVGbGFnLFxuICAgICAgcGF0Y2hGbGFnLFxuICAgICAgZGlycyxcbiAgICAgIGNhY2hlSW5kZXhcbiAgICB9ID0gdm5vZGU7XG4gICAgaWYgKHBhdGNoRmxhZyA9PT0gLTIpIHtcbiAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAocmVmICE9IG51bGwpIHtcbiAgICAgIHNldFJlZihyZWYsIG51bGwsIHBhcmVudFN1c3BlbnNlLCB2bm9kZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGlmIChjYWNoZUluZGV4ICE9IG51bGwpIHtcbiAgICAgIHBhcmVudENvbXBvbmVudC5yZW5kZXJDYWNoZVtjYWNoZUluZGV4XSA9IHZvaWQgMDtcbiAgICB9XG4gICAgaWYgKHNoYXBlRmxhZyAmIDI1Nikge1xuICAgICAgcGFyZW50Q29tcG9uZW50LmN0eC5kZWFjdGl2YXRlKHZub2RlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2hvdWxkSW52b2tlRGlycyA9IHNoYXBlRmxhZyAmIDEgJiYgZGlycztcbiAgICBjb25zdCBzaG91bGRJbnZva2VWbm9kZUhvb2sgPSAhaXNBc3luY1dyYXBwZXIodm5vZGUpO1xuICAgIGxldCB2bm9kZUhvb2s7XG4gICAgaWYgKHNob3VsZEludm9rZVZub2RlSG9vayAmJiAodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZUJlZm9yZVVubW91bnQpKSB7XG4gICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIHZub2RlKTtcbiAgICB9XG4gICAgaWYgKHNoYXBlRmxhZyAmIDYpIHtcbiAgICAgIHVubW91bnRDb21wb25lbnQodm5vZGUuY29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICAgIHZub2RlLnN1c3BlbnNlLnVubW91bnQocGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHNob3VsZEludm9rZURpcnMpIHtcbiAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcImJlZm9yZVVubW91bnRcIik7XG4gICAgICB9XG4gICAgICBpZiAoc2hhcGVGbGFnICYgNjQpIHtcbiAgICAgICAgdm5vZGUudHlwZS5yZW1vdmUoXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIGludGVybmFscyxcbiAgICAgICAgICBkb1JlbW92ZVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChkeW5hbWljQ2hpbGRyZW4gJiYgLy8gIzUxNTRcbiAgICAgIC8vIHdoZW4gdi1vbmNlIGlzIHVzZWQgaW5zaWRlIGEgYmxvY2ssIHNldEJsb2NrVHJhY2tpbmcoLTEpIG1hcmtzIHRoZVxuICAgICAgLy8gcGFyZW50IGJsb2NrIHdpdGggaGFzT25jZTogdHJ1ZVxuICAgICAgLy8gc28gdGhhdCBpdCBkb2Vzbid0IHRha2UgdGhlIGZhc3QgcGF0aCBkdXJpbmcgdW5tb3VudCAtIG90aGVyd2lzZVxuICAgICAgLy8gY29tcG9uZW50cyBuZXN0ZWQgaW4gdi1vbmNlIGFyZSBuZXZlciB1bm1vdW50ZWQuXG4gICAgICAhZHluYW1pY0NoaWxkcmVuLmhhc09uY2UgJiYgLy8gIzExNTM6IGZhc3QgcGF0aCBzaG91bGQgbm90IGJlIHRha2VuIGZvciBub24tc3RhYmxlICh2LWZvcikgZnJhZ21lbnRzXG4gICAgICAodHlwZSAhPT0gRnJhZ21lbnQgfHwgcGF0Y2hGbGFnID4gMCAmJiBwYXRjaEZsYWcgJiA2NCkpIHtcbiAgICAgICAgdW5tb3VudENoaWxkcmVuKFxuICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBGcmFnbWVudCAmJiBwYXRjaEZsYWcgJiAoMTI4IHwgMjU2KSB8fCAhb3B0aW1pemVkICYmIHNoYXBlRmxhZyAmIDE2KSB7XG4gICAgICAgIHVubW91bnRDaGlsZHJlbihjaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICB9XG4gICAgICBpZiAoZG9SZW1vdmUpIHtcbiAgICAgICAgcmVtb3ZlKHZub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNob3VsZEludm9rZVZub2RlSG9vayAmJiAodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZVVubW91bnRlZCkgfHwgc2hvdWxkSW52b2tlRGlycykge1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICBzaG91bGRJbnZva2VEaXJzICYmIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgXCJ1bm1vdW50ZWRcIik7XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCByZW1vdmUgPSAodm5vZGUpID0+IHtcbiAgICBjb25zdCB7IHR5cGUsIGVsLCBhbmNob3IsIHRyYW5zaXRpb24gfSA9IHZub2RlO1xuICAgIGlmICh0eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgaWYgKHZub2RlLnBhdGNoRmxhZyA+IDAgJiYgdm5vZGUucGF0Y2hGbGFnICYgMjA0OCAmJiB0cmFuc2l0aW9uICYmICF0cmFuc2l0aW9uLnBlcnNpc3RlZCkge1xuICAgICAgICB2bm9kZS5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSBDb21tZW50KSB7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKGNoaWxkLmVsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVtb3ZlKGNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVtb3ZlRnJhZ21lbnQoZWwsIGFuY2hvcik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBTdGF0aWMpIHtcbiAgICAgIHJlbW92ZVN0YXRpY05vZGUodm5vZGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwZXJmb3JtUmVtb3ZlID0gKCkgPT4ge1xuICAgICAgaG9zdFJlbW92ZShlbCk7XG4gICAgICBpZiAodHJhbnNpdGlvbiAmJiAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQgJiYgdHJhbnNpdGlvbi5hZnRlckxlYXZlKSB7XG4gICAgICAgIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEgJiYgdHJhbnNpdGlvbiAmJiAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQpIHtcbiAgICAgIGNvbnN0IHsgbGVhdmUsIGRlbGF5TGVhdmUgfSA9IHRyYW5zaXRpb247XG4gICAgICBjb25zdCBwZXJmb3JtTGVhdmUgPSAoKSA9PiBsZWF2ZShlbCwgcGVyZm9ybVJlbW92ZSk7XG4gICAgICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgICAgICBkZWxheUxlYXZlKHZub2RlLmVsLCBwZXJmb3JtUmVtb3ZlLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVyZm9ybUxlYXZlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlcmZvcm1SZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHJlbW92ZUZyYWdtZW50ID0gKGN1ciwgZW5kKSA9PiB7XG4gICAgbGV0IG5leHQ7XG4gICAgd2hpbGUgKGN1ciAhPT0gZW5kKSB7XG4gICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGN1cik7XG4gICAgICBob3N0UmVtb3ZlKGN1cik7XG4gICAgICBjdXIgPSBuZXh0O1xuICAgIH1cbiAgICBob3N0UmVtb3ZlKGVuZCk7XG4gIH07XG4gIGNvbnN0IHVubW91bnRDb21wb25lbnQgPSAoaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkgPT4ge1xuICAgIGlmIChpbnN0YW5jZS50eXBlLl9faG1ySWQpIHtcbiAgICAgIHVucmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xuICAgIH1cbiAgICBjb25zdCB7IGJ1bSwgc2NvcGUsIGpvYiwgc3ViVHJlZSwgdW0sIG0sIGEgfSA9IGluc3RhbmNlO1xuICAgIGludmFsaWRhdGVNb3VudChtKTtcbiAgICBpbnZhbGlkYXRlTW91bnQoYSk7XG4gICAgaWYgKGJ1bSkge1xuICAgICAgaW52b2tlQXJyYXlGbnMoYnVtKTtcbiAgICB9XG4gICAgc2NvcGUuc3RvcCgpO1xuICAgIGlmIChqb2IpIHtcbiAgICAgIGpvYi5mbGFncyB8PSA4O1xuICAgICAgdW5tb3VudChzdWJUcmVlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcbiAgICB9XG4gICAgaWYgKHVtKSB7XG4gICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QodW0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICB9XG4gICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgIGluc3RhbmNlLmlzVW5tb3VudGVkID0gdHJ1ZTtcbiAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgaWYgKHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggJiYgIXBhcmVudFN1c3BlbnNlLmlzVW5tb3VudGVkICYmIGluc3RhbmNlLmFzeW5jRGVwICYmICFpbnN0YW5jZS5hc3luY1Jlc29sdmVkICYmIGluc3RhbmNlLnN1c3BlbnNlSWQgPT09IHBhcmVudFN1c3BlbnNlLnBlbmRpbmdJZCkge1xuICAgICAgcGFyZW50U3VzcGVuc2UuZGVwcy0tO1xuICAgICAgaWYgKHBhcmVudFN1c3BlbnNlLmRlcHMgPT09IDApIHtcbiAgICAgICAgcGFyZW50U3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICB7XG4gICAgICBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQoaW5zdGFuY2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdW5tb3VudENoaWxkcmVuID0gKGNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSA9IGZhbHNlLCBvcHRpbWl6ZWQgPSBmYWxzZSwgc3RhcnQgPSAwKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHVubW91bnQoY2hpbGRyZW5baV0sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlLCBvcHRpbWl6ZWQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZ2V0TmV4dEhvc3ROb2RlID0gKHZub2RlKSA9PiB7XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDYpIHtcbiAgICAgIHJldHVybiBnZXROZXh0SG9zdE5vZGUodm5vZGUuY29tcG9uZW50LnN1YlRyZWUpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICByZXR1cm4gdm5vZGUuc3VzcGVuc2UubmV4dCgpO1xuICAgIH1cbiAgICBjb25zdCBlbCA9IGhvc3ROZXh0U2libGluZyh2bm9kZS5hbmNob3IgfHwgdm5vZGUuZWwpO1xuICAgIGNvbnN0IHRlbGVwb3J0RW5kID0gZWwgJiYgZWxbVGVsZXBvcnRFbmRLZXldO1xuICAgIHJldHVybiB0ZWxlcG9ydEVuZCA/IGhvc3ROZXh0U2libGluZyh0ZWxlcG9ydEVuZCkgOiBlbDtcbiAgfTtcbiAgbGV0IGlzRmx1c2hpbmcgPSBmYWxzZTtcbiAgY29uc3QgcmVuZGVyID0gKHZub2RlLCBjb250YWluZXIsIG5hbWVzcGFjZSkgPT4ge1xuICAgIGlmICh2bm9kZSA9PSBudWxsKSB7XG4gICAgICBpZiAoY29udGFpbmVyLl92bm9kZSkge1xuICAgICAgICB1bm1vdW50KGNvbnRhaW5lci5fdm5vZGUsIG51bGwsIG51bGwsIHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXRjaChcbiAgICAgICAgY29udGFpbmVyLl92bm9kZSB8fCBudWxsLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBuYW1lc3BhY2VcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnRhaW5lci5fdm5vZGUgPSB2bm9kZTtcbiAgICBpZiAoIWlzRmx1c2hpbmcpIHtcbiAgICAgIGlzRmx1c2hpbmcgPSB0cnVlO1xuICAgICAgZmx1c2hQcmVGbHVzaENicygpO1xuICAgICAgZmx1c2hQb3N0Rmx1c2hDYnMoKTtcbiAgICAgIGlzRmx1c2hpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGludGVybmFscyA9IHtcbiAgICBwOiBwYXRjaCxcbiAgICB1bTogdW5tb3VudCxcbiAgICBtOiBtb3ZlLFxuICAgIHI6IHJlbW92ZSxcbiAgICBtdDogbW91bnRDb21wb25lbnQsXG4gICAgbWM6IG1vdW50Q2hpbGRyZW4sXG4gICAgcGM6IHBhdGNoQ2hpbGRyZW4sXG4gICAgcGJjOiBwYXRjaEJsb2NrQ2hpbGRyZW4sXG4gICAgbjogZ2V0TmV4dEhvc3ROb2RlLFxuICAgIG86IG9wdGlvbnNcbiAgfTtcbiAgbGV0IGh5ZHJhdGU7XG4gIGxldCBoeWRyYXRlTm9kZTtcbiAgaWYgKGNyZWF0ZUh5ZHJhdGlvbkZucykge1xuICAgIFtoeWRyYXRlLCBoeWRyYXRlTm9kZV0gPSBjcmVhdGVIeWRyYXRpb25GbnMoXG4gICAgICBpbnRlcm5hbHNcbiAgICApO1xuICB9XG4gIHJldHVybiB7XG4gICAgcmVuZGVyLFxuICAgIGh5ZHJhdGUsXG4gICAgY3JlYXRlQXBwOiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKVxuICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZUNoaWxkcmVuTmFtZXNwYWNlKHsgdHlwZSwgcHJvcHMgfSwgY3VycmVudE5hbWVzcGFjZSkge1xuICByZXR1cm4gY3VycmVudE5hbWVzcGFjZSA9PT0gXCJzdmdcIiAmJiB0eXBlID09PSBcImZvcmVpZ25PYmplY3RcIiB8fCBjdXJyZW50TmFtZXNwYWNlID09PSBcIm1hdGhtbFwiICYmIHR5cGUgPT09IFwiYW5ub3RhdGlvbi14bWxcIiAmJiBwcm9wcyAmJiBwcm9wcy5lbmNvZGluZyAmJiBwcm9wcy5lbmNvZGluZy5pbmNsdWRlcyhcImh0bWxcIikgPyB2b2lkIDAgOiBjdXJyZW50TmFtZXNwYWNlO1xufVxuZnVuY3Rpb24gdG9nZ2xlUmVjdXJzZSh7IGVmZmVjdCwgam9iIH0sIGFsbG93ZWQpIHtcbiAgaWYgKGFsbG93ZWQpIHtcbiAgICBlZmZlY3QuZmxhZ3MgfD0gMzI7XG4gICAgam9iLmZsYWdzIHw9IDQ7XG4gIH0gZWxzZSB7XG4gICAgZWZmZWN0LmZsYWdzICY9IH4zMjtcbiAgICBqb2IuZmxhZ3MgJj0gfjQ7XG4gIH1cbn1cbmZ1bmN0aW9uIG5lZWRUcmFuc2l0aW9uKHBhcmVudFN1c3BlbnNlLCB0cmFuc2l0aW9uKSB7XG4gIHJldHVybiAoIXBhcmVudFN1c3BlbnNlIHx8IHBhcmVudFN1c3BlbnNlICYmICFwYXJlbnRTdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSAmJiB0cmFuc2l0aW9uICYmICF0cmFuc2l0aW9uLnBlcnNpc3RlZDtcbn1cbmZ1bmN0aW9uIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yLCBzaGFsbG93ID0gZmFsc2UpIHtcbiAgY29uc3QgY2gxID0gbjEuY2hpbGRyZW47XG4gIGNvbnN0IGNoMiA9IG4yLmNoaWxkcmVuO1xuICBpZiAoaXNBcnJheShjaDEpICYmIGlzQXJyYXkoY2gyKSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2gxLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjMSA9IGNoMVtpXTtcbiAgICAgIGxldCBjMiA9IGNoMltpXTtcbiAgICAgIGlmIChjMi5zaGFwZUZsYWcgJiAxICYmICFjMi5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKGMyLnBhdGNoRmxhZyA8PSAwIHx8IGMyLnBhdGNoRmxhZyA9PT0gMzIpIHtcbiAgICAgICAgICBjMiA9IGNoMltpXSA9IGNsb25lSWZNb3VudGVkKGNoMltpXSk7XG4gICAgICAgICAgYzIuZWwgPSBjMS5lbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNoYWxsb3cgJiYgYzIucGF0Y2hGbGFnICE9PSAtMilcbiAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKGMxLCBjMik7XG4gICAgICB9XG4gICAgICBpZiAoYzIudHlwZSA9PT0gVGV4dCkge1xuICAgICAgICBjMi5lbCA9IGMxLmVsO1xuICAgICAgfVxuICAgICAgaWYgKGMyLnR5cGUgPT09IENvbW1lbnQgJiYgIWMyLmVsKSB7XG4gICAgICAgIGMyLmVsID0gYzEuZWw7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRTZXF1ZW5jZShhcnIpIHtcbiAgY29uc3QgcCA9IGFyci5zbGljZSgpO1xuICBjb25zdCByZXN1bHQgPSBbMF07XG4gIGxldCBpLCBqLCB1LCB2LCBjO1xuICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBhcnJJID0gYXJyW2ldO1xuICAgIGlmIChhcnJJICE9PSAwKSB7XG4gICAgICBqID0gcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChhcnJbal0gPCBhcnJJKSB7XG4gICAgICAgIHBbaV0gPSBqO1xuICAgICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB1ID0gMDtcbiAgICAgIHYgPSByZXN1bHQubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlICh1IDwgdikge1xuICAgICAgICBjID0gdSArIHYgPj4gMTtcbiAgICAgICAgaWYgKGFycltyZXN1bHRbY11dIDwgYXJySSkge1xuICAgICAgICAgIHUgPSBjICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2ID0gYztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFyckkgPCBhcnJbcmVzdWx0W3VdXSkge1xuICAgICAgICBpZiAodSA+IDApIHtcbiAgICAgICAgICBwW2ldID0gcmVzdWx0W3UgLSAxXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbdV0gPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB1ID0gcmVzdWx0Lmxlbmd0aDtcbiAgdiA9IHJlc3VsdFt1IC0gMV07XG4gIHdoaWxlICh1LS0gPiAwKSB7XG4gICAgcmVzdWx0W3VdID0gdjtcbiAgICB2ID0gcFt2XTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbG9jYXRlTm9uSHlkcmF0ZWRBc3luY1Jvb3QoaW5zdGFuY2UpIHtcbiAgY29uc3Qgc3ViQ29tcG9uZW50ID0gaW5zdGFuY2Uuc3ViVHJlZS5jb21wb25lbnQ7XG4gIGlmIChzdWJDb21wb25lbnQpIHtcbiAgICBpZiAoc3ViQ29tcG9uZW50LmFzeW5jRGVwICYmICFzdWJDb21wb25lbnQuYXN5bmNSZXNvbHZlZCkge1xuICAgICAgcmV0dXJuIHN1YkNvbXBvbmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGxvY2F0ZU5vbkh5ZHJhdGVkQXN5bmNSb290KHN1YkNvbXBvbmVudCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBpbnZhbGlkYXRlTW91bnQoaG9va3MpIHtcbiAgaWYgKGhvb2tzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKylcbiAgICAgIGhvb2tzW2ldLmZsYWdzIHw9IDg7XG4gIH1cbn1cblxuY29uc3Qgc3NyQ29udGV4dEtleSA9IFN5bWJvbC5mb3IoXCJ2LXNjeFwiKTtcbmNvbnN0IHVzZVNTUkNvbnRleHQgPSAoKSA9PiB7XG4gIHtcbiAgICBjb25zdCBjdHggPSBpbmplY3Qoc3NyQ29udGV4dEtleSk7XG4gICAgaWYgKCFjdHgpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYFNlcnZlciByZW5kZXJpbmcgY29udGV4dCBub3QgcHJvdmlkZWQuIE1ha2Ugc3VyZSB0byBvbmx5IGNhbGwgdXNlU1NSQ29udGV4dCgpIGNvbmRpdGlvbmFsbHkgaW4gdGhlIHNlcnZlciBidWlsZC5gXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY3R4O1xuICB9XG59O1xuXG5mdW5jdGlvbiB3YXRjaEVmZmVjdChlZmZlY3QsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGRvV2F0Y2goZWZmZWN0LCBudWxsLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHdhdGNoUG9zdEVmZmVjdChlZmZlY3QsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGRvV2F0Y2goXG4gICAgZWZmZWN0LFxuICAgIG51bGwsXG4gICAgZXh0ZW5kKHt9LCBvcHRpb25zLCB7IGZsdXNoOiBcInBvc3RcIiB9KSBcbiAgKTtcbn1cbmZ1bmN0aW9uIHdhdGNoU3luY0VmZmVjdChlZmZlY3QsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGRvV2F0Y2goXG4gICAgZWZmZWN0LFxuICAgIG51bGwsXG4gICAgZXh0ZW5kKHt9LCBvcHRpb25zLCB7IGZsdXNoOiBcInN5bmNcIiB9KSBcbiAgKTtcbn1cbmZ1bmN0aW9uIHdhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGNiKSkge1xuICAgIHdhcm4kMShcbiAgICAgIGBcXGB3YXRjaChmbiwgb3B0aW9ucz8pXFxgIHNpZ25hdHVyZSBoYXMgYmVlbiBtb3ZlZCB0byBhIHNlcGFyYXRlIEFQSS4gVXNlIFxcYHdhdGNoRWZmZWN0KGZuLCBvcHRpb25zPylcXGAgaW5zdGVhZC4gXFxgd2F0Y2hcXGAgbm93IG9ubHkgc3VwcG9ydHMgXFxgd2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucz8pIHNpZ25hdHVyZS5gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gZG9XYXRjaChzb3VyY2UsIGNiLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGRvV2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucyA9IEVNUFRZX09CSikge1xuICBjb25zdCB7IGltbWVkaWF0ZSwgZGVlcCwgZmx1c2gsIG9uY2UgfSA9IG9wdGlvbnM7XG4gIGlmICghY2IpIHtcbiAgICBpZiAoaW1tZWRpYXRlICE9PSB2b2lkIDApIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYHdhdGNoKCkgXCJpbW1lZGlhdGVcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgd2F0Y2goc291cmNlLCBjYWxsYmFjaywgb3B0aW9ucz8pIHNpZ25hdHVyZS5gXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZGVlcCAhPT0gdm9pZCAwKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGB3YXRjaCgpIFwiZGVlcFwiIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIHRoZSB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmBcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChvbmNlICE9PSB2b2lkIDApIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYHdhdGNoKCkgXCJvbmNlXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgYmFzZVdhdGNoT3B0aW9ucyA9IGV4dGVuZCh7fSwgb3B0aW9ucyk7XG4gIGJhc2VXYXRjaE9wdGlvbnMub25XYXJuID0gd2FybiQxO1xuICBjb25zdCBydW5zSW1tZWRpYXRlbHkgPSBjYiAmJiBpbW1lZGlhdGUgfHwgIWNiICYmIGZsdXNoICE9PSBcInBvc3RcIjtcbiAgbGV0IHNzckNsZWFudXA7XG4gIGlmIChpc0luU1NSQ29tcG9uZW50U2V0dXApIHtcbiAgICBpZiAoZmx1c2ggPT09IFwic3luY1wiKSB7XG4gICAgICBjb25zdCBjdHggPSB1c2VTU1JDb250ZXh0KCk7XG4gICAgICBzc3JDbGVhbnVwID0gY3R4Ll9fd2F0Y2hlckhhbmRsZXMgfHwgKGN0eC5fX3dhdGNoZXJIYW5kbGVzID0gW10pO1xuICAgIH0gZWxzZSBpZiAoIXJ1bnNJbW1lZGlhdGVseSkge1xuICAgICAgY29uc3Qgd2F0Y2hTdG9wSGFuZGxlID0gKCkgPT4ge1xuICAgICAgfTtcbiAgICAgIHdhdGNoU3RvcEhhbmRsZS5zdG9wID0gTk9PUDtcbiAgICAgIHdhdGNoU3RvcEhhbmRsZS5yZXN1bWUgPSBOT09QO1xuICAgICAgd2F0Y2hTdG9wSGFuZGxlLnBhdXNlID0gTk9PUDtcbiAgICAgIHJldHVybiB3YXRjaFN0b3BIYW5kbGU7XG4gICAgfVxuICB9XG4gIGNvbnN0IGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlO1xuICBiYXNlV2F0Y2hPcHRpb25zLmNhbGwgPSAoZm4sIHR5cGUsIGFyZ3MpID0+IGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncyk7XG4gIGxldCBpc1ByZSA9IGZhbHNlO1xuICBpZiAoZmx1c2ggPT09IFwicG9zdFwiKSB7XG4gICAgYmFzZVdhdGNoT3B0aW9ucy5zY2hlZHVsZXIgPSAoam9iKSA9PiB7XG4gICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3Qoam9iLCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSk7XG4gICAgfTtcbiAgfSBlbHNlIGlmIChmbHVzaCAhPT0gXCJzeW5jXCIpIHtcbiAgICBpc1ByZSA9IHRydWU7XG4gICAgYmFzZVdhdGNoT3B0aW9ucy5zY2hlZHVsZXIgPSAoam9iLCBpc0ZpcnN0UnVuKSA9PiB7XG4gICAgICBpZiAoaXNGaXJzdFJ1bikge1xuICAgICAgICBqb2IoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSm9iKGpvYik7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBiYXNlV2F0Y2hPcHRpb25zLmF1Z21lbnRKb2IgPSAoam9iKSA9PiB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBqb2IuZmxhZ3MgfD0gNDtcbiAgICB9XG4gICAgaWYgKGlzUHJlKSB7XG4gICAgICBqb2IuZmxhZ3MgfD0gMjtcbiAgICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICBqb2IuaWQgPSBpbnN0YW5jZS51aWQ7XG4gICAgICAgIGpvYi5pID0gaW5zdGFuY2U7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCB3YXRjaEhhbmRsZSA9IHdhdGNoJDEoc291cmNlLCBjYiwgYmFzZVdhdGNoT3B0aW9ucyk7XG4gIGlmIChpc0luU1NSQ29tcG9uZW50U2V0dXApIHtcbiAgICBpZiAoc3NyQ2xlYW51cCkge1xuICAgICAgc3NyQ2xlYW51cC5wdXNoKHdhdGNoSGFuZGxlKTtcbiAgICB9IGVsc2UgaWYgKHJ1bnNJbW1lZGlhdGVseSkge1xuICAgICAgd2F0Y2hIYW5kbGUoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHdhdGNoSGFuZGxlO1xufVxuZnVuY3Rpb24gaW5zdGFuY2VXYXRjaChzb3VyY2UsIHZhbHVlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHB1YmxpY1RoaXMgPSB0aGlzLnByb3h5O1xuICBjb25zdCBnZXR0ZXIgPSBpc1N0cmluZyhzb3VyY2UpID8gc291cmNlLmluY2x1ZGVzKFwiLlwiKSA/IGNyZWF0ZVBhdGhHZXR0ZXIocHVibGljVGhpcywgc291cmNlKSA6ICgpID0+IHB1YmxpY1RoaXNbc291cmNlXSA6IHNvdXJjZS5iaW5kKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpO1xuICBsZXQgY2I7XG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIGNiID0gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgY2IgPSB2YWx1ZS5oYW5kbGVyO1xuICAgIG9wdGlvbnMgPSB2YWx1ZTtcbiAgfVxuICBjb25zdCByZXNldCA9IHNldEN1cnJlbnRJbnN0YW5jZSh0aGlzKTtcbiAgY29uc3QgcmVzID0gZG9XYXRjaChnZXR0ZXIsIGNiLmJpbmQocHVibGljVGhpcyksIG9wdGlvbnMpO1xuICByZXNldCgpO1xuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gY3JlYXRlUGF0aEdldHRlcihjdHgsIHBhdGgpIHtcbiAgY29uc3Qgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiLlwiKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBsZXQgY3VyID0gY3R4O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoICYmIGN1cjsgaSsrKSB7XG4gICAgICBjdXIgPSBjdXJbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gY3VyO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VNb2RlbChwcm9wcywgbmFtZSwgb3B0aW9ucyA9IEVNUFRZX09CSikge1xuICBjb25zdCBpID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIGlmICghaSkge1xuICAgIHdhcm4kMShgdXNlTW9kZWwoKSBjYWxsZWQgd2l0aG91dCBhY3RpdmUgaW5zdGFuY2UuYCk7XG4gICAgcmV0dXJuIHJlZigpO1xuICB9XG4gIGNvbnN0IGNhbWVsaXplZE5hbWUgPSBjYW1lbGl6ZShuYW1lKTtcbiAgaWYgKCFpLnByb3BzT3B0aW9uc1swXVtjYW1lbGl6ZWROYW1lXSkge1xuICAgIHdhcm4kMShgdXNlTW9kZWwoKSBjYWxsZWQgd2l0aCBwcm9wIFwiJHtuYW1lfVwiIHdoaWNoIGlzIG5vdCBkZWNsYXJlZC5gKTtcbiAgICByZXR1cm4gcmVmKCk7XG4gIH1cbiAgY29uc3QgaHlwaGVuYXRlZE5hbWUgPSBoeXBoZW5hdGUobmFtZSk7XG4gIGNvbnN0IG1vZGlmaWVycyA9IGdldE1vZGVsTW9kaWZpZXJzKHByb3BzLCBjYW1lbGl6ZWROYW1lKTtcbiAgY29uc3QgcmVzID0gY3VzdG9tUmVmKCh0cmFjaywgdHJpZ2dlcikgPT4ge1xuICAgIGxldCBsb2NhbFZhbHVlO1xuICAgIGxldCBwcmV2U2V0VmFsdWUgPSBFTVBUWV9PQko7XG4gICAgbGV0IHByZXZFbWl0dGVkVmFsdWU7XG4gICAgd2F0Y2hTeW5jRWZmZWN0KCgpID0+IHtcbiAgICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW2NhbWVsaXplZE5hbWVdO1xuICAgICAgaWYgKGhhc0NoYW5nZWQobG9jYWxWYWx1ZSwgcHJvcFZhbHVlKSkge1xuICAgICAgICBsb2NhbFZhbHVlID0gcHJvcFZhbHVlO1xuICAgICAgICB0cmlnZ2VyKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgdHJhY2soKTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuZ2V0ID8gb3B0aW9ucy5nZXQobG9jYWxWYWx1ZSkgOiBsb2NhbFZhbHVlO1xuICAgICAgfSxcbiAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBlbWl0dGVkVmFsdWUgPSBvcHRpb25zLnNldCA/IG9wdGlvbnMuc2V0KHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICBpZiAoIWhhc0NoYW5nZWQoZW1pdHRlZFZhbHVlLCBsb2NhbFZhbHVlKSAmJiAhKHByZXZTZXRWYWx1ZSAhPT0gRU1QVFlfT0JKICYmIGhhc0NoYW5nZWQodmFsdWUsIHByZXZTZXRWYWx1ZSkpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJhd1Byb3BzID0gaS52bm9kZS5wcm9wcztcbiAgICAgICAgaWYgKCEocmF3UHJvcHMgJiYgLy8gY2hlY2sgaWYgcGFyZW50IGhhcyBwYXNzZWQgdi1tb2RlbFxuICAgICAgICAobmFtZSBpbiByYXdQcm9wcyB8fCBjYW1lbGl6ZWROYW1lIGluIHJhd1Byb3BzIHx8IGh5cGhlbmF0ZWROYW1lIGluIHJhd1Byb3BzKSAmJiAoYG9uVXBkYXRlOiR7bmFtZX1gIGluIHJhd1Byb3BzIHx8IGBvblVwZGF0ZToke2NhbWVsaXplZE5hbWV9YCBpbiByYXdQcm9wcyB8fCBgb25VcGRhdGU6JHtoeXBoZW5hdGVkTmFtZX1gIGluIHJhd1Byb3BzKSkpIHtcbiAgICAgICAgICBsb2NhbFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgdHJpZ2dlcigpO1xuICAgICAgICB9XG4gICAgICAgIGkuZW1pdChgdXBkYXRlOiR7bmFtZX1gLCBlbWl0dGVkVmFsdWUpO1xuICAgICAgICBpZiAoaGFzQ2hhbmdlZCh2YWx1ZSwgZW1pdHRlZFZhbHVlKSAmJiBoYXNDaGFuZ2VkKHZhbHVlLCBwcmV2U2V0VmFsdWUpICYmICFoYXNDaGFuZ2VkKGVtaXR0ZWRWYWx1ZSwgcHJldkVtaXR0ZWRWYWx1ZSkpIHtcbiAgICAgICAgICB0cmlnZ2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJldlNldFZhbHVlID0gdmFsdWU7XG4gICAgICAgIHByZXZFbWl0dGVkVmFsdWUgPSBlbWl0dGVkVmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIHJlc1tTeW1ib2wuaXRlcmF0b3JdID0gKCkgPT4ge1xuICAgIGxldCBpMiA9IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQoKSB7XG4gICAgICAgIGlmIChpMiA8IDIpIHtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogaTIrKyA/IG1vZGlmaWVycyB8fCBFTVBUWV9PQkogOiByZXMsIGRvbmU6IGZhbHNlIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIHJlcztcbn1cbmNvbnN0IGdldE1vZGVsTW9kaWZpZXJzID0gKHByb3BzLCBtb2RlbE5hbWUpID0+IHtcbiAgcmV0dXJuIG1vZGVsTmFtZSA9PT0gXCJtb2RlbFZhbHVlXCIgfHwgbW9kZWxOYW1lID09PSBcIm1vZGVsLXZhbHVlXCIgPyBwcm9wcy5tb2RlbE1vZGlmaWVycyA6IHByb3BzW2Ake21vZGVsTmFtZX1Nb2RpZmllcnNgXSB8fCBwcm9wc1tgJHtjYW1lbGl6ZShtb2RlbE5hbWUpfU1vZGlmaWVyc2BdIHx8IHByb3BzW2Ake2h5cGhlbmF0ZShtb2RlbE5hbWUpfU1vZGlmaWVyc2BdO1xufTtcblxuZnVuY3Rpb24gZW1pdChpbnN0YW5jZSwgZXZlbnQsIC4uLnJhd0FyZ3MpIHtcbiAgaWYgKGluc3RhbmNlLmlzVW5tb3VudGVkKSByZXR1cm47XG4gIGNvbnN0IHByb3BzID0gaW5zdGFuY2Uudm5vZGUucHJvcHMgfHwgRU1QVFlfT0JKO1xuICB7XG4gICAgY29uc3Qge1xuICAgICAgZW1pdHNPcHRpb25zLFxuICAgICAgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXVxuICAgIH0gPSBpbnN0YW5jZTtcbiAgICBpZiAoZW1pdHNPcHRpb25zKSB7XG4gICAgICBpZiAoIShldmVudCBpbiBlbWl0c09wdGlvbnMpICYmIHRydWUpIHtcbiAgICAgICAgaWYgKCFwcm9wc09wdGlvbnMgfHwgISh0b0hhbmRsZXJLZXkoY2FtZWxpemUoZXZlbnQpKSBpbiBwcm9wc09wdGlvbnMpKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYENvbXBvbmVudCBlbWl0dGVkIGV2ZW50IFwiJHtldmVudH1cIiBidXQgaXQgaXMgbmVpdGhlciBkZWNsYXJlZCBpbiB0aGUgZW1pdHMgb3B0aW9uIG5vciBhcyBhbiBcIiR7dG9IYW5kbGVyS2V5KGNhbWVsaXplKGV2ZW50KSl9XCIgcHJvcC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gZW1pdHNPcHRpb25zW2V2ZW50XTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odmFsaWRhdG9yKSkge1xuICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0b3IoLi4ucmF3QXJncyk7XG4gICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIGBJbnZhbGlkIGV2ZW50IGFyZ3VtZW50czogZXZlbnQgdmFsaWRhdGlvbiBmYWlsZWQgZm9yIGV2ZW50IFwiJHtldmVudH1cIi5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBsZXQgYXJncyA9IHJhd0FyZ3M7XG4gIGNvbnN0IGlzTW9kZWxMaXN0ZW5lciA9IGV2ZW50LnN0YXJ0c1dpdGgoXCJ1cGRhdGU6XCIpO1xuICBjb25zdCBtb2RpZmllcnMgPSBpc01vZGVsTGlzdGVuZXIgJiYgZ2V0TW9kZWxNb2RpZmllcnMocHJvcHMsIGV2ZW50LnNsaWNlKDcpKTtcbiAgaWYgKG1vZGlmaWVycykge1xuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgYXJncyA9IHJhd0FyZ3MubWFwKChhKSA9PiBpc1N0cmluZyhhKSA/IGEudHJpbSgpIDogYSk7XG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICBhcmdzID0gcmF3QXJncy5tYXAobG9vc2VUb051bWJlcik7XG4gICAgfVxuICB9XG4gIHtcbiAgICBkZXZ0b29sc0NvbXBvbmVudEVtaXQoaW5zdGFuY2UsIGV2ZW50LCBhcmdzKTtcbiAgfVxuICB7XG4gICAgY29uc3QgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgcHJvcHNbdG9IYW5kbGVyS2V5KGxvd2VyQ2FzZUV2ZW50KV0pIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYEV2ZW50IFwiJHtsb3dlckNhc2VFdmVudH1cIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCAke2Zvcm1hdENvbXBvbmVudE5hbWUoXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgaW5zdGFuY2UudHlwZVxuICAgICAgICApfSBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXCIke2V2ZW50fVwiLiBOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSB2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXCIke2h5cGhlbmF0ZShcbiAgICAgICAgICBldmVudFxuICAgICAgICApfVwiIGluc3RlYWQgb2YgXCIke2V2ZW50fVwiLmBcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGxldCBoYW5kbGVyTmFtZTtcbiAgbGV0IGhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShldmVudCldIHx8IC8vIGFsc28gdHJ5IGNhbWVsQ2FzZSBldmVudCBoYW5kbGVyICgjMjI0OSlcbiAgcHJvcHNbaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoY2FtZWxpemUoZXZlbnQpKV07XG4gIGlmICghaGFuZGxlciAmJiBpc01vZGVsTGlzdGVuZXIpIHtcbiAgICBoYW5kbGVyID0gcHJvcHNbaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoaHlwaGVuYXRlKGV2ZW50KSldO1xuICB9XG4gIGlmIChoYW5kbGVyKSB7XG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoXG4gICAgICBoYW5kbGVyLFxuICAgICAgaW5zdGFuY2UsXG4gICAgICA2LFxuICAgICAgYXJnc1xuICAgICk7XG4gIH1cbiAgY29uc3Qgb25jZUhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZSArIGBPbmNlYF07XG4gIGlmIChvbmNlSGFuZGxlcikge1xuICAgIGlmICghaW5zdGFuY2UuZW1pdHRlZCkge1xuICAgICAgaW5zdGFuY2UuZW1pdHRlZCA9IHt9O1xuICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UuZW1pdHRlZFtoYW5kbGVyTmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW5zdGFuY2UuZW1pdHRlZFtoYW5kbGVyTmFtZV0gPSB0cnVlO1xuICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKFxuICAgICAgb25jZUhhbmRsZXIsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDYsXG4gICAgICBhcmdzXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gbm9ybWFsaXplRW1pdHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xuICBjb25zdCBjYWNoZSA9IGFwcENvbnRleHQuZW1pdHNDYWNoZTtcbiAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGNvbXApO1xuICBpZiAoY2FjaGVkICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG4gIGNvbnN0IHJhdyA9IGNvbXAuZW1pdHM7XG4gIGxldCBub3JtYWxpemVkID0ge307XG4gIGxldCBoYXNFeHRlbmRzID0gZmFsc2U7XG4gIGlmICghaXNGdW5jdGlvbihjb21wKSkge1xuICAgIGNvbnN0IGV4dGVuZEVtaXRzID0gKHJhdzIpID0+IHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRGcm9tRXh0ZW5kID0gbm9ybWFsaXplRW1pdHNPcHRpb25zKHJhdzIsIGFwcENvbnRleHQsIHRydWUpO1xuICAgICAgaWYgKG5vcm1hbGl6ZWRGcm9tRXh0ZW5kKSB7XG4gICAgICAgIGhhc0V4dGVuZHMgPSB0cnVlO1xuICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgbm9ybWFsaXplZEZyb21FeHRlbmQpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKCFhc01peGluICYmIGFwcENvbnRleHQubWl4aW5zLmxlbmd0aCkge1xuICAgICAgYXBwQ29udGV4dC5taXhpbnMuZm9yRWFjaChleHRlbmRFbWl0cyk7XG4gICAgfVxuICAgIGlmIChjb21wLmV4dGVuZHMpIHtcbiAgICAgIGV4dGVuZEVtaXRzKGNvbXAuZXh0ZW5kcyk7XG4gICAgfVxuICAgIGlmIChjb21wLm1peGlucykge1xuICAgICAgY29tcC5taXhpbnMuZm9yRWFjaChleHRlbmRFbWl0cyk7XG4gICAgfVxuICB9XG4gIGlmICghcmF3ICYmICFoYXNFeHRlbmRzKSB7XG4gICAgaWYgKGlzT2JqZWN0KGNvbXApKSB7XG4gICAgICBjYWNoZS5zZXQoY29tcCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChpc0FycmF5KHJhdykpIHtcbiAgICByYXcuZm9yRWFjaCgoa2V5KSA9PiBub3JtYWxpemVkW2tleV0gPSBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICBleHRlbmQobm9ybWFsaXplZCwgcmF3KTtcbiAgfVxuICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICBjYWNoZS5zZXQoY29tcCwgbm9ybWFsaXplZCk7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59XG5mdW5jdGlvbiBpc0VtaXRMaXN0ZW5lcihvcHRpb25zLCBrZXkpIHtcbiAgaWYgKCFvcHRpb25zIHx8ICFpc09uKGtleSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAga2V5ID0ga2V5LnNsaWNlKDIpLnJlcGxhY2UoL09uY2UkLywgXCJcIik7XG4gIHJldHVybiBoYXNPd24ob3B0aW9ucywga2V5WzBdLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMSkpIHx8IGhhc093bihvcHRpb25zLCBoeXBoZW5hdGUoa2V5KSkgfHwgaGFzT3duKG9wdGlvbnMsIGtleSk7XG59XG5cbmxldCBhY2Nlc3NlZEF0dHJzID0gZmFsc2U7XG5mdW5jdGlvbiBtYXJrQXR0cnNBY2Nlc3NlZCgpIHtcbiAgYWNjZXNzZWRBdHRycyA9IHRydWU7XG59XG5mdW5jdGlvbiByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlOiBDb21wb25lbnQsXG4gICAgdm5vZGUsXG4gICAgcHJveHksXG4gICAgd2l0aFByb3h5LFxuICAgIHByb3BzT3B0aW9uczogW3Byb3BzT3B0aW9uc10sXG4gICAgc2xvdHMsXG4gICAgYXR0cnMsXG4gICAgZW1pdCxcbiAgICByZW5kZXIsXG4gICAgcmVuZGVyQ2FjaGUsXG4gICAgcHJvcHMsXG4gICAgZGF0YSxcbiAgICBzZXR1cFN0YXRlLFxuICAgIGN0eCxcbiAgICBpbmhlcml0QXR0cnNcbiAgfSA9IGluc3RhbmNlO1xuICBjb25zdCBwcmV2ID0gc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGluc3RhbmNlKTtcbiAgbGV0IHJlc3VsdDtcbiAgbGV0IGZhbGx0aHJvdWdoQXR0cnM7XG4gIHtcbiAgICBhY2Nlc3NlZEF0dHJzID0gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgNCkge1xuICAgICAgY29uc3QgcHJveHlUb1VzZSA9IHdpdGhQcm94eSB8fCBwcm94eTtcbiAgICAgIGNvbnN0IHRoaXNQcm94eSA9IHNldHVwU3RhdGUuX19pc1NjcmlwdFNldHVwID8gbmV3IFByb3h5KHByb3h5VG9Vc2UsIHtcbiAgICAgICAgZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIGBQcm9wZXJ0eSAnJHtTdHJpbmcoXG4gICAgICAgICAgICAgIGtleVxuICAgICAgICAgICAgKX0nIHdhcyBhY2Nlc3NlZCB2aWEgJ3RoaXMnLiBBdm9pZCB1c2luZyAndGhpcycgaW4gdGVtcGxhdGVzLmBcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xuICAgICAgICB9XG4gICAgICB9KSA6IHByb3h5VG9Vc2U7XG4gICAgICByZXN1bHQgPSBub3JtYWxpemVWTm9kZShcbiAgICAgICAgcmVuZGVyLmNhbGwoXG4gICAgICAgICAgdGhpc1Byb3h5LFxuICAgICAgICAgIHByb3h5VG9Vc2UsXG4gICAgICAgICAgcmVuZGVyQ2FjaGUsXG4gICAgICAgICAgdHJ1ZSA/IHNoYWxsb3dSZWFkb25seShwcm9wcykgOiBwcm9wcyxcbiAgICAgICAgICBzZXR1cFN0YXRlLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgY3R4XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICBmYWxsdGhyb3VnaEF0dHJzID0gYXR0cnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlbmRlcjIgPSBDb21wb25lbnQ7XG4gICAgICBpZiAoYXR0cnMgPT09IHByb3BzKSB7XG4gICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBub3JtYWxpemVWTm9kZShcbiAgICAgICAgcmVuZGVyMi5sZW5ndGggPiAxID8gcmVuZGVyMihcbiAgICAgICAgICB0cnVlID8gc2hhbGxvd1JlYWRvbmx5KHByb3BzKSA6IHByb3BzLFxuICAgICAgICAgIHRydWUgPyB7XG4gICAgICAgICAgICBnZXQgYXR0cnMoKSB7XG4gICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgICAgICAgICAgIHJldHVybiBzaGFsbG93UmVhZG9ubHkoYXR0cnMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNsb3RzLFxuICAgICAgICAgICAgZW1pdFxuICAgICAgICAgIH0gOiB7IGF0dHJzLCBzbG90cywgZW1pdCB9XG4gICAgICAgICkgOiByZW5kZXIyKFxuICAgICAgICAgIHRydWUgPyBzaGFsbG93UmVhZG9ubHkocHJvcHMpIDogcHJvcHMsXG4gICAgICAgICAgbnVsbFxuICAgICAgICApXG4gICAgICApO1xuICAgICAgZmFsbHRocm91Z2hBdHRycyA9IENvbXBvbmVudC5wcm9wcyA/IGF0dHJzIDogZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoKGF0dHJzKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGJsb2NrU3RhY2subGVuZ3RoID0gMDtcbiAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAxKTtcbiAgICByZXN1bHQgPSBjcmVhdGVWTm9kZShDb21tZW50KTtcbiAgfVxuICBsZXQgcm9vdCA9IHJlc3VsdDtcbiAgbGV0IHNldFJvb3QgPSB2b2lkIDA7XG4gIGlmIChyZXN1bHQucGF0Y2hGbGFnID4gMCAmJiByZXN1bHQucGF0Y2hGbGFnICYgMjA0OCkge1xuICAgIFtyb290LCBzZXRSb290XSA9IGdldENoaWxkUm9vdChyZXN1bHQpO1xuICB9XG4gIGlmIChmYWxsdGhyb3VnaEF0dHJzICYmIGluaGVyaXRBdHRycyAhPT0gZmFsc2UpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZmFsbHRocm91Z2hBdHRycyk7XG4gICAgY29uc3QgeyBzaGFwZUZsYWcgfSA9IHJvb3Q7XG4gICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICBpZiAoc2hhcGVGbGFnICYgKDEgfCA2KSkge1xuICAgICAgICBpZiAocHJvcHNPcHRpb25zICYmIGtleXMuc29tZShpc01vZGVsTGlzdGVuZXIpKSB7XG4gICAgICAgICAgZmFsbHRocm91Z2hBdHRycyA9IGZpbHRlck1vZGVsTGlzdGVuZXJzKFxuICAgICAgICAgICAgZmFsbHRocm91Z2hBdHRycyxcbiAgICAgICAgICAgIHByb3BzT3B0aW9uc1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcm9vdCA9IGNsb25lVk5vZGUocm9vdCwgZmFsbHRocm91Z2hBdHRycywgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmICghYWNjZXNzZWRBdHRycyAmJiByb290LnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgY29uc3QgYWxsQXR0cnMgPSBPYmplY3Qua2V5cyhhdHRycyk7XG4gICAgICAgIGNvbnN0IGV2ZW50QXR0cnMgPSBbXTtcbiAgICAgICAgY29uc3QgZXh0cmFBdHRycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFsbEF0dHJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGtleSA9IGFsbEF0dHJzW2ldO1xuICAgICAgICAgIGlmIChpc09uKGtleSkpIHtcbiAgICAgICAgICAgIGlmICghaXNNb2RlbExpc3RlbmVyKGtleSkpIHtcbiAgICAgICAgICAgICAgZXZlbnRBdHRycy5wdXNoKGtleVsyXS50b0xvd2VyQ2FzZSgpICsga2V5LnNsaWNlKDMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXh0cmFBdHRycy5wdXNoKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChleHRyYUF0dHJzLmxlbmd0aCkge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIGBFeHRyYW5lb3VzIG5vbi1wcm9wcyBhdHRyaWJ1dGVzICgke2V4dHJhQXR0cnMuam9pbihcIiwgXCIpfSkgd2VyZSBwYXNzZWQgdG8gY29tcG9uZW50IGJ1dCBjb3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBpbmhlcml0ZWQgYmVjYXVzZSBjb21wb25lbnQgcmVuZGVycyBmcmFnbWVudCBvciB0ZXh0IG9yIHRlbGVwb3J0IHJvb3Qgbm9kZXMuYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50QXR0cnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYEV4dHJhbmVvdXMgbm9uLWVtaXRzIGV2ZW50IGxpc3RlbmVycyAoJHtldmVudEF0dHJzLmpvaW4oXCIsIFwiKX0pIHdlcmUgcGFzc2VkIHRvIGNvbXBvbmVudCBidXQgY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGJlY2F1c2UgY29tcG9uZW50IHJlbmRlcnMgZnJhZ21lbnQgb3IgdGV4dCByb290IG5vZGVzLiBJZiB0aGUgbGlzdGVuZXIgaXMgaW50ZW5kZWQgdG8gYmUgYSBjb21wb25lbnQgY3VzdG9tIGV2ZW50IGxpc3RlbmVyIG9ubHksIGRlY2xhcmUgaXQgdXNpbmcgdGhlIFwiZW1pdHNcIiBvcHRpb24uYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHZub2RlLmRpcnMpIHtcbiAgICBpZiAoIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYFJ1bnRpbWUgZGlyZWN0aXZlIHVzZWQgb24gY29tcG9uZW50IHdpdGggbm9uLWVsZW1lbnQgcm9vdCBub2RlLiBUaGUgZGlyZWN0aXZlcyB3aWxsIG5vdCBmdW5jdGlvbiBhcyBpbnRlbmRlZC5gXG4gICAgICApO1xuICAgIH1cbiAgICByb290ID0gY2xvbmVWTm9kZShyb290LCBudWxsLCBmYWxzZSwgdHJ1ZSk7XG4gICAgcm9vdC5kaXJzID0gcm9vdC5kaXJzID8gcm9vdC5kaXJzLmNvbmNhdCh2bm9kZS5kaXJzKSA6IHZub2RlLmRpcnM7XG4gIH1cbiAgaWYgKHZub2RlLnRyYW5zaXRpb24pIHtcbiAgICBpZiAoIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYENvbXBvbmVudCBpbnNpZGUgPFRyYW5zaXRpb24+IHJlbmRlcnMgbm9uLWVsZW1lbnQgcm9vdCBub2RlIHRoYXQgY2Fubm90IGJlIGFuaW1hdGVkLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHNldFRyYW5zaXRpb25Ib29rcyhyb290LCB2bm9kZS50cmFuc2l0aW9uKTtcbiAgfVxuICBpZiAoc2V0Um9vdCkge1xuICAgIHNldFJvb3Qocm9vdCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gcm9vdDtcbiAgfVxuICBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UocHJldik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCBnZXRDaGlsZFJvb3QgPSAodm5vZGUpID0+IHtcbiAgY29uc3QgcmF3Q2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgY29uc3QgZHluYW1pY0NoaWxkcmVuID0gdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xuICBjb25zdCBjaGlsZFJvb3QgPSBmaWx0ZXJTaW5nbGVSb290KHJhd0NoaWxkcmVuLCBmYWxzZSk7XG4gIGlmICghY2hpbGRSb290KSB7XG4gICAgcmV0dXJuIFt2bm9kZSwgdm9pZCAwXTtcbiAgfSBlbHNlIGlmIChjaGlsZFJvb3QucGF0Y2hGbGFnID4gMCAmJiBjaGlsZFJvb3QucGF0Y2hGbGFnICYgMjA0OCkge1xuICAgIHJldHVybiBnZXRDaGlsZFJvb3QoY2hpbGRSb290KTtcbiAgfVxuICBjb25zdCBpbmRleCA9IHJhd0NoaWxkcmVuLmluZGV4T2YoY2hpbGRSb290KTtcbiAgY29uc3QgZHluYW1pY0luZGV4ID0gZHluYW1pY0NoaWxkcmVuID8gZHluYW1pY0NoaWxkcmVuLmluZGV4T2YoY2hpbGRSb290KSA6IC0xO1xuICBjb25zdCBzZXRSb290ID0gKHVwZGF0ZWRSb290KSA9PiB7XG4gICAgcmF3Q2hpbGRyZW5baW5kZXhdID0gdXBkYXRlZFJvb3Q7XG4gICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgaWYgKGR5bmFtaWNJbmRleCA+IC0xKSB7XG4gICAgICAgIGR5bmFtaWNDaGlsZHJlbltkeW5hbWljSW5kZXhdID0gdXBkYXRlZFJvb3Q7XG4gICAgICB9IGVsc2UgaWYgKHVwZGF0ZWRSb290LnBhdGNoRmxhZyA+IDApIHtcbiAgICAgICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID0gWy4uLmR5bmFtaWNDaGlsZHJlbiwgdXBkYXRlZFJvb3RdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIFtub3JtYWxpemVWTm9kZShjaGlsZFJvb3QpLCBzZXRSb290XTtcbn07XG5mdW5jdGlvbiBmaWx0ZXJTaW5nbGVSb290KGNoaWxkcmVuLCByZWN1cnNlID0gdHJ1ZSkge1xuICBsZXQgc2luZ2xlUm9vdDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVk5vZGUoY2hpbGQpKSB7XG4gICAgICBpZiAoY2hpbGQudHlwZSAhPT0gQ29tbWVudCB8fCBjaGlsZC5jaGlsZHJlbiA9PT0gXCJ2LWlmXCIpIHtcbiAgICAgICAgaWYgKHNpbmdsZVJvb3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2luZ2xlUm9vdCA9IGNoaWxkO1xuICAgICAgICAgIGlmIChyZWN1cnNlICYmIHNpbmdsZVJvb3QucGF0Y2hGbGFnID4gMCAmJiBzaW5nbGVSb290LnBhdGNoRmxhZyAmIDIwNDgpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJTaW5nbGVSb290KHNpbmdsZVJvb3QuY2hpbGRyZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIHJldHVybiBzaW5nbGVSb290O1xufVxuY29uc3QgZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoID0gKGF0dHJzKSA9PiB7XG4gIGxldCByZXM7XG4gIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgaWYgKGtleSA9PT0gXCJjbGFzc1wiIHx8IGtleSA9PT0gXCJzdHlsZVwiIHx8IGlzT24oa2V5KSkge1xuICAgICAgKHJlcyB8fCAocmVzID0ge30pKVtrZXldID0gYXR0cnNba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5jb25zdCBmaWx0ZXJNb2RlbExpc3RlbmVycyA9IChhdHRycywgcHJvcHMpID0+IHtcbiAgY29uc3QgcmVzID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSB8fCAhKGtleS5zbGljZSg5KSBpbiBwcm9wcykpIHtcbiAgICAgIHJlc1trZXldID0gYXR0cnNba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5jb25zdCBpc0VsZW1lbnRSb290ID0gKHZub2RlKSA9PiB7XG4gIHJldHVybiB2bm9kZS5zaGFwZUZsYWcgJiAoNiB8IDEpIHx8IHZub2RlLnR5cGUgPT09IENvbW1lbnQ7XG59O1xuZnVuY3Rpb24gc2hvdWxkVXBkYXRlQ29tcG9uZW50KHByZXZWTm9kZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpIHtcbiAgY29uc3QgeyBwcm9wczogcHJldlByb3BzLCBjaGlsZHJlbjogcHJldkNoaWxkcmVuLCBjb21wb25lbnQgfSA9IHByZXZWTm9kZTtcbiAgY29uc3QgeyBwcm9wczogbmV4dFByb3BzLCBjaGlsZHJlbjogbmV4dENoaWxkcmVuLCBwYXRjaEZsYWcgfSA9IG5leHRWTm9kZTtcbiAgY29uc3QgZW1pdHMgPSBjb21wb25lbnQuZW1pdHNPcHRpb25zO1xuICBpZiAoKHByZXZDaGlsZHJlbiB8fCBuZXh0Q2hpbGRyZW4pICYmIGlzSG1yVXBkYXRpbmcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAobmV4dFZOb2RlLmRpcnMgfHwgbmV4dFZOb2RlLnRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAob3B0aW1pemVkICYmIHBhdGNoRmxhZyA+PSAwKSB7XG4gICAgaWYgKHBhdGNoRmxhZyAmIDEwMjQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAocGF0Y2hGbGFnICYgMTYpIHtcbiAgICAgIGlmICghcHJldlByb3BzKSB7XG4gICAgICAgIHJldHVybiAhIW5leHRQcm9wcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzKTtcbiAgICB9IGVsc2UgaWYgKHBhdGNoRmxhZyAmIDgpIHtcbiAgICAgIGNvbnN0IGR5bmFtaWNQcm9wcyA9IG5leHRWTm9kZS5keW5hbWljUHJvcHM7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGR5bmFtaWNQcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBkeW5hbWljUHJvcHNbaV07XG4gICAgICAgIGlmIChuZXh0UHJvcHNba2V5XSAhPT0gcHJldlByb3BzW2tleV0gJiYgIWlzRW1pdExpc3RlbmVyKGVtaXRzLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHByZXZDaGlsZHJlbiB8fCBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgIGlmICghbmV4dENoaWxkcmVuIHx8ICFuZXh0Q2hpbGRyZW4uJHN0YWJsZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByZXZQcm9wcyA9PT0gbmV4dFByb3BzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghcHJldlByb3BzKSB7XG4gICAgICByZXR1cm4gISFuZXh0UHJvcHM7XG4gICAgfVxuICAgIGlmICghbmV4dFByb3BzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHMpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHNPcHRpb25zKSB7XG4gIGNvbnN0IG5leHRLZXlzID0gT2JqZWN0LmtleXMobmV4dFByb3BzKTtcbiAgaWYgKG5leHRLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMocHJldlByb3BzKS5sZW5ndGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IG5leHRLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0gbmV4dEtleXNbaV07XG4gICAgaWYgKG5leHRQcm9wc1trZXldICE9PSBwcmV2UHJvcHNba2V5XSAmJiAhaXNFbWl0TGlzdGVuZXIoZW1pdHNPcHRpb25zLCBrZXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gdXBkYXRlSE9DSG9zdEVsKHsgdm5vZGUsIHBhcmVudCB9LCBlbCkge1xuICB3aGlsZSAocGFyZW50KSB7XG4gICAgY29uc3Qgcm9vdCA9IHBhcmVudC5zdWJUcmVlO1xuICAgIGlmIChyb290LnN1c3BlbnNlICYmIHJvb3Quc3VzcGVuc2UuYWN0aXZlQnJhbmNoID09PSB2bm9kZSkge1xuICAgICAgcm9vdC5lbCA9IHZub2RlLmVsO1xuICAgIH1cbiAgICBpZiAocm9vdCA9PT0gdm5vZGUpIHtcbiAgICAgICh2bm9kZSA9IHBhcmVudC52bm9kZSkuZWwgPSBlbDtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBpc1N1c3BlbnNlID0gKHR5cGUpID0+IHR5cGUuX19pc1N1c3BlbnNlO1xubGV0IHN1c3BlbnNlSWQgPSAwO1xuY29uc3QgU3VzcGVuc2VJbXBsID0ge1xuICBuYW1lOiBcIlN1c3BlbnNlXCIsXG4gIC8vIEluIG9yZGVyIHRvIG1ha2UgU3VzcGVuc2UgdHJlZS1zaGFrYWJsZSwgd2UgbmVlZCB0byBhdm9pZCBpbXBvcnRpbmcgaXRcbiAgLy8gZGlyZWN0bHkgaW4gdGhlIHJlbmRlcmVyLiBUaGUgcmVuZGVyZXIgY2hlY2tzIGZvciB0aGUgX19pc1N1c3BlbnNlIGZsYWdcbiAgLy8gb24gYSB2bm9kZSdzIHR5cGUgYW5kIGNhbGxzIHRoZSBgcHJvY2Vzc2AgbWV0aG9kLCBwYXNzaW5nIGluIHJlbmRlcmVyXG4gIC8vIGludGVybmFscy5cbiAgX19pc1N1c3BlbnNlOiB0cnVlLFxuICBwcm9jZXNzKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKSB7XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIG1vdW50U3VzcGVuc2UoXG4gICAgICAgIG4yLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZCxcbiAgICAgICAgcmVuZGVyZXJJbnRlcm5hbHNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXJlbnRTdXNwZW5zZSAmJiBwYXJlbnRTdXNwZW5zZS5kZXBzID4gMCAmJiAhbjEuc3VzcGVuc2UuaXNJbkZhbGxiYWNrKSB7XG4gICAgICAgIG4yLnN1c3BlbnNlID0gbjEuc3VzcGVuc2U7XG4gICAgICAgIG4yLnN1c3BlbnNlLnZub2RlID0gbjI7XG4gICAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBhdGNoU3VzcGVuc2UoXG4gICAgICAgIG4xLFxuICAgICAgICBuMixcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZCxcbiAgICAgICAgcmVuZGVyZXJJbnRlcm5hbHNcbiAgICAgICk7XG4gICAgfVxuICB9LFxuICBoeWRyYXRlOiBoeWRyYXRlU3VzcGVuc2UsXG4gIG5vcm1hbGl6ZTogbm9ybWFsaXplU3VzcGVuc2VDaGlsZHJlblxufTtcbmNvbnN0IFN1c3BlbnNlID0gU3VzcGVuc2VJbXBsIDtcbmZ1bmN0aW9uIHRyaWdnZXJFdmVudCh2bm9kZSwgbmFtZSkge1xuICBjb25zdCBldmVudExpc3RlbmVyID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHNbbmFtZV07XG4gIGlmIChpc0Z1bmN0aW9uKGV2ZW50TGlzdGVuZXIpKSB7XG4gICAgZXZlbnRMaXN0ZW5lcigpO1xuICB9XG59XG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpIHtcbiAgY29uc3Qge1xuICAgIHA6IHBhdGNoLFxuICAgIG86IHsgY3JlYXRlRWxlbWVudCB9XG4gIH0gPSByZW5kZXJlckludGVybmFscztcbiAgY29uc3QgaGlkZGVuQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgY29uc3Qgc3VzcGVuc2UgPSB2bm9kZS5zdXNwZW5zZSA9IGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkoXG4gICAgdm5vZGUsXG4gICAgcGFyZW50U3VzcGVuc2UsXG4gICAgcGFyZW50Q29tcG9uZW50LFxuICAgIGNvbnRhaW5lcixcbiAgICBoaWRkZW5Db250YWluZXIsXG4gICAgYW5jaG9yLFxuICAgIG5hbWVzcGFjZSxcbiAgICBzbG90U2NvcGVJZHMsXG4gICAgb3B0aW1pemVkLFxuICAgIHJlbmRlcmVySW50ZXJuYWxzXG4gICk7XG4gIHBhdGNoKFxuICAgIG51bGwsXG4gICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IHZub2RlLnNzQ29udGVudCxcbiAgICBoaWRkZW5Db250YWluZXIsXG4gICAgbnVsbCxcbiAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgc3VzcGVuc2UsXG4gICAgbmFtZXNwYWNlLFxuICAgIHNsb3RTY29wZUlkc1xuICApO1xuICBpZiAoc3VzcGVuc2UuZGVwcyA+IDApIHtcbiAgICB0cmlnZ2VyRXZlbnQodm5vZGUsIFwib25QZW5kaW5nXCIpO1xuICAgIHRyaWdnZXJFdmVudCh2bm9kZSwgXCJvbkZhbGxiYWNrXCIpO1xuICAgIHBhdGNoKFxuICAgICAgbnVsbCxcbiAgICAgIHZub2RlLnNzRmFsbGJhY2ssXG4gICAgICBjb250YWluZXIsXG4gICAgICBhbmNob3IsXG4gICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICBudWxsLFxuICAgICAgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcbiAgICAgIG5hbWVzcGFjZSxcbiAgICAgIHNsb3RTY29wZUlkc1xuICAgICk7XG4gICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCB2bm9kZS5zc0ZhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICBzdXNwZW5zZS5yZXNvbHZlKGZhbHNlLCB0cnVlKTtcbiAgfVxufVxuZnVuY3Rpb24gcGF0Y2hTdXNwZW5zZShuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHsgcDogcGF0Y2gsIHVtOiB1bm1vdW50LCBvOiB7IGNyZWF0ZUVsZW1lbnQgfSB9KSB7XG4gIGNvbnN0IHN1c3BlbnNlID0gbjIuc3VzcGVuc2UgPSBuMS5zdXNwZW5zZTtcbiAgc3VzcGVuc2Uudm5vZGUgPSBuMjtcbiAgbjIuZWwgPSBuMS5lbDtcbiAgY29uc3QgbmV3QnJhbmNoID0gbjIuc3NDb250ZW50O1xuICBjb25zdCBuZXdGYWxsYmFjayA9IG4yLnNzRmFsbGJhY2s7XG4gIGNvbnN0IHsgYWN0aXZlQnJhbmNoLCBwZW5kaW5nQnJhbmNoLCBpc0luRmFsbGJhY2ssIGlzSHlkcmF0aW5nIH0gPSBzdXNwZW5zZTtcbiAgaWYgKHBlbmRpbmdCcmFuY2gpIHtcbiAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xuICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBwZW5kaW5nQnJhbmNoKSkge1xuICAgICAgcGF0Y2goXG4gICAgICAgIHBlbmRpbmdCcmFuY2gsXG4gICAgICAgIG5ld0JyYW5jaCxcbiAgICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLFxuICAgICAgICBudWxsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICB9IGVsc2UgaWYgKGlzSW5GYWxsYmFjaykge1xuICAgICAgICBpZiAoIWlzSHlkcmF0aW5nKSB7XG4gICAgICAgICAgcGF0Y2goXG4gICAgICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgICAgICBuZXdGYWxsYmFjayxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0ZhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdXNwZW5zZS5wZW5kaW5nSWQgPSBzdXNwZW5zZUlkKys7XG4gICAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgc3VzcGVuc2UuaXNIeWRyYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoID0gcGVuZGluZ0JyYW5jaDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVubW91bnQocGVuZGluZ0JyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSk7XG4gICAgICB9XG4gICAgICBzdXNwZW5zZS5kZXBzID0gMDtcbiAgICAgIHN1c3BlbnNlLmVmZmVjdHMubGVuZ3RoID0gMDtcbiAgICAgIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBpZiAoaXNJbkZhbGxiYWNrKSB7XG4gICAgICAgIHBhdGNoKFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgbmV3QnJhbmNoLFxuICAgICAgICAgIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lcixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBzdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XG4gICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdGNoKFxuICAgICAgICAgICAgYWN0aXZlQnJhbmNoLFxuICAgICAgICAgICAgbmV3RmFsbGJhY2ssXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdGYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYWN0aXZlQnJhbmNoICYmIGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIGFjdGl2ZUJyYW5jaCkpIHtcbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgYWN0aXZlQnJhbmNoLFxuICAgICAgICAgIG5ld0JyYW5jaCxcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBzdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBuZXdCcmFuY2gsXG4gICAgICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcbiAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGFjdGl2ZUJyYW5jaCAmJiBpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBhY3RpdmVCcmFuY2gpKSB7XG4gICAgICBwYXRjaChcbiAgICAgICAgYWN0aXZlQnJhbmNoLFxuICAgICAgICBuZXdCcmFuY2gsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdCcmFuY2gpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmlnZ2VyRXZlbnQobjIsIFwib25QZW5kaW5nXCIpO1xuICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IG5ld0JyYW5jaDtcbiAgICAgIGlmIChuZXdCcmFuY2guc2hhcGVGbGFnICYgNTEyKSB7XG4gICAgICAgIHN1c3BlbnNlLnBlbmRpbmdJZCA9IG5ld0JyYW5jaC5jb21wb25lbnQuc3VzcGVuc2VJZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1c3BlbnNlLnBlbmRpbmdJZCA9IHN1c3BlbnNlSWQrKztcbiAgICAgIH1cbiAgICAgIHBhdGNoKFxuICAgICAgICBudWxsLFxuICAgICAgICBuZXdCcmFuY2gsXG4gICAgICAgIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBzdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcbiAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgeyB0aW1lb3V0LCBwZW5kaW5nSWQgfSA9IHN1c3BlbnNlO1xuICAgICAgICBpZiAodGltZW91dCA+IDApIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5wZW5kaW5nSWQgPT09IHBlbmRpbmdJZCkge1xuICAgICAgICAgICAgICBzdXNwZW5zZS5mYWxsYmFjayhuZXdGYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGltZW91dCA9PT0gMCkge1xuICAgICAgICAgIHN1c3BlbnNlLmZhbGxiYWNrKG5ld0ZhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxubGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xuZnVuY3Rpb24gY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSh2bm9kZSwgcGFyZW50U3VzcGVuc2UsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyLCBoaWRkZW5Db250YWluZXIsIGFuY2hvciwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGlzSHlkcmF0aW5nID0gZmFsc2UpIHtcbiAgaWYgKCFoYXNXYXJuZWQpIHtcbiAgICBoYXNXYXJuZWQgPSB0cnVlO1xuICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gXCJpbmZvXCIgOiBcImxvZ1wiXShcbiAgICAgIGA8U3VzcGVuc2U+IGlzIGFuIGV4cGVyaW1lbnRhbCBmZWF0dXJlIGFuZCBpdHMgQVBJIHdpbGwgbGlrZWx5IGNoYW5nZS5gXG4gICAgKTtcbiAgfVxuICBjb25zdCB7XG4gICAgcDogcGF0Y2gsXG4gICAgbTogbW92ZSxcbiAgICB1bTogdW5tb3VudCxcbiAgICBuOiBuZXh0LFxuICAgIG86IHsgcGFyZW50Tm9kZSwgcmVtb3ZlIH1cbiAgfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xuICBsZXQgcGFyZW50U3VzcGVuc2VJZDtcbiAgY29uc3QgaXNTdXNwZW5zaWJsZSA9IGlzVk5vZGVTdXNwZW5zaWJsZSh2bm9kZSk7XG4gIGlmIChpc1N1c3BlbnNpYmxlKSB7XG4gICAgaWYgKHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcbiAgICAgIHBhcmVudFN1c3BlbnNlSWQgPSBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nSWQ7XG4gICAgICBwYXJlbnRTdXNwZW5zZS5kZXBzKys7XG4gICAgfVxuICB9XG4gIGNvbnN0IHRpbWVvdXQgPSB2bm9kZS5wcm9wcyA/IHRvTnVtYmVyKHZub2RlLnByb3BzLnRpbWVvdXQpIDogdm9pZCAwO1xuICB7XG4gICAgYXNzZXJ0TnVtYmVyKHRpbWVvdXQsIGBTdXNwZW5zZSB0aW1lb3V0YCk7XG4gIH1cbiAgY29uc3QgaW5pdGlhbEFuY2hvciA9IGFuY2hvcjtcbiAgY29uc3Qgc3VzcGVuc2UgPSB7XG4gICAgdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRTdXNwZW5zZSxcbiAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgbmFtZXNwYWNlLFxuICAgIGNvbnRhaW5lcixcbiAgICBoaWRkZW5Db250YWluZXIsXG4gICAgZGVwczogMCxcbiAgICBwZW5kaW5nSWQ6IHN1c3BlbnNlSWQrKyxcbiAgICB0aW1lb3V0OiB0eXBlb2YgdGltZW91dCA9PT0gXCJudW1iZXJcIiA/IHRpbWVvdXQgOiAtMSxcbiAgICBhY3RpdmVCcmFuY2g6IG51bGwsXG4gICAgcGVuZGluZ0JyYW5jaDogbnVsbCxcbiAgICBpc0luRmFsbGJhY2s6ICFpc0h5ZHJhdGluZyxcbiAgICBpc0h5ZHJhdGluZyxcbiAgICBpc1VubW91bnRlZDogZmFsc2UsXG4gICAgZWZmZWN0czogW10sXG4gICAgcmVzb2x2ZShyZXN1bWUgPSBmYWxzZSwgc3luYyA9IGZhbHNlKSB7XG4gICAgICB7XG4gICAgICAgIGlmICghcmVzdW1lICYmICFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYHN1c3BlbnNlLnJlc29sdmUoKSBpcyBjYWxsZWQgd2l0aG91dCBhIHBlbmRpbmcgYnJhbmNoLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdXNwZW5zZS5pc1VubW91bnRlZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBzdXNwZW5zZS5yZXNvbHZlKCkgaXMgY2FsbGVkIG9uIGFuIGFscmVhZHkgdW5tb3VudGVkIHN1c3BlbnNlIGJvdW5kYXJ5LmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB7XG4gICAgICAgIHZub2RlOiB2bm9kZTIsXG4gICAgICAgIGFjdGl2ZUJyYW5jaCxcbiAgICAgICAgcGVuZGluZ0JyYW5jaCxcbiAgICAgICAgcGVuZGluZ0lkLFxuICAgICAgICBlZmZlY3RzLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQ6IHBhcmVudENvbXBvbmVudDIsXG4gICAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyMlxuICAgICAgfSA9IHN1c3BlbnNlO1xuICAgICAgbGV0IGRlbGF5RW50ZXIgPSBmYWxzZTtcbiAgICAgIGlmIChzdXNwZW5zZS5pc0h5ZHJhdGluZykge1xuICAgICAgICBzdXNwZW5zZS5pc0h5ZHJhdGluZyA9IGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICghcmVzdW1lKSB7XG4gICAgICAgIGRlbGF5RW50ZXIgPSBhY3RpdmVCcmFuY2ggJiYgcGVuZGluZ0JyYW5jaC50cmFuc2l0aW9uICYmIHBlbmRpbmdCcmFuY2gudHJhbnNpdGlvbi5tb2RlID09PSBcIm91dC1pblwiO1xuICAgICAgICBpZiAoZGVsYXlFbnRlcikge1xuICAgICAgICAgIGFjdGl2ZUJyYW5jaC50cmFuc2l0aW9uLmFmdGVyTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAocGVuZGluZ0lkID09PSBzdXNwZW5zZS5wZW5kaW5nSWQpIHtcbiAgICAgICAgICAgICAgbW92ZShcbiAgICAgICAgICAgICAgICBwZW5kaW5nQnJhbmNoLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjIsXG4gICAgICAgICAgICAgICAgYW5jaG9yID09PSBpbml0aWFsQW5jaG9yID8gbmV4dChhY3RpdmVCcmFuY2gpIDogYW5jaG9yLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgcXVldWVQb3N0Rmx1c2hDYihlZmZlY3RzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3RpdmVCcmFuY2gpIHtcbiAgICAgICAgICBpZiAocGFyZW50Tm9kZShhY3RpdmVCcmFuY2guZWwpID09PSBjb250YWluZXIyKSB7XG4gICAgICAgICAgICBhbmNob3IgPSBuZXh0KGFjdGl2ZUJyYW5jaCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVubW91bnQoYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQyLCBzdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWxheUVudGVyKSB7XG4gICAgICAgICAgbW92ZShwZW5kaW5nQnJhbmNoLCBjb250YWluZXIyLCBhbmNob3IsIDApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIHBlbmRpbmdCcmFuY2gpO1xuICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IG51bGw7XG4gICAgICBzdXNwZW5zZS5pc0luRmFsbGJhY2sgPSBmYWxzZTtcbiAgICAgIGxldCBwYXJlbnQgPSBzdXNwZW5zZS5wYXJlbnQ7XG4gICAgICBsZXQgaGFzVW5yZXNvbHZlZEFuY2VzdG9yID0gZmFsc2U7XG4gICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICAgIHBhcmVudC5lZmZlY3RzLnB1c2goLi4uZWZmZWN0cyk7XG4gICAgICAgICAgaGFzVW5yZXNvbHZlZEFuY2VzdG9yID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFoYXNVbnJlc29sdmVkQW5jZXN0b3IgJiYgIWRlbGF5RW50ZXIpIHtcbiAgICAgICAgcXVldWVQb3N0Rmx1c2hDYihlZmZlY3RzKTtcbiAgICAgIH1cbiAgICAgIHN1c3BlbnNlLmVmZmVjdHMgPSBbXTtcbiAgICAgIGlmIChpc1N1c3BlbnNpYmxlKSB7XG4gICAgICAgIGlmIChwYXJlbnRTdXNwZW5zZSAmJiBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nQnJhbmNoICYmIHBhcmVudFN1c3BlbnNlSWQgPT09IHBhcmVudFN1c3BlbnNlLnBlbmRpbmdJZCkge1xuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLmRlcHMtLTtcbiAgICAgICAgICBpZiAocGFyZW50U3VzcGVuc2UuZGVwcyA9PT0gMCAmJiAhc3luYykge1xuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdHJpZ2dlckV2ZW50KHZub2RlMiwgXCJvblJlc29sdmVcIik7XG4gICAgfSxcbiAgICBmYWxsYmFjayhmYWxsYmFja1ZOb2RlKSB7XG4gICAgICBpZiAoIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgeyB2bm9kZTogdm5vZGUyLCBhY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudDogcGFyZW50Q29tcG9uZW50MiwgY29udGFpbmVyOiBjb250YWluZXIyLCBuYW1lc3BhY2U6IG5hbWVzcGFjZTIgfSA9IHN1c3BlbnNlO1xuICAgICAgdHJpZ2dlckV2ZW50KHZub2RlMiwgXCJvbkZhbGxiYWNrXCIpO1xuICAgICAgY29uc3QgYW5jaG9yMiA9IG5leHQoYWN0aXZlQnJhbmNoKTtcbiAgICAgIGNvbnN0IG1vdW50RmFsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgIGlmICghc3VzcGVuc2UuaXNJbkZhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHBhdGNoKFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgZmFsbGJhY2tWTm9kZSxcbiAgICAgICAgICBjb250YWluZXIyLFxuICAgICAgICAgIGFuY2hvcjIsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50MixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XG4gICAgICAgICAgbmFtZXNwYWNlMixcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgZmFsbGJhY2tWTm9kZSk7XG4gICAgICB9O1xuICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGZhbGxiYWNrVk5vZGUudHJhbnNpdGlvbiAmJiBmYWxsYmFja1ZOb2RlLnRyYW5zaXRpb24ubW9kZSA9PT0gXCJvdXQtaW5cIjtcbiAgICAgIGlmIChkZWxheUVudGVyKSB7XG4gICAgICAgIGFjdGl2ZUJyYW5jaC50cmFuc2l0aW9uLmFmdGVyTGVhdmUgPSBtb3VudEZhbGxiYWNrO1xuICAgICAgfVxuICAgICAgc3VzcGVuc2UuaXNJbkZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgIHVubW91bnQoXG4gICAgICAgIGFjdGl2ZUJyYW5jaCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50MixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgLy8gbm8gc3VzcGVuc2Ugc28gdW5tb3VudCBob29rcyBmaXJlIG5vd1xuICAgICAgICB0cnVlXG4gICAgICAgIC8vIHNob3VsZFJlbW92ZVxuICAgICAgKTtcbiAgICAgIGlmICghZGVsYXlFbnRlcikge1xuICAgICAgICBtb3VudEZhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBtb3ZlKGNvbnRhaW5lcjIsIGFuY2hvcjIsIHR5cGUpIHtcbiAgICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCAmJiBtb3ZlKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCwgY29udGFpbmVyMiwgYW5jaG9yMiwgdHlwZSk7XG4gICAgICBzdXNwZW5zZS5jb250YWluZXIgPSBjb250YWluZXIyO1xuICAgIH0sXG4gICAgbmV4dCgpIHtcbiAgICAgIHJldHVybiBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggJiYgbmV4dChzdXNwZW5zZS5hY3RpdmVCcmFuY2gpO1xuICAgIH0sXG4gICAgcmVnaXN0ZXJEZXAoaW5zdGFuY2UsIHNldHVwUmVuZGVyRWZmZWN0LCBvcHRpbWl6ZWQyKSB7XG4gICAgICBjb25zdCBpc0luUGVuZGluZ1N1c3BlbnNlID0gISFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoO1xuICAgICAgaWYgKGlzSW5QZW5kaW5nU3VzcGVuc2UpIHtcbiAgICAgICAgc3VzcGVuc2UuZGVwcysrO1xuICAgICAgfVxuICAgICAgY29uc3QgaHlkcmF0ZWRFbCA9IGluc3RhbmNlLnZub2RlLmVsO1xuICAgICAgaW5zdGFuY2UuYXN5bmNEZXAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAwKTtcbiAgICAgIH0pLnRoZW4oKGFzeW5jU2V0dXBSZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKGluc3RhbmNlLmlzVW5tb3VudGVkIHx8IHN1c3BlbnNlLmlzVW5tb3VudGVkIHx8IHN1c3BlbnNlLnBlbmRpbmdJZCAhPT0gaW5zdGFuY2Uuc3VzcGVuc2VJZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS5hc3luY1Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgeyB2bm9kZTogdm5vZGUyIH0gPSBpbnN0YW5jZTtcbiAgICAgICAge1xuICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dCh2bm9kZTIpO1xuICAgICAgICB9XG4gICAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCBhc3luY1NldHVwUmVzdWx0LCBmYWxzZSk7XG4gICAgICAgIGlmIChoeWRyYXRlZEVsKSB7XG4gICAgICAgICAgdm5vZGUyLmVsID0gaHlkcmF0ZWRFbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9ICFoeWRyYXRlZEVsICYmIGluc3RhbmNlLnN1YlRyZWUuZWw7XG4gICAgICAgIHNldHVwUmVuZGVyRWZmZWN0KFxuICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgIHZub2RlMixcbiAgICAgICAgICAvLyBjb21wb25lbnQgbWF5IGhhdmUgYmVlbiBtb3ZlZCBiZWZvcmUgcmVzb2x2ZS5cbiAgICAgICAgICAvLyBpZiB0aGlzIGlzIG5vdCBhIGh5ZHJhdGlvbiwgaW5zdGFuY2Uuc3ViVHJlZSB3aWxsIGJlIHRoZSBjb21tZW50XG4gICAgICAgICAgLy8gcGxhY2Vob2xkZXIuXG4gICAgICAgICAgcGFyZW50Tm9kZShoeWRyYXRlZEVsIHx8IGluc3RhbmNlLnN1YlRyZWUuZWwpLFxuICAgICAgICAgIC8vIGFuY2hvciB3aWxsIG5vdCBiZSB1c2VkIGlmIHRoaXMgaXMgaHlkcmF0aW9uLCBzbyBvbmx5IG5lZWQgdG9cbiAgICAgICAgICAvLyBjb25zaWRlciB0aGUgY29tbWVudCBwbGFjZWhvbGRlciBjYXNlLlxuICAgICAgICAgIGh5ZHJhdGVkRWwgPyBudWxsIDogbmV4dChpbnN0YW5jZS5zdWJUcmVlKSxcbiAgICAgICAgICBzdXNwZW5zZSxcbiAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgb3B0aW1pemVkMlxuICAgICAgICApO1xuICAgICAgICBpZiAocGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICByZW1vdmUocGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUhPQ0hvc3RFbChpbnN0YW5jZSwgdm5vZGUyLmVsKTtcbiAgICAgICAge1xuICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSW5QZW5kaW5nU3VzcGVuc2UgJiYgLS1zdXNwZW5zZS5kZXBzID09PSAwKSB7XG4gICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHVubW91bnQocGFyZW50U3VzcGVuc2UyLCBkb1JlbW92ZSkge1xuICAgICAgc3VzcGVuc2UuaXNVbm1vdW50ZWQgPSB0cnVlO1xuICAgICAgaWYgKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCkge1xuICAgICAgICB1bm1vdW50KFxuICAgICAgICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UyLFxuICAgICAgICAgIGRvUmVtb3ZlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICB1bm1vdW50KFxuICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2gsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlMixcbiAgICAgICAgICBkb1JlbW92ZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHN1c3BlbnNlO1xufVxuZnVuY3Rpb24gaHlkcmF0ZVN1c3BlbnNlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaHlkcmF0ZU5vZGUpIHtcbiAgY29uc3Qgc3VzcGVuc2UgPSB2bm9kZS5zdXNwZW5zZSA9IGNyZWF0ZVN1c3BlbnNlQm91bmRhcnkoXG4gICAgdm5vZGUsXG4gICAgcGFyZW50U3VzcGVuc2UsXG4gICAgcGFyZW50Q29tcG9uZW50LFxuICAgIG5vZGUucGFyZW50Tm9kZSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG4gICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICBudWxsLFxuICAgIG5hbWVzcGFjZSxcbiAgICBzbG90U2NvcGVJZHMsXG4gICAgb3B0aW1pemVkLFxuICAgIHJlbmRlcmVySW50ZXJuYWxzLFxuICAgIHRydWVcbiAgKTtcbiAgY29uc3QgcmVzdWx0ID0gaHlkcmF0ZU5vZGUoXG4gICAgbm9kZSxcbiAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gdm5vZGUuc3NDb250ZW50LFxuICAgIHBhcmVudENvbXBvbmVudCxcbiAgICBzdXNwZW5zZSxcbiAgICBzbG90U2NvcGVJZHMsXG4gICAgb3B0aW1pemVkXG4gICk7XG4gIGlmIChzdXNwZW5zZS5kZXBzID09PSAwKSB7XG4gICAgc3VzcGVuc2UucmVzb2x2ZShmYWxzZSwgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW4odm5vZGUpIHtcbiAgY29uc3QgeyBzaGFwZUZsYWcsIGNoaWxkcmVuIH0gPSB2bm9kZTtcbiAgY29uc3QgaXNTbG90Q2hpbGRyZW4gPSBzaGFwZUZsYWcgJiAzMjtcbiAgdm5vZGUuc3NDb250ZW50ID0gbm9ybWFsaXplU3VzcGVuc2VTbG90KFxuICAgIGlzU2xvdENoaWxkcmVuID8gY2hpbGRyZW4uZGVmYXVsdCA6IGNoaWxkcmVuXG4gICk7XG4gIHZub2RlLnNzRmFsbGJhY2sgPSBpc1Nsb3RDaGlsZHJlbiA/IG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChjaGlsZHJlbi5mYWxsYmFjaykgOiBjcmVhdGVWTm9kZShDb21tZW50KTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1c3BlbnNlU2xvdChzKSB7XG4gIGxldCBibG9jaztcbiAgaWYgKGlzRnVuY3Rpb24ocykpIHtcbiAgICBjb25zdCB0cmFja0Jsb2NrID0gaXNCbG9ja1RyZWVFbmFibGVkICYmIHMuX2M7XG4gICAgaWYgKHRyYWNrQmxvY2spIHtcbiAgICAgIHMuX2QgPSBmYWxzZTtcbiAgICAgIG9wZW5CbG9jaygpO1xuICAgIH1cbiAgICBzID0gcygpO1xuICAgIGlmICh0cmFja0Jsb2NrKSB7XG4gICAgICBzLl9kID0gdHJ1ZTtcbiAgICAgIGJsb2NrID0gY3VycmVudEJsb2NrO1xuICAgICAgY2xvc2VCbG9jaygpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNBcnJheShzKSkge1xuICAgIGNvbnN0IHNpbmdsZUNoaWxkID0gZmlsdGVyU2luZ2xlUm9vdChzKTtcbiAgICBpZiAoIXNpbmdsZUNoaWxkICYmIHMuZmlsdGVyKChjaGlsZCkgPT4gY2hpbGQgIT09IE5VTExfRFlOQU1JQ19DT01QT05FTlQpLmxlbmd0aCA+IDApIHtcbiAgICAgIHdhcm4kMShgPFN1c3BlbnNlPiBzbG90cyBleHBlY3QgYSBzaW5nbGUgcm9vdCBub2RlLmApO1xuICAgIH1cbiAgICBzID0gc2luZ2xlQ2hpbGQ7XG4gIH1cbiAgcyA9IG5vcm1hbGl6ZVZOb2RlKHMpO1xuICBpZiAoYmxvY2sgJiYgIXMuZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgcy5keW5hbWljQ2hpbGRyZW4gPSBibG9jay5maWx0ZXIoKGMpID0+IGMgIT09IHMpO1xuICB9XG4gIHJldHVybiBzO1xufVxuZnVuY3Rpb24gcXVldWVFZmZlY3RXaXRoU3VzcGVuc2UoZm4sIHN1c3BlbnNlKSB7XG4gIGlmIChzdXNwZW5zZSAmJiBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goLi4uZm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goZm4pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVBvc3RGbHVzaENiKGZuKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBicmFuY2gpIHtcbiAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoID0gYnJhbmNoO1xuICBjb25zdCB7IHZub2RlLCBwYXJlbnRDb21wb25lbnQgfSA9IHN1c3BlbnNlO1xuICBsZXQgZWwgPSBicmFuY2guZWw7XG4gIHdoaWxlICghZWwgJiYgYnJhbmNoLmNvbXBvbmVudCkge1xuICAgIGJyYW5jaCA9IGJyYW5jaC5jb21wb25lbnQuc3ViVHJlZTtcbiAgICBlbCA9IGJyYW5jaC5lbDtcbiAgfVxuICB2bm9kZS5lbCA9IGVsO1xuICBpZiAocGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC5zdWJUcmVlID09PSB2bm9kZSkge1xuICAgIHBhcmVudENvbXBvbmVudC52bm9kZS5lbCA9IGVsO1xuICAgIHVwZGF0ZUhPQ0hvc3RFbChwYXJlbnRDb21wb25lbnQsIGVsKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNWTm9kZVN1c3BlbnNpYmxlKHZub2RlKSB7XG4gIGNvbnN0IHN1c3BlbnNpYmxlID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMuc3VzcGVuc2libGU7XG4gIHJldHVybiBzdXNwZW5zaWJsZSAhPSBudWxsICYmIHN1c3BlbnNpYmxlICE9PSBmYWxzZTtcbn1cblxuY29uc3QgRnJhZ21lbnQgPSBTeW1ib2wuZm9yKFwidi1mZ3RcIik7XG5jb25zdCBUZXh0ID0gU3ltYm9sLmZvcihcInYtdHh0XCIpO1xuY29uc3QgQ29tbWVudCA9IFN5bWJvbC5mb3IoXCJ2LWNtdFwiKTtcbmNvbnN0IFN0YXRpYyA9IFN5bWJvbC5mb3IoXCJ2LXN0Y1wiKTtcbmNvbnN0IGJsb2NrU3RhY2sgPSBbXTtcbmxldCBjdXJyZW50QmxvY2sgPSBudWxsO1xuZnVuY3Rpb24gb3BlbkJsb2NrKGRpc2FibGVUcmFja2luZyA9IGZhbHNlKSB7XG4gIGJsb2NrU3RhY2sucHVzaChjdXJyZW50QmxvY2sgPSBkaXNhYmxlVHJhY2tpbmcgPyBudWxsIDogW10pO1xufVxuZnVuY3Rpb24gY2xvc2VCbG9jaygpIHtcbiAgYmxvY2tTdGFjay5wb3AoKTtcbiAgY3VycmVudEJsb2NrID0gYmxvY2tTdGFja1tibG9ja1N0YWNrLmxlbmd0aCAtIDFdIHx8IG51bGw7XG59XG5sZXQgaXNCbG9ja1RyZWVFbmFibGVkID0gMTtcbmZ1bmN0aW9uIHNldEJsb2NrVHJhY2tpbmcodmFsdWUsIGluVk9uY2UgPSBmYWxzZSkge1xuICBpc0Jsb2NrVHJlZUVuYWJsZWQgKz0gdmFsdWU7XG4gIGlmICh2YWx1ZSA8IDAgJiYgY3VycmVudEJsb2NrICYmIGluVk9uY2UpIHtcbiAgICBjdXJyZW50QmxvY2suaGFzT25jZSA9IHRydWU7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldHVwQmxvY2sodm5vZGUpIHtcbiAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID0gaXNCbG9ja1RyZWVFbmFibGVkID4gMCA/IGN1cnJlbnRCbG9jayB8fCBFTVBUWV9BUlIgOiBudWxsO1xuICBjbG9zZUJsb2NrKCk7XG4gIGlmIChpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwICYmIGN1cnJlbnRCbG9jaykge1xuICAgIGN1cnJlbnRCbG9jay5wdXNoKHZub2RlKTtcbiAgfVxuICByZXR1cm4gdm5vZGU7XG59XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50QmxvY2sodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgc2hhcGVGbGFnKSB7XG4gIHJldHVybiBzZXR1cEJsb2NrKFxuICAgIGNyZWF0ZUJhc2VWTm9kZShcbiAgICAgIHR5cGUsXG4gICAgICBwcm9wcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgcGF0Y2hGbGFnLFxuICAgICAgZHluYW1pY1Byb3BzLFxuICAgICAgc2hhcGVGbGFnLFxuICAgICAgdHJ1ZVxuICAgIClcbiAgKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUJsb2NrKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMpIHtcbiAgcmV0dXJuIHNldHVwQmxvY2soXG4gICAgY3JlYXRlVk5vZGUoXG4gICAgICB0eXBlLFxuICAgICAgcHJvcHMsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIHBhdGNoRmxhZyxcbiAgICAgIGR5bmFtaWNQcm9wcyxcbiAgICAgIHRydWVcbiAgICApXG4gICk7XG59XG5mdW5jdGlvbiBpc1ZOb2RlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA/IHZhbHVlLl9fdl9pc1ZOb2RlID09PSB0cnVlIDogZmFsc2U7XG59XG5mdW5jdGlvbiBpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSB7XG4gIGlmIChuMi5zaGFwZUZsYWcgJiA2ICYmIG4xLmNvbXBvbmVudCkge1xuICAgIGNvbnN0IGRpcnR5SW5zdGFuY2VzID0gaG1yRGlydHlDb21wb25lbnRzLmdldChuMi50eXBlKTtcbiAgICBpZiAoZGlydHlJbnN0YW5jZXMgJiYgZGlydHlJbnN0YW5jZXMuaGFzKG4xLmNvbXBvbmVudCkpIHtcbiAgICAgIG4xLnNoYXBlRmxhZyAmPSB+MjU2O1xuICAgICAgbjIuc2hhcGVGbGFnICY9IH41MTI7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBuMS50eXBlID09PSBuMi50eXBlICYmIG4xLmtleSA9PT0gbjIua2V5O1xufVxubGV0IHZub2RlQXJnc1RyYW5zZm9ybWVyO1xuZnVuY3Rpb24gdHJhbnNmb3JtVk5vZGVBcmdzKHRyYW5zZm9ybWVyKSB7XG4gIHZub2RlQXJnc1RyYW5zZm9ybWVyID0gdHJhbnNmb3JtZXI7XG59XG5jb25zdCBjcmVhdGVWTm9kZVdpdGhBcmdzVHJhbnNmb3JtID0gKC4uLmFyZ3MpID0+IHtcbiAgcmV0dXJuIF9jcmVhdGVWTm9kZShcbiAgICAuLi52bm9kZUFyZ3NUcmFuc2Zvcm1lciA/IHZub2RlQXJnc1RyYW5zZm9ybWVyKGFyZ3MsIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkgOiBhcmdzXG4gICk7XG59O1xuY29uc3Qgbm9ybWFsaXplS2V5ID0gKHsga2V5IH0pID0+IGtleSAhPSBudWxsID8ga2V5IDogbnVsbDtcbmNvbnN0IG5vcm1hbGl6ZVJlZiA9ICh7XG4gIHJlZixcbiAgcmVmX2tleSxcbiAgcmVmX2ZvclxufSkgPT4ge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gXCJudW1iZXJcIikge1xuICAgIHJlZiA9IFwiXCIgKyByZWY7XG4gIH1cbiAgcmV0dXJuIHJlZiAhPSBudWxsID8gaXNTdHJpbmcocmVmKSB8fCBpc1JlZihyZWYpIHx8IGlzRnVuY3Rpb24ocmVmKSA/IHsgaTogY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLCByOiByZWYsIGs6IHJlZl9rZXksIGY6ICEhcmVmX2ZvciB9IDogcmVmIDogbnVsbDtcbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlVk5vZGUodHlwZSwgcHJvcHMgPSBudWxsLCBjaGlsZHJlbiA9IG51bGwsIHBhdGNoRmxhZyA9IDAsIGR5bmFtaWNQcm9wcyA9IG51bGwsIHNoYXBlRmxhZyA9IHR5cGUgPT09IEZyYWdtZW50ID8gMCA6IDEsIGlzQmxvY2tOb2RlID0gZmFsc2UsIG5lZWRGdWxsQ2hpbGRyZW5Ob3JtYWxpemF0aW9uID0gZmFsc2UpIHtcbiAgY29uc3Qgdm5vZGUgPSB7XG4gICAgX192X2lzVk5vZGU6IHRydWUsXG4gICAgX192X3NraXA6IHRydWUsXG4gICAgdHlwZSxcbiAgICBwcm9wcyxcbiAgICBrZXk6IHByb3BzICYmIG5vcm1hbGl6ZUtleShwcm9wcyksXG4gICAgcmVmOiBwcm9wcyAmJiBub3JtYWxpemVSZWYocHJvcHMpLFxuICAgIHNjb3BlSWQ6IGN1cnJlbnRTY29wZUlkLFxuICAgIHNsb3RTY29wZUlkczogbnVsbCxcbiAgICBjaGlsZHJlbixcbiAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgc3VzcGVuc2U6IG51bGwsXG4gICAgc3NDb250ZW50OiBudWxsLFxuICAgIHNzRmFsbGJhY2s6IG51bGwsXG4gICAgZGlyczogbnVsbCxcbiAgICB0cmFuc2l0aW9uOiBudWxsLFxuICAgIGVsOiBudWxsLFxuICAgIGFuY2hvcjogbnVsbCxcbiAgICB0YXJnZXQ6IG51bGwsXG4gICAgdGFyZ2V0U3RhcnQ6IG51bGwsXG4gICAgdGFyZ2V0QW5jaG9yOiBudWxsLFxuICAgIHN0YXRpY0NvdW50OiAwLFxuICAgIHNoYXBlRmxhZyxcbiAgICBwYXRjaEZsYWcsXG4gICAgZHluYW1pY1Byb3BzLFxuICAgIGR5bmFtaWNDaGlsZHJlbjogbnVsbCxcbiAgICBhcHBDb250ZXh0OiBudWxsLFxuICAgIGN0eDogY3VycmVudFJlbmRlcmluZ0luc3RhbmNlXG4gIH07XG4gIGlmIChuZWVkRnVsbENoaWxkcmVuTm9ybWFsaXphdGlvbikge1xuICAgIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbik7XG4gICAgaWYgKHNoYXBlRmxhZyAmIDEyOCkge1xuICAgICAgdHlwZS5ub3JtYWxpemUodm5vZGUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjaGlsZHJlbikge1xuICAgIHZub2RlLnNoYXBlRmxhZyB8PSBpc1N0cmluZyhjaGlsZHJlbikgPyA4IDogMTY7XG4gIH1cbiAgaWYgKHZub2RlLmtleSAhPT0gdm5vZGUua2V5KSB7XG4gICAgd2FybiQxKGBWTm9kZSBjcmVhdGVkIHdpdGggaW52YWxpZCBrZXkgKE5hTikuIFZOb2RlIHR5cGU6YCwgdm5vZGUudHlwZSk7XG4gIH1cbiAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgLy8gYXZvaWQgYSBibG9jayBub2RlIGZyb20gdHJhY2tpbmcgaXRzZWxmXG4gICFpc0Jsb2NrTm9kZSAmJiAvLyBoYXMgY3VycmVudCBwYXJlbnQgYmxvY2tcbiAgY3VycmVudEJsb2NrICYmIC8vIHByZXNlbmNlIG9mIGEgcGF0Y2ggZmxhZyBpbmRpY2F0ZXMgdGhpcyBub2RlIG5lZWRzIHBhdGNoaW5nIG9uIHVwZGF0ZXMuXG4gIC8vIGNvbXBvbmVudCBub2RlcyBhbHNvIHNob3VsZCBhbHdheXMgYmUgcGF0Y2hlZCwgYmVjYXVzZSBldmVuIGlmIHRoZVxuICAvLyBjb21wb25lbnQgZG9lc24ndCBuZWVkIHRvIHVwZGF0ZSwgaXQgbmVlZHMgdG8gcGVyc2lzdCB0aGUgaW5zdGFuY2Ugb24gdG9cbiAgLy8gdGhlIG5leHQgdm5vZGUgc28gdGhhdCBpdCBjYW4gYmUgcHJvcGVybHkgdW5tb3VudGVkIGxhdGVyLlxuICAodm5vZGUucGF0Y2hGbGFnID4gMCB8fCBzaGFwZUZsYWcgJiA2KSAmJiAvLyB0aGUgRVZFTlRTIGZsYWcgaXMgb25seSBmb3IgaHlkcmF0aW9uIGFuZCBpZiBpdCBpcyB0aGUgb25seSBmbGFnLCB0aGVcbiAgLy8gdm5vZGUgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGR5bmFtaWMgZHVlIHRvIGhhbmRsZXIgY2FjaGluZy5cbiAgdm5vZGUucGF0Y2hGbGFnICE9PSAzMikge1xuICAgIGN1cnJlbnRCbG9jay5wdXNoKHZub2RlKTtcbiAgfVxuICByZXR1cm4gdm5vZGU7XG59XG5jb25zdCBjcmVhdGVWTm9kZSA9IGNyZWF0ZVZOb2RlV2l0aEFyZ3NUcmFuc2Zvcm0gO1xuZnVuY3Rpb24gX2NyZWF0ZVZOb2RlKHR5cGUsIHByb3BzID0gbnVsbCwgY2hpbGRyZW4gPSBudWxsLCBwYXRjaEZsYWcgPSAwLCBkeW5hbWljUHJvcHMgPSBudWxsLCBpc0Jsb2NrTm9kZSA9IGZhbHNlKSB7XG4gIGlmICghdHlwZSB8fCB0eXBlID09PSBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UKSB7XG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICB3YXJuJDEoYEludmFsaWQgdm5vZGUgdHlwZSB3aGVuIGNyZWF0aW5nIHZub2RlOiAke3R5cGV9LmApO1xuICAgIH1cbiAgICB0eXBlID0gQ29tbWVudDtcbiAgfVxuICBpZiAoaXNWTm9kZSh0eXBlKSkge1xuICAgIGNvbnN0IGNsb25lZCA9IGNsb25lVk5vZGUoXG4gICAgICB0eXBlLFxuICAgICAgcHJvcHMsXG4gICAgICB0cnVlXG4gICAgICAvKiBtZXJnZVJlZjogdHJ1ZSAqL1xuICAgICk7XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICBub3JtYWxpemVDaGlsZHJlbihjbG9uZWQsIGNoaWxkcmVuKTtcbiAgICB9XG4gICAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgIWlzQmxvY2tOb2RlICYmIGN1cnJlbnRCbG9jaykge1xuICAgICAgaWYgKGNsb25lZC5zaGFwZUZsYWcgJiA2KSB7XG4gICAgICAgIGN1cnJlbnRCbG9ja1tjdXJyZW50QmxvY2suaW5kZXhPZih0eXBlKV0gPSBjbG9uZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50QmxvY2sucHVzaChjbG9uZWQpO1xuICAgICAgfVxuICAgIH1cbiAgICBjbG9uZWQucGF0Y2hGbGFnID0gLTI7XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxuICBpZiAoaXNDbGFzc0NvbXBvbmVudCh0eXBlKSkge1xuICAgIHR5cGUgPSB0eXBlLl9fdmNjT3B0cztcbiAgfVxuICBpZiAocHJvcHMpIHtcbiAgICBwcm9wcyA9IGd1YXJkUmVhY3RpdmVQcm9wcyhwcm9wcyk7XG4gICAgbGV0IHsgY2xhc3M6IGtsYXNzLCBzdHlsZSB9ID0gcHJvcHM7XG4gICAgaWYgKGtsYXNzICYmICFpc1N0cmluZyhrbGFzcykpIHtcbiAgICAgIHByb3BzLmNsYXNzID0gbm9ybWFsaXplQ2xhc3Moa2xhc3MpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3Qoc3R5bGUpKSB7XG4gICAgICBpZiAoaXNQcm94eShzdHlsZSkgJiYgIWlzQXJyYXkoc3R5bGUpKSB7XG4gICAgICAgIHN0eWxlID0gZXh0ZW5kKHt9LCBzdHlsZSk7XG4gICAgICB9XG4gICAgICBwcm9wcy5zdHlsZSA9IG5vcm1hbGl6ZVN0eWxlKHN0eWxlKTtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc2hhcGVGbGFnID0gaXNTdHJpbmcodHlwZSkgPyAxIDogaXNTdXNwZW5zZSh0eXBlKSA/IDEyOCA6IGlzVGVsZXBvcnQodHlwZSkgPyA2NCA6IGlzT2JqZWN0KHR5cGUpID8gNCA6IGlzRnVuY3Rpb24odHlwZSkgPyAyIDogMDtcbiAgaWYgKHNoYXBlRmxhZyAmIDQgJiYgaXNQcm94eSh0eXBlKSkge1xuICAgIHR5cGUgPSB0b1Jhdyh0eXBlKTtcbiAgICB3YXJuJDEoXG4gICAgICBgVnVlIHJlY2VpdmVkIGEgQ29tcG9uZW50IHRoYXQgd2FzIG1hZGUgYSByZWFjdGl2ZSBvYmplY3QuIFRoaXMgY2FuIGxlYWQgdG8gdW5uZWNlc3NhcnkgcGVyZm9ybWFuY2Ugb3ZlcmhlYWQgYW5kIHNob3VsZCBiZSBhdm9pZGVkIGJ5IG1hcmtpbmcgdGhlIGNvbXBvbmVudCB3aXRoIFxcYG1hcmtSYXdcXGAgb3IgdXNpbmcgXFxgc2hhbGxvd1JlZlxcYCBpbnN0ZWFkIG9mIFxcYHJlZlxcYC5gLFxuICAgICAgYFxuQ29tcG9uZW50IHRoYXQgd2FzIG1hZGUgcmVhY3RpdmU6IGAsXG4gICAgICB0eXBlXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQmFzZVZOb2RlKFxuICAgIHR5cGUsXG4gICAgcHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgcGF0Y2hGbGFnLFxuICAgIGR5bmFtaWNQcm9wcyxcbiAgICBzaGFwZUZsYWcsXG4gICAgaXNCbG9ja05vZGUsXG4gICAgdHJ1ZVxuICApO1xufVxuZnVuY3Rpb24gZ3VhcmRSZWFjdGl2ZVByb3BzKHByb3BzKSB7XG4gIGlmICghcHJvcHMpIHJldHVybiBudWxsO1xuICByZXR1cm4gaXNQcm94eShwcm9wcykgfHwgaXNJbnRlcm5hbE9iamVjdChwcm9wcykgPyBleHRlbmQoe30sIHByb3BzKSA6IHByb3BzO1xufVxuZnVuY3Rpb24gY2xvbmVWTm9kZSh2bm9kZSwgZXh0cmFQcm9wcywgbWVyZ2VSZWYgPSBmYWxzZSwgY2xvbmVUcmFuc2l0aW9uID0gZmFsc2UpIHtcbiAgY29uc3QgeyBwcm9wcywgcmVmLCBwYXRjaEZsYWcsIGNoaWxkcmVuLCB0cmFuc2l0aW9uIH0gPSB2bm9kZTtcbiAgY29uc3QgbWVyZ2VkUHJvcHMgPSBleHRyYVByb3BzID8gbWVyZ2VQcm9wcyhwcm9wcyB8fCB7fSwgZXh0cmFQcm9wcykgOiBwcm9wcztcbiAgY29uc3QgY2xvbmVkID0ge1xuICAgIF9fdl9pc1ZOb2RlOiB0cnVlLFxuICAgIF9fdl9za2lwOiB0cnVlLFxuICAgIHR5cGU6IHZub2RlLnR5cGUsXG4gICAgcHJvcHM6IG1lcmdlZFByb3BzLFxuICAgIGtleTogbWVyZ2VkUHJvcHMgJiYgbm9ybWFsaXplS2V5KG1lcmdlZFByb3BzKSxcbiAgICByZWY6IGV4dHJhUHJvcHMgJiYgZXh0cmFQcm9wcy5yZWYgPyAoXG4gICAgICAvLyAjMjA3OCBpbiB0aGUgY2FzZSBvZiA8Y29tcG9uZW50IDppcz1cInZub2RlXCIgcmVmPVwiZXh0cmFcIi8+XG4gICAgICAvLyBpZiB0aGUgdm5vZGUgaXRzZWxmIGFscmVhZHkgaGFzIGEgcmVmLCBjbG9uZVZOb2RlIHdpbGwgbmVlZCB0byBtZXJnZVxuICAgICAgLy8gdGhlIHJlZnMgc28gdGhlIHNpbmdsZSB2bm9kZSBjYW4gYmUgc2V0IG9uIG11bHRpcGxlIHJlZnNcbiAgICAgIG1lcmdlUmVmICYmIHJlZiA/IGlzQXJyYXkocmVmKSA/IHJlZi5jb25jYXQobm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpKSA6IFtyZWYsIG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKV0gOiBub3JtYWxpemVSZWYoZXh0cmFQcm9wcylcbiAgICApIDogcmVmLFxuICAgIHNjb3BlSWQ6IHZub2RlLnNjb3BlSWQsXG4gICAgc2xvdFNjb3BlSWRzOiB2bm9kZS5zbG90U2NvcGVJZHMsXG4gICAgY2hpbGRyZW46IHBhdGNoRmxhZyA9PT0gLTEgJiYgaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlbi5tYXAoZGVlcENsb25lVk5vZGUpIDogY2hpbGRyZW4sXG4gICAgdGFyZ2V0OiB2bm9kZS50YXJnZXQsXG4gICAgdGFyZ2V0U3RhcnQ6IHZub2RlLnRhcmdldFN0YXJ0LFxuICAgIHRhcmdldEFuY2hvcjogdm5vZGUudGFyZ2V0QW5jaG9yLFxuICAgIHN0YXRpY0NvdW50OiB2bm9kZS5zdGF0aWNDb3VudCxcbiAgICBzaGFwZUZsYWc6IHZub2RlLnNoYXBlRmxhZyxcbiAgICAvLyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIHdpdGggZXh0cmEgcHJvcHMsIHdlIGNhbiBubyBsb25nZXIgYXNzdW1lIGl0c1xuICAgIC8vIGV4aXN0aW5nIHBhdGNoIGZsYWcgdG8gYmUgcmVsaWFibGUgYW5kIG5lZWQgdG8gYWRkIHRoZSBGVUxMX1BST1BTIGZsYWcuXG4gICAgLy8gbm90ZTogcHJlc2VydmUgZmxhZyBmb3IgZnJhZ21lbnRzIHNpbmNlIHRoZXkgdXNlIHRoZSBmbGFnIGZvciBjaGlsZHJlblxuICAgIC8vIGZhc3QgcGF0aHMgb25seS5cbiAgICBwYXRjaEZsYWc6IGV4dHJhUHJvcHMgJiYgdm5vZGUudHlwZSAhPT0gRnJhZ21lbnQgPyBwYXRjaEZsYWcgPT09IC0xID8gMTYgOiBwYXRjaEZsYWcgfCAxNiA6IHBhdGNoRmxhZyxcbiAgICBkeW5hbWljUHJvcHM6IHZub2RlLmR5bmFtaWNQcm9wcyxcbiAgICBkeW5hbWljQ2hpbGRyZW46IHZub2RlLmR5bmFtaWNDaGlsZHJlbixcbiAgICBhcHBDb250ZXh0OiB2bm9kZS5hcHBDb250ZXh0LFxuICAgIGRpcnM6IHZub2RlLmRpcnMsXG4gICAgdHJhbnNpdGlvbixcbiAgICAvLyBUaGVzZSBzaG91bGQgdGVjaG5pY2FsbHkgb25seSBiZSBub24tbnVsbCBvbiBtb3VudGVkIFZOb2Rlcy4gSG93ZXZlcixcbiAgICAvLyB0aGV5ICpzaG91bGQqIGJlIGNvcGllZCBmb3Iga2VwdC1hbGl2ZSB2bm9kZXMuIFNvIHdlIGp1c3QgYWx3YXlzIGNvcHlcbiAgICAvLyB0aGVtIHNpbmNlIHRoZW0gYmVpbmcgbm9uLW51bGwgZHVyaW5nIGEgbW91bnQgZG9lc24ndCBhZmZlY3QgdGhlIGxvZ2ljIGFzXG4gICAgLy8gdGhleSB3aWxsIHNpbXBseSBiZSBvdmVyd3JpdHRlbi5cbiAgICBjb21wb25lbnQ6IHZub2RlLmNvbXBvbmVudCxcbiAgICBzdXNwZW5zZTogdm5vZGUuc3VzcGVuc2UsXG4gICAgc3NDb250ZW50OiB2bm9kZS5zc0NvbnRlbnQgJiYgY2xvbmVWTm9kZSh2bm9kZS5zc0NvbnRlbnQpLFxuICAgIHNzRmFsbGJhY2s6IHZub2RlLnNzRmFsbGJhY2sgJiYgY2xvbmVWTm9kZSh2bm9kZS5zc0ZhbGxiYWNrKSxcbiAgICBlbDogdm5vZGUuZWwsXG4gICAgYW5jaG9yOiB2bm9kZS5hbmNob3IsXG4gICAgY3R4OiB2bm9kZS5jdHgsXG4gICAgY2U6IHZub2RlLmNlXG4gIH07XG4gIGlmICh0cmFuc2l0aW9uICYmIGNsb25lVHJhbnNpdGlvbikge1xuICAgIHNldFRyYW5zaXRpb25Ib29rcyhcbiAgICAgIGNsb25lZCxcbiAgICAgIHRyYW5zaXRpb24uY2xvbmUoY2xvbmVkKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNsb25lZDtcbn1cbmZ1bmN0aW9uIGRlZXBDbG9uZVZOb2RlKHZub2RlKSB7XG4gIGNvbnN0IGNsb25lZCA9IGNsb25lVk5vZGUodm5vZGUpO1xuICBpZiAoaXNBcnJheSh2bm9kZS5jaGlsZHJlbikpIHtcbiAgICBjbG9uZWQuY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbi5tYXAoZGVlcENsb25lVk5vZGUpO1xuICB9XG4gIHJldHVybiBjbG9uZWQ7XG59XG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUodGV4dCA9IFwiIFwiLCBmbGFnID0gMCkge1xuICByZXR1cm4gY3JlYXRlVk5vZGUoVGV4dCwgbnVsbCwgdGV4dCwgZmxhZyk7XG59XG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNWTm9kZShjb250ZW50LCBudW1iZXJPZk5vZGVzKSB7XG4gIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUoU3RhdGljLCBudWxsLCBjb250ZW50KTtcbiAgdm5vZGUuc3RhdGljQ291bnQgPSBudW1iZXJPZk5vZGVzO1xuICByZXR1cm4gdm5vZGU7XG59XG5mdW5jdGlvbiBjcmVhdGVDb21tZW50Vk5vZGUodGV4dCA9IFwiXCIsIGFzQmxvY2sgPSBmYWxzZSkge1xuICByZXR1cm4gYXNCbG9jayA/IChvcGVuQmxvY2soKSwgY3JlYXRlQmxvY2soQ29tbWVudCwgbnVsbCwgdGV4dCkpIDogY3JlYXRlVk5vZGUoQ29tbWVudCwgbnVsbCwgdGV4dCk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVWTm9kZShjaGlsZCkge1xuICBpZiAoY2hpbGQgPT0gbnVsbCB8fCB0eXBlb2YgY2hpbGQgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVZOb2RlKENvbW1lbnQpO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkoY2hpbGQpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVZOb2RlKFxuICAgICAgRnJhZ21lbnQsXG4gICAgICBudWxsLFxuICAgICAgLy8gIzM2NjYsIGF2b2lkIHJlZmVyZW5jZSBwb2xsdXRpb24gd2hlbiByZXVzaW5nIHZub2RlXG4gICAgICBjaGlsZC5zbGljZSgpXG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc1ZOb2RlKGNoaWxkKSkge1xuICAgIHJldHVybiBjbG9uZUlmTW91bnRlZChjaGlsZCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZVZOb2RlKFRleHQsIG51bGwsIFN0cmluZyhjaGlsZCkpO1xuICB9XG59XG5mdW5jdGlvbiBjbG9uZUlmTW91bnRlZChjaGlsZCkge1xuICByZXR1cm4gY2hpbGQuZWwgPT09IG51bGwgJiYgY2hpbGQucGF0Y2hGbGFnICE9PSAtMSB8fCBjaGlsZC5tZW1vID8gY2hpbGQgOiBjbG9uZVZOb2RlKGNoaWxkKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbikge1xuICBsZXQgdHlwZSA9IDA7XG4gIGNvbnN0IHsgc2hhcGVGbGFnIH0gPSB2bm9kZTtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICBjaGlsZHJlbiA9IG51bGw7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICB0eXBlID0gMTY7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNoaWxkcmVuID09PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKHNoYXBlRmxhZyAmICgxIHwgNjQpKSB7XG4gICAgICBjb25zdCBzbG90ID0gY2hpbGRyZW4uZGVmYXVsdDtcbiAgICAgIGlmIChzbG90KSB7XG4gICAgICAgIHNsb3QuX2MgJiYgKHNsb3QuX2QgPSBmYWxzZSk7XG4gICAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBzbG90KCkpO1xuICAgICAgICBzbG90Ll9jICYmIChzbG90Ll9kID0gdHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSAzMjtcbiAgICAgIGNvbnN0IHNsb3RGbGFnID0gY2hpbGRyZW4uXztcbiAgICAgIGlmICghc2xvdEZsYWcgJiYgIWlzSW50ZXJuYWxPYmplY3QoY2hpbGRyZW4pKSB7XG4gICAgICAgIGNoaWxkcmVuLl9jdHggPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gICAgICB9IGVsc2UgaWYgKHNsb3RGbGFnID09PSAzICYmIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkge1xuICAgICAgICBpZiAoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnNsb3RzLl8gPT09IDEpIHtcbiAgICAgICAgICBjaGlsZHJlbi5fID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGlsZHJlbi5fID0gMjtcbiAgICAgICAgICB2bm9kZS5wYXRjaEZsYWcgfD0gMTAyNDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKGNoaWxkcmVuKSkge1xuICAgIGNoaWxkcmVuID0geyBkZWZhdWx0OiBjaGlsZHJlbiwgX2N0eDogY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIH07XG4gICAgdHlwZSA9IDMyO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkcmVuID0gU3RyaW5nKGNoaWxkcmVuKTtcbiAgICBpZiAoc2hhcGVGbGFnICYgNjQpIHtcbiAgICAgIHR5cGUgPSAxNjtcbiAgICAgIGNoaWxkcmVuID0gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlID0gODtcbiAgICB9XG4gIH1cbiAgdm5vZGUuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdm5vZGUuc2hhcGVGbGFnIHw9IHR5cGU7XG59XG5mdW5jdGlvbiBtZXJnZVByb3BzKC4uLmFyZ3MpIHtcbiAgY29uc3QgcmV0ID0ge307XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHRvTWVyZ2UgPSBhcmdzW2ldO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRvTWVyZ2UpIHtcbiAgICAgIGlmIChrZXkgPT09IFwiY2xhc3NcIikge1xuICAgICAgICBpZiAocmV0LmNsYXNzICE9PSB0b01lcmdlLmNsYXNzKSB7XG4gICAgICAgICAgcmV0LmNsYXNzID0gbm9ybWFsaXplQ2xhc3MoW3JldC5jbGFzcywgdG9NZXJnZS5jbGFzc10pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJzdHlsZVwiKSB7XG4gICAgICAgIHJldC5zdHlsZSA9IG5vcm1hbGl6ZVN0eWxlKFtyZXQuc3R5bGUsIHRvTWVyZ2Uuc3R5bGVdKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPbihrZXkpKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gcmV0W2tleV07XG4gICAgICAgIGNvbnN0IGluY29taW5nID0gdG9NZXJnZVtrZXldO1xuICAgICAgICBpZiAoaW5jb21pbmcgJiYgZXhpc3RpbmcgIT09IGluY29taW5nICYmICEoaXNBcnJheShleGlzdGluZykgJiYgZXhpc3RpbmcuaW5jbHVkZXMoaW5jb21pbmcpKSkge1xuICAgICAgICAgIHJldFtrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGluY29taW5nKSA6IGluY29taW5nO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGtleSAhPT0gXCJcIikge1xuICAgICAgICByZXRba2V5XSA9IHRvTWVyZ2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIGludm9rZVZOb2RlSG9vayhob29rLCBpbnN0YW5jZSwgdm5vZGUsIHByZXZWTm9kZSA9IG51bGwpIHtcbiAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgaW5zdGFuY2UsIDcsIFtcbiAgICB2bm9kZSxcbiAgICBwcmV2Vk5vZGVcbiAgXSk7XG59XG5cbmNvbnN0IGVtcHR5QXBwQ29udGV4dCA9IGNyZWF0ZUFwcENvbnRleHQoKTtcbmxldCB1aWQgPSAwO1xuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2Uodm5vZGUsIHBhcmVudCwgc3VzcGVuc2UpIHtcbiAgY29uc3QgdHlwZSA9IHZub2RlLnR5cGU7XG4gIGNvbnN0IGFwcENvbnRleHQgPSAocGFyZW50ID8gcGFyZW50LmFwcENvbnRleHQgOiB2bm9kZS5hcHBDb250ZXh0KSB8fCBlbXB0eUFwcENvbnRleHQ7XG4gIGNvbnN0IGluc3RhbmNlID0ge1xuICAgIHVpZDogdWlkKyssXG4gICAgdm5vZGUsXG4gICAgdHlwZSxcbiAgICBwYXJlbnQsXG4gICAgYXBwQ29udGV4dCxcbiAgICByb290OiBudWxsLFxuICAgIC8vIHRvIGJlIGltbWVkaWF0ZWx5IHNldFxuICAgIG5leHQ6IG51bGwsXG4gICAgc3ViVHJlZTogbnVsbCxcbiAgICAvLyB3aWxsIGJlIHNldCBzeW5jaHJvbm91c2x5IHJpZ2h0IGFmdGVyIGNyZWF0aW9uXG4gICAgZWZmZWN0OiBudWxsLFxuICAgIHVwZGF0ZTogbnVsbCxcbiAgICAvLyB3aWxsIGJlIHNldCBzeW5jaHJvbm91c2x5IHJpZ2h0IGFmdGVyIGNyZWF0aW9uXG4gICAgam9iOiBudWxsLFxuICAgIHNjb3BlOiBuZXcgRWZmZWN0U2NvcGUoXG4gICAgICB0cnVlXG4gICAgICAvKiBkZXRhY2hlZCAqL1xuICAgICksXG4gICAgcmVuZGVyOiBudWxsLFxuICAgIHByb3h5OiBudWxsLFxuICAgIGV4cG9zZWQ6IG51bGwsXG4gICAgZXhwb3NlUHJveHk6IG51bGwsXG4gICAgd2l0aFByb3h5OiBudWxsLFxuICAgIHByb3ZpZGVzOiBwYXJlbnQgPyBwYXJlbnQucHJvdmlkZXMgOiBPYmplY3QuY3JlYXRlKGFwcENvbnRleHQucHJvdmlkZXMpLFxuICAgIGlkczogcGFyZW50ID8gcGFyZW50LmlkcyA6IFtcIlwiLCAwLCAwXSxcbiAgICBhY2Nlc3NDYWNoZTogbnVsbCxcbiAgICByZW5kZXJDYWNoZTogW10sXG4gICAgLy8gbG9jYWwgcmVzb2x2ZWQgYXNzZXRzXG4gICAgY29tcG9uZW50czogbnVsbCxcbiAgICBkaXJlY3RpdmVzOiBudWxsLFxuICAgIC8vIHJlc29sdmVkIHByb3BzIGFuZCBlbWl0cyBvcHRpb25zXG4gICAgcHJvcHNPcHRpb25zOiBub3JtYWxpemVQcm9wc09wdGlvbnModHlwZSwgYXBwQ29udGV4dCksXG4gICAgZW1pdHNPcHRpb25zOiBub3JtYWxpemVFbWl0c09wdGlvbnModHlwZSwgYXBwQ29udGV4dCksXG4gICAgLy8gZW1pdFxuICAgIGVtaXQ6IG51bGwsXG4gICAgLy8gdG8gYmUgc2V0IGltbWVkaWF0ZWx5XG4gICAgZW1pdHRlZDogbnVsbCxcbiAgICAvLyBwcm9wcyBkZWZhdWx0IHZhbHVlXG4gICAgcHJvcHNEZWZhdWx0czogRU1QVFlfT0JKLFxuICAgIC8vIGluaGVyaXRBdHRyc1xuICAgIGluaGVyaXRBdHRyczogdHlwZS5pbmhlcml0QXR0cnMsXG4gICAgLy8gc3RhdGVcbiAgICBjdHg6IEVNUFRZX09CSixcbiAgICBkYXRhOiBFTVBUWV9PQkosXG4gICAgcHJvcHM6IEVNUFRZX09CSixcbiAgICBhdHRyczogRU1QVFlfT0JKLFxuICAgIHNsb3RzOiBFTVBUWV9PQkosXG4gICAgcmVmczogRU1QVFlfT0JKLFxuICAgIHNldHVwU3RhdGU6IEVNUFRZX09CSixcbiAgICBzZXR1cENvbnRleHQ6IG51bGwsXG4gICAgLy8gc3VzcGVuc2UgcmVsYXRlZFxuICAgIHN1c3BlbnNlLFxuICAgIHN1c3BlbnNlSWQ6IHN1c3BlbnNlID8gc3VzcGVuc2UucGVuZGluZ0lkIDogMCxcbiAgICBhc3luY0RlcDogbnVsbCxcbiAgICBhc3luY1Jlc29sdmVkOiBmYWxzZSxcbiAgICAvLyBsaWZlY3ljbGUgaG9va3NcbiAgICAvLyBub3QgdXNpbmcgZW51bXMgaGVyZSBiZWNhdXNlIGl0IHJlc3VsdHMgaW4gY29tcHV0ZWQgcHJvcGVydGllc1xuICAgIGlzTW91bnRlZDogZmFsc2UsXG4gICAgaXNVbm1vdW50ZWQ6IGZhbHNlLFxuICAgIGlzRGVhY3RpdmF0ZWQ6IGZhbHNlLFxuICAgIGJjOiBudWxsLFxuICAgIGM6IG51bGwsXG4gICAgYm06IG51bGwsXG4gICAgbTogbnVsbCxcbiAgICBidTogbnVsbCxcbiAgICB1OiBudWxsLFxuICAgIHVtOiBudWxsLFxuICAgIGJ1bTogbnVsbCxcbiAgICBkYTogbnVsbCxcbiAgICBhOiBudWxsLFxuICAgIHJ0ZzogbnVsbCxcbiAgICBydGM6IG51bGwsXG4gICAgZWM6IG51bGwsXG4gICAgc3A6IG51bGxcbiAgfTtcbiAge1xuICAgIGluc3RhbmNlLmN0eCA9IGNyZWF0ZURldlJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xuICB9XG4gIGluc3RhbmNlLnJvb3QgPSBwYXJlbnQgPyBwYXJlbnQucm9vdCA6IGluc3RhbmNlO1xuICBpbnN0YW5jZS5lbWl0ID0gZW1pdC5iaW5kKG51bGwsIGluc3RhbmNlKTtcbiAgaWYgKHZub2RlLmNlKSB7XG4gICAgdm5vZGUuY2UoaW5zdGFuY2UpO1xuICB9XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbmxldCBjdXJyZW50SW5zdGFuY2UgPSBudWxsO1xuY29uc3QgZ2V0Q3VycmVudEluc3RhbmNlID0gKCkgPT4gY3VycmVudEluc3RhbmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbmxldCBpbnRlcm5hbFNldEN1cnJlbnRJbnN0YW5jZTtcbmxldCBzZXRJblNTUlNldHVwU3RhdGU7XG57XG4gIGNvbnN0IGcgPSBnZXRHbG9iYWxUaGlzKCk7XG4gIGNvbnN0IHJlZ2lzdGVyR2xvYmFsU2V0dGVyID0gKGtleSwgc2V0dGVyKSA9PiB7XG4gICAgbGV0IHNldHRlcnM7XG4gICAgaWYgKCEoc2V0dGVycyA9IGdba2V5XSkpIHNldHRlcnMgPSBnW2tleV0gPSBbXTtcbiAgICBzZXR0ZXJzLnB1c2goc2V0dGVyKTtcbiAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgIGlmIChzZXR0ZXJzLmxlbmd0aCA+IDEpIHNldHRlcnMuZm9yRWFjaCgoc2V0KSA9PiBzZXQodikpO1xuICAgICAgZWxzZSBzZXR0ZXJzWzBdKHYpO1xuICAgIH07XG4gIH07XG4gIGludGVybmFsU2V0Q3VycmVudEluc3RhbmNlID0gcmVnaXN0ZXJHbG9iYWxTZXR0ZXIoXG4gICAgYF9fVlVFX0lOU1RBTkNFX1NFVFRFUlNfX2AsXG4gICAgKHYpID0+IGN1cnJlbnRJbnN0YW5jZSA9IHZcbiAgKTtcbiAgc2V0SW5TU1JTZXR1cFN0YXRlID0gcmVnaXN0ZXJHbG9iYWxTZXR0ZXIoXG4gICAgYF9fVlVFX1NTUl9TRVRURVJTX19gLFxuICAgICh2KSA9PiBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSB2XG4gICk7XG59XG5jb25zdCBzZXRDdXJyZW50SW5zdGFuY2UgPSAoaW5zdGFuY2UpID0+IHtcbiAgY29uc3QgcHJldiA9IGN1cnJlbnRJbnN0YW5jZTtcbiAgaW50ZXJuYWxTZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICBpbnN0YW5jZS5zY29wZS5vbigpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGluc3RhbmNlLnNjb3BlLm9mZigpO1xuICAgIGludGVybmFsU2V0Q3VycmVudEluc3RhbmNlKHByZXYpO1xuICB9O1xufTtcbmNvbnN0IHVuc2V0Q3VycmVudEluc3RhbmNlID0gKCkgPT4ge1xuICBjdXJyZW50SW5zdGFuY2UgJiYgY3VycmVudEluc3RhbmNlLnNjb3BlLm9mZigpO1xuICBpbnRlcm5hbFNldEN1cnJlbnRJbnN0YW5jZShudWxsKTtcbn07XG5jb25zdCBpc0J1aWx0SW5UYWcgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcInNsb3QsY29tcG9uZW50XCIpO1xuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUsIHsgaXNOYXRpdmVUYWcgfSkge1xuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGlzTmF0aXZlVGFnKG5hbWUpKSB7XG4gICAgd2FybiQxKFxuICAgICAgXCJEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50IGlkOiBcIiArIG5hbWVcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBpc1N0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlKSB7XG4gIHJldHVybiBpbnN0YW5jZS52bm9kZS5zaGFwZUZsYWcgJiA0O1xufVxubGV0IGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGZhbHNlO1xuZnVuY3Rpb24gc2V0dXBDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlKSB7XG4gIGlzU1NSICYmIHNldEluU1NSU2V0dXBTdGF0ZShpc1NTUik7XG4gIGNvbnN0IHsgcHJvcHMsIGNoaWxkcmVuIH0gPSBpbnN0YW5jZS52bm9kZTtcbiAgY29uc3QgaXNTdGF0ZWZ1bCA9IGlzU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UpO1xuICBpbml0UHJvcHMoaW5zdGFuY2UsIHByb3BzLCBpc1N0YXRlZnVsLCBpc1NTUik7XG4gIGluaXRTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4sIG9wdGltaXplZCk7XG4gIGNvbnN0IHNldHVwUmVzdWx0ID0gaXNTdGF0ZWZ1bCA/IHNldHVwU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSKSA6IHZvaWQgMDtcbiAgaXNTU1IgJiYgc2V0SW5TU1JTZXR1cFN0YXRlKGZhbHNlKTtcbiAgcmV0dXJuIHNldHVwUmVzdWx0O1xufVxuZnVuY3Rpb24gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpIHtcbiAgdmFyIF9hO1xuICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xuICB7XG4gICAgaWYgKENvbXBvbmVudC5uYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoQ29tcG9uZW50Lm5hbWUsIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnKTtcbiAgICB9XG4gICAgaWYgKENvbXBvbmVudC5jb21wb25lbnRzKSB7XG4gICAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKENvbXBvbmVudC5jb21wb25lbnRzKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWVzW2ldLCBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChDb21wb25lbnQuZGlyZWN0aXZlcykge1xuICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhDb21wb25lbnQuZGlyZWN0aXZlcyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChDb21wb25lbnQuY29tcGlsZXJPcHRpb25zICYmIGlzUnVudGltZU9ubHkoKSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgXCJjb21waWxlck9wdGlvbnNcIiBpcyBvbmx5IHN1cHBvcnRlZCB3aGVuIHVzaW5nIGEgYnVpbGQgb2YgVnVlIHRoYXQgaW5jbHVkZXMgdGhlIHJ1bnRpbWUgY29tcGlsZXIuIFNpbmNlIHlvdSBhcmUgdXNpbmcgYSBydW50aW1lLW9ubHkgYnVpbGQsIHRoZSBvcHRpb25zIHNob3VsZCBiZSBwYXNzZWQgdmlhIHlvdXIgYnVpbGQgdG9vbCBjb25maWcgaW5zdGVhZC5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpbnN0YW5jZS5hY2Nlc3NDYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpbnN0YW5jZS5wcm94eSA9IG5ldyBQcm94eShpbnN0YW5jZS5jdHgsIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyk7XG4gIHtcbiAgICBleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XG4gIH1cbiAgY29uc3QgeyBzZXR1cCB9ID0gQ29tcG9uZW50O1xuICBpZiAoc2V0dXApIHtcbiAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgY29uc3Qgc2V0dXBDb250ZXh0ID0gaW5zdGFuY2Uuc2V0dXBDb250ZXh0ID0gc2V0dXAubGVuZ3RoID4gMSA/IGNyZWF0ZVNldHVwQ29udGV4dChpbnN0YW5jZSkgOiBudWxsO1xuICAgIGNvbnN0IHJlc2V0ID0gc2V0Q3VycmVudEluc3RhbmNlKGluc3RhbmNlKTtcbiAgICBjb25zdCBzZXR1cFJlc3VsdCA9IGNhbGxXaXRoRXJyb3JIYW5kbGluZyhcbiAgICAgIHNldHVwLFxuICAgICAgaW5zdGFuY2UsXG4gICAgICAwLFxuICAgICAgW1xuICAgICAgICBzaGFsbG93UmVhZG9ubHkoaW5zdGFuY2UucHJvcHMpICxcbiAgICAgICAgc2V0dXBDb250ZXh0XG4gICAgICBdXG4gICAgKTtcbiAgICBjb25zdCBpc0FzeW5jU2V0dXAgPSBpc1Byb21pc2Uoc2V0dXBSZXN1bHQpO1xuICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICByZXNldCgpO1xuICAgIGlmICgoaXNBc3luY1NldHVwIHx8IGluc3RhbmNlLnNwKSAmJiAhaXNBc3luY1dyYXBwZXIoaW5zdGFuY2UpKSB7XG4gICAgICBtYXJrQXN5bmNCb3VuZGFyeShpbnN0YW5jZSk7XG4gICAgfVxuICAgIGlmIChpc0FzeW5jU2V0dXApIHtcbiAgICAgIHNldHVwUmVzdWx0LnRoZW4odW5zZXRDdXJyZW50SW5zdGFuY2UsIHVuc2V0Q3VycmVudEluc3RhbmNlKTtcbiAgICAgIGlmIChpc1NTUikge1xuICAgICAgICByZXR1cm4gc2V0dXBSZXN1bHQudGhlbigocmVzb2x2ZWRSZXN1bHQpID0+IHtcbiAgICAgICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgcmVzb2x2ZWRSZXN1bHQsIGlzU1NSKTtcbiAgICAgICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCBpbnN0YW5jZSwgMCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zdGFuY2UuYXN5bmNEZXAgPSBzZXR1cFJlc3VsdDtcbiAgICAgICAgaWYgKCFpbnN0YW5jZS5zdXNwZW5zZSkge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSAoX2EgPSBDb21wb25lbnQubmFtZSkgIT0gbnVsbCA/IF9hIDogXCJBbm9ueW1vdXNcIjtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgQ29tcG9uZW50IDwke25hbWV9Pjogc2V0dXAgZnVuY3Rpb24gcmV0dXJuZWQgYSBwcm9taXNlLCBidXQgbm8gPFN1c3BlbnNlPiBib3VuZGFyeSB3YXMgZm91bmQgaW4gdGhlIHBhcmVudCBjb21wb25lbnQgdHJlZS4gQSBjb21wb25lbnQgd2l0aCBhc3luYyBzZXR1cCgpIG11c3QgYmUgbmVzdGVkIGluIGEgPFN1c3BlbnNlPiBpbiBvcmRlciB0byBiZSByZW5kZXJlZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgc2V0dXBSZXN1bHQsIGlzU1NSKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UsIGlzU1NSKTtcbiAgfVxufVxuZnVuY3Rpb24gaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHNldHVwUmVzdWx0LCBpc1NTUikge1xuICBpZiAoaXNGdW5jdGlvbihzZXR1cFJlc3VsdCkpIHtcbiAgICBpZiAoaW5zdGFuY2UudHlwZS5fX3NzcklubGluZVJlbmRlcikge1xuICAgICAgaW5zdGFuY2Uuc3NyUmVuZGVyID0gc2V0dXBSZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLnJlbmRlciA9IHNldHVwUmVzdWx0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChzZXR1cFJlc3VsdCkpIHtcbiAgICBpZiAoaXNWTm9kZShzZXR1cFJlc3VsdCkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYHNldHVwKCkgc2hvdWxkIG5vdCByZXR1cm4gVk5vZGVzIGRpcmVjdGx5IC0gcmV0dXJuIGEgcmVuZGVyIGZ1bmN0aW9uIGluc3RlYWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAge1xuICAgICAgaW5zdGFuY2UuZGV2dG9vbHNSYXdTZXR1cFN0YXRlID0gc2V0dXBSZXN1bHQ7XG4gICAgfVxuICAgIGluc3RhbmNlLnNldHVwU3RhdGUgPSBwcm94eVJlZnMoc2V0dXBSZXN1bHQpO1xuICAgIHtcbiAgICAgIGV4cG9zZVNldHVwU3RhdGVPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzZXR1cFJlc3VsdCAhPT0gdm9pZCAwKSB7XG4gICAgd2FybiQxKFxuICAgICAgYHNldHVwKCkgc2hvdWxkIHJldHVybiBhbiBvYmplY3QuIFJlY2VpdmVkOiAke3NldHVwUmVzdWx0ID09PSBudWxsID8gXCJudWxsXCIgOiB0eXBlb2Ygc2V0dXBSZXN1bHR9YFxuICAgICk7XG4gIH1cbiAgZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UsIGlzU1NSKTtcbn1cbmxldCBjb21waWxlJDE7XG5sZXQgaW5zdGFsbFdpdGhQcm94eTtcbmZ1bmN0aW9uIHJlZ2lzdGVyUnVudGltZUNvbXBpbGVyKF9jb21waWxlKSB7XG4gIGNvbXBpbGUkMSA9IF9jb21waWxlO1xuICBpbnN0YWxsV2l0aFByb3h5ID0gKGkpID0+IHtcbiAgICBpZiAoaS5yZW5kZXIuX3JjKSB7XG4gICAgICBpLndpdGhQcm94eSA9IG5ldyBQcm94eShpLmN0eCwgUnVudGltZUNvbXBpbGVkUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzKTtcbiAgICB9XG4gIH07XG59XG5jb25zdCBpc1J1bnRpbWVPbmx5ID0gKCkgPT4gIWNvbXBpbGUkMTtcbmZ1bmN0aW9uIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUiwgc2tpcE9wdGlvbnMpIHtcbiAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcbiAgaWYgKCFpbnN0YW5jZS5yZW5kZXIpIHtcbiAgICBpZiAoIWlzU1NSICYmIGNvbXBpbGUkMSAmJiAhQ29tcG9uZW50LnJlbmRlcikge1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSBDb21wb25lbnQudGVtcGxhdGUgfHwgcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpLnRlbXBsYXRlO1xuICAgICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBjb21waWxlYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBpc0N1c3RvbUVsZW1lbnQsIGNvbXBpbGVyT3B0aW9ucyB9ID0gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWc7XG4gICAgICAgIGNvbnN0IHsgZGVsaW1pdGVycywgY29tcGlsZXJPcHRpb25zOiBjb21wb25lbnRDb21waWxlck9wdGlvbnMgfSA9IENvbXBvbmVudDtcbiAgICAgICAgY29uc3QgZmluYWxDb21waWxlck9wdGlvbnMgPSBleHRlbmQoXG4gICAgICAgICAgZXh0ZW5kKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpc0N1c3RvbUVsZW1lbnQsXG4gICAgICAgICAgICAgIGRlbGltaXRlcnNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21waWxlck9wdGlvbnNcbiAgICAgICAgICApLFxuICAgICAgICAgIGNvbXBvbmVudENvbXBpbGVyT3B0aW9uc1xuICAgICAgICApO1xuICAgICAgICBDb21wb25lbnQucmVuZGVyID0gY29tcGlsZSQxKHRlbXBsYXRlLCBmaW5hbENvbXBpbGVyT3B0aW9ucyk7XG4gICAgICAgIHtcbiAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgY29tcGlsZWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGluc3RhbmNlLnJlbmRlciA9IENvbXBvbmVudC5yZW5kZXIgfHwgTk9PUDtcbiAgICBpZiAoaW5zdGFsbFdpdGhQcm94eSkge1xuICAgICAgaW5zdGFsbFdpdGhQcm94eShpbnN0YW5jZSk7XG4gICAgfVxuICB9XG4gIHtcbiAgICBjb25zdCByZXNldCA9IHNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgcGF1c2VUcmFja2luZygpO1xuICAgIHRyeSB7XG4gICAgICBhcHBseU9wdGlvbnMoaW5zdGFuY2UpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICByZXNldCgpO1xuICAgIH1cbiAgfVxuICBpZiAoIUNvbXBvbmVudC5yZW5kZXIgJiYgaW5zdGFuY2UucmVuZGVyID09PSBOT09QICYmICFpc1NTUikge1xuICAgIGlmICghY29tcGlsZSQxICYmIENvbXBvbmVudC50ZW1wbGF0ZSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgQ29tcG9uZW50IHByb3ZpZGVkIHRlbXBsYXRlIG9wdGlvbiBidXQgcnVudGltZSBjb21waWxhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnVpbGQgb2YgVnVlLmAgKyAoYCBVc2UgXCJ2dWUuZXNtLWJyb3dzZXIuanNcIiBpbnN0ZWFkLmAgKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybiQxKGBDb21wb25lbnQgaXMgbWlzc2luZyB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb246IGAsIENvbXBvbmVudCk7XG4gICAgfVxuICB9XG59XG5jb25zdCBhdHRyc1Byb3h5SGFuZGxlcnMgPSB7XG4gIGdldCh0YXJnZXQsIGtleSkge1xuICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XG4gICAgdHJhY2sodGFyZ2V0LCBcImdldFwiLCBcIlwiKTtcbiAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gIH0sXG4gIHNldCgpIHtcbiAgICB3YXJuJDEoYHNldHVwQ29udGV4dC5hdHRycyBpcyByZWFkb25seS5gKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KCkge1xuICAgIHdhcm4kMShgc2V0dXBDb250ZXh0LmF0dHJzIGlzIHJlYWRvbmx5LmApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSA7XG5mdW5jdGlvbiBnZXRTbG90c1Byb3h5KGluc3RhbmNlKSB7XG4gIHJldHVybiBuZXcgUHJveHkoaW5zdGFuY2Uuc2xvdHMsIHtcbiAgICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHRyYWNrKGluc3RhbmNlLCBcImdldFwiLCBcIiRzbG90c1wiKTtcbiAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlU2V0dXBDb250ZXh0KGluc3RhbmNlKSB7XG4gIGNvbnN0IGV4cG9zZSA9IChleHBvc2VkKSA9PiB7XG4gICAge1xuICAgICAgaWYgKGluc3RhbmNlLmV4cG9zZWQpIHtcbiAgICAgICAgd2FybiQxKGBleHBvc2UoKSBzaG91bGQgYmUgY2FsbGVkIG9ubHkgb25jZSBwZXIgc2V0dXAoKS5gKTtcbiAgICAgIH1cbiAgICAgIGlmIChleHBvc2VkICE9IG51bGwpIHtcbiAgICAgICAgbGV0IGV4cG9zZWRUeXBlID0gdHlwZW9mIGV4cG9zZWQ7XG4gICAgICAgIGlmIChleHBvc2VkVHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIGlmIChpc0FycmF5KGV4cG9zZWQpKSB7XG4gICAgICAgICAgICBleHBvc2VkVHlwZSA9IFwiYXJyYXlcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzUmVmKGV4cG9zZWQpKSB7XG4gICAgICAgICAgICBleHBvc2VkVHlwZSA9IFwicmVmXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChleHBvc2VkVHlwZSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIGBleHBvc2UoKSBzaG91bGQgYmUgcGFzc2VkIGEgcGxhaW4gb2JqZWN0LCByZWNlaXZlZCAke2V4cG9zZWRUeXBlfS5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpbnN0YW5jZS5leHBvc2VkID0gZXhwb3NlZCB8fCB7fTtcbiAgfTtcbiAge1xuICAgIGxldCBhdHRyc1Byb3h5O1xuICAgIGxldCBzbG90c1Byb3h5O1xuICAgIHJldHVybiBPYmplY3QuZnJlZXplKHtcbiAgICAgIGdldCBhdHRycygpIHtcbiAgICAgICAgcmV0dXJuIGF0dHJzUHJveHkgfHwgKGF0dHJzUHJveHkgPSBuZXcgUHJveHkoaW5zdGFuY2UuYXR0cnMsIGF0dHJzUHJveHlIYW5kbGVycykpO1xuICAgICAgfSxcbiAgICAgIGdldCBzbG90cygpIHtcbiAgICAgICAgcmV0dXJuIHNsb3RzUHJveHkgfHwgKHNsb3RzUHJveHkgPSBnZXRTbG90c1Byb3h5KGluc3RhbmNlKSk7XG4gICAgICB9LFxuICAgICAgZ2V0IGVtaXQoKSB7XG4gICAgICAgIHJldHVybiAoZXZlbnQsIC4uLmFyZ3MpID0+IGluc3RhbmNlLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgICAgfSxcbiAgICAgIGV4cG9zZVxuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBnZXRDb21wb25lbnRQdWJsaWNJbnN0YW5jZShpbnN0YW5jZSkge1xuICBpZiAoaW5zdGFuY2UuZXhwb3NlZCkge1xuICAgIHJldHVybiBpbnN0YW5jZS5leHBvc2VQcm94eSB8fCAoaW5zdGFuY2UuZXhwb3NlUHJveHkgPSBuZXcgUHJveHkocHJveHlSZWZzKG1hcmtSYXcoaW5zdGFuY2UuZXhwb3NlZCkpLCB7XG4gICAgICBnZXQodGFyZ2V0LCBrZXkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQpIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0W2tleV07XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5IGluIHB1YmxpY1Byb3BlcnRpZXNNYXApIHtcbiAgICAgICAgICByZXR1cm4gcHVibGljUHJvcGVydGllc01hcFtrZXldKGluc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGhhcyh0YXJnZXQsIGtleSkge1xuICAgICAgICByZXR1cm4ga2V5IGluIHRhcmdldCB8fCBrZXkgaW4gcHVibGljUHJvcGVydGllc01hcDtcbiAgICAgIH1cbiAgICB9KSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLnByb3h5O1xuICB9XG59XG5jb25zdCBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuY29uc3QgY2xhc3NpZnkgPSAoc3RyKSA9PiBzdHIucmVwbGFjZShjbGFzc2lmeVJFLCAoYykgPT4gYy50b1VwcGVyQ2FzZSgpKS5yZXBsYWNlKC9bLV9dL2csIFwiXCIpO1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQsIGluY2x1ZGVJbmZlcnJlZCA9IHRydWUpIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24oQ29tcG9uZW50KSA/IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSA6IENvbXBvbmVudC5uYW1lIHx8IGluY2x1ZGVJbmZlcnJlZCAmJiBDb21wb25lbnQuX19uYW1lO1xufVxuZnVuY3Rpb24gZm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgQ29tcG9uZW50LCBpc1Jvb3QgPSBmYWxzZSkge1xuICBsZXQgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50KTtcbiAgaWYgKCFuYW1lICYmIENvbXBvbmVudC5fX2ZpbGUpIHtcbiAgICBjb25zdCBtYXRjaCA9IENvbXBvbmVudC5fX2ZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwuXFx3KyQvKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIG5hbWUgPSBtYXRjaFsxXTtcbiAgICB9XG4gIH1cbiAgaWYgKCFuYW1lICYmIGluc3RhbmNlICYmIGluc3RhbmNlLnBhcmVudCkge1xuICAgIGNvbnN0IGluZmVyRnJvbVJlZ2lzdHJ5ID0gKHJlZ2lzdHJ5KSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiByZWdpc3RyeSkge1xuICAgICAgICBpZiAocmVnaXN0cnlba2V5XSA9PT0gQ29tcG9uZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgbmFtZSA9IGluZmVyRnJvbVJlZ2lzdHJ5KFxuICAgICAgaW5zdGFuY2UuY29tcG9uZW50cyB8fCBpbnN0YW5jZS5wYXJlbnQudHlwZS5jb21wb25lbnRzXG4gICAgKSB8fCBpbmZlckZyb21SZWdpc3RyeShpbnN0YW5jZS5hcHBDb250ZXh0LmNvbXBvbmVudHMpO1xuICB9XG4gIHJldHVybiBuYW1lID8gY2xhc3NpZnkobmFtZSkgOiBpc1Jvb3QgPyBgQXBwYCA6IGBBbm9ueW1vdXNgO1xufVxuZnVuY3Rpb24gaXNDbGFzc0NvbXBvbmVudCh2YWx1ZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSkgJiYgXCJfX3ZjY09wdHNcIiBpbiB2YWx1ZTtcbn1cblxuY29uc3QgY29tcHV0ZWQgPSAoZ2V0dGVyT3JPcHRpb25zLCBkZWJ1Z09wdGlvbnMpID0+IHtcbiAgY29uc3QgYyA9IGNvbXB1dGVkJDEoZ2V0dGVyT3JPcHRpb25zLCBkZWJ1Z09wdGlvbnMsIGlzSW5TU1JDb21wb25lbnRTZXR1cCk7XG4gIHtcbiAgICBjb25zdCBpID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgaWYgKGkgJiYgaS5hcHBDb250ZXh0LmNvbmZpZy53YXJuUmVjdXJzaXZlQ29tcHV0ZWQpIHtcbiAgICAgIGMuX3dhcm5SZWN1cnNpdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYztcbn07XG5cbmZ1bmN0aW9uIGgodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbikge1xuICBjb25zdCBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgaWYgKGwgPT09IDIpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvcHNPckNoaWxkcmVuKSAmJiAhaXNBcnJheShwcm9wc09yQ2hpbGRyZW4pKSB7XG4gICAgICBpZiAoaXNWTm9kZShwcm9wc09yQ2hpbGRyZW4pKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBudWxsLCBbcHJvcHNPckNoaWxkcmVuXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHNPckNoaWxkcmVuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG51bGwsIHByb3BzT3JDaGlsZHJlbik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChsID4gMykge1xuICAgICAgY2hpbGRyZW4gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIH0gZWxzZSBpZiAobCA9PT0gMyAmJiBpc1ZOb2RlKGNoaWxkcmVuKSkge1xuICAgICAgY2hpbGRyZW4gPSBbY2hpbGRyZW5dO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEN1c3RvbUZvcm1hdHRlcigpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdnVlU3R5bGUgPSB7IHN0eWxlOiBcImNvbG9yOiMzYmE3NzZcIiB9O1xuICBjb25zdCBudW1iZXJTdHlsZSA9IHsgc3R5bGU6IFwiY29sb3I6IzE2NzdmZlwiIH07XG4gIGNvbnN0IHN0cmluZ1N0eWxlID0geyBzdHlsZTogXCJjb2xvcjojZjUyMjJkXCIgfTtcbiAgY29uc3Qga2V5d29yZFN0eWxlID0geyBzdHlsZTogXCJjb2xvcjojZWIyZjk2XCIgfTtcbiAgY29uc3QgZm9ybWF0dGVyID0ge1xuICAgIF9fdnVlX2N1c3RvbV9mb3JtYXR0ZXI6IHRydWUsXG4gICAgaGVhZGVyKG9iaikge1xuICAgICAgaWYgKCFpc09iamVjdChvYmopKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKG9iai5fX2lzVnVlKSB7XG4gICAgICAgIHJldHVybiBbXCJkaXZcIiwgdnVlU3R5bGUsIGBWdWVJbnN0YW5jZWBdO1xuICAgICAgfSBlbHNlIGlmIChpc1JlZihvYmopKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7fSxcbiAgICAgICAgICBbXCJzcGFuXCIsIHZ1ZVN0eWxlLCBnZW5SZWZGbGFnKG9iaildLFxuICAgICAgICAgIFwiPFwiLFxuICAgICAgICAgIC8vIGF2b2lkIGRlYnVnZ2VyIGFjY2Vzc2luZyB2YWx1ZSBhZmZlY3RpbmcgYmVoYXZpb3JcbiAgICAgICAgICBmb3JtYXRWYWx1ZShcIl92YWx1ZVwiIGluIG9iaiA/IG9iai5fdmFsdWUgOiBvYmopLFxuICAgICAgICAgIGA+YFxuICAgICAgICBdO1xuICAgICAgfSBlbHNlIGlmIChpc1JlYWN0aXZlKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHt9LFxuICAgICAgICAgIFtcInNwYW5cIiwgdnVlU3R5bGUsIGlzU2hhbGxvdyhvYmopID8gXCJTaGFsbG93UmVhY3RpdmVcIiA6IFwiUmVhY3RpdmVcIl0sXG4gICAgICAgICAgXCI8XCIsXG4gICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcbiAgICAgICAgICBgPiR7aXNSZWFkb25seShvYmopID8gYCAocmVhZG9ubHkpYCA6IGBgfWBcbiAgICAgICAgXTtcbiAgICAgIH0gZWxzZSBpZiAoaXNSZWFkb25seShvYmopKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7fSxcbiAgICAgICAgICBbXCJzcGFuXCIsIHZ1ZVN0eWxlLCBpc1NoYWxsb3cob2JqKSA/IFwiU2hhbGxvd1JlYWRvbmx5XCIgOiBcIlJlYWRvbmx5XCJdLFxuICAgICAgICAgIFwiPFwiLFxuICAgICAgICAgIGZvcm1hdFZhbHVlKG9iaiksXG4gICAgICAgICAgXCI+XCJcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgaGFzQm9keShvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgb2JqLl9faXNWdWU7XG4gICAgfSxcbiAgICBib2R5KG9iaikge1xuICAgICAgaWYgKG9iaiAmJiBvYmouX19pc1Z1ZSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge30sXG4gICAgICAgICAgLi4uZm9ybWF0SW5zdGFuY2Uob2JqLiQpXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBmb3JtYXRJbnN0YW5jZShpbnN0YW5jZSkge1xuICAgIGNvbnN0IGJsb2NrcyA9IFtdO1xuICAgIGlmIChpbnN0YW5jZS50eXBlLnByb3BzICYmIGluc3RhbmNlLnByb3BzKSB7XG4gICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKFwicHJvcHNcIiwgdG9SYXcoaW5zdGFuY2UucHJvcHMpKSk7XG4gICAgfVxuICAgIGlmIChpbnN0YW5jZS5zZXR1cFN0YXRlICE9PSBFTVBUWV9PQkopIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJzZXR1cFwiLCBpbnN0YW5jZS5zZXR1cFN0YXRlKSk7XG4gICAgfVxuICAgIGlmIChpbnN0YW5jZS5kYXRhICE9PSBFTVBUWV9PQkopIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJkYXRhXCIsIHRvUmF3KGluc3RhbmNlLmRhdGEpKSk7XG4gICAgfVxuICAgIGNvbnN0IGNvbXB1dGVkID0gZXh0cmFjdEtleXMoaW5zdGFuY2UsIFwiY29tcHV0ZWRcIik7XG4gICAgaWYgKGNvbXB1dGVkKSB7XG4gICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKFwiY29tcHV0ZWRcIiwgY29tcHV0ZWQpKTtcbiAgICB9XG4gICAgY29uc3QgaW5qZWN0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgXCJpbmplY3RcIik7XG4gICAgaWYgKGluamVjdGVkKSB7XG4gICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKFwiaW5qZWN0ZWRcIiwgaW5qZWN0ZWQpKTtcbiAgICB9XG4gICAgYmxvY2tzLnB1c2goW1xuICAgICAgXCJkaXZcIixcbiAgICAgIHt9LFxuICAgICAgW1xuICAgICAgICBcInNwYW5cIixcbiAgICAgICAge1xuICAgICAgICAgIHN0eWxlOiBrZXl3b3JkU3R5bGUuc3R5bGUgKyBcIjtvcGFjaXR5OjAuNjZcIlxuICAgICAgICB9LFxuICAgICAgICBcIiQgKGludGVybmFsKTogXCJcbiAgICAgIF0sXG4gICAgICBbXCJvYmplY3RcIiwgeyBvYmplY3Q6IGluc3RhbmNlIH1dXG4gICAgXSk7XG4gICAgcmV0dXJuIGJsb2NrcztcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZUJsb2NrKHR5cGUsIHRhcmdldCkge1xuICAgIHRhcmdldCA9IGV4dGVuZCh7fSwgdGFyZ2V0KTtcbiAgICBpZiAoIU9iamVjdC5rZXlzKHRhcmdldCkubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gW1wic3BhblwiLCB7fV07XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdHlsZTogXCJsaW5lLWhlaWdodDoxLjI1ZW07bWFyZ2luLWJvdHRvbTowLjZlbVwiIH0sXG4gICAgICBbXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdHlsZTogXCJjb2xvcjojNDc2NTgyXCJcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZVxuICAgICAgXSxcbiAgICAgIFtcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAge1xuICAgICAgICAgIHN0eWxlOiBcInBhZGRpbmctbGVmdDoxLjI1ZW1cIlxuICAgICAgICB9LFxuICAgICAgICAuLi5PYmplY3Qua2V5cyh0YXJnZXQpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIFtcInNwYW5cIiwga2V5d29yZFN0eWxlLCBrZXkgKyBcIjogXCJdLFxuICAgICAgICAgICAgZm9ybWF0VmFsdWUodGFyZ2V0W2tleV0sIGZhbHNlKVxuICAgICAgICAgIF07XG4gICAgICAgIH0pXG4gICAgICBdXG4gICAgXTtcbiAgfVxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2LCBhc1JhdyA9IHRydWUpIHtcbiAgICBpZiAodHlwZW9mIHYgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIG51bWJlclN0eWxlLCB2XTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gW1wic3BhblwiLCBzdHJpbmdTdHlsZSwgSlNPTi5zdHJpbmdpZnkodildO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gW1wic3BhblwiLCBrZXl3b3JkU3R5bGUsIHZdO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodikpIHtcbiAgICAgIHJldHVybiBbXCJvYmplY3RcIiwgeyBvYmplY3Q6IGFzUmF3ID8gdG9SYXcodikgOiB2IH1dO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW1wic3BhblwiLCBzdHJpbmdTdHlsZSwgU3RyaW5nKHYpXTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZXh0cmFjdEtleXMoaW5zdGFuY2UsIHR5cGUpIHtcbiAgICBjb25zdCBDb21wID0gaW5zdGFuY2UudHlwZTtcbiAgICBpZiAoaXNGdW5jdGlvbihDb21wKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBleHRyYWN0ZWQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5jdHgpIHtcbiAgICAgIGlmIChpc0tleU9mVHlwZShDb21wLCBrZXksIHR5cGUpKSB7XG4gICAgICAgIGV4dHJhY3RlZFtrZXldID0gaW5zdGFuY2UuY3R4W2tleV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHRyYWN0ZWQ7XG4gIH1cbiAgZnVuY3Rpb24gaXNLZXlPZlR5cGUoQ29tcCwga2V5LCB0eXBlKSB7XG4gICAgY29uc3Qgb3B0cyA9IENvbXBbdHlwZV07XG4gICAgaWYgKGlzQXJyYXkob3B0cykgJiYgb3B0cy5pbmNsdWRlcyhrZXkpIHx8IGlzT2JqZWN0KG9wdHMpICYmIGtleSBpbiBvcHRzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKENvbXAuZXh0ZW5kcyAmJiBpc0tleU9mVHlwZShDb21wLmV4dGVuZHMsIGtleSwgdHlwZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoQ29tcC5taXhpbnMgJiYgQ29tcC5taXhpbnMuc29tZSgobSkgPT4gaXNLZXlPZlR5cGUobSwga2V5LCB0eXBlKSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZW5SZWZGbGFnKHYpIHtcbiAgICBpZiAoaXNTaGFsbG93KHYpKSB7XG4gICAgICByZXR1cm4gYFNoYWxsb3dSZWZgO1xuICAgIH1cbiAgICBpZiAodi5lZmZlY3QpIHtcbiAgICAgIHJldHVybiBgQ29tcHV0ZWRSZWZgO1xuICAgIH1cbiAgICByZXR1cm4gYFJlZmA7XG4gIH1cbiAgaWYgKHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMpIHtcbiAgICB3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cuZGV2dG9vbHNGb3JtYXR0ZXJzID0gW2Zvcm1hdHRlcl07XG4gIH1cbn1cblxuZnVuY3Rpb24gd2l0aE1lbW8obWVtbywgcmVuZGVyLCBjYWNoZSwgaW5kZXgpIHtcbiAgY29uc3QgY2FjaGVkID0gY2FjaGVbaW5kZXhdO1xuICBpZiAoY2FjaGVkICYmIGlzTWVtb1NhbWUoY2FjaGVkLCBtZW1vKSkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cbiAgY29uc3QgcmV0ID0gcmVuZGVyKCk7XG4gIHJldC5tZW1vID0gbWVtby5zbGljZSgpO1xuICByZXQuY2FjaGVJbmRleCA9IGluZGV4O1xuICByZXR1cm4gY2FjaGVbaW5kZXhdID0gcmV0O1xufVxuZnVuY3Rpb24gaXNNZW1vU2FtZShjYWNoZWQsIG1lbW8pIHtcbiAgY29uc3QgcHJldiA9IGNhY2hlZC5tZW1vO1xuICBpZiAocHJldi5sZW5ndGggIT0gbWVtby5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGhhc0NoYW5nZWQocHJldltpXSwgbWVtb1tpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgY3VycmVudEJsb2NrKSB7XG4gICAgY3VycmVudEJsb2NrLnB1c2goY2FjaGVkKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuY29uc3QgdmVyc2lvbiA9IFwiMy41LjEzXCI7XG5jb25zdCB3YXJuID0gd2FybiQxIDtcbmNvbnN0IEVycm9yVHlwZVN0cmluZ3MgPSBFcnJvclR5cGVTdHJpbmdzJDEgO1xuY29uc3QgZGV2dG9vbHMgPSBkZXZ0b29scyQxIDtcbmNvbnN0IHNldERldnRvb2xzSG9vayA9IHNldERldnRvb2xzSG9vayQxIDtcbmNvbnN0IF9zc3JVdGlscyA9IHtcbiAgY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UsXG4gIHNldHVwQ29tcG9uZW50LFxuICByZW5kZXJDb21wb25lbnRSb290LFxuICBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UsXG4gIGlzVk5vZGU6IGlzVk5vZGUsXG4gIG5vcm1hbGl6ZVZOb2RlLFxuICBnZXRDb21wb25lbnRQdWJsaWNJbnN0YW5jZSxcbiAgZW5zdXJlVmFsaWRWTm9kZSxcbiAgcHVzaFdhcm5pbmdDb250ZXh0LFxuICBwb3BXYXJuaW5nQ29udGV4dFxufTtcbmNvbnN0IHNzclV0aWxzID0gX3NzclV0aWxzIDtcbmNvbnN0IHJlc29sdmVGaWx0ZXIgPSBudWxsO1xuY29uc3QgY29tcGF0VXRpbHMgPSBudWxsO1xuY29uc3QgRGVwcmVjYXRpb25UeXBlcyA9IG51bGw7XG5cbmxldCBwb2xpY3kgPSB2b2lkIDA7XG5jb25zdCB0dCA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LnRydXN0ZWRUeXBlcztcbmlmICh0dCkge1xuICB0cnkge1xuICAgIHBvbGljeSA9IC8qIEBfX1BVUkVfXyAqLyB0dC5jcmVhdGVQb2xpY3koXCJ2dWVcIiwge1xuICAgICAgY3JlYXRlSFRNTDogKHZhbCkgPT4gdmFsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB3YXJuKGBFcnJvciBjcmVhdGluZyB0cnVzdGVkIHR5cGVzIHBvbGljeTogJHtlfWApO1xuICB9XG59XG5jb25zdCB1bnNhZmVUb1RydXN0ZWRIVE1MID0gcG9saWN5ID8gKHZhbCkgPT4gcG9saWN5LmNyZWF0ZUhUTUwodmFsKSA6ICh2YWwpID0+IHZhbDtcbmNvbnN0IHN2Z05TID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xuY29uc3QgbWF0aG1sTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtcbmNvbnN0IGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiA/IGRvY3VtZW50IDogbnVsbDtcbmNvbnN0IHRlbXBsYXRlQ29udGFpbmVyID0gZG9jICYmIC8qIEBfX1BVUkVfXyAqLyBkb2MuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuY29uc3Qgbm9kZU9wcyA9IHtcbiAgaW5zZXJ0OiAoY2hpbGQsIHBhcmVudCwgYW5jaG9yKSA9PiB7XG4gICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgYW5jaG9yIHx8IG51bGwpO1xuICB9LFxuICByZW1vdmU6IChjaGlsZCkgPT4ge1xuICAgIGNvbnN0IHBhcmVudCA9IGNoaWxkLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZUVsZW1lbnQ6ICh0YWcsIG5hbWVzcGFjZSwgaXMsIHByb3BzKSA9PiB7XG4gICAgY29uc3QgZWwgPSBuYW1lc3BhY2UgPT09IFwic3ZnXCIgPyBkb2MuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCB0YWcpIDogbmFtZXNwYWNlID09PSBcIm1hdGhtbFwiID8gZG9jLmNyZWF0ZUVsZW1lbnROUyhtYXRobWxOUywgdGFnKSA6IGlzID8gZG9jLmNyZWF0ZUVsZW1lbnQodGFnLCB7IGlzIH0pIDogZG9jLmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICBpZiAodGFnID09PSBcInNlbGVjdFwiICYmIHByb3BzICYmIHByb3BzLm11bHRpcGxlICE9IG51bGwpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShcIm11bHRpcGxlXCIsIHByb3BzLm11bHRpcGxlKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsO1xuICB9LFxuICBjcmVhdGVUZXh0OiAodGV4dCkgPT4gZG9jLmNyZWF0ZVRleHROb2RlKHRleHQpLFxuICBjcmVhdGVDb21tZW50OiAodGV4dCkgPT4gZG9jLmNyZWF0ZUNvbW1lbnQodGV4dCksXG4gIHNldFRleHQ6IChub2RlLCB0ZXh0KSA9PiB7XG4gICAgbm9kZS5ub2RlVmFsdWUgPSB0ZXh0O1xuICB9LFxuICBzZXRFbGVtZW50VGV4dDogKGVsLCB0ZXh0KSA9PiB7XG4gICAgZWwudGV4dENvbnRlbnQgPSB0ZXh0O1xuICB9LFxuICBwYXJlbnROb2RlOiAobm9kZSkgPT4gbm9kZS5wYXJlbnROb2RlLFxuICBuZXh0U2libGluZzogKG5vZGUpID0+IG5vZGUubmV4dFNpYmxpbmcsXG4gIHF1ZXJ5U2VsZWN0b3I6IChzZWxlY3RvcikgPT4gZG9jLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpLFxuICBzZXRTY29wZUlkKGVsLCBpZCkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShpZCwgXCJcIik7XG4gIH0sXG4gIC8vIF9fVU5TQUZFX19cbiAgLy8gUmVhc29uOiBpbm5lckhUTUwuXG4gIC8vIFN0YXRpYyBjb250ZW50IGhlcmUgY2FuIG9ubHkgY29tZSBmcm9tIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgLy8gQXMgbG9uZyBhcyB0aGUgdXNlciBvbmx5IHVzZXMgdHJ1c3RlZCB0ZW1wbGF0ZXMsIHRoaXMgaXMgc2FmZS5cbiAgaW5zZXJ0U3RhdGljQ29udGVudChjb250ZW50LCBwYXJlbnQsIGFuY2hvciwgbmFtZXNwYWNlLCBzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgYmVmb3JlID0gYW5jaG9yID8gYW5jaG9yLnByZXZpb3VzU2libGluZyA6IHBhcmVudC5sYXN0Q2hpbGQ7XG4gICAgaWYgKHN0YXJ0ICYmIChzdGFydCA9PT0gZW5kIHx8IHN0YXJ0Lm5leHRTaWJsaW5nKSkge1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShzdGFydC5jbG9uZU5vZGUodHJ1ZSksIGFuY2hvcik7XG4gICAgICAgIGlmIChzdGFydCA9PT0gZW5kIHx8ICEoc3RhcnQgPSBzdGFydC5uZXh0U2libGluZykpIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0ZW1wbGF0ZUNvbnRhaW5lci5pbm5lckhUTUwgPSB1bnNhZmVUb1RydXN0ZWRIVE1MKFxuICAgICAgICBuYW1lc3BhY2UgPT09IFwic3ZnXCIgPyBgPHN2Zz4ke2NvbnRlbnR9PC9zdmc+YCA6IG5hbWVzcGFjZSA9PT0gXCJtYXRobWxcIiA/IGA8bWF0aD4ke2NvbnRlbnR9PC9tYXRoPmAgOiBjb250ZW50XG4gICAgICApO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNvbnRhaW5lci5jb250ZW50O1xuICAgICAgaWYgKG5hbWVzcGFjZSA9PT0gXCJzdmdcIiB8fCBuYW1lc3BhY2UgPT09IFwibWF0aG1sXCIpIHtcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IHRlbXBsYXRlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlICh3cmFwcGVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICB0ZW1wbGF0ZS5hcHBlbmRDaGlsZCh3cmFwcGVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIHRlbXBsYXRlLnJlbW92ZUNoaWxkKHdyYXBwZXIpO1xuICAgICAgfVxuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZSh0ZW1wbGF0ZSwgYW5jaG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgIC8vIGZpcnN0XG4gICAgICBiZWZvcmUgPyBiZWZvcmUubmV4dFNpYmxpbmcgOiBwYXJlbnQuZmlyc3RDaGlsZCxcbiAgICAgIC8vIGxhc3RcbiAgICAgIGFuY2hvciA/IGFuY2hvci5wcmV2aW91c1NpYmxpbmcgOiBwYXJlbnQubGFzdENoaWxkXG4gICAgXTtcbiAgfVxufTtcblxuY29uc3QgVFJBTlNJVElPTiQxID0gXCJ0cmFuc2l0aW9uXCI7XG5jb25zdCBBTklNQVRJT04gPSBcImFuaW1hdGlvblwiO1xuY29uc3QgdnRjS2V5ID0gU3ltYm9sKFwiX3Z0Y1wiKTtcbmNvbnN0IERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBjc3M6IHtcbiAgICB0eXBlOiBCb29sZWFuLFxuICAgIGRlZmF1bHQ6IHRydWVcbiAgfSxcbiAgZHVyYXRpb246IFtTdHJpbmcsIE51bWJlciwgT2JqZWN0XSxcbiAgZW50ZXJGcm9tQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyRnJvbUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVGcm9tQ2xhc3M6IFN0cmluZyxcbiAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZ1xufTtcbmNvbnN0IFRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMgPSAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKFxuICB7fSxcbiAgQmFzZVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMsXG4gIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnNcbik7XG5jb25zdCBkZWNvcmF0ZSQxID0gKHQpID0+IHtcbiAgdC5kaXNwbGF5TmFtZSA9IFwiVHJhbnNpdGlvblwiO1xuICB0LnByb3BzID0gVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycztcbiAgcmV0dXJuIHQ7XG59O1xuY29uc3QgVHJhbnNpdGlvbiA9IC8qIEBfX1BVUkVfXyAqLyBkZWNvcmF0ZSQxKFxuICAocHJvcHMsIHsgc2xvdHMgfSkgPT4gaChCYXNlVHJhbnNpdGlvbiwgcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhwcm9wcyksIHNsb3RzKVxuKTtcbmNvbnN0IGNhbGxIb29rID0gKGhvb2ssIGFyZ3MgPSBbXSkgPT4ge1xuICBpZiAoaXNBcnJheShob29rKSkge1xuICAgIGhvb2suZm9yRWFjaCgoaDIpID0+IGgyKC4uLmFyZ3MpKTtcbiAgfSBlbHNlIGlmIChob29rKSB7XG4gICAgaG9vayguLi5hcmdzKTtcbiAgfVxufTtcbmNvbnN0IGhhc0V4cGxpY2l0Q2FsbGJhY2sgPSAoaG9vaykgPT4ge1xuICByZXR1cm4gaG9vayA/IGlzQXJyYXkoaG9vaykgPyBob29rLnNvbWUoKGgyKSA9PiBoMi5sZW5ndGggPiAxKSA6IGhvb2subGVuZ3RoID4gMSA6IGZhbHNlO1xufTtcbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uUHJvcHMocmF3UHJvcHMpIHtcbiAgY29uc3QgYmFzZVByb3BzID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIHJhd1Byb3BzKSB7XG4gICAgaWYgKCEoa2V5IGluIERPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMpKSB7XG4gICAgICBiYXNlUHJvcHNba2V5XSA9IHJhd1Byb3BzW2tleV07XG4gICAgfVxuICB9XG4gIGlmIChyYXdQcm9wcy5jc3MgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGJhc2VQcm9wcztcbiAgfVxuICBjb25zdCB7XG4gICAgbmFtZSA9IFwidlwiLFxuICAgIHR5cGUsXG4gICAgZHVyYXRpb24sXG4gICAgZW50ZXJGcm9tQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci1mcm9tYCxcbiAgICBlbnRlckFjdGl2ZUNsYXNzID0gYCR7bmFtZX0tZW50ZXItYWN0aXZlYCxcbiAgICBlbnRlclRvQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci10b2AsXG4gICAgYXBwZWFyRnJvbUNsYXNzID0gZW50ZXJGcm9tQ2xhc3MsXG4gICAgYXBwZWFyQWN0aXZlQ2xhc3MgPSBlbnRlckFjdGl2ZUNsYXNzLFxuICAgIGFwcGVhclRvQ2xhc3MgPSBlbnRlclRvQ2xhc3MsXG4gICAgbGVhdmVGcm9tQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS1mcm9tYCxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzID0gYCR7bmFtZX0tbGVhdmUtYWN0aXZlYCxcbiAgICBsZWF2ZVRvQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS10b2BcbiAgfSA9IHJhd1Byb3BzO1xuICBjb25zdCBkdXJhdGlvbnMgPSBub3JtYWxpemVEdXJhdGlvbihkdXJhdGlvbik7XG4gIGNvbnN0IGVudGVyRHVyYXRpb24gPSBkdXJhdGlvbnMgJiYgZHVyYXRpb25zWzBdO1xuICBjb25zdCBsZWF2ZUR1cmF0aW9uID0gZHVyYXRpb25zICYmIGR1cmF0aW9uc1sxXTtcbiAgY29uc3Qge1xuICAgIG9uQmVmb3JlRW50ZXIsXG4gICAgb25FbnRlcixcbiAgICBvbkVudGVyQ2FuY2VsbGVkLFxuICAgIG9uTGVhdmUsXG4gICAgb25MZWF2ZUNhbmNlbGxlZCxcbiAgICBvbkJlZm9yZUFwcGVhciA9IG9uQmVmb3JlRW50ZXIsXG4gICAgb25BcHBlYXIgPSBvbkVudGVyLFxuICAgIG9uQXBwZWFyQ2FuY2VsbGVkID0gb25FbnRlckNhbmNlbGxlZFxuICB9ID0gYmFzZVByb3BzO1xuICBjb25zdCBmaW5pc2hFbnRlciA9IChlbCwgaXNBcHBlYXIsIGRvbmUsIGlzQ2FuY2VsbGVkKSA9PiB7XG4gICAgZWwuX2VudGVyQ2FuY2VsbGVkID0gaXNDYW5jZWxsZWQ7XG4gICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhclRvQ2xhc3MgOiBlbnRlclRvQ2xhc3MpO1xuICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJBY3RpdmVDbGFzcyA6IGVudGVyQWN0aXZlQ2xhc3MpO1xuICAgIGRvbmUgJiYgZG9uZSgpO1xuICB9O1xuICBjb25zdCBmaW5pc2hMZWF2ZSA9IChlbCwgZG9uZSkgPT4ge1xuICAgIGVsLl9pc0xlYXZpbmcgPSBmYWxzZTtcbiAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcbiAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICBkb25lICYmIGRvbmUoKTtcbiAgfTtcbiAgY29uc3QgbWFrZUVudGVySG9vayA9IChpc0FwcGVhcikgPT4ge1xuICAgIHJldHVybiAoZWwsIGRvbmUpID0+IHtcbiAgICAgIGNvbnN0IGhvb2sgPSBpc0FwcGVhciA/IG9uQXBwZWFyIDogb25FbnRlcjtcbiAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hFbnRlcihlbCwgaXNBcHBlYXIsIGRvbmUpO1xuICAgICAgY2FsbEhvb2soaG9vaywgW2VsLCByZXNvbHZlXSk7XG4gICAgICBuZXh0RnJhbWUoKCkgPT4ge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyRnJvbUNsYXNzIDogZW50ZXJGcm9tQ2xhc3MpO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcyk7XG4gICAgICAgIGlmICghaGFzRXhwbGljaXRDYWxsYmFjayhob29rKSkge1xuICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgZW50ZXJEdXJhdGlvbiwgcmVzb2x2ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG4gIHJldHVybiBleHRlbmQoYmFzZVByb3BzLCB7XG4gICAgb25CZWZvcmVFbnRlcihlbCkge1xuICAgICAgY2FsbEhvb2sob25CZWZvcmVFbnRlciwgW2VsXSk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGVudGVyRnJvbUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgZW50ZXJBY3RpdmVDbGFzcyk7XG4gICAgfSxcbiAgICBvbkJlZm9yZUFwcGVhcihlbCkge1xuICAgICAgY2FsbEhvb2sob25CZWZvcmVBcHBlYXIsIFtlbF0pO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJGcm9tQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJBY3RpdmVDbGFzcyk7XG4gICAgfSxcbiAgICBvbkVudGVyOiBtYWtlRW50ZXJIb29rKGZhbHNlKSxcbiAgICBvbkFwcGVhcjogbWFrZUVudGVySG9vayh0cnVlKSxcbiAgICBvbkxlYXZlKGVsLCBkb25lKSB7XG4gICAgICBlbC5faXNMZWF2aW5nID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hMZWF2ZShlbCwgZG9uZSk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlRnJvbUNsYXNzKTtcbiAgICAgIGlmICghZWwuX2VudGVyQ2FuY2VsbGVkKSB7XG4gICAgICAgIGZvcmNlUmVmbG93KCk7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgICAgICBmb3JjZVJlZmxvdygpO1xuICAgICAgfVxuICAgICAgbmV4dEZyYW1lKCgpID0+IHtcbiAgICAgICAgaWYgKCFlbC5faXNMZWF2aW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgIGlmICghaGFzRXhwbGljaXRDYWxsYmFjayhvbkxlYXZlKSkge1xuICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgbGVhdmVEdXJhdGlvbiwgcmVzb2x2ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY2FsbEhvb2sob25MZWF2ZSwgW2VsLCByZXNvbHZlXSk7XG4gICAgfSxcbiAgICBvbkVudGVyQ2FuY2VsbGVkKGVsKSB7XG4gICAgICBmaW5pc2hFbnRlcihlbCwgZmFsc2UsIHZvaWQgMCwgdHJ1ZSk7XG4gICAgICBjYWxsSG9vayhvbkVudGVyQ2FuY2VsbGVkLCBbZWxdKTtcbiAgICB9LFxuICAgIG9uQXBwZWFyQ2FuY2VsbGVkKGVsKSB7XG4gICAgICBmaW5pc2hFbnRlcihlbCwgdHJ1ZSwgdm9pZCAwLCB0cnVlKTtcbiAgICAgIGNhbGxIb29rKG9uQXBwZWFyQ2FuY2VsbGVkLCBbZWxdKTtcbiAgICB9LFxuICAgIG9uTGVhdmVDYW5jZWxsZWQoZWwpIHtcbiAgICAgIGZpbmlzaExlYXZlKGVsKTtcbiAgICAgIGNhbGxIb29rKG9uTGVhdmVDYW5jZWxsZWQsIFtlbF0pO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVEdXJhdGlvbihkdXJhdGlvbikge1xuICBpZiAoZHVyYXRpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGR1cmF0aW9uKSkge1xuICAgIHJldHVybiBbTnVtYmVyT2YoZHVyYXRpb24uZW50ZXIpLCBOdW1iZXJPZihkdXJhdGlvbi5sZWF2ZSldO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG4gPSBOdW1iZXJPZihkdXJhdGlvbik7XG4gICAgcmV0dXJuIFtuLCBuXTtcbiAgfVxufVxuZnVuY3Rpb24gTnVtYmVyT2YodmFsKSB7XG4gIGNvbnN0IHJlcyA9IHRvTnVtYmVyKHZhbCk7XG4gIHtcbiAgICBhc3NlcnROdW1iZXIocmVzLCBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBkdXJhdGlvblwiKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBjbHMpIHtcbiAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaCgoYykgPT4gYyAmJiBlbC5jbGFzc0xpc3QuYWRkKGMpKTtcbiAgKGVsW3Z0Y0tleV0gfHwgKGVsW3Z0Y0tleV0gPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpKSkuYWRkKGNscyk7XG59XG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGNscykge1xuICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKChjKSA9PiBjICYmIGVsLmNsYXNzTGlzdC5yZW1vdmUoYykpO1xuICBjb25zdCBfdnRjID0gZWxbdnRjS2V5XTtcbiAgaWYgKF92dGMpIHtcbiAgICBfdnRjLmRlbGV0ZShjbHMpO1xuICAgIGlmICghX3Z0Yy5zaXplKSB7XG4gICAgICBlbFt2dGNLZXldID0gdm9pZCAwO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbmV4dEZyYW1lKGNiKSB7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKTtcbiAgfSk7XG59XG5sZXQgZW5kSWQgPSAwO1xuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzKGVsLCBleHBlY3RlZFR5cGUsIGV4cGxpY2l0VGltZW91dCwgcmVzb2x2ZSkge1xuICBjb25zdCBpZCA9IGVsLl9lbmRJZCA9ICsrZW5kSWQ7XG4gIGNvbnN0IHJlc29sdmVJZk5vdFN0YWxlID0gKCkgPT4ge1xuICAgIGlmIChpZCA9PT0gZWwuX2VuZElkKSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfVxuICB9O1xuICBpZiAoZXhwbGljaXRUaW1lb3V0ICE9IG51bGwpIHtcbiAgICByZXR1cm4gc2V0VGltZW91dChyZXNvbHZlSWZOb3RTdGFsZSwgZXhwbGljaXRUaW1lb3V0KTtcbiAgfVxuICBjb25zdCB7IHR5cGUsIHRpbWVvdXQsIHByb3BDb3VudCB9ID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIGlmICghdHlwZSkge1xuICAgIHJldHVybiByZXNvbHZlKCk7XG4gIH1cbiAgY29uc3QgZW5kRXZlbnQgPSB0eXBlICsgXCJlbmRcIjtcbiAgbGV0IGVuZGVkID0gMDtcbiAgY29uc3QgZW5kID0gKCkgPT4ge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIG9uRW5kKTtcbiAgICByZXNvbHZlSWZOb3RTdGFsZSgpO1xuICB9O1xuICBjb25zdCBvbkVuZCA9IChlKSA9PiB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCAmJiArK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9O1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgIGVuZCgpO1xuICAgIH1cbiAgfSwgdGltZW91dCArIDEpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKGVuZEV2ZW50LCBvbkVuZCk7XG59XG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgY29uc3QgZ2V0U3R5bGVQcm9wZXJ0aWVzID0gKGtleSkgPT4gKHN0eWxlc1trZXldIHx8IFwiXCIpLnNwbGl0KFwiLCBcIik7XG4gIGNvbnN0IHRyYW5zaXRpb25EZWxheXMgPSBnZXRTdHlsZVByb3BlcnRpZXMoYCR7VFJBTlNJVElPTiQxfURlbGF5YCk7XG4gIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbnMgPSBnZXRTdHlsZVByb3BlcnRpZXMoYCR7VFJBTlNJVElPTiQxfUR1cmF0aW9uYCk7XG4gIGNvbnN0IHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgY29uc3QgYW5pbWF0aW9uRGVsYXlzID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKGAke0FOSU1BVElPTn1EZWxheWApO1xuICBjb25zdCBhbmltYXRpb25EdXJhdGlvbnMgPSBnZXRTdHlsZVByb3BlcnRpZXMoYCR7QU5JTUFUSU9OfUR1cmF0aW9uYCk7XG4gIGNvbnN0IGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcbiAgbGV0IHR5cGUgPSBudWxsO1xuICBsZXQgdGltZW91dCA9IDA7XG4gIGxldCBwcm9wQ291bnQgPSAwO1xuICBpZiAoZXhwZWN0ZWRUeXBlID09PSBUUkFOU0lUSU9OJDEpIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTiQxO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMCA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dCA/IFRSQU5TSVRJT04kMSA6IEFOSU1BVElPTiA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZSA/IHR5cGUgPT09IFRSQU5TSVRJT04kMSA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aCA6IDA7XG4gIH1cbiAgY29uc3QgaGFzVHJhbnNmb3JtID0gdHlwZSA9PT0gVFJBTlNJVElPTiQxICYmIC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS8udGVzdChcbiAgICBnZXRTdHlsZVByb3BlcnRpZXMoYCR7VFJBTlNJVElPTiQxfVByb3BlcnR5YCkudG9TdHJpbmcoKVxuICApO1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgdGltZW91dCxcbiAgICBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtXG4gIH07XG59XG5mdW5jdGlvbiBnZXRUaW1lb3V0KGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuICByZXR1cm4gTWF0aC5tYXgoLi4uZHVyYXRpb25zLm1hcCgoZCwgaSkgPT4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKSkpO1xufVxuZnVuY3Rpb24gdG9NcyhzKSB7XG4gIGlmIChzID09PSBcImF1dG9cIikgcmV0dXJuIDA7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZShcIixcIiwgXCIuXCIpKSAqIDFlMztcbn1cbmZ1bmN0aW9uIGZvcmNlUmVmbG93KCkge1xuICByZXR1cm4gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIHBhdGNoQ2xhc3MoZWwsIHZhbHVlLCBpc1NWRykge1xuICBjb25zdCB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsW3Z0Y0tleV07XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHZhbHVlID0gKHZhbHVlID8gW3ZhbHVlLCAuLi50cmFuc2l0aW9uQ2xhc3Nlc10gOiBbLi4udHJhbnNpdGlvbkNsYXNzZXNdKS5qb2luKFwiIFwiKTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShcImNsYXNzXCIpO1xuICB9IGVsc2UgaWYgKGlzU1ZHKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGVsLmNsYXNzTmFtZSA9IHZhbHVlO1xuICB9XG59XG5cbmNvbnN0IHZTaG93T3JpZ2luYWxEaXNwbGF5ID0gU3ltYm9sKFwiX3ZvZFwiKTtcbmNvbnN0IHZTaG93SGlkZGVuID0gU3ltYm9sKFwiX3ZzaFwiKTtcbmNvbnN0IHZTaG93ID0ge1xuICBiZWZvcmVNb3VudChlbCwgeyB2YWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xuICAgIGVsW3ZTaG93T3JpZ2luYWxEaXNwbGF5XSA9IGVsLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcbiAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XG4gICAgfVxuICB9LFxuICBtb3VudGVkKGVsLCB7IHZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XG4gICAgaWYgKHRyYW5zaXRpb24gJiYgdmFsdWUpIHtcbiAgICAgIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xuICAgIH1cbiAgfSxcbiAgdXBkYXRlZChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHJldHVybjtcbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgICAgICBzZXREaXNwbGF5KGVsLCB0cnVlKTtcbiAgICAgICAgdHJhbnNpdGlvbi5lbnRlcihlbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2l0aW9uLmxlYXZlKGVsLCAoKSA9PiB7XG4gICAgICAgICAgc2V0RGlzcGxheShlbCwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2V0RGlzcGxheShlbCwgdmFsdWUpO1xuICAgIH1cbiAgfSxcbiAgYmVmb3JlVW5tb3VudChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgc2V0RGlzcGxheShlbCwgdmFsdWUpO1xuICB9XG59O1xue1xuICB2U2hvdy5uYW1lID0gXCJzaG93XCI7XG59XG5mdW5jdGlvbiBzZXREaXNwbGF5KGVsLCB2YWx1ZSkge1xuICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbFt2U2hvd09yaWdpbmFsRGlzcGxheV0gOiBcIm5vbmVcIjtcbiAgZWxbdlNob3dIaWRkZW5dID0gIXZhbHVlO1xufVxuZnVuY3Rpb24gaW5pdFZTaG93Rm9yU1NSKCkge1xuICB2U2hvdy5nZXRTU1JQcm9wcyA9ICh7IHZhbHVlIH0pID0+IHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4geyBzdHlsZTogeyBkaXNwbGF5OiBcIm5vbmVcIiB9IH07XG4gICAgfVxuICB9O1xufVxuXG5jb25zdCBDU1NfVkFSX1RFWFQgPSBTeW1ib2woXCJDU1NfVkFSX1RFWFRcIiApO1xuZnVuY3Rpb24gdXNlQ3NzVmFycyhnZXR0ZXIpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgaWYgKCFpbnN0YW5jZSkge1xuICAgIHdhcm4oYHVzZUNzc1ZhcnMgaXMgY2FsbGVkIHdpdGhvdXQgY3VycmVudCBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlLmApO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB1cGRhdGVUZWxlcG9ydHMgPSBpbnN0YW5jZS51dCA9ICh2YXJzID0gZ2V0dGVyKGluc3RhbmNlLnByb3h5KSkgPT4ge1xuICAgIEFycmF5LmZyb20oXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGBbZGF0YS12LW93bmVyPVwiJHtpbnN0YW5jZS51aWR9XCJdYClcbiAgICApLmZvckVhY2goKG5vZGUpID0+IHNldFZhcnNPbk5vZGUobm9kZSwgdmFycykpO1xuICB9O1xuICB7XG4gICAgaW5zdGFuY2UuZ2V0Q3NzVmFycyA9ICgpID0+IGdldHRlcihpbnN0YW5jZS5wcm94eSk7XG4gIH1cbiAgY29uc3Qgc2V0VmFycyA9ICgpID0+IHtcbiAgICBjb25zdCB2YXJzID0gZ2V0dGVyKGluc3RhbmNlLnByb3h5KTtcbiAgICBpZiAoaW5zdGFuY2UuY2UpIHtcbiAgICAgIHNldFZhcnNPbk5vZGUoaW5zdGFuY2UuY2UsIHZhcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRWYXJzT25WTm9kZShpbnN0YW5jZS5zdWJUcmVlLCB2YXJzKTtcbiAgICB9XG4gICAgdXBkYXRlVGVsZXBvcnRzKHZhcnMpO1xuICB9O1xuICBvbkJlZm9yZVVwZGF0ZSgoKSA9PiB7XG4gICAgcXVldWVQb3N0Rmx1c2hDYihzZXRWYXJzKTtcbiAgfSk7XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgd2F0Y2goc2V0VmFycywgTk9PUCwgeyBmbHVzaDogXCJwb3N0XCIgfSk7XG4gICAgY29uc3Qgb2IgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihzZXRWYXJzKTtcbiAgICBvYi5vYnNlcnZlKGluc3RhbmNlLnN1YlRyZWUuZWwucGFyZW50Tm9kZSwgeyBjaGlsZExpc3Q6IHRydWUgfSk7XG4gICAgb25Vbm1vdW50ZWQoKCkgPT4gb2IuZGlzY29ubmVjdCgpKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBzZXRWYXJzT25WTm9kZSh2bm9kZSwgdmFycykge1xuICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgY29uc3Qgc3VzcGVuc2UgPSB2bm9kZS5zdXNwZW5zZTtcbiAgICB2bm9kZSA9IHN1c3BlbnNlLmFjdGl2ZUJyYW5jaDtcbiAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJiAhc3VzcGVuc2UuaXNIeWRyYXRpbmcpIHtcbiAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCgoKSA9PiB7XG4gICAgICAgIHNldFZhcnNPblZOb2RlKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCwgdmFycyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKHZub2RlLmNvbXBvbmVudCkge1xuICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50LnN1YlRyZWU7XG4gIH1cbiAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEgJiYgdm5vZGUuZWwpIHtcbiAgICBzZXRWYXJzT25Ob2RlKHZub2RlLmVsLCB2YXJzKTtcbiAgfSBlbHNlIGlmICh2bm9kZS50eXBlID09PSBGcmFnbWVudCkge1xuICAgIHZub2RlLmNoaWxkcmVuLmZvckVhY2goKGMpID0+IHNldFZhcnNPblZOb2RlKGMsIHZhcnMpKTtcbiAgfSBlbHNlIGlmICh2bm9kZS50eXBlID09PSBTdGF0aWMpIHtcbiAgICBsZXQgeyBlbCwgYW5jaG9yIH0gPSB2bm9kZTtcbiAgICB3aGlsZSAoZWwpIHtcbiAgICAgIHNldFZhcnNPbk5vZGUoZWwsIHZhcnMpO1xuICAgICAgaWYgKGVsID09PSBhbmNob3IpIGJyZWFrO1xuICAgICAgZWwgPSBlbC5uZXh0U2libGluZztcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHNldFZhcnNPbk5vZGUoZWwsIHZhcnMpIHtcbiAgaWYgKGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBlbC5zdHlsZTtcbiAgICBsZXQgY3NzVGV4dCA9IFwiXCI7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdmFycykge1xuICAgICAgc3R5bGUuc2V0UHJvcGVydHkoYC0tJHtrZXl9YCwgdmFyc1trZXldKTtcbiAgICAgIGNzc1RleHQgKz0gYC0tJHtrZXl9OiAke3ZhcnNba2V5XX07YDtcbiAgICB9XG4gICAgc3R5bGVbQ1NTX1ZBUl9URVhUXSA9IGNzc1RleHQ7XG4gIH1cbn1cblxuY29uc3QgZGlzcGxheVJFID0gLyhefDspXFxzKmRpc3BsYXlcXHMqOi87XG5mdW5jdGlvbiBwYXRjaFN0eWxlKGVsLCBwcmV2LCBuZXh0KSB7XG4gIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XG4gIGNvbnN0IGlzQ3NzU3RyaW5nID0gaXNTdHJpbmcobmV4dCk7XG4gIGxldCBoYXNDb250cm9sbGVkRGlzcGxheSA9IGZhbHNlO1xuICBpZiAobmV4dCAmJiAhaXNDc3NTdHJpbmcpIHtcbiAgICBpZiAocHJldikge1xuICAgICAgaWYgKCFpc1N0cmluZyhwcmV2KSkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcmV2KSB7XG4gICAgICAgICAgaWYgKG5leHRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBzZXRTdHlsZShzdHlsZSwga2V5LCBcIlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3QgcHJldlN0eWxlIG9mIHByZXYuc3BsaXQoXCI7XCIpKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gcHJldlN0eWxlLnNsaWNlKDAsIHByZXZTdHlsZS5pbmRleE9mKFwiOlwiKSkudHJpbSgpO1xuICAgICAgICAgIGlmIChuZXh0W2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0U3R5bGUoc3R5bGUsIGtleSwgXCJcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChrZXkgPT09IFwiZGlzcGxheVwiKSB7XG4gICAgICAgIGhhc0NvbnRyb2xsZWREaXNwbGF5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksIG5leHRba2V5XSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0Nzc1N0cmluZykge1xuICAgICAgaWYgKHByZXYgIT09IG5leHQpIHtcbiAgICAgICAgY29uc3QgY3NzVmFyVGV4dCA9IHN0eWxlW0NTU19WQVJfVEVYVF07XG4gICAgICAgIGlmIChjc3NWYXJUZXh0KSB7XG4gICAgICAgICAgbmV4dCArPSBcIjtcIiArIGNzc1ZhclRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgc3R5bGUuY3NzVGV4dCA9IG5leHQ7XG4gICAgICAgIGhhc0NvbnRyb2xsZWREaXNwbGF5ID0gZGlzcGxheVJFLnRlc3QobmV4dCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcmV2KSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZTaG93T3JpZ2luYWxEaXNwbGF5IGluIGVsKSB7XG4gICAgZWxbdlNob3dPcmlnaW5hbERpc3BsYXldID0gaGFzQ29udHJvbGxlZERpc3BsYXkgPyBzdHlsZS5kaXNwbGF5IDogXCJcIjtcbiAgICBpZiAoZWxbdlNob3dIaWRkZW5dKSB7XG4gICAgICBzdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgfVxuICB9XG59XG5jb25zdCBzZW1pY29sb25SRSA9IC9bXlxcXFxdO1xccyokLztcbmNvbnN0IGltcG9ydGFudFJFID0gL1xccyohaW1wb3J0YW50JC87XG5mdW5jdGlvbiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdmFsKSB7XG4gIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICB2YWwuZm9yRWFjaCgodikgPT4gc2V0U3R5bGUoc3R5bGUsIG5hbWUsIHYpKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsID09IG51bGwpIHZhbCA9IFwiXCI7XG4gICAge1xuICAgICAgaWYgKHNlbWljb2xvblJFLnRlc3QodmFsKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGBVbmV4cGVjdGVkIHNlbWljb2xvbiBhdCB0aGUgZW5kIG9mICcke25hbWV9JyBzdHlsZSB2YWx1ZTogJyR7dmFsfSdgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoXCItLVwiKSkge1xuICAgICAgc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcHJlZml4ZWQgPSBhdXRvUHJlZml4KHN0eWxlLCBuYW1lKTtcbiAgICAgIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoXG4gICAgICAgICAgaHlwaGVuYXRlKHByZWZpeGVkKSxcbiAgICAgICAgICB2YWwucmVwbGFjZShpbXBvcnRhbnRSRSwgXCJcIiksXG4gICAgICAgICAgXCJpbXBvcnRhbnRcIlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3R5bGVbcHJlZml4ZWRdID0gdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuY29uc3QgcHJlZml4ZXMgPSBbXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiXTtcbmNvbnN0IHByZWZpeENhY2hlID0ge307XG5mdW5jdGlvbiBhdXRvUHJlZml4KHN0eWxlLCByYXdOYW1lKSB7XG4gIGNvbnN0IGNhY2hlZCA9IHByZWZpeENhY2hlW3Jhd05hbWVdO1xuICBpZiAoY2FjaGVkKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuICBsZXQgbmFtZSA9IGNhbWVsaXplKHJhd05hbWUpO1xuICBpZiAobmFtZSAhPT0gXCJmaWx0ZXJcIiAmJiBuYW1lIGluIHN0eWxlKSB7XG4gICAgcmV0dXJuIHByZWZpeENhY2hlW3Jhd05hbWVdID0gbmFtZTtcbiAgfVxuICBuYW1lID0gY2FwaXRhbGl6ZShuYW1lKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByZWZpeGVkID0gcHJlZml4ZXNbaV0gKyBuYW1lO1xuICAgIGlmIChwcmVmaXhlZCBpbiBzdHlsZSkge1xuICAgICAgcmV0dXJuIHByZWZpeENhY2hlW3Jhd05hbWVdID0gcHJlZml4ZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByYXdOYW1lO1xufVxuXG5jb25zdCB4bGlua05TID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI7XG5mdW5jdGlvbiBwYXRjaEF0dHIoZWwsIGtleSwgdmFsdWUsIGlzU1ZHLCBpbnN0YW5jZSwgaXNCb29sZWFuID0gaXNTcGVjaWFsQm9vbGVhbkF0dHIoa2V5KSkge1xuICBpZiAoaXNTVkcgJiYga2V5LnN0YXJ0c1dpdGgoXCJ4bGluazpcIikpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywga2V5LnNsaWNlKDYsIGtleS5sZW5ndGgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlTlMoeGxpbmtOUywga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IGlzQm9vbGVhbiAmJiAhaW5jbHVkZUJvb2xlYW5BdHRyKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShcbiAgICAgICAga2V5LFxuICAgICAgICBpc0Jvb2xlYW4gPyBcIlwiIDogaXNTeW1ib2wodmFsdWUpID8gU3RyaW5nKHZhbHVlKSA6IHZhbHVlXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwYXRjaERPTVByb3AoZWwsIGtleSwgdmFsdWUsIHBhcmVudENvbXBvbmVudCwgYXR0ck5hbWUpIHtcbiAgaWYgKGtleSA9PT0gXCJpbm5lckhUTUxcIiB8fCBrZXkgPT09IFwidGV4dENvbnRlbnRcIikge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBlbFtrZXldID0ga2V5ID09PSBcImlubmVySFRNTFwiID8gdW5zYWZlVG9UcnVzdGVkSFRNTCh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHRhZyA9IGVsLnRhZ05hbWU7XG4gIGlmIChrZXkgPT09IFwidmFsdWVcIiAmJiB0YWcgIT09IFwiUFJPR1JFU1NcIiAmJiAvLyBjdXN0b20gZWxlbWVudHMgbWF5IHVzZSBfdmFsdWUgaW50ZXJuYWxseVxuICAhdGFnLmluY2x1ZGVzKFwiLVwiKSkge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGFnID09PSBcIk9QVElPTlwiID8gZWwuZ2V0QXR0cmlidXRlKFwidmFsdWVcIikgfHwgXCJcIiA6IGVsLnZhbHVlO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUgPT0gbnVsbCA/IChcbiAgICAgIC8vICMxMTY0NzogdmFsdWUgc2hvdWxkIGJlIHNldCBhcyBlbXB0eSBzdHJpbmcgZm9yIG51bGwgYW5kIHVuZGVmaW5lZCxcbiAgICAgIC8vIGJ1dCA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCI+IHNob3VsZCBiZSBzZXQgYXMgJ29uJy5cbiAgICAgIGVsLnR5cGUgPT09IFwiY2hlY2tib3hcIiA/IFwib25cIiA6IFwiXCJcbiAgICApIDogU3RyaW5nKHZhbHVlKTtcbiAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlIHx8ICEoXCJfdmFsdWVcIiBpbiBlbCkpIHtcbiAgICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9XG4gICAgZWwuX3ZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBuZWVkUmVtb3ZlID0gZmFsc2U7XG4gIGlmICh2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBlbFtrZXldO1xuICAgIGlmICh0eXBlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgdmFsdWUgPSBpbmNsdWRlQm9vbGVhbkF0dHIodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gbnVsbCAmJiB0eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICBuZWVkUmVtb3ZlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHZhbHVlID0gMDtcbiAgICAgIG5lZWRSZW1vdmUgPSB0cnVlO1xuICAgIH1cbiAgfVxuICB0cnkge1xuICAgIGVsW2tleV0gPSB2YWx1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICghbmVlZFJlbW92ZSkge1xuICAgICAgd2FybihcbiAgICAgICAgYEZhaWxlZCBzZXR0aW5nIHByb3AgXCIke2tleX1cIiBvbiA8JHt0YWcudG9Mb3dlckNhc2UoKX0+OiB2YWx1ZSAke3ZhbHVlfSBpcyBpbnZhbGlkLmAsXG4gICAgICAgIGVcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIG5lZWRSZW1vdmUgJiYgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lIHx8IGtleSk7XG59XG5cbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZWwsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5jb25zdCB2ZWlLZXkgPSBTeW1ib2woXCJfdmVpXCIpO1xuZnVuY3Rpb24gcGF0Y2hFdmVudChlbCwgcmF3TmFtZSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIGluc3RhbmNlID0gbnVsbCkge1xuICBjb25zdCBpbnZva2VycyA9IGVsW3ZlaUtleV0gfHwgKGVsW3ZlaUtleV0gPSB7fSk7XG4gIGNvbnN0IGV4aXN0aW5nSW52b2tlciA9IGludm9rZXJzW3Jhd05hbWVdO1xuICBpZiAobmV4dFZhbHVlICYmIGV4aXN0aW5nSW52b2tlcikge1xuICAgIGV4aXN0aW5nSW52b2tlci52YWx1ZSA9IHNhbml0aXplRXZlbnRWYWx1ZShuZXh0VmFsdWUsIHJhd05hbWUpIDtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBbbmFtZSwgb3B0aW9uc10gPSBwYXJzZU5hbWUocmF3TmFtZSk7XG4gICAgaWYgKG5leHRWYWx1ZSkge1xuICAgICAgY29uc3QgaW52b2tlciA9IGludm9rZXJzW3Jhd05hbWVdID0gY3JlYXRlSW52b2tlcihcbiAgICAgICAgc2FuaXRpemVFdmVudFZhbHVlKG5leHRWYWx1ZSwgcmF3TmFtZSkgLFxuICAgICAgICBpbnN0YW5jZVxuICAgICAgKTtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGludm9rZXIsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoZXhpc3RpbmdJbnZva2VyKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKGVsLCBuYW1lLCBleGlzdGluZ0ludm9rZXIsIG9wdGlvbnMpO1xuICAgICAgaW52b2tlcnNbcmF3TmFtZV0gPSB2b2lkIDA7XG4gICAgfVxuICB9XG59XG5jb25zdCBvcHRpb25zTW9kaWZpZXJSRSA9IC8oPzpPbmNlfFBhc3NpdmV8Q2FwdHVyZSkkLztcbmZ1bmN0aW9uIHBhcnNlTmFtZShuYW1lKSB7XG4gIGxldCBvcHRpb25zO1xuICBpZiAob3B0aW9uc01vZGlmaWVyUkUudGVzdChuYW1lKSkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgICBsZXQgbTtcbiAgICB3aGlsZSAobSA9IG5hbWUubWF0Y2gob3B0aW9uc01vZGlmaWVyUkUpKSB7XG4gICAgICBuYW1lID0gbmFtZS5zbGljZSgwLCBuYW1lLmxlbmd0aCAtIG1bMF0ubGVuZ3RoKTtcbiAgICAgIG9wdGlvbnNbbVswXS50b0xvd2VyQ2FzZSgpXSA9IHRydWU7XG4gICAgfVxuICB9XG4gIGNvbnN0IGV2ZW50ID0gbmFtZVsyXSA9PT0gXCI6XCIgPyBuYW1lLnNsaWNlKDMpIDogaHlwaGVuYXRlKG5hbWUuc2xpY2UoMikpO1xuICByZXR1cm4gW2V2ZW50LCBvcHRpb25zXTtcbn1cbmxldCBjYWNoZWROb3cgPSAwO1xuY29uc3QgcCA9IC8qIEBfX1BVUkVfXyAqLyBQcm9taXNlLnJlc29sdmUoKTtcbmNvbnN0IGdldE5vdyA9ICgpID0+IGNhY2hlZE5vdyB8fCAocC50aGVuKCgpID0+IGNhY2hlZE5vdyA9IDApLCBjYWNoZWROb3cgPSBEYXRlLm5vdygpKTtcbmZ1bmN0aW9uIGNyZWF0ZUludm9rZXIoaW5pdGlhbFZhbHVlLCBpbnN0YW5jZSkge1xuICBjb25zdCBpbnZva2VyID0gKGUpID0+IHtcbiAgICBpZiAoIWUuX3Z0cykge1xuICAgICAgZS5fdnRzID0gRGF0ZS5ub3coKTtcbiAgICB9IGVsc2UgaWYgKGUuX3Z0cyA8PSBpbnZva2VyLmF0dGFjaGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKFxuICAgICAgcGF0Y2hTdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oZSwgaW52b2tlci52YWx1ZSksXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDUsXG4gICAgICBbZV1cbiAgICApO1xuICB9O1xuICBpbnZva2VyLnZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICBpbnZva2VyLmF0dGFjaGVkID0gZ2V0Tm93KCk7XG4gIHJldHVybiBpbnZva2VyO1xufVxuZnVuY3Rpb24gc2FuaXRpemVFdmVudFZhbHVlKHZhbHVlLCBwcm9wTmFtZSkge1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkgfHwgaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgd2FybihcbiAgICBgV3JvbmcgdHlwZSBwYXNzZWQgYXMgZXZlbnQgaGFuZGxlciB0byAke3Byb3BOYW1lfSAtIGRpZCB5b3UgZm9yZ2V0IEAgb3IgOiBpbiBmcm9udCBvZiB5b3VyIHByb3A/XG5FeHBlY3RlZCBmdW5jdGlvbiBvciBhcnJheSBvZiBmdW5jdGlvbnMsIHJlY2VpdmVkIHR5cGUgJHt0eXBlb2YgdmFsdWV9LmBcbiAgKTtcbiAgcmV0dXJuIE5PT1A7XG59XG5mdW5jdGlvbiBwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbihlLCB2YWx1ZSkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBjb25zdCBvcmlnaW5hbFN0b3AgPSBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtcbiAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9ICgpID0+IHtcbiAgICAgIG9yaWdpbmFsU3RvcC5jYWxsKGUpO1xuICAgICAgZS5fc3RvcHBlZCA9IHRydWU7XG4gICAgfTtcbiAgICByZXR1cm4gdmFsdWUubWFwKFxuICAgICAgKGZuKSA9PiAoZTIpID0+ICFlMi5fc3RvcHBlZCAmJiBmbiAmJiBmbihlMilcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5jb25zdCBpc05hdGl2ZU9uID0gKGtleSkgPT4ga2V5LmNoYXJDb2RlQXQoMCkgPT09IDExMSAmJiBrZXkuY2hhckNvZGVBdCgxKSA9PT0gMTEwICYmIC8vIGxvd2VyY2FzZSBsZXR0ZXJcbmtleS5jaGFyQ29kZUF0KDIpID4gOTYgJiYga2V5LmNoYXJDb2RlQXQoMikgPCAxMjM7XG5jb25zdCBwYXRjaFByb3AgPSAoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIG5hbWVzcGFjZSwgcGFyZW50Q29tcG9uZW50KSA9PiB7XG4gIGNvbnN0IGlzU1ZHID0gbmFtZXNwYWNlID09PSBcInN2Z1wiO1xuICBpZiAoa2V5ID09PSBcImNsYXNzXCIpIHtcbiAgICBwYXRjaENsYXNzKGVsLCBuZXh0VmFsdWUsIGlzU1ZHKTtcbiAgfSBlbHNlIGlmIChrZXkgPT09IFwic3R5bGVcIikge1xuICAgIHBhdGNoU3R5bGUoZWwsIHByZXZWYWx1ZSwgbmV4dFZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc09uKGtleSkpIHtcbiAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpKSB7XG4gICAgICBwYXRjaEV2ZW50KGVsLCBrZXksIHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBwYXJlbnRDb21wb25lbnQpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChrZXlbMF0gPT09IFwiLlwiID8gKGtleSA9IGtleS5zbGljZSgxKSwgdHJ1ZSkgOiBrZXlbMF0gPT09IFwiXlwiID8gKGtleSA9IGtleS5zbGljZSgxKSwgZmFsc2UpIDogc2hvdWxkU2V0QXNQcm9wKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpKSB7XG4gICAgcGF0Y2hET01Qcm9wKGVsLCBrZXksIG5leHRWYWx1ZSk7XG4gICAgaWYgKCFlbC50YWdOYW1lLmluY2x1ZGVzKFwiLVwiKSAmJiAoa2V5ID09PSBcInZhbHVlXCIgfHwga2V5ID09PSBcImNoZWNrZWRcIiB8fCBrZXkgPT09IFwic2VsZWN0ZWRcIikpIHtcbiAgICAgIHBhdGNoQXR0cihlbCwga2V5LCBuZXh0VmFsdWUsIGlzU1ZHLCBwYXJlbnRDb21wb25lbnQsIGtleSAhPT0gXCJ2YWx1ZVwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoXG4gICAgLy8gIzExMDgxIGZvcmNlIHNldCBwcm9wcyBmb3IgcG9zc2libGUgYXN5bmMgY3VzdG9tIGVsZW1lbnRcbiAgICBlbC5faXNWdWVDRSAmJiAoL1tBLVpdLy50ZXN0KGtleSkgfHwgIWlzU3RyaW5nKG5leHRWYWx1ZSkpXG4gICkge1xuICAgIHBhdGNoRE9NUHJvcChlbCwgY2FtZWxpemUoa2V5KSwgbmV4dFZhbHVlLCBwYXJlbnRDb21wb25lbnQsIGtleSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGtleSA9PT0gXCJ0cnVlLXZhbHVlXCIpIHtcbiAgICAgIGVsLl90cnVlVmFsdWUgPSBuZXh0VmFsdWU7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiZmFsc2UtdmFsdWVcIikge1xuICAgICAgZWwuX2ZhbHNlVmFsdWUgPSBuZXh0VmFsdWU7XG4gICAgfVxuICAgIHBhdGNoQXR0cihlbCwga2V5LCBuZXh0VmFsdWUsIGlzU1ZHKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHNob3VsZFNldEFzUHJvcChlbCwga2V5LCB2YWx1ZSwgaXNTVkcpIHtcbiAgaWYgKGlzU1ZHKSB7XG4gICAgaWYgKGtleSA9PT0gXCJpbm5lckhUTUxcIiB8fCBrZXkgPT09IFwidGV4dENvbnRlbnRcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChrZXkgaW4gZWwgJiYgaXNOYXRpdmVPbihrZXkpICYmIGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChrZXkgPT09IFwic3BlbGxjaGVja1wiIHx8IGtleSA9PT0gXCJkcmFnZ2FibGVcIiB8fCBrZXkgPT09IFwidHJhbnNsYXRlXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGtleSA9PT0gXCJmb3JtXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGtleSA9PT0gXCJsaXN0XCIgJiYgZWwudGFnTmFtZSA9PT0gXCJJTlBVVFwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChrZXkgPT09IFwidHlwZVwiICYmIGVsLnRhZ05hbWUgPT09IFwiVEVYVEFSRUFcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoa2V5ID09PSBcIndpZHRoXCIgfHwga2V5ID09PSBcImhlaWdodFwiKSB7XG4gICAgY29uc3QgdGFnID0gZWwudGFnTmFtZTtcbiAgICBpZiAodGFnID09PSBcIklNR1wiIHx8IHRhZyA9PT0gXCJWSURFT1wiIHx8IHRhZyA9PT0gXCJDQU5WQVNcIiB8fCB0YWcgPT09IFwiU09VUkNFXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzTmF0aXZlT24oa2V5KSAmJiBpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGtleSBpbiBlbDtcbn1cblxuY29uc3QgUkVNT1ZBTCA9IHt9O1xuLyohICNfX05PX1NJREVfRUZGRUNUU19fICovXG4vLyBAX19OT19TSURFX0VGRkVDVFNfX1xuZnVuY3Rpb24gZGVmaW5lQ3VzdG9tRWxlbWVudChvcHRpb25zLCBleHRyYU9wdGlvbnMsIF9jcmVhdGVBcHApIHtcbiAgY29uc3QgQ29tcCA9IGRlZmluZUNvbXBvbmVudChvcHRpb25zLCBleHRyYU9wdGlvbnMpO1xuICBpZiAoaXNQbGFpbk9iamVjdChDb21wKSkgZXh0ZW5kKENvbXAsIGV4dHJhT3B0aW9ucyk7XG4gIGNsYXNzIFZ1ZUN1c3RvbUVsZW1lbnQgZXh0ZW5kcyBWdWVFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihpbml0aWFsUHJvcHMpIHtcbiAgICAgIHN1cGVyKENvbXAsIGluaXRpYWxQcm9wcywgX2NyZWF0ZUFwcCk7XG4gICAgfVxuICB9XG4gIFZ1ZUN1c3RvbUVsZW1lbnQuZGVmID0gQ29tcDtcbiAgcmV0dXJuIFZ1ZUN1c3RvbUVsZW1lbnQ7XG59XG4vKiEgI19fTk9fU0lERV9FRkZFQ1RTX18gKi9cbmNvbnN0IGRlZmluZVNTUkN1c3RvbUVsZW1lbnQgPSAvKiBAX19OT19TSURFX0VGRkVDVFNfXyAqLyAob3B0aW9ucywgZXh0cmFPcHRpb25zKSA9PiB7XG4gIHJldHVybiAvKiBAX19QVVJFX18gKi8gZGVmaW5lQ3VzdG9tRWxlbWVudChvcHRpb25zLCBleHRyYU9wdGlvbnMsIGNyZWF0ZVNTUkFwcCk7XG59O1xuY29uc3QgQmFzZUNsYXNzID0gdHlwZW9mIEhUTUxFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiID8gSFRNTEVsZW1lbnQgOiBjbGFzcyB7XG59O1xuY2xhc3MgVnVlRWxlbWVudCBleHRlbmRzIEJhc2VDbGFzcyB7XG4gIGNvbnN0cnVjdG9yKF9kZWYsIF9wcm9wcyA9IHt9LCBfY3JlYXRlQXBwID0gY3JlYXRlQXBwKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9kZWYgPSBfZGVmO1xuICAgIHRoaXMuX3Byb3BzID0gX3Byb3BzO1xuICAgIHRoaXMuX2NyZWF0ZUFwcCA9IF9jcmVhdGVBcHA7XG4gICAgdGhpcy5faXNWdWVDRSA9IHRydWU7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuX2FwcCA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5fbm9uY2UgPSB0aGlzLl9kZWYubm9uY2U7XG4gICAgdGhpcy5fY29ubmVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVzb2x2ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9udW1iZXJQcm9wcyA9IG51bGw7XG4gICAgdGhpcy5fc3R5bGVDaGlsZHJlbiA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpO1xuICAgIHRoaXMuX29iID0gbnVsbDtcbiAgICBpZiAodGhpcy5zaGFkb3dSb290ICYmIF9jcmVhdGVBcHAgIT09IGNyZWF0ZUFwcCkge1xuICAgICAgdGhpcy5fcm9vdCA9IHRoaXMuc2hhZG93Um9vdDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuc2hhZG93Um9vdCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGBDdXN0b20gZWxlbWVudCBoYXMgcHJlLXJlbmRlcmVkIGRlY2xhcmF0aXZlIHNoYWRvdyByb290IGJ1dCBpcyBub3QgZGVmaW5lZCBhcyBoeWRyYXRhYmxlLiBVc2UgXFxgZGVmaW5lU1NSQ3VzdG9tRWxlbWVudFxcYC5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoX2RlZi5zaGFkb3dSb290ICE9PSBmYWxzZSkge1xuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6IFwib3BlblwiIH0pO1xuICAgICAgICB0aGlzLl9yb290ID0gdGhpcy5zaGFkb3dSb290O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcm9vdCA9IHRoaXM7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdGhpcy5fZGVmLl9fYXN5bmNMb2FkZXIpIHtcbiAgICAgIHRoaXMuX3Jlc29sdmVQcm9wcyh0aGlzLl9kZWYpO1xuICAgIH1cbiAgfVxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBpZiAoIXRoaXMuaXNDb25uZWN0ZWQpIHJldHVybjtcbiAgICBpZiAoIXRoaXMuc2hhZG93Um9vdCkge1xuICAgICAgdGhpcy5fcGFyc2VTbG90cygpO1xuICAgIH1cbiAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlO1xuICAgIGxldCBwYXJlbnQgPSB0aGlzO1xuICAgIHdoaWxlIChwYXJlbnQgPSBwYXJlbnQgJiYgKHBhcmVudC5wYXJlbnROb2RlIHx8IHBhcmVudC5ob3N0KSkge1xuICAgICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIFZ1ZUVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xuICAgICAgaWYgKHRoaXMuX3Jlc29sdmVkKSB7XG4gICAgICAgIHRoaXMuX3NldFBhcmVudCgpO1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nUmVzb2x2ZSkge1xuICAgICAgICAgIHRoaXMuX3BlbmRpbmdSZXNvbHZlID0gcGFyZW50Ll9wZW5kaW5nUmVzb2x2ZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdSZXNvbHZlID0gdm9pZCAwO1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZURlZigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3Jlc29sdmVEZWYoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBfc2V0UGFyZW50KHBhcmVudCA9IHRoaXMuX3BhcmVudCkge1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHRoaXMuX2luc3RhbmNlLnBhcmVudCA9IHBhcmVudC5faW5zdGFuY2U7XG4gICAgICB0aGlzLl9pbnN0YW5jZS5wcm92aWRlcyA9IHBhcmVudC5faW5zdGFuY2UucHJvdmlkZXM7XG4gICAgfVxuICB9XG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fY29ubmVjdGVkKSB7XG4gICAgICAgIGlmICh0aGlzLl9vYikge1xuICAgICAgICAgIHRoaXMuX29iLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICB0aGlzLl9vYiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXBwICYmIHRoaXMuX2FwcC51bm1vdW50KCk7XG4gICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSkgdGhpcy5faW5zdGFuY2UuY2UgPSB2b2lkIDA7XG4gICAgICAgIHRoaXMuX2FwcCA9IHRoaXMuX2luc3RhbmNlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogcmVzb2x2ZSBpbm5lciBjb21wb25lbnQgZGVmaW5pdGlvbiAoaGFuZGxlIHBvc3NpYmxlIGFzeW5jIGNvbXBvbmVudClcbiAgICovXG4gIF9yZXNvbHZlRGVmKCkge1xuICAgIGlmICh0aGlzLl9wZW5kaW5nUmVzb2x2ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fc2V0QXR0cih0aGlzLmF0dHJpYnV0ZXNbaV0ubmFtZSk7XG4gICAgfVxuICAgIHRoaXMuX29iID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKG11dGF0aW9ucykgPT4ge1xuICAgICAgZm9yIChjb25zdCBtIG9mIG11dGF0aW9ucykge1xuICAgICAgICB0aGlzLl9zZXRBdHRyKG0uYXR0cmlidXRlTmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5fb2Iub2JzZXJ2ZSh0aGlzLCB7IGF0dHJpYnV0ZXM6IHRydWUgfSk7XG4gICAgY29uc3QgcmVzb2x2ZSA9IChkZWYsIGlzQXN5bmMgPSBmYWxzZSkgPT4ge1xuICAgICAgdGhpcy5fcmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fcGVuZGluZ1Jlc29sdmUgPSB2b2lkIDA7XG4gICAgICBjb25zdCB7IHByb3BzLCBzdHlsZXMgfSA9IGRlZjtcbiAgICAgIGxldCBudW1iZXJQcm9wcztcbiAgICAgIGlmIChwcm9wcyAmJiAhaXNBcnJheShwcm9wcykpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgICBjb25zdCBvcHQgPSBwcm9wc1trZXldO1xuICAgICAgICAgIGlmIChvcHQgPT09IE51bWJlciB8fCBvcHQgJiYgb3B0LnR5cGUgPT09IE51bWJlcikge1xuICAgICAgICAgICAgaWYgKGtleSBpbiB0aGlzLl9wcm9wcykge1xuICAgICAgICAgICAgICB0aGlzLl9wcm9wc1trZXldID0gdG9OdW1iZXIodGhpcy5fcHJvcHNba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAobnVtYmVyUHJvcHMgfHwgKG51bWJlclByb3BzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCkpKVtjYW1lbGl6ZShrZXkpXSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9udW1iZXJQcm9wcyA9IG51bWJlclByb3BzO1xuICAgICAgaWYgKGlzQXN5bmMpIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZVByb3BzKGRlZik7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zaGFkb3dSb290KSB7XG4gICAgICAgIHRoaXMuX2FwcGx5U3R5bGVzKHN0eWxlcyk7XG4gICAgICB9IGVsc2UgaWYgKHN0eWxlcykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiQ3VzdG9tIGVsZW1lbnQgc3R5bGUgaW5qZWN0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgd2hlbiB1c2luZyBzaGFkb3dSb290OiBmYWxzZVwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLl9tb3VudChkZWYpO1xuICAgIH07XG4gICAgY29uc3QgYXN5bmNEZWYgPSB0aGlzLl9kZWYuX19hc3luY0xvYWRlcjtcbiAgICBpZiAoYXN5bmNEZWYpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdSZXNvbHZlID0gYXN5bmNEZWYoKS50aGVuKFxuICAgICAgICAoZGVmKSA9PiByZXNvbHZlKHRoaXMuX2RlZiA9IGRlZiwgdHJ1ZSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc29sdmUodGhpcy5fZGVmKTtcbiAgICB9XG4gIH1cbiAgX21vdW50KGRlZikge1xuICAgIGlmICghZGVmLm5hbWUpIHtcbiAgICAgIGRlZi5uYW1lID0gXCJWdWVFbGVtZW50XCI7XG4gICAgfVxuICAgIHRoaXMuX2FwcCA9IHRoaXMuX2NyZWF0ZUFwcChkZWYpO1xuICAgIGlmIChkZWYuY29uZmlndXJlQXBwKSB7XG4gICAgICBkZWYuY29uZmlndXJlQXBwKHRoaXMuX2FwcCk7XG4gICAgfVxuICAgIHRoaXMuX2FwcC5fY2VWTm9kZSA9IHRoaXMuX2NyZWF0ZVZOb2RlKCk7XG4gICAgdGhpcy5fYXBwLm1vdW50KHRoaXMuX3Jvb3QpO1xuICAgIGNvbnN0IGV4cG9zZWQgPSB0aGlzLl9pbnN0YW5jZSAmJiB0aGlzLl9pbnN0YW5jZS5leHBvc2VkO1xuICAgIGlmICghZXhwb3NlZCkgcmV0dXJuO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGV4cG9zZWQpIHtcbiAgICAgIGlmICghaGFzT3duKHRoaXMsIGtleSkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xuICAgICAgICAgIC8vIHVud3JhcCByZWYgdG8gYmUgY29uc2lzdGVudCB3aXRoIHB1YmxpYyBpbnN0YW5jZSBiZWhhdmlvclxuICAgICAgICAgIGdldDogKCkgPT4gdW5yZWYoZXhwb3NlZFtrZXldKVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oYEV4cG9zZWQgcHJvcGVydHkgXCIke2tleX1cIiBhbHJlYWR5IGV4aXN0cyBvbiBjdXN0b20gZWxlbWVudC5gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX3Jlc29sdmVQcm9wcyhkZWYpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSBkZWY7XG4gICAgY29uc3QgZGVjbGFyZWRQcm9wS2V5cyA9IGlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBPYmplY3Qua2V5cyhwcm9wcyB8fCB7fSk7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcykpIHtcbiAgICAgIGlmIChrZXlbMF0gIT09IFwiX1wiICYmIGRlY2xhcmVkUHJvcEtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICB0aGlzLl9zZXRQcm9wKGtleSwgdGhpc1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2YgZGVjbGFyZWRQcm9wS2V5cy5tYXAoY2FtZWxpemUpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJvcChrZXkpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgdGhpcy5fc2V0UHJvcChrZXksIHZhbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBfc2V0QXR0cihrZXkpIHtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJkYXRhLXYtXCIpKSByZXR1cm47XG4gICAgY29uc3QgaGFzID0gdGhpcy5oYXNBdHRyaWJ1dGUoa2V5KTtcbiAgICBsZXQgdmFsdWUgPSBoYXMgPyB0aGlzLmdldEF0dHJpYnV0ZShrZXkpIDogUkVNT1ZBTDtcbiAgICBjb25zdCBjYW1lbEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgaWYgKGhhcyAmJiB0aGlzLl9udW1iZXJQcm9wcyAmJiB0aGlzLl9udW1iZXJQcm9wc1tjYW1lbEtleV0pIHtcbiAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgIH1cbiAgICB0aGlzLl9zZXRQcm9wKGNhbWVsS2V5LCB2YWx1ZSwgZmFsc2UsIHRydWUpO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9nZXRQcm9wKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9wcm9wc1trZXldO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9zZXRQcm9wKGtleSwgdmFsLCBzaG91bGRSZWZsZWN0ID0gdHJ1ZSwgc2hvdWxkVXBkYXRlID0gZmFsc2UpIHtcbiAgICBpZiAodmFsICE9PSB0aGlzLl9wcm9wc1trZXldKSB7XG4gICAgICBpZiAodmFsID09PSBSRU1PVkFMKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9wcm9wc1trZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcHJvcHNba2V5XSA9IHZhbDtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJrZXlcIiAmJiB0aGlzLl9hcHApIHtcbiAgICAgICAgICB0aGlzLl9hcHAuX2NlVk5vZGUua2V5ID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlICYmIHRoaXMuX2luc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHNob3VsZFJlZmxlY3QpIHtcbiAgICAgICAgY29uc3Qgb2IgPSB0aGlzLl9vYjtcbiAgICAgICAgb2IgJiYgb2IuZGlzY29ubmVjdCgpO1xuICAgICAgICBpZiAodmFsID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSksIFwiXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGh5cGhlbmF0ZShrZXkpLCB2YWwgKyBcIlwiKTtcbiAgICAgICAgfSBlbHNlIGlmICghdmFsKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSkpO1xuICAgICAgICB9XG4gICAgICAgIG9iICYmIG9iLm9ic2VydmUodGhpcywgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBfdXBkYXRlKCkge1xuICAgIHJlbmRlcih0aGlzLl9jcmVhdGVWTm9kZSgpLCB0aGlzLl9yb290KTtcbiAgfVxuICBfY3JlYXRlVk5vZGUoKSB7XG4gICAgY29uc3QgYmFzZVByb3BzID0ge307XG4gICAgaWYgKCF0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgIGJhc2VQcm9wcy5vblZub2RlTW91bnRlZCA9IGJhc2VQcm9wcy5vblZub2RlVXBkYXRlZCA9IHRoaXMuX3JlbmRlclNsb3RzLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUodGhpcy5fZGVmLCBleHRlbmQoYmFzZVByb3BzLCB0aGlzLl9wcm9wcykpO1xuICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcbiAgICAgIHZub2RlLmNlID0gKGluc3RhbmNlKSA9PiB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIGluc3RhbmNlLmNlID0gdGhpcztcbiAgICAgICAgaW5zdGFuY2UuaXNDRSA9IHRydWU7XG4gICAgICAgIHtcbiAgICAgICAgICBpbnN0YW5jZS5jZVJlbG9hZCA9IChuZXdTdHlsZXMpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdHlsZXMpIHtcbiAgICAgICAgICAgICAgdGhpcy5fc3R5bGVzLmZvckVhY2goKHMpID0+IHRoaXMuX3Jvb3QucmVtb3ZlQ2hpbGQocykpO1xuICAgICAgICAgICAgICB0aGlzLl9zdHlsZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2FwcGx5U3R5bGVzKG5ld1N0eWxlcyk7XG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRpc3BhdGNoID0gKGV2ZW50LCBhcmdzKSA9PiB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgICAgbmV3IEN1c3RvbUV2ZW50KFxuICAgICAgICAgICAgICBldmVudCxcbiAgICAgICAgICAgICAgaXNQbGFpbk9iamVjdChhcmdzWzBdKSA/IGV4dGVuZCh7IGRldGFpbDogYXJncyB9LCBhcmdzWzBdKSA6IHsgZGV0YWlsOiBhcmdzIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgICAgICBpbnN0YW5jZS5lbWl0ID0gKGV2ZW50LCAuLi5hcmdzKSA9PiB7XG4gICAgICAgICAgZGlzcGF0Y2goZXZlbnQsIGFyZ3MpO1xuICAgICAgICAgIGlmIChoeXBoZW5hdGUoZXZlbnQpICE9PSBldmVudCkge1xuICAgICAgICAgICAgZGlzcGF0Y2goaHlwaGVuYXRlKGV2ZW50KSwgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9zZXRQYXJlbnQoKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB2bm9kZTtcbiAgfVxuICBfYXBwbHlTdHlsZXMoc3R5bGVzLCBvd25lcikge1xuICAgIGlmICghc3R5bGVzKSByZXR1cm47XG4gICAgaWYgKG93bmVyKSB7XG4gICAgICBpZiAob3duZXIgPT09IHRoaXMuX2RlZiB8fCB0aGlzLl9zdHlsZUNoaWxkcmVuLmhhcyhvd25lcikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3R5bGVDaGlsZHJlbi5hZGQob3duZXIpO1xuICAgIH1cbiAgICBjb25zdCBub25jZSA9IHRoaXMuX25vbmNlO1xuICAgIGZvciAobGV0IGkgPSBzdHlsZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICBpZiAobm9uY2UpIHMuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICAgICAgcy50ZXh0Q29udGVudCA9IHN0eWxlc1tpXTtcbiAgICAgIHRoaXMuc2hhZG93Um9vdC5wcmVwZW5kKHMpO1xuICAgICAge1xuICAgICAgICBpZiAob3duZXIpIHtcbiAgICAgICAgICBpZiAob3duZXIuX19obXJJZCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9jaGlsZFN0eWxlcykgdGhpcy5fY2hpbGRTdHlsZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy5fY2hpbGRTdHlsZXMuZ2V0KG93bmVyLl9faG1ySWQpO1xuICAgICAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgICB0aGlzLl9jaGlsZFN0eWxlcy5zZXQob3duZXIuX19obXJJZCwgZW50cnkgPSBbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnRyeS5wdXNoKHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAodGhpcy5fc3R5bGVzIHx8ICh0aGlzLl9zdHlsZXMgPSBbXSkpLnB1c2gocyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIE9ubHkgY2FsbGVkIHdoZW4gc2hhZG93Um9vdCBpcyBmYWxzZVxuICAgKi9cbiAgX3BhcnNlU2xvdHMoKSB7XG4gICAgY29uc3Qgc2xvdHMgPSB0aGlzLl9zbG90cyA9IHt9O1xuICAgIGxldCBuO1xuICAgIHdoaWxlIChuID0gdGhpcy5maXJzdENoaWxkKSB7XG4gICAgICBjb25zdCBzbG90TmFtZSA9IG4ubm9kZVR5cGUgPT09IDEgJiYgbi5nZXRBdHRyaWJ1dGUoXCJzbG90XCIpIHx8IFwiZGVmYXVsdFwiO1xuICAgICAgKHNsb3RzW3Nsb3ROYW1lXSB8fCAoc2xvdHNbc2xvdE5hbWVdID0gW10pKS5wdXNoKG4pO1xuICAgICAgdGhpcy5yZW1vdmVDaGlsZChuKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIE9ubHkgY2FsbGVkIHdoZW4gc2hhZG93Um9vdCBpcyBmYWxzZVxuICAgKi9cbiAgX3JlbmRlclNsb3RzKCkge1xuICAgIGNvbnN0IG91dGxldHMgPSAodGhpcy5fdGVsZXBvcnRUYXJnZXQgfHwgdGhpcykucXVlcnlTZWxlY3RvckFsbChcInNsb3RcIik7XG4gICAgY29uc3Qgc2NvcGVJZCA9IHRoaXMuX2luc3RhbmNlLnR5cGUuX19zY29wZUlkO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0bGV0cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbyA9IG91dGxldHNbaV07XG4gICAgICBjb25zdCBzbG90TmFtZSA9IG8uZ2V0QXR0cmlidXRlKFwibmFtZVwiKSB8fCBcImRlZmF1bHRcIjtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLl9zbG90c1tzbG90TmFtZV07XG4gICAgICBjb25zdCBwYXJlbnQgPSBvLnBhcmVudE5vZGU7XG4gICAgICBpZiAoY29udGVudCkge1xuICAgICAgICBmb3IgKGNvbnN0IG4gb2YgY29udGVudCkge1xuICAgICAgICAgIGlmIChzY29wZUlkICYmIG4ubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gc2NvcGVJZCArIFwiLXNcIjtcbiAgICAgICAgICAgIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIobiwgMSk7XG4gICAgICAgICAgICBuLnNldEF0dHJpYnV0ZShpZCwgXCJcIik7XG4gICAgICAgICAgICBsZXQgY2hpbGQ7XG4gICAgICAgICAgICB3aGlsZSAoY2hpbGQgPSB3YWxrZXIubmV4dE5vZGUoKSkge1xuICAgICAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoaWQsIFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG4sIG8pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAoby5maXJzdENoaWxkKSBwYXJlbnQuaW5zZXJ0QmVmb3JlKG8uZmlyc3RDaGlsZCwgbyk7XG4gICAgICB9XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQobyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9pbmplY3RDaGlsZFN0eWxlKGNvbXApIHtcbiAgICB0aGlzLl9hcHBseVN0eWxlcyhjb21wLnN0eWxlcywgY29tcCk7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX3JlbW92ZUNoaWxkU3R5bGUoY29tcCkge1xuICAgIHtcbiAgICAgIHRoaXMuX3N0eWxlQ2hpbGRyZW4uZGVsZXRlKGNvbXApO1xuICAgICAgaWYgKHRoaXMuX2NoaWxkU3R5bGVzICYmIGNvbXAuX19obXJJZCkge1xuICAgICAgICBjb25zdCBvbGRTdHlsZXMgPSB0aGlzLl9jaGlsZFN0eWxlcy5nZXQoY29tcC5fX2htcklkKTtcbiAgICAgICAgaWYgKG9sZFN0eWxlcykge1xuICAgICAgICAgIG9sZFN0eWxlcy5mb3JFYWNoKChzKSA9PiB0aGlzLl9yb290LnJlbW92ZUNoaWxkKHMpKTtcbiAgICAgICAgICBvbGRTdHlsZXMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gdXNlSG9zdChjYWxsZXIpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgY29uc3QgZWwgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5jZTtcbiAgaWYgKGVsKSB7XG4gICAgcmV0dXJuIGVsO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGAke2NhbGxlciB8fCBcInVzZUhvc3RcIn0gY2FsbGVkIHdpdGhvdXQgYW4gYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZS5gXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgJHtjYWxsZXIgfHwgXCJ1c2VIb3N0XCJ9IGNhbiBvbmx5IGJlIHVzZWQgaW4gY29tcG9uZW50cyBkZWZpbmVkIHZpYSBkZWZpbmVDdXN0b21FbGVtZW50LmBcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gdXNlU2hhZG93Um9vdCgpIHtcbiAgY29uc3QgZWwgPSB1c2VIb3N0KFwidXNlU2hhZG93Um9vdFwiKSA7XG4gIHJldHVybiBlbCAmJiBlbC5zaGFkb3dSb290O1xufVxuXG5mdW5jdGlvbiB1c2VDc3NNb2R1bGUobmFtZSA9IFwiJHN0eWxlXCIpIHtcbiAge1xuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgd2FybihgdXNlQ3NzTW9kdWxlIG11c3QgYmUgY2FsbGVkIGluc2lkZSBzZXR1cCgpYCk7XG4gICAgICByZXR1cm4gRU1QVFlfT0JKO1xuICAgIH1cbiAgICBjb25zdCBtb2R1bGVzID0gaW5zdGFuY2UudHlwZS5fX2Nzc01vZHVsZXM7XG4gICAgaWYgKCFtb2R1bGVzKSB7XG4gICAgICB3YXJuKGBDdXJyZW50IGluc3RhbmNlIGRvZXMgbm90IGhhdmUgQ1NTIG1vZHVsZXMgaW5qZWN0ZWQuYCk7XG4gICAgICByZXR1cm4gRU1QVFlfT0JKO1xuICAgIH1cbiAgICBjb25zdCBtb2QgPSBtb2R1bGVzW25hbWVdO1xuICAgIGlmICghbW9kKSB7XG4gICAgICB3YXJuKGBDdXJyZW50IGluc3RhbmNlIGRvZXMgbm90IGhhdmUgQ1NTIG1vZHVsZSBuYW1lZCBcIiR7bmFtZX1cIi5gKTtcbiAgICAgIHJldHVybiBFTVBUWV9PQko7XG4gICAgfVxuICAgIHJldHVybiBtb2Q7XG4gIH1cbn1cblxuY29uc3QgcG9zaXRpb25NYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IG5ld1Bvc2l0aW9uTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jb25zdCBtb3ZlQ2JLZXkgPSBTeW1ib2woXCJfbW92ZUNiXCIpO1xuY29uc3QgZW50ZXJDYktleSA9IFN5bWJvbChcIl9lbnRlckNiXCIpO1xuY29uc3QgZGVjb3JhdGUgPSAodCkgPT4ge1xuICBkZWxldGUgdC5wcm9wcy5tb2RlO1xuICByZXR1cm4gdDtcbn07XG5jb25zdCBUcmFuc2l0aW9uR3JvdXBJbXBsID0gLyogQF9fUFVSRV9fICovIGRlY29yYXRlKHtcbiAgbmFtZTogXCJUcmFuc2l0aW9uR3JvdXBcIixcbiAgcHJvcHM6IC8qIEBfX1BVUkVfXyAqLyBleHRlbmQoe30sIFRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMsIHtcbiAgICB0YWc6IFN0cmluZyxcbiAgICBtb3ZlQ2xhc3M6IFN0cmluZ1xuICB9KSxcbiAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gICAgY29uc3Qgc3RhdGUgPSB1c2VUcmFuc2l0aW9uU3RhdGUoKTtcbiAgICBsZXQgcHJldkNoaWxkcmVuO1xuICAgIGxldCBjaGlsZHJlbjtcbiAgICBvblVwZGF0ZWQoKCkgPT4ge1xuICAgICAgaWYgKCFwcmV2Q2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1vdmVDbGFzcyA9IHByb3BzLm1vdmVDbGFzcyB8fCBgJHtwcm9wcy5uYW1lIHx8IFwidlwifS1tb3ZlYDtcbiAgICAgIGlmICghaGFzQ1NTVHJhbnNmb3JtKFxuICAgICAgICBwcmV2Q2hpbGRyZW5bMF0uZWwsXG4gICAgICAgIGluc3RhbmNlLnZub2RlLmVsLFxuICAgICAgICBtb3ZlQ2xhc3NcbiAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcHJldkNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgICAgcHJldkNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgICAgY29uc3QgbW92ZWRDaGlsZHJlbiA9IHByZXZDaGlsZHJlbi5maWx0ZXIoYXBwbHlUcmFuc2xhdGlvbik7XG4gICAgICBmb3JjZVJlZmxvdygpO1xuICAgICAgbW92ZWRDaGlsZHJlbi5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsID0gYy5lbDtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBzdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIlwiO1xuICAgICAgICBjb25zdCBjYiA9IGVsW21vdmVDYktleV0gPSAoZSkgPT4ge1xuICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBjYik7XG4gICAgICAgICAgICBlbFttb3ZlQ2JLZXldID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIGNiKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCByYXdQcm9wcyA9IHRvUmF3KHByb3BzKTtcbiAgICAgIGNvbnN0IGNzc1RyYW5zaXRpb25Qcm9wcyA9IHJlc29sdmVUcmFuc2l0aW9uUHJvcHMocmF3UHJvcHMpO1xuICAgICAgbGV0IHRhZyA9IHJhd1Byb3BzLnRhZyB8fCBGcmFnbWVudDtcbiAgICAgIHByZXZDaGlsZHJlbiA9IFtdO1xuICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgIGlmIChjaGlsZC5lbCAmJiBjaGlsZC5lbCBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHByZXZDaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhcbiAgICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICAgIHJlc29sdmVUcmFuc2l0aW9uSG9va3MoXG4gICAgICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICAgICAgY3NzVHJhbnNpdGlvblByb3BzLFxuICAgICAgICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBwb3NpdGlvbk1hcC5zZXQoXG4gICAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgICBjaGlsZC5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCA/IGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCkpIDogW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIGlmIChjaGlsZC5rZXkgIT0gbnVsbCkge1xuICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhcbiAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhjaGlsZCwgY3NzVHJhbnNpdGlvblByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZC50eXBlICE9PSBUZXh0KSB7XG4gICAgICAgICAgd2FybihgPFRyYW5zaXRpb25Hcm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZC5gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHRhZywgbnVsbCwgY2hpbGRyZW4pO1xuICAgIH07XG4gIH1cbn0pO1xuY29uc3QgVHJhbnNpdGlvbkdyb3VwID0gVHJhbnNpdGlvbkdyb3VwSW1wbDtcbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzKGMpIHtcbiAgY29uc3QgZWwgPSBjLmVsO1xuICBpZiAoZWxbbW92ZUNiS2V5XSkge1xuICAgIGVsW21vdmVDYktleV0oKTtcbiAgfVxuICBpZiAoZWxbZW50ZXJDYktleV0pIHtcbiAgICBlbFtlbnRlckNiS2V5XSgpO1xuICB9XG59XG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbihjKSB7XG4gIG5ld1Bvc2l0aW9uTWFwLnNldChjLCBjLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbn1cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24oYykge1xuICBjb25zdCBvbGRQb3MgPSBwb3NpdGlvbk1hcC5nZXQoYyk7XG4gIGNvbnN0IG5ld1BvcyA9IG5ld1Bvc2l0aW9uTWFwLmdldChjKTtcbiAgY29uc3QgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICBjb25zdCBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjb25zdCBzID0gYy5lbC5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMud2Via2l0VHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke2R4fXB4LCR7ZHl9cHgpYDtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiMHNcIjtcbiAgICByZXR1cm4gYztcbiAgfVxufVxuZnVuY3Rpb24gaGFzQ1NTVHJhbnNmb3JtKGVsLCByb290LCBtb3ZlQ2xhc3MpIHtcbiAgY29uc3QgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgY29uc3QgX3Z0YyA9IGVsW3Z0Y0tleV07XG4gIGlmIChfdnRjKSB7XG4gICAgX3Z0Yy5mb3JFYWNoKChjbHMpID0+IHtcbiAgICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goKGMpID0+IGMgJiYgY2xvbmUuY2xhc3NMaXN0LnJlbW92ZShjKSk7XG4gICAgfSk7XG4gIH1cbiAgbW92ZUNsYXNzLnNwbGl0KC9cXHMrLykuZm9yRWFjaCgoYykgPT4gYyAmJiBjbG9uZS5jbGFzc0xpc3QuYWRkKGMpKTtcbiAgY2xvbmUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICBjb25zdCBjb250YWluZXIgPSByb290Lm5vZGVUeXBlID09PSAxID8gcm9vdCA6IHJvb3QucGFyZW50Tm9kZTtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgY29uc3QgeyBoYXNUcmFuc2Zvcm0gfSA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgcmV0dXJuIGhhc1RyYW5zZm9ybTtcbn1cblxuY29uc3QgZ2V0TW9kZWxBc3NpZ25lciA9ICh2bm9kZSkgPT4ge1xuICBjb25zdCBmbiA9IHZub2RlLnByb3BzW1wib25VcGRhdGU6bW9kZWxWYWx1ZVwiXSB8fCBmYWxzZTtcbiAgcmV0dXJuIGlzQXJyYXkoZm4pID8gKHZhbHVlKSA9PiBpbnZva2VBcnJheUZucyhmbiwgdmFsdWUpIDogZm47XG59O1xuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0KGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQoZSkge1xuICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgaWYgKHRhcmdldC5jb21wb3NpbmcpIHtcbiAgICB0YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIikpO1xuICB9XG59XG5jb25zdCBhc3NpZ25LZXkgPSBTeW1ib2woXCJfYXNzaWduXCIpO1xuY29uc3Qgdk1vZGVsVGV4dCA9IHtcbiAgY3JlYXRlZChlbCwgeyBtb2RpZmllcnM6IHsgbGF6eSwgdHJpbSwgbnVtYmVyIH0gfSwgdm5vZGUpIHtcbiAgICBlbFthc3NpZ25LZXldID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgY29uc3QgY2FzdFRvTnVtYmVyID0gbnVtYmVyIHx8IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnR5cGUgPT09IFwibnVtYmVyXCI7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgbGF6eSA/IFwiY2hhbmdlXCIgOiBcImlucHV0XCIsIChlKSA9PiB7XG4gICAgICBpZiAoZS50YXJnZXQuY29tcG9zaW5nKSByZXR1cm47XG4gICAgICBsZXQgZG9tVmFsdWUgPSBlbC52YWx1ZTtcbiAgICAgIGlmICh0cmltKSB7XG4gICAgICAgIGRvbVZhbHVlID0gZG9tVmFsdWUudHJpbSgpO1xuICAgICAgfVxuICAgICAgaWYgKGNhc3RUb051bWJlcikge1xuICAgICAgICBkb21WYWx1ZSA9IGxvb3NlVG9OdW1iZXIoZG9tVmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxbYXNzaWduS2V5XShkb21WYWx1ZSk7XG4gICAgfSk7XG4gICAgaWYgKHRyaW0pIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIFwiY2hhbmdlXCIsICgpID0+IHtcbiAgICAgICAgZWwudmFsdWUgPSBlbC52YWx1ZS50cmltKCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFsYXp5KSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBcImNvbXBvc2l0aW9uc3RhcnRcIiwgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIFwiY29tcG9zaXRpb25lbmRcIiwgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBcImNoYW5nZVwiLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICB9XG4gIH0sXG4gIC8vIHNldCB2YWx1ZSBvbiBtb3VudGVkIHNvIGl0J3MgYWZ0ZXIgbWluL21heCBmb3IgdHlwZT1cInJhbmdlXCJcbiAgbW91bnRlZChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgZWwudmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoZWwsIHsgdmFsdWUsIG9sZFZhbHVlLCBtb2RpZmllcnM6IHsgbGF6eSwgdHJpbSwgbnVtYmVyIH0gfSwgdm5vZGUpIHtcbiAgICBlbFthc3NpZ25LZXldID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgaWYgKGVsLmNvbXBvc2luZykgcmV0dXJuO1xuICAgIGNvbnN0IGVsVmFsdWUgPSAobnVtYmVyIHx8IGVsLnR5cGUgPT09IFwibnVtYmVyXCIpICYmICEvXjBcXGQvLnRlc3QoZWwudmFsdWUpID8gbG9vc2VUb051bWJlcihlbC52YWx1ZSkgOiBlbC52YWx1ZTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWU7XG4gICAgaWYgKGVsVmFsdWUgPT09IG5ld1ZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlbCAmJiBlbC50eXBlICE9PSBcInJhbmdlXCIpIHtcbiAgICAgIGlmIChsYXp5ICYmIHZhbHVlID09PSBvbGRWYWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodHJpbSAmJiBlbC52YWx1ZS50cmltKCkgPT09IG5ld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgZWwudmFsdWUgPSBuZXdWYWx1ZTtcbiAgfVxufTtcbmNvbnN0IHZNb2RlbENoZWNrYm94ID0ge1xuICAvLyAjNDA5NiBhcnJheSBjaGVja2JveGVzIG5lZWQgdG8gYmUgZGVlcCB0cmF2ZXJzZWRcbiAgZGVlcDogdHJ1ZSxcbiAgY3JlYXRlZChlbCwgXywgdm5vZGUpIHtcbiAgICBlbFthc3NpZ25LZXldID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgbW9kZWxWYWx1ZSA9IGVsLl9tb2RlbFZhbHVlO1xuICAgICAgY29uc3QgZWxlbWVudFZhbHVlID0gZ2V0VmFsdWUoZWwpO1xuICAgICAgY29uc3QgY2hlY2tlZCA9IGVsLmNoZWNrZWQ7XG4gICAgICBjb25zdCBhc3NpZ24gPSBlbFthc3NpZ25LZXldO1xuICAgICAgaWYgKGlzQXJyYXkobW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBsb29zZUluZGV4T2YobW9kZWxWYWx1ZSwgZWxlbWVudFZhbHVlKTtcbiAgICAgICAgY29uc3QgZm91bmQgPSBpbmRleCAhPT0gLTE7XG4gICAgICAgIGlmIChjaGVja2VkICYmICFmb3VuZCkge1xuICAgICAgICAgIGFzc2lnbihtb2RlbFZhbHVlLmNvbmNhdChlbGVtZW50VmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIGlmICghY2hlY2tlZCAmJiBmb3VuZCkge1xuICAgICAgICAgIGNvbnN0IGZpbHRlcmVkID0gWy4uLm1vZGVsVmFsdWVdO1xuICAgICAgICAgIGZpbHRlcmVkLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgYXNzaWduKGZpbHRlcmVkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1NldChtb2RlbFZhbHVlKSkge1xuICAgICAgICBjb25zdCBjbG9uZWQgPSBuZXcgU2V0KG1vZGVsVmFsdWUpO1xuICAgICAgICBpZiAoY2hlY2tlZCkge1xuICAgICAgICAgIGNsb25lZC5hZGQoZWxlbWVudFZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbG9uZWQuZGVsZXRlKGVsZW1lbnRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduKGNsb25lZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhc3NpZ24oZ2V0Q2hlY2tib3hWYWx1ZShlbCwgY2hlY2tlZCkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICAvLyBzZXQgaW5pdGlhbCBjaGVja2VkIG9uIG1vdW50IHRvIHdhaXQgZm9yIHRydWUtdmFsdWUvZmFsc2UtdmFsdWVcbiAgbW91bnRlZDogc2V0Q2hlY2tlZCxcbiAgYmVmb3JlVXBkYXRlKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGVsW2Fzc2lnbktleV0gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICBzZXRDaGVja2VkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gIH1cbn07XG5mdW5jdGlvbiBzZXRDaGVja2VkKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB2bm9kZSkge1xuICBlbC5fbW9kZWxWYWx1ZSA9IHZhbHVlO1xuICBsZXQgY2hlY2tlZDtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgY2hlY2tlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpID4gLTE7XG4gIH0gZWxzZSBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgY2hlY2tlZCA9IHZhbHVlLmhhcyh2bm9kZS5wcm9wcy52YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlID09PSBvbGRWYWx1ZSkgcmV0dXJuO1xuICAgIGNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCBnZXRDaGVja2JveFZhbHVlKGVsLCB0cnVlKSk7XG4gIH1cbiAgaWYgKGVsLmNoZWNrZWQgIT09IGNoZWNrZWQpIHtcbiAgICBlbC5jaGVja2VkID0gY2hlY2tlZDtcbiAgfVxufVxuY29uc3Qgdk1vZGVsUmFkaW8gPSB7XG4gIGNyZWF0ZWQoZWwsIHsgdmFsdWUgfSwgdm5vZGUpIHtcbiAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpO1xuICAgIGVsW2Fzc2lnbktleV0gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBcImNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICBlbFthc3NpZ25LZXldKGdldFZhbHVlKGVsKSk7XG4gICAgfSk7XG4gIH0sXG4gIGJlZm9yZVVwZGF0ZShlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgdm5vZGUpIHtcbiAgICBlbFthc3NpZ25LZXldID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKTtcbiAgICB9XG4gIH1cbn07XG5jb25zdCB2TW9kZWxTZWxlY3QgPSB7XG4gIC8vIDxzZWxlY3QgbXVsdGlwbGU+IHZhbHVlIG5lZWQgdG8gYmUgZGVlcCB0cmF2ZXJzZWRcbiAgZGVlcDogdHJ1ZSxcbiAgY3JlYXRlZChlbCwgeyB2YWx1ZSwgbW9kaWZpZXJzOiB7IG51bWJlciB9IH0sIHZub2RlKSB7XG4gICAgY29uc3QgaXNTZXRNb2RlbCA9IGlzU2V0KHZhbHVlKTtcbiAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBcImNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChlbC5vcHRpb25zLCAobykgPT4gby5zZWxlY3RlZCkubWFwKFxuICAgICAgICAobykgPT4gbnVtYmVyID8gbG9vc2VUb051bWJlcihnZXRWYWx1ZShvKSkgOiBnZXRWYWx1ZShvKVxuICAgICAgKTtcbiAgICAgIGVsW2Fzc2lnbktleV0oXG4gICAgICAgIGVsLm11bHRpcGxlID8gaXNTZXRNb2RlbCA/IG5ldyBTZXQoc2VsZWN0ZWRWYWwpIDogc2VsZWN0ZWRWYWwgOiBzZWxlY3RlZFZhbFswXVxuICAgICAgKTtcbiAgICAgIGVsLl9hc3NpZ25pbmcgPSB0cnVlO1xuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBlbC5fYXNzaWduaW5nID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBlbFthc3NpZ25LZXldID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gIH0sXG4gIC8vIHNldCB2YWx1ZSBpbiBtb3VudGVkICYgdXBkYXRlZCBiZWNhdXNlIDxzZWxlY3Q+IHJlbGllcyBvbiBpdHMgY2hpbGRyZW5cbiAgLy8gPG9wdGlvbj5zLlxuICBtb3VudGVkKGVsLCB7IHZhbHVlIH0pIHtcbiAgICBzZXRTZWxlY3RlZChlbCwgdmFsdWUpO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoZWwsIF9iaW5kaW5nLCB2bm9kZSkge1xuICAgIGVsW2Fzc2lnbktleV0gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlZChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgaWYgKCFlbC5fYXNzaWduaW5nKSB7XG4gICAgICBzZXRTZWxlY3RlZChlbCwgdmFsdWUpO1xuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSkge1xuICBjb25zdCBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGNvbnN0IGlzQXJyYXlWYWx1ZSA9IGlzQXJyYXkodmFsdWUpO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhaXNBcnJheVZhbHVlICYmICFpc1NldCh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgYDxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD4gZXhwZWN0cyBhbiBBcnJheSBvciBTZXQgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290ICR7T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSl9LmBcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKGxldCBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY29uc3Qgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBjb25zdCBvcHRpb25WYWx1ZSA9IGdldFZhbHVlKG9wdGlvbik7XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIGlmIChpc0FycmF5VmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uVHlwZSA9IHR5cGVvZiBvcHRpb25WYWx1ZTtcbiAgICAgICAgaWYgKG9wdGlvblR5cGUgPT09IFwic3RyaW5nXCIgfHwgb3B0aW9uVHlwZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlLnNvbWUoKHYpID0+IFN0cmluZyh2KSA9PT0gU3RyaW5nKG9wdGlvblZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBvcHRpb25WYWx1ZSkgPiAtMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdmFsdWUuaGFzKG9wdGlvblZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSAmJiBlbC5zZWxlY3RlZEluZGV4ICE9PSAtMSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0VmFsdWUoZWwpIHtcbiAgcmV0dXJuIFwiX3ZhbHVlXCIgaW4gZWwgPyBlbC5fdmFsdWUgOiBlbC52YWx1ZTtcbn1cbmZ1bmN0aW9uIGdldENoZWNrYm94VmFsdWUoZWwsIGNoZWNrZWQpIHtcbiAgY29uc3Qga2V5ID0gY2hlY2tlZCA/IFwiX3RydWVWYWx1ZVwiIDogXCJfZmFsc2VWYWx1ZVwiO1xuICByZXR1cm4ga2V5IGluIGVsID8gZWxba2V5XSA6IGNoZWNrZWQ7XG59XG5jb25zdCB2TW9kZWxEeW5hbWljID0ge1xuICBjcmVhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBudWxsLCBcImNyZWF0ZWRcIik7XG4gIH0sXG4gIG1vdW50ZWQoZWwsIGJpbmRpbmcsIHZub2RlKSB7XG4gICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIG51bGwsIFwibW91bnRlZFwiKTtcbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKSB7XG4gICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSwgXCJiZWZvcmVVcGRhdGVcIik7XG4gIH0sXG4gIHVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUpIHtcbiAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCBcInVwZGF0ZWRcIik7XG4gIH1cbn07XG5mdW5jdGlvbiByZXNvbHZlRHluYW1pY01vZGVsKHRhZ05hbWUsIHR5cGUpIHtcbiAgc3dpdGNoICh0YWdOYW1lKSB7XG4gICAgY2FzZSBcIlNFTEVDVFwiOlxuICAgICAgcmV0dXJuIHZNb2RlbFNlbGVjdDtcbiAgICBjYXNlIFwiVEVYVEFSRUFcIjpcbiAgICAgIHJldHVybiB2TW9kZWxUZXh0O1xuICAgIGRlZmF1bHQ6XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcImNoZWNrYm94XCI6XG4gICAgICAgICAgcmV0dXJuIHZNb2RlbENoZWNrYm94O1xuICAgICAgICBjYXNlIFwicmFkaW9cIjpcbiAgICAgICAgICByZXR1cm4gdk1vZGVsUmFkaW87XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHZNb2RlbFRleHQ7XG4gICAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsIGhvb2spIHtcbiAgY29uc3QgbW9kZWxUb1VzZSA9IHJlc29sdmVEeW5hbWljTW9kZWwoXG4gICAgZWwudGFnTmFtZSxcbiAgICB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50eXBlXG4gICk7XG4gIGNvbnN0IGZuID0gbW9kZWxUb1VzZVtob29rXTtcbiAgZm4gJiYgZm4oZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUpO1xufVxuZnVuY3Rpb24gaW5pdFZNb2RlbEZvclNTUigpIHtcbiAgdk1vZGVsVGV4dC5nZXRTU1JQcm9wcyA9ICh7IHZhbHVlIH0pID0+ICh7IHZhbHVlIH0pO1xuICB2TW9kZWxSYWRpby5nZXRTU1JQcm9wcyA9ICh7IHZhbHVlIH0sIHZub2RlKSA9PiB7XG4gICAgaWYgKHZub2RlLnByb3BzICYmIGxvb3NlRXF1YWwodm5vZGUucHJvcHMudmFsdWUsIHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xuICAgIH1cbiAgfTtcbiAgdk1vZGVsQ2hlY2tib3guZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9LCB2bm9kZSkgPT4ge1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgaWYgKHZub2RlLnByb3BzICYmIGxvb3NlSW5kZXhPZih2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICBpZiAodm5vZGUucHJvcHMgJiYgdmFsdWUuaGFzKHZub2RlLnByb3BzLnZhbHVlKSkge1xuICAgICAgICByZXR1cm4geyBjaGVja2VkOiB0cnVlIH07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xuICAgIH1cbiAgfTtcbiAgdk1vZGVsRHluYW1pYy5nZXRTU1JQcm9wcyA9IChiaW5kaW5nLCB2bm9kZSkgPT4ge1xuICAgIGlmICh0eXBlb2Ygdm5vZGUudHlwZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtb2RlbFRvVXNlID0gcmVzb2x2ZUR5bmFtaWNNb2RlbChcbiAgICAgIC8vIHJlc29sdmVEeW5hbWljTW9kZWwgZXhwZWN0cyBhbiB1cHBlcmNhc2UgdGFnIG5hbWUsIGJ1dCB2bm9kZS50eXBlIGlzIGxvd2VyY2FzZVxuICAgICAgdm5vZGUudHlwZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZVxuICAgICk7XG4gICAgaWYgKG1vZGVsVG9Vc2UuZ2V0U1NSUHJvcHMpIHtcbiAgICAgIHJldHVybiBtb2RlbFRvVXNlLmdldFNTUlByb3BzKGJpbmRpbmcsIHZub2RlKTtcbiAgICB9XG4gIH07XG59XG5cbmNvbnN0IHN5c3RlbU1vZGlmaWVycyA9IFtcImN0cmxcIiwgXCJzaGlmdFwiLCBcImFsdFwiLCBcIm1ldGFcIl07XG5jb25zdCBtb2RpZmllckd1YXJkcyA9IHtcbiAgc3RvcDogKGUpID0+IGUuc3RvcFByb3BhZ2F0aW9uKCksXG4gIHByZXZlbnQ6IChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCksXG4gIHNlbGY6IChlKSA9PiBlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0LFxuICBjdHJsOiAoZSkgPT4gIWUuY3RybEtleSxcbiAgc2hpZnQ6IChlKSA9PiAhZS5zaGlmdEtleSxcbiAgYWx0OiAoZSkgPT4gIWUuYWx0S2V5LFxuICBtZXRhOiAoZSkgPT4gIWUubWV0YUtleSxcbiAgbGVmdDogKGUpID0+IFwiYnV0dG9uXCIgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMCxcbiAgbWlkZGxlOiAoZSkgPT4gXCJidXR0b25cIiBpbiBlICYmIGUuYnV0dG9uICE9PSAxLFxuICByaWdodDogKGUpID0+IFwiYnV0dG9uXCIgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMixcbiAgZXhhY3Q6IChlLCBtb2RpZmllcnMpID0+IHN5c3RlbU1vZGlmaWVycy5zb21lKChtKSA9PiBlW2Ake219S2V5YF0gJiYgIW1vZGlmaWVycy5pbmNsdWRlcyhtKSlcbn07XG5jb25zdCB3aXRoTW9kaWZpZXJzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcbiAgY29uc3QgY2FjaGUgPSBmbi5fd2l0aE1vZHMgfHwgKGZuLl93aXRoTW9kcyA9IHt9KTtcbiAgY29uc3QgY2FjaGVLZXkgPSBtb2RpZmllcnMuam9pbihcIi5cIik7XG4gIHJldHVybiBjYWNoZVtjYWNoZUtleV0gfHwgKGNhY2hlW2NhY2hlS2V5XSA9IChldmVudCwgLi4uYXJncykgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kaWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBndWFyZCA9IG1vZGlmaWVyR3VhcmRzW21vZGlmaWVyc1tpXV07XG4gICAgICBpZiAoZ3VhcmQgJiYgZ3VhcmQoZXZlbnQsIG1vZGlmaWVycykpIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGZuKGV2ZW50LCAuLi5hcmdzKTtcbiAgfSk7XG59O1xuY29uc3Qga2V5TmFtZXMgPSB7XG4gIGVzYzogXCJlc2NhcGVcIixcbiAgc3BhY2U6IFwiIFwiLFxuICB1cDogXCJhcnJvdy11cFwiLFxuICBsZWZ0OiBcImFycm93LWxlZnRcIixcbiAgcmlnaHQ6IFwiYXJyb3ctcmlnaHRcIixcbiAgZG93bjogXCJhcnJvdy1kb3duXCIsXG4gIGRlbGV0ZTogXCJiYWNrc3BhY2VcIlxufTtcbmNvbnN0IHdpdGhLZXlzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcbiAgY29uc3QgY2FjaGUgPSBmbi5fd2l0aEtleXMgfHwgKGZuLl93aXRoS2V5cyA9IHt9KTtcbiAgY29uc3QgY2FjaGVLZXkgPSBtb2RpZmllcnMuam9pbihcIi5cIik7XG4gIHJldHVybiBjYWNoZVtjYWNoZUtleV0gfHwgKGNhY2hlW2NhY2hlS2V5XSA9IChldmVudCkgPT4ge1xuICAgIGlmICghKFwia2V5XCIgaW4gZXZlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGV2ZW50S2V5ID0gaHlwaGVuYXRlKGV2ZW50LmtleSk7XG4gICAgaWYgKG1vZGlmaWVycy5zb21lKFxuICAgICAgKGspID0+IGsgPT09IGV2ZW50S2V5IHx8IGtleU5hbWVzW2tdID09PSBldmVudEtleVxuICAgICkpIHtcbiAgICAgIHJldHVybiBmbihldmVudCk7XG4gICAgfVxuICB9KTtcbn07XG5cbmNvbnN0IHJlbmRlcmVyT3B0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBleHRlbmQoeyBwYXRjaFByb3AgfSwgbm9kZU9wcyk7XG5sZXQgcmVuZGVyZXI7XG5sZXQgZW5hYmxlZEh5ZHJhdGlvbiA9IGZhbHNlO1xuZnVuY3Rpb24gZW5zdXJlUmVuZGVyZXIoKSB7XG4gIHJldHVybiByZW5kZXJlciB8fCAocmVuZGVyZXIgPSBjcmVhdGVSZW5kZXJlcihyZW5kZXJlck9wdGlvbnMpKTtcbn1cbmZ1bmN0aW9uIGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkge1xuICByZW5kZXJlciA9IGVuYWJsZWRIeWRyYXRpb24gPyByZW5kZXJlciA6IGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyKHJlbmRlcmVyT3B0aW9ucyk7XG4gIGVuYWJsZWRIeWRyYXRpb24gPSB0cnVlO1xuICByZXR1cm4gcmVuZGVyZXI7XG59XG5jb25zdCByZW5kZXIgPSAoLi4uYXJncykgPT4ge1xuICBlbnN1cmVSZW5kZXJlcigpLnJlbmRlciguLi5hcmdzKTtcbn07XG5jb25zdCBoeWRyYXRlID0gKC4uLmFyZ3MpID0+IHtcbiAgZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKS5oeWRyYXRlKC4uLmFyZ3MpO1xufTtcbmNvbnN0IGNyZWF0ZUFwcCA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IGFwcCA9IGVuc3VyZVJlbmRlcmVyKCkuY3JlYXRlQXBwKC4uLmFyZ3MpO1xuICB7XG4gICAgaW5qZWN0TmF0aXZlVGFnQ2hlY2soYXBwKTtcbiAgICBpbmplY3RDb21waWxlck9wdGlvbnNDaGVjayhhcHApO1xuICB9XG4gIGNvbnN0IHsgbW91bnQgfSA9IGFwcDtcbiAgYXBwLm1vdW50ID0gKGNvbnRhaW5lck9yU2VsZWN0b3IpID0+IHtcbiAgICBjb25zdCBjb250YWluZXIgPSBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyT3JTZWxlY3Rvcik7XG4gICAgaWYgKCFjb250YWluZXIpIHJldHVybjtcbiAgICBjb25zdCBjb21wb25lbnQgPSBhcHAuX2NvbXBvbmVudDtcbiAgICBpZiAoIWlzRnVuY3Rpb24oY29tcG9uZW50KSAmJiAhY29tcG9uZW50LnJlbmRlciAmJiAhY29tcG9uZW50LnRlbXBsYXRlKSB7XG4gICAgICBjb21wb25lbnQudGVtcGxhdGUgPSBjb250YWluZXIuaW5uZXJIVE1MO1xuICAgIH1cbiAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICBjb250YWluZXIudGV4dENvbnRlbnQgPSBcIlwiO1xuICAgIH1cbiAgICBjb25zdCBwcm94eSA9IG1vdW50KGNvbnRhaW5lciwgZmFsc2UsIHJlc29sdmVSb290TmFtZXNwYWNlKGNvbnRhaW5lcikpO1xuICAgIGlmIChjb250YWluZXIgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICBjb250YWluZXIucmVtb3ZlQXR0cmlidXRlKFwidi1jbG9ha1wiKTtcbiAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoXCJkYXRhLXYtYXBwXCIsIFwiXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG4gIHJldHVybiBhcHA7XG59O1xuY29uc3QgY3JlYXRlU1NSQXBwID0gKC4uLmFyZ3MpID0+IHtcbiAgY29uc3QgYXBwID0gZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKS5jcmVhdGVBcHAoLi4uYXJncyk7XG4gIHtcbiAgICBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApO1xuICAgIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCk7XG4gIH1cbiAgY29uc3QgeyBtb3VudCB9ID0gYXBwO1xuICBhcHAubW91bnQgPSAoY29udGFpbmVyT3JTZWxlY3RvcikgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXJPclNlbGVjdG9yKTtcbiAgICBpZiAoY29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gbW91bnQoY29udGFpbmVyLCB0cnVlLCByZXNvbHZlUm9vdE5hbWVzcGFjZShjb250YWluZXIpKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBhcHA7XG59O1xuZnVuY3Rpb24gcmVzb2x2ZVJvb3ROYW1lc3BhY2UoY29udGFpbmVyKSB7XG4gIGlmIChjb250YWluZXIgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSB7XG4gICAgcmV0dXJuIFwic3ZnXCI7XG4gIH1cbiAgaWYgKHR5cGVvZiBNYXRoTUxFbGVtZW50ID09PSBcImZ1bmN0aW9uXCIgJiYgY29udGFpbmVyIGluc3RhbmNlb2YgTWF0aE1MRWxlbWVudCkge1xuICAgIHJldHVybiBcIm1hdGhtbFwiO1xuICB9XG59XG5mdW5jdGlvbiBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsIFwiaXNOYXRpdmVUYWdcIiwge1xuICAgIHZhbHVlOiAodGFnKSA9PiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWR1RhZyh0YWcpIHx8IGlzTWF0aE1MVGFnKHRhZyksXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xufVxuZnVuY3Rpb24gaW5qZWN0Q29tcGlsZXJPcHRpb25zQ2hlY2soYXBwKSB7XG4gIGlmIChpc1J1bnRpbWVPbmx5KCkpIHtcbiAgICBjb25zdCBpc0N1c3RvbUVsZW1lbnQgPSBhcHAuY29uZmlnLmlzQ3VzdG9tRWxlbWVudDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXBwLmNvbmZpZywgXCJpc0N1c3RvbUVsZW1lbnRcIiwge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gaXNDdXN0b21FbGVtZW50O1xuICAgICAgfSxcbiAgICAgIHNldCgpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBgVGhlIFxcYGlzQ3VzdG9tRWxlbWVudFxcYCBjb25maWcgb3B0aW9uIGlzIGRlcHJlY2F0ZWQuIFVzZSBcXGBjb21waWxlck9wdGlvbnMuaXNDdXN0b21FbGVtZW50XFxgIGluc3RlYWQuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGNvbXBpbGVyT3B0aW9ucyA9IGFwcC5jb25maWcuY29tcGlsZXJPcHRpb25zO1xuICAgIGNvbnN0IG1zZyA9IGBUaGUgXFxgY29tcGlsZXJPcHRpb25zXFxgIGNvbmZpZyBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyBhIGJ1aWxkIG9mIFZ1ZS5qcyB0aGF0IGluY2x1ZGVzIHRoZSBydW50aW1lIGNvbXBpbGVyIChha2EgXCJmdWxsIGJ1aWxkXCIpLiBTaW5jZSB5b3UgYXJlIHVzaW5nIHRoZSBydW50aW1lLW9ubHkgYnVpbGQsIFxcYGNvbXBpbGVyT3B0aW9uc1xcYCBtdXN0IGJlIHBhc3NlZCB0byBcXGBAdnVlL2NvbXBpbGVyLWRvbVxcYCBpbiB0aGUgYnVpbGQgc2V0dXAgaW5zdGVhZC5cbi0gRm9yIHZ1ZS1sb2FkZXI6IHBhc3MgaXQgdmlhIHZ1ZS1sb2FkZXIncyBcXGBjb21waWxlck9wdGlvbnNcXGAgbG9hZGVyIG9wdGlvbi5cbi0gRm9yIHZ1ZS1jbGk6IHNlZSBodHRwczovL2NsaS52dWVqcy5vcmcvZ3VpZGUvd2VicGFjay5odG1sI21vZGlmeWluZy1vcHRpb25zLW9mLWEtbG9hZGVyXG4tIEZvciB2aXRlOiBwYXNzIGl0IHZpYSBAdml0ZWpzL3BsdWdpbi12dWUgb3B0aW9ucy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92aXRlanMvdml0ZS1wbHVnaW4tdnVlL3RyZWUvbWFpbi9wYWNrYWdlcy9wbHVnaW4tdnVlI2V4YW1wbGUtZm9yLXBhc3Npbmctb3B0aW9ucy10by12dWVjb21waWxlci1zZmNgO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLCBcImNvbXBpbGVyT3B0aW9uc1wiLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHdhcm4obXNnKTtcbiAgICAgICAgcmV0dXJuIGNvbXBpbGVyT3B0aW9ucztcbiAgICAgIH0sXG4gICAgICBzZXQoKSB7XG4gICAgICAgIHdhcm4obXNnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICBpZiAoaXNTdHJpbmcoY29udGFpbmVyKSkge1xuICAgIGNvbnN0IHJlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY29udGFpbmVyKTtcbiAgICBpZiAoIXJlcykge1xuICAgICAgd2FybihcbiAgICAgICAgYEZhaWxlZCB0byBtb3VudCBhcHA6IG1vdW50IHRhcmdldCBzZWxlY3RvciBcIiR7Y29udGFpbmVyfVwiIHJldHVybmVkIG51bGwuYFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBpZiAod2luZG93LlNoYWRvd1Jvb3QgJiYgY29udGFpbmVyIGluc3RhbmNlb2Ygd2luZG93LlNoYWRvd1Jvb3QgJiYgY29udGFpbmVyLm1vZGUgPT09IFwiY2xvc2VkXCIpIHtcbiAgICB3YXJuKFxuICAgICAgYG1vdW50aW5nIG9uIGEgU2hhZG93Um9vdCB3aXRoIFxcYHttb2RlOiBcImNsb3NlZFwifVxcYCBtYXkgbGVhZCB0byB1bnByZWRpY3RhYmxlIGJ1Z3NgXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY29udGFpbmVyO1xufVxubGV0IHNzckRpcmVjdGl2ZUluaXRpYWxpemVkID0gZmFsc2U7XG5jb25zdCBpbml0RGlyZWN0aXZlc0ZvclNTUiA9ICgpID0+IHtcbiAgaWYgKCFzc3JEaXJlY3RpdmVJbml0aWFsaXplZCkge1xuICAgIHNzckRpcmVjdGl2ZUluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBpbml0Vk1vZGVsRm9yU1NSKCk7XG4gICAgaW5pdFZTaG93Rm9yU1NSKCk7XG4gIH1cbn0gO1xuXG52YXIgcnVudGltZURvbSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBCYXNlVHJhbnNpdGlvbjogQmFzZVRyYW5zaXRpb24sXG4gIEJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzOiBCYXNlVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyxcbiAgQ29tbWVudDogQ29tbWVudCxcbiAgRGVwcmVjYXRpb25UeXBlczogRGVwcmVjYXRpb25UeXBlcyxcbiAgRWZmZWN0U2NvcGU6IEVmZmVjdFNjb3BlLFxuICBFcnJvckNvZGVzOiBFcnJvckNvZGVzLFxuICBFcnJvclR5cGVTdHJpbmdzOiBFcnJvclR5cGVTdHJpbmdzLFxuICBGcmFnbWVudDogRnJhZ21lbnQsXG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlLFxuICBSZWFjdGl2ZUVmZmVjdDogUmVhY3RpdmVFZmZlY3QsXG4gIFN0YXRpYzogU3RhdGljLFxuICBTdXNwZW5zZTogU3VzcGVuc2UsXG4gIFRlbGVwb3J0OiBUZWxlcG9ydCxcbiAgVGV4dDogVGV4dCxcbiAgVHJhY2tPcFR5cGVzOiBUcmFja09wVHlwZXMsXG4gIFRyYW5zaXRpb246IFRyYW5zaXRpb24sXG4gIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwLFxuICBUcmlnZ2VyT3BUeXBlczogVHJpZ2dlck9wVHlwZXMsXG4gIFZ1ZUVsZW1lbnQ6IFZ1ZUVsZW1lbnQsXG4gIGFzc2VydE51bWJlcjogYXNzZXJ0TnVtYmVyLFxuICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZzogY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsXG4gIGNhbGxXaXRoRXJyb3JIYW5kbGluZzogY2FsbFdpdGhFcnJvckhhbmRsaW5nLFxuICBjYW1lbGl6ZTogY2FtZWxpemUsXG4gIGNhcGl0YWxpemU6IGNhcGl0YWxpemUsXG4gIGNsb25lVk5vZGU6IGNsb25lVk5vZGUsXG4gIGNvbXBhdFV0aWxzOiBjb21wYXRVdGlscyxcbiAgY29tcHV0ZWQ6IGNvbXB1dGVkLFxuICBjcmVhdGVBcHA6IGNyZWF0ZUFwcCxcbiAgY3JlYXRlQmxvY2s6IGNyZWF0ZUJsb2NrLFxuICBjcmVhdGVDb21tZW50Vk5vZGU6IGNyZWF0ZUNvbW1lbnRWTm9kZSxcbiAgY3JlYXRlRWxlbWVudEJsb2NrOiBjcmVhdGVFbGVtZW50QmxvY2ssXG4gIGNyZWF0ZUVsZW1lbnRWTm9kZTogY3JlYXRlQmFzZVZOb2RlLFxuICBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcjogY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIsXG4gIGNyZWF0ZVByb3BzUmVzdFByb3h5OiBjcmVhdGVQcm9wc1Jlc3RQcm94eSxcbiAgY3JlYXRlUmVuZGVyZXI6IGNyZWF0ZVJlbmRlcmVyLFxuICBjcmVhdGVTU1JBcHA6IGNyZWF0ZVNTUkFwcCxcbiAgY3JlYXRlU2xvdHM6IGNyZWF0ZVNsb3RzLFxuICBjcmVhdGVTdGF0aWNWTm9kZTogY3JlYXRlU3RhdGljVk5vZGUsXG4gIGNyZWF0ZVRleHRWTm9kZTogY3JlYXRlVGV4dFZOb2RlLFxuICBjcmVhdGVWTm9kZTogY3JlYXRlVk5vZGUsXG4gIGN1c3RvbVJlZjogY3VzdG9tUmVmLFxuICBkZWZpbmVBc3luY0NvbXBvbmVudDogZGVmaW5lQXN5bmNDb21wb25lbnQsXG4gIGRlZmluZUNvbXBvbmVudDogZGVmaW5lQ29tcG9uZW50LFxuICBkZWZpbmVDdXN0b21FbGVtZW50OiBkZWZpbmVDdXN0b21FbGVtZW50LFxuICBkZWZpbmVFbWl0czogZGVmaW5lRW1pdHMsXG4gIGRlZmluZUV4cG9zZTogZGVmaW5lRXhwb3NlLFxuICBkZWZpbmVNb2RlbDogZGVmaW5lTW9kZWwsXG4gIGRlZmluZU9wdGlvbnM6IGRlZmluZU9wdGlvbnMsXG4gIGRlZmluZVByb3BzOiBkZWZpbmVQcm9wcyxcbiAgZGVmaW5lU1NSQ3VzdG9tRWxlbWVudDogZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCxcbiAgZGVmaW5lU2xvdHM6IGRlZmluZVNsb3RzLFxuICBkZXZ0b29sczogZGV2dG9vbHMsXG4gIGVmZmVjdDogZWZmZWN0LFxuICBlZmZlY3RTY29wZTogZWZmZWN0U2NvcGUsXG4gIGdldEN1cnJlbnRJbnN0YW5jZTogZ2V0Q3VycmVudEluc3RhbmNlLFxuICBnZXRDdXJyZW50U2NvcGU6IGdldEN1cnJlbnRTY29wZSxcbiAgZ2V0Q3VycmVudFdhdGNoZXI6IGdldEN1cnJlbnRXYXRjaGVyLFxuICBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW46IGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbixcbiAgZ3VhcmRSZWFjdGl2ZVByb3BzOiBndWFyZFJlYWN0aXZlUHJvcHMsXG4gIGg6IGgsXG4gIGhhbmRsZUVycm9yOiBoYW5kbGVFcnJvcixcbiAgaGFzSW5qZWN0aW9uQ29udGV4dDogaGFzSW5qZWN0aW9uQ29udGV4dCxcbiAgaHlkcmF0ZTogaHlkcmF0ZSxcbiAgaHlkcmF0ZU9uSWRsZTogaHlkcmF0ZU9uSWRsZSxcbiAgaHlkcmF0ZU9uSW50ZXJhY3Rpb246IGh5ZHJhdGVPbkludGVyYWN0aW9uLFxuICBoeWRyYXRlT25NZWRpYVF1ZXJ5OiBoeWRyYXRlT25NZWRpYVF1ZXJ5LFxuICBoeWRyYXRlT25WaXNpYmxlOiBoeWRyYXRlT25WaXNpYmxlLFxuICBpbml0Q3VzdG9tRm9ybWF0dGVyOiBpbml0Q3VzdG9tRm9ybWF0dGVyLFxuICBpbml0RGlyZWN0aXZlc0ZvclNTUjogaW5pdERpcmVjdGl2ZXNGb3JTU1IsXG4gIGluamVjdDogaW5qZWN0LFxuICBpc01lbW9TYW1lOiBpc01lbW9TYW1lLFxuICBpc1Byb3h5OiBpc1Byb3h5LFxuICBpc1JlYWN0aXZlOiBpc1JlYWN0aXZlLFxuICBpc1JlYWRvbmx5OiBpc1JlYWRvbmx5LFxuICBpc1JlZjogaXNSZWYsXG4gIGlzUnVudGltZU9ubHk6IGlzUnVudGltZU9ubHksXG4gIGlzU2hhbGxvdzogaXNTaGFsbG93LFxuICBpc1ZOb2RlOiBpc1ZOb2RlLFxuICBtYXJrUmF3OiBtYXJrUmF3LFxuICBtZXJnZURlZmF1bHRzOiBtZXJnZURlZmF1bHRzLFxuICBtZXJnZU1vZGVsczogbWVyZ2VNb2RlbHMsXG4gIG1lcmdlUHJvcHM6IG1lcmdlUHJvcHMsXG4gIG5leHRUaWNrOiBuZXh0VGljayxcbiAgbm9ybWFsaXplQ2xhc3M6IG5vcm1hbGl6ZUNsYXNzLFxuICBub3JtYWxpemVQcm9wczogbm9ybWFsaXplUHJvcHMsXG4gIG5vcm1hbGl6ZVN0eWxlOiBub3JtYWxpemVTdHlsZSxcbiAgb25BY3RpdmF0ZWQ6IG9uQWN0aXZhdGVkLFxuICBvbkJlZm9yZU1vdW50OiBvbkJlZm9yZU1vdW50LFxuICBvbkJlZm9yZVVubW91bnQ6IG9uQmVmb3JlVW5tb3VudCxcbiAgb25CZWZvcmVVcGRhdGU6IG9uQmVmb3JlVXBkYXRlLFxuICBvbkRlYWN0aXZhdGVkOiBvbkRlYWN0aXZhdGVkLFxuICBvbkVycm9yQ2FwdHVyZWQ6IG9uRXJyb3JDYXB0dXJlZCxcbiAgb25Nb3VudGVkOiBvbk1vdW50ZWQsXG4gIG9uUmVuZGVyVHJhY2tlZDogb25SZW5kZXJUcmFja2VkLFxuICBvblJlbmRlclRyaWdnZXJlZDogb25SZW5kZXJUcmlnZ2VyZWQsXG4gIG9uU2NvcGVEaXNwb3NlOiBvblNjb3BlRGlzcG9zZSxcbiAgb25TZXJ2ZXJQcmVmZXRjaDogb25TZXJ2ZXJQcmVmZXRjaCxcbiAgb25Vbm1vdW50ZWQ6IG9uVW5tb3VudGVkLFxuICBvblVwZGF0ZWQ6IG9uVXBkYXRlZCxcbiAgb25XYXRjaGVyQ2xlYW51cDogb25XYXRjaGVyQ2xlYW51cCxcbiAgb3BlbkJsb2NrOiBvcGVuQmxvY2ssXG4gIHBvcFNjb3BlSWQ6IHBvcFNjb3BlSWQsXG4gIHByb3ZpZGU6IHByb3ZpZGUsXG4gIHByb3h5UmVmczogcHJveHlSZWZzLFxuICBwdXNoU2NvcGVJZDogcHVzaFNjb3BlSWQsXG4gIHF1ZXVlUG9zdEZsdXNoQ2I6IHF1ZXVlUG9zdEZsdXNoQ2IsXG4gIHJlYWN0aXZlOiByZWFjdGl2ZSxcbiAgcmVhZG9ubHk6IHJlYWRvbmx5LFxuICByZWY6IHJlZixcbiAgcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXI6IHJlZ2lzdGVyUnVudGltZUNvbXBpbGVyLFxuICByZW5kZXI6IHJlbmRlcixcbiAgcmVuZGVyTGlzdDogcmVuZGVyTGlzdCxcbiAgcmVuZGVyU2xvdDogcmVuZGVyU2xvdCxcbiAgcmVzb2x2ZUNvbXBvbmVudDogcmVzb2x2ZUNvbXBvbmVudCxcbiAgcmVzb2x2ZURpcmVjdGl2ZTogcmVzb2x2ZURpcmVjdGl2ZSxcbiAgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQ6IHJlc29sdmVEeW5hbWljQ29tcG9uZW50LFxuICByZXNvbHZlRmlsdGVyOiByZXNvbHZlRmlsdGVyLFxuICByZXNvbHZlVHJhbnNpdGlvbkhvb2tzOiByZXNvbHZlVHJhbnNpdGlvbkhvb2tzLFxuICBzZXRCbG9ja1RyYWNraW5nOiBzZXRCbG9ja1RyYWNraW5nLFxuICBzZXREZXZ0b29sc0hvb2s6IHNldERldnRvb2xzSG9vayxcbiAgc2V0VHJhbnNpdGlvbkhvb2tzOiBzZXRUcmFuc2l0aW9uSG9va3MsXG4gIHNoYWxsb3dSZWFjdGl2ZTogc2hhbGxvd1JlYWN0aXZlLFxuICBzaGFsbG93UmVhZG9ubHk6IHNoYWxsb3dSZWFkb25seSxcbiAgc2hhbGxvd1JlZjogc2hhbGxvd1JlZixcbiAgc3NyQ29udGV4dEtleTogc3NyQ29udGV4dEtleSxcbiAgc3NyVXRpbHM6IHNzclV0aWxzLFxuICBzdG9wOiBzdG9wLFxuICB0b0Rpc3BsYXlTdHJpbmc6IHRvRGlzcGxheVN0cmluZyxcbiAgdG9IYW5kbGVyS2V5OiB0b0hhbmRsZXJLZXksXG4gIHRvSGFuZGxlcnM6IHRvSGFuZGxlcnMsXG4gIHRvUmF3OiB0b1JhdyxcbiAgdG9SZWY6IHRvUmVmLFxuICB0b1JlZnM6IHRvUmVmcyxcbiAgdG9WYWx1ZTogdG9WYWx1ZSxcbiAgdHJhbnNmb3JtVk5vZGVBcmdzOiB0cmFuc2Zvcm1WTm9kZUFyZ3MsXG4gIHRyaWdnZXJSZWY6IHRyaWdnZXJSZWYsXG4gIHVucmVmOiB1bnJlZixcbiAgdXNlQXR0cnM6IHVzZUF0dHJzLFxuICB1c2VDc3NNb2R1bGU6IHVzZUNzc01vZHVsZSxcbiAgdXNlQ3NzVmFyczogdXNlQ3NzVmFycyxcbiAgdXNlSG9zdDogdXNlSG9zdCxcbiAgdXNlSWQ6IHVzZUlkLFxuICB1c2VNb2RlbDogdXNlTW9kZWwsXG4gIHVzZVNTUkNvbnRleHQ6IHVzZVNTUkNvbnRleHQsXG4gIHVzZVNoYWRvd1Jvb3Q6IHVzZVNoYWRvd1Jvb3QsXG4gIHVzZVNsb3RzOiB1c2VTbG90cyxcbiAgdXNlVGVtcGxhdGVSZWY6IHVzZVRlbXBsYXRlUmVmLFxuICB1c2VUcmFuc2l0aW9uU3RhdGU6IHVzZVRyYW5zaXRpb25TdGF0ZSxcbiAgdk1vZGVsQ2hlY2tib3g6IHZNb2RlbENoZWNrYm94LFxuICB2TW9kZWxEeW5hbWljOiB2TW9kZWxEeW5hbWljLFxuICB2TW9kZWxSYWRpbzogdk1vZGVsUmFkaW8sXG4gIHZNb2RlbFNlbGVjdDogdk1vZGVsU2VsZWN0LFxuICB2TW9kZWxUZXh0OiB2TW9kZWxUZXh0LFxuICB2U2hvdzogdlNob3csXG4gIHZlcnNpb246IHZlcnNpb24sXG4gIHdhcm46IHdhcm4sXG4gIHdhdGNoOiB3YXRjaCxcbiAgd2F0Y2hFZmZlY3Q6IHdhdGNoRWZmZWN0LFxuICB3YXRjaFBvc3RFZmZlY3Q6IHdhdGNoUG9zdEVmZmVjdCxcbiAgd2F0Y2hTeW5jRWZmZWN0OiB3YXRjaFN5bmNFZmZlY3QsXG4gIHdpdGhBc3luY0NvbnRleHQ6IHdpdGhBc3luY0NvbnRleHQsXG4gIHdpdGhDdHg6IHdpdGhDdHgsXG4gIHdpdGhEZWZhdWx0czogd2l0aERlZmF1bHRzLFxuICB3aXRoRGlyZWN0aXZlczogd2l0aERpcmVjdGl2ZXMsXG4gIHdpdGhLZXlzOiB3aXRoS2V5cyxcbiAgd2l0aE1lbW86IHdpdGhNZW1vLFxuICB3aXRoTW9kaWZpZXJzOiB3aXRoTW9kaWZpZXJzLFxuICB3aXRoU2NvcGVJZDogd2l0aFNjb3BlSWRcbn0pO1xuXG5mdW5jdGlvbiBpbml0RGV2KCkge1xuICB7XG4gICAge1xuICAgICAgY29uc29sZS5pbmZvKFxuICAgICAgICBgWW91IGFyZSBydW5uaW5nIGEgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgVnVlLlxuTWFrZSBzdXJlIHRvIHVzZSB0aGUgcHJvZHVjdGlvbiBidWlsZCAoKi5wcm9kLmpzKSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5gXG4gICAgICApO1xuICAgIH1cbiAgICBpbml0Q3VzdG9tRm9ybWF0dGVyKCk7XG4gIH1cbn1cblxuY29uc3QgRlJBR01FTlQgPSBTeW1ib2woYEZyYWdtZW50YCApO1xuY29uc3QgVEVMRVBPUlQgPSBTeW1ib2woYFRlbGVwb3J0YCApO1xuY29uc3QgU1VTUEVOU0UgPSBTeW1ib2woYFN1c3BlbnNlYCApO1xuY29uc3QgS0VFUF9BTElWRSA9IFN5bWJvbChgS2VlcEFsaXZlYCApO1xuY29uc3QgQkFTRV9UUkFOU0lUSU9OID0gU3ltYm9sKFxuICBgQmFzZVRyYW5zaXRpb25gIFxuKTtcbmNvbnN0IE9QRU5fQkxPQ0sgPSBTeW1ib2woYG9wZW5CbG9ja2AgKTtcbmNvbnN0IENSRUFURV9CTE9DSyA9IFN5bWJvbChgY3JlYXRlQmxvY2tgICk7XG5jb25zdCBDUkVBVEVfRUxFTUVOVF9CTE9DSyA9IFN5bWJvbChcbiAgYGNyZWF0ZUVsZW1lbnRCbG9ja2AgXG4pO1xuY29uc3QgQ1JFQVRFX1ZOT0RFID0gU3ltYm9sKGBjcmVhdGVWTm9kZWAgKTtcbmNvbnN0IENSRUFURV9FTEVNRU5UX1ZOT0RFID0gU3ltYm9sKFxuICBgY3JlYXRlRWxlbWVudFZOb2RlYCBcbik7XG5jb25zdCBDUkVBVEVfQ09NTUVOVCA9IFN5bWJvbChcbiAgYGNyZWF0ZUNvbW1lbnRWTm9kZWAgXG4pO1xuY29uc3QgQ1JFQVRFX1RFWFQgPSBTeW1ib2woXG4gIGBjcmVhdGVUZXh0Vk5vZGVgIFxuKTtcbmNvbnN0IENSRUFURV9TVEFUSUMgPSBTeW1ib2woXG4gIGBjcmVhdGVTdGF0aWNWTm9kZWAgXG4pO1xuY29uc3QgUkVTT0xWRV9DT01QT05FTlQgPSBTeW1ib2woXG4gIGByZXNvbHZlQ29tcG9uZW50YCBcbik7XG5jb25zdCBSRVNPTFZFX0RZTkFNSUNfQ09NUE9ORU5UID0gU3ltYm9sKFxuICBgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnRgIFxuKTtcbmNvbnN0IFJFU09MVkVfRElSRUNUSVZFID0gU3ltYm9sKFxuICBgcmVzb2x2ZURpcmVjdGl2ZWAgXG4pO1xuY29uc3QgUkVTT0xWRV9GSUxURVIgPSBTeW1ib2woXG4gIGByZXNvbHZlRmlsdGVyYCBcbik7XG5jb25zdCBXSVRIX0RJUkVDVElWRVMgPSBTeW1ib2woXG4gIGB3aXRoRGlyZWN0aXZlc2AgXG4pO1xuY29uc3QgUkVOREVSX0xJU1QgPSBTeW1ib2woYHJlbmRlckxpc3RgICk7XG5jb25zdCBSRU5ERVJfU0xPVCA9IFN5bWJvbChgcmVuZGVyU2xvdGAgKTtcbmNvbnN0IENSRUFURV9TTE9UUyA9IFN5bWJvbChgY3JlYXRlU2xvdHNgICk7XG5jb25zdCBUT19ESVNQTEFZX1NUUklORyA9IFN5bWJvbChcbiAgYHRvRGlzcGxheVN0cmluZ2AgXG4pO1xuY29uc3QgTUVSR0VfUFJPUFMgPSBTeW1ib2woYG1lcmdlUHJvcHNgICk7XG5jb25zdCBOT1JNQUxJWkVfQ0xBU1MgPSBTeW1ib2woXG4gIGBub3JtYWxpemVDbGFzc2AgXG4pO1xuY29uc3QgTk9STUFMSVpFX1NUWUxFID0gU3ltYm9sKFxuICBgbm9ybWFsaXplU3R5bGVgIFxuKTtcbmNvbnN0IE5PUk1BTElaRV9QUk9QUyA9IFN5bWJvbChcbiAgYG5vcm1hbGl6ZVByb3BzYCBcbik7XG5jb25zdCBHVUFSRF9SRUFDVElWRV9QUk9QUyA9IFN5bWJvbChcbiAgYGd1YXJkUmVhY3RpdmVQcm9wc2AgXG4pO1xuY29uc3QgVE9fSEFORExFUlMgPSBTeW1ib2woYHRvSGFuZGxlcnNgICk7XG5jb25zdCBDQU1FTElaRSA9IFN5bWJvbChgY2FtZWxpemVgICk7XG5jb25zdCBDQVBJVEFMSVpFID0gU3ltYm9sKGBjYXBpdGFsaXplYCApO1xuY29uc3QgVE9fSEFORExFUl9LRVkgPSBTeW1ib2woXG4gIGB0b0hhbmRsZXJLZXlgIFxuKTtcbmNvbnN0IFNFVF9CTE9DS19UUkFDS0lORyA9IFN5bWJvbChcbiAgYHNldEJsb2NrVHJhY2tpbmdgIFxuKTtcbmNvbnN0IFBVU0hfU0NPUEVfSUQgPSBTeW1ib2woYHB1c2hTY29wZUlkYCApO1xuY29uc3QgUE9QX1NDT1BFX0lEID0gU3ltYm9sKGBwb3BTY29wZUlkYCApO1xuY29uc3QgV0lUSF9DVFggPSBTeW1ib2woYHdpdGhDdHhgICk7XG5jb25zdCBVTlJFRiA9IFN5bWJvbChgdW5yZWZgICk7XG5jb25zdCBJU19SRUYgPSBTeW1ib2woYGlzUmVmYCApO1xuY29uc3QgV0lUSF9NRU1PID0gU3ltYm9sKGB3aXRoTWVtb2AgKTtcbmNvbnN0IElTX01FTU9fU0FNRSA9IFN5bWJvbChgaXNNZW1vU2FtZWAgKTtcbmNvbnN0IGhlbHBlck5hbWVNYXAgPSB7XG4gIFtGUkFHTUVOVF06IGBGcmFnbWVudGAsXG4gIFtURUxFUE9SVF06IGBUZWxlcG9ydGAsXG4gIFtTVVNQRU5TRV06IGBTdXNwZW5zZWAsXG4gIFtLRUVQX0FMSVZFXTogYEtlZXBBbGl2ZWAsXG4gIFtCQVNFX1RSQU5TSVRJT05dOiBgQmFzZVRyYW5zaXRpb25gLFxuICBbT1BFTl9CTE9DS106IGBvcGVuQmxvY2tgLFxuICBbQ1JFQVRFX0JMT0NLXTogYGNyZWF0ZUJsb2NrYCxcbiAgW0NSRUFURV9FTEVNRU5UX0JMT0NLXTogYGNyZWF0ZUVsZW1lbnRCbG9ja2AsXG4gIFtDUkVBVEVfVk5PREVdOiBgY3JlYXRlVk5vZGVgLFxuICBbQ1JFQVRFX0VMRU1FTlRfVk5PREVdOiBgY3JlYXRlRWxlbWVudFZOb2RlYCxcbiAgW0NSRUFURV9DT01NRU5UXTogYGNyZWF0ZUNvbW1lbnRWTm9kZWAsXG4gIFtDUkVBVEVfVEVYVF06IGBjcmVhdGVUZXh0Vk5vZGVgLFxuICBbQ1JFQVRFX1NUQVRJQ106IGBjcmVhdGVTdGF0aWNWTm9kZWAsXG4gIFtSRVNPTFZFX0NPTVBPTkVOVF06IGByZXNvbHZlQ29tcG9uZW50YCxcbiAgW1JFU09MVkVfRFlOQU1JQ19DT01QT05FTlRdOiBgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnRgLFxuICBbUkVTT0xWRV9ESVJFQ1RJVkVdOiBgcmVzb2x2ZURpcmVjdGl2ZWAsXG4gIFtSRVNPTFZFX0ZJTFRFUl06IGByZXNvbHZlRmlsdGVyYCxcbiAgW1dJVEhfRElSRUNUSVZFU106IGB3aXRoRGlyZWN0aXZlc2AsXG4gIFtSRU5ERVJfTElTVF06IGByZW5kZXJMaXN0YCxcbiAgW1JFTkRFUl9TTE9UXTogYHJlbmRlclNsb3RgLFxuICBbQ1JFQVRFX1NMT1RTXTogYGNyZWF0ZVNsb3RzYCxcbiAgW1RPX0RJU1BMQVlfU1RSSU5HXTogYHRvRGlzcGxheVN0cmluZ2AsXG4gIFtNRVJHRV9QUk9QU106IGBtZXJnZVByb3BzYCxcbiAgW05PUk1BTElaRV9DTEFTU106IGBub3JtYWxpemVDbGFzc2AsXG4gIFtOT1JNQUxJWkVfU1RZTEVdOiBgbm9ybWFsaXplU3R5bGVgLFxuICBbTk9STUFMSVpFX1BST1BTXTogYG5vcm1hbGl6ZVByb3BzYCxcbiAgW0dVQVJEX1JFQUNUSVZFX1BST1BTXTogYGd1YXJkUmVhY3RpdmVQcm9wc2AsXG4gIFtUT19IQU5ETEVSU106IGB0b0hhbmRsZXJzYCxcbiAgW0NBTUVMSVpFXTogYGNhbWVsaXplYCxcbiAgW0NBUElUQUxJWkVdOiBgY2FwaXRhbGl6ZWAsXG4gIFtUT19IQU5ETEVSX0tFWV06IGB0b0hhbmRsZXJLZXlgLFxuICBbU0VUX0JMT0NLX1RSQUNLSU5HXTogYHNldEJsb2NrVHJhY2tpbmdgLFxuICBbUFVTSF9TQ09QRV9JRF06IGBwdXNoU2NvcGVJZGAsXG4gIFtQT1BfU0NPUEVfSURdOiBgcG9wU2NvcGVJZGAsXG4gIFtXSVRIX0NUWF06IGB3aXRoQ3R4YCxcbiAgW1VOUkVGXTogYHVucmVmYCxcbiAgW0lTX1JFRl06IGBpc1JlZmAsXG4gIFtXSVRIX01FTU9dOiBgd2l0aE1lbW9gLFxuICBbSVNfTUVNT19TQU1FXTogYGlzTWVtb1NhbWVgXG59O1xuZnVuY3Rpb24gcmVnaXN0ZXJSdW50aW1lSGVscGVycyhoZWxwZXJzKSB7XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaGVscGVycykuZm9yRWFjaCgocykgPT4ge1xuICAgIGhlbHBlck5hbWVNYXBbc10gPSBoZWxwZXJzW3NdO1xuICB9KTtcbn1cblxuY29uc3QgbG9jU3R1YiA9IHtcbiAgc3RhcnQ6IHsgbGluZTogMSwgY29sdW1uOiAxLCBvZmZzZXQ6IDAgfSxcbiAgZW5kOiB7IGxpbmU6IDEsIGNvbHVtbjogMSwgb2Zmc2V0OiAwIH0sXG4gIHNvdXJjZTogXCJcIlxufTtcbmZ1bmN0aW9uIGNyZWF0ZVJvb3QoY2hpbGRyZW4sIHNvdXJjZSA9IFwiXCIpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAwLFxuICAgIHNvdXJjZSxcbiAgICBjaGlsZHJlbixcbiAgICBoZWxwZXJzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLFxuICAgIGNvbXBvbmVudHM6IFtdLFxuICAgIGRpcmVjdGl2ZXM6IFtdLFxuICAgIGhvaXN0czogW10sXG4gICAgaW1wb3J0czogW10sXG4gICAgY2FjaGVkOiBbXSxcbiAgICB0ZW1wczogMCxcbiAgICBjb2RlZ2VuTm9kZTogdm9pZCAwLFxuICAgIGxvYzogbG9jU3R1YlxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlVk5vZGVDYWxsKGNvbnRleHQsIHRhZywgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgZGlyZWN0aXZlcywgaXNCbG9jayA9IGZhbHNlLCBkaXNhYmxlVHJhY2tpbmcgPSBmYWxzZSwgaXNDb21wb25lbnQgPSBmYWxzZSwgbG9jID0gbG9jU3R1Yikge1xuICBpZiAoY29udGV4dCkge1xuICAgIGlmIChpc0Jsb2NrKSB7XG4gICAgICBjb250ZXh0LmhlbHBlcihPUEVOX0JMT0NLKTtcbiAgICAgIGNvbnRleHQuaGVscGVyKGdldFZOb2RlQmxvY2tIZWxwZXIoY29udGV4dC5pblNTUiwgaXNDb21wb25lbnQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGV4dC5oZWxwZXIoZ2V0Vk5vZGVIZWxwZXIoY29udGV4dC5pblNTUiwgaXNDb21wb25lbnQpKTtcbiAgICB9XG4gICAgaWYgKGRpcmVjdGl2ZXMpIHtcbiAgICAgIGNvbnRleHQuaGVscGVyKFdJVEhfRElSRUNUSVZFUyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogMTMsXG4gICAgdGFnLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIHBhdGNoRmxhZyxcbiAgICBkeW5hbWljUHJvcHMsXG4gICAgZGlyZWN0aXZlcyxcbiAgICBpc0Jsb2NrLFxuICAgIGRpc2FibGVUcmFja2luZyxcbiAgICBpc0NvbXBvbmVudCxcbiAgICBsb2NcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5RXhwcmVzc2lvbihlbGVtZW50cywgbG9jID0gbG9jU3R1Yikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IDE3LFxuICAgIGxvYyxcbiAgICBlbGVtZW50c1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0RXhwcmVzc2lvbihwcm9wZXJ0aWVzLCBsb2MgPSBsb2NTdHViKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogMTUsXG4gICAgbG9jLFxuICAgIHByb3BlcnRpZXNcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdFByb3BlcnR5KGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAxNixcbiAgICBsb2M6IGxvY1N0dWIsXG4gICAga2V5OiBpc1N0cmluZyhrZXkpID8gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihrZXksIHRydWUpIDoga2V5LFxuICAgIHZhbHVlXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGNvbnRlbnQsIGlzU3RhdGljID0gZmFsc2UsIGxvYyA9IGxvY1N0dWIsIGNvbnN0VHlwZSA9IDApIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiA0LFxuICAgIGxvYyxcbiAgICBjb250ZW50LFxuICAgIGlzU3RhdGljLFxuICAgIGNvbnN0VHlwZTogaXNTdGF0aWMgPyAzIDogY29uc3RUeXBlXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVDb21wb3VuZEV4cHJlc3Npb24oY2hpbGRyZW4sIGxvYyA9IGxvY1N0dWIpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiA4LFxuICAgIGxvYyxcbiAgICBjaGlsZHJlblxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQ2FsbEV4cHJlc3Npb24oY2FsbGVlLCBhcmdzID0gW10sIGxvYyA9IGxvY1N0dWIpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAxNCxcbiAgICBsb2MsXG4gICAgY2FsbGVlLFxuICAgIGFyZ3VtZW50czogYXJnc1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb25FeHByZXNzaW9uKHBhcmFtcywgcmV0dXJucyA9IHZvaWQgMCwgbmV3bGluZSA9IGZhbHNlLCBpc1Nsb3QgPSBmYWxzZSwgbG9jID0gbG9jU3R1Yikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IDE4LFxuICAgIHBhcmFtcyxcbiAgICByZXR1cm5zLFxuICAgIG5ld2xpbmUsXG4gICAgaXNTbG90LFxuICAgIGxvY1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQ29uZGl0aW9uYWxFeHByZXNzaW9uKHRlc3QsIGNvbnNlcXVlbnQsIGFsdGVybmF0ZSwgbmV3bGluZSA9IHRydWUpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAxOSxcbiAgICB0ZXN0LFxuICAgIGNvbnNlcXVlbnQsXG4gICAgYWx0ZXJuYXRlLFxuICAgIG5ld2xpbmUsXG4gICAgbG9jOiBsb2NTdHViXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVDYWNoZUV4cHJlc3Npb24oaW5kZXgsIHZhbHVlLCBuZWVkUGF1c2VUcmFja2luZyA9IGZhbHNlLCBpblZPbmNlID0gZmFsc2UpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAyMCxcbiAgICBpbmRleCxcbiAgICB2YWx1ZSxcbiAgICBuZWVkUGF1c2VUcmFja2luZyxcbiAgICBpblZPbmNlLFxuICAgIG5lZWRBcnJheVNwcmVhZDogZmFsc2UsXG4gICAgbG9jOiBsb2NTdHViXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVCbG9ja1N0YXRlbWVudChib2R5KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogMjEsXG4gICAgYm9keSxcbiAgICBsb2M6IGxvY1N0dWJcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFZOb2RlSGVscGVyKHNzciwgaXNDb21wb25lbnQpIHtcbiAgcmV0dXJuIHNzciB8fCBpc0NvbXBvbmVudCA/IENSRUFURV9WTk9ERSA6IENSRUFURV9FTEVNRU5UX1ZOT0RFO1xufVxuZnVuY3Rpb24gZ2V0Vk5vZGVCbG9ja0hlbHBlcihzc3IsIGlzQ29tcG9uZW50KSB7XG4gIHJldHVybiBzc3IgfHwgaXNDb21wb25lbnQgPyBDUkVBVEVfQkxPQ0sgOiBDUkVBVEVfRUxFTUVOVF9CTE9DSztcbn1cbmZ1bmN0aW9uIGNvbnZlcnRUb0Jsb2NrKG5vZGUsIHsgaGVscGVyLCByZW1vdmVIZWxwZXIsIGluU1NSIH0pIHtcbiAgaWYgKCFub2RlLmlzQmxvY2spIHtcbiAgICBub2RlLmlzQmxvY2sgPSB0cnVlO1xuICAgIHJlbW92ZUhlbHBlcihnZXRWTm9kZUhlbHBlcihpblNTUiwgbm9kZS5pc0NvbXBvbmVudCkpO1xuICAgIGhlbHBlcihPUEVOX0JMT0NLKTtcbiAgICBoZWxwZXIoZ2V0Vk5vZGVCbG9ja0hlbHBlcihpblNTUiwgbm9kZS5pc0NvbXBvbmVudCkpO1xuICB9XG59XG5cbmNvbnN0IGRlZmF1bHREZWxpbWl0ZXJzT3BlbiA9IG5ldyBVaW50OEFycmF5KFsxMjMsIDEyM10pO1xuY29uc3QgZGVmYXVsdERlbGltaXRlcnNDbG9zZSA9IG5ldyBVaW50OEFycmF5KFsxMjUsIDEyNV0pO1xuZnVuY3Rpb24gaXNUYWdTdGFydENoYXIoYykge1xuICByZXR1cm4gYyA+PSA5NyAmJiBjIDw9IDEyMiB8fCBjID49IDY1ICYmIGMgPD0gOTA7XG59XG5mdW5jdGlvbiBpc1doaXRlc3BhY2UoYykge1xuICByZXR1cm4gYyA9PT0gMzIgfHwgYyA9PT0gMTAgfHwgYyA9PT0gOSB8fCBjID09PSAxMiB8fCBjID09PSAxMztcbn1cbmZ1bmN0aW9uIGlzRW5kT2ZUYWdTZWN0aW9uKGMpIHtcbiAgcmV0dXJuIGMgPT09IDQ3IHx8IGMgPT09IDYyIHx8IGlzV2hpdGVzcGFjZShjKTtcbn1cbmZ1bmN0aW9uIHRvQ2hhckNvZGVzKHN0cikge1xuICBjb25zdCByZXQgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICByZXRbaV0gPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuY29uc3QgU2VxdWVuY2VzID0ge1xuICBDZGF0YTogbmV3IFVpbnQ4QXJyYXkoWzY3LCA2OCwgNjUsIDg0LCA2NSwgOTFdKSxcbiAgLy8gQ0RBVEFbXG4gIENkYXRhRW5kOiBuZXcgVWludDhBcnJheShbOTMsIDkzLCA2Ml0pLFxuICAvLyBdXT5cbiAgQ29tbWVudEVuZDogbmV3IFVpbnQ4QXJyYXkoWzQ1LCA0NSwgNjJdKSxcbiAgLy8gYC0tPmBcbiAgU2NyaXB0RW5kOiBuZXcgVWludDhBcnJheShbNjAsIDQ3LCAxMTUsIDk5LCAxMTQsIDEwNSwgMTEyLCAxMTZdKSxcbiAgLy8gYDxcXC9zY3JpcHRgXG4gIFN0eWxlRW5kOiBuZXcgVWludDhBcnJheShbNjAsIDQ3LCAxMTUsIDExNiwgMTIxLCAxMDgsIDEwMV0pLFxuICAvLyBgPC9zdHlsZWBcbiAgVGl0bGVFbmQ6IG5ldyBVaW50OEFycmF5KFs2MCwgNDcsIDExNiwgMTA1LCAxMTYsIDEwOCwgMTAxXSksXG4gIC8vIGA8L3RpdGxlYFxuICBUZXh0YXJlYUVuZDogbmV3IFVpbnQ4QXJyYXkoW1xuICAgIDYwLFxuICAgIDQ3LFxuICAgIDExNixcbiAgICAxMDEsXG4gICAgMTIwLFxuICAgIDExNixcbiAgICA5NyxcbiAgICAxMTQsXG4gICAgMTAxLFxuICAgIDk3XG4gIF0pXG4gIC8vIGA8L3RleHRhcmVhXG59O1xuY2xhc3MgVG9rZW5pemVyIHtcbiAgY29uc3RydWN0b3Ioc3RhY2ssIGNicykge1xuICAgIHRoaXMuc3RhY2sgPSBzdGFjaztcbiAgICB0aGlzLmNicyA9IGNicztcbiAgICAvKiogVGhlIGN1cnJlbnQgc3RhdGUgdGhlIHRva2VuaXplciBpcyBpbi4gKi9cbiAgICB0aGlzLnN0YXRlID0gMTtcbiAgICAvKiogVGhlIHJlYWQgYnVmZmVyLiAqL1xuICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICAvKiogVGhlIGJlZ2lubmluZyBvZiB0aGUgc2VjdGlvbiB0aGF0IGlzIGN1cnJlbnRseSBiZWluZyByZWFkLiAqL1xuICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gMDtcbiAgICAvKiogVGhlIGluZGV4IHdpdGhpbiB0aGUgYnVmZmVyIHRoYXQgd2UgYXJlIGN1cnJlbnRseSBsb29raW5nIGF0LiAqL1xuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIC8qKiBUaGUgc3RhcnQgb2YgdGhlIGxhc3QgZW50aXR5LiAqL1xuICAgIHRoaXMuZW50aXR5U3RhcnQgPSAwO1xuICAgIC8qKiBTb21lIGJlaGF2aW9yLCBlZy4gd2hlbiBkZWNvZGluZyBlbnRpdGllcywgaXMgZG9uZSB3aGlsZSB3ZSBhcmUgaW4gYW5vdGhlciBzdGF0ZS4gVGhpcyBrZWVwcyB0cmFjayBvZiB0aGUgb3RoZXIgc3RhdGUgdHlwZS4gKi9cbiAgICB0aGlzLmJhc2VTdGF0ZSA9IDE7XG4gICAgLyoqIEZvciBzcGVjaWFsIHBhcnNpbmcgYmVoYXZpb3IgaW5zaWRlIG9mIHNjcmlwdCBhbmQgc3R5bGUgdGFncy4gKi9cbiAgICB0aGlzLmluUkNEQVRBID0gZmFsc2U7XG4gICAgLyoqIEZvciBkaXNhYmxpbmcgUkNEQVRBIHRhZ3MgaGFuZGxpbmcgKi9cbiAgICB0aGlzLmluWE1MID0gZmFsc2U7XG4gICAgLyoqIEZvciBkaXNhYmxpbmcgaW50ZXJwb2xhdGlvbiBwYXJzaW5nIGluIHYtcHJlICovXG4gICAgdGhpcy5pblZQcmUgPSBmYWxzZTtcbiAgICAvKiogUmVjb3JkIG5ld2xpbmUgcG9zaXRpb25zIGZvciBmYXN0IGxpbmUgLyBjb2x1bW4gY2FsY3VsYXRpb24gKi9cbiAgICB0aGlzLm5ld2xpbmVzID0gW107XG4gICAgdGhpcy5tb2RlID0gMDtcbiAgICB0aGlzLmRlbGltaXRlck9wZW4gPSBkZWZhdWx0RGVsaW1pdGVyc09wZW47XG4gICAgdGhpcy5kZWxpbWl0ZXJDbG9zZSA9IGRlZmF1bHREZWxpbWl0ZXJzQ2xvc2U7XG4gICAgdGhpcy5kZWxpbWl0ZXJJbmRleCA9IC0xO1xuICAgIHRoaXMuY3VycmVudFNlcXVlbmNlID0gdm9pZCAwO1xuICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDA7XG4gIH1cbiAgZ2V0IGluU0ZDUm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlID09PSAyICYmIHRoaXMuc3RhY2subGVuZ3RoID09PSAwO1xuICB9XG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc3RhdGUgPSAxO1xuICAgIHRoaXMubW9kZSA9IDA7XG4gICAgdGhpcy5idWZmZXIgPSBcIlwiO1xuICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gMDtcbiAgICB0aGlzLmluZGV4ID0gMDtcbiAgICB0aGlzLmJhc2VTdGF0ZSA9IDE7XG4gICAgdGhpcy5pblJDREFUQSA9IGZhbHNlO1xuICAgIHRoaXMuY3VycmVudFNlcXVlbmNlID0gdm9pZCAwO1xuICAgIHRoaXMubmV3bGluZXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLmRlbGltaXRlck9wZW4gPSBkZWZhdWx0RGVsaW1pdGVyc09wZW47XG4gICAgdGhpcy5kZWxpbWl0ZXJDbG9zZSA9IGRlZmF1bHREZWxpbWl0ZXJzQ2xvc2U7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlIFBvc2l0aW9uIG9iamVjdCB3aXRoIGxpbmUgLyBjb2x1bW4gaW5mb3JtYXRpb24gdXNpbmcgcmVjb3JkZWRcbiAgICogbmV3bGluZSBwb3NpdGlvbnMuIFdlIGtub3cgdGhlIGluZGV4IGlzIGFsd2F5cyBnb2luZyB0byBiZSBhbiBhbHJlYWR5XG4gICAqIHByb2Nlc3NlZCBpbmRleCwgc28gYWxsIHRoZSBuZXdsaW5lcyB1cCB0byB0aGlzIGluZGV4IHNob3VsZCBoYXZlIGJlZW5cbiAgICogcmVjb3JkZWQuXG4gICAqL1xuICBnZXRQb3MoaW5kZXgpIHtcbiAgICBsZXQgbGluZSA9IDE7XG4gICAgbGV0IGNvbHVtbiA9IGluZGV4ICsgMTtcbiAgICBmb3IgKGxldCBpID0gdGhpcy5uZXdsaW5lcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgbmV3bGluZUluZGV4ID0gdGhpcy5uZXdsaW5lc1tpXTtcbiAgICAgIGlmIChpbmRleCA+IG5ld2xpbmVJbmRleCkge1xuICAgICAgICBsaW5lID0gaSArIDI7XG4gICAgICAgIGNvbHVtbiA9IGluZGV4IC0gbmV3bGluZUluZGV4O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbHVtbixcbiAgICAgIGxpbmUsXG4gICAgICBvZmZzZXQ6IGluZGV4XG4gICAgfTtcbiAgfVxuICBwZWVrKCkge1xuICAgIHJldHVybiB0aGlzLmJ1ZmZlci5jaGFyQ29kZUF0KHRoaXMuaW5kZXggKyAxKTtcbiAgfVxuICBzdGF0ZVRleHQoYykge1xuICAgIGlmIChjID09PSA2MCkge1xuICAgICAgaWYgKHRoaXMuaW5kZXggPiB0aGlzLnNlY3Rpb25TdGFydCkge1xuICAgICAgICB0aGlzLmNicy5vbnRleHQodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgfVxuICAgICAgdGhpcy5zdGF0ZSA9IDU7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgfSBlbHNlIGlmICghdGhpcy5pblZQcmUgJiYgYyA9PT0gdGhpcy5kZWxpbWl0ZXJPcGVuWzBdKSB7XG4gICAgICB0aGlzLnN0YXRlID0gMjtcbiAgICAgIHRoaXMuZGVsaW1pdGVySW5kZXggPSAwO1xuICAgICAgdGhpcy5zdGF0ZUludGVycG9sYXRpb25PcGVuKGMpO1xuICAgIH1cbiAgfVxuICBzdGF0ZUludGVycG9sYXRpb25PcGVuKGMpIHtcbiAgICBpZiAoYyA9PT0gdGhpcy5kZWxpbWl0ZXJPcGVuW3RoaXMuZGVsaW1pdGVySW5kZXhdKSB7XG4gICAgICBpZiAodGhpcy5kZWxpbWl0ZXJJbmRleCA9PT0gdGhpcy5kZWxpbWl0ZXJPcGVuLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLmluZGV4ICsgMSAtIHRoaXMuZGVsaW1pdGVyT3Blbi5sZW5ndGg7XG4gICAgICAgIGlmIChzdGFydCA+IHRoaXMuc2VjdGlvblN0YXJ0KSB7XG4gICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuc2VjdGlvblN0YXJ0LCBzdGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IDM7XG4gICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gc3RhcnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRlbGltaXRlckluZGV4Kys7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmluUkNEQVRBKSB7XG4gICAgICB0aGlzLnN0YXRlID0gMzI7XG4gICAgICB0aGlzLnN0YXRlSW5SQ0RBVEEoYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAxO1xuICAgICAgdGhpcy5zdGF0ZVRleHQoYyk7XG4gICAgfVxuICB9XG4gIHN0YXRlSW50ZXJwb2xhdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IHRoaXMuZGVsaW1pdGVyQ2xvc2VbMF0pIHtcbiAgICAgIHRoaXMuc3RhdGUgPSA0O1xuICAgICAgdGhpcy5kZWxpbWl0ZXJJbmRleCA9IDA7XG4gICAgICB0aGlzLnN0YXRlSW50ZXJwb2xhdGlvbkNsb3NlKGMpO1xuICAgIH1cbiAgfVxuICBzdGF0ZUludGVycG9sYXRpb25DbG9zZShjKSB7XG4gICAgaWYgKGMgPT09IHRoaXMuZGVsaW1pdGVyQ2xvc2VbdGhpcy5kZWxpbWl0ZXJJbmRleF0pIHtcbiAgICAgIGlmICh0aGlzLmRlbGltaXRlckluZGV4ID09PSB0aGlzLmRlbGltaXRlckNsb3NlLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy5jYnMub25pbnRlcnBvbGF0aW9uKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4ICsgMSk7XG4gICAgICAgIGlmICh0aGlzLmluUkNEQVRBKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IDMyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRlbGltaXRlckluZGV4Kys7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAzO1xuICAgICAgdGhpcy5zdGF0ZUludGVycG9sYXRpb24oYyk7XG4gICAgfVxuICB9XG4gIHN0YXRlU3BlY2lhbFN0YXJ0U2VxdWVuY2UoYykge1xuICAgIGNvbnN0IGlzRW5kID0gdGhpcy5zZXF1ZW5jZUluZGV4ID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZS5sZW5ndGg7XG4gICAgY29uc3QgaXNNYXRjaCA9IGlzRW5kID8gKFxuICAgICAgLy8gSWYgd2UgYXJlIGF0IHRoZSBlbmQgb2YgdGhlIHNlcXVlbmNlLCBtYWtlIHN1cmUgdGhlIHRhZyBuYW1lIGhhcyBlbmRlZFxuICAgICAgaXNFbmRPZlRhZ1NlY3Rpb24oYylcbiAgICApIDogKFxuICAgICAgLy8gT3RoZXJ3aXNlLCBkbyBhIGNhc2UtaW5zZW5zaXRpdmUgY29tcGFyaXNvblxuICAgICAgKGMgfCAzMikgPT09IHRoaXMuY3VycmVudFNlcXVlbmNlW3RoaXMuc2VxdWVuY2VJbmRleF1cbiAgICApO1xuICAgIGlmICghaXNNYXRjaCkge1xuICAgICAgdGhpcy5pblJDREFUQSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWlzRW5kKSB7XG4gICAgICB0aGlzLnNlcXVlbmNlSW5kZXgrKztcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICB0aGlzLnN0YXRlID0gNjtcbiAgICB0aGlzLnN0YXRlSW5UYWdOYW1lKGMpO1xuICB9XG4gIC8qKiBMb29rIGZvciBhbiBlbmQgdGFnLiBGb3IgPHRpdGxlPiBhbmQgPHRleHRhcmVhPiwgYWxzbyBkZWNvZGUgZW50aXRpZXMuICovXG4gIHN0YXRlSW5SQ0RBVEEoYykge1xuICAgIGlmICh0aGlzLnNlcXVlbmNlSW5kZXggPT09IHRoaXMuY3VycmVudFNlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgaWYgKGMgPT09IDYyIHx8IGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICBjb25zdCBlbmRPZlRleHQgPSB0aGlzLmluZGV4IC0gdGhpcy5jdXJyZW50U2VxdWVuY2UubGVuZ3RoO1xuICAgICAgICBpZiAodGhpcy5zZWN0aW9uU3RhcnQgPCBlbmRPZlRleHQpIHtcbiAgICAgICAgICBjb25zdCBhY3R1YWxJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgdGhpcy5pbmRleCA9IGVuZE9mVGV4dDtcbiAgICAgICAgICB0aGlzLmNicy5vbnRleHQodGhpcy5zZWN0aW9uU3RhcnQsIGVuZE9mVGV4dCk7XG4gICAgICAgICAgdGhpcy5pbmRleCA9IGFjdHVhbEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gZW5kT2ZUZXh0ICsgMjtcbiAgICAgICAgdGhpcy5zdGF0ZUluQ2xvc2luZ1RhZ05hbWUoYyk7XG4gICAgICAgIHRoaXMuaW5SQ0RBVEEgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICB9XG4gICAgaWYgKChjIHwgMzIpID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZVt0aGlzLnNlcXVlbmNlSW5kZXhdKSB7XG4gICAgICB0aGlzLnNlcXVlbmNlSW5kZXggKz0gMTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2VxdWVuY2VJbmRleCA9PT0gMCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFNlcXVlbmNlID09PSBTZXF1ZW5jZXMuVGl0bGVFbmQgfHwgdGhpcy5jdXJyZW50U2VxdWVuY2UgPT09IFNlcXVlbmNlcy5UZXh0YXJlYUVuZCAmJiAhdGhpcy5pblNGQ1Jvb3QpIHtcbiAgICAgICAgaWYgKCF0aGlzLmluVlByZSAmJiBjID09PSB0aGlzLmRlbGltaXRlck9wZW5bMF0pIHtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gMjtcbiAgICAgICAgICB0aGlzLmRlbGltaXRlckluZGV4ID0gMDtcbiAgICAgICAgICB0aGlzLnN0YXRlSW50ZXJwb2xhdGlvbk9wZW4oYyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5mYXN0Rm9yd2FyZFRvKDYwKSkge1xuICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSBOdW1iZXIoYyA9PT0gNjApO1xuICAgIH1cbiAgfVxuICBzdGF0ZUNEQVRBU2VxdWVuY2UoYykge1xuICAgIGlmIChjID09PSBTZXF1ZW5jZXMuQ2RhdGFbdGhpcy5zZXF1ZW5jZUluZGV4XSkge1xuICAgICAgaWYgKCsrdGhpcy5zZXF1ZW5jZUluZGV4ID09PSBTZXF1ZW5jZXMuQ2RhdGEubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAyODtcbiAgICAgICAgdGhpcy5jdXJyZW50U2VxdWVuY2UgPSBTZXF1ZW5jZXMuQ2RhdGFFbmQ7XG4gICAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDA7XG4gICAgICB0aGlzLnN0YXRlID0gMjM7XG4gICAgICB0aGlzLnN0YXRlSW5EZWNsYXJhdGlvbihjKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gd2Ugd2FpdCBmb3Igb25lIHNwZWNpZmljIGNoYXJhY3Rlciwgd2UgY2FuIHNwZWVkIHRoaW5ncyB1cFxuICAgKiBieSBza2lwcGluZyB0aHJvdWdoIHRoZSBidWZmZXIgdW50aWwgd2UgZmluZCBpdC5cbiAgICpcbiAgICogQHJldHVybnMgV2hldGhlciB0aGUgY2hhcmFjdGVyIHdhcyBmb3VuZC5cbiAgICovXG4gIGZhc3RGb3J3YXJkVG8oYykge1xuICAgIHdoaWxlICgrK3RoaXMuaW5kZXggPCB0aGlzLmJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGNjID0gdGhpcy5idWZmZXIuY2hhckNvZGVBdCh0aGlzLmluZGV4KTtcbiAgICAgIGlmIChjYyA9PT0gMTApIHtcbiAgICAgICAgdGhpcy5uZXdsaW5lcy5wdXNoKHRoaXMuaW5kZXgpO1xuICAgICAgfVxuICAgICAgaWYgKGNjID09PSBjKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmluZGV4ID0gdGhpcy5idWZmZXIubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIENvbW1lbnRzIGFuZCBDREFUQSBlbmQgd2l0aCBgLS0+YCBhbmQgYF1dPmAuXG4gICAqXG4gICAqIFRoZWlyIGNvbW1vbiBxdWFsaXRpZXMgYXJlOlxuICAgKiAtIFRoZWlyIGVuZCBzZXF1ZW5jZXMgaGF2ZSBhIGRpc3RpbmN0IGNoYXJhY3RlciB0aGV5IHN0YXJ0IHdpdGguXG4gICAqIC0gVGhhdCBjaGFyYWN0ZXIgaXMgdGhlbiByZXBlYXRlZCwgc28gd2UgaGF2ZSB0byBjaGVjayBtdWx0aXBsZSByZXBlYXRzLlxuICAgKiAtIEFsbCBjaGFyYWN0ZXJzIGJ1dCB0aGUgc3RhcnQgY2hhcmFjdGVyIG9mIHRoZSBzZXF1ZW5jZSBjYW4gYmUgc2tpcHBlZC5cbiAgICovXG4gIHN0YXRlSW5Db21tZW50TGlrZShjKSB7XG4gICAgaWYgKGMgPT09IHRoaXMuY3VycmVudFNlcXVlbmNlW3RoaXMuc2VxdWVuY2VJbmRleF0pIHtcbiAgICAgIGlmICgrK3RoaXMuc2VxdWVuY2VJbmRleCA9PT0gdGhpcy5jdXJyZW50U2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9PT0gU2VxdWVuY2VzLkNkYXRhRW5kKSB7XG4gICAgICAgICAgdGhpcy5jYnMub25jZGF0YSh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCAtIDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2JzLm9uY29tbWVudCh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCAtIDIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5zZXF1ZW5jZUluZGV4ID09PSAwKSB7XG4gICAgICBpZiAodGhpcy5mYXN0Rm9yd2FyZFRvKHRoaXMuY3VycmVudFNlcXVlbmNlWzBdKSkge1xuICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYyAhPT0gdGhpcy5jdXJyZW50U2VxdWVuY2VbdGhpcy5zZXF1ZW5jZUluZGV4IC0gMV0pIHtcbiAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDA7XG4gICAgfVxuICB9XG4gIHN0YXJ0U3BlY2lhbChzZXF1ZW5jZSwgb2Zmc2V0KSB7XG4gICAgdGhpcy5lbnRlclJDREFUQShzZXF1ZW5jZSwgb2Zmc2V0KTtcbiAgICB0aGlzLnN0YXRlID0gMzE7XG4gIH1cbiAgZW50ZXJSQ0RBVEEoc2VxdWVuY2UsIG9mZnNldCkge1xuICAgIHRoaXMuaW5SQ0RBVEEgPSB0cnVlO1xuICAgIHRoaXMuY3VycmVudFNlcXVlbmNlID0gc2VxdWVuY2U7XG4gICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gb2Zmc2V0O1xuICB9XG4gIHN0YXRlQmVmb3JlVGFnTmFtZShjKSB7XG4gICAgaWYgKGMgPT09IDMzKSB7XG4gICAgICB0aGlzLnN0YXRlID0gMjI7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gNjMpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAyNDtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgfSBlbHNlIGlmIChpc1RhZ1N0YXJ0Q2hhcihjKSkge1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgICAgaWYgKHRoaXMubW9kZSA9PT0gMCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gNjtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pblNGQ1Jvb3QpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IDM0O1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5pblhNTCkge1xuICAgICAgICBpZiAoYyA9PT0gMTE2KSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IDMwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSBjID09PSAxMTUgPyAyOSA6IDY7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSA2O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYyA9PT0gNDcpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSA4O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXRlID0gMTtcbiAgICAgIHRoaXMuc3RhdGVUZXh0KGMpO1xuICAgIH1cbiAgfVxuICBzdGF0ZUluVGFnTmFtZShjKSB7XG4gICAgaWYgKGlzRW5kT2ZUYWdTZWN0aW9uKGMpKSB7XG4gICAgICB0aGlzLmhhbmRsZVRhZ05hbWUoYyk7XG4gICAgfVxuICB9XG4gIHN0YXRlSW5TRkNSb290VGFnTmFtZShjKSB7XG4gICAgaWYgKGlzRW5kT2ZUYWdTZWN0aW9uKGMpKSB7XG4gICAgICBjb25zdCB0YWcgPSB0aGlzLmJ1ZmZlci5zbGljZSh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICBpZiAodGFnICE9PSBcInRlbXBsYXRlXCIpIHtcbiAgICAgICAgdGhpcy5lbnRlclJDREFUQSh0b0NoYXJDb2RlcyhgPC9gICsgdGFnKSwgMCk7XG4gICAgICB9XG4gICAgICB0aGlzLmhhbmRsZVRhZ05hbWUoYyk7XG4gICAgfVxuICB9XG4gIGhhbmRsZVRhZ05hbWUoYykge1xuICAgIHRoaXMuY2JzLm9ub3BlbnRhZ25hbWUodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gLTE7XG4gICAgdGhpcy5zdGF0ZSA9IDExO1xuICAgIHRoaXMuc3RhdGVCZWZvcmVBdHRyTmFtZShjKTtcbiAgfVxuICBzdGF0ZUJlZm9yZUNsb3NpbmdUYWdOYW1lKGMpIHtcbiAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpKSA7IGVsc2UgaWYgKGMgPT09IDYyKSB7XG4gICAgICB7XG4gICAgICAgIHRoaXMuY2JzLm9uZXJyKDE0LCB0aGlzLmluZGV4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdGUgPSAxO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZSA9IGlzVGFnU3RhcnRDaGFyKGMpID8gOSA6IDI3O1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIH1cbiAgfVxuICBzdGF0ZUluQ2xvc2luZ1RhZ05hbWUoYykge1xuICAgIGlmIChjID09PSA2MiB8fCBpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgIHRoaXMuY2JzLm9uY2xvc2V0YWcodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAtMTtcbiAgICAgIHRoaXMuc3RhdGUgPSAxMDtcbiAgICAgIHRoaXMuc3RhdGVBZnRlckNsb3NpbmdUYWdOYW1lKGMpO1xuICAgIH1cbiAgfVxuICBzdGF0ZUFmdGVyQ2xvc2luZ1RhZ05hbWUoYykge1xuICAgIGlmIChjID09PSA2Mikge1xuICAgICAgdGhpcy5zdGF0ZSA9IDE7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgIH1cbiAgfVxuICBzdGF0ZUJlZm9yZUF0dHJOYW1lKGMpIHtcbiAgICBpZiAoYyA9PT0gNjIpIHtcbiAgICAgIHRoaXMuY2JzLm9ub3BlbnRhZ2VuZCh0aGlzLmluZGV4KTtcbiAgICAgIGlmICh0aGlzLmluUkNEQVRBKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAzMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAxO1xuICAgICAgfVxuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDQ3KSB7XG4gICAgICB0aGlzLnN0YXRlID0gNztcbiAgICAgIGlmICh0aGlzLnBlZWsoKSAhPT0gNjIpIHtcbiAgICAgICAgdGhpcy5jYnMub25lcnIoMjIsIHRoaXMuaW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYyA9PT0gNjAgJiYgdGhpcy5wZWVrKCkgPT09IDQ3KSB7XG4gICAgICB0aGlzLmNicy5vbm9wZW50YWdlbmQodGhpcy5pbmRleCk7XG4gICAgICB0aGlzLnN0YXRlID0gNTtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICB9IGVsc2UgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgIGlmIChjID09PSA2MSkge1xuICAgICAgICB0aGlzLmNicy5vbmVycihcbiAgICAgICAgICAxOSxcbiAgICAgICAgICB0aGlzLmluZGV4XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLmhhbmRsZUF0dHJTdGFydChjKTtcbiAgICB9XG4gIH1cbiAgaGFuZGxlQXR0clN0YXJ0KGMpIHtcbiAgICBpZiAoYyA9PT0gMTE4ICYmIHRoaXMucGVlaygpID09PSA0NSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IDEzO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gNDYgfHwgYyA9PT0gNTggfHwgYyA9PT0gNjQgfHwgYyA9PT0gMzUpIHtcbiAgICAgIHRoaXMuY2JzLm9uZGlybmFtZSh0aGlzLmluZGV4LCB0aGlzLmluZGV4ICsgMSk7XG4gICAgICB0aGlzLnN0YXRlID0gMTQ7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXRlID0gMTI7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgfVxuICB9XG4gIHN0YXRlSW5TZWxmQ2xvc2luZ1RhZyhjKSB7XG4gICAgaWYgKGMgPT09IDYyKSB7XG4gICAgICB0aGlzLmNicy5vbnNlbGZjbG9zaW5ndGFnKHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5zdGF0ZSA9IDE7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgdGhpcy5pblJDREFUQSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IDExO1xuICAgICAgdGhpcy5zdGF0ZUJlZm9yZUF0dHJOYW1lKGMpO1xuICAgIH1cbiAgfVxuICBzdGF0ZUluQXR0ck5hbWUoYykge1xuICAgIGlmIChjID09PSA2MSB8fCBpc0VuZE9mVGFnU2VjdGlvbihjKSkge1xuICAgICAgdGhpcy5jYnMub25hdHRyaWJuYW1lKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMuaGFuZGxlQXR0ck5hbWVFbmQoYyk7XG4gICAgfSBlbHNlIGlmIChjID09PSAzNCB8fCBjID09PSAzOSB8fCBjID09PSA2MCkge1xuICAgICAgdGhpcy5jYnMub25lcnIoXG4gICAgICAgIDE3LFxuICAgICAgICB0aGlzLmluZGV4XG4gICAgICApO1xuICAgIH1cbiAgfVxuICBzdGF0ZUluRGlyTmFtZShjKSB7XG4gICAgaWYgKGMgPT09IDYxIHx8IGlzRW5kT2ZUYWdTZWN0aW9uKGMpKSB7XG4gICAgICB0aGlzLmNicy5vbmRpcm5hbWUodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5oYW5kbGVBdHRyTmFtZUVuZChjKTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDU4KSB7XG4gICAgICB0aGlzLmNicy5vbmRpcm5hbWUodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5zdGF0ZSA9IDE0O1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDQ2KSB7XG4gICAgICB0aGlzLmNicy5vbmRpcm5hbWUodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5zdGF0ZSA9IDE2O1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9XG4gIH1cbiAgc3RhdGVJbkRpckFyZyhjKSB7XG4gICAgaWYgKGMgPT09IDYxIHx8IGlzRW5kT2ZUYWdTZWN0aW9uKGMpKSB7XG4gICAgICB0aGlzLmNicy5vbmRpcmFyZyh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICB0aGlzLmhhbmRsZUF0dHJOYW1lRW5kKGMpO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gOTEpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAxNTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDQ2KSB7XG4gICAgICB0aGlzLmNicy5vbmRpcmFyZyh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICB0aGlzLnN0YXRlID0gMTY7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgIH1cbiAgfVxuICBzdGF0ZUluRHluYW1pY0RpckFyZyhjKSB7XG4gICAgaWYgKGMgPT09IDkzKSB7XG4gICAgICB0aGlzLnN0YXRlID0gMTQ7XG4gICAgfSBlbHNlIGlmIChjID09PSA2MSB8fCBpc0VuZE9mVGFnU2VjdGlvbihjKSkge1xuICAgICAgdGhpcy5jYnMub25kaXJhcmcodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXggKyAxKTtcbiAgICAgIHRoaXMuaGFuZGxlQXR0ck5hbWVFbmQoYyk7XG4gICAgICB7XG4gICAgICAgIHRoaXMuY2JzLm9uZXJyKFxuICAgICAgICAgIDI3LFxuICAgICAgICAgIHRoaXMuaW5kZXhcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3RhdGVJbkRpck1vZGlmaWVyKGMpIHtcbiAgICBpZiAoYyA9PT0gNjEgfHwgaXNFbmRPZlRhZ1NlY3Rpb24oYykpIHtcbiAgICAgIHRoaXMuY2JzLm9uZGlybW9kaWZpZXIodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5oYW5kbGVBdHRyTmFtZUVuZChjKTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDQ2KSB7XG4gICAgICB0aGlzLmNicy5vbmRpcm1vZGlmaWVyKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgfVxuICB9XG4gIGhhbmRsZUF0dHJOYW1lRW5kKGMpIHtcbiAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgdGhpcy5zdGF0ZSA9IDE3O1xuICAgIHRoaXMuY2JzLm9uYXR0cmlibmFtZWVuZCh0aGlzLmluZGV4KTtcbiAgICB0aGlzLnN0YXRlQWZ0ZXJBdHRyTmFtZShjKTtcbiAgfVxuICBzdGF0ZUFmdGVyQXR0ck5hbWUoYykge1xuICAgIGlmIChjID09PSA2MSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IDE4O1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gNDcgfHwgYyA9PT0gNjIpIHtcbiAgICAgIHRoaXMuY2JzLm9uYXR0cmliZW5kKDAsIHRoaXMuc2VjdGlvblN0YXJ0KTtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gLTE7XG4gICAgICB0aGlzLnN0YXRlID0gMTE7XG4gICAgICB0aGlzLnN0YXRlQmVmb3JlQXR0ck5hbWUoYyk7XG4gICAgfSBlbHNlIGlmICghaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICB0aGlzLmNicy5vbmF0dHJpYmVuZCgwLCB0aGlzLnNlY3Rpb25TdGFydCk7XG4gICAgICB0aGlzLmhhbmRsZUF0dHJTdGFydChjKTtcbiAgICB9XG4gIH1cbiAgc3RhdGVCZWZvcmVBdHRyVmFsdWUoYykge1xuICAgIGlmIChjID09PSAzNCkge1xuICAgICAgdGhpcy5zdGF0ZSA9IDE5O1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDM5KSB7XG4gICAgICB0aGlzLnN0YXRlID0gMjA7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgIH0gZWxzZSBpZiAoIWlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgICAgdGhpcy5zdGF0ZSA9IDIxO1xuICAgICAgdGhpcy5zdGF0ZUluQXR0clZhbHVlTm9RdW90ZXMoYyk7XG4gICAgfVxuICB9XG4gIGhhbmRsZUluQXR0clZhbHVlKGMsIHF1b3RlKSB7XG4gICAgaWYgKGMgPT09IHF1b3RlIHx8IHRoaXMuZmFzdEZvcndhcmRUbyhxdW90ZSkpIHtcbiAgICAgIHRoaXMuY2JzLm9uYXR0cmliZGF0YSh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IC0xO1xuICAgICAgdGhpcy5jYnMub25hdHRyaWJlbmQoXG4gICAgICAgIHF1b3RlID09PSAzNCA/IDMgOiAyLFxuICAgICAgICB0aGlzLmluZGV4ICsgMVxuICAgICAgKTtcbiAgICAgIHRoaXMuc3RhdGUgPSAxMTtcbiAgICB9XG4gIH1cbiAgc3RhdGVJbkF0dHJWYWx1ZURvdWJsZVF1b3RlcyhjKSB7XG4gICAgdGhpcy5oYW5kbGVJbkF0dHJWYWx1ZShjLCAzNCk7XG4gIH1cbiAgc3RhdGVJbkF0dHJWYWx1ZVNpbmdsZVF1b3RlcyhjKSB7XG4gICAgdGhpcy5oYW5kbGVJbkF0dHJWYWx1ZShjLCAzOSk7XG4gIH1cbiAgc3RhdGVJbkF0dHJWYWx1ZU5vUXVvdGVzKGMpIHtcbiAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpIHx8IGMgPT09IDYyKSB7XG4gICAgICB0aGlzLmNicy5vbmF0dHJpYmRhdGEodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAtMTtcbiAgICAgIHRoaXMuY2JzLm9uYXR0cmliZW5kKDEsIHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5zdGF0ZSA9IDExO1xuICAgICAgdGhpcy5zdGF0ZUJlZm9yZUF0dHJOYW1lKGMpO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gMzQgfHwgYyA9PT0gMzkgfHwgYyA9PT0gNjAgfHwgYyA9PT0gNjEgfHwgYyA9PT0gOTYpIHtcbiAgICAgIHRoaXMuY2JzLm9uZXJyKFxuICAgICAgICAxOCxcbiAgICAgICAgdGhpcy5pbmRleFxuICAgICAgKTtcbiAgICB9IGVsc2UgO1xuICB9XG4gIHN0YXRlQmVmb3JlRGVjbGFyYXRpb24oYykge1xuICAgIGlmIChjID09PSA5MSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IDI2O1xuICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZSA9IGMgPT09IDQ1ID8gMjUgOiAyMztcbiAgICB9XG4gIH1cbiAgc3RhdGVJbkRlY2xhcmF0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gNjIgfHwgdGhpcy5mYXN0Rm9yd2FyZFRvKDYyKSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IDE7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgIH1cbiAgfVxuICBzdGF0ZUluUHJvY2Vzc2luZ0luc3RydWN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gNjIgfHwgdGhpcy5mYXN0Rm9yd2FyZFRvKDYyKSkge1xuICAgICAgdGhpcy5jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24odGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5zdGF0ZSA9IDE7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgIH1cbiAgfVxuICBzdGF0ZUJlZm9yZUNvbW1lbnQoYykge1xuICAgIGlmIChjID09PSA0NSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IDI4O1xuICAgICAgdGhpcy5jdXJyZW50U2VxdWVuY2UgPSBTZXF1ZW5jZXMuQ29tbWVudEVuZDtcbiAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDI7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXRlID0gMjM7XG4gICAgfVxuICB9XG4gIHN0YXRlSW5TcGVjaWFsQ29tbWVudChjKSB7XG4gICAgaWYgKGMgPT09IDYyIHx8IHRoaXMuZmFzdEZvcndhcmRUbyg2MikpIHtcbiAgICAgIHRoaXMuY2JzLm9uY29tbWVudCh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICB0aGlzLnN0YXRlID0gMTtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgfVxuICB9XG4gIHN0YXRlQmVmb3JlU3BlY2lhbFMoYykge1xuICAgIGlmIChjID09PSBTZXF1ZW5jZXMuU2NyaXB0RW5kWzNdKSB7XG4gICAgICB0aGlzLnN0YXJ0U3BlY2lhbChTZXF1ZW5jZXMuU2NyaXB0RW5kLCA0KTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFNlcXVlbmNlcy5TdHlsZUVuZFszXSkge1xuICAgICAgdGhpcy5zdGFydFNwZWNpYWwoU2VxdWVuY2VzLlN0eWxlRW5kLCA0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZSA9IDY7XG4gICAgICB0aGlzLnN0YXRlSW5UYWdOYW1lKGMpO1xuICAgIH1cbiAgfVxuICBzdGF0ZUJlZm9yZVNwZWNpYWxUKGMpIHtcbiAgICBpZiAoYyA9PT0gU2VxdWVuY2VzLlRpdGxlRW5kWzNdKSB7XG4gICAgICB0aGlzLnN0YXJ0U3BlY2lhbChTZXF1ZW5jZXMuVGl0bGVFbmQsIDQpO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gU2VxdWVuY2VzLlRleHRhcmVhRW5kWzNdKSB7XG4gICAgICB0aGlzLnN0YXJ0U3BlY2lhbChTZXF1ZW5jZXMuVGV4dGFyZWFFbmQsIDQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXRlID0gNjtcbiAgICAgIHRoaXMuc3RhdGVJblRhZ05hbWUoYyk7XG4gICAgfVxuICB9XG4gIHN0YXJ0RW50aXR5KCkge1xuICB9XG4gIHN0YXRlSW5FbnRpdHkoKSB7XG4gIH1cbiAgLyoqXG4gICAqIEl0ZXJhdGVzIHRocm91Z2ggdGhlIGJ1ZmZlciwgY2FsbGluZyB0aGUgZnVuY3Rpb24gY29ycmVzcG9uZGluZyB0byB0aGUgY3VycmVudCBzdGF0ZS5cbiAgICpcbiAgICogU3RhdGVzIHRoYXQgYXJlIG1vcmUgbGlrZWx5IHRvIGJlIGhpdCBhcmUgaGlnaGVyIHVwLCBhcyBhIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LlxuICAgKi9cbiAgcGFyc2UoaW5wdXQpIHtcbiAgICB0aGlzLmJ1ZmZlciA9IGlucHV0O1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgICBjb25zdCBjID0gdGhpcy5idWZmZXIuY2hhckNvZGVBdCh0aGlzLmluZGV4KTtcbiAgICAgIGlmIChjID09PSAxMCkge1xuICAgICAgICB0aGlzLm5ld2xpbmVzLnB1c2godGhpcy5pbmRleCk7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcbiAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZVRleHQoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAyOiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUludGVycG9sYXRpb25PcGVuKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzoge1xuICAgICAgICAgIHRoaXMuc3RhdGVJbnRlcnBvbGF0aW9uKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgNDoge1xuICAgICAgICAgIHRoaXMuc3RhdGVJbnRlcnBvbGF0aW9uQ2xvc2UoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMToge1xuICAgICAgICAgIHRoaXMuc3RhdGVTcGVjaWFsU3RhcnRTZXF1ZW5jZShjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMyOiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluUkNEQVRBKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjY6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlQ0RBVEFTZXF1ZW5jZShjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE5OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluQXR0clZhbHVlRG91YmxlUXVvdGVzKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTI6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlSW5BdHRyTmFtZShjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDEzOiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluRGlyTmFtZShjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE0OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluRGlyQXJnKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTU6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlSW5EeW5hbWljRGlyQXJnKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTY6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlSW5EaXJNb2RpZmllcihjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI4OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluQ29tbWVudExpa2UoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAyNzoge1xuICAgICAgICAgIHRoaXMuc3RhdGVJblNwZWNpYWxDb21tZW50KGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTE6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQXR0ck5hbWUoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSA2OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluVGFnTmFtZShjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDM0OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluU0ZDUm9vdFRhZ05hbWUoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSA5OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluQ2xvc2luZ1RhZ05hbWUoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSA1OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZVRhZ05hbWUoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxNzoge1xuICAgICAgICAgIHRoaXMuc3RhdGVBZnRlckF0dHJOYW1lKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjA6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlSW5BdHRyVmFsdWVTaW5nbGVRdW90ZXMoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxODoge1xuICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVBdHRyVmFsdWUoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSA4OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZUNsb3NpbmdUYWdOYW1lKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTA6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlQWZ0ZXJDbG9zaW5nVGFnTmFtZShjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI5OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZVNwZWNpYWxTKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzA6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlU3BlY2lhbFQoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAyMToge1xuICAgICAgICAgIHRoaXMuc3RhdGVJbkF0dHJWYWx1ZU5vUXVvdGVzKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgNzoge1xuICAgICAgICAgIHRoaXMuc3RhdGVJblNlbGZDbG9zaW5nVGFnKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjM6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlSW5EZWNsYXJhdGlvbihjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDIyOiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZURlY2xhcmF0aW9uKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjU6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQ29tbWVudChjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI0OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluUHJvY2Vzc2luZ0luc3RydWN0aW9uKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzM6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlSW5FbnRpdHkoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5pbmRleCsrO1xuICAgIH1cbiAgICB0aGlzLmNsZWFudXAoKTtcbiAgICB0aGlzLmZpbmlzaCgpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgZGF0YSB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gY29uc3VtZWQgZnJvbSB0aGUgYnVmZmVyLlxuICAgKi9cbiAgY2xlYW51cCgpIHtcbiAgICBpZiAodGhpcy5zZWN0aW9uU3RhcnQgIT09IHRoaXMuaW5kZXgpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlID09PSAxIHx8IHRoaXMuc3RhdGUgPT09IDMyICYmIHRoaXMuc2VxdWVuY2VJbmRleCA9PT0gMCkge1xuICAgICAgICB0aGlzLmNicy5vbnRleHQodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IDE5IHx8IHRoaXMuc3RhdGUgPT09IDIwIHx8IHRoaXMuc3RhdGUgPT09IDIxKSB7XG4gICAgICAgIHRoaXMuY2JzLm9uYXR0cmliZGF0YSh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZmluaXNoKCkge1xuICAgIHRoaXMuaGFuZGxlVHJhaWxpbmdEYXRhKCk7XG4gICAgdGhpcy5jYnMub25lbmQoKTtcbiAgfVxuICAvKiogSGFuZGxlIGFueSB0cmFpbGluZyBkYXRhLiAqL1xuICBoYW5kbGVUcmFpbGluZ0RhdGEoKSB7XG4gICAgY29uc3QgZW5kSW5kZXggPSB0aGlzLmJ1ZmZlci5sZW5ndGg7XG4gICAgaWYgKHRoaXMuc2VjdGlvblN0YXJ0ID49IGVuZEluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnN0YXRlID09PSAyOCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFNlcXVlbmNlID09PSBTZXF1ZW5jZXMuQ2RhdGFFbmQpIHtcbiAgICAgICAgdGhpcy5jYnMub25jZGF0YSh0aGlzLnNlY3Rpb25TdGFydCwgZW5kSW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYnMub25jb21tZW50KHRoaXMuc2VjdGlvblN0YXJ0LCBlbmRJbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09PSA2IHx8IHRoaXMuc3RhdGUgPT09IDExIHx8IHRoaXMuc3RhdGUgPT09IDE4IHx8IHRoaXMuc3RhdGUgPT09IDE3IHx8IHRoaXMuc3RhdGUgPT09IDEyIHx8IHRoaXMuc3RhdGUgPT09IDEzIHx8IHRoaXMuc3RhdGUgPT09IDE0IHx8IHRoaXMuc3RhdGUgPT09IDE1IHx8IHRoaXMuc3RhdGUgPT09IDE2IHx8IHRoaXMuc3RhdGUgPT09IDIwIHx8IHRoaXMuc3RhdGUgPT09IDE5IHx8IHRoaXMuc3RhdGUgPT09IDIxIHx8IHRoaXMuc3RhdGUgPT09IDkpIDsgZWxzZSB7XG4gICAgICB0aGlzLmNicy5vbnRleHQodGhpcy5zZWN0aW9uU3RhcnQsIGVuZEluZGV4KTtcbiAgICB9XG4gIH1cbiAgZW1pdENvZGVQb2ludChjcCwgY29uc3VtZWQpIHtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0T25FcnJvcihlcnJvcikge1xuICB0aHJvdyBlcnJvcjtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRPbldhcm4obXNnKSB7XG4gIGNvbnNvbGUud2FybihgW1Z1ZSB3YXJuXSAke21zZy5tZXNzYWdlfWApO1xufVxuZnVuY3Rpb24gY3JlYXRlQ29tcGlsZXJFcnJvcihjb2RlLCBsb2MsIG1lc3NhZ2VzLCBhZGRpdGlvbmFsTWVzc2FnZSkge1xuICBjb25zdCBtc2cgPSAobWVzc2FnZXMgfHwgZXJyb3JNZXNzYWdlcylbY29kZV0gKyAoYWRkaXRpb25hbE1lc3NhZ2UgfHwgYGApIDtcbiAgY29uc3QgZXJyb3IgPSBuZXcgU3ludGF4RXJyb3IoU3RyaW5nKG1zZykpO1xuICBlcnJvci5jb2RlID0gY29kZTtcbiAgZXJyb3IubG9jID0gbG9jO1xuICByZXR1cm4gZXJyb3I7XG59XG5jb25zdCBlcnJvck1lc3NhZ2VzID0ge1xuICAvLyBwYXJzZSBlcnJvcnNcbiAgWzBdOiBcIklsbGVnYWwgY29tbWVudC5cIixcbiAgWzFdOiBcIkNEQVRBIHNlY3Rpb24gaXMgYWxsb3dlZCBvbmx5IGluIFhNTCBjb250ZXh0LlwiLFxuICBbMl06IFwiRHVwbGljYXRlIGF0dHJpYnV0ZS5cIixcbiAgWzNdOiBcIkVuZCB0YWcgY2Fubm90IGhhdmUgYXR0cmlidXRlcy5cIixcbiAgWzRdOiBcIklsbGVnYWwgJy8nIGluIHRhZ3MuXCIsXG4gIFs1XTogXCJVbmV4cGVjdGVkIEVPRiBpbiB0YWcuXCIsXG4gIFs2XTogXCJVbmV4cGVjdGVkIEVPRiBpbiBDREFUQSBzZWN0aW9uLlwiLFxuICBbN106IFwiVW5leHBlY3RlZCBFT0YgaW4gY29tbWVudC5cIixcbiAgWzhdOiBcIlVuZXhwZWN0ZWQgRU9GIGluIHNjcmlwdC5cIixcbiAgWzldOiBcIlVuZXhwZWN0ZWQgRU9GIGluIHRhZy5cIixcbiAgWzEwXTogXCJJbmNvcnJlY3RseSBjbG9zZWQgY29tbWVudC5cIixcbiAgWzExXTogXCJJbmNvcnJlY3RseSBvcGVuZWQgY29tbWVudC5cIixcbiAgWzEyXTogXCJJbGxlZ2FsIHRhZyBuYW1lLiBVc2UgJyZsdDsnIHRvIHByaW50ICc8Jy5cIixcbiAgWzEzXTogXCJBdHRyaWJ1dGUgdmFsdWUgd2FzIGV4cGVjdGVkLlwiLFxuICBbMTRdOiBcIkVuZCB0YWcgbmFtZSB3YXMgZXhwZWN0ZWQuXCIsXG4gIFsxNV06IFwiV2hpdGVzcGFjZSB3YXMgZXhwZWN0ZWQuXCIsXG4gIFsxNl06IFwiVW5leHBlY3RlZCAnPCEtLScgaW4gY29tbWVudC5cIixcbiAgWzE3XTogYEF0dHJpYnV0ZSBuYW1lIGNhbm5vdCBjb250YWluIFUrMDAyMiAoXCIpLCBVKzAwMjcgKCcpLCBhbmQgVSswMDNDICg8KS5gLFxuICBbMThdOiBcIlVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZSBjYW5ub3QgY29udGFpbiBVKzAwMjIgKFxcXCIpLCBVKzAwMjcgKCcpLCBVKzAwM0MgKDwpLCBVKzAwM0QgKD0pLCBhbmQgVSswMDYwIChgKS5cIixcbiAgWzE5XTogXCJBdHRyaWJ1dGUgbmFtZSBjYW5ub3Qgc3RhcnQgd2l0aCAnPScuXCIsXG4gIFsyMV06IFwiJzw/JyBpcyBhbGxvd2VkIG9ubHkgaW4gWE1MIGNvbnRleHQuXCIsXG4gIFsyMF06IGBVbmV4cGVjdGVkIG51bGwgY2hhcmFjdGVyLmAsXG4gIFsyMl06IFwiSWxsZWdhbCAnLycgaW4gdGFncy5cIixcbiAgLy8gVnVlLXNwZWNpZmljIHBhcnNlIGVycm9yc1xuICBbMjNdOiBcIkludmFsaWQgZW5kIHRhZy5cIixcbiAgWzI0XTogXCJFbGVtZW50IGlzIG1pc3NpbmcgZW5kIHRhZy5cIixcbiAgWzI1XTogXCJJbnRlcnBvbGF0aW9uIGVuZCBzaWduIHdhcyBub3QgZm91bmQuXCIsXG4gIFsyN106IFwiRW5kIGJyYWNrZXQgZm9yIGR5bmFtaWMgZGlyZWN0aXZlIGFyZ3VtZW50IHdhcyBub3QgZm91bmQuIE5vdGUgdGhhdCBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCBjYW5ub3QgY29udGFpbiBzcGFjZXMuXCIsXG4gIFsyNl06IFwiTGVnYWwgZGlyZWN0aXZlIG5hbWUgd2FzIGV4cGVjdGVkLlwiLFxuICAvLyB0cmFuc2Zvcm0gZXJyb3JzXG4gIFsyOF06IGB2LWlmL3YtZWxzZS1pZiBpcyBtaXNzaW5nIGV4cHJlc3Npb24uYCxcbiAgWzI5XTogYHYtaWYvZWxzZSBicmFuY2hlcyBtdXN0IHVzZSB1bmlxdWUga2V5cy5gLFxuICBbMzBdOiBgdi1lbHNlL3YtZWxzZS1pZiBoYXMgbm8gYWRqYWNlbnQgdi1pZiBvciB2LWVsc2UtaWYuYCxcbiAgWzMxXTogYHYtZm9yIGlzIG1pc3NpbmcgZXhwcmVzc2lvbi5gLFxuICBbMzJdOiBgdi1mb3IgaGFzIGludmFsaWQgZXhwcmVzc2lvbi5gLFxuICBbMzNdOiBgPHRlbXBsYXRlIHYtZm9yPiBrZXkgc2hvdWxkIGJlIHBsYWNlZCBvbiB0aGUgPHRlbXBsYXRlPiB0YWcuYCxcbiAgWzM0XTogYHYtYmluZCBpcyBtaXNzaW5nIGV4cHJlc3Npb24uYCxcbiAgWzUyXTogYHYtYmluZCB3aXRoIHNhbWUtbmFtZSBzaG9ydGhhbmQgb25seSBhbGxvd3Mgc3RhdGljIGFyZ3VtZW50LmAsXG4gIFszNV06IGB2LW9uIGlzIG1pc3NpbmcgZXhwcmVzc2lvbi5gLFxuICBbMzZdOiBgVW5leHBlY3RlZCBjdXN0b20gZGlyZWN0aXZlIG9uIDxzbG90PiBvdXRsZXQuYCxcbiAgWzM3XTogYE1peGVkIHYtc2xvdCB1c2FnZSBvbiBib3RoIHRoZSBjb21wb25lbnQgYW5kIG5lc3RlZCA8dGVtcGxhdGU+LiBXaGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBuYW1lZCBzbG90cywgYWxsIHNsb3RzIHNob3VsZCB1c2UgPHRlbXBsYXRlPiBzeW50YXggdG8gYXZvaWQgc2NvcGUgYW1iaWd1aXR5LmAsXG4gIFszOF06IGBEdXBsaWNhdGUgc2xvdCBuYW1lcyBmb3VuZC4gYCxcbiAgWzM5XTogYEV4dHJhbmVvdXMgY2hpbGRyZW4gZm91bmQgd2hlbiBjb21wb25lbnQgYWxyZWFkeSBoYXMgZXhwbGljaXRseSBuYW1lZCBkZWZhdWx0IHNsb3QuIFRoZXNlIGNoaWxkcmVuIHdpbGwgYmUgaWdub3JlZC5gLFxuICBbNDBdOiBgdi1zbG90IGNhbiBvbmx5IGJlIHVzZWQgb24gY29tcG9uZW50cyBvciA8dGVtcGxhdGU+IHRhZ3MuYCxcbiAgWzQxXTogYHYtbW9kZWwgaXMgbWlzc2luZyBleHByZXNzaW9uLmAsXG4gIFs0Ml06IGB2LW1vZGVsIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBKYXZhU2NyaXB0IG1lbWJlciBleHByZXNzaW9uLmAsXG4gIFs0M106IGB2LW1vZGVsIGNhbm5vdCBiZSB1c2VkIG9uIHYtZm9yIG9yIHYtc2xvdCBzY29wZSB2YXJpYWJsZXMgYmVjYXVzZSB0aGV5IGFyZSBub3Qgd3JpdGFibGUuYCxcbiAgWzQ0XTogYHYtbW9kZWwgY2Fubm90IGJlIHVzZWQgb24gYSBwcm9wLCBiZWNhdXNlIGxvY2FsIHByb3AgYmluZGluZ3MgYXJlIG5vdCB3cml0YWJsZS5cblVzZSBhIHYtYmluZCBiaW5kaW5nIGNvbWJpbmVkIHdpdGggYSB2LW9uIGxpc3RlbmVyIHRoYXQgZW1pdHMgdXBkYXRlOnggZXZlbnQgaW5zdGVhZC5gLFxuICBbNDVdOiBgRXJyb3IgcGFyc2luZyBKYXZhU2NyaXB0IGV4cHJlc3Npb246IGAsXG4gIFs0Nl06IGA8S2VlcEFsaXZlPiBleHBlY3RzIGV4YWN0bHkgb25lIGNoaWxkIGNvbXBvbmVudC5gLFxuICBbNTFdOiBgQHZub2RlLSogaG9va3MgaW4gdGVtcGxhdGVzIGFyZSBubyBsb25nZXIgc3VwcG9ydGVkLiBVc2UgdGhlIHZ1ZTogcHJlZml4IGluc3RlYWQuIEZvciBleGFtcGxlLCBAdm5vZGUtbW91bnRlZCBzaG91bGQgYmUgY2hhbmdlZCB0byBAdnVlOm1vdW50ZWQuIEB2bm9kZS0qIGhvb2tzIHN1cHBvcnQgaGFzIGJlZW4gcmVtb3ZlZCBpbiAzLjQuYCxcbiAgLy8gZ2VuZXJpYyBlcnJvcnNcbiAgWzQ3XTogYFwicHJlZml4SWRlbnRpZmllcnNcIiBvcHRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJ1aWxkIG9mIGNvbXBpbGVyLmAsXG4gIFs0OF06IGBFUyBtb2R1bGUgbW9kZSBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnVpbGQgb2YgY29tcGlsZXIuYCxcbiAgWzQ5XTogYFwiY2FjaGVIYW5kbGVyc1wiIG9wdGlvbiBpcyBvbmx5IHN1cHBvcnRlZCB3aGVuIHRoZSBcInByZWZpeElkZW50aWZpZXJzXCIgb3B0aW9uIGlzIGVuYWJsZWQuYCxcbiAgWzUwXTogYFwic2NvcGVJZFwiIG9wdGlvbiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBtb2R1bGUgbW9kZS5gLFxuICAvLyBqdXN0IHRvIGZ1bGZpbGwgdHlwZXNcbiAgWzUzXTogYGBcbn07XG5cbmNvbnN0IGlzU3RhdGljRXhwID0gKHApID0+IHAudHlwZSA9PT0gNCAmJiBwLmlzU3RhdGljO1xuZnVuY3Rpb24gaXNDb3JlQ29tcG9uZW50KHRhZykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgXCJUZWxlcG9ydFwiOlxuICAgIGNhc2UgXCJ0ZWxlcG9ydFwiOlxuICAgICAgcmV0dXJuIFRFTEVQT1JUO1xuICAgIGNhc2UgXCJTdXNwZW5zZVwiOlxuICAgIGNhc2UgXCJzdXNwZW5zZVwiOlxuICAgICAgcmV0dXJuIFNVU1BFTlNFO1xuICAgIGNhc2UgXCJLZWVwQWxpdmVcIjpcbiAgICBjYXNlIFwia2VlcC1hbGl2ZVwiOlxuICAgICAgcmV0dXJuIEtFRVBfQUxJVkU7XG4gICAgY2FzZSBcIkJhc2VUcmFuc2l0aW9uXCI6XG4gICAgY2FzZSBcImJhc2UtdHJhbnNpdGlvblwiOlxuICAgICAgcmV0dXJuIEJBU0VfVFJBTlNJVElPTjtcbiAgfVxufVxuY29uc3Qgbm9uSWRlbnRpZmllclJFID0gL15cXGR8W15cXCRcXHdcXHhBMC1cXHVGRkZGXS87XG5jb25zdCBpc1NpbXBsZUlkZW50aWZpZXIgPSAobmFtZSkgPT4gIW5vbklkZW50aWZpZXJSRS50ZXN0KG5hbWUpO1xuY29uc3QgdmFsaWRGaXJzdElkZW50Q2hhclJFID0gL1tBLVphLXpfJFxceEEwLVxcdUZGRkZdLztcbmNvbnN0IHZhbGlkSWRlbnRDaGFyUkUgPSAvW1xcLlxcP1xcdyRcXHhBMC1cXHVGRkZGXS87XG5jb25zdCB3aGl0ZXNwYWNlUkUgPSAvXFxzK1suW11cXHMqfFxccypbLltdXFxzKy9nO1xuY29uc3QgZ2V0RXhwU291cmNlID0gKGV4cCkgPT4gZXhwLnR5cGUgPT09IDQgPyBleHAuY29udGVudCA6IGV4cC5sb2Muc291cmNlO1xuY29uc3QgaXNNZW1iZXJFeHByZXNzaW9uQnJvd3NlciA9IChleHApID0+IHtcbiAgY29uc3QgcGF0aCA9IGdldEV4cFNvdXJjZShleHApLnRyaW0oKS5yZXBsYWNlKHdoaXRlc3BhY2VSRSwgKHMpID0+IHMudHJpbSgpKTtcbiAgbGV0IHN0YXRlID0gMCAvKiBpbk1lbWJlckV4cCAqLztcbiAgbGV0IHN0YXRlU3RhY2sgPSBbXTtcbiAgbGV0IGN1cnJlbnRPcGVuQnJhY2tldENvdW50ID0gMDtcbiAgbGV0IGN1cnJlbnRPcGVuUGFyZW5zQ291bnQgPSAwO1xuICBsZXQgY3VycmVudFN0cmluZ1R5cGUgPSBudWxsO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGFyID0gcGF0aC5jaGFyQXQoaSk7XG4gICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgY2FzZSAwIC8qIGluTWVtYmVyRXhwICovOlxuICAgICAgICBpZiAoY2hhciA9PT0gXCJbXCIpIHtcbiAgICAgICAgICBzdGF0ZVN0YWNrLnB1c2goc3RhdGUpO1xuICAgICAgICAgIHN0YXRlID0gMSAvKiBpbkJyYWNrZXRzICovO1xuICAgICAgICAgIGN1cnJlbnRPcGVuQnJhY2tldENvdW50Kys7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gXCIoXCIpIHtcbiAgICAgICAgICBzdGF0ZVN0YWNrLnB1c2goc3RhdGUpO1xuICAgICAgICAgIHN0YXRlID0gMiAvKiBpblBhcmVucyAqLztcbiAgICAgICAgICBjdXJyZW50T3BlblBhcmVuc0NvdW50Kys7XG4gICAgICAgIH0gZWxzZSBpZiAoIShpID09PSAwID8gdmFsaWRGaXJzdElkZW50Q2hhclJFIDogdmFsaWRJZGVudENoYXJSRSkudGVzdChjaGFyKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMSAvKiBpbkJyYWNrZXRzICovOlxuICAgICAgICBpZiAoY2hhciA9PT0gYCdgIHx8IGNoYXIgPT09IGBcImAgfHwgY2hhciA9PT0gXCJgXCIpIHtcbiAgICAgICAgICBzdGF0ZVN0YWNrLnB1c2goc3RhdGUpO1xuICAgICAgICAgIHN0YXRlID0gMyAvKiBpblN0cmluZyAqLztcbiAgICAgICAgICBjdXJyZW50U3RyaW5nVHlwZSA9IGNoYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gYFtgKSB7XG4gICAgICAgICAgY3VycmVudE9wZW5CcmFja2V0Q291bnQrKztcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09PSBgXWApIHtcbiAgICAgICAgICBpZiAoIS0tY3VycmVudE9wZW5CcmFja2V0Q291bnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gc3RhdGVTdGFjay5wb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIgLyogaW5QYXJlbnMgKi86XG4gICAgICAgIGlmIChjaGFyID09PSBgJ2AgfHwgY2hhciA9PT0gYFwiYCB8fCBjaGFyID09PSBcImBcIikge1xuICAgICAgICAgIHN0YXRlU3RhY2sucHVzaChzdGF0ZSk7XG4gICAgICAgICAgc3RhdGUgPSAzIC8qIGluU3RyaW5nICovO1xuICAgICAgICAgIGN1cnJlbnRTdHJpbmdUeXBlID0gY2hhcjtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09PSBgKGApIHtcbiAgICAgICAgICBjdXJyZW50T3BlblBhcmVuc0NvdW50Kys7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gYClgKSB7XG4gICAgICAgICAgaWYgKGkgPT09IHBhdGgubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIS0tY3VycmVudE9wZW5QYXJlbnNDb3VudCkge1xuICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZVN0YWNrLnBvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMyAvKiBpblN0cmluZyAqLzpcbiAgICAgICAgaWYgKGNoYXIgPT09IGN1cnJlbnRTdHJpbmdUeXBlKSB7XG4gICAgICAgICAgc3RhdGUgPSBzdGF0ZVN0YWNrLnBvcCgpO1xuICAgICAgICAgIGN1cnJlbnRTdHJpbmdUeXBlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICFjdXJyZW50T3BlbkJyYWNrZXRDb3VudCAmJiAhY3VycmVudE9wZW5QYXJlbnNDb3VudDtcbn07XG5jb25zdCBpc01lbWJlckV4cHJlc3Npb24gPSBpc01lbWJlckV4cHJlc3Npb25Ccm93c2VyIDtcbmNvbnN0IGZuRXhwUkUgPSAvXlxccyooYXN5bmNcXHMqKT8oXFwoW14pXSo/XFwpfFtcXHckX10rKVxccyooOltePV0rKT89PnxeXFxzKihhc3luY1xccyspP2Z1bmN0aW9uKD86XFxzK1tcXHckXSspP1xccypcXCgvO1xuY29uc3QgaXNGbkV4cHJlc3Npb25Ccm93c2VyID0gKGV4cCkgPT4gZm5FeHBSRS50ZXN0KGdldEV4cFNvdXJjZShleHApKTtcbmNvbnN0IGlzRm5FeHByZXNzaW9uID0gaXNGbkV4cHJlc3Npb25Ccm93c2VyIDtcbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24sIG1zZykge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihtc2cgfHwgYHVuZXhwZWN0ZWQgY29tcGlsZXIgY29uZGl0aW9uYCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZpbmREaXIobm9kZSwgbmFtZSwgYWxsb3dFbXB0eSA9IGZhbHNlKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5wcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHAgPSBub2RlLnByb3BzW2ldO1xuICAgIGlmIChwLnR5cGUgPT09IDcgJiYgKGFsbG93RW1wdHkgfHwgcC5leHApICYmIChpc1N0cmluZyhuYW1lKSA/IHAubmFtZSA9PT0gbmFtZSA6IG5hbWUudGVzdChwLm5hbWUpKSkge1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBmaW5kUHJvcChub2RlLCBuYW1lLCBkeW5hbWljT25seSA9IGZhbHNlLCBhbGxvd0VtcHR5ID0gZmFsc2UpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLnByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcCA9IG5vZGUucHJvcHNbaV07XG4gICAgaWYgKHAudHlwZSA9PT0gNikge1xuICAgICAgaWYgKGR5bmFtaWNPbmx5KSBjb250aW51ZTtcbiAgICAgIGlmIChwLm5hbWUgPT09IG5hbWUgJiYgKHAudmFsdWUgfHwgYWxsb3dFbXB0eSkpIHtcbiAgICAgICAgcmV0dXJuIHA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwLm5hbWUgPT09IFwiYmluZFwiICYmIChwLmV4cCB8fCBhbGxvd0VtcHR5KSAmJiBpc1N0YXRpY0FyZ09mKHAuYXJnLCBuYW1lKSkge1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBpc1N0YXRpY0FyZ09mKGFyZywgbmFtZSkge1xuICByZXR1cm4gISEoYXJnICYmIGlzU3RhdGljRXhwKGFyZykgJiYgYXJnLmNvbnRlbnQgPT09IG5hbWUpO1xufVxuZnVuY3Rpb24gaGFzRHluYW1pY0tleVZCaW5kKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucHJvcHMuc29tZShcbiAgICAocCkgPT4gcC50eXBlID09PSA3ICYmIHAubmFtZSA9PT0gXCJiaW5kXCIgJiYgKCFwLmFyZyB8fCAvLyB2LWJpbmQ9XCJvYmpcIlxuICAgIHAuYXJnLnR5cGUgIT09IDQgfHwgLy8gdi1iaW5kOltfY3R4LmZvb11cbiAgICAhcC5hcmcuaXNTdGF0aWMpXG4gICAgLy8gdi1iaW5kOltmb29dXG4gICk7XG59XG5mdW5jdGlvbiBpc1RleHQkMShub2RlKSB7XG4gIHJldHVybiBub2RlLnR5cGUgPT09IDUgfHwgbm9kZS50eXBlID09PSAyO1xufVxuZnVuY3Rpb24gaXNWU2xvdChwKSB7XG4gIHJldHVybiBwLnR5cGUgPT09IDcgJiYgcC5uYW1lID09PSBcInNsb3RcIjtcbn1cbmZ1bmN0aW9uIGlzVGVtcGxhdGVOb2RlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudHlwZSA9PT0gMSAmJiBub2RlLnRhZ1R5cGUgPT09IDM7XG59XG5mdW5jdGlvbiBpc1Nsb3RPdXRsZXQobm9kZSkge1xuICByZXR1cm4gbm9kZS50eXBlID09PSAxICYmIG5vZGUudGFnVHlwZSA9PT0gMjtcbn1cbmNvbnN0IHByb3BzSGVscGVyU2V0ID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW05PUk1BTElaRV9QUk9QUywgR1VBUkRfUkVBQ1RJVkVfUFJPUFNdKTtcbmZ1bmN0aW9uIGdldFVubm9ybWFsaXplZFByb3BzKHByb3BzLCBjYWxsUGF0aCA9IFtdKSB7XG4gIGlmIChwcm9wcyAmJiAhaXNTdHJpbmcocHJvcHMpICYmIHByb3BzLnR5cGUgPT09IDE0KSB7XG4gICAgY29uc3QgY2FsbGVlID0gcHJvcHMuY2FsbGVlO1xuICAgIGlmICghaXNTdHJpbmcoY2FsbGVlKSAmJiBwcm9wc0hlbHBlclNldC5oYXMoY2FsbGVlKSkge1xuICAgICAgcmV0dXJuIGdldFVubm9ybWFsaXplZFByb3BzKFxuICAgICAgICBwcm9wcy5hcmd1bWVudHNbMF0sXG4gICAgICAgIGNhbGxQYXRoLmNvbmNhdChwcm9wcylcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBbcHJvcHMsIGNhbGxQYXRoXTtcbn1cbmZ1bmN0aW9uIGluamVjdFByb3Aobm9kZSwgcHJvcCwgY29udGV4dCkge1xuICBsZXQgcHJvcHNXaXRoSW5qZWN0aW9uO1xuICBsZXQgcHJvcHMgPSBub2RlLnR5cGUgPT09IDEzID8gbm9kZS5wcm9wcyA6IG5vZGUuYXJndW1lbnRzWzJdO1xuICBsZXQgY2FsbFBhdGggPSBbXTtcbiAgbGV0IHBhcmVudENhbGw7XG4gIGlmIChwcm9wcyAmJiAhaXNTdHJpbmcocHJvcHMpICYmIHByb3BzLnR5cGUgPT09IDE0KSB7XG4gICAgY29uc3QgcmV0ID0gZ2V0VW5ub3JtYWxpemVkUHJvcHMocHJvcHMpO1xuICAgIHByb3BzID0gcmV0WzBdO1xuICAgIGNhbGxQYXRoID0gcmV0WzFdO1xuICAgIHBhcmVudENhbGwgPSBjYWxsUGF0aFtjYWxsUGF0aC5sZW5ndGggLSAxXTtcbiAgfVxuICBpZiAocHJvcHMgPT0gbnVsbCB8fCBpc1N0cmluZyhwcm9wcykpIHtcbiAgICBwcm9wc1dpdGhJbmplY3Rpb24gPSBjcmVhdGVPYmplY3RFeHByZXNzaW9uKFtwcm9wXSk7XG4gIH0gZWxzZSBpZiAocHJvcHMudHlwZSA9PT0gMTQpIHtcbiAgICBjb25zdCBmaXJzdCA9IHByb3BzLmFyZ3VtZW50c1swXTtcbiAgICBpZiAoIWlzU3RyaW5nKGZpcnN0KSAmJiBmaXJzdC50eXBlID09PSAxNSkge1xuICAgICAgaWYgKCFoYXNQcm9wKHByb3AsIGZpcnN0KSkge1xuICAgICAgICBmaXJzdC5wcm9wZXJ0aWVzLnVuc2hpZnQocHJvcCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy5jYWxsZWUgPT09IFRPX0hBTkRMRVJTKSB7XG4gICAgICAgIHByb3BzV2l0aEluamVjdGlvbiA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKE1FUkdFX1BST1BTKSwgW1xuICAgICAgICAgIGNyZWF0ZU9iamVjdEV4cHJlc3Npb24oW3Byb3BdKSxcbiAgICAgICAgICBwcm9wc1xuICAgICAgICBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3BzLmFyZ3VtZW50cy51bnNoaWZ0KGNyZWF0ZU9iamVjdEV4cHJlc3Npb24oW3Byb3BdKSk7XG4gICAgICB9XG4gICAgfVxuICAgICFwcm9wc1dpdGhJbmplY3Rpb24gJiYgKHByb3BzV2l0aEluamVjdGlvbiA9IHByb3BzKTtcbiAgfSBlbHNlIGlmIChwcm9wcy50eXBlID09PSAxNSkge1xuICAgIGlmICghaGFzUHJvcChwcm9wLCBwcm9wcykpIHtcbiAgICAgIHByb3BzLnByb3BlcnRpZXMudW5zaGlmdChwcm9wKTtcbiAgICB9XG4gICAgcHJvcHNXaXRoSW5qZWN0aW9uID0gcHJvcHM7XG4gIH0gZWxzZSB7XG4gICAgcHJvcHNXaXRoSW5qZWN0aW9uID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoTUVSR0VfUFJPUFMpLCBbXG4gICAgICBjcmVhdGVPYmplY3RFeHByZXNzaW9uKFtwcm9wXSksXG4gICAgICBwcm9wc1xuICAgIF0pO1xuICAgIGlmIChwYXJlbnRDYWxsICYmIHBhcmVudENhbGwuY2FsbGVlID09PSBHVUFSRF9SRUFDVElWRV9QUk9QUykge1xuICAgICAgcGFyZW50Q2FsbCA9IGNhbGxQYXRoW2NhbGxQYXRoLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfVxuICBpZiAobm9kZS50eXBlID09PSAxMykge1xuICAgIGlmIChwYXJlbnRDYWxsKSB7XG4gICAgICBwYXJlbnRDYWxsLmFyZ3VtZW50c1swXSA9IHByb3BzV2l0aEluamVjdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5wcm9wcyA9IHByb3BzV2l0aEluamVjdGlvbjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHBhcmVudENhbGwpIHtcbiAgICAgIHBhcmVudENhbGwuYXJndW1lbnRzWzBdID0gcHJvcHNXaXRoSW5qZWN0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlLmFyZ3VtZW50c1syXSA9IHByb3BzV2l0aEluamVjdGlvbjtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGhhc1Byb3AocHJvcCwgcHJvcHMpIHtcbiAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuICBpZiAocHJvcC5rZXkudHlwZSA9PT0gNCkge1xuICAgIGNvbnN0IHByb3BLZXlOYW1lID0gcHJvcC5rZXkuY29udGVudDtcbiAgICByZXN1bHQgPSBwcm9wcy5wcm9wZXJ0aWVzLnNvbWUoXG4gICAgICAocCkgPT4gcC5rZXkudHlwZSA9PT0gNCAmJiBwLmtleS5jb250ZW50ID09PSBwcm9wS2V5TmFtZVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHRvVmFsaWRBc3NldElkKG5hbWUsIHR5cGUpIHtcbiAgcmV0dXJuIGBfJHt0eXBlfV8ke25hbWUucmVwbGFjZSgvW15cXHddL2csIChzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIHNlYXJjaFZhbHVlID09PSBcIi1cIiA/IFwiX1wiIDogbmFtZS5jaGFyQ29kZUF0KHJlcGxhY2VWYWx1ZSkudG9TdHJpbmcoKTtcbiAgfSl9YDtcbn1cbmZ1bmN0aW9uIGdldE1lbW9lZFZOb2RlQ2FsbChub2RlKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDE0ICYmIG5vZGUuY2FsbGVlID09PSBXSVRIX01FTU8pIHtcbiAgICByZXR1cm4gbm9kZS5hcmd1bWVudHNbMV0ucmV0dXJucztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufVxuY29uc3QgZm9yQWxpYXNSRSA9IC8oW1xcc1xcU10qPylcXHMrKD86aW58b2YpXFxzKyhcXFNbXFxzXFxTXSopLztcblxuY29uc3QgZGVmYXVsdFBhcnNlck9wdGlvbnMgPSB7XG4gIHBhcnNlTW9kZTogXCJiYXNlXCIsXG4gIG5zOiAwLFxuICBkZWxpbWl0ZXJzOiBbYHt7YCwgYH19YF0sXG4gIGdldE5hbWVzcGFjZTogKCkgPT4gMCxcbiAgaXNWb2lkVGFnOiBOTyxcbiAgaXNQcmVUYWc6IE5PLFxuICBpc0lnbm9yZU5ld2xpbmVUYWc6IE5PLFxuICBpc0N1c3RvbUVsZW1lbnQ6IE5PLFxuICBvbkVycm9yOiBkZWZhdWx0T25FcnJvcixcbiAgb25XYXJuOiBkZWZhdWx0T25XYXJuLFxuICBjb21tZW50czogdHJ1ZSxcbiAgcHJlZml4SWRlbnRpZmllcnM6IGZhbHNlXG59O1xubGV0IGN1cnJlbnRPcHRpb25zID0gZGVmYXVsdFBhcnNlck9wdGlvbnM7XG5sZXQgY3VycmVudFJvb3QgPSBudWxsO1xubGV0IGN1cnJlbnRJbnB1dCA9IFwiXCI7XG5sZXQgY3VycmVudE9wZW5UYWcgPSBudWxsO1xubGV0IGN1cnJlbnRQcm9wID0gbnVsbDtcbmxldCBjdXJyZW50QXR0clZhbHVlID0gXCJcIjtcbmxldCBjdXJyZW50QXR0clN0YXJ0SW5kZXggPSAtMTtcbmxldCBjdXJyZW50QXR0ckVuZEluZGV4ID0gLTE7XG5sZXQgaW5QcmUgPSAwO1xubGV0IGluVlByZSA9IGZhbHNlO1xubGV0IGN1cnJlbnRWUHJlQm91bmRhcnkgPSBudWxsO1xuY29uc3Qgc3RhY2sgPSBbXTtcbmNvbnN0IHRva2VuaXplciA9IG5ldyBUb2tlbml6ZXIoc3RhY2ssIHtcbiAgb25lcnI6IGVtaXRFcnJvcixcbiAgb250ZXh0KHN0YXJ0LCBlbmQpIHtcbiAgICBvblRleHQoZ2V0U2xpY2Uoc3RhcnQsIGVuZCksIHN0YXJ0LCBlbmQpO1xuICB9LFxuICBvbnRleHRlbnRpdHkoY2hhciwgc3RhcnQsIGVuZCkge1xuICAgIG9uVGV4dChjaGFyLCBzdGFydCwgZW5kKTtcbiAgfSxcbiAgb25pbnRlcnBvbGF0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoaW5WUHJlKSB7XG4gICAgICByZXR1cm4gb25UZXh0KGdldFNsaWNlKHN0YXJ0LCBlbmQpLCBzdGFydCwgZW5kKTtcbiAgICB9XG4gICAgbGV0IGlubmVyU3RhcnQgPSBzdGFydCArIHRva2VuaXplci5kZWxpbWl0ZXJPcGVuLmxlbmd0aDtcbiAgICBsZXQgaW5uZXJFbmQgPSBlbmQgLSB0b2tlbml6ZXIuZGVsaW1pdGVyQ2xvc2UubGVuZ3RoO1xuICAgIHdoaWxlIChpc1doaXRlc3BhY2UoY3VycmVudElucHV0LmNoYXJDb2RlQXQoaW5uZXJTdGFydCkpKSB7XG4gICAgICBpbm5lclN0YXJ0Kys7XG4gICAgfVxuICAgIHdoaWxlIChpc1doaXRlc3BhY2UoY3VycmVudElucHV0LmNoYXJDb2RlQXQoaW5uZXJFbmQgLSAxKSkpIHtcbiAgICAgIGlubmVyRW5kLS07XG4gICAgfVxuICAgIGxldCBleHAgPSBnZXRTbGljZShpbm5lclN0YXJ0LCBpbm5lckVuZCk7XG4gICAgaWYgKGV4cC5pbmNsdWRlcyhcIiZcIikpIHtcbiAgICAgIHtcbiAgICAgICAgZXhwID0gY3VycmVudE9wdGlvbnMuZGVjb2RlRW50aXRpZXMoZXhwLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGFkZE5vZGUoe1xuICAgICAgdHlwZTogNSxcbiAgICAgIGNvbnRlbnQ6IGNyZWF0ZUV4cChleHAsIGZhbHNlLCBnZXRMb2MoaW5uZXJTdGFydCwgaW5uZXJFbmQpKSxcbiAgICAgIGxvYzogZ2V0TG9jKHN0YXJ0LCBlbmQpXG4gICAgfSk7XG4gIH0sXG4gIG9ub3BlbnRhZ25hbWUoc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IG5hbWUgPSBnZXRTbGljZShzdGFydCwgZW5kKTtcbiAgICBjdXJyZW50T3BlblRhZyA9IHtcbiAgICAgIHR5cGU6IDEsXG4gICAgICB0YWc6IG5hbWUsXG4gICAgICBuczogY3VycmVudE9wdGlvbnMuZ2V0TmFtZXNwYWNlKG5hbWUsIHN0YWNrWzBdLCBjdXJyZW50T3B0aW9ucy5ucyksXG4gICAgICB0YWdUeXBlOiAwLFxuICAgICAgLy8gd2lsbCBiZSByZWZpbmVkIG9uIHRhZyBjbG9zZVxuICAgICAgcHJvcHM6IFtdLFxuICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgbG9jOiBnZXRMb2Moc3RhcnQgLSAxLCBlbmQpLFxuICAgICAgY29kZWdlbk5vZGU6IHZvaWQgMFxuICAgIH07XG4gIH0sXG4gIG9ub3BlbnRhZ2VuZChlbmQpIHtcbiAgICBlbmRPcGVuVGFnKGVuZCk7XG4gIH0sXG4gIG9uY2xvc2V0YWcoc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IG5hbWUgPSBnZXRTbGljZShzdGFydCwgZW5kKTtcbiAgICBpZiAoIWN1cnJlbnRPcHRpb25zLmlzVm9pZFRhZyhuYW1lKSkge1xuICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGUgPSBzdGFja1tpXTtcbiAgICAgICAgaWYgKGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgIGVtaXRFcnJvcigyNCwgc3RhY2tbMF0ubG9jLnN0YXJ0Lm9mZnNldCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDw9IGk7IGorKykge1xuICAgICAgICAgICAgY29uc3QgZWwgPSBzdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgb25DbG9zZVRhZyhlbCwgZW5kLCBqIDwgaSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgIGVtaXRFcnJvcigyMywgYmFja1RyYWNrKHN0YXJ0LCA2MCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgb25zZWxmY2xvc2luZ3RhZyhlbmQpIHtcbiAgICBjb25zdCBuYW1lID0gY3VycmVudE9wZW5UYWcudGFnO1xuICAgIGN1cnJlbnRPcGVuVGFnLmlzU2VsZkNsb3NpbmcgPSB0cnVlO1xuICAgIGVuZE9wZW5UYWcoZW5kKTtcbiAgICBpZiAoc3RhY2tbMF0gJiYgc3RhY2tbMF0udGFnID09PSBuYW1lKSB7XG4gICAgICBvbkNsb3NlVGFnKHN0YWNrLnNoaWZ0KCksIGVuZCk7XG4gICAgfVxuICB9LFxuICBvbmF0dHJpYm5hbWUoc3RhcnQsIGVuZCkge1xuICAgIGN1cnJlbnRQcm9wID0ge1xuICAgICAgdHlwZTogNixcbiAgICAgIG5hbWU6IGdldFNsaWNlKHN0YXJ0LCBlbmQpLFxuICAgICAgbmFtZUxvYzogZ2V0TG9jKHN0YXJ0LCBlbmQpLFxuICAgICAgdmFsdWU6IHZvaWQgMCxcbiAgICAgIGxvYzogZ2V0TG9jKHN0YXJ0KVxuICAgIH07XG4gIH0sXG4gIG9uZGlybmFtZShzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgcmF3ID0gZ2V0U2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgY29uc3QgbmFtZSA9IHJhdyA9PT0gXCIuXCIgfHwgcmF3ID09PSBcIjpcIiA/IFwiYmluZFwiIDogcmF3ID09PSBcIkBcIiA/IFwib25cIiA6IHJhdyA9PT0gXCIjXCIgPyBcInNsb3RcIiA6IHJhdy5zbGljZSgyKTtcbiAgICBpZiAoIWluVlByZSAmJiBuYW1lID09PSBcIlwiKSB7XG4gICAgICBlbWl0RXJyb3IoMjYsIHN0YXJ0KTtcbiAgICB9XG4gICAgaWYgKGluVlByZSB8fCBuYW1lID09PSBcIlwiKSB7XG4gICAgICBjdXJyZW50UHJvcCA9IHtcbiAgICAgICAgdHlwZTogNixcbiAgICAgICAgbmFtZTogcmF3LFxuICAgICAgICBuYW1lTG9jOiBnZXRMb2Moc3RhcnQsIGVuZCksXG4gICAgICAgIHZhbHVlOiB2b2lkIDAsXG4gICAgICAgIGxvYzogZ2V0TG9jKHN0YXJ0KVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudFByb3AgPSB7XG4gICAgICAgIHR5cGU6IDcsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHJhd05hbWU6IHJhdyxcbiAgICAgICAgZXhwOiB2b2lkIDAsXG4gICAgICAgIGFyZzogdm9pZCAwLFxuICAgICAgICBtb2RpZmllcnM6IHJhdyA9PT0gXCIuXCIgPyBbY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihcInByb3BcIildIDogW10sXG4gICAgICAgIGxvYzogZ2V0TG9jKHN0YXJ0KVxuICAgICAgfTtcbiAgICAgIGlmIChuYW1lID09PSBcInByZVwiKSB7XG4gICAgICAgIGluVlByZSA9IHRva2VuaXplci5pblZQcmUgPSB0cnVlO1xuICAgICAgICBjdXJyZW50VlByZUJvdW5kYXJ5ID0gY3VycmVudE9wZW5UYWc7XG4gICAgICAgIGNvbnN0IHByb3BzID0gY3VycmVudE9wZW5UYWcucHJvcHM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocHJvcHNbaV0udHlwZSA9PT0gNykge1xuICAgICAgICAgICAgcHJvcHNbaV0gPSBkaXJUb0F0dHIocHJvcHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgb25kaXJhcmcoc3RhcnQsIGVuZCkge1xuICAgIGlmIChzdGFydCA9PT0gZW5kKSByZXR1cm47XG4gICAgY29uc3QgYXJnID0gZ2V0U2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgaWYgKGluVlByZSkge1xuICAgICAgY3VycmVudFByb3AubmFtZSArPSBhcmc7XG4gICAgICBzZXRMb2NFbmQoY3VycmVudFByb3AubmFtZUxvYywgZW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaXNTdGF0aWMgPSBhcmdbMF0gIT09IGBbYDtcbiAgICAgIGN1cnJlbnRQcm9wLmFyZyA9IGNyZWF0ZUV4cChcbiAgICAgICAgaXNTdGF0aWMgPyBhcmcgOiBhcmcuc2xpY2UoMSwgLTEpLFxuICAgICAgICBpc1N0YXRpYyxcbiAgICAgICAgZ2V0TG9jKHN0YXJ0LCBlbmQpLFxuICAgICAgICBpc1N0YXRpYyA/IDMgOiAwXG4gICAgICApO1xuICAgIH1cbiAgfSxcbiAgb25kaXJtb2RpZmllcihzdGFydCwgZW5kKSB7XG4gICAgY29uc3QgbW9kID0gZ2V0U2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgaWYgKGluVlByZSkge1xuICAgICAgY3VycmVudFByb3AubmFtZSArPSBcIi5cIiArIG1vZDtcbiAgICAgIHNldExvY0VuZChjdXJyZW50UHJvcC5uYW1lTG9jLCBlbmQpO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudFByb3AubmFtZSA9PT0gXCJzbG90XCIpIHtcbiAgICAgIGNvbnN0IGFyZyA9IGN1cnJlbnRQcm9wLmFyZztcbiAgICAgIGlmIChhcmcpIHtcbiAgICAgICAgYXJnLmNvbnRlbnQgKz0gXCIuXCIgKyBtb2Q7XG4gICAgICAgIHNldExvY0VuZChhcmcubG9jLCBlbmQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBleHAgPSBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKG1vZCwgdHJ1ZSwgZ2V0TG9jKHN0YXJ0LCBlbmQpKTtcbiAgICAgIGN1cnJlbnRQcm9wLm1vZGlmaWVycy5wdXNoKGV4cCk7XG4gICAgfVxuICB9LFxuICBvbmF0dHJpYmRhdGEoc3RhcnQsIGVuZCkge1xuICAgIGN1cnJlbnRBdHRyVmFsdWUgKz0gZ2V0U2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgaWYgKGN1cnJlbnRBdHRyU3RhcnRJbmRleCA8IDApIGN1cnJlbnRBdHRyU3RhcnRJbmRleCA9IHN0YXJ0O1xuICAgIGN1cnJlbnRBdHRyRW5kSW5kZXggPSBlbmQ7XG4gIH0sXG4gIG9uYXR0cmliZW50aXR5KGNoYXIsIHN0YXJ0LCBlbmQpIHtcbiAgICBjdXJyZW50QXR0clZhbHVlICs9IGNoYXI7XG4gICAgaWYgKGN1cnJlbnRBdHRyU3RhcnRJbmRleCA8IDApIGN1cnJlbnRBdHRyU3RhcnRJbmRleCA9IHN0YXJ0O1xuICAgIGN1cnJlbnRBdHRyRW5kSW5kZXggPSBlbmQ7XG4gIH0sXG4gIG9uYXR0cmlibmFtZWVuZChlbmQpIHtcbiAgICBjb25zdCBzdGFydCA9IGN1cnJlbnRQcm9wLmxvYy5zdGFydC5vZmZzZXQ7XG4gICAgY29uc3QgbmFtZSA9IGdldFNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgIGlmIChjdXJyZW50UHJvcC50eXBlID09PSA3KSB7XG4gICAgICBjdXJyZW50UHJvcC5yYXdOYW1lID0gbmFtZTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRPcGVuVGFnLnByb3BzLnNvbWUoXG4gICAgICAocCkgPT4gKHAudHlwZSA9PT0gNyA/IHAucmF3TmFtZSA6IHAubmFtZSkgPT09IG5hbWVcbiAgICApKSB7XG4gICAgICBlbWl0RXJyb3IoMiwgc3RhcnQpO1xuICAgIH1cbiAgfSxcbiAgb25hdHRyaWJlbmQocXVvdGUsIGVuZCkge1xuICAgIGlmIChjdXJyZW50T3BlblRhZyAmJiBjdXJyZW50UHJvcCkge1xuICAgICAgc2V0TG9jRW5kKGN1cnJlbnRQcm9wLmxvYywgZW5kKTtcbiAgICAgIGlmIChxdW90ZSAhPT0gMCkge1xuICAgICAgICBpZiAoY3VycmVudEF0dHJWYWx1ZS5pbmNsdWRlcyhcIiZcIikpIHtcbiAgICAgICAgICBjdXJyZW50QXR0clZhbHVlID0gY3VycmVudE9wdGlvbnMuZGVjb2RlRW50aXRpZXMoXG4gICAgICAgICAgICBjdXJyZW50QXR0clZhbHVlLFxuICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRQcm9wLnR5cGUgPT09IDYpIHtcbiAgICAgICAgICBpZiAoY3VycmVudFByb3AubmFtZSA9PT0gXCJjbGFzc1wiKSB7XG4gICAgICAgICAgICBjdXJyZW50QXR0clZhbHVlID0gY29uZGVuc2UoY3VycmVudEF0dHJWYWx1ZSkudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocXVvdGUgPT09IDEgJiYgIWN1cnJlbnRBdHRyVmFsdWUpIHtcbiAgICAgICAgICAgIGVtaXRFcnJvcigxMywgZW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudFByb3AudmFsdWUgPSB7XG4gICAgICAgICAgICB0eXBlOiAyLFxuICAgICAgICAgICAgY29udGVudDogY3VycmVudEF0dHJWYWx1ZSxcbiAgICAgICAgICAgIGxvYzogcXVvdGUgPT09IDEgPyBnZXRMb2MoY3VycmVudEF0dHJTdGFydEluZGV4LCBjdXJyZW50QXR0ckVuZEluZGV4KSA6IGdldExvYyhjdXJyZW50QXR0clN0YXJ0SW5kZXggLSAxLCBjdXJyZW50QXR0ckVuZEluZGV4ICsgMSlcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmICh0b2tlbml6ZXIuaW5TRkNSb290ICYmIGN1cnJlbnRPcGVuVGFnLnRhZyA9PT0gXCJ0ZW1wbGF0ZVwiICYmIGN1cnJlbnRQcm9wLm5hbWUgPT09IFwibGFuZ1wiICYmIGN1cnJlbnRBdHRyVmFsdWUgJiYgY3VycmVudEF0dHJWYWx1ZSAhPT0gXCJodG1sXCIpIHtcbiAgICAgICAgICAgIHRva2VuaXplci5lbnRlclJDREFUQSh0b0NoYXJDb2RlcyhgPC90ZW1wbGF0ZWApLCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGV4cFBhcnNlTW9kZSA9IDAgLyogTm9ybWFsICovO1xuICAgICAgICAgIGN1cnJlbnRQcm9wLmV4cCA9IGNyZWF0ZUV4cChcbiAgICAgICAgICAgIGN1cnJlbnRBdHRyVmFsdWUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGdldExvYyhjdXJyZW50QXR0clN0YXJ0SW5kZXgsIGN1cnJlbnRBdHRyRW5kSW5kZXgpLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIGV4cFBhcnNlTW9kZVxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGN1cnJlbnRQcm9wLm5hbWUgPT09IFwiZm9yXCIpIHtcbiAgICAgICAgICAgIGN1cnJlbnRQcm9wLmZvclBhcnNlUmVzdWx0ID0gcGFyc2VGb3JFeHByZXNzaW9uKGN1cnJlbnRQcm9wLmV4cCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFByb3AudHlwZSAhPT0gNyB8fCBjdXJyZW50UHJvcC5uYW1lICE9PSBcInByZVwiKSB7XG4gICAgICAgIGN1cnJlbnRPcGVuVGFnLnByb3BzLnB1c2goY3VycmVudFByb3ApO1xuICAgICAgfVxuICAgIH1cbiAgICBjdXJyZW50QXR0clZhbHVlID0gXCJcIjtcbiAgICBjdXJyZW50QXR0clN0YXJ0SW5kZXggPSBjdXJyZW50QXR0ckVuZEluZGV4ID0gLTE7XG4gIH0sXG4gIG9uY29tbWVudChzdGFydCwgZW5kKSB7XG4gICAgaWYgKGN1cnJlbnRPcHRpb25zLmNvbW1lbnRzKSB7XG4gICAgICBhZGROb2RlKHtcbiAgICAgICAgdHlwZTogMyxcbiAgICAgICAgY29udGVudDogZ2V0U2xpY2Uoc3RhcnQsIGVuZCksXG4gICAgICAgIGxvYzogZ2V0TG9jKHN0YXJ0IC0gNCwgZW5kICsgMylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgb25lbmQoKSB7XG4gICAgY29uc3QgZW5kID0gY3VycmVudElucHV0Lmxlbmd0aDtcbiAgICBpZiAodG9rZW5pemVyLnN0YXRlICE9PSAxKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuaXplci5zdGF0ZSkge1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICBlbWl0RXJyb3IoNSwgZW5kKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgZW1pdEVycm9yKFxuICAgICAgICAgICAgMjUsXG4gICAgICAgICAgICB0b2tlbml6ZXIuc2VjdGlvblN0YXJ0XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyODpcbiAgICAgICAgICBpZiAodG9rZW5pemVyLmN1cnJlbnRTZXF1ZW5jZSA9PT0gU2VxdWVuY2VzLkNkYXRhRW5kKSB7XG4gICAgICAgICAgICBlbWl0RXJyb3IoNiwgZW5kKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW1pdEVycm9yKDcsIGVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDY6XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICBjYXNlIDExOlxuICAgICAgICBjYXNlIDEyOlxuICAgICAgICBjYXNlIDEzOlxuICAgICAgICBjYXNlIDE0OlxuICAgICAgICBjYXNlIDE1OlxuICAgICAgICBjYXNlIDE2OlxuICAgICAgICBjYXNlIDE3OlxuICAgICAgICBjYXNlIDE4OlxuICAgICAgICBjYXNlIDE5OlxuICAgICAgICAvLyBcIlxuICAgICAgICBjYXNlIDIwOlxuICAgICAgICAvLyAnXG4gICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgZW1pdEVycm9yKDksIGVuZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzdGFjay5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIG9uQ2xvc2VUYWcoc3RhY2tbaW5kZXhdLCBlbmQgLSAxKTtcbiAgICAgIGVtaXRFcnJvcigyNCwgc3RhY2tbaW5kZXhdLmxvYy5zdGFydC5vZmZzZXQpO1xuICAgIH1cbiAgfSxcbiAgb25jZGF0YShzdGFydCwgZW5kKSB7XG4gICAgaWYgKHN0YWNrWzBdLm5zICE9PSAwKSB7XG4gICAgICBvblRleHQoZ2V0U2xpY2Uoc3RhcnQsIGVuZCksIHN0YXJ0LCBlbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbWl0RXJyb3IoMSwgc3RhcnQgLSA5KTtcbiAgICB9XG4gIH0sXG4gIG9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKHN0YXJ0KSB7XG4gICAgaWYgKChzdGFja1swXSA/IHN0YWNrWzBdLm5zIDogY3VycmVudE9wdGlvbnMubnMpID09PSAwKSB7XG4gICAgICBlbWl0RXJyb3IoXG4gICAgICAgIDIxLFxuICAgICAgICBzdGFydCAtIDFcbiAgICAgICk7XG4gICAgfVxuICB9XG59KTtcbmNvbnN0IGZvckl0ZXJhdG9yUkUgPSAvLChbXixcXH1cXF1dKikoPzosKFteLFxcfVxcXV0qKSk/JC87XG5jb25zdCBzdHJpcFBhcmVuc1JFID0gL15cXCh8XFwpJC9nO1xuZnVuY3Rpb24gcGFyc2VGb3JFeHByZXNzaW9uKGlucHV0KSB7XG4gIGNvbnN0IGxvYyA9IGlucHV0LmxvYztcbiAgY29uc3QgZXhwID0gaW5wdXQuY29udGVudDtcbiAgY29uc3QgaW5NYXRjaCA9IGV4cC5tYXRjaChmb3JBbGlhc1JFKTtcbiAgaWYgKCFpbk1hdGNoKSByZXR1cm47XG4gIGNvbnN0IFssIExIUywgUkhTXSA9IGluTWF0Y2g7XG4gIGNvbnN0IGNyZWF0ZUFsaWFzRXhwcmVzc2lvbiA9IChjb250ZW50LCBvZmZzZXQsIGFzUGFyYW0gPSBmYWxzZSkgPT4ge1xuICAgIGNvbnN0IHN0YXJ0ID0gbG9jLnN0YXJ0Lm9mZnNldCArIG9mZnNldDtcbiAgICBjb25zdCBlbmQgPSBzdGFydCArIGNvbnRlbnQubGVuZ3RoO1xuICAgIHJldHVybiBjcmVhdGVFeHAoXG4gICAgICBjb250ZW50LFxuICAgICAgZmFsc2UsXG4gICAgICBnZXRMb2Moc3RhcnQsIGVuZCksXG4gICAgICAwLFxuICAgICAgYXNQYXJhbSA/IDEgLyogUGFyYW1zICovIDogMCAvKiBOb3JtYWwgKi9cbiAgICApO1xuICB9O1xuICBjb25zdCByZXN1bHQgPSB7XG4gICAgc291cmNlOiBjcmVhdGVBbGlhc0V4cHJlc3Npb24oUkhTLnRyaW0oKSwgZXhwLmluZGV4T2YoUkhTLCBMSFMubGVuZ3RoKSksXG4gICAgdmFsdWU6IHZvaWQgMCxcbiAgICBrZXk6IHZvaWQgMCxcbiAgICBpbmRleDogdm9pZCAwLFxuICAgIGZpbmFsaXplZDogZmFsc2VcbiAgfTtcbiAgbGV0IHZhbHVlQ29udGVudCA9IExIUy50cmltKCkucmVwbGFjZShzdHJpcFBhcmVuc1JFLCBcIlwiKS50cmltKCk7XG4gIGNvbnN0IHRyaW1tZWRPZmZzZXQgPSBMSFMuaW5kZXhPZih2YWx1ZUNvbnRlbnQpO1xuICBjb25zdCBpdGVyYXRvck1hdGNoID0gdmFsdWVDb250ZW50Lm1hdGNoKGZvckl0ZXJhdG9yUkUpO1xuICBpZiAoaXRlcmF0b3JNYXRjaCkge1xuICAgIHZhbHVlQ29udGVudCA9IHZhbHVlQ29udGVudC5yZXBsYWNlKGZvckl0ZXJhdG9yUkUsIFwiXCIpLnRyaW0oKTtcbiAgICBjb25zdCBrZXlDb250ZW50ID0gaXRlcmF0b3JNYXRjaFsxXS50cmltKCk7XG4gICAgbGV0IGtleU9mZnNldDtcbiAgICBpZiAoa2V5Q29udGVudCkge1xuICAgICAga2V5T2Zmc2V0ID0gZXhwLmluZGV4T2Yoa2V5Q29udGVudCwgdHJpbW1lZE9mZnNldCArIHZhbHVlQ29udGVudC5sZW5ndGgpO1xuICAgICAgcmVzdWx0LmtleSA9IGNyZWF0ZUFsaWFzRXhwcmVzc2lvbihrZXlDb250ZW50LCBrZXlPZmZzZXQsIHRydWUpO1xuICAgIH1cbiAgICBpZiAoaXRlcmF0b3JNYXRjaFsyXSkge1xuICAgICAgY29uc3QgaW5kZXhDb250ZW50ID0gaXRlcmF0b3JNYXRjaFsyXS50cmltKCk7XG4gICAgICBpZiAoaW5kZXhDb250ZW50KSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGNyZWF0ZUFsaWFzRXhwcmVzc2lvbihcbiAgICAgICAgICBpbmRleENvbnRlbnQsXG4gICAgICAgICAgZXhwLmluZGV4T2YoXG4gICAgICAgICAgICBpbmRleENvbnRlbnQsXG4gICAgICAgICAgICByZXN1bHQua2V5ID8ga2V5T2Zmc2V0ICsga2V5Q29udGVudC5sZW5ndGggOiB0cmltbWVkT2Zmc2V0ICsgdmFsdWVDb250ZW50Lmxlbmd0aFxuICAgICAgICAgICksXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodmFsdWVDb250ZW50KSB7XG4gICAgcmVzdWx0LnZhbHVlID0gY3JlYXRlQWxpYXNFeHByZXNzaW9uKHZhbHVlQ29udGVudCwgdHJpbW1lZE9mZnNldCwgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldFNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGN1cnJlbnRJbnB1dC5zbGljZShzdGFydCwgZW5kKTtcbn1cbmZ1bmN0aW9uIGVuZE9wZW5UYWcoZW5kKSB7XG4gIGlmICh0b2tlbml6ZXIuaW5TRkNSb290KSB7XG4gICAgY3VycmVudE9wZW5UYWcuaW5uZXJMb2MgPSBnZXRMb2MoZW5kICsgMSwgZW5kICsgMSk7XG4gIH1cbiAgYWRkTm9kZShjdXJyZW50T3BlblRhZyk7XG4gIGNvbnN0IHsgdGFnLCBucyB9ID0gY3VycmVudE9wZW5UYWc7XG4gIGlmIChucyA9PT0gMCAmJiBjdXJyZW50T3B0aW9ucy5pc1ByZVRhZyh0YWcpKSB7XG4gICAgaW5QcmUrKztcbiAgfVxuICBpZiAoY3VycmVudE9wdGlvbnMuaXNWb2lkVGFnKHRhZykpIHtcbiAgICBvbkNsb3NlVGFnKGN1cnJlbnRPcGVuVGFnLCBlbmQpO1xuICB9IGVsc2Uge1xuICAgIHN0YWNrLnVuc2hpZnQoY3VycmVudE9wZW5UYWcpO1xuICAgIGlmIChucyA9PT0gMSB8fCBucyA9PT0gMikge1xuICAgICAgdG9rZW5pemVyLmluWE1MID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgY3VycmVudE9wZW5UYWcgPSBudWxsO1xufVxuZnVuY3Rpb24gb25UZXh0KGNvbnRlbnQsIHN0YXJ0LCBlbmQpIHtcbiAge1xuICAgIGNvbnN0IHRhZyA9IHN0YWNrWzBdICYmIHN0YWNrWzBdLnRhZztcbiAgICBpZiAodGFnICE9PSBcInNjcmlwdFwiICYmIHRhZyAhPT0gXCJzdHlsZVwiICYmIGNvbnRlbnQuaW5jbHVkZXMoXCImXCIpKSB7XG4gICAgICBjb250ZW50ID0gY3VycmVudE9wdGlvbnMuZGVjb2RlRW50aXRpZXMoY29udGVudCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICBjb25zdCBwYXJlbnQgPSBzdGFja1swXSB8fCBjdXJyZW50Um9vdDtcbiAgY29uc3QgbGFzdE5vZGUgPSBwYXJlbnQuY2hpbGRyZW5bcGFyZW50LmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICBpZiAobGFzdE5vZGUgJiYgbGFzdE5vZGUudHlwZSA9PT0gMikge1xuICAgIGxhc3ROb2RlLmNvbnRlbnQgKz0gY29udGVudDtcbiAgICBzZXRMb2NFbmQobGFzdE5vZGUubG9jLCBlbmQpO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKHtcbiAgICAgIHR5cGU6IDIsXG4gICAgICBjb250ZW50LFxuICAgICAgbG9jOiBnZXRMb2Moc3RhcnQsIGVuZClcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gb25DbG9zZVRhZyhlbCwgZW5kLCBpc0ltcGxpZWQgPSBmYWxzZSkge1xuICBpZiAoaXNJbXBsaWVkKSB7XG4gICAgc2V0TG9jRW5kKGVsLmxvYywgYmFja1RyYWNrKGVuZCwgNjApKTtcbiAgfSBlbHNlIHtcbiAgICBzZXRMb2NFbmQoZWwubG9jLCBsb29rQWhlYWQoZW5kLCA2MikgKyAxKTtcbiAgfVxuICBpZiAodG9rZW5pemVyLmluU0ZDUm9vdCkge1xuICAgIGlmIChlbC5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIGVsLmlubmVyTG9jLmVuZCA9IGV4dGVuZCh7fSwgZWwuY2hpbGRyZW5bZWwuY2hpbGRyZW4ubGVuZ3RoIC0gMV0ubG9jLmVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmlubmVyTG9jLmVuZCA9IGV4dGVuZCh7fSwgZWwuaW5uZXJMb2Muc3RhcnQpO1xuICAgIH1cbiAgICBlbC5pbm5lckxvYy5zb3VyY2UgPSBnZXRTbGljZShcbiAgICAgIGVsLmlubmVyTG9jLnN0YXJ0Lm9mZnNldCxcbiAgICAgIGVsLmlubmVyTG9jLmVuZC5vZmZzZXRcbiAgICApO1xuICB9XG4gIGNvbnN0IHsgdGFnLCBucywgY2hpbGRyZW4gfSA9IGVsO1xuICBpZiAoIWluVlByZSkge1xuICAgIGlmICh0YWcgPT09IFwic2xvdFwiKSB7XG4gICAgICBlbC50YWdUeXBlID0gMjtcbiAgICB9IGVsc2UgaWYgKGlzRnJhZ21lbnRUZW1wbGF0ZShlbCkpIHtcbiAgICAgIGVsLnRhZ1R5cGUgPSAzO1xuICAgIH0gZWxzZSBpZiAoaXNDb21wb25lbnQoZWwpKSB7XG4gICAgICBlbC50YWdUeXBlID0gMTtcbiAgICB9XG4gIH1cbiAgaWYgKCF0b2tlbml6ZXIuaW5SQ0RBVEEpIHtcbiAgICBlbC5jaGlsZHJlbiA9IGNvbmRlbnNlV2hpdGVzcGFjZShjaGlsZHJlbik7XG4gIH1cbiAgaWYgKG5zID09PSAwICYmIGN1cnJlbnRPcHRpb25zLmlzSWdub3JlTmV3bGluZVRhZyh0YWcpKSB7XG4gICAgY29uc3QgZmlyc3QgPSBjaGlsZHJlblswXTtcbiAgICBpZiAoZmlyc3QgJiYgZmlyc3QudHlwZSA9PT0gMikge1xuICAgICAgZmlyc3QuY29udGVudCA9IGZpcnN0LmNvbnRlbnQucmVwbGFjZSgvXlxccj9cXG4vLCBcIlwiKTtcbiAgICB9XG4gIH1cbiAgaWYgKG5zID09PSAwICYmIGN1cnJlbnRPcHRpb25zLmlzUHJlVGFnKHRhZykpIHtcbiAgICBpblByZS0tO1xuICB9XG4gIGlmIChjdXJyZW50VlByZUJvdW5kYXJ5ID09PSBlbCkge1xuICAgIGluVlByZSA9IHRva2VuaXplci5pblZQcmUgPSBmYWxzZTtcbiAgICBjdXJyZW50VlByZUJvdW5kYXJ5ID0gbnVsbDtcbiAgfVxuICBpZiAodG9rZW5pemVyLmluWE1MICYmIChzdGFja1swXSA/IHN0YWNrWzBdLm5zIDogY3VycmVudE9wdGlvbnMubnMpID09PSAwKSB7XG4gICAgdG9rZW5pemVyLmluWE1MID0gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIGxvb2tBaGVhZChpbmRleCwgYykge1xuICBsZXQgaSA9IGluZGV4O1xuICB3aGlsZSAoY3VycmVudElucHV0LmNoYXJDb2RlQXQoaSkgIT09IGMgJiYgaSA8IGN1cnJlbnRJbnB1dC5sZW5ndGggLSAxKSBpKys7XG4gIHJldHVybiBpO1xufVxuZnVuY3Rpb24gYmFja1RyYWNrKGluZGV4LCBjKSB7XG4gIGxldCBpID0gaW5kZXg7XG4gIHdoaWxlIChjdXJyZW50SW5wdXQuY2hhckNvZGVBdChpKSAhPT0gYyAmJiBpID49IDApIGktLTtcbiAgcmV0dXJuIGk7XG59XG5jb25zdCBzcGVjaWFsVGVtcGxhdGVEaXIgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJpZlwiLCBcImVsc2VcIiwgXCJlbHNlLWlmXCIsIFwiZm9yXCIsIFwic2xvdFwiXSk7XG5mdW5jdGlvbiBpc0ZyYWdtZW50VGVtcGxhdGUoeyB0YWcsIHByb3BzIH0pIHtcbiAgaWYgKHRhZyA9PT0gXCJ0ZW1wbGF0ZVwiKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHByb3BzW2ldLnR5cGUgPT09IDcgJiYgc3BlY2lhbFRlbXBsYXRlRGlyLmhhcyhwcm9wc1tpXS5uYW1lKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNDb21wb25lbnQoeyB0YWcsIHByb3BzIH0pIHtcbiAgaWYgKGN1cnJlbnRPcHRpb25zLmlzQ3VzdG9tRWxlbWVudCh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0YWcgPT09IFwiY29tcG9uZW50XCIgfHwgaXNVcHBlckNhc2UodGFnLmNoYXJDb2RlQXQoMCkpIHx8IGlzQ29yZUNvbXBvbmVudCh0YWcpIHx8IGN1cnJlbnRPcHRpb25zLmlzQnVpbHRJbkNvbXBvbmVudCAmJiBjdXJyZW50T3B0aW9ucy5pc0J1aWx0SW5Db21wb25lbnQodGFnKSB8fCBjdXJyZW50T3B0aW9ucy5pc05hdGl2ZVRhZyAmJiAhY3VycmVudE9wdGlvbnMuaXNOYXRpdmVUYWcodGFnKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwID0gcHJvcHNbaV07XG4gICAgaWYgKHAudHlwZSA9PT0gNikge1xuICAgICAgaWYgKHAubmFtZSA9PT0gXCJpc1wiICYmIHAudmFsdWUpIHtcbiAgICAgICAgaWYgKHAudmFsdWUuY29udGVudC5zdGFydHNXaXRoKFwidnVlOlwiKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzVXBwZXJDYXNlKGMpIHtcbiAgcmV0dXJuIGMgPiA2NCAmJiBjIDwgOTE7XG59XG5jb25zdCB3aW5kb3dzTmV3bGluZVJFID0gL1xcclxcbi9nO1xuZnVuY3Rpb24gY29uZGVuc2VXaGl0ZXNwYWNlKG5vZGVzLCB0YWcpIHtcbiAgY29uc3Qgc2hvdWxkQ29uZGVuc2UgPSBjdXJyZW50T3B0aW9ucy53aGl0ZXNwYWNlICE9PSBcInByZXNlcnZlXCI7XG4gIGxldCByZW1vdmVkV2hpdGVzcGFjZSA9IGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgIGlmIChub2RlLnR5cGUgPT09IDIpIHtcbiAgICAgIGlmICghaW5QcmUpIHtcbiAgICAgICAgaWYgKGlzQWxsV2hpdGVzcGFjZShub2RlLmNvbnRlbnQpKSB7XG4gICAgICAgICAgY29uc3QgcHJldiA9IG5vZGVzW2kgLSAxXSAmJiBub2Rlc1tpIC0gMV0udHlwZTtcbiAgICAgICAgICBjb25zdCBuZXh0ID0gbm9kZXNbaSArIDFdICYmIG5vZGVzW2kgKyAxXS50eXBlO1xuICAgICAgICAgIGlmICghcHJldiB8fCAhbmV4dCB8fCBzaG91bGRDb25kZW5zZSAmJiAocHJldiA9PT0gMyAmJiAobmV4dCA9PT0gMyB8fCBuZXh0ID09PSAxKSB8fCBwcmV2ID09PSAxICYmIChuZXh0ID09PSAzIHx8IG5leHQgPT09IDEgJiYgaGFzTmV3bGluZUNoYXIobm9kZS5jb250ZW50KSkpKSB7XG4gICAgICAgICAgICByZW1vdmVkV2hpdGVzcGFjZSA9IHRydWU7XG4gICAgICAgICAgICBub2Rlc1tpXSA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUuY29udGVudCA9IFwiIFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzaG91bGRDb25kZW5zZSkge1xuICAgICAgICAgIG5vZGUuY29udGVudCA9IGNvbmRlbnNlKG5vZGUuY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuY29udGVudCA9IG5vZGUuY29udGVudC5yZXBsYWNlKHdpbmRvd3NOZXdsaW5lUkUsIFwiXFxuXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVtb3ZlZFdoaXRlc3BhY2UgPyBub2Rlcy5maWx0ZXIoQm9vbGVhbikgOiBub2Rlcztcbn1cbmZ1bmN0aW9uIGlzQWxsV2hpdGVzcGFjZShzdHIpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWlzV2hpdGVzcGFjZShzdHIuY2hhckNvZGVBdChpKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBoYXNOZXdsaW5lQ2hhcihzdHIpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGMgPT09IDEwIHx8IGMgPT09IDEzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY29uZGVuc2Uoc3RyKSB7XG4gIGxldCByZXQgPSBcIlwiO1xuICBsZXQgcHJldkNoYXJJc1doaXRlc3BhY2UgPSBmYWxzZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaXNXaGl0ZXNwYWNlKHN0ci5jaGFyQ29kZUF0KGkpKSkge1xuICAgICAgaWYgKCFwcmV2Q2hhcklzV2hpdGVzcGFjZSkge1xuICAgICAgICByZXQgKz0gXCIgXCI7XG4gICAgICAgIHByZXZDaGFySXNXaGl0ZXNwYWNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0ICs9IHN0cltpXTtcbiAgICAgIHByZXZDaGFySXNXaGl0ZXNwYWNlID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBhZGROb2RlKG5vZGUpIHtcbiAgKHN0YWNrWzBdIHx8IGN1cnJlbnRSb290KS5jaGlsZHJlbi5wdXNoKG5vZGUpO1xufVxuZnVuY3Rpb24gZ2V0TG9jKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogdG9rZW5pemVyLmdldFBvcyhzdGFydCksXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBhbGxvdyBsYXRlIGF0dGFjaG1lbnRcbiAgICBlbmQ6IGVuZCA9PSBudWxsID8gZW5kIDogdG9rZW5pemVyLmdldFBvcyhlbmQpLFxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYWxsb3cgbGF0ZSBhdHRhY2htZW50XG4gICAgc291cmNlOiBlbmQgPT0gbnVsbCA/IGVuZCA6IGdldFNsaWNlKHN0YXJ0LCBlbmQpXG4gIH07XG59XG5mdW5jdGlvbiBjbG9uZUxvYyhsb2MpIHtcbiAgcmV0dXJuIGdldExvYyhsb2Muc3RhcnQub2Zmc2V0LCBsb2MuZW5kLm9mZnNldCk7XG59XG5mdW5jdGlvbiBzZXRMb2NFbmQobG9jLCBlbmQpIHtcbiAgbG9jLmVuZCA9IHRva2VuaXplci5nZXRQb3MoZW5kKTtcbiAgbG9jLnNvdXJjZSA9IGdldFNsaWNlKGxvYy5zdGFydC5vZmZzZXQsIGVuZCk7XG59XG5mdW5jdGlvbiBkaXJUb0F0dHIoZGlyKSB7XG4gIGNvbnN0IGF0dHIgPSB7XG4gICAgdHlwZTogNixcbiAgICBuYW1lOiBkaXIucmF3TmFtZSxcbiAgICBuYW1lTG9jOiBnZXRMb2MoXG4gICAgICBkaXIubG9jLnN0YXJ0Lm9mZnNldCxcbiAgICAgIGRpci5sb2Muc3RhcnQub2Zmc2V0ICsgZGlyLnJhd05hbWUubGVuZ3RoXG4gICAgKSxcbiAgICB2YWx1ZTogdm9pZCAwLFxuICAgIGxvYzogZGlyLmxvY1xuICB9O1xuICBpZiAoZGlyLmV4cCkge1xuICAgIGNvbnN0IGxvYyA9IGRpci5leHAubG9jO1xuICAgIGlmIChsb2MuZW5kLm9mZnNldCA8IGRpci5sb2MuZW5kLm9mZnNldCkge1xuICAgICAgbG9jLnN0YXJ0Lm9mZnNldC0tO1xuICAgICAgbG9jLnN0YXJ0LmNvbHVtbi0tO1xuICAgICAgbG9jLmVuZC5vZmZzZXQrKztcbiAgICAgIGxvYy5lbmQuY29sdW1uKys7XG4gICAgfVxuICAgIGF0dHIudmFsdWUgPSB7XG4gICAgICB0eXBlOiAyLFxuICAgICAgY29udGVudDogZGlyLmV4cC5jb250ZW50LFxuICAgICAgbG9jXG4gICAgfTtcbiAgfVxuICByZXR1cm4gYXR0cjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUV4cChjb250ZW50LCBpc1N0YXRpYyA9IGZhbHNlLCBsb2MsIGNvbnN0VHlwZSA9IDAsIHBhcnNlTW9kZSA9IDAgLyogTm9ybWFsICovKSB7XG4gIGNvbnN0IGV4cCA9IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oY29udGVudCwgaXNTdGF0aWMsIGxvYywgY29uc3RUeXBlKTtcbiAgcmV0dXJuIGV4cDtcbn1cbmZ1bmN0aW9uIGVtaXRFcnJvcihjb2RlLCBpbmRleCwgbWVzc2FnZSkge1xuICBjdXJyZW50T3B0aW9ucy5vbkVycm9yKFxuICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoY29kZSwgZ2V0TG9jKGluZGV4LCBpbmRleCksIHZvaWQgMCwgbWVzc2FnZSlcbiAgKTtcbn1cbmZ1bmN0aW9uIHJlc2V0KCkge1xuICB0b2tlbml6ZXIucmVzZXQoKTtcbiAgY3VycmVudE9wZW5UYWcgPSBudWxsO1xuICBjdXJyZW50UHJvcCA9IG51bGw7XG4gIGN1cnJlbnRBdHRyVmFsdWUgPSBcIlwiO1xuICBjdXJyZW50QXR0clN0YXJ0SW5kZXggPSAtMTtcbiAgY3VycmVudEF0dHJFbmRJbmRleCA9IC0xO1xuICBzdGFjay5sZW5ndGggPSAwO1xufVxuZnVuY3Rpb24gYmFzZVBhcnNlKGlucHV0LCBvcHRpb25zKSB7XG4gIHJlc2V0KCk7XG4gIGN1cnJlbnRJbnB1dCA9IGlucHV0O1xuICBjdXJyZW50T3B0aW9ucyA9IGV4dGVuZCh7fSwgZGVmYXVsdFBhcnNlck9wdGlvbnMpO1xuICBpZiAob3B0aW9ucykge1xuICAgIGxldCBrZXk7XG4gICAgZm9yIChrZXkgaW4gb3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnNba2V5XSAhPSBudWxsKSB7XG4gICAgICAgIGN1cnJlbnRPcHRpb25zW2tleV0gPSBvcHRpb25zW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHtcbiAgICBpZiAoIWN1cnJlbnRPcHRpb25zLmRlY29kZUVudGl0aWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBbQHZ1ZS9jb21waWxlci1jb3JlXSBkZWNvZGVFbnRpdGllcyBvcHRpb24gaXMgcmVxdWlyZWQgaW4gYnJvd3NlciBidWlsZHMuYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgdG9rZW5pemVyLm1vZGUgPSBjdXJyZW50T3B0aW9ucy5wYXJzZU1vZGUgPT09IFwiaHRtbFwiID8gMSA6IGN1cnJlbnRPcHRpb25zLnBhcnNlTW9kZSA9PT0gXCJzZmNcIiA/IDIgOiAwO1xuICB0b2tlbml6ZXIuaW5YTUwgPSBjdXJyZW50T3B0aW9ucy5ucyA9PT0gMSB8fCBjdXJyZW50T3B0aW9ucy5ucyA9PT0gMjtcbiAgY29uc3QgZGVsaW1pdGVycyA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXJzO1xuICBpZiAoZGVsaW1pdGVycykge1xuICAgIHRva2VuaXplci5kZWxpbWl0ZXJPcGVuID0gdG9DaGFyQ29kZXMoZGVsaW1pdGVyc1swXSk7XG4gICAgdG9rZW5pemVyLmRlbGltaXRlckNsb3NlID0gdG9DaGFyQ29kZXMoZGVsaW1pdGVyc1sxXSk7XG4gIH1cbiAgY29uc3Qgcm9vdCA9IGN1cnJlbnRSb290ID0gY3JlYXRlUm9vdChbXSwgaW5wdXQpO1xuICB0b2tlbml6ZXIucGFyc2UoY3VycmVudElucHV0KTtcbiAgcm9vdC5sb2MgPSBnZXRMb2MoMCwgaW5wdXQubGVuZ3RoKTtcbiAgcm9vdC5jaGlsZHJlbiA9IGNvbmRlbnNlV2hpdGVzcGFjZShyb290LmNoaWxkcmVuKTtcbiAgY3VycmVudFJvb3QgPSBudWxsO1xuICByZXR1cm4gcm9vdDtcbn1cblxuZnVuY3Rpb24gY2FjaGVTdGF0aWMocm9vdCwgY29udGV4dCkge1xuICB3YWxrKFxuICAgIHJvb3QsXG4gICAgdm9pZCAwLFxuICAgIGNvbnRleHQsXG4gICAgLy8gUm9vdCBub2RlIGlzIHVuZm9ydHVuYXRlbHkgbm9uLWhvaXN0YWJsZSBkdWUgdG8gcG90ZW50aWFsIHBhcmVudFxuICAgIC8vIGZhbGx0aHJvdWdoIGF0dHJpYnV0ZXMuXG4gICAgaXNTaW5nbGVFbGVtZW50Um9vdChyb290LCByb290LmNoaWxkcmVuWzBdKVxuICApO1xufVxuZnVuY3Rpb24gaXNTaW5nbGVFbGVtZW50Um9vdChyb290LCBjaGlsZCkge1xuICBjb25zdCB7IGNoaWxkcmVuIH0gPSByb290O1xuICByZXR1cm4gY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGNoaWxkLnR5cGUgPT09IDEgJiYgIWlzU2xvdE91dGxldChjaGlsZCk7XG59XG5mdW5jdGlvbiB3YWxrKG5vZGUsIHBhcmVudCwgY29udGV4dCwgZG9Ob3RIb2lzdE5vZGUgPSBmYWxzZSwgaW5Gb3IgPSBmYWxzZSkge1xuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBub2RlO1xuICBjb25zdCB0b0NhY2hlID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChjaGlsZC50eXBlID09PSAxICYmIGNoaWxkLnRhZ1R5cGUgPT09IDApIHtcbiAgICAgIGNvbnN0IGNvbnN0YW50VHlwZSA9IGRvTm90SG9pc3ROb2RlID8gMCA6IGdldENvbnN0YW50VHlwZShjaGlsZCwgY29udGV4dCk7XG4gICAgICBpZiAoY29uc3RhbnRUeXBlID4gMCkge1xuICAgICAgICBpZiAoY29uc3RhbnRUeXBlID49IDIpIHtcbiAgICAgICAgICBjaGlsZC5jb2RlZ2VuTm9kZS5wYXRjaEZsYWcgPSAtMTtcbiAgICAgICAgICB0b0NhY2hlLnB1c2goY2hpbGQpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjb2RlZ2VuTm9kZSA9IGNoaWxkLmNvZGVnZW5Ob2RlO1xuICAgICAgICBpZiAoY29kZWdlbk5vZGUudHlwZSA9PT0gMTMpIHtcbiAgICAgICAgICBjb25zdCBmbGFnID0gY29kZWdlbk5vZGUucGF0Y2hGbGFnO1xuICAgICAgICAgIGlmICgoZmxhZyA9PT0gdm9pZCAwIHx8IGZsYWcgPT09IDUxMiB8fCBmbGFnID09PSAxKSAmJiBnZXRHZW5lcmF0ZWRQcm9wc0NvbnN0YW50VHlwZShjaGlsZCwgY29udGV4dCkgPj0gMikge1xuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSBnZXROb2RlUHJvcHMoY2hpbGQpO1xuICAgICAgICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgICAgICAgIGNvZGVnZW5Ob2RlLnByb3BzID0gY29udGV4dC5ob2lzdChwcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb2RlZ2VuTm9kZS5keW5hbWljUHJvcHMpIHtcbiAgICAgICAgICAgIGNvZGVnZW5Ob2RlLmR5bmFtaWNQcm9wcyA9IGNvbnRleHQuaG9pc3QoY29kZWdlbk5vZGUuZHluYW1pY1Byb3BzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoaWxkLnR5cGUgPT09IDEyKSB7XG4gICAgICBjb25zdCBjb25zdGFudFR5cGUgPSBkb05vdEhvaXN0Tm9kZSA/IDAgOiBnZXRDb25zdGFudFR5cGUoY2hpbGQsIGNvbnRleHQpO1xuICAgICAgaWYgKGNvbnN0YW50VHlwZSA+PSAyKSB7XG4gICAgICAgIHRvQ2FjaGUucHVzaChjaGlsZCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2hpbGQudHlwZSA9PT0gMSkge1xuICAgICAgY29uc3QgaXNDb21wb25lbnQgPSBjaGlsZC50YWdUeXBlID09PSAxO1xuICAgICAgaWYgKGlzQ29tcG9uZW50KSB7XG4gICAgICAgIGNvbnRleHQuc2NvcGVzLnZTbG90Kys7XG4gICAgICB9XG4gICAgICB3YWxrKGNoaWxkLCBub2RlLCBjb250ZXh0LCBmYWxzZSwgaW5Gb3IpO1xuICAgICAgaWYgKGlzQ29tcG9uZW50KSB7XG4gICAgICAgIGNvbnRleHQuc2NvcGVzLnZTbG90LS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGlsZC50eXBlID09PSAxMSkge1xuICAgICAgd2FsayhjaGlsZCwgbm9kZSwgY29udGV4dCwgY2hpbGQuY2hpbGRyZW4ubGVuZ3RoID09PSAxLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnR5cGUgPT09IDkpIHtcbiAgICAgIGZvciAobGV0IGkyID0gMDsgaTIgPCBjaGlsZC5icmFuY2hlcy5sZW5ndGg7IGkyKyspIHtcbiAgICAgICAgd2FsayhcbiAgICAgICAgICBjaGlsZC5icmFuY2hlc1tpMl0sXG4gICAgICAgICAgbm9kZSxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIGNoaWxkLmJyYW5jaGVzW2kyXS5jaGlsZHJlbi5sZW5ndGggPT09IDEsXG4gICAgICAgICAgaW5Gb3JcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbGV0IGNhY2hlZEFzQXJyYXkgPSBmYWxzZTtcbiAgaWYgKHRvQ2FjaGUubGVuZ3RoID09PSBjaGlsZHJlbi5sZW5ndGggJiYgbm9kZS50eXBlID09PSAxKSB7XG4gICAgaWYgKG5vZGUudGFnVHlwZSA9PT0gMCAmJiBub2RlLmNvZGVnZW5Ob2RlICYmIG5vZGUuY29kZWdlbk5vZGUudHlwZSA9PT0gMTMgJiYgaXNBcnJheShub2RlLmNvZGVnZW5Ob2RlLmNoaWxkcmVuKSkge1xuICAgICAgbm9kZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbiA9IGdldENhY2hlRXhwcmVzc2lvbihcbiAgICAgICAgY3JlYXRlQXJyYXlFeHByZXNzaW9uKG5vZGUuY29kZWdlbk5vZGUuY2hpbGRyZW4pXG4gICAgICApO1xuICAgICAgY2FjaGVkQXNBcnJheSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChub2RlLnRhZ1R5cGUgPT09IDEgJiYgbm9kZS5jb2RlZ2VuTm9kZSAmJiBub2RlLmNvZGVnZW5Ob2RlLnR5cGUgPT09IDEzICYmIG5vZGUuY29kZWdlbk5vZGUuY2hpbGRyZW4gJiYgIWlzQXJyYXkobm9kZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbikgJiYgbm9kZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbi50eXBlID09PSAxNSkge1xuICAgICAgY29uc3Qgc2xvdCA9IGdldFNsb3ROb2RlKG5vZGUuY29kZWdlbk5vZGUsIFwiZGVmYXVsdFwiKTtcbiAgICAgIGlmIChzbG90KSB7XG4gICAgICAgIHNsb3QucmV0dXJucyA9IGdldENhY2hlRXhwcmVzc2lvbihcbiAgICAgICAgICBjcmVhdGVBcnJheUV4cHJlc3Npb24oc2xvdC5yZXR1cm5zKVxuICAgICAgICApO1xuICAgICAgICBjYWNoZWRBc0FycmF5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGUudGFnVHlwZSA9PT0gMyAmJiBwYXJlbnQgJiYgcGFyZW50LnR5cGUgPT09IDEgJiYgcGFyZW50LnRhZ1R5cGUgPT09IDEgJiYgcGFyZW50LmNvZGVnZW5Ob2RlICYmIHBhcmVudC5jb2RlZ2VuTm9kZS50eXBlID09PSAxMyAmJiBwYXJlbnQuY29kZWdlbk5vZGUuY2hpbGRyZW4gJiYgIWlzQXJyYXkocGFyZW50LmNvZGVnZW5Ob2RlLmNoaWxkcmVuKSAmJiBwYXJlbnQuY29kZWdlbk5vZGUuY2hpbGRyZW4udHlwZSA9PT0gMTUpIHtcbiAgICAgIGNvbnN0IHNsb3ROYW1lID0gZmluZERpcihub2RlLCBcInNsb3RcIiwgdHJ1ZSk7XG4gICAgICBjb25zdCBzbG90ID0gc2xvdE5hbWUgJiYgc2xvdE5hbWUuYXJnICYmIGdldFNsb3ROb2RlKHBhcmVudC5jb2RlZ2VuTm9kZSwgc2xvdE5hbWUuYXJnKTtcbiAgICAgIGlmIChzbG90KSB7XG4gICAgICAgIHNsb3QucmV0dXJucyA9IGdldENhY2hlRXhwcmVzc2lvbihcbiAgICAgICAgICBjcmVhdGVBcnJheUV4cHJlc3Npb24oc2xvdC5yZXR1cm5zKVxuICAgICAgICApO1xuICAgICAgICBjYWNoZWRBc0FycmF5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFjYWNoZWRBc0FycmF5KSB7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiB0b0NhY2hlKSB7XG4gICAgICBjaGlsZC5jb2RlZ2VuTm9kZSA9IGNvbnRleHQuY2FjaGUoY2hpbGQuY29kZWdlbk5vZGUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRDYWNoZUV4cHJlc3Npb24odmFsdWUpIHtcbiAgICBjb25zdCBleHAgPSBjb250ZXh0LmNhY2hlKHZhbHVlKTtcbiAgICBpZiAoaW5Gb3IgJiYgY29udGV4dC5obXIpIHtcbiAgICAgIGV4cC5uZWVkQXJyYXlTcHJlYWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZXhwO1xuICB9XG4gIGZ1bmN0aW9uIGdldFNsb3ROb2RlKG5vZGUyLCBuYW1lKSB7XG4gICAgaWYgKG5vZGUyLmNoaWxkcmVuICYmICFpc0FycmF5KG5vZGUyLmNoaWxkcmVuKSAmJiBub2RlMi5jaGlsZHJlbi50eXBlID09PSAxNSkge1xuICAgICAgY29uc3Qgc2xvdCA9IG5vZGUyLmNoaWxkcmVuLnByb3BlcnRpZXMuZmluZChcbiAgICAgICAgKHApID0+IHAua2V5ID09PSBuYW1lIHx8IHAua2V5LmNvbnRlbnQgPT09IG5hbWVcbiAgICAgICk7XG4gICAgICByZXR1cm4gc2xvdCAmJiBzbG90LnZhbHVlO1xuICAgIH1cbiAgfVxuICBpZiAodG9DYWNoZS5sZW5ndGggJiYgY29udGV4dC50cmFuc2Zvcm1Ib2lzdCkge1xuICAgIGNvbnRleHQudHJhbnNmb3JtSG9pc3QoY2hpbGRyZW4sIGNvbnRleHQsIG5vZGUpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRDb25zdGFudFR5cGUobm9kZSwgY29udGV4dCkge1xuICBjb25zdCB7IGNvbnN0YW50Q2FjaGUgfSA9IGNvbnRleHQ7XG4gIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgY2FzZSAxOlxuICAgICAgaWYgKG5vZGUudGFnVHlwZSAhPT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNhY2hlZCA9IGNvbnN0YW50Q2FjaGUuZ2V0KG5vZGUpO1xuICAgICAgaWYgKGNhY2hlZCAhPT0gdm9pZCAwKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgICB9XG4gICAgICBjb25zdCBjb2RlZ2VuTm9kZSA9IG5vZGUuY29kZWdlbk5vZGU7XG4gICAgICBpZiAoY29kZWdlbk5vZGUudHlwZSAhPT0gMTMpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoY29kZWdlbk5vZGUuaXNCbG9jayAmJiBub2RlLnRhZyAhPT0gXCJzdmdcIiAmJiBub2RlLnRhZyAhPT0gXCJmb3JlaWduT2JqZWN0XCIgJiYgbm9kZS50YWcgIT09IFwibWF0aFwiKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGNvZGVnZW5Ob2RlLnBhdGNoRmxhZyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGxldCByZXR1cm5UeXBlMiA9IDM7XG4gICAgICAgIGNvbnN0IGdlbmVyYXRlZFByb3BzVHlwZSA9IGdldEdlbmVyYXRlZFByb3BzQ29uc3RhbnRUeXBlKG5vZGUsIGNvbnRleHQpO1xuICAgICAgICBpZiAoZ2VuZXJhdGVkUHJvcHNUeXBlID09PSAwKSB7XG4gICAgICAgICAgY29uc3RhbnRDYWNoZS5zZXQobm9kZSwgMCk7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdlbmVyYXRlZFByb3BzVHlwZSA8IHJldHVyblR5cGUyKSB7XG4gICAgICAgICAgcmV0dXJuVHlwZTIgPSBnZW5lcmF0ZWRQcm9wc1R5cGU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGRUeXBlID0gZ2V0Q29uc3RhbnRUeXBlKG5vZGUuY2hpbGRyZW5baV0sIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChjaGlsZFR5cGUgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0YW50Q2FjaGUuc2V0KG5vZGUsIDApO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGlsZFR5cGUgPCByZXR1cm5UeXBlMikge1xuICAgICAgICAgICAgcmV0dXJuVHlwZTIgPSBjaGlsZFR5cGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZXR1cm5UeXBlMiA+IDEpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUucHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBub2RlLnByb3BzW2ldO1xuICAgICAgICAgICAgaWYgKHAudHlwZSA9PT0gNyAmJiBwLm5hbWUgPT09IFwiYmluZFwiICYmIHAuZXhwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGV4cFR5cGUgPSBnZXRDb25zdGFudFR5cGUocC5leHAsIGNvbnRleHQpO1xuICAgICAgICAgICAgICBpZiAoZXhwVHlwZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0YW50Q2FjaGUuc2V0KG5vZGUsIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChleHBUeXBlIDwgcmV0dXJuVHlwZTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5UeXBlMiA9IGV4cFR5cGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGVnZW5Ob2RlLmlzQmxvY2spIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUucHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBub2RlLnByb3BzW2ldO1xuICAgICAgICAgICAgaWYgKHAudHlwZSA9PT0gNykge1xuICAgICAgICAgICAgICBjb25zdGFudENhY2hlLnNldChub2RlLCAwKTtcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRleHQucmVtb3ZlSGVscGVyKE9QRU5fQkxPQ0spO1xuICAgICAgICAgIGNvbnRleHQucmVtb3ZlSGVscGVyKFxuICAgICAgICAgICAgZ2V0Vk5vZGVCbG9ja0hlbHBlcihjb250ZXh0LmluU1NSLCBjb2RlZ2VuTm9kZS5pc0NvbXBvbmVudClcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvZGVnZW5Ob2RlLmlzQmxvY2sgPSBmYWxzZTtcbiAgICAgICAgICBjb250ZXh0LmhlbHBlcihnZXRWTm9kZUhlbHBlcihjb250ZXh0LmluU1NSLCBjb2RlZ2VuTm9kZS5pc0NvbXBvbmVudCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0YW50Q2FjaGUuc2V0KG5vZGUsIHJldHVyblR5cGUyKTtcbiAgICAgICAgcmV0dXJuIHJldHVyblR5cGUyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3RhbnRDYWNoZS5zZXQobm9kZSwgMCk7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIGNhc2UgMjpcbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gMztcbiAgICBjYXNlIDk6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIDA7XG4gICAgY2FzZSA1OlxuICAgIGNhc2UgMTI6XG4gICAgICByZXR1cm4gZ2V0Q29uc3RhbnRUeXBlKG5vZGUuY29udGVudCwgY29udGV4dCk7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIG5vZGUuY29uc3RUeXBlO1xuICAgIGNhc2UgODpcbiAgICAgIGxldCByZXR1cm5UeXBlID0gMztcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICAgIGlmIChpc1N0cmluZyhjaGlsZCkgfHwgaXNTeW1ib2woY2hpbGQpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hpbGRUeXBlID0gZ2V0Q29uc3RhbnRUeXBlKGNoaWxkLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGNoaWxkVHlwZSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkVHlwZSA8IHJldHVyblR5cGUpIHtcbiAgICAgICAgICByZXR1cm5UeXBlID0gY2hpbGRUeXBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0dXJuVHlwZTtcbiAgICBjYXNlIDIwOlxuICAgICAgcmV0dXJuIDI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAwO1xuICB9XG59XG5jb25zdCBhbGxvd0hvaXN0ZWRIZWxwZXJTZXQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXG4gIE5PUk1BTElaRV9DTEFTUyxcbiAgTk9STUFMSVpFX1NUWUxFLFxuICBOT1JNQUxJWkVfUFJPUFMsXG4gIEdVQVJEX1JFQUNUSVZFX1BST1BTXG5dKTtcbmZ1bmN0aW9uIGdldENvbnN0YW50VHlwZU9mSGVscGVyQ2FsbCh2YWx1ZSwgY29udGV4dCkge1xuICBpZiAodmFsdWUudHlwZSA9PT0gMTQgJiYgIWlzU3RyaW5nKHZhbHVlLmNhbGxlZSkgJiYgYWxsb3dIb2lzdGVkSGVscGVyU2V0Lmhhcyh2YWx1ZS5jYWxsZWUpKSB7XG4gICAgY29uc3QgYXJnID0gdmFsdWUuYXJndW1lbnRzWzBdO1xuICAgIGlmIChhcmcudHlwZSA9PT0gNCkge1xuICAgICAgcmV0dXJuIGdldENvbnN0YW50VHlwZShhcmcsIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAoYXJnLnR5cGUgPT09IDE0KSB7XG4gICAgICByZXR1cm4gZ2V0Q29uc3RhbnRUeXBlT2ZIZWxwZXJDYWxsKGFyZywgY29udGV4dCk7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuZnVuY3Rpb24gZ2V0R2VuZXJhdGVkUHJvcHNDb25zdGFudFR5cGUobm9kZSwgY29udGV4dCkge1xuICBsZXQgcmV0dXJuVHlwZSA9IDM7XG4gIGNvbnN0IHByb3BzID0gZ2V0Tm9kZVByb3BzKG5vZGUpO1xuICBpZiAocHJvcHMgJiYgcHJvcHMudHlwZSA9PT0gMTUpIHtcbiAgICBjb25zdCB7IHByb3BlcnRpZXMgfSA9IHByb3BzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSBwcm9wZXJ0aWVzW2ldO1xuICAgICAgY29uc3Qga2V5VHlwZSA9IGdldENvbnN0YW50VHlwZShrZXksIGNvbnRleHQpO1xuICAgICAgaWYgKGtleVR5cGUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGtleVR5cGU7XG4gICAgICB9XG4gICAgICBpZiAoa2V5VHlwZSA8IHJldHVyblR5cGUpIHtcbiAgICAgICAgcmV0dXJuVHlwZSA9IGtleVR5cGU7XG4gICAgICB9XG4gICAgICBsZXQgdmFsdWVUeXBlO1xuICAgICAgaWYgKHZhbHVlLnR5cGUgPT09IDQpIHtcbiAgICAgICAgdmFsdWVUeXBlID0gZ2V0Q29uc3RhbnRUeXBlKHZhbHVlLCBjb250ZXh0KTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUudHlwZSA9PT0gMTQpIHtcbiAgICAgICAgdmFsdWVUeXBlID0gZ2V0Q29uc3RhbnRUeXBlT2ZIZWxwZXJDYWxsKHZhbHVlLCBjb250ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlVHlwZSA9IDA7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWVUeXBlID09PSAwKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVR5cGU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWVUeXBlIDwgcmV0dXJuVHlwZSkge1xuICAgICAgICByZXR1cm5UeXBlID0gdmFsdWVUeXBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0dXJuVHlwZTtcbn1cbmZ1bmN0aW9uIGdldE5vZGVQcm9wcyhub2RlKSB7XG4gIGNvbnN0IGNvZGVnZW5Ob2RlID0gbm9kZS5jb2RlZ2VuTm9kZTtcbiAgaWYgKGNvZGVnZW5Ob2RlLnR5cGUgPT09IDEzKSB7XG4gICAgcmV0dXJuIGNvZGVnZW5Ob2RlLnByb3BzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zZm9ybUNvbnRleHQocm9vdCwge1xuICBmaWxlbmFtZSA9IFwiXCIsXG4gIHByZWZpeElkZW50aWZpZXJzID0gZmFsc2UsXG4gIGhvaXN0U3RhdGljID0gZmFsc2UsXG4gIGhtciA9IGZhbHNlLFxuICBjYWNoZUhhbmRsZXJzID0gZmFsc2UsXG4gIG5vZGVUcmFuc2Zvcm1zID0gW10sXG4gIGRpcmVjdGl2ZVRyYW5zZm9ybXMgPSB7fSxcbiAgdHJhbnNmb3JtSG9pc3QgPSBudWxsLFxuICBpc0J1aWx0SW5Db21wb25lbnQgPSBOT09QLFxuICBpc0N1c3RvbUVsZW1lbnQgPSBOT09QLFxuICBleHByZXNzaW9uUGx1Z2lucyA9IFtdLFxuICBzY29wZUlkID0gbnVsbCxcbiAgc2xvdHRlZCA9IHRydWUsXG4gIHNzciA9IGZhbHNlLFxuICBpblNTUiA9IGZhbHNlLFxuICBzc3JDc3NWYXJzID0gYGAsXG4gIGJpbmRpbmdNZXRhZGF0YSA9IEVNUFRZX09CSixcbiAgaW5saW5lID0gZmFsc2UsXG4gIGlzVFMgPSBmYWxzZSxcbiAgb25FcnJvciA9IGRlZmF1bHRPbkVycm9yLFxuICBvbldhcm4gPSBkZWZhdWx0T25XYXJuLFxuICBjb21wYXRDb25maWdcbn0pIHtcbiAgY29uc3QgbmFtZU1hdGNoID0gZmlsZW5hbWUucmVwbGFjZSgvXFw/LiokLywgXCJcIikubWF0Y2goLyhbXi9cXFxcXSspXFwuXFx3KyQvKTtcbiAgY29uc3QgY29udGV4dCA9IHtcbiAgICAvLyBvcHRpb25zXG4gICAgZmlsZW5hbWUsXG4gICAgc2VsZk5hbWU6IG5hbWVNYXRjaCAmJiBjYXBpdGFsaXplKGNhbWVsaXplKG5hbWVNYXRjaFsxXSkpLFxuICAgIHByZWZpeElkZW50aWZpZXJzLFxuICAgIGhvaXN0U3RhdGljLFxuICAgIGhtcixcbiAgICBjYWNoZUhhbmRsZXJzLFxuICAgIG5vZGVUcmFuc2Zvcm1zLFxuICAgIGRpcmVjdGl2ZVRyYW5zZm9ybXMsXG4gICAgdHJhbnNmb3JtSG9pc3QsXG4gICAgaXNCdWlsdEluQ29tcG9uZW50LFxuICAgIGlzQ3VzdG9tRWxlbWVudCxcbiAgICBleHByZXNzaW9uUGx1Z2lucyxcbiAgICBzY29wZUlkLFxuICAgIHNsb3R0ZWQsXG4gICAgc3NyLFxuICAgIGluU1NSLFxuICAgIHNzckNzc1ZhcnMsXG4gICAgYmluZGluZ01ldGFkYXRhLFxuICAgIGlubGluZSxcbiAgICBpc1RTLFxuICAgIG9uRXJyb3IsXG4gICAgb25XYXJuLFxuICAgIGNvbXBhdENvbmZpZyxcbiAgICAvLyBzdGF0ZVxuICAgIHJvb3QsXG4gICAgaGVscGVyczogLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSxcbiAgICBjb21wb25lbnRzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLFxuICAgIGRpcmVjdGl2ZXM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksXG4gICAgaG9pc3RzOiBbXSxcbiAgICBpbXBvcnRzOiBbXSxcbiAgICBjYWNoZWQ6IFtdLFxuICAgIGNvbnN0YW50Q2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLFxuICAgIHRlbXBzOiAwLFxuICAgIGlkZW50aWZpZXJzOiAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICBzY29wZXM6IHtcbiAgICAgIHZGb3I6IDAsXG4gICAgICB2U2xvdDogMCxcbiAgICAgIHZQcmU6IDAsXG4gICAgICB2T25jZTogMFxuICAgIH0sXG4gICAgcGFyZW50OiBudWxsLFxuICAgIGdyYW5kUGFyZW50OiBudWxsLFxuICAgIGN1cnJlbnROb2RlOiByb290LFxuICAgIGNoaWxkSW5kZXg6IDAsXG4gICAgaW5WT25jZTogZmFsc2UsXG4gICAgLy8gbWV0aG9kc1xuICAgIGhlbHBlcihuYW1lKSB7XG4gICAgICBjb25zdCBjb3VudCA9IGNvbnRleHQuaGVscGVycy5nZXQobmFtZSkgfHwgMDtcbiAgICAgIGNvbnRleHQuaGVscGVycy5zZXQobmFtZSwgY291bnQgKyAxKTtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH0sXG4gICAgcmVtb3ZlSGVscGVyKG5hbWUpIHtcbiAgICAgIGNvbnN0IGNvdW50ID0gY29udGV4dC5oZWxwZXJzLmdldChuYW1lKTtcbiAgICAgIGlmIChjb3VudCkge1xuICAgICAgICBjb25zdCBjdXJyZW50Q291bnQgPSBjb3VudCAtIDE7XG4gICAgICAgIGlmICghY3VycmVudENvdW50KSB7XG4gICAgICAgICAgY29udGV4dC5oZWxwZXJzLmRlbGV0ZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0LmhlbHBlcnMuc2V0KG5hbWUsIGN1cnJlbnRDb3VudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGhlbHBlclN0cmluZyhuYW1lKSB7XG4gICAgICByZXR1cm4gYF8ke2hlbHBlck5hbWVNYXBbY29udGV4dC5oZWxwZXIobmFtZSldfWA7XG4gICAgfSxcbiAgICByZXBsYWNlTm9kZShub2RlKSB7XG4gICAgICB7XG4gICAgICAgIGlmICghY29udGV4dC5jdXJyZW50Tm9kZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm9kZSBiZWluZyByZXBsYWNlZCBpcyBhbHJlYWR5IHJlbW92ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb250ZXh0LnBhcmVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlcGxhY2Ugcm9vdCBub2RlLmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb250ZXh0LnBhcmVudC5jaGlsZHJlbltjb250ZXh0LmNoaWxkSW5kZXhdID0gY29udGV4dC5jdXJyZW50Tm9kZSA9IG5vZGU7XG4gICAgfSxcbiAgICByZW1vdmVOb2RlKG5vZGUpIHtcbiAgICAgIGlmICghY29udGV4dC5wYXJlbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcmVtb3ZlIHJvb3Qgbm9kZS5gKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxpc3QgPSBjb250ZXh0LnBhcmVudC5jaGlsZHJlbjtcbiAgICAgIGNvbnN0IHJlbW92YWxJbmRleCA9IG5vZGUgPyBsaXN0LmluZGV4T2Yobm9kZSkgOiBjb250ZXh0LmN1cnJlbnROb2RlID8gY29udGV4dC5jaGlsZEluZGV4IDogLTE7XG4gICAgICBpZiAocmVtb3ZhbEluZGV4IDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vZGUgYmVpbmcgcmVtb3ZlZCBpcyBub3QgYSBjaGlsZCBvZiBjdXJyZW50IHBhcmVudGApO1xuICAgICAgfVxuICAgICAgaWYgKCFub2RlIHx8IG5vZGUgPT09IGNvbnRleHQuY3VycmVudE5vZGUpIHtcbiAgICAgICAgY29udGV4dC5jdXJyZW50Tm9kZSA9IG51bGw7XG4gICAgICAgIGNvbnRleHQub25Ob2RlUmVtb3ZlZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNvbnRleHQuY2hpbGRJbmRleCA+IHJlbW92YWxJbmRleCkge1xuICAgICAgICAgIGNvbnRleHQuY2hpbGRJbmRleC0tO1xuICAgICAgICAgIGNvbnRleHQub25Ob2RlUmVtb3ZlZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb250ZXh0LnBhcmVudC5jaGlsZHJlbi5zcGxpY2UocmVtb3ZhbEluZGV4LCAxKTtcbiAgICB9LFxuICAgIG9uTm9kZVJlbW92ZWQ6IE5PT1AsXG4gICAgYWRkSWRlbnRpZmllcnMoZXhwKSB7XG4gICAgfSxcbiAgICByZW1vdmVJZGVudGlmaWVycyhleHApIHtcbiAgICB9LFxuICAgIGhvaXN0KGV4cCkge1xuICAgICAgaWYgKGlzU3RyaW5nKGV4cCkpIGV4cCA9IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oZXhwKTtcbiAgICAgIGNvbnRleHQuaG9pc3RzLnB1c2goZXhwKTtcbiAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKFxuICAgICAgICBgX2hvaXN0ZWRfJHtjb250ZXh0LmhvaXN0cy5sZW5ndGh9YCxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGV4cC5sb2MsXG4gICAgICAgIDJcbiAgICAgICk7XG4gICAgICBpZGVudGlmaWVyLmhvaXN0ZWQgPSBleHA7XG4gICAgICByZXR1cm4gaWRlbnRpZmllcjtcbiAgICB9LFxuICAgIGNhY2hlKGV4cCwgaXNWTm9kZSA9IGZhbHNlLCBpblZPbmNlID0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IGNhY2hlRXhwID0gY3JlYXRlQ2FjaGVFeHByZXNzaW9uKFxuICAgICAgICBjb250ZXh0LmNhY2hlZC5sZW5ndGgsXG4gICAgICAgIGV4cCxcbiAgICAgICAgaXNWTm9kZSxcbiAgICAgICAgaW5WT25jZVxuICAgICAgKTtcbiAgICAgIGNvbnRleHQuY2FjaGVkLnB1c2goY2FjaGVFeHApO1xuICAgICAgcmV0dXJuIGNhY2hlRXhwO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm0ocm9vdCwgb3B0aW9ucykge1xuICBjb25zdCBjb250ZXh0ID0gY3JlYXRlVHJhbnNmb3JtQ29udGV4dChyb290LCBvcHRpb25zKTtcbiAgdHJhdmVyc2VOb2RlKHJvb3QsIGNvbnRleHQpO1xuICBpZiAob3B0aW9ucy5ob2lzdFN0YXRpYykge1xuICAgIGNhY2hlU3RhdGljKHJvb3QsIGNvbnRleHQpO1xuICB9XG4gIGlmICghb3B0aW9ucy5zc3IpIHtcbiAgICBjcmVhdGVSb290Q29kZWdlbihyb290LCBjb250ZXh0KTtcbiAgfVxuICByb290LmhlbHBlcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbLi4uY29udGV4dC5oZWxwZXJzLmtleXMoKV0pO1xuICByb290LmNvbXBvbmVudHMgPSBbLi4uY29udGV4dC5jb21wb25lbnRzXTtcbiAgcm9vdC5kaXJlY3RpdmVzID0gWy4uLmNvbnRleHQuZGlyZWN0aXZlc107XG4gIHJvb3QuaW1wb3J0cyA9IGNvbnRleHQuaW1wb3J0cztcbiAgcm9vdC5ob2lzdHMgPSBjb250ZXh0LmhvaXN0cztcbiAgcm9vdC50ZW1wcyA9IGNvbnRleHQudGVtcHM7XG4gIHJvb3QuY2FjaGVkID0gY29udGV4dC5jYWNoZWQ7XG4gIHJvb3QudHJhbnNmb3JtZWQgPSB0cnVlO1xufVxuZnVuY3Rpb24gY3JlYXRlUm9vdENvZGVnZW4ocm9vdCwgY29udGV4dCkge1xuICBjb25zdCB7IGhlbHBlciB9ID0gY29udGV4dDtcbiAgY29uc3QgeyBjaGlsZHJlbiB9ID0gcm9vdDtcbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bMF07XG4gICAgaWYgKGlzU2luZ2xlRWxlbWVudFJvb3Qocm9vdCwgY2hpbGQpICYmIGNoaWxkLmNvZGVnZW5Ob2RlKSB7XG4gICAgICBjb25zdCBjb2RlZ2VuTm9kZSA9IGNoaWxkLmNvZGVnZW5Ob2RlO1xuICAgICAgaWYgKGNvZGVnZW5Ob2RlLnR5cGUgPT09IDEzKSB7XG4gICAgICAgIGNvbnZlcnRUb0Jsb2NrKGNvZGVnZW5Ob2RlLCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIHJvb3QuY29kZWdlbk5vZGUgPSBjb2RlZ2VuTm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm9vdC5jb2RlZ2VuTm9kZSA9IGNoaWxkO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgbGV0IHBhdGNoRmxhZyA9IDY0O1xuICAgIGlmIChjaGlsZHJlbi5maWx0ZXIoKGMpID0+IGMudHlwZSAhPT0gMykubGVuZ3RoID09PSAxKSB7XG4gICAgICBwYXRjaEZsYWcgfD0gMjA0ODtcbiAgICB9XG4gICAgcm9vdC5jb2RlZ2VuTm9kZSA9IGNyZWF0ZVZOb2RlQ2FsbChcbiAgICAgIGNvbnRleHQsXG4gICAgICBoZWxwZXIoRlJBR01FTlQpLFxuICAgICAgdm9pZCAwLFxuICAgICAgcm9vdC5jaGlsZHJlbixcbiAgICAgIHBhdGNoRmxhZyxcbiAgICAgIHZvaWQgMCxcbiAgICAgIHZvaWQgMCxcbiAgICAgIHRydWUsXG4gICAgICB2b2lkIDAsXG4gICAgICBmYWxzZVxuICAgICk7XG4gIH0gZWxzZSA7XG59XG5mdW5jdGlvbiB0cmF2ZXJzZUNoaWxkcmVuKHBhcmVudCwgY29udGV4dCkge1xuICBsZXQgaSA9IDA7XG4gIGNvbnN0IG5vZGVSZW1vdmVkID0gKCkgPT4ge1xuICAgIGktLTtcbiAgfTtcbiAgZm9yICg7IGkgPCBwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGlsZCA9IHBhcmVudC5jaGlsZHJlbltpXTtcbiAgICBpZiAoaXNTdHJpbmcoY2hpbGQpKSBjb250aW51ZTtcbiAgICBjb250ZXh0LmdyYW5kUGFyZW50ID0gY29udGV4dC5wYXJlbnQ7XG4gICAgY29udGV4dC5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgY29udGV4dC5jaGlsZEluZGV4ID0gaTtcbiAgICBjb250ZXh0Lm9uTm9kZVJlbW92ZWQgPSBub2RlUmVtb3ZlZDtcbiAgICB0cmF2ZXJzZU5vZGUoY2hpbGQsIGNvbnRleHQpO1xuICB9XG59XG5mdW5jdGlvbiB0cmF2ZXJzZU5vZGUobm9kZSwgY29udGV4dCkge1xuICBjb250ZXh0LmN1cnJlbnROb2RlID0gbm9kZTtcbiAgY29uc3QgeyBub2RlVHJhbnNmb3JtcyB9ID0gY29udGV4dDtcbiAgY29uc3QgZXhpdEZucyA9IFtdO1xuICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgbm9kZVRyYW5zZm9ybXMubGVuZ3RoOyBpMisrKSB7XG4gICAgY29uc3Qgb25FeGl0ID0gbm9kZVRyYW5zZm9ybXNbaTJdKG5vZGUsIGNvbnRleHQpO1xuICAgIGlmIChvbkV4aXQpIHtcbiAgICAgIGlmIChpc0FycmF5KG9uRXhpdCkpIHtcbiAgICAgICAgZXhpdEZucy5wdXNoKC4uLm9uRXhpdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGl0Rm5zLnB1c2gob25FeGl0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFjb250ZXh0LmN1cnJlbnROb2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUgPSBjb250ZXh0LmN1cnJlbnROb2RlO1xuICAgIH1cbiAgfVxuICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgMzpcbiAgICAgIGlmICghY29udGV4dC5zc3IpIHtcbiAgICAgICAgY29udGV4dC5oZWxwZXIoQ1JFQVRFX0NPTU1FTlQpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgaWYgKCFjb250ZXh0LnNzcikge1xuICAgICAgICBjb250ZXh0LmhlbHBlcihUT19ESVNQTEFZX1NUUklORyk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICAvLyBmb3IgY29udGFpbmVyIHR5cGVzLCBmdXJ0aGVyIHRyYXZlcnNlIGRvd253YXJkc1xuICAgIGNhc2UgOTpcbiAgICAgIGZvciAobGV0IGkyID0gMDsgaTIgPCBub2RlLmJyYW5jaGVzLmxlbmd0aDsgaTIrKykge1xuICAgICAgICB0cmF2ZXJzZU5vZGUobm9kZS5icmFuY2hlc1tpMl0sIGNvbnRleHQpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMDpcbiAgICBjYXNlIDExOlxuICAgIGNhc2UgMTpcbiAgICBjYXNlIDA6XG4gICAgICB0cmF2ZXJzZUNoaWxkcmVuKG5vZGUsIGNvbnRleHQpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgY29udGV4dC5jdXJyZW50Tm9kZSA9IG5vZGU7XG4gIGxldCBpID0gZXhpdEZucy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBleGl0Rm5zW2ldKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVN0cnVjdHVyYWxEaXJlY3RpdmVUcmFuc2Zvcm0obmFtZSwgZm4pIHtcbiAgY29uc3QgbWF0Y2hlcyA9IGlzU3RyaW5nKG5hbWUpID8gKG4pID0+IG4gPT09IG5hbWUgOiAobikgPT4gbmFtZS50ZXN0KG4pO1xuICByZXR1cm4gKG5vZGUsIGNvbnRleHQpID0+IHtcbiAgICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgICBjb25zdCB7IHByb3BzIH0gPSBub2RlO1xuICAgICAgaWYgKG5vZGUudGFnVHlwZSA9PT0gMyAmJiBwcm9wcy5zb21lKGlzVlNsb3QpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGV4aXRGbnMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgICBpZiAocHJvcC50eXBlID09PSA3ICYmIG1hdGNoZXMocHJvcC5uYW1lKSkge1xuICAgICAgICAgIHByb3BzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBpLS07XG4gICAgICAgICAgY29uc3Qgb25FeGl0ID0gZm4obm9kZSwgcHJvcCwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKG9uRXhpdCkgZXhpdEZucy5wdXNoKG9uRXhpdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBleGl0Rm5zO1xuICAgIH1cbiAgfTtcbn1cblxuY29uc3QgUFVSRV9BTk5PVEFUSU9OID0gYC8qQF9fUFVSRV9fKi9gO1xuY29uc3QgYWxpYXNIZWxwZXIgPSAocykgPT4gYCR7aGVscGVyTmFtZU1hcFtzXX06IF8ke2hlbHBlck5hbWVNYXBbc119YDtcbmZ1bmN0aW9uIGNyZWF0ZUNvZGVnZW5Db250ZXh0KGFzdCwge1xuICBtb2RlID0gXCJmdW5jdGlvblwiLFxuICBwcmVmaXhJZGVudGlmaWVycyA9IG1vZGUgPT09IFwibW9kdWxlXCIsXG4gIHNvdXJjZU1hcCA9IGZhbHNlLFxuICBmaWxlbmFtZSA9IGB0ZW1wbGF0ZS52dWUuaHRtbGAsXG4gIHNjb3BlSWQgPSBudWxsLFxuICBvcHRpbWl6ZUltcG9ydHMgPSBmYWxzZSxcbiAgcnVudGltZUdsb2JhbE5hbWUgPSBgVnVlYCxcbiAgcnVudGltZU1vZHVsZU5hbWUgPSBgdnVlYCxcbiAgc3NyUnVudGltZU1vZHVsZU5hbWUgPSBcInZ1ZS9zZXJ2ZXItcmVuZGVyZXJcIixcbiAgc3NyID0gZmFsc2UsXG4gIGlzVFMgPSBmYWxzZSxcbiAgaW5TU1IgPSBmYWxzZVxufSkge1xuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIG1vZGUsXG4gICAgcHJlZml4SWRlbnRpZmllcnMsXG4gICAgc291cmNlTWFwLFxuICAgIGZpbGVuYW1lLFxuICAgIHNjb3BlSWQsXG4gICAgb3B0aW1pemVJbXBvcnRzLFxuICAgIHJ1bnRpbWVHbG9iYWxOYW1lLFxuICAgIHJ1bnRpbWVNb2R1bGVOYW1lLFxuICAgIHNzclJ1bnRpbWVNb2R1bGVOYW1lLFxuICAgIHNzcixcbiAgICBpc1RTLFxuICAgIGluU1NSLFxuICAgIHNvdXJjZTogYXN0LnNvdXJjZSxcbiAgICBjb2RlOiBgYCxcbiAgICBjb2x1bW46IDEsXG4gICAgbGluZTogMSxcbiAgICBvZmZzZXQ6IDAsXG4gICAgaW5kZW50TGV2ZWw6IDAsXG4gICAgcHVyZTogZmFsc2UsXG4gICAgbWFwOiB2b2lkIDAsXG4gICAgaGVscGVyKGtleSkge1xuICAgICAgcmV0dXJuIGBfJHtoZWxwZXJOYW1lTWFwW2tleV19YDtcbiAgICB9LFxuICAgIHB1c2goY29kZSwgbmV3bGluZUluZGV4ID0gLTIgLyogTm9uZSAqLywgbm9kZSkge1xuICAgICAgY29udGV4dC5jb2RlICs9IGNvZGU7XG4gICAgfSxcbiAgICBpbmRlbnQoKSB7XG4gICAgICBuZXdsaW5lKCsrY29udGV4dC5pbmRlbnRMZXZlbCk7XG4gICAgfSxcbiAgICBkZWluZGVudCh3aXRob3V0TmV3TGluZSA9IGZhbHNlKSB7XG4gICAgICBpZiAod2l0aG91dE5ld0xpbmUpIHtcbiAgICAgICAgLS1jb250ZXh0LmluZGVudExldmVsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3bGluZSgtLWNvbnRleHQuaW5kZW50TGV2ZWwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbmV3bGluZSgpIHtcbiAgICAgIG5ld2xpbmUoY29udGV4dC5pbmRlbnRMZXZlbCk7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBuZXdsaW5lKG4pIHtcbiAgICBjb250ZXh0LnB1c2goXCJcXG5cIiArIGAgIGAucmVwZWF0KG4pLCAwIC8qIFN0YXJ0ICovKTtcbiAgfVxuICByZXR1cm4gY29udGV4dDtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlKGFzdCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGNvbnRleHQgPSBjcmVhdGVDb2RlZ2VuQ29udGV4dChhc3QsIG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5vbkNvbnRleHRDcmVhdGVkKSBvcHRpb25zLm9uQ29udGV4dENyZWF0ZWQoY29udGV4dCk7XG4gIGNvbnN0IHtcbiAgICBtb2RlLFxuICAgIHB1c2gsXG4gICAgcHJlZml4SWRlbnRpZmllcnMsXG4gICAgaW5kZW50LFxuICAgIGRlaW5kZW50LFxuICAgIG5ld2xpbmUsXG4gICAgc2NvcGVJZCxcbiAgICBzc3JcbiAgfSA9IGNvbnRleHQ7XG4gIGNvbnN0IGhlbHBlcnMgPSBBcnJheS5mcm9tKGFzdC5oZWxwZXJzKTtcbiAgY29uc3QgaGFzSGVscGVycyA9IGhlbHBlcnMubGVuZ3RoID4gMDtcbiAgY29uc3QgdXNlV2l0aEJsb2NrID0gIXByZWZpeElkZW50aWZpZXJzICYmIG1vZGUgIT09IFwibW9kdWxlXCI7XG4gIGNvbnN0IHByZWFtYmxlQ29udGV4dCA9IGNvbnRleHQ7XG4gIHtcbiAgICBnZW5GdW5jdGlvblByZWFtYmxlKGFzdCwgcHJlYW1ibGVDb250ZXh0KTtcbiAgfVxuICBjb25zdCBmdW5jdGlvbk5hbWUgPSBzc3IgPyBgc3NyUmVuZGVyYCA6IGByZW5kZXJgO1xuICBjb25zdCBhcmdzID0gc3NyID8gW1wiX2N0eFwiLCBcIl9wdXNoXCIsIFwiX3BhcmVudFwiLCBcIl9hdHRyc1wiXSA6IFtcIl9jdHhcIiwgXCJfY2FjaGVcIl07XG4gIGNvbnN0IHNpZ25hdHVyZSA9IGFyZ3Muam9pbihcIiwgXCIpO1xuICB7XG4gICAgcHVzaChgZnVuY3Rpb24gJHtmdW5jdGlvbk5hbWV9KCR7c2lnbmF0dXJlfSkge2ApO1xuICB9XG4gIGluZGVudCgpO1xuICBpZiAodXNlV2l0aEJsb2NrKSB7XG4gICAgcHVzaChgd2l0aCAoX2N0eCkge2ApO1xuICAgIGluZGVudCgpO1xuICAgIGlmIChoYXNIZWxwZXJzKSB7XG4gICAgICBwdXNoKFxuICAgICAgICBgY29uc3QgeyAke2hlbHBlcnMubWFwKGFsaWFzSGVscGVyKS5qb2luKFwiLCBcIil9IH0gPSBfVnVlXG5gLFxuICAgICAgICAtMSAvKiBFbmQgKi9cbiAgICAgICk7XG4gICAgICBuZXdsaW5lKCk7XG4gICAgfVxuICB9XG4gIGlmIChhc3QuY29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICBnZW5Bc3NldHMoYXN0LmNvbXBvbmVudHMsIFwiY29tcG9uZW50XCIsIGNvbnRleHQpO1xuICAgIGlmIChhc3QuZGlyZWN0aXZlcy5sZW5ndGggfHwgYXN0LnRlbXBzID4gMCkge1xuICAgICAgbmV3bGluZSgpO1xuICAgIH1cbiAgfVxuICBpZiAoYXN0LmRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgZ2VuQXNzZXRzKGFzdC5kaXJlY3RpdmVzLCBcImRpcmVjdGl2ZVwiLCBjb250ZXh0KTtcbiAgICBpZiAoYXN0LnRlbXBzID4gMCkge1xuICAgICAgbmV3bGluZSgpO1xuICAgIH1cbiAgfVxuICBpZiAoYXN0LnRlbXBzID4gMCkge1xuICAgIHB1c2goYGxldCBgKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFzdC50ZW1wczsgaSsrKSB7XG4gICAgICBwdXNoKGAke2kgPiAwID8gYCwgYCA6IGBgfV90ZW1wJHtpfWApO1xuICAgIH1cbiAgfVxuICBpZiAoYXN0LmNvbXBvbmVudHMubGVuZ3RoIHx8IGFzdC5kaXJlY3RpdmVzLmxlbmd0aCB8fCBhc3QudGVtcHMpIHtcbiAgICBwdXNoKGBcbmAsIDAgLyogU3RhcnQgKi8pO1xuICAgIG5ld2xpbmUoKTtcbiAgfVxuICBpZiAoIXNzcikge1xuICAgIHB1c2goYHJldHVybiBgKTtcbiAgfVxuICBpZiAoYXN0LmNvZGVnZW5Ob2RlKSB7XG4gICAgZ2VuTm9kZShhc3QuY29kZWdlbk5vZGUsIGNvbnRleHQpO1xuICB9IGVsc2Uge1xuICAgIHB1c2goYG51bGxgKTtcbiAgfVxuICBpZiAodXNlV2l0aEJsb2NrKSB7XG4gICAgZGVpbmRlbnQoKTtcbiAgICBwdXNoKGB9YCk7XG4gIH1cbiAgZGVpbmRlbnQoKTtcbiAgcHVzaChgfWApO1xuICByZXR1cm4ge1xuICAgIGFzdCxcbiAgICBjb2RlOiBjb250ZXh0LmNvZGUsXG4gICAgcHJlYW1ibGU6IGBgLFxuICAgIG1hcDogY29udGV4dC5tYXAgPyBjb250ZXh0Lm1hcC50b0pTT04oKSA6IHZvaWQgMFxuICB9O1xufVxuZnVuY3Rpb24gZ2VuRnVuY3Rpb25QcmVhbWJsZShhc3QsIGNvbnRleHQpIHtcbiAgY29uc3Qge1xuICAgIHNzcixcbiAgICBwcmVmaXhJZGVudGlmaWVycyxcbiAgICBwdXNoLFxuICAgIG5ld2xpbmUsXG4gICAgcnVudGltZU1vZHVsZU5hbWUsXG4gICAgcnVudGltZUdsb2JhbE5hbWUsXG4gICAgc3NyUnVudGltZU1vZHVsZU5hbWVcbiAgfSA9IGNvbnRleHQ7XG4gIGNvbnN0IFZ1ZUJpbmRpbmcgPSBydW50aW1lR2xvYmFsTmFtZTtcbiAgY29uc3QgaGVscGVycyA9IEFycmF5LmZyb20oYXN0LmhlbHBlcnMpO1xuICBpZiAoaGVscGVycy5sZW5ndGggPiAwKSB7XG4gICAge1xuICAgICAgcHVzaChgY29uc3QgX1Z1ZSA9ICR7VnVlQmluZGluZ31cbmAsIC0xIC8qIEVuZCAqLyk7XG4gICAgICBpZiAoYXN0LmhvaXN0cy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3Qgc3RhdGljSGVscGVycyA9IFtcbiAgICAgICAgICBDUkVBVEVfVk5PREUsXG4gICAgICAgICAgQ1JFQVRFX0VMRU1FTlRfVk5PREUsXG4gICAgICAgICAgQ1JFQVRFX0NPTU1FTlQsXG4gICAgICAgICAgQ1JFQVRFX1RFWFQsXG4gICAgICAgICAgQ1JFQVRFX1NUQVRJQ1xuICAgICAgICBdLmZpbHRlcigoaGVscGVyKSA9PiBoZWxwZXJzLmluY2x1ZGVzKGhlbHBlcikpLm1hcChhbGlhc0hlbHBlcikuam9pbihcIiwgXCIpO1xuICAgICAgICBwdXNoKGBjb25zdCB7ICR7c3RhdGljSGVscGVyc30gfSA9IF9WdWVcbmAsIC0xIC8qIEVuZCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdlbkhvaXN0cyhhc3QuaG9pc3RzLCBjb250ZXh0KTtcbiAgbmV3bGluZSgpO1xuICBwdXNoKGByZXR1cm4gYCk7XG59XG5mdW5jdGlvbiBnZW5Bc3NldHMoYXNzZXRzLCB0eXBlLCB7IGhlbHBlciwgcHVzaCwgbmV3bGluZSwgaXNUUyB9KSB7XG4gIGNvbnN0IHJlc29sdmVyID0gaGVscGVyKFxuICAgIHR5cGUgPT09IFwiY29tcG9uZW50XCIgPyBSRVNPTFZFX0NPTVBPTkVOVCA6IFJFU09MVkVfRElSRUNUSVZFXG4gICk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXNzZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGlkID0gYXNzZXRzW2ldO1xuICAgIGNvbnN0IG1heWJlU2VsZlJlZmVyZW5jZSA9IGlkLmVuZHNXaXRoKFwiX19zZWxmXCIpO1xuICAgIGlmIChtYXliZVNlbGZSZWZlcmVuY2UpIHtcbiAgICAgIGlkID0gaWQuc2xpY2UoMCwgLTYpO1xuICAgIH1cbiAgICBwdXNoKFxuICAgICAgYGNvbnN0ICR7dG9WYWxpZEFzc2V0SWQoaWQsIHR5cGUpfSA9ICR7cmVzb2x2ZXJ9KCR7SlNPTi5zdHJpbmdpZnkoaWQpfSR7bWF5YmVTZWxmUmVmZXJlbmNlID8gYCwgdHJ1ZWAgOiBgYH0pJHtpc1RTID8gYCFgIDogYGB9YFxuICAgICk7XG4gICAgaWYgKGkgPCBhc3NldHMubGVuZ3RoIC0gMSkge1xuICAgICAgbmV3bGluZSgpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2VuSG9pc3RzKGhvaXN0cywgY29udGV4dCkge1xuICBpZiAoIWhvaXN0cy5sZW5ndGgpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29udGV4dC5wdXJlID0gdHJ1ZTtcbiAgY29uc3QgeyBwdXNoLCBuZXdsaW5lIH0gPSBjb250ZXh0O1xuICBuZXdsaW5lKCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaG9pc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZXhwID0gaG9pc3RzW2ldO1xuICAgIGlmIChleHApIHtcbiAgICAgIHB1c2goYGNvbnN0IF9ob2lzdGVkXyR7aSArIDF9ID0gYCk7XG4gICAgICBnZW5Ob2RlKGV4cCwgY29udGV4dCk7XG4gICAgICBuZXdsaW5lKCk7XG4gICAgfVxuICB9XG4gIGNvbnRleHQucHVyZSA9IGZhbHNlO1xufVxuZnVuY3Rpb24gaXNUZXh0KG4pIHtcbiAgcmV0dXJuIGlzU3RyaW5nKG4pIHx8IG4udHlwZSA9PT0gNCB8fCBuLnR5cGUgPT09IDIgfHwgbi50eXBlID09PSA1IHx8IG4udHlwZSA9PT0gODtcbn1cbmZ1bmN0aW9uIGdlbk5vZGVMaXN0QXNBcnJheShub2RlcywgY29udGV4dCkge1xuICBjb25zdCBtdWx0aWxpbmVzID0gbm9kZXMubGVuZ3RoID4gMyB8fCBub2Rlcy5zb21lKChuKSA9PiBpc0FycmF5KG4pIHx8ICFpc1RleHQobikpO1xuICBjb250ZXh0LnB1c2goYFtgKTtcbiAgbXVsdGlsaW5lcyAmJiBjb250ZXh0LmluZGVudCgpO1xuICBnZW5Ob2RlTGlzdChub2RlcywgY29udGV4dCwgbXVsdGlsaW5lcyk7XG4gIG11bHRpbGluZXMgJiYgY29udGV4dC5kZWluZGVudCgpO1xuICBjb250ZXh0LnB1c2goYF1gKTtcbn1cbmZ1bmN0aW9uIGdlbk5vZGVMaXN0KG5vZGVzLCBjb250ZXh0LCBtdWx0aWxpbmVzID0gZmFsc2UsIGNvbW1hID0gdHJ1ZSkge1xuICBjb25zdCB7IHB1c2gsIG5ld2xpbmUgfSA9IGNvbnRleHQ7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgaWYgKGlzU3RyaW5nKG5vZGUpKSB7XG4gICAgICBwdXNoKG5vZGUsIC0zIC8qIFVua25vd24gKi8pO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShub2RlKSkge1xuICAgICAgZ2VuTm9kZUxpc3RBc0FycmF5KG5vZGUsIGNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5Ob2RlKG5vZGUsIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAoaSA8IG5vZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChtdWx0aWxpbmVzKSB7XG4gICAgICAgIGNvbW1hICYmIHB1c2goXCIsXCIpO1xuICAgICAgICBuZXdsaW5lKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21tYSAmJiBwdXNoKFwiLCBcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZW5Ob2RlKG5vZGUsIGNvbnRleHQpIHtcbiAgaWYgKGlzU3RyaW5nKG5vZGUpKSB7XG4gICAgY29udGV4dC5wdXNoKG5vZGUsIC0zIC8qIFVua25vd24gKi8pO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoaXNTeW1ib2wobm9kZSkpIHtcbiAgICBjb250ZXh0LnB1c2goY29udGV4dC5oZWxwZXIobm9kZSkpO1xuICAgIHJldHVybjtcbiAgfVxuICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgMTpcbiAgICBjYXNlIDk6XG4gICAgY2FzZSAxMTpcbiAgICAgIGFzc2VydChcbiAgICAgICAgbm9kZS5jb2RlZ2VuTm9kZSAhPSBudWxsLFxuICAgICAgICBgQ29kZWdlbiBub2RlIGlzIG1pc3NpbmcgZm9yIGVsZW1lbnQvaWYvZm9yIG5vZGUuIEFwcGx5IGFwcHJvcHJpYXRlIHRyYW5zZm9ybXMgZmlyc3QuYFxuICAgICAgKTtcbiAgICAgIGdlbk5vZGUobm9kZS5jb2RlZ2VuTm9kZSwgY29udGV4dCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICBnZW5UZXh0KG5vZGUsIGNvbnRleHQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgZ2VuRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIGdlbkludGVycG9sYXRpb24obm9kZSwgY29udGV4dCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEyOlxuICAgICAgZ2VuTm9kZShub2RlLmNvZGVnZW5Ob2RlLCBjb250ZXh0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgODpcbiAgICAgIGdlbkNvbXBvdW5kRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIGdlbkNvbW1lbnQobm9kZSwgY29udGV4dCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDEzOlxuICAgICAgZ2VuVk5vZGVDYWxsKG5vZGUsIGNvbnRleHQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxNDpcbiAgICAgIGdlbkNhbGxFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxNTpcbiAgICAgIGdlbk9iamVjdEV4cHJlc3Npb24obm9kZSwgY29udGV4dCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE3OlxuICAgICAgZ2VuQXJyYXlFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxODpcbiAgICAgIGdlbkZ1bmN0aW9uRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTk6XG4gICAgICBnZW5Db25kaXRpb25hbEV4cHJlc3Npb24obm9kZSwgY29udGV4dCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDIwOlxuICAgICAgZ2VuQ2FjaGVFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMTpcbiAgICAgIGdlbk5vZGVMaXN0KG5vZGUuYm9keSwgY29udGV4dCwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgYnJlYWs7XG4gICAgLy8gU1NSIG9ubHkgdHlwZXNcbiAgICBjYXNlIDIyOlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMzpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjQ6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI1OlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNjpcbiAgICAgIGJyZWFrO1xuICAgIC8qIHY4IGlnbm9yZSBzdGFydCAqL1xuICAgIGNhc2UgMTA6XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICBhc3NlcnQoZmFsc2UsIGB1bmhhbmRsZWQgY29kZWdlbiBub2RlIHR5cGU6ICR7bm9kZS50eXBlfWApO1xuICAgICAgICBjb25zdCBleGhhdXN0aXZlQ2hlY2sgPSBub2RlO1xuICAgICAgICByZXR1cm4gZXhoYXVzdGl2ZUNoZWNrO1xuICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZW5UZXh0KG5vZGUsIGNvbnRleHQpIHtcbiAgY29udGV4dC5wdXNoKEpTT04uc3RyaW5naWZ5KG5vZGUuY29udGVudCksIC0zIC8qIFVua25vd24gKi8sIG5vZGUpO1xufVxuZnVuY3Rpb24gZ2VuRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgY29udGVudCwgaXNTdGF0aWMgfSA9IG5vZGU7XG4gIGNvbnRleHQucHVzaChcbiAgICBpc1N0YXRpYyA/IEpTT04uc3RyaW5naWZ5KGNvbnRlbnQpIDogY29udGVudCxcbiAgICAtMyAvKiBVbmtub3duICovLFxuICAgIG5vZGVcbiAgKTtcbn1cbmZ1bmN0aW9uIGdlbkludGVycG9sYXRpb24obm9kZSwgY29udGV4dCkge1xuICBjb25zdCB7IHB1c2gsIGhlbHBlciwgcHVyZSB9ID0gY29udGV4dDtcbiAgaWYgKHB1cmUpIHB1c2goUFVSRV9BTk5PVEFUSU9OKTtcbiAgcHVzaChgJHtoZWxwZXIoVE9fRElTUExBWV9TVFJJTkcpfShgKTtcbiAgZ2VuTm9kZShub2RlLmNvbnRlbnQsIGNvbnRleHQpO1xuICBwdXNoKGApYCk7XG59XG5mdW5jdGlvbiBnZW5Db21wb3VuZEV4cHJlc3Npb24obm9kZSwgY29udGV4dCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgaWYgKGlzU3RyaW5nKGNoaWxkKSkge1xuICAgICAgY29udGV4dC5wdXNoKGNoaWxkLCAtMyAvKiBVbmtub3duICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuTm9kZShjaGlsZCwgY29udGV4dCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZW5FeHByZXNzaW9uQXNQcm9wZXJ0eUtleShub2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgcHVzaCB9ID0gY29udGV4dDtcbiAgaWYgKG5vZGUudHlwZSA9PT0gOCkge1xuICAgIHB1c2goYFtgKTtcbiAgICBnZW5Db21wb3VuZEV4cHJlc3Npb24obm9kZSwgY29udGV4dCk7XG4gICAgcHVzaChgXWApO1xuICB9IGVsc2UgaWYgKG5vZGUuaXNTdGF0aWMpIHtcbiAgICBjb25zdCB0ZXh0ID0gaXNTaW1wbGVJZGVudGlmaWVyKG5vZGUuY29udGVudCkgPyBub2RlLmNvbnRlbnQgOiBKU09OLnN0cmluZ2lmeShub2RlLmNvbnRlbnQpO1xuICAgIHB1c2godGV4dCwgLTIgLyogTm9uZSAqLywgbm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcHVzaChgWyR7bm9kZS5jb250ZW50fV1gLCAtMyAvKiBVbmtub3duICovLCBub2RlKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2VuQ29tbWVudChub2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgcHVzaCwgaGVscGVyLCBwdXJlIH0gPSBjb250ZXh0O1xuICBpZiAocHVyZSkge1xuICAgIHB1c2goUFVSRV9BTk5PVEFUSU9OKTtcbiAgfVxuICBwdXNoKFxuICAgIGAke2hlbHBlcihDUkVBVEVfQ09NTUVOVCl9KCR7SlNPTi5zdHJpbmdpZnkobm9kZS5jb250ZW50KX0pYCxcbiAgICAtMyAvKiBVbmtub3duICovLFxuICAgIG5vZGVcbiAgKTtcbn1cbmZ1bmN0aW9uIGdlblZOb2RlQ2FsbChub2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgcHVzaCwgaGVscGVyLCBwdXJlIH0gPSBjb250ZXh0O1xuICBjb25zdCB7XG4gICAgdGFnLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIHBhdGNoRmxhZyxcbiAgICBkeW5hbWljUHJvcHMsXG4gICAgZGlyZWN0aXZlcyxcbiAgICBpc0Jsb2NrLFxuICAgIGRpc2FibGVUcmFja2luZyxcbiAgICBpc0NvbXBvbmVudFxuICB9ID0gbm9kZTtcbiAgbGV0IHBhdGNoRmxhZ1N0cmluZztcbiAgaWYgKHBhdGNoRmxhZykge1xuICAgIHtcbiAgICAgIGlmIChwYXRjaEZsYWcgPCAwKSB7XG4gICAgICAgIHBhdGNoRmxhZ1N0cmluZyA9IHBhdGNoRmxhZyArIGAgLyogJHtQYXRjaEZsYWdOYW1lc1twYXRjaEZsYWddfSAqL2A7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBmbGFnTmFtZXMgPSBPYmplY3Qua2V5cyhQYXRjaEZsYWdOYW1lcykubWFwKE51bWJlcikuZmlsdGVyKChuKSA9PiBuID4gMCAmJiBwYXRjaEZsYWcgJiBuKS5tYXAoKG4pID0+IFBhdGNoRmxhZ05hbWVzW25dKS5qb2luKGAsIGApO1xuICAgICAgICBwYXRjaEZsYWdTdHJpbmcgPSBwYXRjaEZsYWcgKyBgIC8qICR7ZmxhZ05hbWVzfSAqL2A7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkaXJlY3RpdmVzKSB7XG4gICAgcHVzaChoZWxwZXIoV0lUSF9ESVJFQ1RJVkVTKSArIGAoYCk7XG4gIH1cbiAgaWYgKGlzQmxvY2spIHtcbiAgICBwdXNoKGAoJHtoZWxwZXIoT1BFTl9CTE9DSyl9KCR7ZGlzYWJsZVRyYWNraW5nID8gYHRydWVgIDogYGB9KSwgYCk7XG4gIH1cbiAgaWYgKHB1cmUpIHtcbiAgICBwdXNoKFBVUkVfQU5OT1RBVElPTik7XG4gIH1cbiAgY29uc3QgY2FsbEhlbHBlciA9IGlzQmxvY2sgPyBnZXRWTm9kZUJsb2NrSGVscGVyKGNvbnRleHQuaW5TU1IsIGlzQ29tcG9uZW50KSA6IGdldFZOb2RlSGVscGVyKGNvbnRleHQuaW5TU1IsIGlzQ29tcG9uZW50KTtcbiAgcHVzaChoZWxwZXIoY2FsbEhlbHBlcikgKyBgKGAsIC0yIC8qIE5vbmUgKi8sIG5vZGUpO1xuICBnZW5Ob2RlTGlzdChcbiAgICBnZW5OdWxsYWJsZUFyZ3MoW3RhZywgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWdTdHJpbmcsIGR5bmFtaWNQcm9wc10pLFxuICAgIGNvbnRleHRcbiAgKTtcbiAgcHVzaChgKWApO1xuICBpZiAoaXNCbG9jaykge1xuICAgIHB1c2goYClgKTtcbiAgfVxuICBpZiAoZGlyZWN0aXZlcykge1xuICAgIHB1c2goYCwgYCk7XG4gICAgZ2VuTm9kZShkaXJlY3RpdmVzLCBjb250ZXh0KTtcbiAgICBwdXNoKGApYCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdlbk51bGxhYmxlQXJncyhhcmdzKSB7XG4gIGxldCBpID0gYXJncy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoYXJnc1tpXSAhPSBudWxsKSBicmVhaztcbiAgfVxuICByZXR1cm4gYXJncy5zbGljZSgwLCBpICsgMSkubWFwKChhcmcpID0+IGFyZyB8fCBgbnVsbGApO1xufVxuZnVuY3Rpb24gZ2VuQ2FsbEV4cHJlc3Npb24obm9kZSwgY29udGV4dCkge1xuICBjb25zdCB7IHB1c2gsIGhlbHBlciwgcHVyZSB9ID0gY29udGV4dDtcbiAgY29uc3QgY2FsbGVlID0gaXNTdHJpbmcobm9kZS5jYWxsZWUpID8gbm9kZS5jYWxsZWUgOiBoZWxwZXIobm9kZS5jYWxsZWUpO1xuICBpZiAocHVyZSkge1xuICAgIHB1c2goUFVSRV9BTk5PVEFUSU9OKTtcbiAgfVxuICBwdXNoKGNhbGxlZSArIGAoYCwgLTIgLyogTm9uZSAqLywgbm9kZSk7XG4gIGdlbk5vZGVMaXN0KG5vZGUuYXJndW1lbnRzLCBjb250ZXh0KTtcbiAgcHVzaChgKWApO1xufVxuZnVuY3Rpb24gZ2VuT2JqZWN0RXhwcmVzc2lvbihub2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgcHVzaCwgaW5kZW50LCBkZWluZGVudCwgbmV3bGluZSB9ID0gY29udGV4dDtcbiAgY29uc3QgeyBwcm9wZXJ0aWVzIH0gPSBub2RlO1xuICBpZiAoIXByb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgcHVzaChge31gLCAtMiAvKiBOb25lICovLCBub2RlKTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbXVsdGlsaW5lcyA9IHByb3BlcnRpZXMubGVuZ3RoID4gMSB8fCBwcm9wZXJ0aWVzLnNvbWUoKHApID0+IHAudmFsdWUudHlwZSAhPT0gNCk7XG4gIHB1c2gobXVsdGlsaW5lcyA/IGB7YCA6IGB7IGApO1xuICBtdWx0aWxpbmVzICYmIGluZGVudCgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB7IGtleSwgdmFsdWUgfSA9IHByb3BlcnRpZXNbaV07XG4gICAgZ2VuRXhwcmVzc2lvbkFzUHJvcGVydHlLZXkoa2V5LCBjb250ZXh0KTtcbiAgICBwdXNoKGA6IGApO1xuICAgIGdlbk5vZGUodmFsdWUsIGNvbnRleHQpO1xuICAgIGlmIChpIDwgcHJvcGVydGllcy5sZW5ndGggLSAxKSB7XG4gICAgICBwdXNoKGAsYCk7XG4gICAgICBuZXdsaW5lKCk7XG4gICAgfVxuICB9XG4gIG11bHRpbGluZXMgJiYgZGVpbmRlbnQoKTtcbiAgcHVzaChtdWx0aWxpbmVzID8gYH1gIDogYCB9YCk7XG59XG5mdW5jdGlvbiBnZW5BcnJheUV4cHJlc3Npb24obm9kZSwgY29udGV4dCkge1xuICBnZW5Ob2RlTGlzdEFzQXJyYXkobm9kZS5lbGVtZW50cywgY29udGV4dCk7XG59XG5mdW5jdGlvbiBnZW5GdW5jdGlvbkV4cHJlc3Npb24obm9kZSwgY29udGV4dCkge1xuICBjb25zdCB7IHB1c2gsIGluZGVudCwgZGVpbmRlbnQgfSA9IGNvbnRleHQ7XG4gIGNvbnN0IHsgcGFyYW1zLCByZXR1cm5zLCBib2R5LCBuZXdsaW5lLCBpc1Nsb3QgfSA9IG5vZGU7XG4gIGlmIChpc1Nsb3QpIHtcbiAgICBwdXNoKGBfJHtoZWxwZXJOYW1lTWFwW1dJVEhfQ1RYXX0oYCk7XG4gIH1cbiAgcHVzaChgKGAsIC0yIC8qIE5vbmUgKi8sIG5vZGUpO1xuICBpZiAoaXNBcnJheShwYXJhbXMpKSB7XG4gICAgZ2VuTm9kZUxpc3QocGFyYW1zLCBjb250ZXh0KTtcbiAgfSBlbHNlIGlmIChwYXJhbXMpIHtcbiAgICBnZW5Ob2RlKHBhcmFtcywgY29udGV4dCk7XG4gIH1cbiAgcHVzaChgKSA9PiBgKTtcbiAgaWYgKG5ld2xpbmUgfHwgYm9keSkge1xuICAgIHB1c2goYHtgKTtcbiAgICBpbmRlbnQoKTtcbiAgfVxuICBpZiAocmV0dXJucykge1xuICAgIGlmIChuZXdsaW5lKSB7XG4gICAgICBwdXNoKGByZXR1cm4gYCk7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KHJldHVybnMpKSB7XG4gICAgICBnZW5Ob2RlTGlzdEFzQXJyYXkocmV0dXJucywgY29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbk5vZGUocmV0dXJucywgY29udGV4dCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGJvZHkpIHtcbiAgICBnZW5Ob2RlKGJvZHksIGNvbnRleHQpO1xuICB9XG4gIGlmIChuZXdsaW5lIHx8IGJvZHkpIHtcbiAgICBkZWluZGVudCgpO1xuICAgIHB1c2goYH1gKTtcbiAgfVxuICBpZiAoaXNTbG90KSB7XG4gICAgcHVzaChgKWApO1xuICB9XG59XG5mdW5jdGlvbiBnZW5Db25kaXRpb25hbEV4cHJlc3Npb24obm9kZSwgY29udGV4dCkge1xuICBjb25zdCB7IHRlc3QsIGNvbnNlcXVlbnQsIGFsdGVybmF0ZSwgbmV3bGluZTogbmVlZE5ld2xpbmUgfSA9IG5vZGU7XG4gIGNvbnN0IHsgcHVzaCwgaW5kZW50LCBkZWluZGVudCwgbmV3bGluZSB9ID0gY29udGV4dDtcbiAgaWYgKHRlc3QudHlwZSA9PT0gNCkge1xuICAgIGNvbnN0IG5lZWRzUGFyZW5zID0gIWlzU2ltcGxlSWRlbnRpZmllcih0ZXN0LmNvbnRlbnQpO1xuICAgIG5lZWRzUGFyZW5zICYmIHB1c2goYChgKTtcbiAgICBnZW5FeHByZXNzaW9uKHRlc3QsIGNvbnRleHQpO1xuICAgIG5lZWRzUGFyZW5zICYmIHB1c2goYClgKTtcbiAgfSBlbHNlIHtcbiAgICBwdXNoKGAoYCk7XG4gICAgZ2VuTm9kZSh0ZXN0LCBjb250ZXh0KTtcbiAgICBwdXNoKGApYCk7XG4gIH1cbiAgbmVlZE5ld2xpbmUgJiYgaW5kZW50KCk7XG4gIGNvbnRleHQuaW5kZW50TGV2ZWwrKztcbiAgbmVlZE5ld2xpbmUgfHwgcHVzaChgIGApO1xuICBwdXNoKGA/IGApO1xuICBnZW5Ob2RlKGNvbnNlcXVlbnQsIGNvbnRleHQpO1xuICBjb250ZXh0LmluZGVudExldmVsLS07XG4gIG5lZWROZXdsaW5lICYmIG5ld2xpbmUoKTtcbiAgbmVlZE5ld2xpbmUgfHwgcHVzaChgIGApO1xuICBwdXNoKGA6IGApO1xuICBjb25zdCBpc05lc3RlZCA9IGFsdGVybmF0ZS50eXBlID09PSAxOTtcbiAgaWYgKCFpc05lc3RlZCkge1xuICAgIGNvbnRleHQuaW5kZW50TGV2ZWwrKztcbiAgfVxuICBnZW5Ob2RlKGFsdGVybmF0ZSwgY29udGV4dCk7XG4gIGlmICghaXNOZXN0ZWQpIHtcbiAgICBjb250ZXh0LmluZGVudExldmVsLS07XG4gIH1cbiAgbmVlZE5ld2xpbmUgJiYgZGVpbmRlbnQoXG4gICAgdHJ1ZVxuICAgIC8qIHdpdGhvdXQgbmV3bGluZSAqL1xuICApO1xufVxuZnVuY3Rpb24gZ2VuQ2FjaGVFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBwdXNoLCBoZWxwZXIsIGluZGVudCwgZGVpbmRlbnQsIG5ld2xpbmUgfSA9IGNvbnRleHQ7XG4gIGNvbnN0IHsgbmVlZFBhdXNlVHJhY2tpbmcsIG5lZWRBcnJheVNwcmVhZCB9ID0gbm9kZTtcbiAgaWYgKG5lZWRBcnJheVNwcmVhZCkge1xuICAgIHB1c2goYFsuLi4oYCk7XG4gIH1cbiAgcHVzaChgX2NhY2hlWyR7bm9kZS5pbmRleH1dIHx8IChgKTtcbiAgaWYgKG5lZWRQYXVzZVRyYWNraW5nKSB7XG4gICAgaW5kZW50KCk7XG4gICAgcHVzaChgJHtoZWxwZXIoU0VUX0JMT0NLX1RSQUNLSU5HKX0oLTFgKTtcbiAgICBpZiAobm9kZS5pblZPbmNlKSBwdXNoKGAsIHRydWVgKTtcbiAgICBwdXNoKGApLGApO1xuICAgIG5ld2xpbmUoKTtcbiAgICBwdXNoKGAoYCk7XG4gIH1cbiAgcHVzaChgX2NhY2hlWyR7bm9kZS5pbmRleH1dID0gYCk7XG4gIGdlbk5vZGUobm9kZS52YWx1ZSwgY29udGV4dCk7XG4gIGlmIChuZWVkUGF1c2VUcmFja2luZykge1xuICAgIHB1c2goYCkuY2FjaGVJbmRleCA9ICR7bm9kZS5pbmRleH0sYCk7XG4gICAgbmV3bGluZSgpO1xuICAgIHB1c2goYCR7aGVscGVyKFNFVF9CTE9DS19UUkFDS0lORyl9KDEpLGApO1xuICAgIG5ld2xpbmUoKTtcbiAgICBwdXNoKGBfY2FjaGVbJHtub2RlLmluZGV4fV1gKTtcbiAgICBkZWluZGVudCgpO1xuICB9XG4gIHB1c2goYClgKTtcbiAgaWYgKG5lZWRBcnJheVNwcmVhZCkge1xuICAgIHB1c2goYCldYCk7XG4gIH1cbn1cblxuY29uc3QgcHJvaGliaXRlZEtleXdvcmRSRSA9IG5ldyBSZWdFeHAoXG4gIFwiXFxcXGJcIiArIFwiYXJndW1lbnRzLGF3YWl0LGJyZWFrLGNhc2UsY2F0Y2gsY2xhc3MsY29uc3QsY29udGludWUsZGVidWdnZXIsZGVmYXVsdCxkZWxldGUsZG8sZWxzZSxleHBvcnQsZXh0ZW5kcyxmaW5hbGx5LGZvcixmdW5jdGlvbixpZixpbXBvcnQsbGV0LG5ldyxyZXR1cm4sc3VwZXIsc3dpdGNoLHRocm93LHRyeSx2YXIsdm9pZCx3aGlsZSx3aXRoLHlpZWxkXCIuc3BsaXQoXCIsXCIpLmpvaW4oXCJcXFxcYnxcXFxcYlwiKSArIFwiXFxcXGJcIlxuKTtcbmNvbnN0IHN0cmlwU3RyaW5nUkUgPSAvJyg/OlteJ1xcXFxdfFxcXFwuKSonfFwiKD86W15cIlxcXFxdfFxcXFwuKSpcInxgKD86W15gXFxcXF18XFxcXC4pKlxcJFxce3xcXH0oPzpbXmBcXFxcXXxcXFxcLikqYHxgKD86W15gXFxcXF18XFxcXC4pKmAvZztcbmZ1bmN0aW9uIHZhbGlkYXRlQnJvd3NlckV4cHJlc3Npb24obm9kZSwgY29udGV4dCwgYXNQYXJhbXMgPSBmYWxzZSwgYXNSYXdTdGF0ZW1lbnRzID0gZmFsc2UpIHtcbiAgY29uc3QgZXhwID0gbm9kZS5jb250ZW50O1xuICBpZiAoIWV4cC50cmltKCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdHJ5IHtcbiAgICBuZXcgRnVuY3Rpb24oXG4gICAgICBhc1Jhd1N0YXRlbWVudHMgPyBgICR7ZXhwfSBgIDogYHJldHVybiAke2FzUGFyYW1zID8gYCgke2V4cH0pID0+IHt9YCA6IGAoJHtleHB9KWB9YFxuICAgICk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsZXQgbWVzc2FnZSA9IGUubWVzc2FnZTtcbiAgICBjb25zdCBrZXl3b3JkTWF0Y2ggPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCBcIlwiKS5tYXRjaChwcm9oaWJpdGVkS2V5d29yZFJFKTtcbiAgICBpZiAoa2V5d29yZE1hdGNoKSB7XG4gICAgICBtZXNzYWdlID0gYGF2b2lkIHVzaW5nIEphdmFTY3JpcHQga2V5d29yZCBhcyBwcm9wZXJ0eSBuYW1lOiBcIiR7a2V5d29yZE1hdGNoWzBdfVwiYDtcbiAgICB9XG4gICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcihcbiAgICAgICAgNDUsXG4gICAgICAgIG5vZGUubG9jLFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIG1lc3NhZ2VcbiAgICAgIClcbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHRyYW5zZm9ybUV4cHJlc3Npb24gPSAobm9kZSwgY29udGV4dCkgPT4ge1xuICBpZiAobm9kZS50eXBlID09PSA1KSB7XG4gICAgbm9kZS5jb250ZW50ID0gcHJvY2Vzc0V4cHJlc3Npb24oXG4gICAgICBub2RlLmNvbnRlbnQsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBjb25zdCBtZW1vID0gZmluZERpcihub2RlLCBcIm1lbW9cIik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLnByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkaXIgPSBub2RlLnByb3BzW2ldO1xuICAgICAgaWYgKGRpci50eXBlID09PSA3ICYmIGRpci5uYW1lICE9PSBcImZvclwiKSB7XG4gICAgICAgIGNvbnN0IGV4cCA9IGRpci5leHA7XG4gICAgICAgIGNvbnN0IGFyZyA9IGRpci5hcmc7XG4gICAgICAgIGlmIChleHAgJiYgZXhwLnR5cGUgPT09IDQgJiYgIShkaXIubmFtZSA9PT0gXCJvblwiICYmIGFyZykgJiYgLy8ga2V5IGhhcyBiZWVuIHByb2Nlc3NlZCBpbiB0cmFuc2Zvcm1Gb3Iodk1lbW8gKyB2Rm9yKVxuICAgICAgICAhKG1lbW8gJiYgYXJnICYmIGFyZy50eXBlID09PSA0ICYmIGFyZy5jb250ZW50ID09PSBcImtleVwiKSkge1xuICAgICAgICAgIGRpci5leHAgPSBwcm9jZXNzRXhwcmVzc2lvbihcbiAgICAgICAgICAgIGV4cCxcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAvLyBzbG90IGFyZ3MgbXVzdCBiZSBwcm9jZXNzZWQgYXMgZnVuY3Rpb24gcGFyYW1zXG4gICAgICAgICAgICBkaXIubmFtZSA9PT0gXCJzbG90XCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmcgJiYgYXJnLnR5cGUgPT09IDQgJiYgIWFyZy5pc1N0YXRpYykge1xuICAgICAgICAgIGRpci5hcmcgPSBwcm9jZXNzRXhwcmVzc2lvbihhcmcsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuZnVuY3Rpb24gcHJvY2Vzc0V4cHJlc3Npb24obm9kZSwgY29udGV4dCwgYXNQYXJhbXMgPSBmYWxzZSwgYXNSYXdTdGF0ZW1lbnRzID0gZmFsc2UsIGxvY2FsVmFycyA9IE9iamVjdC5jcmVhdGUoY29udGV4dC5pZGVudGlmaWVycykpIHtcbiAge1xuICAgIHtcbiAgICAgIHZhbGlkYXRlQnJvd3NlckV4cHJlc3Npb24obm9kZSwgY29udGV4dCwgYXNQYXJhbXMsIGFzUmF3U3RhdGVtZW50cyk7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9XG59XG5cbmNvbnN0IHRyYW5zZm9ybUlmID0gY3JlYXRlU3RydWN0dXJhbERpcmVjdGl2ZVRyYW5zZm9ybShcbiAgL14oaWZ8ZWxzZXxlbHNlLWlmKSQvLFxuICAobm9kZSwgZGlyLCBjb250ZXh0KSA9PiB7XG4gICAgcmV0dXJuIHByb2Nlc3NJZihub2RlLCBkaXIsIGNvbnRleHQsIChpZk5vZGUsIGJyYW5jaCwgaXNSb290KSA9PiB7XG4gICAgICBjb25zdCBzaWJsaW5ncyA9IGNvbnRleHQucGFyZW50LmNoaWxkcmVuO1xuICAgICAgbGV0IGkgPSBzaWJsaW5ncy5pbmRleE9mKGlmTm9kZSk7XG4gICAgICBsZXQga2V5ID0gMDtcbiAgICAgIHdoaWxlIChpLS0gPj0gMCkge1xuICAgICAgICBjb25zdCBzaWJsaW5nID0gc2libGluZ3NbaV07XG4gICAgICAgIGlmIChzaWJsaW5nICYmIHNpYmxpbmcudHlwZSA9PT0gOSkge1xuICAgICAgICAgIGtleSArPSBzaWJsaW5nLmJyYW5jaGVzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgIGlmTm9kZS5jb2RlZ2VuTm9kZSA9IGNyZWF0ZUNvZGVnZW5Ob2RlRm9yQnJhbmNoKFxuICAgICAgICAgICAgYnJhbmNoLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgcGFyZW50Q29uZGl0aW9uID0gZ2V0UGFyZW50Q29uZGl0aW9uKGlmTm9kZS5jb2RlZ2VuTm9kZSk7XG4gICAgICAgICAgcGFyZW50Q29uZGl0aW9uLmFsdGVybmF0ZSA9IGNyZWF0ZUNvZGVnZW5Ob2RlRm9yQnJhbmNoKFxuICAgICAgICAgICAgYnJhbmNoLFxuICAgICAgICAgICAga2V5ICsgaWZOb2RlLmJyYW5jaGVzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuKTtcbmZ1bmN0aW9uIHByb2Nlc3NJZihub2RlLCBkaXIsIGNvbnRleHQsIHByb2Nlc3NDb2RlZ2VuKSB7XG4gIGlmIChkaXIubmFtZSAhPT0gXCJlbHNlXCIgJiYgKCFkaXIuZXhwIHx8ICFkaXIuZXhwLmNvbnRlbnQudHJpbSgpKSkge1xuICAgIGNvbnN0IGxvYyA9IGRpci5leHAgPyBkaXIuZXhwLmxvYyA6IG5vZGUubG9jO1xuICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoMjgsIGRpci5sb2MpXG4gICAgKTtcbiAgICBkaXIuZXhwID0gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihgdHJ1ZWAsIGZhbHNlLCBsb2MpO1xuICB9XG4gIGlmIChkaXIuZXhwKSB7XG4gICAgdmFsaWRhdGVCcm93c2VyRXhwcmVzc2lvbihkaXIuZXhwLCBjb250ZXh0KTtcbiAgfVxuICBpZiAoZGlyLm5hbWUgPT09IFwiaWZcIikge1xuICAgIGNvbnN0IGJyYW5jaCA9IGNyZWF0ZUlmQnJhbmNoKG5vZGUsIGRpcik7XG4gICAgY29uc3QgaWZOb2RlID0ge1xuICAgICAgdHlwZTogOSxcbiAgICAgIGxvYzogY2xvbmVMb2Mobm9kZS5sb2MpLFxuICAgICAgYnJhbmNoZXM6IFticmFuY2hdXG4gICAgfTtcbiAgICBjb250ZXh0LnJlcGxhY2VOb2RlKGlmTm9kZSk7XG4gICAgaWYgKHByb2Nlc3NDb2RlZ2VuKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzc0NvZGVnZW4oaWZOb2RlLCBicmFuY2gsIHRydWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBzaWJsaW5ncyA9IGNvbnRleHQucGFyZW50LmNoaWxkcmVuO1xuICAgIGNvbnN0IGNvbW1lbnRzID0gW107XG4gICAgbGV0IGkgPSBzaWJsaW5ncy5pbmRleE9mKG5vZGUpO1xuICAgIHdoaWxlIChpLS0gPj0gLTEpIHtcbiAgICAgIGNvbnN0IHNpYmxpbmcgPSBzaWJsaW5nc1tpXTtcbiAgICAgIGlmIChzaWJsaW5nICYmIHNpYmxpbmcudHlwZSA9PT0gMykge1xuICAgICAgICBjb250ZXh0LnJlbW92ZU5vZGUoc2libGluZyk7XG4gICAgICAgIGNvbW1lbnRzLnVuc2hpZnQoc2libGluZyk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHNpYmxpbmcgJiYgc2libGluZy50eXBlID09PSAyICYmICFzaWJsaW5nLmNvbnRlbnQudHJpbSgpLmxlbmd0aCkge1xuICAgICAgICBjb250ZXh0LnJlbW92ZU5vZGUoc2libGluZyk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHNpYmxpbmcgJiYgc2libGluZy50eXBlID09PSA5KSB7XG4gICAgICAgIGlmIChkaXIubmFtZSA9PT0gXCJlbHNlLWlmXCIgJiYgc2libGluZy5icmFuY2hlc1tzaWJsaW5nLmJyYW5jaGVzLmxlbmd0aCAtIDFdLmNvbmRpdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcigzMCwgbm9kZS5sb2MpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LnJlbW92ZU5vZGUoKTtcbiAgICAgICAgY29uc3QgYnJhbmNoID0gY3JlYXRlSWZCcmFuY2gobm9kZSwgZGlyKTtcbiAgICAgICAgaWYgKGNvbW1lbnRzLmxlbmd0aCAmJiAvLyAjMzYxOSBpZ25vcmUgY29tbWVudHMgaWYgdGhlIHYtaWYgaXMgZGlyZWN0IGNoaWxkIG9mIDx0cmFuc2l0aW9uPlxuICAgICAgICAhKGNvbnRleHQucGFyZW50ICYmIGNvbnRleHQucGFyZW50LnR5cGUgPT09IDEgJiYgKGNvbnRleHQucGFyZW50LnRhZyA9PT0gXCJ0cmFuc2l0aW9uXCIgfHwgY29udGV4dC5wYXJlbnQudGFnID09PSBcIlRyYW5zaXRpb25cIikpKSB7XG4gICAgICAgICAgYnJhbmNoLmNoaWxkcmVuID0gWy4uLmNvbW1lbnRzLCAuLi5icmFuY2guY2hpbGRyZW5dO1xuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBicmFuY2gudXNlcktleTtcbiAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICBzaWJsaW5nLmJyYW5jaGVzLmZvckVhY2goKHsgdXNlcktleSB9KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChpc1NhbWVLZXkodXNlcktleSwga2V5KSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIDI5LFxuICAgICAgICAgICAgICAgICAgICBicmFuY2gudXNlcktleS5sb2NcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2libGluZy5icmFuY2hlcy5wdXNoKGJyYW5jaCk7XG4gICAgICAgIGNvbnN0IG9uRXhpdCA9IHByb2Nlc3NDb2RlZ2VuICYmIHByb2Nlc3NDb2RlZ2VuKHNpYmxpbmcsIGJyYW5jaCwgZmFsc2UpO1xuICAgICAgICB0cmF2ZXJzZU5vZGUoYnJhbmNoLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKG9uRXhpdCkgb25FeGl0KCk7XG4gICAgICAgIGNvbnRleHQuY3VycmVudE5vZGUgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzAsIG5vZGUubG9jKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVJZkJyYW5jaChub2RlLCBkaXIpIHtcbiAgY29uc3QgaXNUZW1wbGF0ZUlmID0gbm9kZS50YWdUeXBlID09PSAzO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IDEwLFxuICAgIGxvYzogbm9kZS5sb2MsXG4gICAgY29uZGl0aW9uOiBkaXIubmFtZSA9PT0gXCJlbHNlXCIgPyB2b2lkIDAgOiBkaXIuZXhwLFxuICAgIGNoaWxkcmVuOiBpc1RlbXBsYXRlSWYgJiYgIWZpbmREaXIobm9kZSwgXCJmb3JcIikgPyBub2RlLmNoaWxkcmVuIDogW25vZGVdLFxuICAgIHVzZXJLZXk6IGZpbmRQcm9wKG5vZGUsIGBrZXlgKSxcbiAgICBpc1RlbXBsYXRlSWZcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvZGVnZW5Ob2RlRm9yQnJhbmNoKGJyYW5jaCwga2V5SW5kZXgsIGNvbnRleHQpIHtcbiAgaWYgKGJyYW5jaC5jb25kaXRpb24pIHtcbiAgICByZXR1cm4gY3JlYXRlQ29uZGl0aW9uYWxFeHByZXNzaW9uKFxuICAgICAgYnJhbmNoLmNvbmRpdGlvbixcbiAgICAgIGNyZWF0ZUNoaWxkcmVuQ29kZWdlbk5vZGUoYnJhbmNoLCBrZXlJbmRleCwgY29udGV4dCksXG4gICAgICAvLyBtYWtlIHN1cmUgdG8gcGFzcyBpbiBhc0Jsb2NrOiB0cnVlIHNvIHRoYXQgdGhlIGNvbW1lbnQgbm9kZSBjYWxsXG4gICAgICAvLyBjbG9zZXMgdGhlIGN1cnJlbnQgYmxvY2suXG4gICAgICBjcmVhdGVDYWxsRXhwcmVzc2lvbihjb250ZXh0LmhlbHBlcihDUkVBVEVfQ09NTUVOVCksIFtcbiAgICAgICAgJ1widi1pZlwiJyAsXG4gICAgICAgIFwidHJ1ZVwiXG4gICAgICBdKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoaWxkcmVuQ29kZWdlbk5vZGUoYnJhbmNoLCBrZXlJbmRleCwgY29udGV4dCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuQ29kZWdlbk5vZGUoYnJhbmNoLCBrZXlJbmRleCwgY29udGV4dCkge1xuICBjb25zdCB7IGhlbHBlciB9ID0gY29udGV4dDtcbiAgY29uc3Qga2V5UHJvcGVydHkgPSBjcmVhdGVPYmplY3RQcm9wZXJ0eShcbiAgICBga2V5YCxcbiAgICBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKFxuICAgICAgYCR7a2V5SW5kZXh9YCxcbiAgICAgIGZhbHNlLFxuICAgICAgbG9jU3R1YixcbiAgICAgIDJcbiAgICApXG4gICk7XG4gIGNvbnN0IHsgY2hpbGRyZW4gfSA9IGJyYW5jaDtcbiAgY29uc3QgZmlyc3RDaGlsZCA9IGNoaWxkcmVuWzBdO1xuICBjb25zdCBuZWVkRnJhZ21lbnRXcmFwcGVyID0gY2hpbGRyZW4ubGVuZ3RoICE9PSAxIHx8IGZpcnN0Q2hpbGQudHlwZSAhPT0gMTtcbiAgaWYgKG5lZWRGcmFnbWVudFdyYXBwZXIpIHtcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGZpcnN0Q2hpbGQudHlwZSA9PT0gMTEpIHtcbiAgICAgIGNvbnN0IHZub2RlQ2FsbCA9IGZpcnN0Q2hpbGQuY29kZWdlbk5vZGU7XG4gICAgICBpbmplY3RQcm9wKHZub2RlQ2FsbCwga2V5UHJvcGVydHksIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIHZub2RlQ2FsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBhdGNoRmxhZyA9IDY0O1xuICAgICAgaWYgKCFicmFuY2guaXNUZW1wbGF0ZUlmICYmIGNoaWxkcmVuLmZpbHRlcigoYykgPT4gYy50eXBlICE9PSAzKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcGF0Y2hGbGFnIHw9IDIwNDg7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlVk5vZGVDYWxsKFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBoZWxwZXIoRlJBR01FTlQpLFxuICAgICAgICBjcmVhdGVPYmplY3RFeHByZXNzaW9uKFtrZXlQcm9wZXJ0eV0pLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgcGF0Y2hGbGFnLFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBicmFuY2gubG9jXG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCByZXQgPSBmaXJzdENoaWxkLmNvZGVnZW5Ob2RlO1xuICAgIGNvbnN0IHZub2RlQ2FsbCA9IGdldE1lbW9lZFZOb2RlQ2FsbChyZXQpO1xuICAgIGlmICh2bm9kZUNhbGwudHlwZSA9PT0gMTMpIHtcbiAgICAgIGNvbnZlcnRUb0Jsb2NrKHZub2RlQ2FsbCwgY29udGV4dCk7XG4gICAgfVxuICAgIGluamVjdFByb3Aodm5vZGVDYWxsLCBrZXlQcm9wZXJ0eSwgY29udGV4dCk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxufVxuZnVuY3Rpb24gaXNTYW1lS2V5KGEsIGIpIHtcbiAgaWYgKCFhIHx8IGEudHlwZSAhPT0gYi50eXBlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChhLnR5cGUgPT09IDYpIHtcbiAgICBpZiAoYS52YWx1ZS5jb250ZW50ICE9PSBiLnZhbHVlLmNvbnRlbnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZXhwID0gYS5leHA7XG4gICAgY29uc3QgYnJhbmNoRXhwID0gYi5leHA7XG4gICAgaWYgKGV4cC50eXBlICE9PSBicmFuY2hFeHAudHlwZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZXhwLnR5cGUgIT09IDQgfHwgZXhwLmlzU3RhdGljICE9PSBicmFuY2hFeHAuaXNTdGF0aWMgfHwgZXhwLmNvbnRlbnQgIT09IGJyYW5jaEV4cC5jb250ZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZ2V0UGFyZW50Q29uZGl0aW9uKG5vZGUpIHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBpZiAobm9kZS50eXBlID09PSAxOSkge1xuICAgICAgaWYgKG5vZGUuYWx0ZXJuYXRlLnR5cGUgPT09IDE5KSB7XG4gICAgICAgIG5vZGUgPSBub2RlLmFsdGVybmF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAyMCkge1xuICAgICAgbm9kZSA9IG5vZGUudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHRyYW5zZm9ybUJpbmQgPSAoZGlyLCBfbm9kZSwgY29udGV4dCkgPT4ge1xuICBjb25zdCB7IG1vZGlmaWVycywgbG9jIH0gPSBkaXI7XG4gIGNvbnN0IGFyZyA9IGRpci5hcmc7XG4gIGxldCB7IGV4cCB9ID0gZGlyO1xuICBpZiAoZXhwICYmIGV4cC50eXBlID09PSA0ICYmICFleHAuY29udGVudC50cmltKCkpIHtcbiAgICB7XG4gICAgICBleHAgPSB2b2lkIDA7XG4gICAgfVxuICB9XG4gIGlmICghZXhwKSB7XG4gICAgaWYgKGFyZy50eXBlICE9PSA0IHx8ICFhcmcuaXNTdGF0aWMpIHtcbiAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcihcbiAgICAgICAgICA1MixcbiAgICAgICAgICBhcmcubG9jXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwcm9wczogW1xuICAgICAgICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KGFyZywgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihcIlwiLCB0cnVlLCBsb2MpKVxuICAgICAgICBdXG4gICAgICB9O1xuICAgIH1cbiAgICB0cmFuc2Zvcm1CaW5kU2hvcnRoYW5kKGRpcik7XG4gICAgZXhwID0gZGlyLmV4cDtcbiAgfVxuICBpZiAoYXJnLnR5cGUgIT09IDQpIHtcbiAgICBhcmcuY2hpbGRyZW4udW5zaGlmdChgKGApO1xuICAgIGFyZy5jaGlsZHJlbi5wdXNoKGApIHx8IFwiXCJgKTtcbiAgfSBlbHNlIGlmICghYXJnLmlzU3RhdGljKSB7XG4gICAgYXJnLmNvbnRlbnQgPSBgJHthcmcuY29udGVudH0gfHwgXCJcImA7XG4gIH1cbiAgaWYgKG1vZGlmaWVycy5zb21lKChtb2QpID0+IG1vZC5jb250ZW50ID09PSBcImNhbWVsXCIpKSB7XG4gICAgaWYgKGFyZy50eXBlID09PSA0KSB7XG4gICAgICBpZiAoYXJnLmlzU3RhdGljKSB7XG4gICAgICAgIGFyZy5jb250ZW50ID0gY2FtZWxpemUoYXJnLmNvbnRlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJnLmNvbnRlbnQgPSBgJHtjb250ZXh0LmhlbHBlclN0cmluZyhDQU1FTElaRSl9KCR7YXJnLmNvbnRlbnR9KWA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyZy5jaGlsZHJlbi51bnNoaWZ0KGAke2NvbnRleHQuaGVscGVyU3RyaW5nKENBTUVMSVpFKX0oYCk7XG4gICAgICBhcmcuY2hpbGRyZW4ucHVzaChgKWApO1xuICAgIH1cbiAgfVxuICBpZiAoIWNvbnRleHQuaW5TU1IpIHtcbiAgICBpZiAobW9kaWZpZXJzLnNvbWUoKG1vZCkgPT4gbW9kLmNvbnRlbnQgPT09IFwicHJvcFwiKSkge1xuICAgICAgaW5qZWN0UHJlZml4KGFyZywgXCIuXCIpO1xuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLnNvbWUoKG1vZCkgPT4gbW9kLmNvbnRlbnQgPT09IFwiYXR0clwiKSkge1xuICAgICAgaW5qZWN0UHJlZml4KGFyZywgXCJeXCIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHByb3BzOiBbY3JlYXRlT2JqZWN0UHJvcGVydHkoYXJnLCBleHApXVxuICB9O1xufTtcbmNvbnN0IHRyYW5zZm9ybUJpbmRTaG9ydGhhbmQgPSAoZGlyLCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGFyZyA9IGRpci5hcmc7XG4gIGNvbnN0IHByb3BOYW1lID0gY2FtZWxpemUoYXJnLmNvbnRlbnQpO1xuICBkaXIuZXhwID0gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihwcm9wTmFtZSwgZmFsc2UsIGFyZy5sb2MpO1xufTtcbmNvbnN0IGluamVjdFByZWZpeCA9IChhcmcsIHByZWZpeCkgPT4ge1xuICBpZiAoYXJnLnR5cGUgPT09IDQpIHtcbiAgICBpZiAoYXJnLmlzU3RhdGljKSB7XG4gICAgICBhcmcuY29udGVudCA9IHByZWZpeCArIGFyZy5jb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmcuY29udGVudCA9IGBcXGAke3ByZWZpeH1cXCR7JHthcmcuY29udGVudH19XFxgYDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYXJnLmNoaWxkcmVuLnVuc2hpZnQoYCcke3ByZWZpeH0nICsgKGApO1xuICAgIGFyZy5jaGlsZHJlbi5wdXNoKGApYCk7XG4gIH1cbn07XG5cbmNvbnN0IHRyYW5zZm9ybUZvciA9IGNyZWF0ZVN0cnVjdHVyYWxEaXJlY3RpdmVUcmFuc2Zvcm0oXG4gIFwiZm9yXCIsXG4gIChub2RlLCBkaXIsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCB7IGhlbHBlciwgcmVtb3ZlSGVscGVyIH0gPSBjb250ZXh0O1xuICAgIHJldHVybiBwcm9jZXNzRm9yKG5vZGUsIGRpciwgY29udGV4dCwgKGZvck5vZGUpID0+IHtcbiAgICAgIGNvbnN0IHJlbmRlckV4cCA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKGhlbHBlcihSRU5ERVJfTElTVCksIFtcbiAgICAgICAgZm9yTm9kZS5zb3VyY2VcbiAgICAgIF0pO1xuICAgICAgY29uc3QgaXNUZW1wbGF0ZSA9IGlzVGVtcGxhdGVOb2RlKG5vZGUpO1xuICAgICAgY29uc3QgbWVtbyA9IGZpbmREaXIobm9kZSwgXCJtZW1vXCIpO1xuICAgICAgY29uc3Qga2V5UHJvcCA9IGZpbmRQcm9wKG5vZGUsIGBrZXlgLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICBjb25zdCBpc0RpcktleSA9IGtleVByb3AgJiYga2V5UHJvcC50eXBlID09PSA3O1xuICAgICAgaWYgKGlzRGlyS2V5ICYmICFrZXlQcm9wLmV4cCkge1xuICAgICAgICB0cmFuc2Zvcm1CaW5kU2hvcnRoYW5kKGtleVByb3ApO1xuICAgICAgfVxuICAgICAgbGV0IGtleUV4cCA9IGtleVByb3AgJiYgKGtleVByb3AudHlwZSA9PT0gNiA/IGtleVByb3AudmFsdWUgPyBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGtleVByb3AudmFsdWUuY29udGVudCwgdHJ1ZSkgOiB2b2lkIDAgOiBrZXlQcm9wLmV4cCk7XG4gICAgICBjb25zdCBrZXlQcm9wZXJ0eSA9IGtleVByb3AgJiYga2V5RXhwID8gY3JlYXRlT2JqZWN0UHJvcGVydHkoYGtleWAsIGtleUV4cCkgOiBudWxsO1xuICAgICAgY29uc3QgaXNTdGFibGVGcmFnbWVudCA9IGZvck5vZGUuc291cmNlLnR5cGUgPT09IDQgJiYgZm9yTm9kZS5zb3VyY2UuY29uc3RUeXBlID4gMDtcbiAgICAgIGNvbnN0IGZyYWdtZW50RmxhZyA9IGlzU3RhYmxlRnJhZ21lbnQgPyA2NCA6IGtleVByb3AgPyAxMjggOiAyNTY7XG4gICAgICBmb3JOb2RlLmNvZGVnZW5Ob2RlID0gY3JlYXRlVk5vZGVDYWxsKFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBoZWxwZXIoRlJBR01FTlQpLFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIHJlbmRlckV4cCxcbiAgICAgICAgZnJhZ21lbnRGbGFnLFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgIWlzU3RhYmxlRnJhZ21lbnQsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBub2RlLmxvY1xuICAgICAgKTtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxldCBjaGlsZEJsb2NrO1xuICAgICAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSBmb3JOb2RlO1xuICAgICAgICBpZiAoaXNUZW1wbGF0ZSkge1xuICAgICAgICAgIG5vZGUuY2hpbGRyZW4uc29tZSgoYykgPT4ge1xuICAgICAgICAgICAgaWYgKGMudHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgICBjb25zdCBrZXkgPSBmaW5kUHJvcChjLCBcImtleVwiKTtcbiAgICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgICAgICAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIDMzLFxuICAgICAgICAgICAgICAgICAgICBrZXkubG9jXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5lZWRGcmFnbWVudFdyYXBwZXIgPSBjaGlsZHJlbi5sZW5ndGggIT09IDEgfHwgY2hpbGRyZW5bMF0udHlwZSAhPT0gMTtcbiAgICAgICAgY29uc3Qgc2xvdE91dGxldCA9IGlzU2xvdE91dGxldChub2RlKSA/IG5vZGUgOiBpc1RlbXBsYXRlICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGlzU2xvdE91dGxldChub2RlLmNoaWxkcmVuWzBdKSA/IG5vZGUuY2hpbGRyZW5bMF0gOiBudWxsO1xuICAgICAgICBpZiAoc2xvdE91dGxldCkge1xuICAgICAgICAgIGNoaWxkQmxvY2sgPSBzbG90T3V0bGV0LmNvZGVnZW5Ob2RlO1xuICAgICAgICAgIGlmIChpc1RlbXBsYXRlICYmIGtleVByb3BlcnR5KSB7XG4gICAgICAgICAgICBpbmplY3RQcm9wKGNoaWxkQmxvY2ssIGtleVByb3BlcnR5LCBjb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmVlZEZyYWdtZW50V3JhcHBlcikge1xuICAgICAgICAgIGNoaWxkQmxvY2sgPSBjcmVhdGVWTm9kZUNhbGwoXG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgaGVscGVyKEZSQUdNRU5UKSxcbiAgICAgICAgICAgIGtleVByb3BlcnR5ID8gY3JlYXRlT2JqZWN0RXhwcmVzc2lvbihba2V5UHJvcGVydHldKSA6IHZvaWQgMCxcbiAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4sXG4gICAgICAgICAgICA2NCxcbiAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hpbGRCbG9jayA9IGNoaWxkcmVuWzBdLmNvZGVnZW5Ob2RlO1xuICAgICAgICAgIGlmIChpc1RlbXBsYXRlICYmIGtleVByb3BlcnR5KSB7XG4gICAgICAgICAgICBpbmplY3RQcm9wKGNoaWxkQmxvY2ssIGtleVByb3BlcnR5LCBjb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNoaWxkQmxvY2suaXNCbG9jayAhPT0gIWlzU3RhYmxlRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZEJsb2NrLmlzQmxvY2spIHtcbiAgICAgICAgICAgICAgcmVtb3ZlSGVscGVyKE9QRU5fQkxPQ0spO1xuICAgICAgICAgICAgICByZW1vdmVIZWxwZXIoXG4gICAgICAgICAgICAgICAgZ2V0Vk5vZGVCbG9ja0hlbHBlcihjb250ZXh0LmluU1NSLCBjaGlsZEJsb2NrLmlzQ29tcG9uZW50KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVtb3ZlSGVscGVyKFxuICAgICAgICAgICAgICAgIGdldFZOb2RlSGVscGVyKGNvbnRleHQuaW5TU1IsIGNoaWxkQmxvY2suaXNDb21wb25lbnQpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkQmxvY2suaXNCbG9jayA9ICFpc1N0YWJsZUZyYWdtZW50O1xuICAgICAgICAgIGlmIChjaGlsZEJsb2NrLmlzQmxvY2spIHtcbiAgICAgICAgICAgIGhlbHBlcihPUEVOX0JMT0NLKTtcbiAgICAgICAgICAgIGhlbHBlcihnZXRWTm9kZUJsb2NrSGVscGVyKGNvbnRleHQuaW5TU1IsIGNoaWxkQmxvY2suaXNDb21wb25lbnQpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVscGVyKGdldFZOb2RlSGVscGVyKGNvbnRleHQuaW5TU1IsIGNoaWxkQmxvY2suaXNDb21wb25lbnQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lbW8pIHtcbiAgICAgICAgICBjb25zdCBsb29wID0gY3JlYXRlRnVuY3Rpb25FeHByZXNzaW9uKFxuICAgICAgICAgICAgY3JlYXRlRm9yTG9vcFBhcmFtcyhmb3JOb2RlLnBhcnNlUmVzdWx0LCBbXG4gICAgICAgICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYF9jYWNoZWRgKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICApO1xuICAgICAgICAgIGxvb3AuYm9keSA9IGNyZWF0ZUJsb2NrU3RhdGVtZW50KFtcbiAgICAgICAgICAgIGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbYGNvbnN0IF9tZW1vID0gKGAsIG1lbW8uZXhwLCBgKWBdKSxcbiAgICAgICAgICAgIGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbXG4gICAgICAgICAgICAgIGBpZiAoX2NhY2hlZGAsXG4gICAgICAgICAgICAgIC4uLmtleUV4cCA/IFtgICYmIF9jYWNoZWQua2V5ID09PSBgLCBrZXlFeHBdIDogW10sXG4gICAgICAgICAgICAgIGAgJiYgJHtjb250ZXh0LmhlbHBlclN0cmluZyhcbiAgICAgICAgICAgICAgICBJU19NRU1PX1NBTUVcbiAgICAgICAgICAgICAgKX0oX2NhY2hlZCwgX21lbW8pKSByZXR1cm4gX2NhY2hlZGBcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uKFtgY29uc3QgX2l0ZW0gPSBgLCBjaGlsZEJsb2NrXSksXG4gICAgICAgICAgICBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGBfaXRlbS5tZW1vID0gX21lbW9gKSxcbiAgICAgICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYHJldHVybiBfaXRlbWApXG4gICAgICAgICAgXSk7XG4gICAgICAgICAgcmVuZGVyRXhwLmFyZ3VtZW50cy5wdXNoKFxuICAgICAgICAgICAgbG9vcCxcbiAgICAgICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYF9jYWNoZWApLFxuICAgICAgICAgICAgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihTdHJpbmcoY29udGV4dC5jYWNoZWQubGVuZ3RoKSlcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnRleHQuY2FjaGVkLnB1c2gobnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVuZGVyRXhwLmFyZ3VtZW50cy5wdXNoKFxuICAgICAgICAgICAgY3JlYXRlRnVuY3Rpb25FeHByZXNzaW9uKFxuICAgICAgICAgICAgICBjcmVhdGVGb3JMb29wUGFyYW1zKGZvck5vZGUucGFyc2VSZXN1bHQpLFxuICAgICAgICAgICAgICBjaGlsZEJsb2NrLFxuICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuKTtcbmZ1bmN0aW9uIHByb2Nlc3NGb3Iobm9kZSwgZGlyLCBjb250ZXh0LCBwcm9jZXNzQ29kZWdlbikge1xuICBpZiAoIWRpci5leHApIHtcbiAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICBjcmVhdGVDb21waWxlckVycm9yKDMxLCBkaXIubG9jKVxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHBhcnNlUmVzdWx0ID0gZGlyLmZvclBhcnNlUmVzdWx0O1xuICBpZiAoIXBhcnNlUmVzdWx0KSB7XG4gICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcigzMiwgZGlyLmxvYylcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuICBmaW5hbGl6ZUZvclBhcnNlUmVzdWx0KHBhcnNlUmVzdWx0LCBjb250ZXh0KTtcbiAgY29uc3QgeyBhZGRJZGVudGlmaWVycywgcmVtb3ZlSWRlbnRpZmllcnMsIHNjb3BlcyB9ID0gY29udGV4dDtcbiAgY29uc3QgeyBzb3VyY2UsIHZhbHVlLCBrZXksIGluZGV4IH0gPSBwYXJzZVJlc3VsdDtcbiAgY29uc3QgZm9yTm9kZSA9IHtcbiAgICB0eXBlOiAxMSxcbiAgICBsb2M6IGRpci5sb2MsXG4gICAgc291cmNlLFxuICAgIHZhbHVlQWxpYXM6IHZhbHVlLFxuICAgIGtleUFsaWFzOiBrZXksXG4gICAgb2JqZWN0SW5kZXhBbGlhczogaW5kZXgsXG4gICAgcGFyc2VSZXN1bHQsXG4gICAgY2hpbGRyZW46IGlzVGVtcGxhdGVOb2RlKG5vZGUpID8gbm9kZS5jaGlsZHJlbiA6IFtub2RlXVxuICB9O1xuICBjb250ZXh0LnJlcGxhY2VOb2RlKGZvck5vZGUpO1xuICBzY29wZXMudkZvcisrO1xuICBjb25zdCBvbkV4aXQgPSBwcm9jZXNzQ29kZWdlbiAmJiBwcm9jZXNzQ29kZWdlbihmb3JOb2RlKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBzY29wZXMudkZvci0tO1xuICAgIGlmIChvbkV4aXQpIG9uRXhpdCgpO1xuICB9O1xufVxuZnVuY3Rpb24gZmluYWxpemVGb3JQYXJzZVJlc3VsdChyZXN1bHQsIGNvbnRleHQpIHtcbiAgaWYgKHJlc3VsdC5maW5hbGl6ZWQpIHJldHVybjtcbiAge1xuICAgIHZhbGlkYXRlQnJvd3NlckV4cHJlc3Npb24ocmVzdWx0LnNvdXJjZSwgY29udGV4dCk7XG4gICAgaWYgKHJlc3VsdC5rZXkpIHtcbiAgICAgIHZhbGlkYXRlQnJvd3NlckV4cHJlc3Npb24oXG4gICAgICAgIHJlc3VsdC5rZXksXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQuaW5kZXgpIHtcbiAgICAgIHZhbGlkYXRlQnJvd3NlckV4cHJlc3Npb24oXG4gICAgICAgIHJlc3VsdC5pbmRleCxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC52YWx1ZSkge1xuICAgICAgdmFsaWRhdGVCcm93c2VyRXhwcmVzc2lvbihcbiAgICAgICAgcmVzdWx0LnZhbHVlLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXN1bHQuZmluYWxpemVkID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZvckxvb3BQYXJhbXMoeyB2YWx1ZSwga2V5LCBpbmRleCB9LCBtZW1vQXJncyA9IFtdKSB7XG4gIHJldHVybiBjcmVhdGVQYXJhbXNMaXN0KFt2YWx1ZSwga2V5LCBpbmRleCwgLi4ubWVtb0FyZ3NdKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhcmFtc0xpc3QoYXJncykge1xuICBsZXQgaSA9IGFyZ3MubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKGFyZ3NbaV0pIGJyZWFrO1xuICB9XG4gIHJldHVybiBhcmdzLnNsaWNlKDAsIGkgKyAxKS5tYXAoKGFyZywgaTIpID0+IGFyZyB8fCBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGBfYC5yZXBlYXQoaTIgKyAxKSwgZmFsc2UpKTtcbn1cblxuY29uc3QgZGVmYXVsdEZhbGxiYWNrID0gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihgdW5kZWZpbmVkYCwgZmFsc2UpO1xuY29uc3QgdHJhY2tTbG90U2NvcGVzID0gKG5vZGUsIGNvbnRleHQpID0+IHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSAmJiAobm9kZS50YWdUeXBlID09PSAxIHx8IG5vZGUudGFnVHlwZSA9PT0gMykpIHtcbiAgICBjb25zdCB2U2xvdCA9IGZpbmREaXIobm9kZSwgXCJzbG90XCIpO1xuICAgIGlmICh2U2xvdCkge1xuICAgICAgdlNsb3QuZXhwO1xuICAgICAgY29udGV4dC5zY29wZXMudlNsb3QrKztcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNvbnRleHQuc2NvcGVzLnZTbG90LS07XG4gICAgICB9O1xuICAgIH1cbiAgfVxufTtcbmNvbnN0IGJ1aWxkQ2xpZW50U2xvdEZuID0gKHByb3BzLCBfdkZvckV4cCwgY2hpbGRyZW4sIGxvYykgPT4gY3JlYXRlRnVuY3Rpb25FeHByZXNzaW9uKFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIGZhbHNlLFxuICB0cnVlLFxuICBjaGlsZHJlbi5sZW5ndGggPyBjaGlsZHJlblswXS5sb2MgOiBsb2Ncbik7XG5mdW5jdGlvbiBidWlsZFNsb3RzKG5vZGUsIGNvbnRleHQsIGJ1aWxkU2xvdEZuID0gYnVpbGRDbGllbnRTbG90Rm4pIHtcbiAgY29udGV4dC5oZWxwZXIoV0lUSF9DVFgpO1xuICBjb25zdCB7IGNoaWxkcmVuLCBsb2MgfSA9IG5vZGU7XG4gIGNvbnN0IHNsb3RzUHJvcGVydGllcyA9IFtdO1xuICBjb25zdCBkeW5hbWljU2xvdHMgPSBbXTtcbiAgbGV0IGhhc0R5bmFtaWNTbG90cyA9IGNvbnRleHQuc2NvcGVzLnZTbG90ID4gMCB8fCBjb250ZXh0LnNjb3Blcy52Rm9yID4gMDtcbiAgY29uc3Qgb25Db21wb25lbnRTbG90ID0gZmluZERpcihub2RlLCBcInNsb3RcIiwgdHJ1ZSk7XG4gIGlmIChvbkNvbXBvbmVudFNsb3QpIHtcbiAgICBjb25zdCB7IGFyZywgZXhwIH0gPSBvbkNvbXBvbmVudFNsb3Q7XG4gICAgaWYgKGFyZyAmJiAhaXNTdGF0aWNFeHAoYXJnKSkge1xuICAgICAgaGFzRHluYW1pY1Nsb3RzID0gdHJ1ZTtcbiAgICB9XG4gICAgc2xvdHNQcm9wZXJ0aWVzLnB1c2goXG4gICAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShcbiAgICAgICAgYXJnIHx8IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oXCJkZWZhdWx0XCIsIHRydWUpLFxuICAgICAgICBidWlsZFNsb3RGbihleHAsIHZvaWQgMCwgY2hpbGRyZW4sIGxvYylcbiAgICAgIClcbiAgICApO1xuICB9XG4gIGxldCBoYXNUZW1wbGF0ZVNsb3RzID0gZmFsc2U7XG4gIGxldCBoYXNOYW1lZERlZmF1bHRTbG90ID0gZmFsc2U7XG4gIGNvbnN0IGltcGxpY2l0RGVmYXVsdENoaWxkcmVuID0gW107XG4gIGNvbnN0IHNlZW5TbG90TmFtZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBsZXQgY29uZGl0aW9uYWxCcmFuY2hJbmRleCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzbG90RWxlbWVudCA9IGNoaWxkcmVuW2ldO1xuICAgIGxldCBzbG90RGlyO1xuICAgIGlmICghaXNUZW1wbGF0ZU5vZGUoc2xvdEVsZW1lbnQpIHx8ICEoc2xvdERpciA9IGZpbmREaXIoc2xvdEVsZW1lbnQsIFwic2xvdFwiLCB0cnVlKSkpIHtcbiAgICAgIGlmIChzbG90RWxlbWVudC50eXBlICE9PSAzKSB7XG4gICAgICAgIGltcGxpY2l0RGVmYXVsdENoaWxkcmVuLnB1c2goc2xvdEVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChvbkNvbXBvbmVudFNsb3QpIHtcbiAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcigzNywgc2xvdERpci5sb2MpXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGhhc1RlbXBsYXRlU2xvdHMgPSB0cnVlO1xuICAgIGNvbnN0IHsgY2hpbGRyZW46IHNsb3RDaGlsZHJlbiwgbG9jOiBzbG90TG9jIH0gPSBzbG90RWxlbWVudDtcbiAgICBjb25zdCB7XG4gICAgICBhcmc6IHNsb3ROYW1lID0gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihgZGVmYXVsdGAsIHRydWUpLFxuICAgICAgZXhwOiBzbG90UHJvcHMsXG4gICAgICBsb2M6IGRpckxvY1xuICAgIH0gPSBzbG90RGlyO1xuICAgIGxldCBzdGF0aWNTbG90TmFtZTtcbiAgICBpZiAoaXNTdGF0aWNFeHAoc2xvdE5hbWUpKSB7XG4gICAgICBzdGF0aWNTbG90TmFtZSA9IHNsb3ROYW1lID8gc2xvdE5hbWUuY29udGVudCA6IGBkZWZhdWx0YDtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFzRHluYW1pY1Nsb3RzID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgdkZvciA9IGZpbmREaXIoc2xvdEVsZW1lbnQsIFwiZm9yXCIpO1xuICAgIGNvbnN0IHNsb3RGdW5jdGlvbiA9IGJ1aWxkU2xvdEZuKHNsb3RQcm9wcywgdkZvciwgc2xvdENoaWxkcmVuLCBzbG90TG9jKTtcbiAgICBsZXQgdklmO1xuICAgIGxldCB2RWxzZTtcbiAgICBpZiAodklmID0gZmluZERpcihzbG90RWxlbWVudCwgXCJpZlwiKSkge1xuICAgICAgaGFzRHluYW1pY1Nsb3RzID0gdHJ1ZTtcbiAgICAgIGR5bmFtaWNTbG90cy5wdXNoKFxuICAgICAgICBjcmVhdGVDb25kaXRpb25hbEV4cHJlc3Npb24oXG4gICAgICAgICAgdklmLmV4cCxcbiAgICAgICAgICBidWlsZER5bmFtaWNTbG90KHNsb3ROYW1lLCBzbG90RnVuY3Rpb24sIGNvbmRpdGlvbmFsQnJhbmNoSW5kZXgrKyksXG4gICAgICAgICAgZGVmYXVsdEZhbGxiYWNrXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh2RWxzZSA9IGZpbmREaXIoXG4gICAgICBzbG90RWxlbWVudCxcbiAgICAgIC9eZWxzZSgtaWYpPyQvLFxuICAgICAgdHJ1ZVxuICAgICAgLyogYWxsb3dFbXB0eSAqL1xuICAgICkpIHtcbiAgICAgIGxldCBqID0gaTtcbiAgICAgIGxldCBwcmV2O1xuICAgICAgd2hpbGUgKGotLSkge1xuICAgICAgICBwcmV2ID0gY2hpbGRyZW5bal07XG4gICAgICAgIGlmIChwcmV2LnR5cGUgIT09IDMpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByZXYgJiYgaXNUZW1wbGF0ZU5vZGUocHJldikgJiYgZmluZERpcihwcmV2LCAvXihlbHNlLSk/aWYkLykpIHtcbiAgICAgICAgbGV0IGNvbmRpdGlvbmFsID0gZHluYW1pY1Nsb3RzW2R5bmFtaWNTbG90cy5sZW5ndGggLSAxXTtcbiAgICAgICAgd2hpbGUgKGNvbmRpdGlvbmFsLmFsdGVybmF0ZS50eXBlID09PSAxOSkge1xuICAgICAgICAgIGNvbmRpdGlvbmFsID0gY29uZGl0aW9uYWwuYWx0ZXJuYXRlO1xuICAgICAgICB9XG4gICAgICAgIGNvbmRpdGlvbmFsLmFsdGVybmF0ZSA9IHZFbHNlLmV4cCA/IGNyZWF0ZUNvbmRpdGlvbmFsRXhwcmVzc2lvbihcbiAgICAgICAgICB2RWxzZS5leHAsXG4gICAgICAgICAgYnVpbGREeW5hbWljU2xvdChcbiAgICAgICAgICAgIHNsb3ROYW1lLFxuICAgICAgICAgICAgc2xvdEZ1bmN0aW9uLFxuICAgICAgICAgICAgY29uZGl0aW9uYWxCcmFuY2hJbmRleCsrXG4gICAgICAgICAgKSxcbiAgICAgICAgICBkZWZhdWx0RmFsbGJhY2tcbiAgICAgICAgKSA6IGJ1aWxkRHluYW1pY1Nsb3Qoc2xvdE5hbWUsIHNsb3RGdW5jdGlvbiwgY29uZGl0aW9uYWxCcmFuY2hJbmRleCsrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgICBjcmVhdGVDb21waWxlckVycm9yKDMwLCB2RWxzZS5sb2MpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2Rm9yKSB7XG4gICAgICBoYXNEeW5hbWljU2xvdHMgPSB0cnVlO1xuICAgICAgY29uc3QgcGFyc2VSZXN1bHQgPSB2Rm9yLmZvclBhcnNlUmVzdWx0O1xuICAgICAgaWYgKHBhcnNlUmVzdWx0KSB7XG4gICAgICAgIGZpbmFsaXplRm9yUGFyc2VSZXN1bHQocGFyc2VSZXN1bHQsIGNvbnRleHQpO1xuICAgICAgICBkeW5hbWljU2xvdHMucHVzaChcbiAgICAgICAgICBjcmVhdGVDYWxsRXhwcmVzc2lvbihjb250ZXh0LmhlbHBlcihSRU5ERVJfTElTVCksIFtcbiAgICAgICAgICAgIHBhcnNlUmVzdWx0LnNvdXJjZSxcbiAgICAgICAgICAgIGNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbihcbiAgICAgICAgICAgICAgY3JlYXRlRm9yTG9vcFBhcmFtcyhwYXJzZVJlc3VsdCksXG4gICAgICAgICAgICAgIGJ1aWxkRHluYW1pY1Nsb3Qoc2xvdE5hbWUsIHNsb3RGdW5jdGlvbiksXG4gICAgICAgICAgICAgIHRydWVcbiAgICAgICAgICAgIClcbiAgICAgICAgICBdKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoXG4gICAgICAgICAgICAzMixcbiAgICAgICAgICAgIHZGb3IubG9jXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGljU2xvdE5hbWUpIHtcbiAgICAgICAgaWYgKHNlZW5TbG90TmFtZXMuaGFzKHN0YXRpY1Nsb3ROYW1lKSkge1xuICAgICAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoXG4gICAgICAgICAgICAgIDM4LFxuICAgICAgICAgICAgICBkaXJMb2NcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHNlZW5TbG90TmFtZXMuYWRkKHN0YXRpY1Nsb3ROYW1lKTtcbiAgICAgICAgaWYgKHN0YXRpY1Nsb3ROYW1lID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgIGhhc05hbWVkRGVmYXVsdFNsb3QgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzbG90c1Byb3BlcnRpZXMucHVzaChjcmVhdGVPYmplY3RQcm9wZXJ0eShzbG90TmFtZSwgc2xvdEZ1bmN0aW9uKSk7XG4gICAgfVxuICB9XG4gIGlmICghb25Db21wb25lbnRTbG90KSB7XG4gICAgY29uc3QgYnVpbGREZWZhdWx0U2xvdFByb3BlcnR5ID0gKHByb3BzLCBjaGlsZHJlbjIpID0+IHtcbiAgICAgIGNvbnN0IGZuID0gYnVpbGRTbG90Rm4ocHJvcHMsIHZvaWQgMCwgY2hpbGRyZW4yLCBsb2MpO1xuICAgICAgcmV0dXJuIGNyZWF0ZU9iamVjdFByb3BlcnR5KGBkZWZhdWx0YCwgZm4pO1xuICAgIH07XG4gICAgaWYgKCFoYXNUZW1wbGF0ZVNsb3RzKSB7XG4gICAgICBzbG90c1Byb3BlcnRpZXMucHVzaChidWlsZERlZmF1bHRTbG90UHJvcGVydHkodm9pZCAwLCBjaGlsZHJlbikpO1xuICAgIH0gZWxzZSBpZiAoaW1wbGljaXREZWZhdWx0Q2hpbGRyZW4ubGVuZ3RoICYmIC8vICMzNzY2XG4gICAgLy8gd2l0aCB3aGl0ZXNwYWNlOiAncHJlc2VydmUnLCB3aGl0ZXNwYWNlcyBiZXR3ZWVuIHNsb3RzIHdpbGwgZW5kIHVwIGluXG4gICAgLy8gaW1wbGljaXREZWZhdWx0Q2hpbGRyZW4uIElnbm9yZSBpZiBhbGwgaW1wbGljaXQgY2hpbGRyZW4gYXJlIHdoaXRlc3BhY2VzLlxuICAgIGltcGxpY2l0RGVmYXVsdENoaWxkcmVuLnNvbWUoKG5vZGUyKSA9PiBpc05vbldoaXRlc3BhY2VDb250ZW50KG5vZGUyKSkpIHtcbiAgICAgIGlmIChoYXNOYW1lZERlZmF1bHRTbG90KSB7XG4gICAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgICBjcmVhdGVDb21waWxlckVycm9yKFxuICAgICAgICAgICAgMzksXG4gICAgICAgICAgICBpbXBsaWNpdERlZmF1bHRDaGlsZHJlblswXS5sb2NcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90c1Byb3BlcnRpZXMucHVzaChcbiAgICAgICAgICBidWlsZERlZmF1bHRTbG90UHJvcGVydHkodm9pZCAwLCBpbXBsaWNpdERlZmF1bHRDaGlsZHJlbilcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3Qgc2xvdEZsYWcgPSBoYXNEeW5hbWljU2xvdHMgPyAyIDogaGFzRm9yd2FyZGVkU2xvdHMobm9kZS5jaGlsZHJlbikgPyAzIDogMTtcbiAgbGV0IHNsb3RzID0gY3JlYXRlT2JqZWN0RXhwcmVzc2lvbihcbiAgICBzbG90c1Byb3BlcnRpZXMuY29uY2F0KFxuICAgICAgY3JlYXRlT2JqZWN0UHJvcGVydHkoXG4gICAgICAgIGBfYCxcbiAgICAgICAgLy8gMiA9IGNvbXBpbGVkIGJ1dCBkeW5hbWljID0gY2FuIHNraXAgbm9ybWFsaXphdGlvbiwgYnV0IG11c3QgcnVuIGRpZmZcbiAgICAgICAgLy8gMSA9IGNvbXBpbGVkIGFuZCBzdGF0aWMgPSBjYW4gc2tpcCBub3JtYWxpemF0aW9uIEFORCBkaWZmIGFzIG9wdGltaXplZFxuICAgICAgICBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKFxuICAgICAgICAgIHNsb3RGbGFnICsgKGAgLyogJHtzbG90RmxhZ3NUZXh0W3Nsb3RGbGFnXX0gKi9gICksXG4gICAgICAgICAgZmFsc2VcbiAgICAgICAgKVxuICAgICAgKVxuICAgICksXG4gICAgbG9jXG4gICk7XG4gIGlmIChkeW5hbWljU2xvdHMubGVuZ3RoKSB7XG4gICAgc2xvdHMgPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihjb250ZXh0LmhlbHBlcihDUkVBVEVfU0xPVFMpLCBbXG4gICAgICBzbG90cyxcbiAgICAgIGNyZWF0ZUFycmF5RXhwcmVzc2lvbihkeW5hbWljU2xvdHMpXG4gICAgXSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzbG90cyxcbiAgICBoYXNEeW5hbWljU2xvdHNcbiAgfTtcbn1cbmZ1bmN0aW9uIGJ1aWxkRHluYW1pY1Nsb3QobmFtZSwgZm4sIGluZGV4KSB7XG4gIGNvbnN0IHByb3BzID0gW1xuICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KGBuYW1lYCwgbmFtZSksXG4gICAgY3JlYXRlT2JqZWN0UHJvcGVydHkoYGZuYCwgZm4pXG4gIF07XG4gIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgcHJvcHMucHVzaChcbiAgICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KGBrZXlgLCBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKFN0cmluZyhpbmRleCksIHRydWUpKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZU9iamVjdEV4cHJlc3Npb24ocHJvcHMpO1xufVxuZnVuY3Rpb24gaGFzRm9yd2FyZGVkU2xvdHMoY2hpbGRyZW4pIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgc3dpdGNoIChjaGlsZC50eXBlKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGlmIChjaGlsZC50YWdUeXBlID09PSAyIHx8IGhhc0ZvcndhcmRlZFNsb3RzKGNoaWxkLmNoaWxkcmVuKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5OlxuICAgICAgICBpZiAoaGFzRm9yd2FyZGVkU2xvdHMoY2hpbGQuYnJhbmNoZXMpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEwOlxuICAgICAgY2FzZSAxMTpcbiAgICAgICAgaWYgKGhhc0ZvcndhcmRlZFNsb3RzKGNoaWxkLmNoaWxkcmVuKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc05vbldoaXRlc3BhY2VDb250ZW50KG5vZGUpIHtcbiAgaWYgKG5vZGUudHlwZSAhPT0gMiAmJiBub2RlLnR5cGUgIT09IDEyKVxuICAgIHJldHVybiB0cnVlO1xuICByZXR1cm4gbm9kZS50eXBlID09PSAyID8gISFub2RlLmNvbnRlbnQudHJpbSgpIDogaXNOb25XaGl0ZXNwYWNlQ29udGVudChub2RlLmNvbnRlbnQpO1xufVxuXG5jb25zdCBkaXJlY3RpdmVJbXBvcnRNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zZm9ybUVsZW1lbnQgPSAobm9kZSwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gZnVuY3Rpb24gcG9zdFRyYW5zZm9ybUVsZW1lbnQoKSB7XG4gICAgbm9kZSA9IGNvbnRleHQuY3VycmVudE5vZGU7XG4gICAgaWYgKCEobm9kZS50eXBlID09PSAxICYmIChub2RlLnRhZ1R5cGUgPT09IDAgfHwgbm9kZS50YWdUeXBlID09PSAxKSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyB0YWcsIHByb3BzIH0gPSBub2RlO1xuICAgIGNvbnN0IGlzQ29tcG9uZW50ID0gbm9kZS50YWdUeXBlID09PSAxO1xuICAgIGxldCB2bm9kZVRhZyA9IGlzQ29tcG9uZW50ID8gcmVzb2x2ZUNvbXBvbmVudFR5cGUobm9kZSwgY29udGV4dCkgOiBgXCIke3RhZ31cImA7XG4gICAgY29uc3QgaXNEeW5hbWljQ29tcG9uZW50ID0gaXNPYmplY3Qodm5vZGVUYWcpICYmIHZub2RlVGFnLmNhbGxlZSA9PT0gUkVTT0xWRV9EWU5BTUlDX0NPTVBPTkVOVDtcbiAgICBsZXQgdm5vZGVQcm9wcztcbiAgICBsZXQgdm5vZGVDaGlsZHJlbjtcbiAgICBsZXQgcGF0Y2hGbGFnID0gMDtcbiAgICBsZXQgdm5vZGVEeW5hbWljUHJvcHM7XG4gICAgbGV0IGR5bmFtaWNQcm9wTmFtZXM7XG4gICAgbGV0IHZub2RlRGlyZWN0aXZlcztcbiAgICBsZXQgc2hvdWxkVXNlQmxvY2sgPSAoXG4gICAgICAvLyBkeW5hbWljIGNvbXBvbmVudCBtYXkgcmVzb2x2ZSB0byBwbGFpbiBlbGVtZW50c1xuICAgICAgaXNEeW5hbWljQ29tcG9uZW50IHx8IHZub2RlVGFnID09PSBURUxFUE9SVCB8fCB2bm9kZVRhZyA9PT0gU1VTUEVOU0UgfHwgIWlzQ29tcG9uZW50ICYmIC8vIDxzdmc+IGFuZCA8Zm9yZWlnbk9iamVjdD4gbXVzdCBiZSBmb3JjZWQgaW50byBibG9ja3Mgc28gdGhhdCBibG9ja1xuICAgICAgLy8gdXBkYXRlcyBpbnNpZGUgZ2V0IHByb3BlciBpc1NWRyBmbGFnIGF0IHJ1bnRpbWUuICgjNjM5LCAjNjQzKVxuICAgICAgLy8gVGhpcyBpcyB0ZWNobmljYWxseSB3ZWItc3BlY2lmaWMsIGJ1dCBzcGxpdHRpbmcgdGhlIGxvZ2ljIG91dCBvZiBjb3JlXG4gICAgICAvLyBsZWFkcyB0byB0b28gbXVjaCB1bm5lY2Vzc2FyeSBjb21wbGV4aXR5LlxuICAgICAgKHRhZyA9PT0gXCJzdmdcIiB8fCB0YWcgPT09IFwiZm9yZWlnbk9iamVjdFwiIHx8IHRhZyA9PT0gXCJtYXRoXCIpXG4gICAgKTtcbiAgICBpZiAocHJvcHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcHJvcHNCdWlsZFJlc3VsdCA9IGJ1aWxkUHJvcHMoXG4gICAgICAgIG5vZGUsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgaXNDb21wb25lbnQsXG4gICAgICAgIGlzRHluYW1pY0NvbXBvbmVudFxuICAgICAgKTtcbiAgICAgIHZub2RlUHJvcHMgPSBwcm9wc0J1aWxkUmVzdWx0LnByb3BzO1xuICAgICAgcGF0Y2hGbGFnID0gcHJvcHNCdWlsZFJlc3VsdC5wYXRjaEZsYWc7XG4gICAgICBkeW5hbWljUHJvcE5hbWVzID0gcHJvcHNCdWlsZFJlc3VsdC5keW5hbWljUHJvcE5hbWVzO1xuICAgICAgY29uc3QgZGlyZWN0aXZlcyA9IHByb3BzQnVpbGRSZXN1bHQuZGlyZWN0aXZlcztcbiAgICAgIHZub2RlRGlyZWN0aXZlcyA9IGRpcmVjdGl2ZXMgJiYgZGlyZWN0aXZlcy5sZW5ndGggPyBjcmVhdGVBcnJheUV4cHJlc3Npb24oXG4gICAgICAgIGRpcmVjdGl2ZXMubWFwKChkaXIpID0+IGJ1aWxkRGlyZWN0aXZlQXJncyhkaXIsIGNvbnRleHQpKVxuICAgICAgKSA6IHZvaWQgMDtcbiAgICAgIGlmIChwcm9wc0J1aWxkUmVzdWx0LnNob3VsZFVzZUJsb2NrKSB7XG4gICAgICAgIHNob3VsZFVzZUJsb2NrID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHZub2RlVGFnID09PSBLRUVQX0FMSVZFKSB7XG4gICAgICAgIHNob3VsZFVzZUJsb2NrID0gdHJ1ZTtcbiAgICAgICAgcGF0Y2hGbGFnIHw9IDEwMjQ7XG4gICAgICAgIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgICAgICBjcmVhdGVDb21waWxlckVycm9yKDQ2LCB7XG4gICAgICAgICAgICAgIHN0YXJ0OiBub2RlLmNoaWxkcmVuWzBdLmxvYy5zdGFydCxcbiAgICAgICAgICAgICAgZW5kOiBub2RlLmNoaWxkcmVuW25vZGUuY2hpbGRyZW4ubGVuZ3RoIC0gMV0ubG9jLmVuZCxcbiAgICAgICAgICAgICAgc291cmNlOiBcIlwiXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHNob3VsZEJ1aWxkQXNTbG90cyA9IGlzQ29tcG9uZW50ICYmIC8vIFRlbGVwb3J0IGlzIG5vdCBhIHJlYWwgY29tcG9uZW50IGFuZCBoYXMgZGVkaWNhdGVkIHJ1bnRpbWUgaGFuZGxpbmdcbiAgICAgIHZub2RlVGFnICE9PSBURUxFUE9SVCAmJiAvLyBleHBsYWluZWQgYWJvdmUuXG4gICAgICB2bm9kZVRhZyAhPT0gS0VFUF9BTElWRTtcbiAgICAgIGlmIChzaG91bGRCdWlsZEFzU2xvdHMpIHtcbiAgICAgICAgY29uc3QgeyBzbG90cywgaGFzRHluYW1pY1Nsb3RzIH0gPSBidWlsZFNsb3RzKG5vZGUsIGNvbnRleHQpO1xuICAgICAgICB2bm9kZUNoaWxkcmVuID0gc2xvdHM7XG4gICAgICAgIGlmIChoYXNEeW5hbWljU2xvdHMpIHtcbiAgICAgICAgICBwYXRjaEZsYWcgfD0gMTAyNDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiB2bm9kZVRhZyAhPT0gVEVMRVBPUlQpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkcmVuWzBdO1xuICAgICAgICBjb25zdCB0eXBlID0gY2hpbGQudHlwZTtcbiAgICAgICAgY29uc3QgaGFzRHluYW1pY1RleHRDaGlsZCA9IHR5cGUgPT09IDUgfHwgdHlwZSA9PT0gODtcbiAgICAgICAgaWYgKGhhc0R5bmFtaWNUZXh0Q2hpbGQgJiYgZ2V0Q29uc3RhbnRUeXBlKGNoaWxkLCBjb250ZXh0KSA9PT0gMCkge1xuICAgICAgICAgIHBhdGNoRmxhZyB8PSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNEeW5hbWljVGV4dENoaWxkIHx8IHR5cGUgPT09IDIpIHtcbiAgICAgICAgICB2bm9kZUNoaWxkcmVuID0gY2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGVDaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlQ2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZHluYW1pY1Byb3BOYW1lcyAmJiBkeW5hbWljUHJvcE5hbWVzLmxlbmd0aCkge1xuICAgICAgdm5vZGVEeW5hbWljUHJvcHMgPSBzdHJpbmdpZnlEeW5hbWljUHJvcE5hbWVzKGR5bmFtaWNQcm9wTmFtZXMpO1xuICAgIH1cbiAgICBub2RlLmNvZGVnZW5Ob2RlID0gY3JlYXRlVk5vZGVDYWxsKFxuICAgICAgY29udGV4dCxcbiAgICAgIHZub2RlVGFnLFxuICAgICAgdm5vZGVQcm9wcyxcbiAgICAgIHZub2RlQ2hpbGRyZW4sXG4gICAgICBwYXRjaEZsYWcgPT09IDAgPyB2b2lkIDAgOiBwYXRjaEZsYWcsXG4gICAgICB2bm9kZUR5bmFtaWNQcm9wcyxcbiAgICAgIHZub2RlRGlyZWN0aXZlcyxcbiAgICAgICEhc2hvdWxkVXNlQmxvY2ssXG4gICAgICBmYWxzZSxcbiAgICAgIGlzQ29tcG9uZW50LFxuICAgICAgbm9kZS5sb2NcbiAgICApO1xuICB9O1xufTtcbmZ1bmN0aW9uIHJlc29sdmVDb21wb25lbnRUeXBlKG5vZGUsIGNvbnRleHQsIHNzciA9IGZhbHNlKSB7XG4gIGxldCB7IHRhZyB9ID0gbm9kZTtcbiAgY29uc3QgaXNFeHBsaWNpdER5bmFtaWMgPSBpc0NvbXBvbmVudFRhZyh0YWcpO1xuICBjb25zdCBpc1Byb3AgPSBmaW5kUHJvcChcbiAgICBub2RlLFxuICAgIFwiaXNcIixcbiAgICBmYWxzZSxcbiAgICB0cnVlXG4gICAgLyogYWxsb3cgZW1wdHkgKi9cbiAgKTtcbiAgaWYgKGlzUHJvcCkge1xuICAgIGlmIChpc0V4cGxpY2l0RHluYW1pYyB8fCBmYWxzZSkge1xuICAgICAgbGV0IGV4cDtcbiAgICAgIGlmIChpc1Byb3AudHlwZSA9PT0gNikge1xuICAgICAgICBleHAgPSBpc1Byb3AudmFsdWUgJiYgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihpc1Byb3AudmFsdWUuY29udGVudCwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHAgPSBpc1Byb3AuZXhwO1xuICAgICAgICBpZiAoIWV4cCkge1xuICAgICAgICAgIGV4cCA9IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYGlzYCwgZmFsc2UsIGlzUHJvcC5hcmcubG9jKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGV4cCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoUkVTT0xWRV9EWU5BTUlDX0NPTVBPTkVOVCksIFtcbiAgICAgICAgICBleHBcbiAgICAgICAgXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1Byb3AudHlwZSA9PT0gNiAmJiBpc1Byb3AudmFsdWUuY29udGVudC5zdGFydHNXaXRoKFwidnVlOlwiKSkge1xuICAgICAgdGFnID0gaXNQcm9wLnZhbHVlLmNvbnRlbnQuc2xpY2UoNCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGJ1aWx0SW4gPSBpc0NvcmVDb21wb25lbnQodGFnKSB8fCBjb250ZXh0LmlzQnVpbHRJbkNvbXBvbmVudCh0YWcpO1xuICBpZiAoYnVpbHRJbikge1xuICAgIGlmICghc3NyKSBjb250ZXh0LmhlbHBlcihidWlsdEluKTtcbiAgICByZXR1cm4gYnVpbHRJbjtcbiAgfVxuICBjb250ZXh0LmhlbHBlcihSRVNPTFZFX0NPTVBPTkVOVCk7XG4gIGNvbnRleHQuY29tcG9uZW50cy5hZGQodGFnKTtcbiAgcmV0dXJuIHRvVmFsaWRBc3NldElkKHRhZywgYGNvbXBvbmVudGApO1xufVxuZnVuY3Rpb24gYnVpbGRQcm9wcyhub2RlLCBjb250ZXh0LCBwcm9wcyA9IG5vZGUucHJvcHMsIGlzQ29tcG9uZW50LCBpc0R5bmFtaWNDb21wb25lbnQsIHNzciA9IGZhbHNlKSB7XG4gIGNvbnN0IHsgdGFnLCBsb2M6IGVsZW1lbnRMb2MsIGNoaWxkcmVuIH0gPSBub2RlO1xuICBsZXQgcHJvcGVydGllcyA9IFtdO1xuICBjb25zdCBtZXJnZUFyZ3MgPSBbXTtcbiAgY29uc3QgcnVudGltZURpcmVjdGl2ZXMgPSBbXTtcbiAgY29uc3QgaGFzQ2hpbGRyZW4gPSBjaGlsZHJlbi5sZW5ndGggPiAwO1xuICBsZXQgc2hvdWxkVXNlQmxvY2sgPSBmYWxzZTtcbiAgbGV0IHBhdGNoRmxhZyA9IDA7XG4gIGxldCBoYXNSZWYgPSBmYWxzZTtcbiAgbGV0IGhhc0NsYXNzQmluZGluZyA9IGZhbHNlO1xuICBsZXQgaGFzU3R5bGVCaW5kaW5nID0gZmFsc2U7XG4gIGxldCBoYXNIeWRyYXRpb25FdmVudEJpbmRpbmcgPSBmYWxzZTtcbiAgbGV0IGhhc0R5bmFtaWNLZXlzID0gZmFsc2U7XG4gIGxldCBoYXNWbm9kZUhvb2sgPSBmYWxzZTtcbiAgY29uc3QgZHluYW1pY1Byb3BOYW1lcyA9IFtdO1xuICBjb25zdCBwdXNoTWVyZ2VBcmcgPSAoYXJnKSA9PiB7XG4gICAgaWYgKHByb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICBtZXJnZUFyZ3MucHVzaChcbiAgICAgICAgY3JlYXRlT2JqZWN0RXhwcmVzc2lvbihkZWR1cGVQcm9wZXJ0aWVzKHByb3BlcnRpZXMpLCBlbGVtZW50TG9jKVxuICAgICAgKTtcbiAgICAgIHByb3BlcnRpZXMgPSBbXTtcbiAgICB9XG4gICAgaWYgKGFyZykgbWVyZ2VBcmdzLnB1c2goYXJnKTtcbiAgfTtcbiAgY29uc3QgcHVzaFJlZlZGb3JNYXJrZXIgPSAoKSA9PiB7XG4gICAgaWYgKGNvbnRleHQuc2NvcGVzLnZGb3IgPiAwKSB7XG4gICAgICBwcm9wZXJ0aWVzLnB1c2goXG4gICAgICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KFxuICAgICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oXCJyZWZfZm9yXCIsIHRydWUpLFxuICAgICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oXCJ0cnVlXCIpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9O1xuICBjb25zdCBhbmFseXplUGF0Y2hGbGFnID0gKHsga2V5LCB2YWx1ZSB9KSA9PiB7XG4gICAgaWYgKGlzU3RhdGljRXhwKGtleSkpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBrZXkuY29udGVudDtcbiAgICAgIGNvbnN0IGlzRXZlbnRIYW5kbGVyID0gaXNPbihuYW1lKTtcbiAgICAgIGlmIChpc0V2ZW50SGFuZGxlciAmJiAoIWlzQ29tcG9uZW50IHx8IGlzRHluYW1pY0NvbXBvbmVudCkgJiYgLy8gb21pdCB0aGUgZmxhZyBmb3IgY2xpY2sgaGFuZGxlcnMgYmVjYXVzZSBoeWRyYXRpb24gZ2l2ZXMgY2xpY2tcbiAgICAgIC8vIGRlZGljYXRlZCBmYXN0IHBhdGguXG4gICAgICBuYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib25jbGlja1wiICYmIC8vIG9taXQgdi1tb2RlbCBoYW5kbGVyc1xuICAgICAgbmFtZSAhPT0gXCJvblVwZGF0ZTptb2RlbFZhbHVlXCIgJiYgLy8gb21pdCBvblZub2RlWFhYIGhvb2tzXG4gICAgICAhaXNSZXNlcnZlZFByb3AobmFtZSkpIHtcbiAgICAgICAgaGFzSHlkcmF0aW9uRXZlbnRCaW5kaW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0V2ZW50SGFuZGxlciAmJiBpc1Jlc2VydmVkUHJvcChuYW1lKSkge1xuICAgICAgICBoYXNWbm9kZUhvb2sgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzRXZlbnRIYW5kbGVyICYmIHZhbHVlLnR5cGUgPT09IDE0KSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlLnR5cGUgPT09IDIwIHx8ICh2YWx1ZS50eXBlID09PSA0IHx8IHZhbHVlLnR5cGUgPT09IDgpICYmIGdldENvbnN0YW50VHlwZSh2YWx1ZSwgY29udGV4dCkgPiAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lID09PSBcInJlZlwiKSB7XG4gICAgICAgIGhhc1JlZiA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUgPT09IFwiY2xhc3NcIikge1xuICAgICAgICBoYXNDbGFzc0JpbmRpbmcgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChuYW1lID09PSBcInN0eWxlXCIpIHtcbiAgICAgICAgaGFzU3R5bGVCaW5kaW5nID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSAhPT0gXCJrZXlcIiAmJiAhZHluYW1pY1Byb3BOYW1lcy5pbmNsdWRlcyhuYW1lKSkge1xuICAgICAgICBkeW5hbWljUHJvcE5hbWVzLnB1c2gobmFtZSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21wb25lbnQgJiYgKG5hbWUgPT09IFwiY2xhc3NcIiB8fCBuYW1lID09PSBcInN0eWxlXCIpICYmICFkeW5hbWljUHJvcE5hbWVzLmluY2x1ZGVzKG5hbWUpKSB7XG4gICAgICAgIGR5bmFtaWNQcm9wTmFtZXMucHVzaChuYW1lKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaGFzRHluYW1pY0tleXMgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByb3AgPSBwcm9wc1tpXTtcbiAgICBpZiAocHJvcC50eXBlID09PSA2KSB7XG4gICAgICBjb25zdCB7IGxvYywgbmFtZSwgbmFtZUxvYywgdmFsdWUgfSA9IHByb3A7XG4gICAgICBsZXQgaXNTdGF0aWMgPSB0cnVlO1xuICAgICAgaWYgKG5hbWUgPT09IFwicmVmXCIpIHtcbiAgICAgICAgaGFzUmVmID0gdHJ1ZTtcbiAgICAgICAgcHVzaFJlZlZGb3JNYXJrZXIoKTtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lID09PSBcImlzXCIgJiYgKGlzQ29tcG9uZW50VGFnKHRhZykgfHwgdmFsdWUgJiYgdmFsdWUuY29udGVudC5zdGFydHNXaXRoKFwidnVlOlwiKSB8fCBmYWxzZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBwcm9wZXJ0aWVzLnB1c2goXG4gICAgICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KFxuICAgICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24obmFtZSwgdHJ1ZSwgbmFtZUxvYyksXG4gICAgICAgICAgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihcbiAgICAgICAgICAgIHZhbHVlID8gdmFsdWUuY29udGVudCA6IFwiXCIsXG4gICAgICAgICAgICBpc1N0YXRpYyxcbiAgICAgICAgICAgIHZhbHVlID8gdmFsdWUubG9jIDogbG9jXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IG5hbWUsIGFyZywgZXhwLCBsb2MsIG1vZGlmaWVycyB9ID0gcHJvcDtcbiAgICAgIGNvbnN0IGlzVkJpbmQgPSBuYW1lID09PSBcImJpbmRcIjtcbiAgICAgIGNvbnN0IGlzVk9uID0gbmFtZSA9PT0gXCJvblwiO1xuICAgICAgaWYgKG5hbWUgPT09IFwic2xvdFwiKSB7XG4gICAgICAgIGlmICghaXNDb21wb25lbnQpIHtcbiAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgICAgICBjcmVhdGVDb21waWxlckVycm9yKDQwLCBsb2MpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lID09PSBcIm9uY2VcIiB8fCBuYW1lID09PSBcIm1lbW9cIikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lID09PSBcImlzXCIgfHwgaXNWQmluZCAmJiBpc1N0YXRpY0FyZ09mKGFyZywgXCJpc1wiKSAmJiAoaXNDb21wb25lbnRUYWcodGFnKSB8fCBmYWxzZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNWT24gJiYgc3NyKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAvLyAjOTM4OiBlbGVtZW50cyB3aXRoIGR5bmFtaWMga2V5cyBzaG91bGQgYmUgZm9yY2VkIGludG8gYmxvY2tzXG4gICAgICAgIGlzVkJpbmQgJiYgaXNTdGF0aWNBcmdPZihhcmcsIFwia2V5XCIpIHx8IC8vIGlubGluZSBiZWZvcmUtdXBkYXRlIGhvb2tzIG5lZWQgdG8gZm9yY2UgYmxvY2sgc28gdGhhdCBpdCBpcyBpbnZva2VkXG4gICAgICAgIC8vIGJlZm9yZSBjaGlsZHJlblxuICAgICAgICBpc1ZPbiAmJiBoYXNDaGlsZHJlbiAmJiBpc1N0YXRpY0FyZ09mKGFyZywgXCJ2dWU6YmVmb3JlLXVwZGF0ZVwiKVxuICAgICAgKSB7XG4gICAgICAgIHNob3VsZFVzZUJsb2NrID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZCaW5kICYmIGlzU3RhdGljQXJnT2YoYXJnLCBcInJlZlwiKSkge1xuICAgICAgICBwdXNoUmVmVkZvck1hcmtlcigpO1xuICAgICAgfVxuICAgICAgaWYgKCFhcmcgJiYgKGlzVkJpbmQgfHwgaXNWT24pKSB7XG4gICAgICAgIGhhc0R5bmFtaWNLZXlzID0gdHJ1ZTtcbiAgICAgICAgaWYgKGV4cCkge1xuICAgICAgICAgIGlmIChpc1ZCaW5kKSB7XG4gICAgICAgICAgICBwdXNoUmVmVkZvck1hcmtlcigpO1xuICAgICAgICAgICAgcHVzaE1lcmdlQXJnKCk7XG4gICAgICAgICAgICBtZXJnZUFyZ3MucHVzaChleHApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwdXNoTWVyZ2VBcmcoe1xuICAgICAgICAgICAgICB0eXBlOiAxNCxcbiAgICAgICAgICAgICAgbG9jLFxuICAgICAgICAgICAgICBjYWxsZWU6IGNvbnRleHQuaGVscGVyKFRPX0hBTkRMRVJTKSxcbiAgICAgICAgICAgICAgYXJndW1lbnRzOiBpc0NvbXBvbmVudCA/IFtleHBdIDogW2V4cCwgYHRydWVgXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoXG4gICAgICAgICAgICAgIGlzVkJpbmQgPyAzNCA6IDM1LFxuICAgICAgICAgICAgICBsb2NcbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzVkJpbmQgJiYgbW9kaWZpZXJzLnNvbWUoKG1vZCkgPT4gbW9kLmNvbnRlbnQgPT09IFwicHJvcFwiKSkge1xuICAgICAgICBwYXRjaEZsYWcgfD0gMzI7XG4gICAgICB9XG4gICAgICBjb25zdCBkaXJlY3RpdmVUcmFuc2Zvcm0gPSBjb250ZXh0LmRpcmVjdGl2ZVRyYW5zZm9ybXNbbmFtZV07XG4gICAgICBpZiAoZGlyZWN0aXZlVHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IHsgcHJvcHM6IHByb3BzMiwgbmVlZFJ1bnRpbWUgfSA9IGRpcmVjdGl2ZVRyYW5zZm9ybShwcm9wLCBub2RlLCBjb250ZXh0KTtcbiAgICAgICAgIXNzciAmJiBwcm9wczIuZm9yRWFjaChhbmFseXplUGF0Y2hGbGFnKTtcbiAgICAgICAgaWYgKGlzVk9uICYmIGFyZyAmJiAhaXNTdGF0aWNFeHAoYXJnKSkge1xuICAgICAgICAgIHB1c2hNZXJnZUFyZyhjcmVhdGVPYmplY3RFeHByZXNzaW9uKHByb3BzMiwgZWxlbWVudExvYykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3BlcnRpZXMucHVzaCguLi5wcm9wczIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZWVkUnVudGltZSkge1xuICAgICAgICAgIHJ1bnRpbWVEaXJlY3RpdmVzLnB1c2gocHJvcCk7XG4gICAgICAgICAgaWYgKGlzU3ltYm9sKG5lZWRSdW50aW1lKSkge1xuICAgICAgICAgICAgZGlyZWN0aXZlSW1wb3J0TWFwLnNldChwcm9wLCBuZWVkUnVudGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFpc0J1aWx0SW5EaXJlY3RpdmUobmFtZSkpIHtcbiAgICAgICAgcnVudGltZURpcmVjdGl2ZXMucHVzaChwcm9wKTtcbiAgICAgICAgaWYgKGhhc0NoaWxkcmVuKSB7XG4gICAgICAgICAgc2hvdWxkVXNlQmxvY2sgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxldCBwcm9wc0V4cHJlc3Npb24gPSB2b2lkIDA7XG4gIGlmIChtZXJnZUFyZ3MubGVuZ3RoKSB7XG4gICAgcHVzaE1lcmdlQXJnKCk7XG4gICAgaWYgKG1lcmdlQXJncy5sZW5ndGggPiAxKSB7XG4gICAgICBwcm9wc0V4cHJlc3Npb24gPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihcbiAgICAgICAgY29udGV4dC5oZWxwZXIoTUVSR0VfUFJPUFMpLFxuICAgICAgICBtZXJnZUFyZ3MsXG4gICAgICAgIGVsZW1lbnRMb2NcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzRXhwcmVzc2lvbiA9IG1lcmdlQXJnc1swXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICBwcm9wc0V4cHJlc3Npb24gPSBjcmVhdGVPYmplY3RFeHByZXNzaW9uKFxuICAgICAgZGVkdXBlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSxcbiAgICAgIGVsZW1lbnRMb2NcbiAgICApO1xuICB9XG4gIGlmIChoYXNEeW5hbWljS2V5cykge1xuICAgIHBhdGNoRmxhZyB8PSAxNjtcbiAgfSBlbHNlIHtcbiAgICBpZiAoaGFzQ2xhc3NCaW5kaW5nICYmICFpc0NvbXBvbmVudCkge1xuICAgICAgcGF0Y2hGbGFnIHw9IDI7XG4gICAgfVxuICAgIGlmIChoYXNTdHlsZUJpbmRpbmcgJiYgIWlzQ29tcG9uZW50KSB7XG4gICAgICBwYXRjaEZsYWcgfD0gNDtcbiAgICB9XG4gICAgaWYgKGR5bmFtaWNQcm9wTmFtZXMubGVuZ3RoKSB7XG4gICAgICBwYXRjaEZsYWcgfD0gODtcbiAgICB9XG4gICAgaWYgKGhhc0h5ZHJhdGlvbkV2ZW50QmluZGluZykge1xuICAgICAgcGF0Y2hGbGFnIHw9IDMyO1xuICAgIH1cbiAgfVxuICBpZiAoIXNob3VsZFVzZUJsb2NrICYmIChwYXRjaEZsYWcgPT09IDAgfHwgcGF0Y2hGbGFnID09PSAzMikgJiYgKGhhc1JlZiB8fCBoYXNWbm9kZUhvb2sgfHwgcnVudGltZURpcmVjdGl2ZXMubGVuZ3RoID4gMCkpIHtcbiAgICBwYXRjaEZsYWcgfD0gNTEyO1xuICB9XG4gIGlmICghY29udGV4dC5pblNTUiAmJiBwcm9wc0V4cHJlc3Npb24pIHtcbiAgICBzd2l0Y2ggKHByb3BzRXhwcmVzc2lvbi50eXBlKSB7XG4gICAgICBjYXNlIDE1OlxuICAgICAgICBsZXQgY2xhc3NLZXlJbmRleCA9IC0xO1xuICAgICAgICBsZXQgc3R5bGVLZXlJbmRleCA9IC0xO1xuICAgICAgICBsZXQgaGFzRHluYW1pY0tleSA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzRXhwcmVzc2lvbi5wcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gcHJvcHNFeHByZXNzaW9uLnByb3BlcnRpZXNbaV0ua2V5O1xuICAgICAgICAgIGlmIChpc1N0YXRpY0V4cChrZXkpKSB7XG4gICAgICAgICAgICBpZiAoa2V5LmNvbnRlbnQgPT09IFwiY2xhc3NcIikge1xuICAgICAgICAgICAgICBjbGFzc0tleUluZGV4ID0gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5LmNvbnRlbnQgPT09IFwic3R5bGVcIikge1xuICAgICAgICAgICAgICBzdHlsZUtleUluZGV4ID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCFrZXkuaXNIYW5kbGVyS2V5KSB7XG4gICAgICAgICAgICBoYXNEeW5hbWljS2V5ID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2xhc3NQcm9wID0gcHJvcHNFeHByZXNzaW9uLnByb3BlcnRpZXNbY2xhc3NLZXlJbmRleF07XG4gICAgICAgIGNvbnN0IHN0eWxlUHJvcCA9IHByb3BzRXhwcmVzc2lvbi5wcm9wZXJ0aWVzW3N0eWxlS2V5SW5kZXhdO1xuICAgICAgICBpZiAoIWhhc0R5bmFtaWNLZXkpIHtcbiAgICAgICAgICBpZiAoY2xhc3NQcm9wICYmICFpc1N0YXRpY0V4cChjbGFzc1Byb3AudmFsdWUpKSB7XG4gICAgICAgICAgICBjbGFzc1Byb3AudmFsdWUgPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihcbiAgICAgICAgICAgICAgY29udGV4dC5oZWxwZXIoTk9STUFMSVpFX0NMQVNTKSxcbiAgICAgICAgICAgICAgW2NsYXNzUHJvcC52YWx1ZV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdHlsZVByb3AgJiYgLy8gdGhlIHN0YXRpYyBzdHlsZSBpcyBjb21waWxlZCBpbnRvIGFuIG9iamVjdCxcbiAgICAgICAgICAvLyBzbyB1c2UgYGhhc1N0eWxlQmluZGluZ2AgdG8gZW5zdXJlIHRoYXQgaXQgaXMgYSBkeW5hbWljIHN0eWxlIGJpbmRpbmdcbiAgICAgICAgICAoaGFzU3R5bGVCaW5kaW5nIHx8IHN0eWxlUHJvcC52YWx1ZS50eXBlID09PSA0ICYmIHN0eWxlUHJvcC52YWx1ZS5jb250ZW50LnRyaW0oKVswXSA9PT0gYFtgIHx8IC8vIHYtYmluZDpzdHlsZSBhbmQgc3R5bGUgYm90aCBleGlzdCxcbiAgICAgICAgICAvLyB2LWJpbmQ6c3R5bGUgd2l0aCBzdGF0aWMgbGl0ZXJhbCBvYmplY3RcbiAgICAgICAgICBzdHlsZVByb3AudmFsdWUudHlwZSA9PT0gMTcpKSB7XG4gICAgICAgICAgICBzdHlsZVByb3AudmFsdWUgPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihcbiAgICAgICAgICAgICAgY29udGV4dC5oZWxwZXIoTk9STUFMSVpFX1NUWUxFKSxcbiAgICAgICAgICAgICAgW3N0eWxlUHJvcC52YWx1ZV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3BzRXhwcmVzc2lvbiA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKFxuICAgICAgICAgICAgY29udGV4dC5oZWxwZXIoTk9STUFMSVpFX1BST1BTKSxcbiAgICAgICAgICAgIFtwcm9wc0V4cHJlc3Npb25dXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTQ6XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcHJvcHNFeHByZXNzaW9uID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oXG4gICAgICAgICAgY29udGV4dC5oZWxwZXIoTk9STUFMSVpFX1BST1BTKSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBjcmVhdGVDYWxsRXhwcmVzc2lvbihjb250ZXh0LmhlbHBlcihHVUFSRF9SRUFDVElWRV9QUk9QUyksIFtcbiAgICAgICAgICAgICAgcHJvcHNFeHByZXNzaW9uXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgcHJvcHM6IHByb3BzRXhwcmVzc2lvbixcbiAgICBkaXJlY3RpdmVzOiBydW50aW1lRGlyZWN0aXZlcyxcbiAgICBwYXRjaEZsYWcsXG4gICAgZHluYW1pY1Byb3BOYW1lcyxcbiAgICBzaG91bGRVc2VCbG9ja1xuICB9O1xufVxuZnVuY3Rpb24gZGVkdXBlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSB7XG4gIGNvbnN0IGtub3duUHJvcHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCBkZWR1cGVkID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHByb3AgPSBwcm9wZXJ0aWVzW2ldO1xuICAgIGlmIChwcm9wLmtleS50eXBlID09PSA4IHx8ICFwcm9wLmtleS5pc1N0YXRpYykge1xuICAgICAgZGVkdXBlZC5wdXNoKHByb3ApO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IG5hbWUgPSBwcm9wLmtleS5jb250ZW50O1xuICAgIGNvbnN0IGV4aXN0aW5nID0ga25vd25Qcm9wcy5nZXQobmFtZSk7XG4gICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICBpZiAobmFtZSA9PT0gXCJzdHlsZVwiIHx8IG5hbWUgPT09IFwiY2xhc3NcIiB8fCBpc09uKG5hbWUpKSB7XG4gICAgICAgIG1lcmdlQXNBcnJheShleGlzdGluZywgcHJvcCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtub3duUHJvcHMuc2V0KG5hbWUsIHByb3ApO1xuICAgICAgZGVkdXBlZC5wdXNoKHByb3ApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVkdXBlZDtcbn1cbmZ1bmN0aW9uIG1lcmdlQXNBcnJheShleGlzdGluZywgaW5jb21pbmcpIHtcbiAgaWYgKGV4aXN0aW5nLnZhbHVlLnR5cGUgPT09IDE3KSB7XG4gICAgZXhpc3RpbmcudmFsdWUuZWxlbWVudHMucHVzaChpbmNvbWluZy52YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZXhpc3RpbmcudmFsdWUgPSBjcmVhdGVBcnJheUV4cHJlc3Npb24oXG4gICAgICBbZXhpc3RpbmcudmFsdWUsIGluY29taW5nLnZhbHVlXSxcbiAgICAgIGV4aXN0aW5nLmxvY1xuICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIGJ1aWxkRGlyZWN0aXZlQXJncyhkaXIsIGNvbnRleHQpIHtcbiAgY29uc3QgZGlyQXJncyA9IFtdO1xuICBjb25zdCBydW50aW1lID0gZGlyZWN0aXZlSW1wb3J0TWFwLmdldChkaXIpO1xuICBpZiAocnVudGltZSkge1xuICAgIGRpckFyZ3MucHVzaChjb250ZXh0LmhlbHBlclN0cmluZyhydW50aW1lKSk7XG4gIH0gZWxzZSB7XG4gICAge1xuICAgICAgY29udGV4dC5oZWxwZXIoUkVTT0xWRV9ESVJFQ1RJVkUpO1xuICAgICAgY29udGV4dC5kaXJlY3RpdmVzLmFkZChkaXIubmFtZSk7XG4gICAgICBkaXJBcmdzLnB1c2godG9WYWxpZEFzc2V0SWQoZGlyLm5hbWUsIGBkaXJlY3RpdmVgKSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHsgbG9jIH0gPSBkaXI7XG4gIGlmIChkaXIuZXhwKSBkaXJBcmdzLnB1c2goZGlyLmV4cCk7XG4gIGlmIChkaXIuYXJnKSB7XG4gICAgaWYgKCFkaXIuZXhwKSB7XG4gICAgICBkaXJBcmdzLnB1c2goYHZvaWQgMGApO1xuICAgIH1cbiAgICBkaXJBcmdzLnB1c2goZGlyLmFyZyk7XG4gIH1cbiAgaWYgKE9iamVjdC5rZXlzKGRpci5tb2RpZmllcnMpLmxlbmd0aCkge1xuICAgIGlmICghZGlyLmFyZykge1xuICAgICAgaWYgKCFkaXIuZXhwKSB7XG4gICAgICAgIGRpckFyZ3MucHVzaChgdm9pZCAwYCk7XG4gICAgICB9XG4gICAgICBkaXJBcmdzLnB1c2goYHZvaWQgMGApO1xuICAgIH1cbiAgICBjb25zdCB0cnVlRXhwcmVzc2lvbiA9IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYHRydWVgLCBmYWxzZSwgbG9jKTtcbiAgICBkaXJBcmdzLnB1c2goXG4gICAgICBjcmVhdGVPYmplY3RFeHByZXNzaW9uKFxuICAgICAgICBkaXIubW9kaWZpZXJzLm1hcChcbiAgICAgICAgICAobW9kaWZpZXIpID0+IGNyZWF0ZU9iamVjdFByb3BlcnR5KG1vZGlmaWVyLCB0cnVlRXhwcmVzc2lvbilcbiAgICAgICAgKSxcbiAgICAgICAgbG9jXG4gICAgICApXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQXJyYXlFeHByZXNzaW9uKGRpckFyZ3MsIGRpci5sb2MpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5RHluYW1pY1Byb3BOYW1lcyhwcm9wcykge1xuICBsZXQgcHJvcHNOYW1lc1N0cmluZyA9IGBbYDtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBwcm9wcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBwcm9wc05hbWVzU3RyaW5nICs9IEpTT04uc3RyaW5naWZ5KHByb3BzW2ldKTtcbiAgICBpZiAoaSA8IGwgLSAxKSBwcm9wc05hbWVzU3RyaW5nICs9IFwiLCBcIjtcbiAgfVxuICByZXR1cm4gcHJvcHNOYW1lc1N0cmluZyArIGBdYDtcbn1cbmZ1bmN0aW9uIGlzQ29tcG9uZW50VGFnKHRhZykge1xuICByZXR1cm4gdGFnID09PSBcImNvbXBvbmVudFwiIHx8IHRhZyA9PT0gXCJDb21wb25lbnRcIjtcbn1cblxuY29uc3QgdHJhbnNmb3JtU2xvdE91dGxldCA9IChub2RlLCBjb250ZXh0KSA9PiB7XG4gIGlmIChpc1Nsb3RPdXRsZXQobm9kZSkpIHtcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBsb2MgfSA9IG5vZGU7XG4gICAgY29uc3QgeyBzbG90TmFtZSwgc2xvdFByb3BzIH0gPSBwcm9jZXNzU2xvdE91dGxldChub2RlLCBjb250ZXh0KTtcbiAgICBjb25zdCBzbG90QXJncyA9IFtcbiAgICAgIGNvbnRleHQucHJlZml4SWRlbnRpZmllcnMgPyBgX2N0eC4kc2xvdHNgIDogYCRzbG90c2AsXG4gICAgICBzbG90TmFtZSxcbiAgICAgIFwie31cIixcbiAgICAgIFwidW5kZWZpbmVkXCIsXG4gICAgICBcInRydWVcIlxuICAgIF07XG4gICAgbGV0IGV4cGVjdGVkTGVuID0gMjtcbiAgICBpZiAoc2xvdFByb3BzKSB7XG4gICAgICBzbG90QXJnc1syXSA9IHNsb3RQcm9wcztcbiAgICAgIGV4cGVjdGVkTGVuID0gMztcbiAgICB9XG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgc2xvdEFyZ3NbM10gPSBjcmVhdGVGdW5jdGlvbkV4cHJlc3Npb24oW10sIGNoaWxkcmVuLCBmYWxzZSwgZmFsc2UsIGxvYyk7XG4gICAgICBleHBlY3RlZExlbiA9IDQ7XG4gICAgfVxuICAgIGlmIChjb250ZXh0LnNjb3BlSWQgJiYgIWNvbnRleHQuc2xvdHRlZCkge1xuICAgICAgZXhwZWN0ZWRMZW4gPSA1O1xuICAgIH1cbiAgICBzbG90QXJncy5zcGxpY2UoZXhwZWN0ZWRMZW4pO1xuICAgIG5vZGUuY29kZWdlbk5vZGUgPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihcbiAgICAgIGNvbnRleHQuaGVscGVyKFJFTkRFUl9TTE9UKSxcbiAgICAgIHNsb3RBcmdzLFxuICAgICAgbG9jXG4gICAgKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHByb2Nlc3NTbG90T3V0bGV0KG5vZGUsIGNvbnRleHQpIHtcbiAgbGV0IHNsb3ROYW1lID0gYFwiZGVmYXVsdFwiYDtcbiAgbGV0IHNsb3RQcm9wcyA9IHZvaWQgMDtcbiAgY29uc3Qgbm9uTmFtZVByb3BzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5wcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHAgPSBub2RlLnByb3BzW2ldO1xuICAgIGlmIChwLnR5cGUgPT09IDYpIHtcbiAgICAgIGlmIChwLnZhbHVlKSB7XG4gICAgICAgIGlmIChwLm5hbWUgPT09IFwibmFtZVwiKSB7XG4gICAgICAgICAgc2xvdE5hbWUgPSBKU09OLnN0cmluZ2lmeShwLnZhbHVlLmNvbnRlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHAubmFtZSA9IGNhbWVsaXplKHAubmFtZSk7XG4gICAgICAgICAgbm9uTmFtZVByb3BzLnB1c2gocCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHAubmFtZSA9PT0gXCJiaW5kXCIgJiYgaXNTdGF0aWNBcmdPZihwLmFyZywgXCJuYW1lXCIpKSB7XG4gICAgICAgIGlmIChwLmV4cCkge1xuICAgICAgICAgIHNsb3ROYW1lID0gcC5leHA7XG4gICAgICAgIH0gZWxzZSBpZiAocC5hcmcgJiYgcC5hcmcudHlwZSA9PT0gNCkge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSBjYW1lbGl6ZShwLmFyZy5jb250ZW50KTtcbiAgICAgICAgICBzbG90TmFtZSA9IHAuZXhwID0gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihuYW1lLCBmYWxzZSwgcC5hcmcubG9jKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHAubmFtZSA9PT0gXCJiaW5kXCIgJiYgcC5hcmcgJiYgaXNTdGF0aWNFeHAocC5hcmcpKSB7XG4gICAgICAgICAgcC5hcmcuY29udGVudCA9IGNhbWVsaXplKHAuYXJnLmNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIG5vbk5hbWVQcm9wcy5wdXNoKHApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAobm9uTmFtZVByb3BzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCB7IHByb3BzLCBkaXJlY3RpdmVzIH0gPSBidWlsZFByb3BzKFxuICAgICAgbm9kZSxcbiAgICAgIGNvbnRleHQsXG4gICAgICBub25OYW1lUHJvcHMsXG4gICAgICBmYWxzZSxcbiAgICAgIGZhbHNlXG4gICAgKTtcbiAgICBzbG90UHJvcHMgPSBwcm9wcztcbiAgICBpZiAoZGlyZWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcihcbiAgICAgICAgICAzNixcbiAgICAgICAgICBkaXJlY3RpdmVzWzBdLmxvY1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHNsb3ROYW1lLFxuICAgIHNsb3RQcm9wc1xuICB9O1xufVxuXG5jb25zdCB0cmFuc2Zvcm1PbiQxID0gKGRpciwgbm9kZSwgY29udGV4dCwgYXVnbWVudG9yKSA9PiB7XG4gIGNvbnN0IHsgbG9jLCBtb2RpZmllcnMsIGFyZyB9ID0gZGlyO1xuICBpZiAoIWRpci5leHAgJiYgIW1vZGlmaWVycy5sZW5ndGgpIHtcbiAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcigzNSwgbG9jKSk7XG4gIH1cbiAgbGV0IGV2ZW50TmFtZTtcbiAgaWYgKGFyZy50eXBlID09PSA0KSB7XG4gICAgaWYgKGFyZy5pc1N0YXRpYykge1xuICAgICAgbGV0IHJhd05hbWUgPSBhcmcuY29udGVudDtcbiAgICAgIGlmIChyYXdOYW1lLnN0YXJ0c1dpdGgoXCJ2bm9kZVwiKSkge1xuICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcig1MSwgYXJnLmxvYykpO1xuICAgICAgfVxuICAgICAgaWYgKHJhd05hbWUuc3RhcnRzV2l0aChcInZ1ZTpcIikpIHtcbiAgICAgICAgcmF3TmFtZSA9IGB2bm9kZS0ke3Jhd05hbWUuc2xpY2UoNCl9YDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGV2ZW50U3RyaW5nID0gbm9kZS50YWdUeXBlICE9PSAwIHx8IHJhd05hbWUuc3RhcnRzV2l0aChcInZub2RlXCIpIHx8ICEvW0EtWl0vLnRlc3QocmF3TmFtZSkgPyAoXG4gICAgICAgIC8vIGZvciBub24tZWxlbWVudCBhbmQgdm5vZGUgbGlmZWN5Y2xlIGV2ZW50IGxpc3RlbmVycywgYXV0byBjb252ZXJ0XG4gICAgICAgIC8vIGl0IHRvIGNhbWVsQ2FzZS4gU2VlIGlzc3VlICMyMjQ5XG4gICAgICAgIHRvSGFuZGxlcktleShjYW1lbGl6ZShyYXdOYW1lKSlcbiAgICAgICkgOiAoXG4gICAgICAgIC8vIHByZXNlcnZlIGNhc2UgZm9yIHBsYWluIGVsZW1lbnQgbGlzdGVuZXJzIHRoYXQgaGF2ZSB1cHBlcmNhc2VcbiAgICAgICAgLy8gbGV0dGVycywgYXMgdGhlc2UgbWF5IGJlIGN1c3RvbSBlbGVtZW50cycgY3VzdG9tIGV2ZW50c1xuICAgICAgICBgb246JHtyYXdOYW1lfWBcbiAgICAgICk7XG4gICAgICBldmVudE5hbWUgPSBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGV2ZW50U3RyaW5nLCB0cnVlLCBhcmcubG9jKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnROYW1lID0gY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uKFtcbiAgICAgICAgYCR7Y29udGV4dC5oZWxwZXJTdHJpbmcoVE9fSEFORExFUl9LRVkpfShgLFxuICAgICAgICBhcmcsXG4gICAgICAgIGApYFxuICAgICAgXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGV2ZW50TmFtZSA9IGFyZztcbiAgICBldmVudE5hbWUuY2hpbGRyZW4udW5zaGlmdChgJHtjb250ZXh0LmhlbHBlclN0cmluZyhUT19IQU5ETEVSX0tFWSl9KGApO1xuICAgIGV2ZW50TmFtZS5jaGlsZHJlbi5wdXNoKGApYCk7XG4gIH1cbiAgbGV0IGV4cCA9IGRpci5leHA7XG4gIGlmIChleHAgJiYgIWV4cC5jb250ZW50LnRyaW0oKSkge1xuICAgIGV4cCA9IHZvaWQgMDtcbiAgfVxuICBsZXQgc2hvdWxkQ2FjaGUgPSBjb250ZXh0LmNhY2hlSGFuZGxlcnMgJiYgIWV4cCAmJiAhY29udGV4dC5pblZPbmNlO1xuICBpZiAoZXhwKSB7XG4gICAgY29uc3QgaXNNZW1iZXJFeHAgPSBpc01lbWJlckV4cHJlc3Npb24oZXhwKTtcbiAgICBjb25zdCBpc0lubGluZVN0YXRlbWVudCA9ICEoaXNNZW1iZXJFeHAgfHwgaXNGbkV4cHJlc3Npb24oZXhwKSk7XG4gICAgY29uc3QgaGFzTXVsdGlwbGVTdGF0ZW1lbnRzID0gZXhwLmNvbnRlbnQuaW5jbHVkZXMoYDtgKTtcbiAgICB7XG4gICAgICB2YWxpZGF0ZUJyb3dzZXJFeHByZXNzaW9uKFxuICAgICAgICBleHAsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBoYXNNdWx0aXBsZVN0YXRlbWVudHNcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChpc0lubGluZVN0YXRlbWVudCB8fCBzaG91bGRDYWNoZSAmJiBpc01lbWJlckV4cCkge1xuICAgICAgZXhwID0gY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uKFtcbiAgICAgICAgYCR7aXNJbmxpbmVTdGF0ZW1lbnQgPyBgJGV2ZW50YCA6IGAke2BgfSguLi5hcmdzKWB9ID0+ICR7aGFzTXVsdGlwbGVTdGF0ZW1lbnRzID8gYHtgIDogYChgfWAsXG4gICAgICAgIGV4cCxcbiAgICAgICAgaGFzTXVsdGlwbGVTdGF0ZW1lbnRzID8gYH1gIDogYClgXG4gICAgICBdKTtcbiAgICB9XG4gIH1cbiAgbGV0IHJldCA9IHtcbiAgICBwcm9wczogW1xuICAgICAgY3JlYXRlT2JqZWN0UHJvcGVydHkoXG4gICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgZXhwIHx8IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYCgpID0+IHt9YCwgZmFsc2UsIGxvYylcbiAgICAgIClcbiAgICBdXG4gIH07XG4gIGlmIChhdWdtZW50b3IpIHtcbiAgICByZXQgPSBhdWdtZW50b3IocmV0KTtcbiAgfVxuICBpZiAoc2hvdWxkQ2FjaGUpIHtcbiAgICByZXQucHJvcHNbMF0udmFsdWUgPSBjb250ZXh0LmNhY2hlKHJldC5wcm9wc1swXS52YWx1ZSk7XG4gIH1cbiAgcmV0LnByb3BzLmZvckVhY2goKHApID0+IHAua2V5LmlzSGFuZGxlcktleSA9IHRydWUpO1xuICByZXR1cm4gcmV0O1xufTtcblxuY29uc3QgdHJhbnNmb3JtVGV4dCA9IChub2RlLCBjb250ZXh0KSA9PiB7XG4gIGlmIChub2RlLnR5cGUgPT09IDAgfHwgbm9kZS50eXBlID09PSAxIHx8IG5vZGUudHlwZSA9PT0gMTEgfHwgbm9kZS50eXBlID09PSAxMCkge1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICBsZXQgY3VycmVudENvbnRhaW5lciA9IHZvaWQgMDtcbiAgICAgIGxldCBoYXNUZXh0ID0gZmFsc2U7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIGlmIChpc1RleHQkMShjaGlsZCkpIHtcbiAgICAgICAgICBoYXNUZXh0ID0gdHJ1ZTtcbiAgICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBjaGlsZHJlbi5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IGNoaWxkcmVuW2pdO1xuICAgICAgICAgICAgaWYgKGlzVGV4dCQxKG5leHQpKSB7XG4gICAgICAgICAgICAgIGlmICghY3VycmVudENvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRDb250YWluZXIgPSBjaGlsZHJlbltpXSA9IGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihcbiAgICAgICAgICAgICAgICAgIFtjaGlsZF0sXG4gICAgICAgICAgICAgICAgICBjaGlsZC5sb2NcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGN1cnJlbnRDb250YWluZXIuY2hpbGRyZW4ucHVzaChgICsgYCwgbmV4dCk7XG4gICAgICAgICAgICAgIGNoaWxkcmVuLnNwbGljZShqLCAxKTtcbiAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3VycmVudENvbnRhaW5lciA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWhhc1RleHQgfHwgLy8gaWYgdGhpcyBpcyBhIHBsYWluIGVsZW1lbnQgd2l0aCBhIHNpbmdsZSB0ZXh0IGNoaWxkLCBsZWF2ZSBpdFxuICAgICAgLy8gYXMtaXMgc2luY2UgdGhlIHJ1bnRpbWUgaGFzIGRlZGljYXRlZCBmYXN0IHBhdGggZm9yIHRoaXMgYnkgZGlyZWN0bHlcbiAgICAgIC8vIHNldHRpbmcgdGV4dENvbnRlbnQgb2YgdGhlIGVsZW1lbnQuXG4gICAgICAvLyBmb3IgY29tcG9uZW50IHJvb3QgaXQncyBhbHdheXMgbm9ybWFsaXplZCBhbnl3YXkuXG4gICAgICBjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgKG5vZGUudHlwZSA9PT0gMCB8fCBub2RlLnR5cGUgPT09IDEgJiYgbm9kZS50YWdUeXBlID09PSAwICYmIC8vICMzNzU2XG4gICAgICAvLyBjdXN0b20gZGlyZWN0aXZlcyBjYW4gcG90ZW50aWFsbHkgYWRkIERPTSBlbGVtZW50cyBhcmJpdHJhcmlseSxcbiAgICAgIC8vIHdlIG5lZWQgdG8gYXZvaWQgc2V0dGluZyB0ZXh0Q29udGVudCBvZiB0aGUgZWxlbWVudCBhdCBydW50aW1lXG4gICAgICAvLyB0byBhdm9pZCBhY2NpZGVudGFsbHkgb3ZlcndyaXRpbmcgdGhlIERPTSBlbGVtZW50cyBhZGRlZFxuICAgICAgLy8gYnkgdGhlIHVzZXIgdGhyb3VnaCBjdXN0b20gZGlyZWN0aXZlcy5cbiAgICAgICFub2RlLnByb3BzLmZpbmQoXG4gICAgICAgIChwKSA9PiBwLnR5cGUgPT09IDcgJiYgIWNvbnRleHQuZGlyZWN0aXZlVHJhbnNmb3Jtc1twLm5hbWVdXG4gICAgICApICYmIC8vIGluIGNvbXBhdCBtb2RlLCA8dGVtcGxhdGU+IHRhZ3Mgd2l0aCBubyBzcGVjaWFsIGRpcmVjdGl2ZXNcbiAgICAgIC8vIHdpbGwgYmUgcmVuZGVyZWQgYXMgYSBmcmFnbWVudCBzbyBpdHMgY2hpbGRyZW4gbXVzdCBiZVxuICAgICAgLy8gY29udmVydGVkIGludG8gdm5vZGVzLlxuICAgICAgdHJ1ZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICBpZiAoaXNUZXh0JDEoY2hpbGQpIHx8IGNoaWxkLnR5cGUgPT09IDgpIHtcbiAgICAgICAgICBjb25zdCBjYWxsQXJncyA9IFtdO1xuICAgICAgICAgIGlmIChjaGlsZC50eXBlICE9PSAyIHx8IGNoaWxkLmNvbnRlbnQgIT09IFwiIFwiKSB7XG4gICAgICAgICAgICBjYWxsQXJncy5wdXNoKGNoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFjb250ZXh0LnNzciAmJiBnZXRDb25zdGFudFR5cGUoY2hpbGQsIGNvbnRleHQpID09PSAwKSB7XG4gICAgICAgICAgICBjYWxsQXJncy5wdXNoKFxuICAgICAgICAgICAgICAxICsgKGAgLyogJHtQYXRjaEZsYWdOYW1lc1sxXX0gKi9gIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkcmVuW2ldID0ge1xuICAgICAgICAgICAgdHlwZTogMTIsXG4gICAgICAgICAgICBjb250ZW50OiBjaGlsZCxcbiAgICAgICAgICAgIGxvYzogY2hpbGQubG9jLFxuICAgICAgICAgICAgY29kZWdlbk5vZGU6IGNyZWF0ZUNhbGxFeHByZXNzaW9uKFxuICAgICAgICAgICAgICBjb250ZXh0LmhlbHBlcihDUkVBVEVfVEVYVCksXG4gICAgICAgICAgICAgIGNhbGxBcmdzXG4gICAgICAgICAgICApXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbmNvbnN0IHNlZW4kMSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpO1xuY29uc3QgdHJhbnNmb3JtT25jZSA9IChub2RlLCBjb250ZXh0KSA9PiB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEgJiYgZmluZERpcihub2RlLCBcIm9uY2VcIiwgdHJ1ZSkpIHtcbiAgICBpZiAoc2VlbiQxLmhhcyhub2RlKSB8fCBjb250ZXh0LmluVk9uY2UgfHwgY29udGV4dC5pblNTUikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZWVuJDEuYWRkKG5vZGUpO1xuICAgIGNvbnRleHQuaW5WT25jZSA9IHRydWU7XG4gICAgY29udGV4dC5oZWxwZXIoU0VUX0JMT0NLX1RSQUNLSU5HKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29udGV4dC5pblZPbmNlID0gZmFsc2U7XG4gICAgICBjb25zdCBjdXIgPSBjb250ZXh0LmN1cnJlbnROb2RlO1xuICAgICAgaWYgKGN1ci5jb2RlZ2VuTm9kZSkge1xuICAgICAgICBjdXIuY29kZWdlbk5vZGUgPSBjb250ZXh0LmNhY2hlKFxuICAgICAgICAgIGN1ci5jb2RlZ2VuTm9kZSxcbiAgICAgICAgICB0cnVlLFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5jb25zdCB0cmFuc2Zvcm1Nb2RlbCQxID0gKGRpciwgbm9kZSwgY29udGV4dCkgPT4ge1xuICBjb25zdCB7IGV4cCwgYXJnIH0gPSBkaXI7XG4gIGlmICghZXhwKSB7XG4gICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcig0MSwgZGlyLmxvYylcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVUcmFuc2Zvcm1Qcm9wcygpO1xuICB9XG4gIGNvbnN0IHJhd0V4cCA9IGV4cC5sb2Muc291cmNlLnRyaW0oKTtcbiAgY29uc3QgZXhwU3RyaW5nID0gZXhwLnR5cGUgPT09IDQgPyBleHAuY29udGVudCA6IHJhd0V4cDtcbiAgY29uc3QgYmluZGluZ1R5cGUgPSBjb250ZXh0LmJpbmRpbmdNZXRhZGF0YVtyYXdFeHBdO1xuICBpZiAoYmluZGluZ1R5cGUgPT09IFwicHJvcHNcIiB8fCBiaW5kaW5nVHlwZSA9PT0gXCJwcm9wcy1hbGlhc2VkXCIpIHtcbiAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcig0NCwgZXhwLmxvYykpO1xuICAgIHJldHVybiBjcmVhdGVUcmFuc2Zvcm1Qcm9wcygpO1xuICB9XG4gIGNvbnN0IG1heWJlUmVmID0gZmFsc2U7XG4gIGlmICghZXhwU3RyaW5nLnRyaW0oKSB8fCAhaXNNZW1iZXJFeHByZXNzaW9uKGV4cCkgJiYgIW1heWJlUmVmKSB7XG4gICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcig0MiwgZXhwLmxvYylcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVUcmFuc2Zvcm1Qcm9wcygpO1xuICB9XG4gIGNvbnN0IHByb3BOYW1lID0gYXJnID8gYXJnIDogY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihcIm1vZGVsVmFsdWVcIiwgdHJ1ZSk7XG4gIGNvbnN0IGV2ZW50TmFtZSA9IGFyZyA/IGlzU3RhdGljRXhwKGFyZykgPyBgb25VcGRhdGU6JHtjYW1lbGl6ZShhcmcuY29udGVudCl9YCA6IGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbJ1wib25VcGRhdGU6XCIgKyAnLCBhcmddKSA6IGBvblVwZGF0ZTptb2RlbFZhbHVlYDtcbiAgbGV0IGFzc2lnbm1lbnRFeHA7XG4gIGNvbnN0IGV2ZW50QXJnID0gY29udGV4dC5pc1RTID8gYCgkZXZlbnQ6IGFueSlgIDogYCRldmVudGA7XG4gIHtcbiAgICBhc3NpZ25tZW50RXhwID0gY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uKFtcbiAgICAgIGAke2V2ZW50QXJnfSA9PiAoKGAsXG4gICAgICBleHAsXG4gICAgICBgKSA9ICRldmVudClgXG4gICAgXSk7XG4gIH1cbiAgY29uc3QgcHJvcHMgPSBbXG4gICAgLy8gbW9kZWxWYWx1ZTogZm9vXG4gICAgY3JlYXRlT2JqZWN0UHJvcGVydHkocHJvcE5hbWUsIGRpci5leHApLFxuICAgIC8vIFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiOiAkZXZlbnQgPT4gKGZvbyA9ICRldmVudClcbiAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShldmVudE5hbWUsIGFzc2lnbm1lbnRFeHApXG4gIF07XG4gIGlmIChkaXIubW9kaWZpZXJzLmxlbmd0aCAmJiBub2RlLnRhZ1R5cGUgPT09IDEpIHtcbiAgICBjb25zdCBtb2RpZmllcnMgPSBkaXIubW9kaWZpZXJzLm1hcCgobSkgPT4gbS5jb250ZW50KS5tYXAoKG0pID0+IChpc1NpbXBsZUlkZW50aWZpZXIobSkgPyBtIDogSlNPTi5zdHJpbmdpZnkobSkpICsgYDogdHJ1ZWApLmpvaW4oYCwgYCk7XG4gICAgY29uc3QgbW9kaWZpZXJzS2V5ID0gYXJnID8gaXNTdGF0aWNFeHAoYXJnKSA/IGAke2FyZy5jb250ZW50fU1vZGlmaWVyc2AgOiBjcmVhdGVDb21wb3VuZEV4cHJlc3Npb24oW2FyZywgJyArIFwiTW9kaWZpZXJzXCInXSkgOiBgbW9kZWxNb2RpZmllcnNgO1xuICAgIHByb3BzLnB1c2goXG4gICAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShcbiAgICAgICAgbW9kaWZpZXJzS2V5LFxuICAgICAgICBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKFxuICAgICAgICAgIGB7ICR7bW9kaWZpZXJzfSB9YCxcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBkaXIubG9jLFxuICAgICAgICAgIDJcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZVRyYW5zZm9ybVByb3BzKHByb3BzKTtcbn07XG5mdW5jdGlvbiBjcmVhdGVUcmFuc2Zvcm1Qcm9wcyhwcm9wcyA9IFtdKSB7XG4gIHJldHVybiB7IHByb3BzIH07XG59XG5cbmNvbnN0IHNlZW4gPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbmNvbnN0IHRyYW5zZm9ybU1lbW8gPSAobm9kZSwgY29udGV4dCkgPT4ge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgY29uc3QgZGlyID0gZmluZERpcihub2RlLCBcIm1lbW9cIik7XG4gICAgaWYgKCFkaXIgfHwgc2Vlbi5oYXMobm9kZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2Vlbi5hZGQobm9kZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnN0IGNvZGVnZW5Ob2RlID0gbm9kZS5jb2RlZ2VuTm9kZSB8fCBjb250ZXh0LmN1cnJlbnROb2RlLmNvZGVnZW5Ob2RlO1xuICAgICAgaWYgKGNvZGVnZW5Ob2RlICYmIGNvZGVnZW5Ob2RlLnR5cGUgPT09IDEzKSB7XG4gICAgICAgIGlmIChub2RlLnRhZ1R5cGUgIT09IDEpIHtcbiAgICAgICAgICBjb252ZXJ0VG9CbG9jayhjb2RlZ2VuTm9kZSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5jb2RlZ2VuTm9kZSA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKFdJVEhfTUVNTyksIFtcbiAgICAgICAgICBkaXIuZXhwLFxuICAgICAgICAgIGNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbih2b2lkIDAsIGNvZGVnZW5Ob2RlKSxcbiAgICAgICAgICBgX2NhY2hlYCxcbiAgICAgICAgICBTdHJpbmcoY29udGV4dC5jYWNoZWQubGVuZ3RoKVxuICAgICAgICBdKTtcbiAgICAgICAgY29udGV4dC5jYWNoZWQucHVzaChudWxsKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRCYXNlVHJhbnNmb3JtUHJlc2V0KHByZWZpeElkZW50aWZpZXJzKSB7XG4gIHJldHVybiBbXG4gICAgW1xuICAgICAgdHJhbnNmb3JtT25jZSxcbiAgICAgIHRyYW5zZm9ybUlmLFxuICAgICAgdHJhbnNmb3JtTWVtbyxcbiAgICAgIHRyYW5zZm9ybUZvcixcbiAgICAgIC4uLltdLFxuICAgICAgLi4uW3RyYW5zZm9ybUV4cHJlc3Npb25dICxcbiAgICAgIHRyYW5zZm9ybVNsb3RPdXRsZXQsXG4gICAgICB0cmFuc2Zvcm1FbGVtZW50LFxuICAgICAgdHJhY2tTbG90U2NvcGVzLFxuICAgICAgdHJhbnNmb3JtVGV4dFxuICAgIF0sXG4gICAge1xuICAgICAgb246IHRyYW5zZm9ybU9uJDEsXG4gICAgICBiaW5kOiB0cmFuc2Zvcm1CaW5kLFxuICAgICAgbW9kZWw6IHRyYW5zZm9ybU1vZGVsJDFcbiAgICB9XG4gIF07XG59XG5mdW5jdGlvbiBiYXNlQ29tcGlsZShzb3VyY2UsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBvbkVycm9yID0gb3B0aW9ucy5vbkVycm9yIHx8IGRlZmF1bHRPbkVycm9yO1xuICBjb25zdCBpc01vZHVsZU1vZGUgPSBvcHRpb25zLm1vZGUgPT09IFwibW9kdWxlXCI7XG4gIHtcbiAgICBpZiAob3B0aW9ucy5wcmVmaXhJZGVudGlmaWVycyA9PT0gdHJ1ZSkge1xuICAgICAgb25FcnJvcihjcmVhdGVDb21waWxlckVycm9yKDQ3KSk7XG4gICAgfSBlbHNlIGlmIChpc01vZHVsZU1vZGUpIHtcbiAgICAgIG9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcig0OCkpO1xuICAgIH1cbiAgfVxuICBjb25zdCBwcmVmaXhJZGVudGlmaWVycyA9IGZhbHNlO1xuICBpZiAob3B0aW9ucy5jYWNoZUhhbmRsZXJzKSB7XG4gICAgb25FcnJvcihjcmVhdGVDb21waWxlckVycm9yKDQ5KSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuc2NvcGVJZCAmJiAhaXNNb2R1bGVNb2RlKSB7XG4gICAgb25FcnJvcihjcmVhdGVDb21waWxlckVycm9yKDUwKSk7XG4gIH1cbiAgY29uc3QgcmVzb2x2ZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zLCB7XG4gICAgcHJlZml4SWRlbnRpZmllcnNcbiAgfSk7XG4gIGNvbnN0IGFzdCA9IGlzU3RyaW5nKHNvdXJjZSkgPyBiYXNlUGFyc2Uoc291cmNlLCByZXNvbHZlZE9wdGlvbnMpIDogc291cmNlO1xuICBjb25zdCBbbm9kZVRyYW5zZm9ybXMsIGRpcmVjdGl2ZVRyYW5zZm9ybXNdID0gZ2V0QmFzZVRyYW5zZm9ybVByZXNldCgpO1xuICB0cmFuc2Zvcm0oXG4gICAgYXN0LFxuICAgIGV4dGVuZCh7fSwgcmVzb2x2ZWRPcHRpb25zLCB7XG4gICAgICBub2RlVHJhbnNmb3JtczogW1xuICAgICAgICAuLi5ub2RlVHJhbnNmb3JtcyxcbiAgICAgICAgLi4ub3B0aW9ucy5ub2RlVHJhbnNmb3JtcyB8fCBbXVxuICAgICAgICAvLyB1c2VyIHRyYW5zZm9ybXNcbiAgICAgIF0sXG4gICAgICBkaXJlY3RpdmVUcmFuc2Zvcm1zOiBleHRlbmQoXG4gICAgICAgIHt9LFxuICAgICAgICBkaXJlY3RpdmVUcmFuc2Zvcm1zLFxuICAgICAgICBvcHRpb25zLmRpcmVjdGl2ZVRyYW5zZm9ybXMgfHwge31cbiAgICAgICAgLy8gdXNlciB0cmFuc2Zvcm1zXG4gICAgICApXG4gICAgfSlcbiAgKTtcbiAgcmV0dXJuIGdlbmVyYXRlKGFzdCwgcmVzb2x2ZWRPcHRpb25zKTtcbn1cblxuY29uc3Qgbm9vcERpcmVjdGl2ZVRyYW5zZm9ybSA9ICgpID0+ICh7IHByb3BzOiBbXSB9KTtcblxuY29uc3QgVl9NT0RFTF9SQURJTyA9IFN5bWJvbChgdk1vZGVsUmFkaW9gICk7XG5jb25zdCBWX01PREVMX0NIRUNLQk9YID0gU3ltYm9sKFxuICBgdk1vZGVsQ2hlY2tib3hgIFxuKTtcbmNvbnN0IFZfTU9ERUxfVEVYVCA9IFN5bWJvbChgdk1vZGVsVGV4dGAgKTtcbmNvbnN0IFZfTU9ERUxfU0VMRUNUID0gU3ltYm9sKFxuICBgdk1vZGVsU2VsZWN0YCBcbik7XG5jb25zdCBWX01PREVMX0RZTkFNSUMgPSBTeW1ib2woXG4gIGB2TW9kZWxEeW5hbWljYCBcbik7XG5jb25zdCBWX09OX1dJVEhfTU9ESUZJRVJTID0gU3ltYm9sKFxuICBgdk9uTW9kaWZpZXJzR3VhcmRgIFxuKTtcbmNvbnN0IFZfT05fV0lUSF9LRVlTID0gU3ltYm9sKFxuICBgdk9uS2V5c0d1YXJkYCBcbik7XG5jb25zdCBWX1NIT1cgPSBTeW1ib2woYHZTaG93YCApO1xuY29uc3QgVFJBTlNJVElPTiA9IFN5bWJvbChgVHJhbnNpdGlvbmAgKTtcbmNvbnN0IFRSQU5TSVRJT05fR1JPVVAgPSBTeW1ib2woXG4gIGBUcmFuc2l0aW9uR3JvdXBgIFxuKTtcbnJlZ2lzdGVyUnVudGltZUhlbHBlcnMoe1xuICBbVl9NT0RFTF9SQURJT106IGB2TW9kZWxSYWRpb2AsXG4gIFtWX01PREVMX0NIRUNLQk9YXTogYHZNb2RlbENoZWNrYm94YCxcbiAgW1ZfTU9ERUxfVEVYVF06IGB2TW9kZWxUZXh0YCxcbiAgW1ZfTU9ERUxfU0VMRUNUXTogYHZNb2RlbFNlbGVjdGAsXG4gIFtWX01PREVMX0RZTkFNSUNdOiBgdk1vZGVsRHluYW1pY2AsXG4gIFtWX09OX1dJVEhfTU9ESUZJRVJTXTogYHdpdGhNb2RpZmllcnNgLFxuICBbVl9PTl9XSVRIX0tFWVNdOiBgd2l0aEtleXNgLFxuICBbVl9TSE9XXTogYHZTaG93YCxcbiAgW1RSQU5TSVRJT05dOiBgVHJhbnNpdGlvbmAsXG4gIFtUUkFOU0lUSU9OX0dST1VQXTogYFRyYW5zaXRpb25Hcm91cGBcbn0pO1xuXG5sZXQgZGVjb2RlcjtcbmZ1bmN0aW9uIGRlY29kZUh0bWxCcm93c2VyKHJhdywgYXNBdHRyID0gZmFsc2UpIHtcbiAgaWYgKCFkZWNvZGVyKSB7XG4gICAgZGVjb2RlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIH1cbiAgaWYgKGFzQXR0cikge1xuICAgIGRlY29kZXIuaW5uZXJIVE1MID0gYDxkaXYgZm9vPVwiJHtyYXcucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIil9XCI+YDtcbiAgICByZXR1cm4gZGVjb2Rlci5jaGlsZHJlblswXS5nZXRBdHRyaWJ1dGUoXCJmb29cIik7XG4gIH0gZWxzZSB7XG4gICAgZGVjb2Rlci5pbm5lckhUTUwgPSByYXc7XG4gICAgcmV0dXJuIGRlY29kZXIudGV4dENvbnRlbnQ7XG4gIH1cbn1cblxuY29uc3QgcGFyc2VyT3B0aW9ucyA9IHtcbiAgcGFyc2VNb2RlOiBcImh0bWxcIixcbiAgaXNWb2lkVGFnLFxuICBpc05hdGl2ZVRhZzogKHRhZykgPT4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkdUYWcodGFnKSB8fCBpc01hdGhNTFRhZyh0YWcpLFxuICBpc1ByZVRhZzogKHRhZykgPT4gdGFnID09PSBcInByZVwiLFxuICBpc0lnbm9yZU5ld2xpbmVUYWc6ICh0YWcpID0+IHRhZyA9PT0gXCJwcmVcIiB8fCB0YWcgPT09IFwidGV4dGFyZWFcIixcbiAgZGVjb2RlRW50aXRpZXM6IGRlY29kZUh0bWxCcm93c2VyICxcbiAgaXNCdWlsdEluQ29tcG9uZW50OiAodGFnKSA9PiB7XG4gICAgaWYgKHRhZyA9PT0gXCJUcmFuc2l0aW9uXCIgfHwgdGFnID09PSBcInRyYW5zaXRpb25cIikge1xuICAgICAgcmV0dXJuIFRSQU5TSVRJT047XG4gICAgfSBlbHNlIGlmICh0YWcgPT09IFwiVHJhbnNpdGlvbkdyb3VwXCIgfHwgdGFnID09PSBcInRyYW5zaXRpb24tZ3JvdXBcIikge1xuICAgICAgcmV0dXJuIFRSQU5TSVRJT05fR1JPVVA7XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9wYXJzaW5nLmh0bWwjdHJlZS1jb25zdHJ1Y3Rpb24tZGlzcGF0Y2hlclxuICBnZXROYW1lc3BhY2UodGFnLCBwYXJlbnQsIHJvb3ROYW1lc3BhY2UpIHtcbiAgICBsZXQgbnMgPSBwYXJlbnQgPyBwYXJlbnQubnMgOiByb290TmFtZXNwYWNlO1xuICAgIGlmIChwYXJlbnQgJiYgbnMgPT09IDIpIHtcbiAgICAgIGlmIChwYXJlbnQudGFnID09PSBcImFubm90YXRpb24teG1sXCIpIHtcbiAgICAgICAgaWYgKHRhZyA9PT0gXCJzdmdcIikge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnQucHJvcHMuc29tZShcbiAgICAgICAgICAoYSkgPT4gYS50eXBlID09PSA2ICYmIGEubmFtZSA9PT0gXCJlbmNvZGluZ1wiICYmIGEudmFsdWUgIT0gbnVsbCAmJiAoYS52YWx1ZS5jb250ZW50ID09PSBcInRleHQvaHRtbFwiIHx8IGEudmFsdWUuY29udGVudCA9PT0gXCJhcHBsaWNhdGlvbi94aHRtbCt4bWxcIilcbiAgICAgICAgKSkge1xuICAgICAgICAgIG5zID0gMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgvXm0oPzpbaW9uc118dGV4dCkkLy50ZXN0KHBhcmVudC50YWcpICYmIHRhZyAhPT0gXCJtZ2x5cGhcIiAmJiB0YWcgIT09IFwibWFsaWdubWFya1wiKSB7XG4gICAgICAgIG5zID0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmVudCAmJiBucyA9PT0gMSkge1xuICAgICAgaWYgKHBhcmVudC50YWcgPT09IFwiZm9yZWlnbk9iamVjdFwiIHx8IHBhcmVudC50YWcgPT09IFwiZGVzY1wiIHx8IHBhcmVudC50YWcgPT09IFwidGl0bGVcIikge1xuICAgICAgICBucyA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChucyA9PT0gMCkge1xuICAgICAgaWYgKHRhZyA9PT0gXCJzdmdcIikge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIGlmICh0YWcgPT09IFwibWF0aFwiKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnM7XG4gIH1cbn07XG5cbmNvbnN0IHRyYW5zZm9ybVN0eWxlID0gKG5vZGUpID0+IHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIG5vZGUucHJvcHMuZm9yRWFjaCgocCwgaSkgPT4ge1xuICAgICAgaWYgKHAudHlwZSA9PT0gNiAmJiBwLm5hbWUgPT09IFwic3R5bGVcIiAmJiBwLnZhbHVlKSB7XG4gICAgICAgIG5vZGUucHJvcHNbaV0gPSB7XG4gICAgICAgICAgdHlwZTogNyxcbiAgICAgICAgICBuYW1lOiBgYmluZGAsXG4gICAgICAgICAgYXJnOiBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGBzdHlsZWAsIHRydWUsIHAubG9jKSxcbiAgICAgICAgICBleHA6IHBhcnNlSW5saW5lQ1NTKHAudmFsdWUuY29udGVudCwgcC5sb2MpLFxuICAgICAgICAgIG1vZGlmaWVyczogW10sXG4gICAgICAgICAgbG9jOiBwLmxvY1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuY29uc3QgcGFyc2VJbmxpbmVDU1MgPSAoY3NzVGV4dCwgbG9jKSA9PiB7XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSBwYXJzZVN0cmluZ1N0eWxlKGNzc1RleHQpO1xuICByZXR1cm4gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihcbiAgICBKU09OLnN0cmluZ2lmeShub3JtYWxpemVkKSxcbiAgICBmYWxzZSxcbiAgICBsb2MsXG4gICAgM1xuICApO1xufTtcblxuZnVuY3Rpb24gY3JlYXRlRE9NQ29tcGlsZXJFcnJvcihjb2RlLCBsb2MpIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbXBpbGVyRXJyb3IoXG4gICAgY29kZSxcbiAgICBsb2MsXG4gICAgRE9NRXJyb3JNZXNzYWdlcyBcbiAgKTtcbn1cbmNvbnN0IERPTUVycm9yTWVzc2FnZXMgPSB7XG4gIFs1M106IGB2LWh0bWwgaXMgbWlzc2luZyBleHByZXNzaW9uLmAsXG4gIFs1NF06IGB2LWh0bWwgd2lsbCBvdmVycmlkZSBlbGVtZW50IGNoaWxkcmVuLmAsXG4gIFs1NV06IGB2LXRleHQgaXMgbWlzc2luZyBleHByZXNzaW9uLmAsXG4gIFs1Nl06IGB2LXRleHQgd2lsbCBvdmVycmlkZSBlbGVtZW50IGNoaWxkcmVuLmAsXG4gIFs1N106IGB2LW1vZGVsIGNhbiBvbmx5IGJlIHVzZWQgb24gPGlucHV0PiwgPHRleHRhcmVhPiBhbmQgPHNlbGVjdD4gZWxlbWVudHMuYCxcbiAgWzU4XTogYHYtbW9kZWwgYXJndW1lbnQgaXMgbm90IHN1cHBvcnRlZCBvbiBwbGFpbiBlbGVtZW50cy5gLFxuICBbNTldOiBgdi1tb2RlbCBjYW5ub3QgYmUgdXNlZCBvbiBmaWxlIGlucHV0cyBzaW5jZSB0aGV5IGFyZSByZWFkLW9ubHkuIFVzZSBhIHYtb246Y2hhbmdlIGxpc3RlbmVyIGluc3RlYWQuYCxcbiAgWzYwXTogYFVubmVjZXNzYXJ5IHZhbHVlIGJpbmRpbmcgdXNlZCBhbG9uZ3NpZGUgdi1tb2RlbC4gSXQgd2lsbCBpbnRlcmZlcmUgd2l0aCB2LW1vZGVsJ3MgYmVoYXZpb3IuYCxcbiAgWzYxXTogYHYtc2hvdyBpcyBtaXNzaW5nIGV4cHJlc3Npb24uYCxcbiAgWzYyXTogYDxUcmFuc2l0aW9uPiBleHBlY3RzIGV4YWN0bHkgb25lIGNoaWxkIGVsZW1lbnQgb3IgY29tcG9uZW50LmAsXG4gIFs2M106IGBUYWdzIHdpdGggc2lkZSBlZmZlY3QgKDxzY3JpcHQ+IGFuZCA8c3R5bGU+KSBhcmUgaWdub3JlZCBpbiBjbGllbnQgY29tcG9uZW50IHRlbXBsYXRlcy5gXG59O1xuXG5jb25zdCB0cmFuc2Zvcm1WSHRtbCA9IChkaXIsIG5vZGUsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgeyBleHAsIGxvYyB9ID0gZGlyO1xuICBpZiAoIWV4cCkge1xuICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgIGNyZWF0ZURPTUNvbXBpbGVyRXJyb3IoNTMsIGxvYylcbiAgICApO1xuICB9XG4gIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgIGNyZWF0ZURPTUNvbXBpbGVyRXJyb3IoNTQsIGxvYylcbiAgICApO1xuICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHByb3BzOiBbXG4gICAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShcbiAgICAgICAgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihgaW5uZXJIVE1MYCwgdHJ1ZSwgbG9jKSxcbiAgICAgICAgZXhwIHx8IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oXCJcIiwgdHJ1ZSlcbiAgICAgIClcbiAgICBdXG4gIH07XG59O1xuXG5jb25zdCB0cmFuc2Zvcm1WVGV4dCA9IChkaXIsIG5vZGUsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgeyBleHAsIGxvYyB9ID0gZGlyO1xuICBpZiAoIWV4cCkge1xuICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgIGNyZWF0ZURPTUNvbXBpbGVyRXJyb3IoNTUsIGxvYylcbiAgICApO1xuICB9XG4gIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgIGNyZWF0ZURPTUNvbXBpbGVyRXJyb3IoNTYsIGxvYylcbiAgICApO1xuICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHByb3BzOiBbXG4gICAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShcbiAgICAgICAgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihgdGV4dENvbnRlbnRgLCB0cnVlKSxcbiAgICAgICAgZXhwID8gZ2V0Q29uc3RhbnRUeXBlKGV4cCwgY29udGV4dCkgPiAwID8gZXhwIDogY3JlYXRlQ2FsbEV4cHJlc3Npb24oXG4gICAgICAgICAgY29udGV4dC5oZWxwZXJTdHJpbmcoVE9fRElTUExBWV9TVFJJTkcpLFxuICAgICAgICAgIFtleHBdLFxuICAgICAgICAgIGxvY1xuICAgICAgICApIDogY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihcIlwiLCB0cnVlKVxuICAgICAgKVxuICAgIF1cbiAgfTtcbn07XG5cbmNvbnN0IHRyYW5zZm9ybU1vZGVsID0gKGRpciwgbm9kZSwgY29udGV4dCkgPT4ge1xuICBjb25zdCBiYXNlUmVzdWx0ID0gdHJhbnNmb3JtTW9kZWwkMShkaXIsIG5vZGUsIGNvbnRleHQpO1xuICBpZiAoIWJhc2VSZXN1bHQucHJvcHMubGVuZ3RoIHx8IG5vZGUudGFnVHlwZSA9PT0gMSkge1xuICAgIHJldHVybiBiYXNlUmVzdWx0O1xuICB9XG4gIGlmIChkaXIuYXJnKSB7XG4gICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgY3JlYXRlRE9NQ29tcGlsZXJFcnJvcihcbiAgICAgICAgNTgsXG4gICAgICAgIGRpci5hcmcubG9jXG4gICAgICApXG4gICAgKTtcbiAgfVxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZWRWYWx1ZSgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGZpbmREaXIobm9kZSwgXCJiaW5kXCIpO1xuICAgIGlmICh2YWx1ZSAmJiBpc1N0YXRpY0FyZ09mKHZhbHVlLmFyZywgXCJ2YWx1ZVwiKSkge1xuICAgICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgICBjcmVhdGVET01Db21waWxlckVycm9yKFxuICAgICAgICAgIDYwLFxuICAgICAgICAgIHZhbHVlLmxvY1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb25zdCB7IHRhZyB9ID0gbm9kZTtcbiAgY29uc3QgaXNDdXN0b21FbGVtZW50ID0gY29udGV4dC5pc0N1c3RvbUVsZW1lbnQodGFnKTtcbiAgaWYgKHRhZyA9PT0gXCJpbnB1dFwiIHx8IHRhZyA9PT0gXCJ0ZXh0YXJlYVwiIHx8IHRhZyA9PT0gXCJzZWxlY3RcIiB8fCBpc0N1c3RvbUVsZW1lbnQpIHtcbiAgICBsZXQgZGlyZWN0aXZlVG9Vc2UgPSBWX01PREVMX1RFWFQ7XG4gICAgbGV0IGlzSW52YWxpZFR5cGUgPSBmYWxzZTtcbiAgICBpZiAodGFnID09PSBcImlucHV0XCIgfHwgaXNDdXN0b21FbGVtZW50KSB7XG4gICAgICBjb25zdCB0eXBlID0gZmluZFByb3Aobm9kZSwgYHR5cGVgKTtcbiAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlLnR5cGUgPT09IDcpIHtcbiAgICAgICAgICBkaXJlY3RpdmVUb1VzZSA9IFZfTU9ERUxfRFlOQU1JQztcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlLnZhbHVlKSB7XG4gICAgICAgICAgc3dpdGNoICh0eXBlLnZhbHVlLmNvbnRlbnQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJyYWRpb1wiOlxuICAgICAgICAgICAgICBkaXJlY3RpdmVUb1VzZSA9IFZfTU9ERUxfUkFESU87XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImNoZWNrYm94XCI6XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZVRvVXNlID0gVl9NT0RFTF9DSEVDS0JPWDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiZmlsZVwiOlxuICAgICAgICAgICAgICBpc0ludmFsaWRUeXBlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgICAgICAgICAgIGNyZWF0ZURPTUNvbXBpbGVyRXJyb3IoXG4gICAgICAgICAgICAgICAgICA1OSxcbiAgICAgICAgICAgICAgICAgIGRpci5sb2NcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVkVmFsdWUoKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGhhc0R5bmFtaWNLZXlWQmluZChub2RlKSkge1xuICAgICAgICBkaXJlY3RpdmVUb1VzZSA9IFZfTU9ERUxfRFlOQU1JQztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlZFZhbHVlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0YWcgPT09IFwic2VsZWN0XCIpIHtcbiAgICAgIGRpcmVjdGl2ZVRvVXNlID0gVl9NT0RFTF9TRUxFQ1Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoZWNrRHVwbGljYXRlZFZhbHVlKCk7XG4gICAgfVxuICAgIGlmICghaXNJbnZhbGlkVHlwZSkge1xuICAgICAgYmFzZVJlc3VsdC5uZWVkUnVudGltZSA9IGNvbnRleHQuaGVscGVyKGRpcmVjdGl2ZVRvVXNlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgY3JlYXRlRE9NQ29tcGlsZXJFcnJvcihcbiAgICAgICAgNTcsXG4gICAgICAgIGRpci5sb2NcbiAgICAgIClcbiAgICApO1xuICB9XG4gIGJhc2VSZXN1bHQucHJvcHMgPSBiYXNlUmVzdWx0LnByb3BzLmZpbHRlcihcbiAgICAocCkgPT4gIShwLmtleS50eXBlID09PSA0ICYmIHAua2V5LmNvbnRlbnQgPT09IFwibW9kZWxWYWx1ZVwiKVxuICApO1xuICByZXR1cm4gYmFzZVJlc3VsdDtcbn07XG5cbmNvbnN0IGlzRXZlbnRPcHRpb25Nb2RpZmllciA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKGBwYXNzaXZlLG9uY2UsY2FwdHVyZWApO1xuY29uc3QgaXNOb25LZXlNb2RpZmllciA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFxuICAvLyBldmVudCBwcm9wYWdhdGlvbiBtYW5hZ2VtZW50XG4gIGBzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0LG1pZGRsZWBcbik7XG5jb25zdCBtYXliZUtleU1vZGlmaWVyID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoXCJsZWZ0LHJpZ2h0XCIpO1xuY29uc3QgaXNLZXlib2FyZEV2ZW50ID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoYG9ua2V5dXAsb25rZXlkb3duLG9ua2V5cHJlc3NgKTtcbmNvbnN0IHJlc29sdmVNb2RpZmllcnMgPSAoa2V5LCBtb2RpZmllcnMsIGNvbnRleHQsIGxvYykgPT4ge1xuICBjb25zdCBrZXlNb2RpZmllcnMgPSBbXTtcbiAgY29uc3Qgbm9uS2V5TW9kaWZpZXJzID0gW107XG4gIGNvbnN0IGV2ZW50T3B0aW9uTW9kaWZpZXJzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kaWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbW9kaWZpZXIgPSBtb2RpZmllcnNbaV0uY29udGVudDtcbiAgICBpZiAoaXNFdmVudE9wdGlvbk1vZGlmaWVyKG1vZGlmaWVyKSkge1xuICAgICAgZXZlbnRPcHRpb25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChtYXliZUtleU1vZGlmaWVyKG1vZGlmaWVyKSkge1xuICAgICAgICBpZiAoaXNTdGF0aWNFeHAoa2V5KSkge1xuICAgICAgICAgIGlmIChpc0tleWJvYXJkRXZlbnQoa2V5LmNvbnRlbnQudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGtleU1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9uS2V5TW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBrZXlNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgICAgbm9uS2V5TW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNOb25LZXlNb2RpZmllcihtb2RpZmllcikpIHtcbiAgICAgICAgICBub25LZXlNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAga2V5TW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAga2V5TW9kaWZpZXJzLFxuICAgIG5vbktleU1vZGlmaWVycyxcbiAgICBldmVudE9wdGlvbk1vZGlmaWVyc1xuICB9O1xufTtcbmNvbnN0IHRyYW5zZm9ybUNsaWNrID0gKGtleSwgZXZlbnQpID0+IHtcbiAgY29uc3QgaXNTdGF0aWNDbGljayA9IGlzU3RhdGljRXhwKGtleSkgJiYga2V5LmNvbnRlbnQudG9Mb3dlckNhc2UoKSA9PT0gXCJvbmNsaWNrXCI7XG4gIHJldHVybiBpc1N0YXRpY0NsaWNrID8gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihldmVudCwgdHJ1ZSkgOiBrZXkudHlwZSAhPT0gNCA/IGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbXG4gICAgYChgLFxuICAgIGtleSxcbiAgICBgKSA9PT0gXCJvbkNsaWNrXCIgPyBcIiR7ZXZlbnR9XCIgOiAoYCxcbiAgICBrZXksXG4gICAgYClgXG4gIF0pIDoga2V5O1xufTtcbmNvbnN0IHRyYW5zZm9ybU9uID0gKGRpciwgbm9kZSwgY29udGV4dCkgPT4ge1xuICByZXR1cm4gdHJhbnNmb3JtT24kMShkaXIsIG5vZGUsIGNvbnRleHQsIChiYXNlUmVzdWx0KSA9PiB7XG4gICAgY29uc3QgeyBtb2RpZmllcnMgfSA9IGRpcjtcbiAgICBpZiAoIW1vZGlmaWVycy5sZW5ndGgpIHJldHVybiBiYXNlUmVzdWx0O1xuICAgIGxldCB7IGtleSwgdmFsdWU6IGhhbmRsZXJFeHAgfSA9IGJhc2VSZXN1bHQucHJvcHNbMF07XG4gICAgY29uc3QgeyBrZXlNb2RpZmllcnMsIG5vbktleU1vZGlmaWVycywgZXZlbnRPcHRpb25Nb2RpZmllcnMgfSA9IHJlc29sdmVNb2RpZmllcnMoa2V5LCBtb2RpZmllcnMsIGNvbnRleHQsIGRpci5sb2MpO1xuICAgIGlmIChub25LZXlNb2RpZmllcnMuaW5jbHVkZXMoXCJyaWdodFwiKSkge1xuICAgICAga2V5ID0gdHJhbnNmb3JtQ2xpY2soa2V5LCBgb25Db250ZXh0bWVudWApO1xuICAgIH1cbiAgICBpZiAobm9uS2V5TW9kaWZpZXJzLmluY2x1ZGVzKFwibWlkZGxlXCIpKSB7XG4gICAgICBrZXkgPSB0cmFuc2Zvcm1DbGljayhrZXksIGBvbk1vdXNldXBgKTtcbiAgICB9XG4gICAgaWYgKG5vbktleU1vZGlmaWVycy5sZW5ndGgpIHtcbiAgICAgIGhhbmRsZXJFeHAgPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihjb250ZXh0LmhlbHBlcihWX09OX1dJVEhfTU9ESUZJRVJTKSwgW1xuICAgICAgICBoYW5kbGVyRXhwLFxuICAgICAgICBKU09OLnN0cmluZ2lmeShub25LZXlNb2RpZmllcnMpXG4gICAgICBdKTtcbiAgICB9XG4gICAgaWYgKGtleU1vZGlmaWVycy5sZW5ndGggJiYgLy8gaWYgZXZlbnQgbmFtZSBpcyBkeW5hbWljLCBhbHdheXMgd3JhcCB3aXRoIGtleXMgZ3VhcmRcbiAgICAoIWlzU3RhdGljRXhwKGtleSkgfHwgaXNLZXlib2FyZEV2ZW50KGtleS5jb250ZW50LnRvTG93ZXJDYXNlKCkpKSkge1xuICAgICAgaGFuZGxlckV4cCA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKFZfT05fV0lUSF9LRVlTKSwgW1xuICAgICAgICBoYW5kbGVyRXhwLFxuICAgICAgICBKU09OLnN0cmluZ2lmeShrZXlNb2RpZmllcnMpXG4gICAgICBdKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50T3B0aW9uTW9kaWZpZXJzLmxlbmd0aCkge1xuICAgICAgY29uc3QgbW9kaWZpZXJQb3N0Zml4ID0gZXZlbnRPcHRpb25Nb2RpZmllcnMubWFwKGNhcGl0YWxpemUpLmpvaW4oXCJcIik7XG4gICAgICBrZXkgPSBpc1N0YXRpY0V4cChrZXkpID8gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihgJHtrZXkuY29udGVudH0ke21vZGlmaWVyUG9zdGZpeH1gLCB0cnVlKSA6IGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbYChgLCBrZXksIGApICsgXCIke21vZGlmaWVyUG9zdGZpeH1cImBdKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb3BzOiBbY3JlYXRlT2JqZWN0UHJvcGVydHkoa2V5LCBoYW5kbGVyRXhwKV1cbiAgICB9O1xuICB9KTtcbn07XG5cbmNvbnN0IHRyYW5zZm9ybVNob3cgPSAoZGlyLCBub2RlLCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IHsgZXhwLCBsb2MgfSA9IGRpcjtcbiAgaWYgKCFleHApIHtcbiAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICBjcmVhdGVET01Db21waWxlckVycm9yKDYxLCBsb2MpXG4gICAgKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHByb3BzOiBbXSxcbiAgICBuZWVkUnVudGltZTogY29udGV4dC5oZWxwZXIoVl9TSE9XKVxuICB9O1xufTtcblxuY29uc3QgdHJhbnNmb3JtVHJhbnNpdGlvbiA9IChub2RlLCBjb250ZXh0KSA9PiB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEgJiYgbm9kZS50YWdUeXBlID09PSAxKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gY29udGV4dC5pc0J1aWx0SW5Db21wb25lbnQobm9kZS50YWcpO1xuICAgIGlmIChjb21wb25lbnQgPT09IFRSQU5TSVRJT04pIHtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmICghbm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc011bHRpcGxlQ2hpbGRyZW4obm9kZSkpIHtcbiAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgICAgICBjcmVhdGVET01Db21waWxlckVycm9yKFxuICAgICAgICAgICAgICA2MixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBub2RlLmNoaWxkcmVuWzBdLmxvYy5zdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IG5vZGUuY2hpbGRyZW5bbm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxXS5sb2MuZW5kLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogXCJcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGUuY2hpbGRyZW5bMF07XG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSAxKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBwIG9mIGNoaWxkLnByb3BzKSB7XG4gICAgICAgICAgICBpZiAocC50eXBlID09PSA3ICYmIHAubmFtZSA9PT0gXCJzaG93XCIpIHtcbiAgICAgICAgICAgICAgbm9kZS5wcm9wcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiA2LFxuICAgICAgICAgICAgICAgIG5hbWU6IFwicGVyc2lzdGVkXCIsXG4gICAgICAgICAgICAgICAgbmFtZUxvYzogbm9kZS5sb2MsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZvaWQgMCxcbiAgICAgICAgICAgICAgICBsb2M6IG5vZGUubG9jXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBoYXNNdWx0aXBsZUNoaWxkcmVuKG5vZGUpIHtcbiAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbi5maWx0ZXIoXG4gICAgKGMpID0+IGMudHlwZSAhPT0gMyAmJiAhKGMudHlwZSA9PT0gMiAmJiAhYy5jb250ZW50LnRyaW0oKSlcbiAgKTtcbiAgY29uc3QgY2hpbGQgPSBjaGlsZHJlblswXTtcbiAgcmV0dXJuIGNoaWxkcmVuLmxlbmd0aCAhPT0gMSB8fCBjaGlsZC50eXBlID09PSAxMSB8fCBjaGlsZC50eXBlID09PSA5ICYmIGNoaWxkLmJyYW5jaGVzLnNvbWUoaGFzTXVsdGlwbGVDaGlsZHJlbik7XG59XG5cbmNvbnN0IGlnbm9yZVNpZGVFZmZlY3RUYWdzID0gKG5vZGUsIGNvbnRleHQpID0+IHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSAmJiBub2RlLnRhZ1R5cGUgPT09IDAgJiYgKG5vZGUudGFnID09PSBcInNjcmlwdFwiIHx8IG5vZGUudGFnID09PSBcInN0eWxlXCIpKSB7XG4gICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgY3JlYXRlRE9NQ29tcGlsZXJFcnJvcihcbiAgICAgICAgNjMsXG4gICAgICAgIG5vZGUubG9jXG4gICAgICApXG4gICAgKTtcbiAgICBjb250ZXh0LnJlbW92ZU5vZGUoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gaXNWYWxpZEhUTUxOZXN0aW5nKHBhcmVudCwgY2hpbGQpIHtcbiAgaWYgKHBhcmVudCBpbiBvbmx5VmFsaWRDaGlsZHJlbikge1xuICAgIHJldHVybiBvbmx5VmFsaWRDaGlsZHJlbltwYXJlbnRdLmhhcyhjaGlsZCk7XG4gIH1cbiAgaWYgKGNoaWxkIGluIG9ubHlWYWxpZFBhcmVudHMpIHtcbiAgICByZXR1cm4gb25seVZhbGlkUGFyZW50c1tjaGlsZF0uaGFzKHBhcmVudCk7XG4gIH1cbiAgaWYgKHBhcmVudCBpbiBrbm93bkludmFsaWRDaGlsZHJlbikge1xuICAgIGlmIChrbm93bkludmFsaWRDaGlsZHJlbltwYXJlbnRdLmhhcyhjaGlsZCkpIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoY2hpbGQgaW4ga25vd25JbnZhbGlkUGFyZW50cykge1xuICAgIGlmIChrbm93bkludmFsaWRQYXJlbnRzW2NoaWxkXS5oYXMocGFyZW50KSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuY29uc3QgaGVhZGluZ3MgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJoMVwiLCBcImgyXCIsIFwiaDNcIiwgXCJoNFwiLCBcImg1XCIsIFwiaDZcIl0pO1xuY29uc3QgZW1wdHlTZXQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXSk7XG5jb25zdCBvbmx5VmFsaWRDaGlsZHJlbiA9IHtcbiAgaGVhZDogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICAgIFwiYmFzZVwiLFxuICAgIFwiYmFzZWZyb250XCIsXG4gICAgXCJiZ3NvdW5kXCIsXG4gICAgXCJsaW5rXCIsXG4gICAgXCJtZXRhXCIsXG4gICAgXCJ0aXRsZVwiLFxuICAgIFwibm9zY3JpcHRcIixcbiAgICBcIm5vZnJhbWVzXCIsXG4gICAgXCJzdHlsZVwiLFxuICAgIFwic2NyaXB0XCIsXG4gICAgXCJ0ZW1wbGF0ZVwiXG4gIF0pLFxuICBvcHRncm91cDogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wib3B0aW9uXCJdKSxcbiAgc2VsZWN0OiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJvcHRncm91cFwiLCBcIm9wdGlvblwiLCBcImhyXCJdKSxcbiAgLy8gdGFibGVcbiAgdGFibGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImNhcHRpb25cIiwgXCJjb2xncm91cFwiLCBcInRib2R5XCIsIFwidGZvb3RcIiwgXCJ0aGVhZFwiXSksXG4gIHRyOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJ0ZFwiLCBcInRoXCJdKSxcbiAgY29sZ3JvdXA6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImNvbFwiXSksXG4gIHRib2R5OiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJ0clwiXSksXG4gIHRoZWFkOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJ0clwiXSksXG4gIHRmb290OiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJ0clwiXSksXG4gIC8vIHRoZXNlIGVsZW1lbnRzIGNhbiBub3QgaGF2ZSBhbnkgY2hpbGRyZW4gZWxlbWVudHNcbiAgc2NyaXB0OiBlbXB0eVNldCxcbiAgaWZyYW1lOiBlbXB0eVNldCxcbiAgb3B0aW9uOiBlbXB0eVNldCxcbiAgdGV4dGFyZWE6IGVtcHR5U2V0LFxuICBzdHlsZTogZW1wdHlTZXQsXG4gIHRpdGxlOiBlbXB0eVNldFxufTtcbmNvbnN0IG9ubHlWYWxpZFBhcmVudHMgPSB7XG4gIC8vIHNlY3Rpb25zXG4gIGh0bWw6IGVtcHR5U2V0LFxuICBib2R5OiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJodG1sXCJdKSxcbiAgaGVhZDogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wiaHRtbFwiXSksXG4gIC8vIHRhYmxlXG4gIHRkOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJ0clwiXSksXG4gIGNvbGdyb3VwOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJ0YWJsZVwiXSksXG4gIGNhcHRpb246IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcInRhYmxlXCJdKSxcbiAgdGJvZHk6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcInRhYmxlXCJdKSxcbiAgdGZvb3Q6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcInRhYmxlXCJdKSxcbiAgY29sOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJjb2xncm91cFwiXSksXG4gIHRoOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJ0clwiXSksXG4gIHRoZWFkOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJ0YWJsZVwiXSksXG4gIHRyOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJ0Ym9keVwiLCBcInRoZWFkXCIsIFwidGZvb3RcIl0pLFxuICAvLyBkYXRhIGxpc3RcbiAgZGQ6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImRsXCIsIFwiZGl2XCJdKSxcbiAgZHQ6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImRsXCIsIFwiZGl2XCJdKSxcbiAgLy8gb3RoZXJcbiAgZmlnY2FwdGlvbjogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wiZmlndXJlXCJdKSxcbiAgLy8gbGk6IG5ldyBTZXQoW1widWxcIiwgXCJvbFwiXSksXG4gIHN1bW1hcnk6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImRldGFpbHNcIl0pLFxuICBhcmVhOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJtYXBcIl0pXG59O1xuY29uc3Qga25vd25JbnZhbGlkQ2hpbGRyZW4gPSB7XG4gIHA6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcbiAgICBcImFkZHJlc3NcIixcbiAgICBcImFydGljbGVcIixcbiAgICBcImFzaWRlXCIsXG4gICAgXCJibG9ja3F1b3RlXCIsXG4gICAgXCJjZW50ZXJcIixcbiAgICBcImRldGFpbHNcIixcbiAgICBcImRpYWxvZ1wiLFxuICAgIFwiZGlyXCIsXG4gICAgXCJkaXZcIixcbiAgICBcImRsXCIsXG4gICAgXCJmaWVsZHNldFwiLFxuICAgIFwiZmlndXJlXCIsXG4gICAgXCJmb290ZXJcIixcbiAgICBcImZvcm1cIixcbiAgICBcImgxXCIsXG4gICAgXCJoMlwiLFxuICAgIFwiaDNcIixcbiAgICBcImg0XCIsXG4gICAgXCJoNVwiLFxuICAgIFwiaDZcIixcbiAgICBcImhlYWRlclwiLFxuICAgIFwiaGdyb3VwXCIsXG4gICAgXCJoclwiLFxuICAgIFwibGlcIixcbiAgICBcIm1haW5cIixcbiAgICBcIm5hdlwiLFxuICAgIFwibWVudVwiLFxuICAgIFwib2xcIixcbiAgICBcInBcIixcbiAgICBcInByZVwiLFxuICAgIFwic2VjdGlvblwiLFxuICAgIFwidGFibGVcIixcbiAgICBcInVsXCJcbiAgXSksXG4gIHN2ZzogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICAgIFwiYlwiLFxuICAgIFwiYmxvY2txdW90ZVwiLFxuICAgIFwiYnJcIixcbiAgICBcImNvZGVcIixcbiAgICBcImRkXCIsXG4gICAgXCJkaXZcIixcbiAgICBcImRsXCIsXG4gICAgXCJkdFwiLFxuICAgIFwiZW1cIixcbiAgICBcImVtYmVkXCIsXG4gICAgXCJoMVwiLFxuICAgIFwiaDJcIixcbiAgICBcImgzXCIsXG4gICAgXCJoNFwiLFxuICAgIFwiaDVcIixcbiAgICBcImg2XCIsXG4gICAgXCJoclwiLFxuICAgIFwiaVwiLFxuICAgIFwiaW1nXCIsXG4gICAgXCJsaVwiLFxuICAgIFwibWVudVwiLFxuICAgIFwibWV0YVwiLFxuICAgIFwib2xcIixcbiAgICBcInBcIixcbiAgICBcInByZVwiLFxuICAgIFwicnVieVwiLFxuICAgIFwic1wiLFxuICAgIFwic21hbGxcIixcbiAgICBcInNwYW5cIixcbiAgICBcInN0cm9uZ1wiLFxuICAgIFwic3ViXCIsXG4gICAgXCJzdXBcIixcbiAgICBcInRhYmxlXCIsXG4gICAgXCJ1XCIsXG4gICAgXCJ1bFwiLFxuICAgIFwidmFyXCJcbiAgXSlcbn07XG5jb25zdCBrbm93bkludmFsaWRQYXJlbnRzID0ge1xuICBhOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJhXCJdKSxcbiAgYnV0dG9uOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJidXR0b25cIl0pLFxuICBkZDogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wiZGRcIiwgXCJkdFwiXSksXG4gIGR0OiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJkZFwiLCBcImR0XCJdKSxcbiAgZm9ybTogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wiZm9ybVwiXSksXG4gIGxpOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJsaVwiXSksXG4gIGgxOiBoZWFkaW5ncyxcbiAgaDI6IGhlYWRpbmdzLFxuICBoMzogaGVhZGluZ3MsXG4gIGg0OiBoZWFkaW5ncyxcbiAgaDU6IGhlYWRpbmdzLFxuICBoNjogaGVhZGluZ3Ncbn07XG5cbmNvbnN0IHZhbGlkYXRlSHRtbE5lc3RpbmcgPSAobm9kZSwgY29udGV4dCkgPT4ge1xuICBpZiAobm9kZS50eXBlID09PSAxICYmIG5vZGUudGFnVHlwZSA9PT0gMCAmJiBjb250ZXh0LnBhcmVudCAmJiBjb250ZXh0LnBhcmVudC50eXBlID09PSAxICYmIGNvbnRleHQucGFyZW50LnRhZ1R5cGUgPT09IDAgJiYgIWlzVmFsaWRIVE1MTmVzdGluZyhjb250ZXh0LnBhcmVudC50YWcsIG5vZGUudGFnKSkge1xuICAgIGNvbnN0IGVycm9yID0gbmV3IFN5bnRheEVycm9yKFxuICAgICAgYDwke25vZGUudGFnfT4gY2Fubm90IGJlIGNoaWxkIG9mIDwke2NvbnRleHQucGFyZW50LnRhZ30+LCBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjaWZpY2F0aW9ucy4gVGhpcyBjYW4gY2F1c2UgaHlkcmF0aW9uIGVycm9ycyBvciBwb3RlbnRpYWxseSBkaXNydXB0IGZ1dHVyZSBmdW5jdGlvbmFsaXR5LmBcbiAgICApO1xuICAgIGVycm9yLmxvYyA9IG5vZGUubG9jO1xuICAgIGNvbnRleHQub25XYXJuKGVycm9yKTtcbiAgfVxufTtcblxuY29uc3QgRE9NTm9kZVRyYW5zZm9ybXMgPSBbXG4gIHRyYW5zZm9ybVN0eWxlLFxuICAuLi5bdHJhbnNmb3JtVHJhbnNpdGlvbiwgdmFsaWRhdGVIdG1sTmVzdGluZ10gXG5dO1xuY29uc3QgRE9NRGlyZWN0aXZlVHJhbnNmb3JtcyA9IHtcbiAgY2xvYWs6IG5vb3BEaXJlY3RpdmVUcmFuc2Zvcm0sXG4gIGh0bWw6IHRyYW5zZm9ybVZIdG1sLFxuICB0ZXh0OiB0cmFuc2Zvcm1WVGV4dCxcbiAgbW9kZWw6IHRyYW5zZm9ybU1vZGVsLFxuICAvLyBvdmVycmlkZSBjb21waWxlci1jb3JlXG4gIG9uOiB0cmFuc2Zvcm1PbixcbiAgLy8gb3ZlcnJpZGUgY29tcGlsZXItY29yZVxuICBzaG93OiB0cmFuc2Zvcm1TaG93XG59O1xuZnVuY3Rpb24gY29tcGlsZShzcmMsIG9wdGlvbnMgPSB7fSkge1xuICByZXR1cm4gYmFzZUNvbXBpbGUoXG4gICAgc3JjLFxuICAgIGV4dGVuZCh7fSwgcGFyc2VyT3B0aW9ucywgb3B0aW9ucywge1xuICAgICAgbm9kZVRyYW5zZm9ybXM6IFtcbiAgICAgICAgLy8gaWdub3JlIDxzY3JpcHQ+IGFuZCA8dGFnPlxuICAgICAgICAvLyB0aGlzIGlzIG5vdCBwdXQgaW5zaWRlIERPTU5vZGVUcmFuc2Zvcm1zIGJlY2F1c2UgdGhhdCBsaXN0IGlzIHVzZWRcbiAgICAgICAgLy8gYnkgY29tcGlsZXItc3NyIHRvIGdlbmVyYXRlIHZub2RlIGZhbGxiYWNrIGJyYW5jaGVzXG4gICAgICAgIGlnbm9yZVNpZGVFZmZlY3RUYWdzLFxuICAgICAgICAuLi5ET01Ob2RlVHJhbnNmb3JtcyxcbiAgICAgICAgLi4ub3B0aW9ucy5ub2RlVHJhbnNmb3JtcyB8fCBbXVxuICAgICAgXSxcbiAgICAgIGRpcmVjdGl2ZVRyYW5zZm9ybXM6IGV4dGVuZChcbiAgICAgICAge30sXG4gICAgICAgIERPTURpcmVjdGl2ZVRyYW5zZm9ybXMsXG4gICAgICAgIG9wdGlvbnMuZGlyZWN0aXZlVHJhbnNmb3JtcyB8fCB7fVxuICAgICAgKSxcbiAgICAgIHRyYW5zZm9ybUhvaXN0OiBudWxsIFxuICAgIH0pXG4gICk7XG59XG5cbntcbiAgaW5pdERldigpO1xufVxuY29uc3QgY29tcGlsZUNhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBjb21waWxlVG9GdW5jdGlvbih0ZW1wbGF0ZSwgb3B0aW9ucykge1xuICBpZiAoIWlzU3RyaW5nKHRlbXBsYXRlKSkge1xuICAgIGlmICh0ZW1wbGF0ZS5ub2RlVHlwZSkge1xuICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5pbm5lckhUTUw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm4oYGludmFsaWQgdGVtcGxhdGUgb3B0aW9uOiBgLCB0ZW1wbGF0ZSk7XG4gICAgICByZXR1cm4gTk9PUDtcbiAgICB9XG4gIH1cbiAgY29uc3Qga2V5ID0gZ2VuQ2FjaGVLZXkodGVtcGxhdGUsIG9wdGlvbnMpO1xuICBjb25zdCBjYWNoZWQgPSBjb21waWxlQ2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cbiAgaWYgKHRlbXBsYXRlWzBdID09PSBcIiNcIikge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0ZW1wbGF0ZSk7XG4gICAgaWYgKCFlbCkge1xuICAgICAgd2FybihgVGVtcGxhdGUgZWxlbWVudCBub3QgZm91bmQgb3IgaXMgZW1wdHk6ICR7dGVtcGxhdGV9YCk7XG4gICAgfVxuICAgIHRlbXBsYXRlID0gZWwgPyBlbC5pbm5lckhUTUwgOiBgYDtcbiAgfVxuICBjb25zdCBvcHRzID0gZXh0ZW5kKFxuICAgIHtcbiAgICAgIGhvaXN0U3RhdGljOiB0cnVlLFxuICAgICAgb25FcnJvcjogb25FcnJvciAsXG4gICAgICBvbldhcm46IChlKSA9PiBvbkVycm9yKGUsIHRydWUpIFxuICAgIH0sXG4gICAgb3B0aW9uc1xuICApO1xuICBpZiAoIW9wdHMuaXNDdXN0b21FbGVtZW50ICYmIHR5cGVvZiBjdXN0b21FbGVtZW50cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIG9wdHMuaXNDdXN0b21FbGVtZW50ID0gKHRhZykgPT4gISFjdXN0b21FbGVtZW50cy5nZXQodGFnKTtcbiAgfVxuICBjb25zdCB7IGNvZGUgfSA9IGNvbXBpbGUodGVtcGxhdGUsIG9wdHMpO1xuICBmdW5jdGlvbiBvbkVycm9yKGVyciwgYXNXYXJuaW5nID0gZmFsc2UpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYXNXYXJuaW5nID8gZXJyLm1lc3NhZ2UgOiBgVGVtcGxhdGUgY29tcGlsYXRpb24gZXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YDtcbiAgICBjb25zdCBjb2RlRnJhbWUgPSBlcnIubG9jICYmIGdlbmVyYXRlQ29kZUZyYW1lKFxuICAgICAgdGVtcGxhdGUsXG4gICAgICBlcnIubG9jLnN0YXJ0Lm9mZnNldCxcbiAgICAgIGVyci5sb2MuZW5kLm9mZnNldFxuICAgICk7XG4gICAgd2Fybihjb2RlRnJhbWUgPyBgJHttZXNzYWdlfVxuJHtjb2RlRnJhbWV9YCA6IG1lc3NhZ2UpO1xuICB9XG4gIGNvbnN0IHJlbmRlciA9IG5ldyBGdW5jdGlvbihcIlZ1ZVwiLCBjb2RlKShydW50aW1lRG9tKTtcbiAgcmVuZGVyLl9yYyA9IHRydWU7XG4gIHJldHVybiBjb21waWxlQ2FjaGVba2V5XSA9IHJlbmRlcjtcbn1cbnJlZ2lzdGVyUnVudGltZUNvbXBpbGVyKGNvbXBpbGVUb0Z1bmN0aW9uKTtcblxuZXhwb3J0IHsgQmFzZVRyYW5zaXRpb24sIEJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLCBDb21tZW50LCBEZXByZWNhdGlvblR5cGVzLCBFZmZlY3RTY29wZSwgRXJyb3JDb2RlcywgRXJyb3JUeXBlU3RyaW5ncywgRnJhZ21lbnQsIEtlZXBBbGl2ZSwgUmVhY3RpdmVFZmZlY3QsIFN0YXRpYywgU3VzcGVuc2UsIFRlbGVwb3J0LCBUZXh0LCBUcmFja09wVHlwZXMsIFRyYW5zaXRpb24sIFRyYW5zaXRpb25Hcm91cCwgVHJpZ2dlck9wVHlwZXMsIFZ1ZUVsZW1lbnQsIGFzc2VydE51bWJlciwgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsIGNhbGxXaXRoRXJyb3JIYW5kbGluZywgY2FtZWxpemUsIGNhcGl0YWxpemUsIGNsb25lVk5vZGUsIGNvbXBhdFV0aWxzLCBjb21waWxlVG9GdW5jdGlvbiBhcyBjb21waWxlLCBjb21wdXRlZCwgY3JlYXRlQXBwLCBjcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlLCBjcmVhdGVFbGVtZW50QmxvY2ssIGNyZWF0ZUJhc2VWTm9kZSBhcyBjcmVhdGVFbGVtZW50Vk5vZGUsIGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyLCBjcmVhdGVQcm9wc1Jlc3RQcm94eSwgY3JlYXRlUmVuZGVyZXIsIGNyZWF0ZVNTUkFwcCwgY3JlYXRlU2xvdHMsIGNyZWF0ZVN0YXRpY1ZOb2RlLCBjcmVhdGVUZXh0Vk5vZGUsIGNyZWF0ZVZOb2RlLCBjdXN0b21SZWYsIGRlZmluZUFzeW5jQ29tcG9uZW50LCBkZWZpbmVDb21wb25lbnQsIGRlZmluZUN1c3RvbUVsZW1lbnQsIGRlZmluZUVtaXRzLCBkZWZpbmVFeHBvc2UsIGRlZmluZU1vZGVsLCBkZWZpbmVPcHRpb25zLCBkZWZpbmVQcm9wcywgZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCwgZGVmaW5lU2xvdHMsIGRldnRvb2xzLCBlZmZlY3QsIGVmZmVjdFNjb3BlLCBnZXRDdXJyZW50SW5zdGFuY2UsIGdldEN1cnJlbnRTY29wZSwgZ2V0Q3VycmVudFdhdGNoZXIsIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiwgZ3VhcmRSZWFjdGl2ZVByb3BzLCBoLCBoYW5kbGVFcnJvciwgaGFzSW5qZWN0aW9uQ29udGV4dCwgaHlkcmF0ZSwgaHlkcmF0ZU9uSWRsZSwgaHlkcmF0ZU9uSW50ZXJhY3Rpb24sIGh5ZHJhdGVPbk1lZGlhUXVlcnksIGh5ZHJhdGVPblZpc2libGUsIGluaXRDdXN0b21Gb3JtYXR0ZXIsIGluaXREaXJlY3RpdmVzRm9yU1NSLCBpbmplY3QsIGlzTWVtb1NhbWUsIGlzUHJveHksIGlzUmVhY3RpdmUsIGlzUmVhZG9ubHksIGlzUmVmLCBpc1J1bnRpbWVPbmx5LCBpc1NoYWxsb3csIGlzVk5vZGUsIG1hcmtSYXcsIG1lcmdlRGVmYXVsdHMsIG1lcmdlTW9kZWxzLCBtZXJnZVByb3BzLCBuZXh0VGljaywgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVByb3BzLCBub3JtYWxpemVTdHlsZSwgb25BY3RpdmF0ZWQsIG9uQmVmb3JlTW91bnQsIG9uQmVmb3JlVW5tb3VudCwgb25CZWZvcmVVcGRhdGUsIG9uRGVhY3RpdmF0ZWQsIG9uRXJyb3JDYXB0dXJlZCwgb25Nb3VudGVkLCBvblJlbmRlclRyYWNrZWQsIG9uUmVuZGVyVHJpZ2dlcmVkLCBvblNjb3BlRGlzcG9zZSwgb25TZXJ2ZXJQcmVmZXRjaCwgb25Vbm1vdW50ZWQsIG9uVXBkYXRlZCwgb25XYXRjaGVyQ2xlYW51cCwgb3BlbkJsb2NrLCBwb3BTY29wZUlkLCBwcm92aWRlLCBwcm94eVJlZnMsIHB1c2hTY29wZUlkLCBxdWV1ZVBvc3RGbHVzaENiLCByZWFjdGl2ZSwgcmVhZG9ubHksIHJlZiwgcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIsIHJlbmRlciwgcmVuZGVyTGlzdCwgcmVuZGVyU2xvdCwgcmVzb2x2ZUNvbXBvbmVudCwgcmVzb2x2ZURpcmVjdGl2ZSwgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQsIHJlc29sdmVGaWx0ZXIsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MsIHNldEJsb2NrVHJhY2tpbmcsIHNldERldnRvb2xzSG9vaywgc2V0VHJhbnNpdGlvbkhvb2tzLCBzaGFsbG93UmVhY3RpdmUsIHNoYWxsb3dSZWFkb25seSwgc2hhbGxvd1JlZiwgc3NyQ29udGV4dEtleSwgc3NyVXRpbHMsIHN0b3AsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5LCB0b0hhbmRsZXJzLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdG9WYWx1ZSwgdHJhbnNmb3JtVk5vZGVBcmdzLCB0cmlnZ2VyUmVmLCB1bnJlZiwgdXNlQXR0cnMsIHVzZUNzc01vZHVsZSwgdXNlQ3NzVmFycywgdXNlSG9zdCwgdXNlSWQsIHVzZU1vZGVsLCB1c2VTU1JDb250ZXh0LCB1c2VTaGFkb3dSb290LCB1c2VTbG90cywgdXNlVGVtcGxhdGVSZWYsIHVzZVRyYW5zaXRpb25TdGF0ZSwgdk1vZGVsQ2hlY2tib3gsIHZNb2RlbER5bmFtaWMsIHZNb2RlbFJhZGlvLCB2TW9kZWxTZWxlY3QsIHZNb2RlbFRleHQsIHZTaG93LCB2ZXJzaW9uLCB3YXJuLCB3YXRjaCwgd2F0Y2hFZmZlY3QsIHdhdGNoUG9zdEVmZmVjdCwgd2F0Y2hTeW5jRWZmZWN0LCB3aXRoQXN5bmNDb250ZXh0LCB3aXRoQ3R4LCB3aXRoRGVmYXVsdHMsIHdpdGhEaXJlY3RpdmVzLCB3aXRoS2V5cywgd2l0aE1lbW8sIHdpdGhNb2RpZmllcnMsIHdpdGhTY29wZUlkIH07XG4iLCIoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt0cnl7aWYodHlwZW9mIGRvY3VtZW50PFwidVwiKXt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7YS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIi5tYXBkaXZbZGF0YS12LWQwNWZjNmJjXXt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS5jdXN0b20tY29udHJvbC13cmFwcGVyW2RhdGEtdi1kMDk5YTNhNl17ZGlzcGxheTpub25lfS5tYXBkaXYgLmN1c3RvbS1jb250cm9sLXdyYXBwZXJbZGF0YS12LWQwOTlhM2E2XXtkaXNwbGF5OmlubGluZS1ibG9ja30uaW5mby13aW5kb3ctd3JhcHBlcltkYXRhLXYtY2JlMTcwN2Jde2Rpc3BsYXk6bm9uZX0ubWFwZGl2IC5pbmZvLXdpbmRvdy13cmFwcGVyW2RhdGEtdi1jYmUxNzA3Yl17ZGlzcGxheTppbmxpbmUtYmxvY2t9LmN1c3RvbS1tYXJrZXItd3JhcHBlcltkYXRhLXYtMmQyZDM0M2Fde2Rpc3BsYXk6bm9uZX0ubWFwZGl2IC5jdXN0b20tbWFya2VyLXdyYXBwZXJbZGF0YS12LTJkMmQzNDNhXXtkaXNwbGF5OmlubGluZS1ibG9ja31cIikpLGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoYSl9fWNhdGNoKGQpe2NvbnNvbGUuZXJyb3IoXCJ2aXRlLXBsdWdpbi1jc3MtaW5qZWN0ZWQtYnktanNcIixkKX19KSgpO1xudmFyIEJlID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIFplID0gKG4sIGUsIHQpID0+IGUgaW4gbiA/IEJlKG4sIGUsIHsgZW51bWVyYWJsZTogITAsIGNvbmZpZ3VyYWJsZTogITAsIHdyaXRhYmxlOiAhMCwgdmFsdWU6IHQgfSkgOiBuW2VdID0gdDtcbnZhciBzZSA9IChuLCBlLCB0KSA9PiAoWmUobiwgdHlwZW9mIGUgIT0gXCJzeW1ib2xcIiA/IGUgKyBcIlwiIDogZSwgdCksIHQpO1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IGFzIFAsIHJlZiBhcyB5LCBwcm92aWRlIGFzIFUsIHdhdGNoIGFzIEwsIG9uTW91bnRlZCBhcyBQZSwgb25CZWZvcmVVbm1vdW50IGFzIHEsIG1hcmtSYXcgYXMgeCwgdG9SZWYgYXMgJCwgb3BlbkJsb2NrIGFzIEosIGNyZWF0ZUVsZW1lbnRCbG9jayBhcyBYLCBjcmVhdGVFbGVtZW50Vk5vZGUgYXMgYWUsIHJlbmRlclNsb3QgYXMgUSwgbm9ybWFsaXplUHJvcHMgYXMgTmUsIGd1YXJkUmVhY3RpdmVQcm9wcyBhcyBVZSwgaW5qZWN0IGFzIGIsIGNvbXB1dGVkIGFzIEgsIENvbW1lbnQgYXMgTGUsIG1lcmdlUHJvcHMgYXMgU2UsIGNyZWF0ZUNvbW1lbnRWTm9kZSBhcyB4ZSB9IGZyb20gXCJ2dWVcIjtcbmNvbnN0IEIgPSBTeW1ib2woXCJtYXBcIiksIFogPSBTeW1ib2woXCJhcGlcIiksIGxlID0gU3ltYm9sKFwibWFya2VyXCIpLCBjZSA9IFN5bWJvbChcIm1hcmtlckNsdXN0ZXJcIiksIGVlID0gU3ltYm9sKFwiQ3VzdG9tTWFya2VyXCIpLCBBZSA9IFN5bWJvbChcIm1hcFRpbGVzTG9hZGVkXCIpLCBGID0gW1xuICBcImNsaWNrXCIsXG4gIFwiZGJsY2xpY2tcIixcbiAgXCJkcmFnXCIsXG4gIFwiZHJhZ2VuZFwiLFxuICBcImRyYWdzdGFydFwiLFxuICBcIm1vdXNlZG93blwiLFxuICBcIm1vdXNlbW92ZVwiLFxuICBcIm1vdXNlb3V0XCIsXG4gIFwibW91c2VvdmVyXCIsXG4gIFwibW91c2V1cFwiLFxuICBcInJpZ2h0Y2xpY2tcIlxuXTtcbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuZnVuY3Rpb24gRGUobiwgZSwgdCwgcykge1xuICBmdW5jdGlvbiByKG8pIHtcbiAgICByZXR1cm4gbyBpbnN0YW5jZW9mIHQgPyBvIDogbmV3IHQoZnVuY3Rpb24oaSkge1xuICAgICAgaShvKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbmV3ICh0IHx8ICh0ID0gUHJvbWlzZSkpKGZ1bmN0aW9uKG8sIGkpIHtcbiAgICBmdW5jdGlvbiBjKHUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGQocy5uZXh0KHUpKTtcbiAgICAgIH0gY2F0Y2ggKGwpIHtcbiAgICAgICAgaShsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYSh1KSB7XG4gICAgICB0cnkge1xuICAgICAgICBkKHMudGhyb3codSkpO1xuICAgICAgfSBjYXRjaCAobCkge1xuICAgICAgICBpKGwpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBkKHUpIHtcbiAgICAgIHUuZG9uZSA/IG8odS52YWx1ZSkgOiByKHUudmFsdWUpLnRoZW4oYywgYSk7XG4gICAgfVxuICAgIGQoKHMgPSBzLmFwcGx5KG4sIGUgfHwgW10pKS5uZXh0KCkpO1xuICB9KTtcbn1cbnZhciBGZSA9IGZ1bmN0aW9uIG4oZSwgdCkge1xuICBpZiAoZSA9PT0gdClcbiAgICByZXR1cm4gITA7XG4gIGlmIChlICYmIHQgJiYgdHlwZW9mIGUgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdCA9PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKGUuY29uc3RydWN0b3IgIT09IHQuY29uc3RydWN0b3IpXG4gICAgICByZXR1cm4gITE7XG4gICAgdmFyIHMsIHIsIG87XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGlmIChzID0gZS5sZW5ndGgsIHMgIT0gdC5sZW5ndGgpXG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIGZvciAociA9IHM7IHItLSAhPT0gMDsgKVxuICAgICAgICBpZiAoIW4oZVtyXSwgdFtyXSkpXG4gICAgICAgICAgcmV0dXJuICExO1xuICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICBpZiAoZS5jb25zdHJ1Y3RvciA9PT0gUmVnRXhwKVxuICAgICAgcmV0dXJuIGUuc291cmNlID09PSB0LnNvdXJjZSAmJiBlLmZsYWdzID09PSB0LmZsYWdzO1xuICAgIGlmIChlLnZhbHVlT2YgIT09IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZilcbiAgICAgIHJldHVybiBlLnZhbHVlT2YoKSA9PT0gdC52YWx1ZU9mKCk7XG4gICAgaWYgKGUudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpXG4gICAgICByZXR1cm4gZS50b1N0cmluZygpID09PSB0LnRvU3RyaW5nKCk7XG4gICAgaWYgKG8gPSBPYmplY3Qua2V5cyhlKSwgcyA9IG8ubGVuZ3RoLCBzICE9PSBPYmplY3Qua2V5cyh0KS5sZW5ndGgpXG4gICAgICByZXR1cm4gITE7XG4gICAgZm9yIChyID0gczsgci0tICE9PSAwOyApXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LCBvW3JdKSlcbiAgICAgICAgcmV0dXJuICExO1xuICAgIGZvciAociA9IHM7IHItLSAhPT0gMDsgKSB7XG4gICAgICB2YXIgaSA9IG9bcl07XG4gICAgICBpZiAoIW4oZVtpXSwgdFtpXSkpXG4gICAgICAgIHJldHVybiAhMTtcbiAgICB9XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIHJldHVybiBlICE9PSBlICYmIHQgIT09IHQ7XG59O1xuY29uc3QgcGUgPSBcIl9fZ29vZ2xlTWFwc1NjcmlwdElkXCI7XG52YXIgTjtcbihmdW5jdGlvbihuKSB7XG4gIG5bbi5JTklUSUFMSVpFRCA9IDBdID0gXCJJTklUSUFMSVpFRFwiLCBuW24uTE9BRElORyA9IDFdID0gXCJMT0FESU5HXCIsIG5bbi5TVUNDRVNTID0gMl0gPSBcIlNVQ0NFU1NcIiwgbltuLkZBSUxVUkUgPSAzXSA9IFwiRkFJTFVSRVwiO1xufSkoTiB8fCAoTiA9IHt9KSk7XG5jbGFzcyBqIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgTG9hZGVyIHVzaW5nIFtbTG9hZGVyT3B0aW9uc11dLiBObyBkZWZhdWx0cyBhcmUgc2V0XG4gICAqIHVzaW5nIHRoaXMgbGlicmFyeSwgaW5zdGVhZCB0aGUgZGVmYXVsdHMgYXJlIHNldCBieSB0aGUgR29vZ2xlIE1hcHNcbiAgICogSmF2YVNjcmlwdCBBUEkgc2VydmVyLlxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgbG9hZGVyID0gTG9hZGVyKHthcGlLZXksIHZlcnNpb246ICd3ZWVrbHknLCBsaWJyYXJpZXM6IFsncGxhY2VzJ119KTtcbiAgICogYGBgXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGFwaUtleTogZSwgYXV0aFJlZmVycmVyUG9saWN5OiB0LCBjaGFubmVsOiBzLCBjbGllbnQ6IHIsIGlkOiBvID0gcGUsIGxhbmd1YWdlOiBpLCBsaWJyYXJpZXM6IGMgPSBbXSwgbWFwSWRzOiBhLCBub25jZTogZCwgcmVnaW9uOiB1LCByZXRyaWVzOiBsID0gMywgdXJsOiBoID0gXCJodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvanNcIiwgdmVyc2lvbjogcCB9KSB7XG4gICAgaWYgKHRoaXMuY2FsbGJhY2tzID0gW10sIHRoaXMuZG9uZSA9ICExLCB0aGlzLmxvYWRpbmcgPSAhMSwgdGhpcy5lcnJvcnMgPSBbXSwgdGhpcy5hcGlLZXkgPSBlLCB0aGlzLmF1dGhSZWZlcnJlclBvbGljeSA9IHQsIHRoaXMuY2hhbm5lbCA9IHMsIHRoaXMuY2xpZW50ID0gciwgdGhpcy5pZCA9IG8gfHwgcGUsIHRoaXMubGFuZ3VhZ2UgPSBpLCB0aGlzLmxpYnJhcmllcyA9IGMsIHRoaXMubWFwSWRzID0gYSwgdGhpcy5ub25jZSA9IGQsIHRoaXMucmVnaW9uID0gdSwgdGhpcy5yZXRyaWVzID0gbCwgdGhpcy51cmwgPSBoLCB0aGlzLnZlcnNpb24gPSBwLCBqLmluc3RhbmNlKSB7XG4gICAgICBpZiAoIUZlKHRoaXMub3B0aW9ucywgai5pbnN0YW5jZS5vcHRpb25zKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMb2FkZXIgbXVzdCBub3QgYmUgY2FsbGVkIGFnYWluIHdpdGggZGlmZmVyZW50IG9wdGlvbnMuICR7SlNPTi5zdHJpbmdpZnkodGhpcy5vcHRpb25zKX0gIT09ICR7SlNPTi5zdHJpbmdpZnkoai5pbnN0YW5jZS5vcHRpb25zKX1gKTtcbiAgICAgIHJldHVybiBqLmluc3RhbmNlO1xuICAgIH1cbiAgICBqLmluc3RhbmNlID0gdGhpcztcbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmVyc2lvbjogdGhpcy52ZXJzaW9uLFxuICAgICAgYXBpS2V5OiB0aGlzLmFwaUtleSxcbiAgICAgIGNoYW5uZWw6IHRoaXMuY2hhbm5lbCxcbiAgICAgIGNsaWVudDogdGhpcy5jbGllbnQsXG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIGxpYnJhcmllczogdGhpcy5saWJyYXJpZXMsXG4gICAgICBsYW5ndWFnZTogdGhpcy5sYW5ndWFnZSxcbiAgICAgIHJlZ2lvbjogdGhpcy5yZWdpb24sXG4gICAgICBtYXBJZHM6IHRoaXMubWFwSWRzLFxuICAgICAgbm9uY2U6IHRoaXMubm9uY2UsXG4gICAgICB1cmw6IHRoaXMudXJsLFxuICAgICAgYXV0aFJlZmVycmVyUG9saWN5OiB0aGlzLmF1dGhSZWZlcnJlclBvbGljeVxuICAgIH07XG4gIH1cbiAgZ2V0IHN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5lcnJvcnMubGVuZ3RoID8gTi5GQUlMVVJFIDogdGhpcy5kb25lID8gTi5TVUNDRVNTIDogdGhpcy5sb2FkaW5nID8gTi5MT0FESU5HIDogTi5JTklUSUFMSVpFRDtcbiAgfVxuICBnZXQgZmFpbGVkKCkge1xuICAgIHJldHVybiB0aGlzLmRvbmUgJiYgIXRoaXMubG9hZGluZyAmJiB0aGlzLmVycm9ycy5sZW5ndGggPj0gdGhpcy5yZXRyaWVzICsgMTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlVXJsIHJldHVybnMgdGhlIEdvb2dsZSBNYXBzIEphdmFTY3JpcHQgQVBJIHNjcmlwdCB1cmwgZ2l2ZW4gdGhlIFtbTG9hZGVyT3B0aW9uc11dLlxuICAgKlxuICAgKiBAaWdub3JlXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICBjcmVhdGVVcmwoKSB7XG4gICAgbGV0IGUgPSB0aGlzLnVybDtcbiAgICByZXR1cm4gZSArPSBcIj9jYWxsYmFjaz1fX2dvb2dsZU1hcHNDYWxsYmFja1wiLCB0aGlzLmFwaUtleSAmJiAoZSArPSBgJmtleT0ke3RoaXMuYXBpS2V5fWApLCB0aGlzLmNoYW5uZWwgJiYgKGUgKz0gYCZjaGFubmVsPSR7dGhpcy5jaGFubmVsfWApLCB0aGlzLmNsaWVudCAmJiAoZSArPSBgJmNsaWVudD0ke3RoaXMuY2xpZW50fWApLCB0aGlzLmxpYnJhcmllcy5sZW5ndGggPiAwICYmIChlICs9IGAmbGlicmFyaWVzPSR7dGhpcy5saWJyYXJpZXMuam9pbihcIixcIil9YCksIHRoaXMubGFuZ3VhZ2UgJiYgKGUgKz0gYCZsYW5ndWFnZT0ke3RoaXMubGFuZ3VhZ2V9YCksIHRoaXMucmVnaW9uICYmIChlICs9IGAmcmVnaW9uPSR7dGhpcy5yZWdpb259YCksIHRoaXMudmVyc2lvbiAmJiAoZSArPSBgJnY9JHt0aGlzLnZlcnNpb259YCksIHRoaXMubWFwSWRzICYmIChlICs9IGAmbWFwX2lkcz0ke3RoaXMubWFwSWRzLmpvaW4oXCIsXCIpfWApLCB0aGlzLmF1dGhSZWZlcnJlclBvbGljeSAmJiAoZSArPSBgJmF1dGhfcmVmZXJyZXJfcG9saWN5PSR7dGhpcy5hdXRoUmVmZXJyZXJQb2xpY3l9YCksIGU7XG4gIH1cbiAgZGVsZXRlU2NyaXB0KCkge1xuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKTtcbiAgICBlICYmIGUucmVtb3ZlKCk7XG4gIH1cbiAgLyoqXG4gICAqIExvYWQgdGhlIEdvb2dsZSBNYXBzIEphdmFTY3JpcHQgQVBJIHNjcmlwdCBhbmQgcmV0dXJuIGEgUHJvbWlzZS5cbiAgICogQGRlcHJlY2F0ZWQsIHVzZSBpbXBvcnRMaWJyYXJ5KCkgaW5zdGVhZC5cbiAgICovXG4gIGxvYWQoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9hZFByb21pc2UoKTtcbiAgfVxuICAvKipcbiAgICogTG9hZCB0aGUgR29vZ2xlIE1hcHMgSmF2YVNjcmlwdCBBUEkgc2NyaXB0IGFuZCByZXR1cm4gYSBQcm9taXNlLlxuICAgKlxuICAgKiBAaWdub3JlXG4gICAqIEBkZXByZWNhdGVkLCB1c2UgaW1wb3J0TGlicmFyeSgpIGluc3RlYWQuXG4gICAqL1xuICBsb2FkUHJvbWlzZSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKGUsIHQpID0+IHtcbiAgICAgIHRoaXMubG9hZENhbGxiYWNrKChzKSA9PiB7XG4gICAgICAgIHMgPyB0KHMuZXJyb3IpIDogZSh3aW5kb3cuZ29vZ2xlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGltcG9ydExpYnJhcnkoZSkge1xuICAgIHJldHVybiB0aGlzLmV4ZWN1dGUoKSwgZ29vZ2xlLm1hcHMuaW1wb3J0TGlicmFyeShlKTtcbiAgfVxuICAvKipcbiAgICogTG9hZCB0aGUgR29vZ2xlIE1hcHMgSmF2YVNjcmlwdCBBUEkgc2NyaXB0IHdpdGggYSBjYWxsYmFjay5cbiAgICogQGRlcHJlY2F0ZWQsIHVzZSBpbXBvcnRMaWJyYXJ5KCkgaW5zdGVhZC5cbiAgICovXG4gIGxvYWRDYWxsYmFjayhlKSB7XG4gICAgdGhpcy5jYWxsYmFja3MucHVzaChlKSwgdGhpcy5leGVjdXRlKCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgc2NyaXB0IG9uIGRvY3VtZW50LlxuICAgKi9cbiAgc2V0U2NyaXB0KCkge1xuICAgIHZhciBlLCB0O1xuICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKSkge1xuICAgICAgdGhpcy5jYWxsYmFjaygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzID0ge1xuICAgICAga2V5OiB0aGlzLmFwaUtleSxcbiAgICAgIGNoYW5uZWw6IHRoaXMuY2hhbm5lbCxcbiAgICAgIGNsaWVudDogdGhpcy5jbGllbnQsXG4gICAgICBsaWJyYXJpZXM6IHRoaXMubGlicmFyaWVzLmxlbmd0aCAmJiB0aGlzLmxpYnJhcmllcyxcbiAgICAgIHY6IHRoaXMudmVyc2lvbixcbiAgICAgIG1hcElkczogdGhpcy5tYXBJZHMsXG4gICAgICBsYW5ndWFnZTogdGhpcy5sYW5ndWFnZSxcbiAgICAgIHJlZ2lvbjogdGhpcy5yZWdpb24sXG4gICAgICBhdXRoUmVmZXJyZXJQb2xpY3k6IHRoaXMuYXV0aFJlZmVycmVyUG9saWN5XG4gICAgfTtcbiAgICBPYmplY3Qua2V5cyhzKS5mb3JFYWNoKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgIChvKSA9PiAhc1tvXSAmJiBkZWxldGUgc1tvXVxuICAgICksICEoKHQgPSAoZSA9IHdpbmRvdyA9PSBudWxsID8gdm9pZCAwIDogd2luZG93Lmdvb2dsZSkgPT09IG51bGwgfHwgZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZS5tYXBzKSA9PT0gbnVsbCB8fCB0ID09PSB2b2lkIDApICYmIHQuaW1wb3J0TGlicmFyeSB8fCAoKG8pID0+IHtcbiAgICAgIGxldCBpLCBjLCBhLCBkID0gXCJUaGUgR29vZ2xlIE1hcHMgSmF2YVNjcmlwdCBBUElcIiwgdSA9IFwiZ29vZ2xlXCIsIGwgPSBcImltcG9ydExpYnJhcnlcIiwgaCA9IFwiX19pYl9fXCIsIHAgPSBkb2N1bWVudCwgbSA9IHdpbmRvdztcbiAgICAgIG0gPSBtW3VdIHx8IChtW3VdID0ge30pO1xuICAgICAgY29uc3QgZiA9IG0ubWFwcyB8fCAobS5tYXBzID0ge30pLCBnID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSwgdiA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKSwgdyA9ICgpID0+IChcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpIHx8IChpID0gbmV3IFByb21pc2UoKF8sIE8pID0+IERlKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgIHZhciBNO1xuICAgICAgICAgIHlpZWxkIGMgPSBwLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksIGMuaWQgPSB0aGlzLmlkLCB2LnNldChcImxpYnJhcmllc1wiLCBbLi4uZ10gKyBcIlwiKTtcbiAgICAgICAgICBmb3IgKGEgaW4gbylcbiAgICAgICAgICAgIHYuc2V0KGEucmVwbGFjZSgvW0EtWl0vZywgKEUpID0+IFwiX1wiICsgRVswXS50b0xvd2VyQ2FzZSgpKSwgb1thXSk7XG4gICAgICAgICAgdi5zZXQoXCJjYWxsYmFja1wiLCB1ICsgXCIubWFwcy5cIiArIGgpLCBjLnNyYyA9IHRoaXMudXJsICsgXCI/XCIgKyB2LCBmW2hdID0gXywgYy5vbmVycm9yID0gKCkgPT4gaSA9IE8oRXJyb3IoZCArIFwiIGNvdWxkIG5vdCBsb2FkLlwiKSksIGMubm9uY2UgPSB0aGlzLm5vbmNlIHx8ICgoTSA9IHAucXVlcnlTZWxlY3RvcihcInNjcmlwdFtub25jZV1cIikpID09PSBudWxsIHx8IE0gPT09IHZvaWQgMCA/IHZvaWQgMCA6IE0ubm9uY2UpIHx8IFwiXCIsIHAuaGVhZC5hcHBlbmQoYyk7XG4gICAgICAgIH0pKSlcbiAgICAgICk7XG4gICAgICBmW2xdID8gY29uc29sZS53YXJuKGQgKyBcIiBvbmx5IGxvYWRzIG9uY2UuIElnbm9yaW5nOlwiLCBvKSA6IGZbbF0gPSAoXywgLi4uTykgPT4gZy5hZGQoXykgJiYgdygpLnRoZW4oKCkgPT4gZltsXShfLCAuLi5PKSk7XG4gICAgfSkocyk7XG4gICAgY29uc3QgciA9IHRoaXMubGlicmFyaWVzLm1hcCgobykgPT4gdGhpcy5pbXBvcnRMaWJyYXJ5KG8pKTtcbiAgICByLmxlbmd0aCB8fCByLnB1c2godGhpcy5pbXBvcnRMaWJyYXJ5KFwiY29yZVwiKSksIFByb21pc2UuYWxsKHIpLnRoZW4oKCkgPT4gdGhpcy5jYWxsYmFjaygpLCAobykgPT4ge1xuICAgICAgY29uc3QgaSA9IG5ldyBFcnJvckV2ZW50KFwiZXJyb3JcIiwgeyBlcnJvcjogbyB9KTtcbiAgICAgIHRoaXMubG9hZEVycm9yQ2FsbGJhY2soaSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBsb2FkZXIgc3RhdGUuXG4gICAqL1xuICByZXNldCgpIHtcbiAgICB0aGlzLmRlbGV0ZVNjcmlwdCgpLCB0aGlzLmRvbmUgPSAhMSwgdGhpcy5sb2FkaW5nID0gITEsIHRoaXMuZXJyb3JzID0gW10sIHRoaXMub25lcnJvckV2ZW50ID0gbnVsbDtcbiAgfVxuICByZXNldElmUmV0cnlpbmdGYWlsZWQoKSB7XG4gICAgdGhpcy5mYWlsZWQgJiYgdGhpcy5yZXNldCgpO1xuICB9XG4gIGxvYWRFcnJvckNhbGxiYWNrKGUpIHtcbiAgICBpZiAodGhpcy5lcnJvcnMucHVzaChlKSwgdGhpcy5lcnJvcnMubGVuZ3RoIDw9IHRoaXMucmV0cmllcykge1xuICAgICAgY29uc3QgdCA9IHRoaXMuZXJyb3JzLmxlbmd0aCAqIE1hdGgucG93KDIsIHRoaXMuZXJyb3JzLmxlbmd0aCk7XG4gICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gbG9hZCBHb29nbGUgTWFwcyBzY3JpcHQsIHJldHJ5aW5nIGluICR7dH0gbXMuYCksIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmRlbGV0ZVNjcmlwdCgpLCB0aGlzLnNldFNjcmlwdCgpO1xuICAgICAgfSwgdCk7XG4gICAgfSBlbHNlXG4gICAgICB0aGlzLm9uZXJyb3JFdmVudCA9IGUsIHRoaXMuY2FsbGJhY2soKTtcbiAgfVxuICBjYWxsYmFjaygpIHtcbiAgICB0aGlzLmRvbmUgPSAhMCwgdGhpcy5sb2FkaW5nID0gITEsIHRoaXMuY2FsbGJhY2tzLmZvckVhY2goKGUpID0+IHtcbiAgICAgIGUodGhpcy5vbmVycm9yRXZlbnQpO1xuICAgIH0pLCB0aGlzLmNhbGxiYWNrcyA9IFtdO1xuICB9XG4gIGV4ZWN1dGUoKSB7XG4gICAgaWYgKHRoaXMucmVzZXRJZlJldHJ5aW5nRmFpbGVkKCksIHRoaXMuZG9uZSlcbiAgICAgIHRoaXMuY2FsbGJhY2soKTtcbiAgICBlbHNlIHtcbiAgICAgIGlmICh3aW5kb3cuZ29vZ2xlICYmIHdpbmRvdy5nb29nbGUubWFwcyAmJiB3aW5kb3cuZ29vZ2xlLm1hcHMudmVyc2lvbikge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJHb29nbGUgTWFwcyBhbHJlYWR5IGxvYWRlZCBvdXRzaWRlIEBnb29nbGVtYXBzL2pzLWFwaS1sb2FkZXIuVGhpcyBtYXkgcmVzdWx0IGluIHVuZGVzaXJhYmxlIGJlaGF2aW9yIGFzIG9wdGlvbnMgYW5kIHNjcmlwdCBwYXJhbWV0ZXJzIG1heSBub3QgbWF0Y2guXCIpLCB0aGlzLmNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMubG9hZGluZyB8fCAodGhpcy5sb2FkaW5nID0gITAsIHRoaXMuc2V0U2NyaXB0KCkpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gVmUobikge1xuICByZXR1cm4gY2xhc3MgZXh0ZW5kcyBuLk92ZXJsYXlWaWV3IHtcbiAgICBjb25zdHJ1Y3RvcihzKSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgc2UodGhpcywgXCJlbGVtZW50XCIpO1xuICAgICAgc2UodGhpcywgXCJvcHRzXCIpO1xuICAgICAgY29uc3QgeyBlbGVtZW50OiByLCAuLi5vIH0gPSBzO1xuICAgICAgdGhpcy5lbGVtZW50ID0gciwgdGhpcy5vcHRzID0gbywgdGhpcy5vcHRzLm1hcCAmJiB0aGlzLnNldE1hcCh0aGlzLm9wdHMubWFwKTtcbiAgICB9XG4gICAgZ2V0UG9zaXRpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcHRzLnBvc2l0aW9uID8gdGhpcy5vcHRzLnBvc2l0aW9uIGluc3RhbmNlb2Ygbi5MYXRMbmcgPyB0aGlzLm9wdHMucG9zaXRpb24gOiBuZXcgbi5MYXRMbmcodGhpcy5vcHRzLnBvc2l0aW9uKSA6IG51bGw7XG4gICAgfVxuICAgIGdldFZpc2libGUoKSB7XG4gICAgICBpZiAoIXRoaXMuZWxlbWVudClcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgY29uc3QgcyA9IHRoaXMuZWxlbWVudDtcbiAgICAgIHJldHVybiBzLnN0eWxlLmRpc3BsYXkgIT09IFwibm9uZVwiICYmIHMuc3R5bGUudmlzaWJpbGl0eSAhPT0gXCJoaWRkZW5cIiAmJiAocy5zdHlsZS5vcGFjaXR5ID09PSBcIlwiIHx8IE51bWJlcihzLnN0eWxlLm9wYWNpdHkpID4gMC4wMSk7XG4gICAgfVxuICAgIG9uQWRkKCkge1xuICAgICAgaWYgKCF0aGlzLmVsZW1lbnQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHMgPSB0aGlzLmdldFBhbmVzKCk7XG4gICAgICBzICYmIHMub3ZlcmxheU1vdXNlVGFyZ2V0LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICBpZiAoIXRoaXMuZWxlbWVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgcyA9IHRoaXMuZ2V0UHJvamVjdGlvbigpLCByID0gcyA9PSBudWxsID8gdm9pZCAwIDogcy5mcm9tTGF0TG5nVG9EaXZQaXhlbCh0aGlzLmdldFBvc2l0aW9uKCkpO1xuICAgICAgaWYgKHIpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgICBsZXQgbywgaTtcbiAgICAgICAgc3dpdGNoICh0aGlzLm9wdHMuYW5jaG9yUG9pbnQpIHtcbiAgICAgICAgICBjYXNlIFwiVE9QX0NFTlRFUlwiOlxuICAgICAgICAgICAgbyA9IFwiLTUwJVwiLCBpID0gXCItMTAwJVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkJPVFRPTV9DRU5URVJcIjpcbiAgICAgICAgICAgIG8gPSBcIi01MCVcIiwgaSA9IFwiMFwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkxFRlRfQ0VOVEVSXCI6XG4gICAgICAgICAgICBvID0gXCItMTAwJVwiLCBpID0gXCItNTAlXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiUklHSFRfQ0VOVEVSXCI6XG4gICAgICAgICAgICBvID0gXCIwXCIsIGkgPSBcIi01MCVcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJUT1BfTEVGVFwiOlxuICAgICAgICAgICAgbyA9IFwiLTEwMCVcIiwgaSA9IFwiLTEwMCVcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJUT1BfUklHSFRcIjpcbiAgICAgICAgICAgIG8gPSBcIjBcIiwgaSA9IFwiLTEwMCVcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJCT1RUT01fTEVGVFwiOlxuICAgICAgICAgICAgbyA9IFwiLTEwMCVcIiwgaSA9IFwiMFwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkJPVFRPTV9SSUdIVFwiOlxuICAgICAgICAgICAgbyA9IFwiMFwiLCBpID0gXCIwXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbyA9IFwiLTUwJVwiLCBpID0gXCItNTAlXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYyA9IHIueCArICh0aGlzLm9wdHMub2Zmc2V0WCB8fCAwKSArIFwicHhcIiwgYSA9IHIueSArICh0aGlzLm9wdHMub2Zmc2V0WSB8fCAwKSArIFwicHhcIjtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7b30pIHRyYW5zbGF0ZVgoJHtjfSkgdHJhbnNsYXRlWSgke2l9KSB0cmFuc2xhdGVZKCR7YX0pYCwgdGhpcy5vcHRzLnpJbmRleCAmJiAodGhpcy5lbGVtZW50LnN0eWxlLnpJbmRleCA9IHRoaXMub3B0cy56SW5kZXgudG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgfVxuICAgIG9uUmVtb3ZlKCkge1xuICAgICAgdGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5yZW1vdmUoKTtcbiAgICB9XG4gICAgc2V0T3B0aW9ucyhzKSB7XG4gICAgICBjb25zdCB7IGVsZW1lbnQ6IHIsIC4uLm8gfSA9IHM7XG4gICAgICB0aGlzLmVsZW1lbnQgPSByLCB0aGlzLm9wdHMgPSBvLCB0aGlzLmRyYXcoKTtcbiAgICB9XG4gIH07XG59XG5sZXQgZmU7XG5jb25zdCBtZSA9IFtcbiAgXCJib3VuZHNfY2hhbmdlZFwiLFxuICBcImNlbnRlcl9jaGFuZ2VkXCIsXG4gIFwiY2xpY2tcIixcbiAgXCJjb250ZXh0bWVudVwiLFxuICBcImRibGNsaWNrXCIsXG4gIFwiZHJhZ1wiLFxuICBcImRyYWdlbmRcIixcbiAgXCJkcmFnc3RhcnRcIixcbiAgXCJoZWFkaW5nX2NoYW5nZWRcIixcbiAgXCJpZGxlXCIsXG4gIFwiaXNmcmFjdGlvbmFsem9vbWVuYWJsZWRfY2hhbmdlZFwiLFxuICBcIm1hcGNhcGFiaWxpdGllc19jaGFuZ2VkXCIsXG4gIFwibWFwdHlwZWlkX2NoYW5nZWRcIixcbiAgXCJtb3VzZW1vdmVcIixcbiAgXCJtb3VzZW91dFwiLFxuICBcIm1vdXNlb3ZlclwiLFxuICBcInByb2plY3Rpb25fY2hhbmdlZFwiLFxuICBcInJlbmRlcmluZ3R5cGVfY2hhbmdlZFwiLFxuICBcInJpZ2h0Y2xpY2tcIixcbiAgXCJ0aWxlc2xvYWRlZFwiLFxuICBcInRpbHRfY2hhbmdlZFwiLFxuICBcInpvb21fY2hhbmdlZFwiXG5dLCB6ZSA9IFAoe1xuICBwcm9wczoge1xuICAgIGFwaVByb21pc2U6IHtcbiAgICAgIHR5cGU6IFByb21pc2VcbiAgICB9LFxuICAgIGFwaUtleToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogXCJcIlxuICAgIH0sXG4gICAgdmVyc2lvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogXCJ3ZWVrbHlcIlxuICAgIH0sXG4gICAgbGlicmFyaWVzOiB7XG4gICAgICB0eXBlOiBBcnJheSxcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFtcInBsYWNlc1wiLCBcIm1hcmtlclwiXVxuICAgIH0sXG4gICAgcmVnaW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIGxhbmd1YWdlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIGJhY2tncm91bmRDb2xvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBjZW50ZXI6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIGRlZmF1bHQ6ICgpID0+ICh7IGxhdDogMCwgbG5nOiAwIH0pXG4gICAgfSxcbiAgICBjbGlja2FibGVJY29uczoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgY29udHJvbFNpemU6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgZGlzYWJsZURlZmF1bHRVaToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgZGlzYWJsZURvdWJsZUNsaWNrWm9vbToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgZHJhZ2dhYmxlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBkcmFnZ2FibGVDdXJzb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgZHJhZ2dpbmdDdXJzb3I6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgZnVsbHNjcmVlbkNvbnRyb2w6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIGZ1bGxzY3JlZW5Db250cm9sUG9zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgZ2VzdHVyZUhhbmRsaW5nOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIGhlYWRpbmc6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgaXNGcmFjdGlvbmFsWm9vbUVuYWJsZWQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIGtleWJvYXJkU2hvcnRjdXRzOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBtYXBUeXBlQ29udHJvbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgbWFwVHlwZUNvbnRyb2xPcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIG1hcFR5cGVJZDoge1xuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgbWFwSWQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgbWF4Wm9vbToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBtaW5ab29tOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIG5vQ2xlYXI6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIHBhbkNvbnRyb2w6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIHBhbkNvbnRyb2xQb3NpdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICByZXN0cmljdGlvbjoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICByb3RhdGVDb250cm9sOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICByb3RhdGVDb250cm9sUG9zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgc2NhbGVDb250cm9sOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBzY2FsZUNvbnRyb2xTdHlsZToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBzY3JvbGx3aGVlbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgc3RyZWV0Vmlldzoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBzdHJlZXRWaWV3Q29udHJvbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgc3RyZWV0Vmlld0NvbnRyb2xQb3NpdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBzdHlsZXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICB0aWx0OiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIHpvb206IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgem9vbUNvbnRyb2w6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIHpvb21Db250cm9sUG9zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgbm9uY2U6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6IFwiXCJcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBtZSxcbiAgc2V0dXAobiwgeyBlbWl0OiBlIH0pIHtcbiAgICBjb25zdCB0ID0geSgpLCBzID0geSghMSksIHIgPSB5KCksIG8gPSB5KCksIGkgPSB5KCExKTtcbiAgICBVKEIsIHIpLCBVKFosIG8pLCBVKEFlLCBpKTtcbiAgICBjb25zdCBjID0gKCkgPT4ge1xuICAgICAgY29uc3QgbCA9IHsgLi4ubiB9O1xuICAgICAgT2JqZWN0LmtleXMobCkuZm9yRWFjaCgoZikgPT4ge1xuICAgICAgICBsW2ZdID09PSB2b2lkIDAgJiYgZGVsZXRlIGxbZl07XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHAgPSAoZikgPT4ge1xuICAgICAgICB2YXIgZztcbiAgICAgICAgcmV0dXJuIGYgPyB7IHBvc2l0aW9uOiAoZyA9IG8udmFsdWUpID09IG51bGwgPyB2b2lkIDAgOiBnLkNvbnRyb2xQb3NpdGlvbltmXSB9IDoge307XG4gICAgICB9LCBtID0ge1xuICAgICAgICBzY2FsZUNvbnRyb2xPcHRpb25zOiBuLnNjYWxlQ29udHJvbFN0eWxlID8geyBzdHlsZTogbi5zY2FsZUNvbnRyb2xTdHlsZSB9IDoge30sXG4gICAgICAgIHBhbkNvbnRyb2xPcHRpb25zOiBwKG4ucGFuQ29udHJvbFBvc2l0aW9uKSxcbiAgICAgICAgem9vbUNvbnRyb2xPcHRpb25zOiBwKG4uem9vbUNvbnRyb2xQb3NpdGlvbiksXG4gICAgICAgIHJvdGF0ZUNvbnRyb2xPcHRpb25zOiBwKG4ucm90YXRlQ29udHJvbFBvc2l0aW9uKSxcbiAgICAgICAgc3RyZWV0Vmlld0NvbnRyb2xPcHRpb25zOiBwKG4uc3RyZWV0Vmlld0NvbnRyb2xQb3NpdGlvbiksXG4gICAgICAgIGZ1bGxzY3JlZW5Db250cm9sT3B0aW9uczogcChuLmZ1bGxzY3JlZW5Db250cm9sUG9zaXRpb24pLFxuICAgICAgICBkaXNhYmxlRGVmYXVsdFVJOiBuLmRpc2FibGVEZWZhdWx0VWlcbiAgICAgIH07XG4gICAgICByZXR1cm4geyAuLi5sLCAuLi5tIH07XG4gICAgfSwgYSA9IEwoXG4gICAgICBbbywgcl0sXG4gICAgICAoW2wsIGhdKSA9PiB7XG4gICAgICAgIGNvbnN0IHAgPSBsLCBtID0gaDtcbiAgICAgICAgcCAmJiBtICYmIChwLmV2ZW50LmFkZExpc3RlbmVyT25jZShtLCBcInRpbGVzbG9hZGVkXCIsICgpID0+IHtcbiAgICAgICAgICBpLnZhbHVlID0gITA7XG4gICAgICAgIH0pLCBzZXRUaW1lb3V0KGEsIDApKTtcbiAgICAgIH0sXG4gICAgICB7IGltbWVkaWF0ZTogITAgfVxuICAgICksIGQgPSAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGFwaUtleTogbCwgcmVnaW9uOiBoLCB2ZXJzaW9uOiBwLCBsYW5ndWFnZTogbSwgbGlicmFyaWVzOiBmLCBub25jZTogZyB9ID0gbjtcbiAgICAgICAgZmUgPSBuZXcgaih7IGFwaUtleTogbCwgcmVnaW9uOiBoLCB2ZXJzaW9uOiBwLCBsYW5ndWFnZTogbSwgbGlicmFyaWVzOiBmLCBub25jZTogZyB9KTtcbiAgICAgIH0gY2F0Y2ggKGwpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihsKTtcbiAgICAgIH1cbiAgICB9LCB1ID0gKGwpID0+IHtcbiAgICAgIG8udmFsdWUgPSB4KGwubWFwcyksIHIudmFsdWUgPSB4KG5ldyBsLm1hcHMuTWFwKHQudmFsdWUsIGMoKSkpO1xuICAgICAgY29uc3QgaCA9IFZlKG8udmFsdWUpO1xuICAgICAgby52YWx1ZVtlZV0gPSBoLCBtZS5mb3JFYWNoKChtKSA9PiB7XG4gICAgICAgIHZhciBmO1xuICAgICAgICAoZiA9IHIudmFsdWUpID09IG51bGwgfHwgZi5hZGRMaXN0ZW5lcihtLCAoZykgPT4gZShtLCBnKSk7XG4gICAgICB9KSwgcy52YWx1ZSA9ICEwO1xuICAgICAgY29uc3QgcCA9IE9iamVjdC5rZXlzKG4pLmZpbHRlcihcbiAgICAgICAgKG0pID0+ICFbXCJhcGlQcm9taXNlXCIsIFwiYXBpS2V5XCIsIFwidmVyc2lvblwiLCBcImxpYnJhcmllc1wiLCBcInJlZ2lvblwiLCBcImxhbmd1YWdlXCIsIFwiY2VudGVyXCIsIFwiem9vbVwiLCBcIm5vbmNlXCJdLmluY2x1ZGVzKG0pXG4gICAgICApLm1hcCgobSkgPT4gJChuLCBtKSk7XG4gICAgICBMKFxuICAgICAgICBbKCkgPT4gbi5jZW50ZXIsICgpID0+IG4uem9vbSwgLi4ucF0sXG4gICAgICAgIChbbSwgZl0sIFtnLCB2XSkgPT4ge1xuICAgICAgICAgIHZhciBFLCBrLCBTO1xuICAgICAgICAgIGNvbnN0IHsgY2VudGVyOiB3LCB6b29tOiBfLCAuLi5PIH0gPSBjKCk7XG4gICAgICAgICAgKEUgPSByLnZhbHVlKSA9PSBudWxsIHx8IEUuc2V0T3B0aW9ucyhPKSwgZiAhPT0gdm9pZCAwICYmIGYgIT09IHYgJiYgKChrID0gci52YWx1ZSkgPT0gbnVsbCB8fCBrLnNldFpvb20oZikpO1xuICAgICAgICAgIGNvbnN0IE0gPSAhZyB8fCBtLmxuZyAhPT0gZy5sbmcgfHwgbS5sYXQgIT09IGcubGF0O1xuICAgICAgICAgIG0gJiYgTSAmJiAoKFMgPSByLnZhbHVlKSA9PSBudWxsIHx8IFMucGFuVG8obSkpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH07XG4gICAgcmV0dXJuIFBlKCgpID0+IHtcbiAgICAgIG4uYXBpUHJvbWlzZSAmJiBuLmFwaVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlID8gbi5hcGlQcm9taXNlLnRoZW4odSkgOiAoZCgpLCBmZS5sb2FkKCkudGhlbih1KSk7XG4gICAgfSksIHEoKCkgPT4ge1xuICAgICAgdmFyIGw7XG4gICAgICBpLnZhbHVlID0gITEsIHIudmFsdWUgJiYgKChsID0gby52YWx1ZSkgPT0gbnVsbCB8fCBsLmV2ZW50LmNsZWFySW5zdGFuY2VMaXN0ZW5lcnMoci52YWx1ZSkpO1xuICAgIH0pLCB7IG1hcFJlZjogdCwgcmVhZHk6IHMsIG1hcDogciwgYXBpOiBvLCBtYXBUaWxlc0xvYWRlZDogaSB9O1xuICB9XG59KTtcbmNvbnN0IHRlID0gKG4sIGUpID0+IHtcbiAgY29uc3QgdCA9IG4uX192Y2NPcHRzIHx8IG47XG4gIGZvciAoY29uc3QgW3MsIHJdIG9mIGUpXG4gICAgdFtzXSA9IHI7XG4gIHJldHVybiB0O1xufSwgR2UgPSB7XG4gIHJlZjogXCJtYXBSZWZcIixcbiAgY2xhc3M6IFwibWFwZGl2XCJcbn07XG5mdW5jdGlvbiBIZShuLCBlLCB0LCBzLCByLCBvKSB7XG4gIHJldHVybiBKKCksIFgoXCJkaXZcIiwgbnVsbCwgW1xuICAgIGFlKFwiZGl2XCIsIEdlLCBudWxsLCA1MTIpLFxuICAgIFEobi4kc2xvdHMsIFwiZGVmYXVsdFwiLCBOZShVZSh7IHJlYWR5OiBuLnJlYWR5LCBtYXA6IG4ubWFwLCBhcGk6IG4uYXBpLCBtYXBUaWxlc0xvYWRlZDogbi5tYXBUaWxlc0xvYWRlZCB9KSksIHZvaWQgMCwgITApXG4gIF0pO1xufVxuY29uc3QgRXQgPSAvKiBAX19QVVJFX18gKi8gdGUoemUsIFtbXCJyZW5kZXJcIiwgSGVdLCBbXCJfX3Njb3BlSWRcIiwgXCJkYXRhLXYtZDA1ZmM2YmNcIl1dKTtcbmZ1bmN0aW9uIFdlKG4pIHtcbiAgcmV0dXJuIG4gJiYgbi5fX2VzTW9kdWxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLCBcImRlZmF1bHRcIikgPyBuLmRlZmF1bHQgOiBuO1xufVxudmFyIEtlID0gZnVuY3Rpb24gbihlLCB0KSB7XG4gIGlmIChlID09PSB0KVxuICAgIHJldHVybiAhMDtcbiAgaWYgKGUgJiYgdCAmJiB0eXBlb2YgZSA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiB0ID09IFwib2JqZWN0XCIpIHtcbiAgICBpZiAoZS5jb25zdHJ1Y3RvciAhPT0gdC5jb25zdHJ1Y3RvcilcbiAgICAgIHJldHVybiAhMTtcbiAgICB2YXIgcywgciwgbztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgaWYgKHMgPSBlLmxlbmd0aCwgcyAhPSB0Lmxlbmd0aClcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgZm9yIChyID0gczsgci0tICE9PSAwOyApXG4gICAgICAgIGlmICghbihlW3JdLCB0W3JdKSlcbiAgICAgICAgICByZXR1cm4gITE7XG4gICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIGlmIChlLmNvbnN0cnVjdG9yID09PSBSZWdFeHApXG4gICAgICByZXR1cm4gZS5zb3VyY2UgPT09IHQuc291cmNlICYmIGUuZmxhZ3MgPT09IHQuZmxhZ3M7XG4gICAgaWYgKGUudmFsdWVPZiAhPT0gT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mKVxuICAgICAgcmV0dXJuIGUudmFsdWVPZigpID09PSB0LnZhbHVlT2YoKTtcbiAgICBpZiAoZS50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZylcbiAgICAgIHJldHVybiBlLnRvU3RyaW5nKCkgPT09IHQudG9TdHJpbmcoKTtcbiAgICBpZiAobyA9IE9iamVjdC5rZXlzKGUpLCBzID0gby5sZW5ndGgsIHMgIT09IE9iamVjdC5rZXlzKHQpLmxlbmd0aClcbiAgICAgIHJldHVybiAhMTtcbiAgICBmb3IgKHIgPSBzOyByLS0gIT09IDA7IClcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIG9bcl0pKVxuICAgICAgICByZXR1cm4gITE7XG4gICAgZm9yIChyID0gczsgci0tICE9PSAwOyApIHtcbiAgICAgIHZhciBpID0gb1tyXTtcbiAgICAgIGlmICghbihlW2ldLCB0W2ldKSlcbiAgICAgICAgcmV0dXJuICExO1xuICAgIH1cbiAgICByZXR1cm4gITA7XG4gIH1cbiAgcmV0dXJuIGUgIT09IGUgJiYgdCAhPT0gdDtcbn07XG5jb25zdCBBID0gLyogQF9fUFVSRV9fICovIFdlKEtlKSwgZ2UgPSBbXCJjbGlja1wiLCBcImRyYWdcIiwgXCJkcmFnZW5kXCIsIFwiZHJhZ3N0YXJ0XCIsIFwiZ21wLWNsaWNrXCJdLCBQdCA9IFAoe1xuICBuYW1lOiBcIkFkdmFuY2VkTWFya2VyXCIsXG4gIHByb3BzOiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6ICEwXG4gICAgfSxcbiAgICBwaW5PcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBnZSxcbiAgc2V0dXAobiwgeyBlbWl0OiBlLCBleHBvc2U6IHQsIHNsb3RzOiBzIH0pIHtcbiAgICBjb25zdCByID0gJChuLCBcIm9wdGlvbnNcIiksIG8gPSAkKG4sIFwicGluT3B0aW9uc1wiKSwgaSA9IHkoKSwgYyA9IGIoQiwgeSgpKSwgYSA9IGIoWiwgeSgpKSwgZCA9IGIoY2UsIHkoKSksIHUgPSBIKFxuICAgICAgKCkgPT4gISEoZC52YWx1ZSAmJiBhLnZhbHVlICYmIGkudmFsdWUgaW5zdGFuY2VvZiBnb29nbGUubWFwcy5tYXJrZXIuQWR2YW5jZWRNYXJrZXJFbGVtZW50KVxuICAgICk7XG4gICAgcmV0dXJuIEwoXG4gICAgICBbYywgciwgb10sXG4gICAgICBhc3luYyAobCwgW2gsIHAsIG1dKSA9PiB7XG4gICAgICAgIHZhciBfLCBPLCBNO1xuICAgICAgICBjb25zdCBnID0gIUEoci52YWx1ZSwgcCkgfHwgIUEoby52YWx1ZSwgbSkgfHwgYy52YWx1ZSAhPT0gaDtcbiAgICAgICAgaWYgKCFjLnZhbHVlIHx8ICFhLnZhbHVlIHx8ICFnKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgeyBBZHZhbmNlZE1hcmtlckVsZW1lbnQ6IHYsIFBpbkVsZW1lbnQ6IHcgfSA9IGEudmFsdWUubWFya2VyO1xuICAgICAgICBpZiAoaS52YWx1ZSkge1xuICAgICAgICAgIGNvbnN0IHsgbWFwOiBFLCBjb250ZW50OiBrLCAuLi5TIH0gPSByLnZhbHVlO1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24oaS52YWx1ZSwge1xuICAgICAgICAgICAgY29udGVudDogby52YWx1ZSA/IG5ldyB3KG8udmFsdWUpLmVsZW1lbnQgOiBrLFxuICAgICAgICAgICAgLi4uU1xuICAgICAgICAgIH0pLCB1LnZhbHVlICYmICgoXyA9IGQudmFsdWUpID09IG51bGwgfHwgXy5yZW1vdmVNYXJrZXIoaS52YWx1ZSksIChPID0gZC52YWx1ZSkgPT0gbnVsbCB8fCBPLmFkZE1hcmtlcihpLnZhbHVlKSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIG8udmFsdWUgJiYgKHIudmFsdWUuY29udGVudCA9IG5ldyB3KG8udmFsdWUpLmVsZW1lbnQpLCBpLnZhbHVlID0geChuZXcgdihyLnZhbHVlKSksIHUudmFsdWUgPyAoTSA9IGQudmFsdWUpID09IG51bGwgfHwgTS5hZGRNYXJrZXIoaS52YWx1ZSkgOiBpLnZhbHVlLm1hcCA9IGMudmFsdWUsIGdlLmZvckVhY2goKEUpID0+IHtcbiAgICAgICAgICAgIHZhciBrO1xuICAgICAgICAgICAgKGsgPSBpLnZhbHVlKSA9PSBudWxsIHx8IGsuYWRkTGlzdGVuZXIoRSwgKFMpID0+IGUoRSwgUykpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW1tZWRpYXRlOiAhMFxuICAgICAgfVxuICAgICksIHEoKCkgPT4ge1xuICAgICAgdmFyIGwsIGg7XG4gICAgICBpLnZhbHVlICYmICgobCA9IGEudmFsdWUpID09IG51bGwgfHwgbC5ldmVudC5jbGVhckluc3RhbmNlTGlzdGVuZXJzKGkudmFsdWUpLCB1LnZhbHVlID8gKGggPSBkLnZhbHVlKSA9PSBudWxsIHx8IGgucmVtb3ZlTWFya2VyKGkudmFsdWUpIDogaS52YWx1ZS5tYXAgPSBudWxsKTtcbiAgICB9KSwgVShsZSwgaSksIHQoeyBtYXJrZXI6IGkgfSksICgpID0+IHtcbiAgICAgIHZhciBsO1xuICAgICAgcmV0dXJuIChsID0gcy5kZWZhdWx0KSA9PSBudWxsID8gdm9pZCAwIDogbC5jYWxsKHMpO1xuICAgIH07XG4gIH1cbn0pLCBZZSA9IChuKSA9PiBuID09PSBcIk1hcmtlclwiLCBKZSA9IChuKSA9PiBuID09PSBlZSwgViA9IChuLCBlLCB0LCBzKSA9PiB7XG4gIGNvbnN0IHIgPSB5KCksIG8gPSBiKEIsIHkoKSksIGkgPSBiKFosIHkoKSksIGMgPSBiKGNlLCB5KCkpLCBhID0gSChcbiAgICAoKSA9PiAhIShjLnZhbHVlICYmIGkudmFsdWUgJiYgKHIudmFsdWUgaW5zdGFuY2VvZiBpLnZhbHVlLk1hcmtlciB8fCByLnZhbHVlIGluc3RhbmNlb2YgaS52YWx1ZVtlZV0pKVxuICApO1xuICByZXR1cm4gTChcbiAgICBbbywgdF0sXG4gICAgKGQsIFt1LCBsXSkgPT4ge1xuICAgICAgdmFyIHAsIG0sIGY7XG4gICAgICBjb25zdCBoID0gIUEodC52YWx1ZSwgbCkgfHwgby52YWx1ZSAhPT0gdTtcbiAgICAgICFvLnZhbHVlIHx8ICFpLnZhbHVlIHx8ICFoIHx8IChyLnZhbHVlID8gKHIudmFsdWUuc2V0T3B0aW9ucyh0LnZhbHVlKSwgYS52YWx1ZSAmJiAoKHAgPSBjLnZhbHVlKSA9PSBudWxsIHx8IHAucmVtb3ZlTWFya2VyKHIudmFsdWUpLCAobSA9IGMudmFsdWUpID09IG51bGwgfHwgbS5hZGRNYXJrZXIoci52YWx1ZSkpKSA6IChZZShuKSA/IHIudmFsdWUgPSB4KFxuICAgICAgICBuZXcgaS52YWx1ZVtuXSh0LnZhbHVlKVxuICAgICAgKSA6IEplKG4pID8gci52YWx1ZSA9IHgoXG4gICAgICAgIG5ldyBpLnZhbHVlW25dKHQudmFsdWUpXG4gICAgICApIDogci52YWx1ZSA9IHgoXG4gICAgICAgIG5ldyBpLnZhbHVlW25dKHtcbiAgICAgICAgICAuLi50LnZhbHVlLFxuICAgICAgICAgIG1hcDogby52YWx1ZVxuICAgICAgICB9KVxuICAgICAgKSwgYS52YWx1ZSA/IChmID0gYy52YWx1ZSkgPT0gbnVsbCB8fCBmLmFkZE1hcmtlcihyLnZhbHVlKSA6IHIudmFsdWUuc2V0TWFwKG8udmFsdWUpLCBlLmZvckVhY2goKGcpID0+IHtcbiAgICAgICAgdmFyIHY7XG4gICAgICAgICh2ID0gci52YWx1ZSkgPT0gbnVsbCB8fCB2LmFkZExpc3RlbmVyKGcsICh3KSA9PiBzKGcsIHcpKTtcbiAgICAgIH0pKSk7XG4gICAgfSxcbiAgICB7XG4gICAgICBpbW1lZGlhdGU6ICEwXG4gICAgfVxuICApLCBxKCgpID0+IHtcbiAgICB2YXIgZCwgdTtcbiAgICByLnZhbHVlICYmICgoZCA9IGkudmFsdWUpID09IG51bGwgfHwgZC5ldmVudC5jbGVhckluc3RhbmNlTGlzdGVuZXJzKHIudmFsdWUpLCBhLnZhbHVlID8gKHUgPSBjLnZhbHVlKSA9PSBudWxsIHx8IHUucmVtb3ZlTWFya2VyKHIudmFsdWUpIDogci52YWx1ZS5zZXRNYXAobnVsbCkpO1xuICB9KSwgcjtcbn0sIHZlID0gW1xuICBcImFuaW1hdGlvbl9jaGFuZ2VkXCIsXG4gIFwiY2xpY2tcIixcbiAgXCJkYmxjbGlja1wiLFxuICBcInJpZ2h0Y2xpY2tcIixcbiAgXCJkcmFnc3RhcnRcIixcbiAgXCJkcmFnZW5kXCIsXG4gIFwiZHJhZ1wiLFxuICBcIm1vdXNlb3ZlclwiLFxuICBcIm1vdXNlZG93blwiLFxuICBcIm1vdXNlb3V0XCIsXG4gIFwibW91c2V1cFwiLFxuICBcImRyYWdnYWJsZV9jaGFuZ2VkXCIsXG4gIFwiY2xpY2thYmxlX2NoYW5nZWRcIixcbiAgXCJjb250ZXh0bWVudVwiLFxuICBcImN1cnNvcl9jaGFuZ2VkXCIsXG4gIFwiZmxhdF9jaGFuZ2VkXCIsXG4gIFwicmlnaHRjbGlja1wiLFxuICBcInppbmRleF9jaGFuZ2VkXCIsXG4gIFwiaWNvbl9jaGFuZ2VkXCIsXG4gIFwicG9zaXRpb25fY2hhbmdlZFwiLFxuICBcInNoYXBlX2NoYW5nZWRcIixcbiAgXCJ0aXRsZV9jaGFuZ2VkXCIsXG4gIFwidmlzaWJsZV9jaGFuZ2VkXCJcbl0sIEx0ID0gUCh7XG4gIG5hbWU6IFwiTWFya2VyXCIsXG4gIHByb3BzOiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6ICEwXG4gICAgfVxuICB9LFxuICBlbWl0czogdmUsXG4gIHNldHVwKG4sIHsgZW1pdDogZSwgZXhwb3NlOiB0LCBzbG90czogcyB9KSB7XG4gICAgY29uc3QgciA9ICQobiwgXCJvcHRpb25zXCIpLCBvID0gVihcIk1hcmtlclwiLCB2ZSwgciwgZSk7XG4gICAgcmV0dXJuIFUobGUsIG8pLCB0KHsgbWFya2VyOiBvIH0pLCAoKSA9PiB7XG4gICAgICB2YXIgaTtcbiAgICAgIHJldHVybiAoaSA9IHMuZGVmYXVsdCkgPT0gbnVsbCA/IHZvaWQgMCA6IGkuY2FsbChzKTtcbiAgICB9O1xuICB9XG59KSwgU3QgPSBQKHtcbiAgbmFtZTogXCJQb2x5bGluZVwiLFxuICBwcm9wczoge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIHJlcXVpcmVkOiAhMFxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IEYsXG4gIHNldHVwKG4sIHsgZW1pdDogZSB9KSB7XG4gICAgY29uc3QgdCA9ICQobiwgXCJvcHRpb25zXCIpO1xuICAgIHJldHVybiB7IHBvbHlsaW5lOiBWKFwiUG9seWxpbmVcIiwgRiwgdCwgZSkgfTtcbiAgfSxcbiAgcmVuZGVyOiAoKSA9PiBudWxsXG59KSwgeHQgPSBQKHtcbiAgbmFtZTogXCJQb2x5Z29uXCIsXG4gIHByb3BzOiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6ICEwXG4gICAgfVxuICB9LFxuICBlbWl0czogRixcbiAgc2V0dXAobiwgeyBlbWl0OiBlIH0pIHtcbiAgICBjb25zdCB0ID0gJChuLCBcIm9wdGlvbnNcIik7XG4gICAgcmV0dXJuIHsgcG9seWdvbjogVihcIlBvbHlnb25cIiwgRiwgdCwgZSkgfTtcbiAgfSxcbiAgcmVuZGVyOiAoKSA9PiBudWxsXG59KSwgeWUgPSBGLmNvbmNhdChbXCJib3VuZHNfY2hhbmdlZFwiXSksIEF0ID0gUCh7XG4gIG5hbWU6IFwiUmVjdGFuZ2xlXCIsXG4gIHByb3BzOiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6ICEwXG4gICAgfVxuICB9LFxuICBlbWl0czogeWUsXG4gIHNldHVwKG4sIHsgZW1pdDogZSB9KSB7XG4gICAgY29uc3QgdCA9ICQobiwgXCJvcHRpb25zXCIpO1xuICAgIHJldHVybiB7IHJlY3RhbmdsZTogVihcIlJlY3RhbmdsZVwiLCB5ZSwgdCwgZSkgfTtcbiAgfSxcbiAgcmVuZGVyOiAoKSA9PiBudWxsXG59KSwgd2UgPSBGLmNvbmNhdChbXCJjZW50ZXJfY2hhbmdlZFwiLCBcInJhZGl1c19jaGFuZ2VkXCJdKSwgSXQgPSBQKHtcbiAgbmFtZTogXCJDaXJjbGVcIixcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITBcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiB3ZSxcbiAgc2V0dXAobiwgeyBlbWl0OiBlIH0pIHtcbiAgICBjb25zdCB0ID0gJChuLCBcIm9wdGlvbnNcIik7XG4gICAgcmV0dXJuIHsgY2lyY2xlOiBWKFwiQ2lyY2xlXCIsIHdlLCB0LCBlKSB9O1xuICB9LFxuICByZW5kZXI6ICgpID0+IG51bGxcbn0pLCBYZSA9IFAoe1xuICBwcm9wczoge1xuICAgIHBvc2l0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITBcbiAgICB9LFxuICAgIGluZGV4OiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICBkZWZhdWx0OiAxXG4gICAgfVxuICB9LFxuICBlbWl0czogW1wiY29udGVudDpsb2FkZWRcIl0sXG4gIHNldHVwKG4sIHsgZW1pdDogZSB9KSB7XG4gICAgY29uc3QgdCA9IHkobnVsbCksIHMgPSBiKEIsIHkoKSksIHIgPSBiKFosIHkoKSksIG8gPSBiKEFlLCB5KCExKSksIGkgPSBMKFxuICAgICAgW28sIHIsIHRdLFxuICAgICAgKFtkLCB1LCBsXSkgPT4ge1xuICAgICAgICB1ICYmIGQgJiYgbCAmJiAoYyhuLnBvc2l0aW9uKSwgZShcImNvbnRlbnQ6bG9hZGVkXCIpLCBzZXRUaW1lb3V0KGksIDApKTtcbiAgICAgIH0sXG4gICAgICB7IGltbWVkaWF0ZTogITAgfVxuICAgICksIGMgPSAoZCkgPT4ge1xuICAgICAgaWYgKHMudmFsdWUgJiYgci52YWx1ZSAmJiB0LnZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHUgPSByLnZhbHVlLkNvbnRyb2xQb3NpdGlvbltkXTtcbiAgICAgICAgcy52YWx1ZS5jb250cm9sc1t1XS5wdXNoKHQudmFsdWUpO1xuICAgICAgfVxuICAgIH0sIGEgPSAoZCkgPT4ge1xuICAgICAgaWYgKHMudmFsdWUgJiYgci52YWx1ZSkge1xuICAgICAgICBsZXQgdSA9IG51bGw7XG4gICAgICAgIGNvbnN0IGwgPSByLnZhbHVlLkNvbnRyb2xQb3NpdGlvbltkXTtcbiAgICAgICAgcy52YWx1ZS5jb250cm9sc1tsXS5mb3JFYWNoKChoLCBwKSA9PiB7XG4gICAgICAgICAgaCA9PT0gdC52YWx1ZSAmJiAodSA9IHApO1xuICAgICAgICB9KSwgdSAhPT0gbnVsbCAmJiBzLnZhbHVlLmNvbnRyb2xzW2xdLnJlbW92ZUF0KHUpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHEoKCkgPT4gYShuLnBvc2l0aW9uKSksIEwoXG4gICAgICAoKSA9PiBuLnBvc2l0aW9uLFxuICAgICAgKGQsIHUpID0+IHtcbiAgICAgICAgYSh1KSwgYyhkKTtcbiAgICAgIH1cbiAgICApLCBMKFxuICAgICAgKCkgPT4gbi5pbmRleCxcbiAgICAgIChkKSA9PiB7XG4gICAgICAgIGQgJiYgdC52YWx1ZSAmJiAodC52YWx1ZS5pbmRleCA9IG4uaW5kZXgpO1xuICAgICAgfVxuICAgICksIHsgY29udHJvbFJlZjogdCB9O1xuICB9XG59KTtcbmNvbnN0IFFlID0ge1xuICByZWY6IFwiY29udHJvbFJlZlwiLFxuICBjbGFzczogXCJjdXN0b20tY29udHJvbC13cmFwcGVyXCJcbn07XG5mdW5jdGlvbiBldChuLCBlLCB0LCBzLCByLCBvKSB7XG4gIHJldHVybiBKKCksIFgoXCJkaXZcIiwgUWUsIFtcbiAgICBRKG4uJHNsb3RzLCBcImRlZmF1bHRcIiwge30sIHZvaWQgMCwgITApXG4gIF0sIDUxMik7XG59XG5jb25zdCBUdCA9IC8qIEBfX1BVUkVfXyAqLyB0ZShYZSwgW1tcInJlbmRlclwiLCBldF0sIFtcIl9fc2NvcGVJZFwiLCBcImRhdGEtdi1kMDk5YTNhNlwiXV0pLCBfZSA9IFtcImNsb3NlY2xpY2tcIiwgXCJjb250ZW50X2NoYW5nZWRcIiwgXCJkb21yZWFkeVwiLCBcInBvc2l0aW9uX2NoYW5nZWRcIiwgXCJ2aXNpYmxlXCIsIFwiemluZGV4X2NoYW5nZWRcIl0sIHR0ID0gUCh7XG4gIGluaGVyaXRBdHRyczogITEsXG4gIHByb3BzOiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogKCkgPT4gKHt9KVxuICAgIH0sXG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgdHlwZTogQm9vbGVhblxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFsuLi5fZSwgXCJ1cGRhdGU6bW9kZWxWYWx1ZVwiXSxcbiAgc2V0dXAobiwgeyBzbG90czogZSwgZW1pdDogdCwgZXhwb3NlOiBzIH0pIHtcbiAgICBjb25zdCByID0geSgpLCBvID0geSgpLCBpID0gYihCLCB5KCkpLCBjID0gYihaLCB5KCkpLCBhID0gYihsZSwgeSgpKTtcbiAgICBsZXQgZCwgdSA9IG4ubW9kZWxWYWx1ZTtcbiAgICBjb25zdCBsID0gSCgoKSA9PiB7XG4gICAgICB2YXIgZjtcbiAgICAgIHJldHVybiAoZiA9IGUuZGVmYXVsdCkgPT0gbnVsbCA/IHZvaWQgMCA6IGYuY2FsbChlKS5zb21lKChnKSA9PiBnLnR5cGUgIT09IExlKTtcbiAgICB9KSwgaCA9IChmKSA9PiB7XG4gICAgICB1ID0gZiwgdChcInVwZGF0ZTptb2RlbFZhbHVlXCIsIGYpO1xuICAgIH0sIHAgPSAoZikgPT4ge1xuICAgICAgci52YWx1ZSAmJiAoci52YWx1ZS5vcGVuKHsgbWFwOiBpLnZhbHVlLCBhbmNob3I6IGEudmFsdWUsIC4uLmYgfSksIGgoITApKTtcbiAgICB9LCBtID0gKCkgPT4ge1xuICAgICAgci52YWx1ZSAmJiAoci52YWx1ZS5jbG9zZSgpLCBoKCExKSk7XG4gICAgfTtcbiAgICByZXR1cm4gUGUoKCkgPT4ge1xuICAgICAgTChcbiAgICAgICAgW2ksICgpID0+IG4ub3B0aW9uc10sXG4gICAgICAgIChbZiwgZ10sIFt2LCB3XSkgPT4ge1xuICAgICAgICAgIHZhciBPO1xuICAgICAgICAgIGNvbnN0IF8gPSAhQShnLCB3KSB8fCBpLnZhbHVlICE9PSB2O1xuICAgICAgICAgIGkudmFsdWUgJiYgYy52YWx1ZSAmJiBfICYmIChyLnZhbHVlID8gKHIudmFsdWUuc2V0T3B0aW9ucyh7XG4gICAgICAgICAgICAuLi5nLFxuICAgICAgICAgICAgY29udGVudDogbC52YWx1ZSA/IG8udmFsdWUgOiBnLmNvbnRlbnRcbiAgICAgICAgICB9KSwgYS52YWx1ZSB8fCBwKCkpIDogKHIudmFsdWUgPSB4KFxuICAgICAgICAgICAgbmV3IGMudmFsdWUuSW5mb1dpbmRvdyh7XG4gICAgICAgICAgICAgIC4uLmcsXG4gICAgICAgICAgICAgIGNvbnRlbnQ6IGwudmFsdWUgPyBvLnZhbHVlIDogZy5jb250ZW50XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICksIGEudmFsdWUgJiYgKGQgPSBhLnZhbHVlLmFkZExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgcCgpO1xuICAgICAgICAgIH0pKSwgKCFhLnZhbHVlIHx8IHUpICYmIHAoKSwgX2UuZm9yRWFjaCgoTSkgPT4ge1xuICAgICAgICAgICAgdmFyIEU7XG4gICAgICAgICAgICAoRSA9IHIudmFsdWUpID09IG51bGwgfHwgRS5hZGRMaXN0ZW5lcihNLCAoaykgPT4gdChNLCBrKSk7XG4gICAgICAgICAgfSksIChPID0gci52YWx1ZSkgPT0gbnVsbCB8fCBPLmFkZExpc3RlbmVyKFwiY2xvc2VjbGlja1wiLCAoKSA9PiBoKCExKSkpKTtcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGltbWVkaWF0ZTogITBcbiAgICAgICAgfVxuICAgICAgKSwgTChcbiAgICAgICAgKCkgPT4gbi5tb2RlbFZhbHVlLFxuICAgICAgICAoZikgPT4ge1xuICAgICAgICAgIGYgIT09IHUgJiYgKGYgPyBwKCkgOiBtKCkpO1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pLCBxKCgpID0+IHtcbiAgICAgIHZhciBmO1xuICAgICAgZCAmJiBkLnJlbW92ZSgpLCByLnZhbHVlICYmICgoZiA9IGMudmFsdWUpID09IG51bGwgfHwgZi5ldmVudC5jbGVhckluc3RhbmNlTGlzdGVuZXJzKHIudmFsdWUpLCBtKCkpO1xuICAgIH0pLCBzKHsgaW5mb1dpbmRvdzogciwgb3BlbjogcCwgY2xvc2U6IG0gfSksIHsgaW5mb1dpbmRvdzogciwgaW5mb1dpbmRvd1JlZjogbywgaGFzU2xvdENvbnRlbnQ6IGwsIG9wZW46IHAsIGNsb3NlOiBtIH07XG4gIH1cbn0pO1xuY29uc3Qgc3QgPSB7XG4gIGtleTogMCxcbiAgY2xhc3M6IFwiaW5mby13aW5kb3ctd3JhcHBlclwiXG59O1xuZnVuY3Rpb24gcnQobiwgZSwgdCwgcywgciwgbykge1xuICByZXR1cm4gbi5oYXNTbG90Q29udGVudCA/IChKKCksIFgoXCJkaXZcIiwgc3QsIFtcbiAgICBhZShcImRpdlwiLCBTZSh7IHJlZjogXCJpbmZvV2luZG93UmVmXCIgfSwgbi4kYXR0cnMpLCBbXG4gICAgICBRKG4uJHNsb3RzLCBcImRlZmF1bHRcIiwge30sIHZvaWQgMCwgITApXG4gICAgXSwgMTYpXG4gIF0pKSA6IHhlKFwiXCIsICEwKTtcbn1cbmNvbnN0ICR0ID0gLyogQF9fUFVSRV9fICovIHRlKHR0LCBbW1wicmVuZGVyXCIsIHJ0XSwgW1wiX19zY29wZUlkXCIsIFwiZGF0YS12LWNiZTE3MDdiXCJdXSksIGtlID0gW1xuICBJbnQ4QXJyYXksXG4gIFVpbnQ4QXJyYXksXG4gIFVpbnQ4Q2xhbXBlZEFycmF5LFxuICBJbnQxNkFycmF5LFxuICBVaW50MTZBcnJheSxcbiAgSW50MzJBcnJheSxcbiAgVWludDMyQXJyYXksXG4gIEZsb2F0MzJBcnJheSxcbiAgRmxvYXQ2NEFycmF5XG5dLCByZSA9IDEsIHogPSA4O1xuY2xhc3MgdWUge1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbmRleCBmcm9tIHJhdyBgQXJyYXlCdWZmZXJgIGRhdGEuXG4gICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGRhdGFcbiAgICovXG4gIHN0YXRpYyBmcm9tKGUpIHtcbiAgICBpZiAoIShlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0YSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIEFycmF5QnVmZmVyLlwiKTtcbiAgICBjb25zdCBbdCwgc10gPSBuZXcgVWludDhBcnJheShlLCAwLCAyKTtcbiAgICBpZiAodCAhPT0gMjE5KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0YSBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgaW4gYSBLREJ1c2ggZm9ybWF0LlwiKTtcbiAgICBjb25zdCByID0gcyA+PiA0O1xuICAgIGlmIChyICE9PSByZSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihgR290IHYke3J9IGRhdGEgd2hlbiBleHBlY3RlZCB2JHtyZX0uYCk7XG4gICAgY29uc3QgbyA9IGtlW3MgJiAxNV07XG4gICAgaWYgKCFvKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIGFycmF5IHR5cGUuXCIpO1xuICAgIGNvbnN0IFtpXSA9IG5ldyBVaW50MTZBcnJheShlLCAyLCAxKSwgW2NdID0gbmV3IFVpbnQzMkFycmF5KGUsIDQsIDEpO1xuICAgIHJldHVybiBuZXcgdWUoYywgaSwgbywgZSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5kZXggdGhhdCB3aWxsIGhvbGQgYSBnaXZlbiBudW1iZXIgb2YgaXRlbXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1JdGVtc1xuICAgKiBAcGFyYW0ge251bWJlcn0gW25vZGVTaXplPTY0XSBTaXplIG9mIHRoZSBLRC10cmVlIG5vZGUgKDY0IGJ5IGRlZmF1bHQpLlxuICAgKiBAcGFyYW0ge1R5cGVkQXJyYXlDb25zdHJ1Y3Rvcn0gW0FycmF5VHlwZT1GbG9hdDY0QXJyYXldIFRoZSBhcnJheSB0eXBlIHVzZWQgZm9yIGNvb3JkaW5hdGVzIHN0b3JhZ2UgKGBGbG9hdDY0QXJyYXlgIGJ5IGRlZmF1bHQpLlxuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBbZGF0YV0gKEZvciBpbnRlcm5hbCB1c2Ugb25seSlcbiAgICovXG4gIGNvbnN0cnVjdG9yKGUsIHQgPSA2NCwgcyA9IEZsb2F0NjRBcnJheSwgcikge1xuICAgIGlmIChpc05hTihlKSB8fCBlIDwgMClcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5wZXhwZWN0ZWQgbnVtSXRlbXMgdmFsdWU6ICR7ZX0uYCk7XG4gICAgdGhpcy5udW1JdGVtcyA9ICtlLCB0aGlzLm5vZGVTaXplID0gTWF0aC5taW4oTWF0aC5tYXgoK3QsIDIpLCA2NTUzNSksIHRoaXMuQXJyYXlUeXBlID0gcywgdGhpcy5JbmRleEFycmF5VHlwZSA9IGUgPCA2NTUzNiA/IFVpbnQxNkFycmF5IDogVWludDMyQXJyYXk7XG4gICAgY29uc3QgbyA9IGtlLmluZGV4T2YodGhpcy5BcnJheVR5cGUpLCBpID0gZSAqIDIgKiB0aGlzLkFycmF5VHlwZS5CWVRFU19QRVJfRUxFTUVOVCwgYyA9IGUgKiB0aGlzLkluZGV4QXJyYXlUeXBlLkJZVEVTX1BFUl9FTEVNRU5ULCBhID0gKDggLSBjICUgOCkgJSA4O1xuICAgIGlmIChvIDwgMClcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCB0eXBlZCBhcnJheSBjbGFzczogJHtzfS5gKTtcbiAgICByICYmIHIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/ICh0aGlzLmRhdGEgPSByLCB0aGlzLmlkcyA9IG5ldyB0aGlzLkluZGV4QXJyYXlUeXBlKHRoaXMuZGF0YSwgeiwgZSksIHRoaXMuY29vcmRzID0gbmV3IHRoaXMuQXJyYXlUeXBlKHRoaXMuZGF0YSwgeiArIGMgKyBhLCBlICogMiksIHRoaXMuX3BvcyA9IGUgKiAyLCB0aGlzLl9maW5pc2hlZCA9ICEwKSA6ICh0aGlzLmRhdGEgPSBuZXcgQXJyYXlCdWZmZXIoeiArIGkgKyBjICsgYSksIHRoaXMuaWRzID0gbmV3IHRoaXMuSW5kZXhBcnJheVR5cGUodGhpcy5kYXRhLCB6LCBlKSwgdGhpcy5jb29yZHMgPSBuZXcgdGhpcy5BcnJheVR5cGUodGhpcy5kYXRhLCB6ICsgYyArIGEsIGUgKiAyKSwgdGhpcy5fcG9zID0gMCwgdGhpcy5fZmluaXNoZWQgPSAhMSwgbmV3IFVpbnQ4QXJyYXkodGhpcy5kYXRhLCAwLCAyKS5zZXQoWzIxOSwgKHJlIDw8IDQpICsgb10pLCBuZXcgVWludDE2QXJyYXkodGhpcy5kYXRhLCAyLCAxKVswXSA9IHQsIG5ldyBVaW50MzJBcnJheSh0aGlzLmRhdGEsIDQsIDEpWzBdID0gZSk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHBvaW50IHRvIHRoZSBpbmRleC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICogQHJldHVybnMge251bWJlcn0gQW4gaW5jcmVtZW50YWwgaW5kZXggYXNzb2NpYXRlZCB3aXRoIHRoZSBhZGRlZCBpdGVtIChzdGFydGluZyBmcm9tIGAwYCkuXG4gICAqL1xuICBhZGQoZSwgdCkge1xuICAgIGNvbnN0IHMgPSB0aGlzLl9wb3MgPj4gMTtcbiAgICByZXR1cm4gdGhpcy5pZHNbc10gPSBzLCB0aGlzLmNvb3Jkc1t0aGlzLl9wb3MrK10gPSBlLCB0aGlzLmNvb3Jkc1t0aGlzLl9wb3MrK10gPSB0LCBzO1xuICB9XG4gIC8qKlxuICAgKiBQZXJmb3JtIGluZGV4aW5nIG9mIHRoZSBhZGRlZCBwb2ludHMuXG4gICAqL1xuICBmaW5pc2goKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuX3BvcyA+PiAxO1xuICAgIGlmIChlICE9PSB0aGlzLm51bUl0ZW1zKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBBZGRlZCAke2V9IGl0ZW1zIHdoZW4gZXhwZWN0ZWQgJHt0aGlzLm51bUl0ZW1zfS5gKTtcbiAgICByZXR1cm4gaWUodGhpcy5pZHMsIHRoaXMuY29vcmRzLCB0aGlzLm5vZGVTaXplLCAwLCB0aGlzLm51bUl0ZW1zIC0gMSwgMCksIHRoaXMuX2ZpbmlzaGVkID0gITAsIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFNlYXJjaCB0aGUgaW5kZXggZm9yIGl0ZW1zIHdpdGhpbiBhIGdpdmVuIGJvdW5kaW5nIGJveC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1pblhcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1pbllcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heFhcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1heFlcbiAgICogQHJldHVybnMge251bWJlcltdfSBBbiBhcnJheSBvZiBpbmRpY2VzIGNvcnJlcG9uZGluZyB0byB0aGUgZm91bmQgaXRlbXMuXG4gICAqL1xuICByYW5nZShlLCB0LCBzLCByKSB7XG4gICAgaWYgKCF0aGlzLl9maW5pc2hlZClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRhdGEgbm90IHlldCBpbmRleGVkIC0gY2FsbCBpbmRleC5maW5pc2goKS5cIik7XG4gICAgY29uc3QgeyBpZHM6IG8sIGNvb3JkczogaSwgbm9kZVNpemU6IGMgfSA9IHRoaXMsIGEgPSBbMCwgby5sZW5ndGggLSAxLCAwXSwgZCA9IFtdO1xuICAgIGZvciAoOyBhLmxlbmd0aDsgKSB7XG4gICAgICBjb25zdCB1ID0gYS5wb3AoKSB8fCAwLCBsID0gYS5wb3AoKSB8fCAwLCBoID0gYS5wb3AoKSB8fCAwO1xuICAgICAgaWYgKGwgLSBoIDw9IGMpIHtcbiAgICAgICAgZm9yIChsZXQgZyA9IGg7IGcgPD0gbDsgZysrKSB7XG4gICAgICAgICAgY29uc3QgdiA9IGlbMiAqIGddLCB3ID0gaVsyICogZyArIDFdO1xuICAgICAgICAgIHYgPj0gZSAmJiB2IDw9IHMgJiYgdyA+PSB0ICYmIHcgPD0gciAmJiBkLnB1c2gob1tnXSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBwID0gaCArIGwgPj4gMSwgbSA9IGlbMiAqIHBdLCBmID0gaVsyICogcCArIDFdO1xuICAgICAgbSA+PSBlICYmIG0gPD0gcyAmJiBmID49IHQgJiYgZiA8PSByICYmIGQucHVzaChvW3BdKSwgKHUgPT09IDAgPyBlIDw9IG0gOiB0IDw9IGYpICYmIChhLnB1c2goaCksIGEucHVzaChwIC0gMSksIGEucHVzaCgxIC0gdSkpLCAodSA9PT0gMCA/IHMgPj0gbSA6IHIgPj0gZikgJiYgKGEucHVzaChwICsgMSksIGEucHVzaChsKSwgYS5wdXNoKDEgLSB1KSk7XG4gICAgfVxuICAgIHJldHVybiBkO1xuICB9XG4gIC8qKlxuICAgKiBTZWFyY2ggdGhlIGluZGV4IGZvciBpdGVtcyB3aXRoaW4gYSBnaXZlbiByYWRpdXMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBxeFxuICAgKiBAcGFyYW0ge251bWJlcn0gcXlcbiAgICogQHBhcmFtIHtudW1iZXJ9IHIgUXVlcnkgcmFkaXVzLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyW119IEFuIGFycmF5IG9mIGluZGljZXMgY29ycmVwb25kaW5nIHRvIHRoZSBmb3VuZCBpdGVtcy5cbiAgICovXG4gIHdpdGhpbihlLCB0LCBzKSB7XG4gICAgaWYgKCF0aGlzLl9maW5pc2hlZClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRhdGEgbm90IHlldCBpbmRleGVkIC0gY2FsbCBpbmRleC5maW5pc2goKS5cIik7XG4gICAgY29uc3QgeyBpZHM6IHIsIGNvb3Jkczogbywgbm9kZVNpemU6IGkgfSA9IHRoaXMsIGMgPSBbMCwgci5sZW5ndGggLSAxLCAwXSwgYSA9IFtdLCBkID0gcyAqIHM7XG4gICAgZm9yICg7IGMubGVuZ3RoOyApIHtcbiAgICAgIGNvbnN0IHUgPSBjLnBvcCgpIHx8IDAsIGwgPSBjLnBvcCgpIHx8IDAsIGggPSBjLnBvcCgpIHx8IDA7XG4gICAgICBpZiAobCAtIGggPD0gaSkge1xuICAgICAgICBmb3IgKGxldCBnID0gaDsgZyA8PSBsOyBnKyspXG4gICAgICAgICAgQ2Uob1syICogZ10sIG9bMiAqIGcgKyAxXSwgZSwgdCkgPD0gZCAmJiBhLnB1c2gocltnXSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgcCA9IGggKyBsID4+IDEsIG0gPSBvWzIgKiBwXSwgZiA9IG9bMiAqIHAgKyAxXTtcbiAgICAgIENlKG0sIGYsIGUsIHQpIDw9IGQgJiYgYS5wdXNoKHJbcF0pLCAodSA9PT0gMCA/IGUgLSBzIDw9IG0gOiB0IC0gcyA8PSBmKSAmJiAoYy5wdXNoKGgpLCBjLnB1c2gocCAtIDEpLCBjLnB1c2goMSAtIHUpKSwgKHUgPT09IDAgPyBlICsgcyA+PSBtIDogdCArIHMgPj0gZikgJiYgKGMucHVzaChwICsgMSksIGMucHVzaChsKSwgYy5wdXNoKDEgLSB1KSk7XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9XG59XG5mdW5jdGlvbiBpZShuLCBlLCB0LCBzLCByLCBvKSB7XG4gIGlmIChyIC0gcyA8PSB0KVxuICAgIHJldHVybjtcbiAgY29uc3QgaSA9IHMgKyByID4+IDE7XG4gIEllKG4sIGUsIGksIHMsIHIsIG8pLCBpZShuLCBlLCB0LCBzLCBpIC0gMSwgMSAtIG8pLCBpZShuLCBlLCB0LCBpICsgMSwgciwgMSAtIG8pO1xufVxuZnVuY3Rpb24gSWUobiwgZSwgdCwgcywgciwgbykge1xuICBmb3IgKDsgciA+IHM7ICkge1xuICAgIGlmIChyIC0gcyA+IDYwMCkge1xuICAgICAgY29uc3QgZCA9IHIgLSBzICsgMSwgdSA9IHQgLSBzICsgMSwgbCA9IE1hdGgubG9nKGQpLCBoID0gMC41ICogTWF0aC5leHAoMiAqIGwgLyAzKSwgcCA9IDAuNSAqIE1hdGguc3FydChsICogaCAqIChkIC0gaCkgLyBkKSAqICh1IC0gZCAvIDIgPCAwID8gLTEgOiAxKSwgbSA9IE1hdGgubWF4KHMsIE1hdGguZmxvb3IodCAtIHUgKiBoIC8gZCArIHApKSwgZiA9IE1hdGgubWluKHIsIE1hdGguZmxvb3IodCArIChkIC0gdSkgKiBoIC8gZCArIHApKTtcbiAgICAgIEllKG4sIGUsIHQsIG0sIGYsIG8pO1xuICAgIH1cbiAgICBjb25zdCBpID0gZVsyICogdCArIG9dO1xuICAgIGxldCBjID0gcywgYSA9IHI7XG4gICAgZm9yIChHKG4sIGUsIHMsIHQpLCBlWzIgKiByICsgb10gPiBpICYmIEcobiwgZSwgcywgcik7IGMgPCBhOyApIHtcbiAgICAgIGZvciAoRyhuLCBlLCBjLCBhKSwgYysrLCBhLS07IGVbMiAqIGMgKyBvXSA8IGk7IClcbiAgICAgICAgYysrO1xuICAgICAgZm9yICg7IGVbMiAqIGEgKyBvXSA+IGk7IClcbiAgICAgICAgYS0tO1xuICAgIH1cbiAgICBlWzIgKiBzICsgb10gPT09IGkgPyBHKG4sIGUsIHMsIGEpIDogKGErKywgRyhuLCBlLCBhLCByKSksIGEgPD0gdCAmJiAocyA9IGEgKyAxKSwgdCA8PSBhICYmIChyID0gYSAtIDEpO1xuICB9XG59XG5mdW5jdGlvbiBHKG4sIGUsIHQsIHMpIHtcbiAgbmUobiwgdCwgcyksIG5lKGUsIDIgKiB0LCAyICogcyksIG5lKGUsIDIgKiB0ICsgMSwgMiAqIHMgKyAxKTtcbn1cbmZ1bmN0aW9uIG5lKG4sIGUsIHQpIHtcbiAgY29uc3QgcyA9IG5bZV07XG4gIG5bZV0gPSBuW3RdLCBuW3RdID0gcztcbn1cbmZ1bmN0aW9uIENlKG4sIGUsIHQsIHMpIHtcbiAgY29uc3QgciA9IG4gLSB0LCBvID0gZSAtIHM7XG4gIHJldHVybiByICogciArIG8gKiBvO1xufVxuY29uc3QgbnQgPSB7XG4gIG1pblpvb206IDAsXG4gIC8vIG1pbiB6b29tIHRvIGdlbmVyYXRlIGNsdXN0ZXJzIG9uXG4gIG1heFpvb206IDE2LFxuICAvLyBtYXggem9vbSBsZXZlbCB0byBjbHVzdGVyIHRoZSBwb2ludHMgb25cbiAgbWluUG9pbnRzOiAyLFxuICAvLyBtaW5pbXVtIHBvaW50cyB0byBmb3JtIGEgY2x1c3RlclxuICByYWRpdXM6IDQwLFxuICAvLyBjbHVzdGVyIHJhZGl1cyBpbiBwaXhlbHNcbiAgZXh0ZW50OiA1MTIsXG4gIC8vIHRpbGUgZXh0ZW50IChyYWRpdXMgaXMgY2FsY3VsYXRlZCByZWxhdGl2ZSB0byBpdClcbiAgbm9kZVNpemU6IDY0LFxuICAvLyBzaXplIG9mIHRoZSBLRC10cmVlIGxlYWYgbm9kZSwgYWZmZWN0cyBwZXJmb3JtYW5jZVxuICBsb2c6ICExLFxuICAvLyB3aGV0aGVyIHRvIGxvZyB0aW1pbmcgaW5mb1xuICAvLyB3aGV0aGVyIHRvIGdlbmVyYXRlIG51bWVyaWMgaWRzIGZvciBpbnB1dCBmZWF0dXJlcyAoaW4gdmVjdG9yIHRpbGVzKVxuICBnZW5lcmF0ZUlkOiAhMSxcbiAgLy8gYSByZWR1Y2UgZnVuY3Rpb24gZm9yIGNhbGN1bGF0aW5nIGN1c3RvbSBjbHVzdGVyIHByb3BlcnRpZXNcbiAgcmVkdWNlOiBudWxsLFxuICAvLyAoYWNjdW11bGF0ZWQsIHByb3BzKSA9PiB7IGFjY3VtdWxhdGVkLnN1bSArPSBwcm9wcy5zdW07IH1cbiAgLy8gcHJvcGVydGllcyB0byB1c2UgZm9yIGluZGl2aWR1YWwgcG9pbnRzIHdoZW4gcnVubmluZyB0aGUgcmVkdWNlclxuICBtYXA6IChuKSA9PiBuXG4gIC8vIHByb3BzID0+ICh7c3VtOiBwcm9wcy5teV92YWx1ZX0pXG59LCBiZSA9IE1hdGguZnJvdW5kIHx8ICgobikgPT4gKGUpID0+IChuWzBdID0gK2UsIG5bMF0pKShuZXcgRmxvYXQzMkFycmF5KDEpKSwgUiA9IDIsIFQgPSAzLCBvZSA9IDQsIEkgPSA1LCBUZSA9IDY7XG5jbGFzcyAkZSB7XG4gIGNvbnN0cnVjdG9yKGUpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnQpLCBlKSwgdGhpcy50cmVlcyA9IG5ldyBBcnJheSh0aGlzLm9wdGlvbnMubWF4Wm9vbSArIDEpLCB0aGlzLnN0cmlkZSA9IHRoaXMub3B0aW9ucy5yZWR1Y2UgPyA3IDogNiwgdGhpcy5jbHVzdGVyUHJvcHMgPSBbXTtcbiAgfVxuICBsb2FkKGUpIHtcbiAgICBjb25zdCB7IGxvZzogdCwgbWluWm9vbTogcywgbWF4Wm9vbTogciB9ID0gdGhpcy5vcHRpb25zO1xuICAgIHQgJiYgY29uc29sZS50aW1lKFwidG90YWwgdGltZVwiKTtcbiAgICBjb25zdCBvID0gYHByZXBhcmUgJHtlLmxlbmd0aH0gcG9pbnRzYDtcbiAgICB0ICYmIGNvbnNvbGUudGltZShvKSwgdGhpcy5wb2ludHMgPSBlO1xuICAgIGNvbnN0IGkgPSBbXTtcbiAgICBmb3IgKGxldCBhID0gMDsgYSA8IGUubGVuZ3RoOyBhKyspIHtcbiAgICAgIGNvbnN0IGQgPSBlW2FdO1xuICAgICAgaWYgKCFkLmdlb21ldHJ5KVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNvbnN0IFt1LCBsXSA9IGQuZ2VvbWV0cnkuY29vcmRpbmF0ZXMsIGggPSBiZShLKHUpKSwgcCA9IGJlKFkobCkpO1xuICAgICAgaS5wdXNoKFxuICAgICAgICBoLFxuICAgICAgICBwLFxuICAgICAgICAvLyBwcm9qZWN0ZWQgcG9pbnQgY29vcmRpbmF0ZXNcbiAgICAgICAgMSAvIDAsXG4gICAgICAgIC8vIHRoZSBsYXN0IHpvb20gdGhlIHBvaW50IHdhcyBwcm9jZXNzZWQgYXRcbiAgICAgICAgYSxcbiAgICAgICAgLy8gaW5kZXggb2YgdGhlIHNvdXJjZSBmZWF0dXJlIGluIHRoZSBvcmlnaW5hbCBpbnB1dCBhcnJheVxuICAgICAgICAtMSxcbiAgICAgICAgLy8gcGFyZW50IGNsdXN0ZXIgaWRcbiAgICAgICAgMVxuICAgICAgICAvLyBudW1iZXIgb2YgcG9pbnRzIGluIGEgY2x1c3RlclxuICAgICAgKSwgdGhpcy5vcHRpb25zLnJlZHVjZSAmJiBpLnB1c2goMCk7XG4gICAgfVxuICAgIGxldCBjID0gdGhpcy50cmVlc1tyICsgMV0gPSB0aGlzLl9jcmVhdGVUcmVlKGkpO1xuICAgIHQgJiYgY29uc29sZS50aW1lRW5kKG8pO1xuICAgIGZvciAobGV0IGEgPSByOyBhID49IHM7IGEtLSkge1xuICAgICAgY29uc3QgZCA9ICtEYXRlLm5vdygpO1xuICAgICAgYyA9IHRoaXMudHJlZXNbYV0gPSB0aGlzLl9jcmVhdGVUcmVlKHRoaXMuX2NsdXN0ZXIoYywgYSkpLCB0ICYmIGNvbnNvbGUubG9nKFwieiVkOiAlZCBjbHVzdGVycyBpbiAlZG1zXCIsIGEsIGMubnVtSXRlbXMsICtEYXRlLm5vdygpIC0gZCk7XG4gICAgfVxuICAgIHJldHVybiB0ICYmIGNvbnNvbGUudGltZUVuZChcInRvdGFsIHRpbWVcIiksIHRoaXM7XG4gIH1cbiAgZ2V0Q2x1c3RlcnMoZSwgdCkge1xuICAgIGxldCBzID0gKChlWzBdICsgMTgwKSAlIDM2MCArIDM2MCkgJSAzNjAgLSAxODA7XG4gICAgY29uc3QgciA9IE1hdGgubWF4KC05MCwgTWF0aC5taW4oOTAsIGVbMV0pKTtcbiAgICBsZXQgbyA9IGVbMl0gPT09IDE4MCA/IDE4MCA6ICgoZVsyXSArIDE4MCkgJSAzNjAgKyAzNjApICUgMzYwIC0gMTgwO1xuICAgIGNvbnN0IGkgPSBNYXRoLm1heCgtOTAsIE1hdGgubWluKDkwLCBlWzNdKSk7XG4gICAgaWYgKGVbMl0gLSBlWzBdID49IDM2MClcbiAgICAgIHMgPSAtMTgwLCBvID0gMTgwO1xuICAgIGVsc2UgaWYgKHMgPiBvKSB7XG4gICAgICBjb25zdCBsID0gdGhpcy5nZXRDbHVzdGVycyhbcywgciwgMTgwLCBpXSwgdCksIGggPSB0aGlzLmdldENsdXN0ZXJzKFstMTgwLCByLCBvLCBpXSwgdCk7XG4gICAgICByZXR1cm4gbC5jb25jYXQoaCk7XG4gICAgfVxuICAgIGNvbnN0IGMgPSB0aGlzLnRyZWVzW3RoaXMuX2xpbWl0Wm9vbSh0KV0sIGEgPSBjLnJhbmdlKEsocyksIFkoaSksIEsobyksIFkocikpLCBkID0gYy5kYXRhLCB1ID0gW107XG4gICAgZm9yIChjb25zdCBsIG9mIGEpIHtcbiAgICAgIGNvbnN0IGggPSB0aGlzLnN0cmlkZSAqIGw7XG4gICAgICB1LnB1c2goZFtoICsgSV0gPiAxID8gTWUoZCwgaCwgdGhpcy5jbHVzdGVyUHJvcHMpIDogdGhpcy5wb2ludHNbZFtoICsgVF1dKTtcbiAgICB9XG4gICAgcmV0dXJuIHU7XG4gIH1cbiAgZ2V0Q2hpbGRyZW4oZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLl9nZXRPcmlnaW5JZChlKSwgcyA9IHRoaXMuX2dldE9yaWdpblpvb20oZSksIHIgPSBcIk5vIGNsdXN0ZXIgd2l0aCB0aGUgc3BlY2lmaWVkIGlkLlwiLCBvID0gdGhpcy50cmVlc1tzXTtcbiAgICBpZiAoIW8pXG4gICAgICB0aHJvdyBuZXcgRXJyb3Iocik7XG4gICAgY29uc3QgaSA9IG8uZGF0YTtcbiAgICBpZiAodCAqIHRoaXMuc3RyaWRlID49IGkubGVuZ3RoKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKHIpO1xuICAgIGNvbnN0IGMgPSB0aGlzLm9wdGlvbnMucmFkaXVzIC8gKHRoaXMub3B0aW9ucy5leHRlbnQgKiBNYXRoLnBvdygyLCBzIC0gMSkpLCBhID0gaVt0ICogdGhpcy5zdHJpZGVdLCBkID0gaVt0ICogdGhpcy5zdHJpZGUgKyAxXSwgdSA9IG8ud2l0aGluKGEsIGQsIGMpLCBsID0gW107XG4gICAgZm9yIChjb25zdCBoIG9mIHUpIHtcbiAgICAgIGNvbnN0IHAgPSBoICogdGhpcy5zdHJpZGU7XG4gICAgICBpW3AgKyBvZV0gPT09IGUgJiYgbC5wdXNoKGlbcCArIEldID4gMSA/IE1lKGksIHAsIHRoaXMuY2x1c3RlclByb3BzKSA6IHRoaXMucG9pbnRzW2lbcCArIFRdXSk7XG4gICAgfVxuICAgIGlmIChsLmxlbmd0aCA9PT0gMClcbiAgICAgIHRocm93IG5ldyBFcnJvcihyKTtcbiAgICByZXR1cm4gbDtcbiAgfVxuICBnZXRMZWF2ZXMoZSwgdCwgcykge1xuICAgIHQgPSB0IHx8IDEwLCBzID0gcyB8fCAwO1xuICAgIGNvbnN0IHIgPSBbXTtcbiAgICByZXR1cm4gdGhpcy5fYXBwZW5kTGVhdmVzKHIsIGUsIHQsIHMsIDApLCByO1xuICB9XG4gIGdldFRpbGUoZSwgdCwgcykge1xuICAgIGNvbnN0IHIgPSB0aGlzLnRyZWVzW3RoaXMuX2xpbWl0Wm9vbShlKV0sIG8gPSBNYXRoLnBvdygyLCBlKSwgeyBleHRlbnQ6IGksIHJhZGl1czogYyB9ID0gdGhpcy5vcHRpb25zLCBhID0gYyAvIGksIGQgPSAocyAtIGEpIC8gbywgdSA9IChzICsgMSArIGEpIC8gbywgbCA9IHtcbiAgICAgIGZlYXR1cmVzOiBbXVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuX2FkZFRpbGVGZWF0dXJlcyhcbiAgICAgIHIucmFuZ2UoKHQgLSBhKSAvIG8sIGQsICh0ICsgMSArIGEpIC8gbywgdSksXG4gICAgICByLmRhdGEsXG4gICAgICB0LFxuICAgICAgcyxcbiAgICAgIG8sXG4gICAgICBsXG4gICAgKSwgdCA9PT0gMCAmJiB0aGlzLl9hZGRUaWxlRmVhdHVyZXMoXG4gICAgICByLnJhbmdlKDEgLSBhIC8gbywgZCwgMSwgdSksXG4gICAgICByLmRhdGEsXG4gICAgICBvLFxuICAgICAgcyxcbiAgICAgIG8sXG4gICAgICBsXG4gICAgKSwgdCA9PT0gbyAtIDEgJiYgdGhpcy5fYWRkVGlsZUZlYXR1cmVzKFxuICAgICAgci5yYW5nZSgwLCBkLCBhIC8gbywgdSksXG4gICAgICByLmRhdGEsXG4gICAgICAtMSxcbiAgICAgIHMsXG4gICAgICBvLFxuICAgICAgbFxuICAgICksIGwuZmVhdHVyZXMubGVuZ3RoID8gbCA6IG51bGw7XG4gIH1cbiAgZ2V0Q2x1c3RlckV4cGFuc2lvblpvb20oZSkge1xuICAgIGxldCB0ID0gdGhpcy5fZ2V0T3JpZ2luWm9vbShlKSAtIDE7XG4gICAgZm9yICg7IHQgPD0gdGhpcy5vcHRpb25zLm1heFpvb207ICkge1xuICAgICAgY29uc3QgcyA9IHRoaXMuZ2V0Q2hpbGRyZW4oZSk7XG4gICAgICBpZiAodCsrLCBzLmxlbmd0aCAhPT0gMSlcbiAgICAgICAgYnJlYWs7XG4gICAgICBlID0gc1swXS5wcm9wZXJ0aWVzLmNsdXN0ZXJfaWQ7XG4gICAgfVxuICAgIHJldHVybiB0O1xuICB9XG4gIF9hcHBlbmRMZWF2ZXMoZSwgdCwgcywgciwgbykge1xuICAgIGNvbnN0IGkgPSB0aGlzLmdldENoaWxkcmVuKHQpO1xuICAgIGZvciAoY29uc3QgYyBvZiBpKSB7XG4gICAgICBjb25zdCBhID0gYy5wcm9wZXJ0aWVzO1xuICAgICAgaWYgKGEgJiYgYS5jbHVzdGVyID8gbyArIGEucG9pbnRfY291bnQgPD0gciA/IG8gKz0gYS5wb2ludF9jb3VudCA6IG8gPSB0aGlzLl9hcHBlbmRMZWF2ZXMoZSwgYS5jbHVzdGVyX2lkLCBzLCByLCBvKSA6IG8gPCByID8gbysrIDogZS5wdXNoKGMpLCBlLmxlbmd0aCA9PT0gcylcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBvO1xuICB9XG4gIF9jcmVhdGVUcmVlKGUpIHtcbiAgICBjb25zdCB0ID0gbmV3IHVlKGUubGVuZ3RoIC8gdGhpcy5zdHJpZGUgfCAwLCB0aGlzLm9wdGlvbnMubm9kZVNpemUsIEZsb2F0MzJBcnJheSk7XG4gICAgZm9yIChsZXQgcyA9IDA7IHMgPCBlLmxlbmd0aDsgcyArPSB0aGlzLnN0cmlkZSlcbiAgICAgIHQuYWRkKGVbc10sIGVbcyArIDFdKTtcbiAgICByZXR1cm4gdC5maW5pc2goKSwgdC5kYXRhID0gZSwgdDtcbiAgfVxuICBfYWRkVGlsZUZlYXR1cmVzKGUsIHQsIHMsIHIsIG8sIGkpIHtcbiAgICBmb3IgKGNvbnN0IGMgb2YgZSkge1xuICAgICAgY29uc3QgYSA9IGMgKiB0aGlzLnN0cmlkZSwgZCA9IHRbYSArIEldID4gMTtcbiAgICAgIGxldCB1LCBsLCBoO1xuICAgICAgaWYgKGQpXG4gICAgICAgIHUgPSBSZSh0LCBhLCB0aGlzLmNsdXN0ZXJQcm9wcyksIGwgPSB0W2FdLCBoID0gdFthICsgMV07XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgZiA9IHRoaXMucG9pbnRzW3RbYSArIFRdXTtcbiAgICAgICAgdSA9IGYucHJvcGVydGllcztcbiAgICAgICAgY29uc3QgW2csIHZdID0gZi5nZW9tZXRyeS5jb29yZGluYXRlcztcbiAgICAgICAgbCA9IEsoZyksIGggPSBZKHYpO1xuICAgICAgfVxuICAgICAgY29uc3QgcCA9IHtcbiAgICAgICAgdHlwZTogMSxcbiAgICAgICAgZ2VvbWV0cnk6IFtbXG4gICAgICAgICAgTWF0aC5yb3VuZCh0aGlzLm9wdGlvbnMuZXh0ZW50ICogKGwgKiBvIC0gcykpLFxuICAgICAgICAgIE1hdGgucm91bmQodGhpcy5vcHRpb25zLmV4dGVudCAqIChoICogbyAtIHIpKVxuICAgICAgICBdXSxcbiAgICAgICAgdGFnczogdVxuICAgICAgfTtcbiAgICAgIGxldCBtO1xuICAgICAgZCB8fCB0aGlzLm9wdGlvbnMuZ2VuZXJhdGVJZCA/IG0gPSB0W2EgKyBUXSA6IG0gPSB0aGlzLnBvaW50c1t0W2EgKyBUXV0uaWQsIG0gIT09IHZvaWQgMCAmJiAocC5pZCA9IG0pLCBpLmZlYXR1cmVzLnB1c2gocCk7XG4gICAgfVxuICB9XG4gIF9saW1pdFpvb20oZSkge1xuICAgIHJldHVybiBNYXRoLm1heCh0aGlzLm9wdGlvbnMubWluWm9vbSwgTWF0aC5taW4oTWF0aC5mbG9vcigrZSksIHRoaXMub3B0aW9ucy5tYXhab29tICsgMSkpO1xuICB9XG4gIF9jbHVzdGVyKGUsIHQpIHtcbiAgICBjb25zdCB7IHJhZGl1czogcywgZXh0ZW50OiByLCByZWR1Y2U6IG8sIG1pblBvaW50czogaSB9ID0gdGhpcy5vcHRpb25zLCBjID0gcyAvIChyICogTWF0aC5wb3coMiwgdCkpLCBhID0gZS5kYXRhLCBkID0gW10sIHUgPSB0aGlzLnN0cmlkZTtcbiAgICBmb3IgKGxldCBsID0gMDsgbCA8IGEubGVuZ3RoOyBsICs9IHUpIHtcbiAgICAgIGlmIChhW2wgKyBSXSA8PSB0KVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGFbbCArIFJdID0gdDtcbiAgICAgIGNvbnN0IGggPSBhW2xdLCBwID0gYVtsICsgMV0sIG0gPSBlLndpdGhpbihhW2xdLCBhW2wgKyAxXSwgYyksIGYgPSBhW2wgKyBJXTtcbiAgICAgIGxldCBnID0gZjtcbiAgICAgIGZvciAoY29uc3QgdiBvZiBtKSB7XG4gICAgICAgIGNvbnN0IHcgPSB2ICogdTtcbiAgICAgICAgYVt3ICsgUl0gPiB0ICYmIChnICs9IGFbdyArIEldKTtcbiAgICAgIH1cbiAgICAgIGlmIChnID4gZiAmJiBnID49IGkpIHtcbiAgICAgICAgbGV0IHYgPSBoICogZiwgdyA9IHAgKiBmLCBfLCBPID0gLTE7XG4gICAgICAgIGNvbnN0IE0gPSAoKGwgLyB1IHwgMCkgPDwgNSkgKyAodCArIDEpICsgdGhpcy5wb2ludHMubGVuZ3RoO1xuICAgICAgICBmb3IgKGNvbnN0IEUgb2YgbSkge1xuICAgICAgICAgIGNvbnN0IGsgPSBFICogdTtcbiAgICAgICAgICBpZiAoYVtrICsgUl0gPD0gdClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGFbayArIFJdID0gdDtcbiAgICAgICAgICBjb25zdCBTID0gYVtrICsgSV07XG4gICAgICAgICAgdiArPSBhW2tdICogUywgdyArPSBhW2sgKyAxXSAqIFMsIGFbayArIG9lXSA9IE0sIG8gJiYgKF8gfHwgKF8gPSB0aGlzLl9tYXAoYSwgbCwgITApLCBPID0gdGhpcy5jbHVzdGVyUHJvcHMubGVuZ3RoLCB0aGlzLmNsdXN0ZXJQcm9wcy5wdXNoKF8pKSwgbyhfLCB0aGlzLl9tYXAoYSwgaykpKTtcbiAgICAgICAgfVxuICAgICAgICBhW2wgKyBvZV0gPSBNLCBkLnB1c2godiAvIGcsIHcgLyBnLCAxIC8gMCwgTSwgLTEsIGcpLCBvICYmIGQucHVzaChPKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IHYgPSAwOyB2IDwgdTsgdisrKVxuICAgICAgICAgIGQucHVzaChhW2wgKyB2XSk7XG4gICAgICAgIGlmIChnID4gMSlcbiAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgbSkge1xuICAgICAgICAgICAgY29uc3QgdyA9IHYgKiB1O1xuICAgICAgICAgICAgaWYgKCEoYVt3ICsgUl0gPD0gdCkpIHtcbiAgICAgICAgICAgICAgYVt3ICsgUl0gPSB0O1xuICAgICAgICAgICAgICBmb3IgKGxldCBfID0gMDsgXyA8IHU7IF8rKylcbiAgICAgICAgICAgICAgICBkLnB1c2goYVt3ICsgX10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGQ7XG4gIH1cbiAgLy8gZ2V0IGluZGV4IG9mIHRoZSBwb2ludCBmcm9tIHdoaWNoIHRoZSBjbHVzdGVyIG9yaWdpbmF0ZWRcbiAgX2dldE9yaWdpbklkKGUpIHtcbiAgICByZXR1cm4gZSAtIHRoaXMucG9pbnRzLmxlbmd0aCA+PiA1O1xuICB9XG4gIC8vIGdldCB6b29tIG9mIHRoZSBwb2ludCBmcm9tIHdoaWNoIHRoZSBjbHVzdGVyIG9yaWdpbmF0ZWRcbiAgX2dldE9yaWdpblpvb20oZSkge1xuICAgIHJldHVybiAoZSAtIHRoaXMucG9pbnRzLmxlbmd0aCkgJSAzMjtcbiAgfVxuICBfbWFwKGUsIHQsIHMpIHtcbiAgICBpZiAoZVt0ICsgSV0gPiAxKSB7XG4gICAgICBjb25zdCBpID0gdGhpcy5jbHVzdGVyUHJvcHNbZVt0ICsgVGVdXTtcbiAgICAgIHJldHVybiBzID8gT2JqZWN0LmFzc2lnbih7fSwgaSkgOiBpO1xuICAgIH1cbiAgICBjb25zdCByID0gdGhpcy5wb2ludHNbZVt0ICsgVF1dLnByb3BlcnRpZXMsIG8gPSB0aGlzLm9wdGlvbnMubWFwKHIpO1xuICAgIHJldHVybiBzICYmIG8gPT09IHIgPyBPYmplY3QuYXNzaWduKHt9LCBvKSA6IG87XG4gIH1cbn1cbmZ1bmN0aW9uIE1lKG4sIGUsIHQpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBcIkZlYXR1cmVcIixcbiAgICBpZDogbltlICsgVF0sXG4gICAgcHJvcGVydGllczogUmUobiwgZSwgdCksXG4gICAgZ2VvbWV0cnk6IHtcbiAgICAgIHR5cGU6IFwiUG9pbnRcIixcbiAgICAgIGNvb3JkaW5hdGVzOiBbb3QobltlXSksIGl0KG5bZSArIDFdKV1cbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBSZShuLCBlLCB0KSB7XG4gIGNvbnN0IHMgPSBuW2UgKyBJXSwgciA9IHMgPj0gMWU0ID8gYCR7TWF0aC5yb3VuZChzIC8gMWUzKX1rYCA6IHMgPj0gMWUzID8gYCR7TWF0aC5yb3VuZChzIC8gMTAwKSAvIDEwfWtgIDogcywgbyA9IG5bZSArIFRlXSwgaSA9IG8gPT09IC0xID8ge30gOiBPYmplY3QuYXNzaWduKHt9LCB0W29dKTtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oaSwge1xuICAgIGNsdXN0ZXI6ICEwLFxuICAgIGNsdXN0ZXJfaWQ6IG5bZSArIFRdLFxuICAgIHBvaW50X2NvdW50OiBzLFxuICAgIHBvaW50X2NvdW50X2FiYnJldmlhdGVkOiByXG4gIH0pO1xufVxuZnVuY3Rpb24gSyhuKSB7XG4gIHJldHVybiBuIC8gMzYwICsgMC41O1xufVxuZnVuY3Rpb24gWShuKSB7XG4gIGNvbnN0IGUgPSBNYXRoLnNpbihuICogTWF0aC5QSSAvIDE4MCksIHQgPSAwLjUgLSAwLjI1ICogTWF0aC5sb2coKDEgKyBlKSAvICgxIC0gZSkpIC8gTWF0aC5QSTtcbiAgcmV0dXJuIHQgPCAwID8gMCA6IHQgPiAxID8gMSA6IHQ7XG59XG5mdW5jdGlvbiBvdChuKSB7XG4gIHJldHVybiAobiAtIDAuNSkgKiAzNjA7XG59XG5mdW5jdGlvbiBpdChuKSB7XG4gIGNvbnN0IGUgPSAoMTgwIC0gbiAqIDM2MCkgKiBNYXRoLlBJIC8gMTgwO1xuICByZXR1cm4gMzYwICogTWF0aC5hdGFuKE1hdGguZXhwKGUpKSAvIE1hdGguUEkgLSA5MDtcbn1cbi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXG5cblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1Jcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuZnVuY3Rpb24gZGUobiwgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBzIGluIG4pXG4gICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sIHMpICYmIGUuaW5kZXhPZihzKSA8IDAgJiYgKHRbc10gPSBuW3NdKTtcbiAgaWYgKG4gIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PSBcImZ1bmN0aW9uXCIpXG4gICAgZm9yICh2YXIgciA9IDAsIHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG4pOyByIDwgcy5sZW5ndGg7IHIrKylcbiAgICAgIGUuaW5kZXhPZihzW3JdKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG4sIHNbcl0pICYmICh0W3Nbcl1dID0gbltzW3JdXSk7XG4gIHJldHVybiB0O1xufVxuY2xhc3MgQyB7XG4gIHN0YXRpYyBpc0FkdmFuY2VkTWFya2VyQXZhaWxhYmxlKGUpIHtcbiAgICByZXR1cm4gZ29vZ2xlLm1hcHMubWFya2VyICYmIGUuZ2V0TWFwQ2FwYWJpbGl0aWVzKCkuaXNBZHZhbmNlZE1hcmtlcnNBdmFpbGFibGUgPT09ICEwO1xuICB9XG4gIHN0YXRpYyBpc0FkdmFuY2VkTWFya2VyKGUpIHtcbiAgICByZXR1cm4gZ29vZ2xlLm1hcHMubWFya2VyICYmIGUgaW5zdGFuY2VvZiBnb29nbGUubWFwcy5tYXJrZXIuQWR2YW5jZWRNYXJrZXJFbGVtZW50O1xuICB9XG4gIHN0YXRpYyBzZXRNYXAoZSwgdCkge1xuICAgIHRoaXMuaXNBZHZhbmNlZE1hcmtlcihlKSA/IGUubWFwID0gdCA6IGUuc2V0TWFwKHQpO1xuICB9XG4gIHN0YXRpYyBnZXRQb3NpdGlvbihlKSB7XG4gICAgaWYgKHRoaXMuaXNBZHZhbmNlZE1hcmtlcihlKSkge1xuICAgICAgaWYgKGUucG9zaXRpb24pIHtcbiAgICAgICAgaWYgKGUucG9zaXRpb24gaW5zdGFuY2VvZiBnb29nbGUubWFwcy5MYXRMbmcpXG4gICAgICAgICAgcmV0dXJuIGUucG9zaXRpb247XG4gICAgICAgIGlmIChlLnBvc2l0aW9uLmxhdCAmJiBlLnBvc2l0aW9uLmxuZylcbiAgICAgICAgICByZXR1cm4gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhlLnBvc2l0aW9uLmxhdCwgZS5wb3NpdGlvbi5sbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBnb29nbGUubWFwcy5MYXRMbmcobnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBlLmdldFBvc2l0aW9uKCk7XG4gIH1cbiAgc3RhdGljIGdldFZpc2libGUoZSkge1xuICAgIHJldHVybiB0aGlzLmlzQWR2YW5jZWRNYXJrZXIoZSkgPyAhMCA6IGUuZ2V0VmlzaWJsZSgpO1xuICB9XG59XG5jbGFzcyBXIHtcbiAgY29uc3RydWN0b3IoeyBtYXJrZXJzOiBlLCBwb3NpdGlvbjogdCB9KSB7XG4gICAgdGhpcy5tYXJrZXJzID0gZSwgdCAmJiAodCBpbnN0YW5jZW9mIGdvb2dsZS5tYXBzLkxhdExuZyA/IHRoaXMuX3Bvc2l0aW9uID0gdCA6IHRoaXMuX3Bvc2l0aW9uID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyh0KSk7XG4gIH1cbiAgZ2V0IGJvdW5kcygpIHtcbiAgICBpZiAodGhpcy5tYXJrZXJzLmxlbmd0aCA9PT0gMCAmJiAhdGhpcy5fcG9zaXRpb24pXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgZSA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHModGhpcy5fcG9zaXRpb24sIHRoaXMuX3Bvc2l0aW9uKTtcbiAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5tYXJrZXJzKVxuICAgICAgZS5leHRlbmQoQy5nZXRQb3NpdGlvbih0KSk7XG4gICAgcmV0dXJuIGU7XG4gIH1cbiAgZ2V0IHBvc2l0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9wb3NpdGlvbiB8fCB0aGlzLmJvdW5kcy5nZXRDZW50ZXIoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBjb3VudCBvZiAqKnZpc2libGUqKiBtYXJrZXJzLlxuICAgKi9cbiAgZ2V0IGNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLm1hcmtlcnMuZmlsdGVyKChlKSA9PiBDLmdldFZpc2libGUoZSkpLmxlbmd0aDtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgbWFya2VyIHRvIHRoZSBjbHVzdGVyLlxuICAgKi9cbiAgcHVzaChlKSB7XG4gICAgdGhpcy5tYXJrZXJzLnB1c2goZSk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFudXAgcmVmZXJlbmNlcyBhbmQgcmVtb3ZlIG1hcmtlciBmcm9tIG1hcC5cbiAgICovXG4gIGRlbGV0ZSgpIHtcbiAgICB0aGlzLm1hcmtlciAmJiAoQy5zZXRNYXAodGhpcy5tYXJrZXIsIG51bGwpLCB0aGlzLm1hcmtlciA9IHZvaWQgMCksIHRoaXMubWFya2Vycy5sZW5ndGggPSAwO1xuICB9XG59XG5jb25zdCBhdCA9IChuLCBlLCB0LCBzKSA9PiB7XG4gIGNvbnN0IHIgPSBqZShuLmdldEJvdW5kcygpLCBlLCBzKTtcbiAgcmV0dXJuIHQuZmlsdGVyKChvKSA9PiByLmNvbnRhaW5zKEMuZ2V0UG9zaXRpb24obykpKTtcbn0sIGplID0gKG4sIGUsIHQpID0+IHtcbiAgY29uc3QgeyBub3J0aEVhc3Q6IHMsIHNvdXRoV2VzdDogciB9ID0gbHQobiwgZSksIG8gPSBjdCh7IG5vcnRoRWFzdDogcywgc291dGhXZXN0OiByIH0sIHQpO1xuICByZXR1cm4gdXQobywgZSk7XG59LCBPZSA9IChuLCBlLCB0KSA9PiB7XG4gIGNvbnN0IHMgPSBqZShuLCBlLCB0KSwgciA9IHMuZ2V0Tm9ydGhFYXN0KCksIG8gPSBzLmdldFNvdXRoV2VzdCgpO1xuICByZXR1cm4gW28ubG5nKCksIG8ubGF0KCksIHIubG5nKCksIHIubGF0KCldO1xufSwgbHQgPSAobiwgZSkgPT4gKHtcbiAgbm9ydGhFYXN0OiBlLmZyb21MYXRMbmdUb0RpdlBpeGVsKG4uZ2V0Tm9ydGhFYXN0KCkpLFxuICBzb3V0aFdlc3Q6IGUuZnJvbUxhdExuZ1RvRGl2UGl4ZWwobi5nZXRTb3V0aFdlc3QoKSlcbn0pLCBjdCA9ICh7IG5vcnRoRWFzdDogbiwgc291dGhXZXN0OiBlIH0sIHQpID0+IChuLnggKz0gdCwgbi55IC09IHQsIGUueCAtPSB0LCBlLnkgKz0gdCwgeyBub3J0aEVhc3Q6IG4sIHNvdXRoV2VzdDogZSB9KSwgdXQgPSAoeyBub3J0aEVhc3Q6IG4sIHNvdXRoV2VzdDogZSB9LCB0KSA9PiB7XG4gIGNvbnN0IHMgPSB0LmZyb21EaXZQaXhlbFRvTGF0TG5nKGUpLCByID0gdC5mcm9tRGl2UGl4ZWxUb0xhdExuZyhuKTtcbiAgcmV0dXJuIG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMocywgcik7XG59O1xuY2xhc3MgcWUge1xuICBjb25zdHJ1Y3Rvcih7IG1heFpvb206IGUgPSAxNiB9KSB7XG4gICAgdGhpcy5tYXhab29tID0gZTtcbiAgfVxuICAvKipcbiAgICogSGVscGVyIGZ1bmN0aW9uIHRvIGJ5cGFzcyBjbHVzdGVyaW5nIGJhc2VkIHVwb24gc29tZSBtYXAgc3RhdGUgc3VjaCBhc1xuICAgKiB6b29tLCBudW1iZXIgb2YgbWFya2VycywgZXRjLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqICBjbHVzdGVyKHttYXJrZXJzLCBtYXB9OiBBbGdvcml0aG1JbnB1dCk6IENsdXN0ZXJbXSB7XG4gICAqICAgIGlmIChzaG91bGRCeXBhc3NDbHVzdGVyaW5nKG1hcCkpIHtcbiAgICogICAgICByZXR1cm4gdGhpcy5ub29wKHttYXJrZXJzfSlcbiAgICogICAgfVxuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgbm9vcCh7IG1hcmtlcnM6IGUgfSkge1xuICAgIHJldHVybiBodChlKTtcbiAgfVxufVxuY2xhc3MgZHQgZXh0ZW5kcyBxZSB7XG4gIGNvbnN0cnVjdG9yKGUpIHtcbiAgICB2YXIgeyB2aWV3cG9ydFBhZGRpbmc6IHQgPSA2MCB9ID0gZSwgcyA9IGRlKGUsIFtcInZpZXdwb3J0UGFkZGluZ1wiXSk7XG4gICAgc3VwZXIocyksIHRoaXMudmlld3BvcnRQYWRkaW5nID0gNjAsIHRoaXMudmlld3BvcnRQYWRkaW5nID0gdDtcbiAgfVxuICBjYWxjdWxhdGUoeyBtYXJrZXJzOiBlLCBtYXA6IHQsIG1hcENhbnZhc1Byb2plY3Rpb246IHMgfSkge1xuICAgIHJldHVybiB0LmdldFpvb20oKSA+PSB0aGlzLm1heFpvb20gPyB7XG4gICAgICBjbHVzdGVyczogdGhpcy5ub29wKHtcbiAgICAgICAgbWFya2VyczogZVxuICAgICAgfSksXG4gICAgICBjaGFuZ2VkOiAhMVxuICAgIH0gOiB7XG4gICAgICBjbHVzdGVyczogdGhpcy5jbHVzdGVyKHtcbiAgICAgICAgbWFya2VyczogYXQodCwgcywgZSwgdGhpcy52aWV3cG9ydFBhZGRpbmcpLFxuICAgICAgICBtYXA6IHQsXG4gICAgICAgIG1hcENhbnZhc1Byb2plY3Rpb246IHNcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxufVxuY29uc3QgaHQgPSAobikgPT4gbi5tYXAoKHQpID0+IG5ldyBXKHtcbiAgcG9zaXRpb246IEMuZ2V0UG9zaXRpb24odCksXG4gIG1hcmtlcnM6IFt0XVxufSkpO1xuY2xhc3MgcHQgZXh0ZW5kcyBxZSB7XG4gIGNvbnN0cnVjdG9yKGUpIHtcbiAgICB2YXIgeyBtYXhab29tOiB0LCByYWRpdXM6IHMgPSA2MCB9ID0gZSwgciA9IGRlKGUsIFtcIm1heFpvb21cIiwgXCJyYWRpdXNcIl0pO1xuICAgIHN1cGVyKHsgbWF4Wm9vbTogdCB9KSwgdGhpcy5zdGF0ZSA9IHsgem9vbTogLTEgfSwgdGhpcy5zdXBlckNsdXN0ZXIgPSBuZXcgJGUoT2JqZWN0LmFzc2lnbih7IG1heFpvb206IHRoaXMubWF4Wm9vbSwgcmFkaXVzOiBzIH0sIHIpKTtcbiAgfVxuICBjYWxjdWxhdGUoZSkge1xuICAgIGxldCB0ID0gITE7XG4gICAgY29uc3QgcyA9IHsgem9vbTogZS5tYXAuZ2V0Wm9vbSgpIH07XG4gICAgaWYgKCFBKGUubWFya2VycywgdGhpcy5tYXJrZXJzKSkge1xuICAgICAgdCA9ICEwLCB0aGlzLm1hcmtlcnMgPSBbLi4uZS5tYXJrZXJzXTtcbiAgICAgIGNvbnN0IHIgPSB0aGlzLm1hcmtlcnMubWFwKChvKSA9PiB7XG4gICAgICAgIGNvbnN0IGkgPSBDLmdldFBvc2l0aW9uKG8pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwiRmVhdHVyZVwiLFxuICAgICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgICB0eXBlOiBcIlBvaW50XCIsXG4gICAgICAgICAgICBjb29yZGluYXRlczogW2kubG5nKCksIGkubGF0KCldXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7IG1hcmtlcjogbyB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc3VwZXJDbHVzdGVyLmxvYWQocik7XG4gICAgfVxuICAgIHJldHVybiB0IHx8ICh0aGlzLnN0YXRlLnpvb20gPD0gdGhpcy5tYXhab29tIHx8IHMuem9vbSA8PSB0aGlzLm1heFpvb20pICYmICh0ID0gIUEodGhpcy5zdGF0ZSwgcykpLCB0aGlzLnN0YXRlID0gcywgdCAmJiAodGhpcy5jbHVzdGVycyA9IHRoaXMuY2x1c3RlcihlKSksIHsgY2x1c3RlcnM6IHRoaXMuY2x1c3RlcnMsIGNoYW5nZWQ6IHQgfTtcbiAgfVxuICBjbHVzdGVyKHsgbWFwOiBlIH0pIHtcbiAgICByZXR1cm4gdGhpcy5zdXBlckNsdXN0ZXIuZ2V0Q2x1c3RlcnMoWy0xODAsIC05MCwgMTgwLCA5MF0sIE1hdGgucm91bmQoZS5nZXRab29tKCkpKS5tYXAoKHQpID0+IHRoaXMudHJhbnNmb3JtQ2x1c3Rlcih0KSk7XG4gIH1cbiAgdHJhbnNmb3JtQ2x1c3Rlcih7IGdlb21ldHJ5OiB7IGNvb3JkaW5hdGVzOiBbZSwgdF0gfSwgcHJvcGVydGllczogcyB9KSB7XG4gICAgaWYgKHMuY2x1c3RlcilcbiAgICAgIHJldHVybiBuZXcgVyh7XG4gICAgICAgIG1hcmtlcnM6IHRoaXMuc3VwZXJDbHVzdGVyLmdldExlYXZlcyhzLmNsdXN0ZXJfaWQsIDEgLyAwKS5tYXAoKG8pID0+IG8ucHJvcGVydGllcy5tYXJrZXIpLFxuICAgICAgICBwb3NpdGlvbjogeyBsYXQ6IHQsIGxuZzogZSB9XG4gICAgICB9KTtcbiAgICBjb25zdCByID0gcy5tYXJrZXI7XG4gICAgcmV0dXJuIG5ldyBXKHtcbiAgICAgIG1hcmtlcnM6IFtyXSxcbiAgICAgIHBvc2l0aW9uOiBDLmdldFBvc2l0aW9uKHIpXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIGZ0IGV4dGVuZHMgZHQge1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgdmFyIHsgbWF4Wm9vbTogdCwgcmFkaXVzOiBzID0gNjAsIHZpZXdwb3J0UGFkZGluZzogciA9IDYwIH0gPSBlLCBvID0gZGUoZSwgW1wibWF4Wm9vbVwiLCBcInJhZGl1c1wiLCBcInZpZXdwb3J0UGFkZGluZ1wiXSk7XG4gICAgc3VwZXIoeyBtYXhab29tOiB0LCB2aWV3cG9ydFBhZGRpbmc6IHIgfSksIHRoaXMuc3VwZXJDbHVzdGVyID0gbmV3ICRlKE9iamVjdC5hc3NpZ24oeyBtYXhab29tOiB0aGlzLm1heFpvb20sIHJhZGl1czogcyB9LCBvKSksIHRoaXMuc3RhdGUgPSB7IHpvb206IC0xLCB2aWV3OiBbMCwgMCwgMCwgMF0gfTtcbiAgfVxuICBjYWxjdWxhdGUoZSkge1xuICAgIGNvbnN0IHQgPSB7XG4gICAgICB6b29tOiBNYXRoLnJvdW5kKGUubWFwLmdldFpvb20oKSksXG4gICAgICB2aWV3OiBPZShlLm1hcC5nZXRCb3VuZHMoKSwgZS5tYXBDYW52YXNQcm9qZWN0aW9uLCB0aGlzLnZpZXdwb3J0UGFkZGluZylcbiAgICB9O1xuICAgIGxldCBzID0gIUEodGhpcy5zdGF0ZSwgdCk7XG4gICAgaWYgKCFBKGUubWFya2VycywgdGhpcy5tYXJrZXJzKSkge1xuICAgICAgcyA9ICEwLCB0aGlzLm1hcmtlcnMgPSBbLi4uZS5tYXJrZXJzXTtcbiAgICAgIGNvbnN0IHIgPSB0aGlzLm1hcmtlcnMubWFwKChvKSA9PiB7XG4gICAgICAgIGNvbnN0IGkgPSBDLmdldFBvc2l0aW9uKG8pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwiRmVhdHVyZVwiLFxuICAgICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgICB0eXBlOiBcIlBvaW50XCIsXG4gICAgICAgICAgICBjb29yZGluYXRlczogW2kubG5nKCksIGkubGF0KCldXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7IG1hcmtlcjogbyB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICAgIHRoaXMuc3VwZXJDbHVzdGVyLmxvYWQocik7XG4gICAgfVxuICAgIHJldHVybiBzICYmICh0aGlzLmNsdXN0ZXJzID0gdGhpcy5jbHVzdGVyKGUpLCB0aGlzLnN0YXRlID0gdCksIHsgY2x1c3RlcnM6IHRoaXMuY2x1c3RlcnMsIGNoYW5nZWQ6IHMgfTtcbiAgfVxuICBjbHVzdGVyKHsgbWFwOiBlLCBtYXBDYW52YXNQcm9qZWN0aW9uOiB0IH0pIHtcbiAgICBjb25zdCBzID0ge1xuICAgICAgem9vbTogTWF0aC5yb3VuZChlLmdldFpvb20oKSksXG4gICAgICB2aWV3OiBPZShlLmdldEJvdW5kcygpLCB0LCB0aGlzLnZpZXdwb3J0UGFkZGluZylcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLnN1cGVyQ2x1c3Rlci5nZXRDbHVzdGVycyhzLnZpZXcsIHMuem9vbSkubWFwKChyKSA9PiB0aGlzLnRyYW5zZm9ybUNsdXN0ZXIocikpO1xuICB9XG4gIHRyYW5zZm9ybUNsdXN0ZXIoeyBnZW9tZXRyeTogeyBjb29yZGluYXRlczogW2UsIHRdIH0sIHByb3BlcnRpZXM6IHMgfSkge1xuICAgIGlmIChzLmNsdXN0ZXIpXG4gICAgICByZXR1cm4gbmV3IFcoe1xuICAgICAgICBtYXJrZXJzOiB0aGlzLnN1cGVyQ2x1c3Rlci5nZXRMZWF2ZXMocy5jbHVzdGVyX2lkLCAxIC8gMCkubWFwKChvKSA9PiBvLnByb3BlcnRpZXMubWFya2VyKSxcbiAgICAgICAgcG9zaXRpb246IHsgbGF0OiB0LCBsbmc6IGUgfVxuICAgICAgfSk7XG4gICAgY29uc3QgciA9IHMubWFya2VyO1xuICAgIHJldHVybiBuZXcgVyh7XG4gICAgICBtYXJrZXJzOiBbcl0sXG4gICAgICBwb3NpdGlvbjogQy5nZXRQb3NpdGlvbihyKVxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBtdCB7XG4gIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICB0aGlzLm1hcmtlcnMgPSB7IHN1bTogZS5sZW5ndGggfTtcbiAgICBjb25zdCBzID0gdC5tYXAoKG8pID0+IG8uY291bnQpLCByID0gcy5yZWR1Y2UoKG8sIGkpID0+IG8gKyBpLCAwKTtcbiAgICB0aGlzLmNsdXN0ZXJzID0ge1xuICAgICAgY291bnQ6IHQubGVuZ3RoLFxuICAgICAgbWFya2Vyczoge1xuICAgICAgICBtZWFuOiByIC8gdC5sZW5ndGgsXG4gICAgICAgIHN1bTogcixcbiAgICAgICAgbWluOiBNYXRoLm1pbiguLi5zKSxcbiAgICAgICAgbWF4OiBNYXRoLm1heCguLi5zKVxuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbmNsYXNzIGd0IHtcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHJlbmRlciBmdW5jdGlvbiBmb3IgdGhlIGxpYnJhcnkgdXNlZCBieSB7QGxpbmsgTWFya2VyQ2x1c3RlcmVyfS5cbiAgICpcbiAgICogQ3VycmVudGx5IHNldCB0byB1c2UgdGhlIGZvbGxvd2luZzpcbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiAvLyBjaGFuZ2UgY29sb3IgaWYgdGhpcyBjbHVzdGVyIGhhcyBtb3JlIG1hcmtlcnMgdGhhbiB0aGUgbWVhbiBjbHVzdGVyXG4gICAqIGNvbnN0IGNvbG9yID1cbiAgICogICBjb3VudCA+IE1hdGgubWF4KDEwLCBzdGF0cy5jbHVzdGVycy5tYXJrZXJzLm1lYW4pXG4gICAqICAgICA/IFwiI2ZmMDAwMFwiXG4gICAqICAgICA6IFwiIzAwMDBmZlwiO1xuICAgKlxuICAgKiAvLyBjcmVhdGUgc3ZnIHVybCB3aXRoIGZpbGwgY29sb3JcbiAgICogY29uc3Qgc3ZnID0gd2luZG93LmJ0b2EoYFxuICAgKiA8c3ZnIGZpbGw9XCIke2NvbG9yfVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0MCAyNDBcIj5cbiAgICogICA8Y2lyY2xlIGN4PVwiMTIwXCIgY3k9XCIxMjBcIiBvcGFjaXR5PVwiLjZcIiByPVwiNzBcIiAvPlxuICAgKiAgIDxjaXJjbGUgY3g9XCIxMjBcIiBjeT1cIjEyMFwiIG9wYWNpdHk9XCIuM1wiIHI9XCI5MFwiIC8+XG4gICAqICAgPGNpcmNsZSBjeD1cIjEyMFwiIGN5PVwiMTIwXCIgb3BhY2l0eT1cIi4yXCIgcj1cIjExMFwiIC8+XG4gICAqICAgPGNpcmNsZSBjeD1cIjEyMFwiIGN5PVwiMTIwXCIgb3BhY2l0eT1cIi4xXCIgcj1cIjEzMFwiIC8+XG4gICAqIDwvc3ZnPmApO1xuICAgKlxuICAgKiAvLyBjcmVhdGUgbWFya2VyIHVzaW5nIHN2ZyBpY29uXG4gICAqIHJldHVybiBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcbiAgICogICBwb3NpdGlvbixcbiAgICogICBpY29uOiB7XG4gICAqICAgICB1cmw6IGBkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCR7c3ZnfWAsXG4gICAqICAgICBzY2FsZWRTaXplOiBuZXcgZ29vZ2xlLm1hcHMuU2l6ZSg0NSwgNDUpLFxuICAgKiAgIH0sXG4gICAqICAgbGFiZWw6IHtcbiAgICogICAgIHRleHQ6IFN0cmluZyhjb3VudCksXG4gICAqICAgICBjb2xvcjogXCJyZ2JhKDI1NSwyNTUsMjU1LDAuOSlcIixcbiAgICogICAgIGZvbnRTaXplOiBcIjEycHhcIixcbiAgICogICB9LFxuICAgKiAgIC8vIGFkanVzdCB6SW5kZXggdG8gYmUgYWJvdmUgb3RoZXIgbWFya2Vyc1xuICAgKiAgIHpJbmRleDogMTAwMCArIGNvdW50LFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICByZW5kZXIoeyBjb3VudDogZSwgcG9zaXRpb246IHQgfSwgcywgcikge1xuICAgIGNvbnN0IGkgPSBgPHN2ZyBmaWxsPVwiJHtlID4gTWF0aC5tYXgoMTAsIHMuY2x1c3RlcnMubWFya2Vycy5tZWFuKSA/IFwiI2ZmMDAwMFwiIDogXCIjMDAwMGZmXCJ9XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQwIDI0MFwiIHdpZHRoPVwiNTBcIiBoZWlnaHQ9XCI1MFwiPlxuPGNpcmNsZSBjeD1cIjEyMFwiIGN5PVwiMTIwXCIgb3BhY2l0eT1cIi42XCIgcj1cIjcwXCIgLz5cbjxjaXJjbGUgY3g9XCIxMjBcIiBjeT1cIjEyMFwiIG9wYWNpdHk9XCIuM1wiIHI9XCI5MFwiIC8+XG48Y2lyY2xlIGN4PVwiMTIwXCIgY3k9XCIxMjBcIiBvcGFjaXR5PVwiLjJcIiByPVwiMTEwXCIgLz5cbjx0ZXh0IHg9XCI1MCVcIiB5PVwiNTAlXCIgc3R5bGU9XCJmaWxsOiNmZmZcIiB0ZXh0LWFuY2hvcj1cIm1pZGRsZVwiIGZvbnQtc2l6ZT1cIjUwXCIgZG9taW5hbnQtYmFzZWxpbmU9XCJtaWRkbGVcIiBmb250LWZhbWlseT1cInJvYm90byxhcmlhbCxzYW5zLXNlcmlmXCI+JHtlfTwvdGV4dD5cbjwvc3ZnPmAsIGMgPSBgQ2x1c3RlciBvZiAke2V9IG1hcmtlcnNgLCBhID0gTnVtYmVyKGdvb2dsZS5tYXBzLk1hcmtlci5NQVhfWklOREVYKSArIGU7XG4gICAgaWYgKEMuaXNBZHZhbmNlZE1hcmtlckF2YWlsYWJsZShyKSkge1xuICAgICAgY29uc3QgdSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICB1LmlubmVySFRNTCA9IGk7XG4gICAgICBjb25zdCBsID0gdS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgIGwuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAgMjUpXCIpO1xuICAgICAgY29uc3QgaCA9IHtcbiAgICAgICAgbWFwOiByLFxuICAgICAgICBwb3NpdGlvbjogdCxcbiAgICAgICAgekluZGV4OiBhLFxuICAgICAgICB0aXRsZTogYyxcbiAgICAgICAgY29udGVudDogbFxuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXcgZ29vZ2xlLm1hcHMubWFya2VyLkFkdmFuY2VkTWFya2VyRWxlbWVudChoKTtcbiAgICB9XG4gICAgY29uc3QgZCA9IHtcbiAgICAgIHBvc2l0aW9uOiB0LFxuICAgICAgekluZGV4OiBhLFxuICAgICAgdGl0bGU6IGMsXG4gICAgICBpY29uOiB7XG4gICAgICAgIHVybDogYGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJHtidG9hKGkpfWAsXG4gICAgICAgIGFuY2hvcjogbmV3IGdvb2dsZS5tYXBzLlBvaW50KDI1LCAyNSlcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKGQpO1xuICB9XG59XG5mdW5jdGlvbiB2dChuLCBlKSB7XG4gIGZvciAobGV0IHQgaW4gZS5wcm90b3R5cGUpXG4gICAgbi5wcm90b3R5cGVbdF0gPSBlLnByb3RvdHlwZVt0XTtcbn1cbmNsYXNzIGhlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdnQoaGUsIGdvb2dsZS5tYXBzLk92ZXJsYXlWaWV3KTtcbiAgfVxufVxudmFyIEQ7XG4oZnVuY3Rpb24obikge1xuICBuLkNMVVNURVJJTkdfQkVHSU4gPSBcImNsdXN0ZXJpbmdiZWdpblwiLCBuLkNMVVNURVJJTkdfRU5EID0gXCJjbHVzdGVyaW5nZW5kXCIsIG4uQ0xVU1RFUl9DTElDSyA9IFwiY2xpY2tcIjtcbn0pKEQgfHwgKEQgPSB7fSkpO1xuY29uc3QgeXQgPSAobiwgZSwgdCkgPT4ge1xuICB0LmZpdEJvdW5kcyhlLmJvdW5kcyk7XG59O1xuY2xhc3Mgd3QgZXh0ZW5kcyBoZSB7XG4gIGNvbnN0cnVjdG9yKHsgbWFwOiBlLCBtYXJrZXJzOiB0ID0gW10sIGFsZ29yaXRobU9wdGlvbnM6IHMgPSB7fSwgYWxnb3JpdGhtOiByID0gbmV3IHB0KHMpLCByZW5kZXJlcjogbyA9IG5ldyBndCgpLCBvbkNsdXN0ZXJDbGljazogaSA9IHl0IH0pIHtcbiAgICBzdXBlcigpLCB0aGlzLm1hcmtlcnMgPSBbLi4udF0sIHRoaXMuY2x1c3RlcnMgPSBbXSwgdGhpcy5hbGdvcml0aG0gPSByLCB0aGlzLnJlbmRlcmVyID0gbywgdGhpcy5vbkNsdXN0ZXJDbGljayA9IGksIGUgJiYgdGhpcy5zZXRNYXAoZSk7XG4gIH1cbiAgYWRkTWFya2VyKGUsIHQpIHtcbiAgICB0aGlzLm1hcmtlcnMuaW5jbHVkZXMoZSkgfHwgKHRoaXMubWFya2Vycy5wdXNoKGUpLCB0IHx8IHRoaXMucmVuZGVyKCkpO1xuICB9XG4gIGFkZE1hcmtlcnMoZSwgdCkge1xuICAgIGUuZm9yRWFjaCgocykgPT4ge1xuICAgICAgdGhpcy5hZGRNYXJrZXIocywgITApO1xuICAgIH0pLCB0IHx8IHRoaXMucmVuZGVyKCk7XG4gIH1cbiAgcmVtb3ZlTWFya2VyKGUsIHQpIHtcbiAgICBjb25zdCBzID0gdGhpcy5tYXJrZXJzLmluZGV4T2YoZSk7XG4gICAgcmV0dXJuIHMgPT09IC0xID8gITEgOiAoQy5zZXRNYXAoZSwgbnVsbCksIHRoaXMubWFya2Vycy5zcGxpY2UocywgMSksIHQgfHwgdGhpcy5yZW5kZXIoKSwgITApO1xuICB9XG4gIHJlbW92ZU1hcmtlcnMoZSwgdCkge1xuICAgIGxldCBzID0gITE7XG4gICAgcmV0dXJuIGUuZm9yRWFjaCgocikgPT4ge1xuICAgICAgcyA9IHRoaXMucmVtb3ZlTWFya2VyKHIsICEwKSB8fCBzO1xuICAgIH0pLCBzICYmICF0ICYmIHRoaXMucmVuZGVyKCksIHM7XG4gIH1cbiAgY2xlYXJNYXJrZXJzKGUpIHtcbiAgICB0aGlzLm1hcmtlcnMubGVuZ3RoID0gMCwgZSB8fCB0aGlzLnJlbmRlcigpO1xuICB9XG4gIC8qKlxuICAgKiBSZWNhbGN1bGF0ZXMgYW5kIGRyYXdzIGFsbCB0aGUgbWFya2VyIGNsdXN0ZXJzLlxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLmdldE1hcCgpO1xuICAgIGlmIChlIGluc3RhbmNlb2YgZ29vZ2xlLm1hcHMuTWFwICYmIGUuZ2V0UHJvamVjdGlvbigpKSB7XG4gICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKHRoaXMsIEQuQ0xVU1RFUklOR19CRUdJTiwgdGhpcyk7XG4gICAgICBjb25zdCB7IGNsdXN0ZXJzOiB0LCBjaGFuZ2VkOiBzIH0gPSB0aGlzLmFsZ29yaXRobS5jYWxjdWxhdGUoe1xuICAgICAgICBtYXJrZXJzOiB0aGlzLm1hcmtlcnMsXG4gICAgICAgIG1hcDogZSxcbiAgICAgICAgbWFwQ2FudmFzUHJvamVjdGlvbjogdGhpcy5nZXRQcm9qZWN0aW9uKClcbiAgICAgIH0pO1xuICAgICAgaWYgKHMgfHwgcyA9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IHIgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdClcbiAgICAgICAgICBpLm1hcmtlcnMubGVuZ3RoID09IDEgJiYgci5hZGQoaS5tYXJrZXJzWzBdKTtcbiAgICAgICAgY29uc3QgbyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5jbHVzdGVycylcbiAgICAgICAgICBpLm1hcmtlciAhPSBudWxsICYmIChpLm1hcmtlcnMubGVuZ3RoID09IDEgPyByLmhhcyhpLm1hcmtlcikgfHwgQy5zZXRNYXAoaS5tYXJrZXIsIG51bGwpIDogby5wdXNoKGkubWFya2VyKSk7XG4gICAgICAgIHRoaXMuY2x1c3RlcnMgPSB0LCB0aGlzLnJlbmRlckNsdXN0ZXJzKCksIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBvLmZvckVhY2goKGkpID0+IEMuc2V0TWFwKGksIG51bGwpKSk7XG4gICAgICB9XG4gICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKHRoaXMsIEQuQ0xVU1RFUklOR19FTkQsIHRoaXMpO1xuICAgIH1cbiAgfVxuICBvbkFkZCgpIHtcbiAgICB0aGlzLmlkbGVMaXN0ZW5lciA9IHRoaXMuZ2V0TWFwKCkuYWRkTGlzdGVuZXIoXCJpZGxlXCIsIHRoaXMucmVuZGVyLmJpbmQodGhpcykpLCB0aGlzLnJlbmRlcigpO1xuICB9XG4gIG9uUmVtb3ZlKCkge1xuICAgIGdvb2dsZS5tYXBzLmV2ZW50LnJlbW92ZUxpc3RlbmVyKHRoaXMuaWRsZUxpc3RlbmVyKSwgdGhpcy5yZXNldCgpO1xuICB9XG4gIHJlc2V0KCkge1xuICAgIHRoaXMubWFya2Vycy5mb3JFYWNoKChlKSA9PiBDLnNldE1hcChlLCBudWxsKSksIHRoaXMuY2x1c3RlcnMuZm9yRWFjaCgoZSkgPT4gZS5kZWxldGUoKSksIHRoaXMuY2x1c3RlcnMgPSBbXTtcbiAgfVxuICByZW5kZXJDbHVzdGVycygpIHtcbiAgICBjb25zdCBlID0gbmV3IG10KHRoaXMubWFya2VycywgdGhpcy5jbHVzdGVycyksIHQgPSB0aGlzLmdldE1hcCgpO1xuICAgIHRoaXMuY2x1c3RlcnMuZm9yRWFjaCgocykgPT4ge1xuICAgICAgcy5tYXJrZXJzLmxlbmd0aCA9PT0gMSA/IHMubWFya2VyID0gcy5tYXJrZXJzWzBdIDogKHMubWFya2VyID0gdGhpcy5yZW5kZXJlci5yZW5kZXIocywgZSwgdCksIHMubWFya2Vycy5mb3JFYWNoKChyKSA9PiBDLnNldE1hcChyLCBudWxsKSksIHRoaXMub25DbHVzdGVyQ2xpY2sgJiYgcy5tYXJrZXIuYWRkTGlzdGVuZXIoXG4gICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgKHIpID0+IHtcbiAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKHRoaXMsIEQuQ0xVU1RFUl9DTElDSywgcyksIHRoaXMub25DbHVzdGVyQ2xpY2sociwgcywgdCk7XG4gICAgICAgIH1cbiAgICAgICkpLCBDLnNldE1hcChzLm1hcmtlciwgdCk7XG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IEVlID0gT2JqZWN0LnZhbHVlcyhEKSwgUnQgPSBQKHtcbiAgbmFtZTogXCJNYXJrZXJDbHVzdGVyXCIsXG4gIHByb3BzOiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogKCkgPT4gKHt9KVxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IEVlLFxuICBzZXR1cChuLCB7IGVtaXQ6IGUsIGV4cG9zZTogdCwgc2xvdHM6IHMgfSkge1xuICAgIGNvbnN0IHIgPSB5KCksIG8gPSBiKEIsIHkoKSksIGkgPSBiKFosIHkoKSk7XG4gICAgcmV0dXJuIFUoY2UsIHIpLCBMKFxuICAgICAgbyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgby52YWx1ZSAmJiAoci52YWx1ZSA9IHgoXG4gICAgICAgICAgbmV3IHd0KHtcbiAgICAgICAgICAgIG1hcDogby52YWx1ZSxcbiAgICAgICAgICAgIC8vIEJldHRlciBwZXJmIHRoYW4gdGhlIGRlZmF1bHQgYFN1cGVyQ2x1c3RlckFsZ29yaXRobWAuIFNlZTpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVtYXBzL2pzLW1hcmtlcmNsdXN0ZXJlci9wdWxsLzY0MFxuICAgICAgICAgICAgYWxnb3JpdGhtOiBuZXcgZnQobi5vcHRpb25zLmFsZ29yaXRobU9wdGlvbnMgPz8ge30pLFxuICAgICAgICAgICAgLi4ubi5vcHRpb25zXG4gICAgICAgICAgfSlcbiAgICAgICAgKSwgRWUuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICAgIHZhciBhO1xuICAgICAgICAgIChhID0gci52YWx1ZSkgPT0gbnVsbCB8fCBhLmFkZExpc3RlbmVyKGMsIChkKSA9PiBlKGMsIGQpKTtcbiAgICAgICAgfSkpO1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaW1tZWRpYXRlOiAhMFxuICAgICAgfVxuICAgICksIHEoKCkgPT4ge1xuICAgICAgdmFyIGM7XG4gICAgICByLnZhbHVlICYmICgoYyA9IGkudmFsdWUpID09IG51bGwgfHwgYy5ldmVudC5jbGVhckluc3RhbmNlTGlzdGVuZXJzKHIudmFsdWUpLCByLnZhbHVlLmNsZWFyTWFya2VycygpLCByLnZhbHVlLnNldE1hcChudWxsKSk7XG4gICAgfSksIHQoeyBtYXJrZXJDbHVzdGVyOiByIH0pLCAoKSA9PiB7XG4gICAgICB2YXIgYztcbiAgICAgIHJldHVybiAoYyA9IHMuZGVmYXVsdCkgPT0gbnVsbCA/IHZvaWQgMCA6IGMuY2FsbChzKTtcbiAgICB9O1xuICB9XG59KSwgX3QgPSBQKHtcbiAgaW5oZXJpdEF0dHJzOiAhMSxcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITBcbiAgICB9XG4gIH0sXG4gIHNldHVwKG4sIHsgc2xvdHM6IGUsIGVtaXQ6IHQsIGV4cG9zZTogcyB9KSB7XG4gICAgY29uc3QgciA9IHkoKSwgbyA9IEgoKCkgPT4ge1xuICAgICAgdmFyIGE7XG4gICAgICByZXR1cm4gKGEgPSBlLmRlZmF1bHQpID09IG51bGwgPyB2b2lkIDAgOiBhLmNhbGwoZSkuc29tZSgoZCkgPT4gZC50eXBlICE9PSBMZSk7XG4gICAgfSksIGkgPSBIKCgpID0+ICh7XG4gICAgICAuLi5uLm9wdGlvbnMsXG4gICAgICBlbGVtZW50OiByLnZhbHVlXG4gICAgfSkpLCBjID0gVihlZSwgW10sIGksIHQpO1xuICAgIHJldHVybiBzKHtcbiAgICAgIGN1c3RvbU1hcmtlcjogY1xuICAgIH0pLCB7IGN1c3RvbU1hcmtlclJlZjogciwgY3VzdG9tTWFya2VyOiBjLCBoYXNTbG90Q29udGVudDogbyB9O1xuICB9XG59KTtcbmNvbnN0IGt0ID0ge1xuICBrZXk6IDAsXG4gIGNsYXNzOiBcImN1c3RvbS1tYXJrZXItd3JhcHBlclwiXG59O1xuZnVuY3Rpb24gQ3QobiwgZSwgdCwgcywgciwgbykge1xuICByZXR1cm4gbi5oYXNTbG90Q29udGVudCA/IChKKCksIFgoXCJkaXZcIiwga3QsIFtcbiAgICBhZShcImRpdlwiLCBTZSh7XG4gICAgICByZWY6IFwiY3VzdG9tTWFya2VyUmVmXCIsXG4gICAgICBzdHlsZTogeyBjdXJzb3I6IG4uJGF0dHJzLm9uQ2xpY2sgPyBcInBvaW50ZXJcIiA6IHZvaWQgMCB9XG4gICAgfSwgbi4kYXR0cnMpLCBbXG4gICAgICBRKG4uJHNsb3RzLCBcImRlZmF1bHRcIiwge30sIHZvaWQgMCwgITApXG4gICAgXSwgMTYpXG4gIF0pKSA6IHhlKFwiXCIsICEwKTtcbn1cbmNvbnN0IGp0ID0gLyogQF9fUFVSRV9fICovIHRlKF90LCBbW1wicmVuZGVyXCIsIEN0XSwgW1wiX19zY29wZUlkXCIsIFwiZGF0YS12LTJkMmQzNDNhXCJdXSksIHF0ID0gUCh7XG4gIG5hbWU6IFwiSGVhdG1hcExheWVyXCIsXG4gIHByb3BzOiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogKCkgPT4gKHt9KVxuICAgIH1cbiAgfSxcbiAgc2V0dXAobikge1xuICAgIGNvbnN0IGUgPSB5KCksIHQgPSBiKEIsIHkoKSksIHMgPSBiKFosIHkoKSk7XG4gICAgcmV0dXJuIEwoXG4gICAgICBbdCwgKCkgPT4gbi5vcHRpb25zXSxcbiAgICAgIChbciwgb10sIFtpLCBjXSkgPT4ge1xuICAgICAgICB2YXIgZDtcbiAgICAgICAgY29uc3QgYSA9ICFBKG8sIGMpIHx8IHQudmFsdWUgIT09IGk7XG4gICAgICAgIGlmICh0LnZhbHVlICYmIHMudmFsdWUgJiYgYSkge1xuICAgICAgICAgIGNvbnN0IHUgPSBzdHJ1Y3R1cmVkQ2xvbmUobyk7XG4gICAgICAgICAgaWYgKHUuZGF0YSAmJiAhKHUuZGF0YSBpbnN0YW5jZW9mIHMudmFsdWUuTVZDQXJyYXkpKSB7XG4gICAgICAgICAgICBjb25zdCBsID0gcy52YWx1ZS5MYXRMbmc7XG4gICAgICAgICAgICB1LmRhdGEgPSAoZCA9IHUuZGF0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IGQubWFwKChoKSA9PiBoIGluc3RhbmNlb2YgbCB8fCBcImxvY2F0aW9uXCIgaW4gaCAmJiAoaC5sb2NhdGlvbiBpbnN0YW5jZW9mIGwgfHwgaC5sb2NhdGlvbiA9PT0gbnVsbCkgPyBoIDogXCJsb2NhdGlvblwiIGluIGggPyB7IC4uLmgsIGxvY2F0aW9uOiBuZXcgbChoLmxvY2F0aW9uKSB9IDogbmV3IGwoaCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlLnZhbHVlID8gZS52YWx1ZS5zZXRPcHRpb25zKHUpIDogZS52YWx1ZSA9IHgoXG4gICAgICAgICAgICBuZXcgcy52YWx1ZS52aXN1YWxpemF0aW9uLkhlYXRtYXBMYXllcih7XG4gICAgICAgICAgICAgIC4uLnUsXG4gICAgICAgICAgICAgIG1hcDogdC52YWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgeyBpbW1lZGlhdGU6ICEwIH1cbiAgICApLCBxKCgpID0+IHtcbiAgICAgIGUudmFsdWUgJiYgZS52YWx1ZS5zZXRNYXAobnVsbCk7XG4gICAgfSksIHsgaGVhdG1hcExheWVyOiBlIH07XG4gIH0sXG4gIHJlbmRlcjogKCkgPT4gbnVsbFxufSk7XG5leHBvcnQge1xuICBQdCBhcyBBZHZhbmNlZE1hcmtlcixcbiAgSXQgYXMgQ2lyY2xlLFxuICBUdCBhcyBDdXN0b21Db250cm9sLFxuICBqdCBhcyBDdXN0b21NYXJrZXIsXG4gIEV0IGFzIEdvb2dsZU1hcCxcbiAgcXQgYXMgSGVhdG1hcExheWVyLFxuICAkdCBhcyBJbmZvV2luZG93LFxuICBMdCBhcyBNYXJrZXIsXG4gIFJ0IGFzIE1hcmtlckNsdXN0ZXIsXG4gIHh0IGFzIFBvbHlnb24sXG4gIFN0IGFzIFBvbHlsaW5lLFxuICBBdCBhcyBSZWN0YW5nbGVcbn07XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0ICcuLi9zY3NzL21haW4uc2Nzcyc7XG5cbmltcG9ydCB7IGNyZWF0ZUFwcCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgQXBwUGFnZSBmcm9tICcuL0FwcFBhZ2UudnVlJztcblxuY29uc3QgYXBwUGFnZSA9IGNyZWF0ZUFwcChBcHBQYWdlKTtcbmFwcFBhZ2UubW91bnQoJyNhcHBQYWdlJyk7Il0sIm5hbWVzIjpbInJlbmRlciIsImtub3duQWRhcHRlcnMiLCJodHRwIiwieGhyIiwiZmV0Y2giLCJmb3JFYWNoIiwiZm4iLCJ2YWx1ZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZSIsInJlbmRlclJlYXNvbiIsInJlYXNvbiIsImlzUmVzb2x2ZWRIYW5kbGUiLCJhZGFwdGVyIiwiaXNGdW5jdGlvbiIsImdldEFkYXB0ZXIiLCJhZGFwdGVycyIsImlzQXJyYXkiLCJsZW5ndGgiLCJuYW1lT3JBZGFwdGVyIiwicmVqZWN0ZWRSZWFzb25zIiwiaSIsImlkIiwiU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJ1bmRlZmluZWQiLCJyZWFzb25zIiwiZW50cmllcyIsIm1hcCIsInN0YXRlIiwicyIsImpvaW4iLCJpc0ZldGNoU3VwcG9ydGVkIiwiUmVxdWVzdCIsIlJlc3BvbnNlIiwiaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCIsIlJlYWRhYmxlU3RyZWFtIiwiZW5jb2RlVGV4dCIsIlRleHRFbmNvZGVyIiwiZW5jb2RlciIsInN0ciIsImVuY29kZSIsImFzeW5jIiwiVWludDhBcnJheSIsImFycmF5QnVmZmVyIiwidGVzdCIsImFyZ3MiLCJzdXBwb3J0c1JlcXVlc3RTdHJlYW0iLCJkdXBsZXhBY2Nlc3NlZCIsImhhc0NvbnRlbnRUeXBlIiwib3JpZ2luIiwiYm9keSIsIm1ldGhvZCIsImR1cGxleCIsImhlYWRlcnMiLCJoYXMiLCJzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtIiwiaXNSZWFkYWJsZVN0cmVhbSIsInJlc29sdmVycyIsInN0cmVhbSIsInJlcyIsInR5cGUiLCJfIiwiY29uZmlnIiwiRVJSX05PVF9TVVBQT1JUIiwicmVzb2x2ZUJvZHlMZW5ndGgiLCJ0b0Zpbml0ZU51bWJlciIsImdldENvbnRlbnRMZW5ndGgiLCJpc0Jsb2IiLCJzaXplIiwiaXNTcGVjQ29tcGxpYW50Rm9ybSIsIl9yZXF1ZXN0IiwiYnl0ZUxlbmd0aCIsImlzQXJyYXlCdWZmZXJWaWV3IiwiaXNBcnJheUJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNTdHJpbmciLCJnZXRCb2R5TGVuZ3RoIiwidXJsIiwiZGF0YSIsInNpZ25hbCIsImNhbmNlbFRva2VuIiwidGltZW91dCIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJyZXNwb25zZVR5cGUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJmZXRjaE9wdGlvbnMiLCJyZXF1ZXN0IiwiY29tcG9zZWRTaWduYWwiLCJ0b0Fib3J0U2lnbmFsIiwidW5zdWJzY3JpYmUiLCJyZXF1ZXN0Q29udGVudExlbmd0aCIsImNvbnRlbnRUeXBlSGVhZGVyIiwiaXNGb3JtRGF0YSIsImdldCIsInNldENvbnRlbnRUeXBlIiwib25Qcm9ncmVzcyIsImZsdXNoIiwicHJvZ3Jlc3NFdmVudERlY29yYXRvciIsInByb2dyZXNzRXZlbnRSZWR1Y2VyIiwiYXN5bmNEZWNvcmF0b3IiLCJ0cmFja1N0cmVhbSIsImlzQ3JlZGVudGlhbHNTdXBwb3J0ZWQiLCJwcm90b3R5cGUiLCJ0b1VwcGVyQ2FzZSIsIm5vcm1hbGl6ZSIsInRvSlNPTiIsImNyZWRlbnRpYWxzIiwicmVzcG9uc2UiLCJpc1N0cmVhbVJlc3BvbnNlIiwib3B0aW9ucyIsInByb3AiLCJyZXNwb25zZUNvbnRlbnRMZW5ndGgiLCJyZXNwb25zZURhdGEiLCJmaW5kS2V5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmcm9tIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImVyciIsIm5hbWUiLCJtZXNzYWdlIiwiYXNzaWduIiwiRVJSX05FVFdPUksiLCJjYXVzZSIsImNvZGUiLCJYTUxIdHRwUmVxdWVzdCIsIl9jb25maWciLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwib25DYW5jZWxlZCIsInVwbG9hZFRocm90dGxlZCIsImRvd25sb2FkVGhyb3R0bGVkIiwiZmx1c2hVcGxvYWQiLCJmbHVzaERvd25sb2FkIiwiZG9uZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVRleHQiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwiaW5kZXhPZiIsInNldFRpbWVvdXQiLCJvbmFib3J0IiwiRUNPTk5BQk9SVEVEIiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ0cmFuc2l0aW9uYWwiLCJjbGFyaWZ5VGltZW91dEVycm9yIiwiRVRJTUVET1VUIiwidmFsIiwia2V5Iiwic2V0UmVxdWVzdEhlYWRlciIsImlzVW5kZWZpbmVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVwbG9hZCIsImNhbmNlbCIsImFib3J0Iiwic3Vic2NyaWJlIiwiYWJvcnRlZCIsInByb3RvY29sIiwicHJvdG9jb2xzIiwiRVJSX0JBRF9SRVFVRVNUIiwic2VuZCIsImF4aW9zIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsImluc3RhbmNlIiwiZXh0ZW5kIiwiYWxsT3duS2V5cyIsImNyZWF0ZSIsImluc3RhbmNlQ29uZmlnIiwiQXhpb3MiLCJDYW5jZWxlZEVycm9yIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsIlZFUlNJT04iLCJ0b0Zvcm1EYXRhIiwiQXhpb3NFcnJvciIsIkNhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwibWVyZ2VDb25maWciLCJBeGlvc0hlYWRlcnMiLCJmb3JtVG9KU09OIiwidGhpbmciLCJpc0hUTUxGb3JtIiwiRm9ybURhdGEiLCJIdHRwU3RhdHVzQ29kZSIsImRlZmF1bHQiLCJjb25zdHJ1Y3RvciIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJ0aGlzIiwicHJvbWlzZSIsInRva2VuIiwidGhlbiIsIl9saXN0ZW5lcnMiLCJvbmZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwidGhyb3dJZlJlcXVlc3RlZCIsImxpc3RlbmVyIiwicHVzaCIsImluZGV4Iiwic3BsaWNlIiwiY29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsInNvdXJjZSIsImMiLCJjYWxsIiwiRVJSX0NBTkNFTEVEIiwiaW5oZXJpdHMiLCJfX0NBTkNFTF9fIiwidmFsaWRhdG9ycyIsImRlZmF1bHRzIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJFcnJvciIsImR1bW15IiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJzdGFjayIsInJlcGxhY2UiLCJlbmRzV2l0aCIsInBhcmFtc1NlcmlhbGl6ZXIiLCJhc3NlcnRPcHRpb25zIiwic2lsZW50SlNPTlBhcnNpbmciLCJib29sZWFuIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJzZXJpYWxpemUiLCJmdW5jdGlvbiIsImFsbG93QWJzb2x1dGVVcmxzIiwiYmFzZVVybCIsInNwZWxsaW5nIiwid2l0aFhzcmZUb2tlbiIsImNvbnRleHRIZWFkZXJzIiwibWVyZ2UiLCJjb21tb24iLCJjb25jYXQiLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwicnVuV2hlbiIsInN5bmNocm9ub3VzIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwibGVuIiwiY2hhaW4iLCJiaW5kIiwiYXBwbHkiLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJlcnJvciIsImdldFVyaSIsImZ1bGxQYXRoIiwiYmFzZVVSTCIsInBhcmFtcyIsImdlbmVyYXRlSFRUUE1ldGhvZCIsImlzRm9ybSIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwidG9KU09OT2JqZWN0IiwiZGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3VzdG9tUHJvcHMiLCJheGlvc0Vycm9yIiwidG9GbGF0T2JqZWN0Iiwib2JqIiwiJGludGVybmFscyIsIlN5bWJvbCIsIm5vcm1hbGl6ZUhlYWRlciIsImhlYWRlciIsInRyaW0iLCJub3JtYWxpemVWYWx1ZSIsIm1hdGNoSGVhZGVyVmFsdWUiLCJmaWx0ZXIiLCJpc0hlYWRlck5hbWVGaWx0ZXIiLCJpc1JlZ0V4cCIsInNldCIsInZhbHVlT3JSZXdyaXRlIiwicmV3cml0ZSIsInNlbGYiLCJzZXRIZWFkZXIiLCJfdmFsdWUiLCJfaGVhZGVyIiwiX3Jld3JpdGUiLCJsSGVhZGVyIiwic2V0SGVhZGVycyIsImlzUGxhaW5PYmplY3QiLCJpc0hlYWRlcnMiLCJwYXJzZXIiLCJ0b2tlbnMiLCJ0b2tlbnNSRSIsIm1hdGNoIiwiZXhlYyIsInBhcnNlVG9rZW5zIiwibWF0Y2hlciIsImRlbGV0ZWQiLCJkZWxldGVIZWFkZXIiLCJjbGVhciIsImtleXMiLCJmb3JtYXQiLCJub3JtYWxpemVkIiwidyIsImNoYXIiLCJmb3JtYXRIZWFkZXIiLCJ0YXJnZXRzIiwiYXNTdHJpbmdzIiwiaXRlcmF0b3IiLCJ0b1N0cmluZyIsInRvU3RyaW5nVGFnIiwiZmlyc3QiLCJjb21wdXRlZCIsInRhcmdldCIsImFjY2Vzc29yIiwiYWNjZXNzb3JzIiwiZGVmaW5lQWNjZXNzb3IiLCJhY2Nlc3Nvck5hbWUiLCJ0b0NhbWVsQ2FzZSIsIm1ldGhvZE5hbWUiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJjb25maWd1cmFibGUiLCJidWlsZEFjY2Vzc29ycyIsInJlZHVjZURlc2NyaXB0b3JzIiwibWFwcGVkIiwic2xpY2UiLCJoZWFkZXJWYWx1ZSIsImZyZWV6ZU1ldGhvZHMiLCJoYW5kbGVycyIsInVzZSIsImVqZWN0IiwiaCIsImJ1aWxkRnVsbFBhdGgiLCJyZXF1ZXN0ZWRVUkwiLCJpc1JlbGF0aXZlVXJsIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsImRpc3BhdGNoUmVxdWVzdCIsInRyYW5zZm9ybVJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsImhlYWRlcnNUb09iamVjdCIsImNvbmZpZzEiLCJjb25maWcyIiwiZ2V0TWVyZ2VkVmFsdWUiLCJjYXNlbGVzcyIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJhIiwiYiIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJ0aW1lb3V0TWVzc2FnZSIsIndpdGhYU1JGVG9rZW4iLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwiZGVjb21wcmVzcyIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwiYmVmb3JlUmVkaXJlY3QiLCJ0cmFuc3BvcnQiLCJodHRwQWdlbnQiLCJodHRwc0FnZW50Iiwic29ja2V0UGF0aCIsInJlc3BvbnNlRW5jb2RpbmciLCJ2YWxpZGF0ZVN0YXR1cyIsImNvbmZpZ1ZhbHVlIiwic2V0dGxlIiwiRVJSX0JBRF9SRVNQT05TRSIsIk1hdGgiLCJmbG9vciIsInRyYW5zZm9ybURhdGEiLCJmbnMiLCJjb250ZW50VHlwZSIsImdldENvbnRlbnRUeXBlIiwiaGFzSlNPTkNvbnRlbnRUeXBlIiwiaXNPYmplY3RQYXlsb2FkIiwiaXNPYmplY3QiLCJKU09OIiwic3RyaW5naWZ5IiwiaXNCdWZmZXIiLCJpc1N0cmVhbSIsImlzRmlsZSIsImJ1ZmZlciIsImlzRmlsZUxpc3QiLCJmb3JtU2VyaWFsaXplciIsIl9Gb3JtRGF0YSIsImVudiIsInJhd1ZhbHVlIiwicGFyc2UiLCJzdHJpbmdpZnlTYWZlbHkiLCJKU09OUmVxdWVzdGVkIiwiaXNSZXNwb25zZSIsInN0cmljdEpTT05QYXJzaW5nIiwiY2xhc3NlcyIsIkJsb2IiLCJjaGFyTWFwIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQXhpb3NVUkxTZWFyY2hQYXJhbXMiLCJfcGFpcnMiLCJhcHBlbmQiLCJfZW5jb2RlIiwicGFpciIsIkNvbnRpbnVlIiwiU3dpdGNoaW5nUHJvdG9jb2xzIiwiUHJvY2Vzc2luZyIsIkVhcmx5SGludHMiLCJPayIsIkNyZWF0ZWQiLCJBY2NlcHRlZCIsIk5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbiIsIk5vQ29udGVudCIsIlJlc2V0Q29udGVudCIsIlBhcnRpYWxDb250ZW50IiwiTXVsdGlTdGF0dXMiLCJBbHJlYWR5UmVwb3J0ZWQiLCJJbVVzZWQiLCJNdWx0aXBsZUNob2ljZXMiLCJNb3ZlZFBlcm1hbmVudGx5IiwiRm91bmQiLCJTZWVPdGhlciIsIk5vdE1vZGlmaWVkIiwiVXNlUHJveHkiLCJVbnVzZWQiLCJUZW1wb3JhcnlSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiQmFkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlBheW1lbnRSZXF1aXJlZCIsIkZvcmJpZGRlbiIsIk5vdEZvdW5kIiwiTWV0aG9kTm90QWxsb3dlZCIsIk5vdEFjY2VwdGFibGUiLCJQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJSZXF1ZXN0VGltZW91dCIsIkNvbmZsaWN0IiwiR29uZSIsIkxlbmd0aFJlcXVpcmVkIiwiUHJlY29uZGl0aW9uRmFpbGVkIiwiUGF5bG9hZFRvb0xhcmdlIiwiVXJpVG9vTG9uZyIsIlVuc3VwcG9ydGVkTWVkaWFUeXBlIiwiUmFuZ2VOb3RTYXRpc2ZpYWJsZSIsIkV4cGVjdGF0aW9uRmFpbGVkIiwiSW1BVGVhcG90IiwiTWlzZGlyZWN0ZWRSZXF1ZXN0IiwiVW5wcm9jZXNzYWJsZUVudGl0eSIsIkxvY2tlZCIsIkZhaWxlZERlcGVuZGVuY3kiLCJUb29FYXJseSIsIlVwZ3JhZGVSZXF1aXJlZCIsIlByZWNvbmRpdGlvblJlcXVpcmVkIiwiVG9vTWFueVJlcXVlc3RzIiwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlIiwiVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnMiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiTm90SW1wbGVtZW50ZWQiLCJCYWRHYXRld2F5IiwiU2VydmljZVVuYXZhaWxhYmxlIiwiR2F0ZXdheVRpbWVvdXQiLCJIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZCIsIlZhcmlhbnRBbHNvTmVnb3RpYXRlcyIsIkluc3VmZmljaWVudFN0b3JhZ2UiLCJMb29wRGV0ZWN0ZWQiLCJOb3RFeHRlbmRlZCIsIk5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwidGhpc0FyZyIsImFyZ3VtZW50cyIsImJ1aWxkVVJMIiwic2VyaWFsaXplRm4iLCJzZXJpYWxpemVkUGFyYW1zIiwiaGFzaG1hcmtJbmRleCIsImNvbWJpbmVVUkxzIiwicmVsYXRpdmVVUkwiLCJzaWduYWxzIiwiQm9vbGVhbiIsInRpbWVyIiwiY2xlYXJUaW1lb3V0IiwiYXNhcCIsImhhc1N0YW5kYXJkQnJvd3NlckVudiIsIndyaXRlIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImRvY3VtZW50IiwicmVhZCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlbW92ZSIsIm5vdyIsImZvcm1EYXRhIiwiYnVpbGRQYXRoIiwiaXNOdW1lcmljS2V5IiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJpc0xhc3QiLCJoYXNPd25Qcm9wIiwiYXJyIiwiYXJyYXlUb09iamVjdCIsImZvckVhY2hFbnRyeSIsIm1hdGNoQWxsIiwicGFyc2VQcm9wUGF0aCIsImlzQWJzb2x1dGVVUkwiLCJwYXlsb2FkIiwiVVJMIiwiaXNNU0lFIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaG9zdCIsInBvcnQiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInRvT2JqZWN0U2V0IiwicmF3SGVhZGVycyIsInBhcnNlZCIsInNwbGl0IiwibGluZSIsInN1YnN0cmluZyIsInBhcnNlUHJvdG9jb2wiLCJpc0Rvd25sb2FkU3RyZWFtIiwiZnJlcSIsImJ5dGVzTm90aWZpZWQiLCJfc3BlZWRvbWV0ZXIiLCJsb2FkZWQiLCJ0b3RhbCIsImxlbmd0aENvbXB1dGFibGUiLCJwcm9ncmVzc0J5dGVzIiwicmF0ZSIsInByb2dyZXNzIiwiYnl0ZXMiLCJlc3RpbWF0ZWQiLCJldmVudCIsInRocm90dGxlZCIsImF1dGgiLCJidG9hIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52IiwieHNyZlZhbHVlIiwic2FtcGxlc0NvdW50IiwibWluIiwiQXJyYXkiLCJ0aW1lc3RhbXBzIiwiZmlyc3RTYW1wbGVUUyIsImhlYWQiLCJ0YWlsIiwiY2h1bmtMZW5ndGgiLCJzdGFydGVkQXQiLCJieXRlc0NvdW50IiwicGFzc2VkIiwicm91bmQiLCJjYWxsYmFjayIsImxhc3RBcmdzIiwidGltZXN0YW1wIiwidGhyZXNob2xkIiwiaW52b2tlIiwiaXNWaXNpdGFibGUiLCJyZW1vdmVCcmFja2V0cyIsInJlbmRlcktleSIsImRvdHMiLCJwcmVkaWNhdGVzIiwibWV0YVRva2VucyIsImluZGV4ZXMiLCJvcHRpb24iLCJ2aXNpdG9yIiwiZGVmYXVsdFZpc2l0b3IiLCJ1c2VCbG9iIiwiY29udmVydFZhbHVlIiwiaXNEYXRlIiwidG9JU09TdHJpbmciLCJpc1R5cGVkQXJyYXkiLCJCdWZmZXIiLCJzb21lIiwiaXNGbGF0QXJyYXkiLCJ0b0FycmF5IiwiZWwiLCJleHBvc2VkSGVscGVycyIsImJ1aWxkIiwicG9wIiwidG9VUkxFbmNvZGVkRm9ybSIsIlVSTFNlYXJjaFBhcmFtcyIsImhlbHBlcnMiLCJpc05vZGUiLCJzdHJlYW1DaHVuayIsImNodW5rIiwiY2h1bmtTaXplIiwiZW5kIiwicG9zIiwicmVhZEJ5dGVzIiwiaXRlcmFibGUiLCJyZWFkU3RyZWFtIiwiYXN5bmNJdGVyYXRvciIsInJlYWRlciIsImdldFJlYWRlciIsIm9uRmluaXNoIiwiX29uRmluaXNoIiwicHVsbCIsIm5leHQiLCJjbG9zZSIsImxvYWRlZEJ5dGVzIiwiZW5xdWV1ZSIsInJldHVybiIsImhpZ2hXYXRlck1hcmsiLCJkZXByZWNhdGVkV2FybmluZ3MiLCJ2YWxpZGF0b3IiLCJ2ZXJzaW9uIiwib3B0Iiwib3B0cyIsImRlc2MiLCJmb3JtYXRNZXNzYWdlIiwiRVJSX0RFUFJFQ0FURUQiLCJjb3JyZWN0U3BlbGxpbmciLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJFUlJfQkFEX09QVElPTl9WQUxVRSIsInJlc3VsdCIsIkVSUl9CQURfT1BUSU9OIiwiaXNCcm93c2VyIiwiaGFzQnJvd3NlckVudiIsIndpbmRvdyIsIl9uYXZpZ2F0b3IiLCJwcm9kdWN0IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJocmVmIiwiZ2V0UHJvdG90eXBlT2YiLCJraW5kT2YiLCJjYWNoZSIsImtpbmRPZlRlc3QiLCJ0eXBlT2ZUZXN0IiwiaXNSZXF1ZXN0IiwibCIsImdldE93blByb3BlcnR5TmFtZXMiLCJfa2V5IiwiX2dsb2JhbCIsImdsb2JhbFRoaXMiLCJnbG9iYWwiLCJpc0NvbnRleHREZWZpbmVkIiwiVHlwZWRBcnJheSIsImhhc093blByb3BlcnR5IiwicmVkdWNlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJyZWR1Y2VkRGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9yIiwicmV0IiwiaXNBc3luY0ZuIiwiX3NldEltbWVkaWF0ZSIsInNldEltbWVkaWF0ZVN1cHBvcnRlZCIsInNldEltbWVkaWF0ZSIsInBvc3RNZXNzYWdlU3VwcG9ydGVkIiwicG9zdE1lc3NhZ2UiLCJyYW5kb20iLCJjYWxsYmFja3MiLCJzaGlmdCIsImNiIiwicXVldWVNaWNyb3Rhc2siLCJwcm9jZXNzIiwibmV4dFRpY2siLCJraW5kIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJpc0Jvb2xlYW4iLCJwaXBlIiwiYXNzaWduVmFsdWUiLCJ0YXJnZXRLZXkiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJjaGFyQ29kZUF0Iiwic3VwZXJDb25zdHJ1Y3RvciIsInByb3BzIiwic291cmNlT2JqIiwiZGVzdE9iaiIsInByb3BGaWx0ZXIiLCJtZXJnZWQiLCJzZWFyY2hTdHJpbmciLCJwb3NpdGlvbiIsImxhc3RJbmRleCIsInJlZ0V4cCIsIm1hdGNoZXMiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJhcnJheU9yU3RyaW5nIiwiZGVsaW1pdGVyIiwiZGVmaW5lIiwibSIsInAxIiwicDIiLCJub29wIiwiZGVmYXVsdFZhbHVlIiwidmlzaXQiLCJyZWR1Y2VkVmFsdWUiLCJpc1RoZW5hYmxlIiwiY2F0Y2giLCJjb21wb25lbnRzIiwiTmF2aWdhdGlvbk1lbnUiLCJTaW5nbGVQb3N0R29vZ2xlTWFwIiwiTWFpbkZvb3RlciIsImxvY2FsX2RhdGFfcHJpbWFyeV9tZW51X2Zvb3RlciIsInRoZW1lX3ZhcnMiLCJtb2JpbGUiLCJtb2JpbGVGb290ZXIiLCJ3aW5kb3dXaWR0aCIsImNyZWF0ZWQiLCJjaGVja1NjcmVlbiIsIm1vdW50ZWQiLCJoYW5kbGVDbGlja091dHNpZGVEcm9wZG93bk1lbnUiLCJiZWZvcmVVbm1vdW50IiwibWV0aG9kcyIsInRvZ2dsZW1vYmlsZUZvb3RlciIsImlubmVyV2lkdGgiLCJjbGFzc05hbWUiLCJsb2NhbF9kYXRhX3ByaW1hcnlfbWVudSIsIm1vYmlsZU5hdiIsInRvZ2dsZU1vYmlsZU5hdiIsIkdvb2dsZU1hcCIsIk1hcmtlciIsIkluZm9XaW5kb3ciLCJsb2NhbF9kYXRhX3Bvc3RfaWQiLCJwb3N0IiwiWU9VUl9HT09HTEVfTUFQU19BUElfS0VZIiwidGl0bGUiLCJhZGRyZXNzIiwiY2VudGVyIiwibG9hZGluZyIsIm1hcFpvb20iLCJpbmZvV2luZG93UG9zaXRpb24iLCJsYXQiLCJsbmciLCJpbmZvV2luZG93T3BlbmVkIiwic2VsZWN0ZWRNYXJrZXIiLCJhY2YiLCJndWlkZXNfbG9jYXRpb24iLCJvcGVuSW5mb1dpbmRvdyIsImNsb3NlSW5mb1dpbmRvdyIsImdldF90aXRsZSIsImN1cnJlbnRfdGl0bGUiLCJnZXRHb29nbGVNYXBzRGlyZWN0aW9uc0xpbmtlIiwiX2NyZWF0ZUVsZW1lbnRCbG9jayIsIl9GcmFnbWVudCIsIl9jcmVhdGVWTm9kZSIsIl9jb21wb25lbnRfbmF2aWdhdGlvbiIsIl9jb21wb25lbnRfc2luZ2xlcG9zdGdvb2dsZW1hcCIsIl9jb21wb25lbnRfbWFpbmZvb3RlciIsImNsYXNzIiwiX2hvaXN0ZWRfMSIsIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCJfaG9pc3RlZF8yIiwiX3JlbmRlckxpc3QiLCIkZGF0YSIsIml0ZW0iLCJyZWwiLCJfaG9pc3RlZF8zIiwiaWYiLCJzcmMiLCJhbHQiLCJfaG9pc3RlZF80Iiwib25DbGljayIsIl9jYWNoZSIsIiRvcHRpb25zIiwiX25vcm1hbGl6ZUNsYXNzIiwiX1RyYW5zaXRpb24iLCJwZXJzaXN0ZWQiLCJfd2l0aEN0eCIsIl9ob2lzdGVkXzUiLCJfaG9pc3RlZF82IiwiX2hvaXN0ZWRfNyIsIl9jcmVhdGVDb21tZW50Vk5vZGUiLCJ0ZXh0Q29udGVudCIsIl90b0Rpc3BsYXlTdHJpbmciLCJyZW5kZXJlZCIsInJlZ2lzdHJhdGlvbiIsInBob25lIiwiX2hvaXN0ZWRfOCIsImh1bnRfdW5pdHMiLCJfaG9pc3RlZF85Iiwid2Vic2l0ZSIsIl9ob2lzdGVkXzEwIiwib3BlbmVkcmFuZ2VfdmVyaWZpZWQiLCJfaG9pc3RlZF8xMSIsIl9ob2lzdGVkXzEyIiwiX2NvbXBvbmVudF9Hb29nbGVNYXAiLCJzdHlsZSIsInpvb20iLCJfY29tcG9uZW50X01hcmtlciIsIl9jb21wb25lbnRfSW5mb1dpbmRvdyIsIl9ob2lzdGVkXzEzIiwiX2hvaXN0ZWRfMTQiLCJfaG9pc3RlZF8xNSIsImV4cG9ydHMiLCJzZmMiLCJfX3ZjY09wdHMiLCJtYWtlTWFwIiwiRU1QVFlfT0JKIiwiZnJlZXplIiwiRU1QVFlfQVJSIiwiTk9PUCIsIk5PIiwiaXNPbiIsImlzTW9kZWxMaXN0ZW5lciIsInN0YXJ0c1dpdGgiLCJoYXNPd25Qcm9wZXJ0eSQxIiwiaGFzT3duIiwiaXNNYXAiLCJ0b1R5cGVTdHJpbmciLCJpc1NldCIsImlzU3ltYm9sIiwiaXNQcm9taXNlIiwib2JqZWN0VG9TdHJpbmciLCJ0b1Jhd1R5cGUiLCJpc0ludGVnZXJLZXkiLCJwYXJzZUludCIsImlzUmVzZXJ2ZWRQcm9wIiwiaXNCdWlsdEluRGlyZWN0aXZlIiwiY2FjaGVTdHJpbmdGdW5jdGlvbiIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwiY2FwaXRhbGl6ZSIsImNoYXJBdCIsInRvSGFuZGxlcktleSIsImhhc0NoYW5nZWQiLCJvbGRWYWx1ZSIsImlzIiwiaW52b2tlQXJyYXlGbnMiLCJhcmciLCJkZWYiLCJsb29zZVRvTnVtYmVyIiwibiIsInBhcnNlRmxvYXQiLCJpc05hTiIsInRvTnVtYmVyIiwiTmFOIiwiX2dsb2JhbFRoaXMiLCJnZXRHbG9iYWxUaGlzIiwiZyIsIlBhdGNoRmxhZ05hbWVzIiwic2xvdEZsYWdzVGV4dCIsImlzR2xvYmFsbHlBbGxvd2VkIiwicmFuZ2UiLCJub3JtYWxpemVTdHlsZSIsInBhcnNlU3RyaW5nU3R5bGUiLCJsaXN0RGVsaW1pdGVyUkUiLCJwcm9wZXJ0eURlbGltaXRlclJFIiwic3R5bGVDb21tZW50UkUiLCJjc3NUZXh0IiwidG1wIiwibm9ybWFsaXplQ2xhc3MiLCJub3JtYWxpemVQcm9wcyIsImtsYXNzIiwiaXNIVE1MVGFnIiwiaXNTVkdUYWciLCJpc01hdGhNTFRhZyIsImlzVm9pZFRhZyIsInNwZWNpYWxCb29sZWFuQXR0cnMiLCJpc1NwZWNpYWxCb29sZWFuQXR0ciIsImlzQm9vbGVhbkF0dHIiLCJpbmNsdWRlQm9vbGVhbkF0dHIiLCJpc0tub3duSHRtbEF0dHIiLCJpc0tub3duU3ZnQXR0ciIsImNzc1Zhck5hbWVFc2NhcGVTeW1ib2xzUkUiLCJnZXRFc2NhcGVkQ3NzVmFyTmFtZSIsImRvdWJsZUVzY2FwZSIsImxvb3NlRXF1YWwiLCJhVmFsaWRUeXBlIiwiYlZhbGlkVHlwZSIsImdldFRpbWUiLCJlcXVhbCIsImxvb3NlQ29tcGFyZUFycmF5cyIsImFIYXNLZXkiLCJiSGFzS2V5IiwibG9vc2VJbmRleE9mIiwiZmluZEluZGV4IiwiaXNSZWYkMSIsInRvRGlzcGxheVN0cmluZyIsInJlcGxhY2VyIiwicmVkdWNlIiwidmFsMiIsInN0cmluZ2lmeVN5bWJvbCIsInZhbHVlcyIsInYiLCJfYSIsIndhcm4kMiIsIm1zZyIsImFjdGl2ZUVmZmVjdFNjb3BlIiwiYWN0aXZlU3ViIiwiRWZmZWN0U2NvcGUiLCJkZXRhY2hlZCIsIl9hY3RpdmUiLCJlZmZlY3RzIiwiY2xlYW51cHMiLCJfaXNQYXVzZWQiLCJwYXJlbnQiLCJzY29wZXMiLCJhY3RpdmUiLCJwYXVzZSIsInJlc3VtZSIsInJ1biIsImN1cnJlbnRFZmZlY3RTY29wZSIsIm9uIiwib2ZmIiwic3RvcCIsImZyb21QYXJlbnQiLCJsYXN0IiwiZWZmZWN0U2NvcGUiLCJnZXRDdXJyZW50U2NvcGUiLCJvblNjb3BlRGlzcG9zZSIsImZhaWxTaWxlbnRseSIsInBhdXNlZFF1ZXVlRWZmZWN0cyIsIldlYWtTZXQiLCJSZWFjdGl2ZUVmZmVjdCIsImRlcHMiLCJkZXBzVGFpbCIsImZsYWdzIiwiY2xlYW51cCIsInNjaGVkdWxlciIsImRlbGV0ZSIsInRyaWdnZXIiLCJub3RpZnkiLCJiYXRjaCIsImNsZWFudXBFZmZlY3QiLCJwcmVwYXJlRGVwcyIsInByZXZFZmZlY3QiLCJwcmV2U2hvdWxkVHJhY2siLCJzaG91bGRUcmFjayIsImNsZWFudXBEZXBzIiwibGluayIsIm5leHREZXAiLCJyZW1vdmVTdWIiLCJvblN0b3AiLCJhZGQiLCJydW5JZkRpcnR5IiwiaXNEaXJ0eSIsImRpcnR5IiwiYmF0Y2hlZFN1YiIsImJhdGNoZWRDb21wdXRlZCIsImJhdGNoRGVwdGgiLCJzdWIiLCJpc0NvbXB1dGVkIiwic3RhcnRCYXRjaCIsImVuZEJhdGNoIiwicHJldkFjdGl2ZUxpbmsiLCJkZXAiLCJhY3RpdmVMaW5rIiwicHJldiIsInByZXZEZXAiLCJyZW1vdmVEZXAiLCJyZWZyZXNoQ29tcHV0ZWQiLCJfZGlydHkiLCJnbG9iYWxWZXJzaW9uIiwiaXNTU1IiLCJwcmV2U3ViIiwic29mdCIsIm5leHRTdWIiLCJzdWJzSGVhZCIsInN1YnMiLCJzYyIsImVmZmVjdCIsInJ1bm5lciIsInRyYWNrU3RhY2siLCJwYXVzZVRyYWNraW5nIiwicmVzZXRUcmFja2luZyIsIkxpbmsiLCJEZXAiLCJ0cmFjayIsImRlYnVnSW5mbyIsImFkZFN1YiIsIm9uVHJhY2siLCJvblRyaWdnZXIiLCJjdXJyZW50VGFpbCIsInRhcmdldE1hcCIsIldlYWtNYXAiLCJJVEVSQVRFX0tFWSIsIk1BUF9LRVlfSVRFUkFURV9LRVkiLCJBUlJBWV9JVEVSQVRFX0tFWSIsImRlcHNNYXAiLCJNYXAiLCJuZXdWYWx1ZSIsIm9sZFRhcmdldCIsInRhcmdldElzQXJyYXkiLCJpc0FycmF5SW5kZXgiLCJuZXdMZW5ndGgiLCJrZXkyIiwicmVhY3RpdmVSZWFkQXJyYXkiLCJhcnJheSIsInJhdyIsInRvUmF3IiwiaXNTaGFsbG93IiwidG9SZWFjdGl2ZSIsInNoYWxsb3dSZWFkQXJyYXkiLCJhcnJheUluc3RydW1lbnRhdGlvbnMiLCJfX3Byb3RvX18iLCJ4IiwiZXZlcnkiLCJmaW5kIiwiZmluZExhc3QiLCJmaW5kTGFzdEluZGV4IiwiaW5jbHVkZXMiLCJzZWFyY2hQcm94eSIsInNlcGFyYXRvciIsImxhc3RJbmRleE9mIiwibm9UcmFja2luZyIsInJlZHVjZVJpZ2h0IiwidG9SZXZlcnNlZCIsInRvU29ydGVkIiwiY29tcGFyZXIiLCJ0b1NwbGljZWQiLCJ3cmFwVmFsdWUiLCJpdGVyIiwiX25leHQiLCJhcnJheVByb3RvIiwid3JhcHBlZFJldEZuIiwibmVlZHNXcmFwIiwibWV0aG9kRm4iLCJyZXN1bHQyIiwid3JhcHBlZEZuIiwiYWNjIiwiaXNQcm94eSIsImlzTm9uVHJhY2thYmxlS2V5cyIsImJ1aWx0SW5TeW1ib2xzIiwiU2V0IiwiQmFzZVJlYWN0aXZlSGFuZGxlciIsIl9pc1JlYWRvbmx5IiwiX2lzU2hhbGxvdyIsInJlY2VpdmVyIiwiaXNSZWFkb25seTIiLCJpc1NoYWxsb3cyIiwic2hhbGxvd1JlYWRvbmx5TWFwIiwicmVhZG9ubHlNYXAiLCJzaGFsbG93UmVhY3RpdmVNYXAiLCJyZWFjdGl2ZU1hcCIsIlJlZmxlY3QiLCJpc1JlZiIsInJlYWRvbmx5IiwicmVhY3RpdmUiLCJNdXRhYmxlUmVhY3RpdmVIYW5kbGVyIiwic3VwZXIiLCJpc09sZFZhbHVlUmVhZG9ubHkiLCJpc1JlYWRvbmx5IiwiaGFkS2V5IiwiZGVsZXRlUHJvcGVydHkiLCJvd25LZXlzIiwiUmVhZG9ubHlSZWFjdGl2ZUhhbmRsZXIiLCJtdXRhYmxlSGFuZGxlcnMiLCJyZWFkb25seUhhbmRsZXJzIiwic2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMiLCJzaGFsbG93UmVhZG9ubHlIYW5kbGVycyIsInRvU2hhbGxvdyIsImdldFByb3RvIiwiY3JlYXRlUmVhZG9ubHlNZXRob2QiLCJjcmVhdGVJbnN0cnVtZW50YXRpb25zIiwic2hhbGxvdyIsImluc3RydW1lbnRhdGlvbnMiLCJyYXdUYXJnZXQiLCJyYXdLZXkiLCJ3cmFwIiwidG9SZWFkb25seSIsIm9ic2VydmVkIiwiY2hlY2tJZGVudGl0eUtleXMiLCJoYWRJdGVtcyIsInRhcmdldElzTWFwIiwiaXNQYWlyIiwiaXNLZXlPbmx5IiwiaW5uZXJJdGVyYXRvciIsImNyZWF0ZUl0ZXJhYmxlTWV0aG9kIiwiY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyIiwibXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycyIsInNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMiLCJyZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyIsInNoYWxsb3dSZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyIsImNyZWF0ZVJlYWN0aXZlT2JqZWN0Iiwic2hhbGxvd1JlYWN0aXZlIiwic2hhbGxvd1JlYWRvbmx5IiwiYmFzZUhhbmRsZXJzIiwiY29sbGVjdGlvbkhhbmRsZXJzIiwicHJveHlNYXAiLCJleGlzdGluZ1Byb3h5IiwidGFyZ2V0VHlwZSIsImlzRXh0ZW5zaWJsZSIsInJhd1R5cGUiLCJ0YXJnZXRUeXBlTWFwIiwicHJveHkiLCJQcm94eSIsImlzUmVhY3RpdmUiLCJtYXJrUmF3IiwiciIsInJlZiIsImNyZWF0ZVJlZiIsInNoYWxsb3dSZWYiLCJSZWZJbXBsIiwiX3Jhd1ZhbHVlIiwidXNlRGlyZWN0VmFsdWUiLCJ0cmlnZ2VyUmVmIiwicmVmMiIsInVucmVmIiwidG9WYWx1ZSIsInNoYWxsb3dVbndyYXBIYW5kbGVycyIsInByb3h5UmVmcyIsIm9iamVjdFdpdGhSZWZzIiwiQ3VzdG9tUmVmSW1wbCIsImZhY3RvcnkiLCJfZ2V0IiwiX3NldCIsIm5ld1ZhbCIsImN1c3RvbVJlZiIsInRvUmVmcyIsIm9iamVjdCIsInByb3BlcnR5VG9SZWYiLCJPYmplY3RSZWZJbXBsIiwiX29iamVjdCIsIl9kZWZhdWx0VmFsdWUiLCJkZXBNYXAiLCJnZXREZXBGcm9tUmVhY3RpdmUiLCJHZXR0ZXJSZWZJbXBsIiwiX2dldHRlciIsInRvUmVmIiwiQ29tcHV0ZWRSZWZJbXBsIiwic2V0dGVyIiwiX192X2lzUmVmIiwiVHJhY2tPcFR5cGVzIiwiVHJpZ2dlck9wVHlwZXMiLCJJTklUSUFMX1dBVENIRVJfVkFMVUUiLCJjbGVhbnVwTWFwIiwiYWN0aXZlV2F0Y2hlciIsImdldEN1cnJlbnRXYXRjaGVyIiwib25XYXRjaGVyQ2xlYW51cCIsImNsZWFudXBGbiIsIm93bmVyIiwidHJhdmVyc2UiLCJkZXB0aCIsIkluZmluaXR5Iiwic2VlbiIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic3RhY2skMSIsInB1c2hXYXJuaW5nQ29udGV4dCIsInZub2RlIiwicG9wV2FybmluZ0NvbnRleHQiLCJpc1dhcm5pbmciLCJ3YXJuJDEiLCJjb21wb25lbnQiLCJhcHBXYXJuSGFuZGxlciIsImFwcENvbnRleHQiLCJ3YXJuSGFuZGxlciIsInRyYWNlIiwiY3VycmVudFZOb2RlIiwibm9ybWFsaXplZFN0YWNrIiwicmVjdXJzZUNvdW50IiwicGFyZW50SW5zdGFuY2UiLCJnZXRDb21wb25lbnRUcmFjZSIsImNhbGxXaXRoRXJyb3JIYW5kbGluZyIsIl9iIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsIndhcm5BcmdzIiwibG9ncyIsImVudHJ5IiwicG9zdGZpeCIsImlzUm9vdCIsImZvcm1hdFByb3BzIiwiZm9ybWF0VHJhY2VFbnRyeSIsImZvcm1hdFRyYWNlIiwiZm9ybWF0UHJvcCIsImFzc2VydE51bWJlciIsIkVycm9yQ29kZXMiLCJFcnJvclR5cGVTdHJpbmdzJDEiLCJoYW5kbGVFcnJvciIsImNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nIiwidGhyb3dJbkRldiIsImNvbnRleHRWTm9kZSIsImVycm9ySGFuZGxlciIsInRocm93VW5oYW5kbGVkRXJyb3JJblByb2R1Y3Rpb24iLCJjdXIiLCJleHBvc2VkSW5zdGFuY2UiLCJlcnJvckluZm8iLCJlcnJvckNhcHR1cmVkSG9va3MiLCJlYyIsImluZm8iLCJsb2dFcnJvciIsInF1ZXVlIiwiZmx1c2hJbmRleCIsInBlbmRpbmdQb3N0Rmx1c2hDYnMiLCJhY3RpdmVQb3N0Rmx1c2hDYnMiLCJwb3N0Rmx1c2hJbmRleCIsInJlc29sdmVkUHJvbWlzZSIsImN1cnJlbnRGbHVzaFByb21pc2UiLCJSRUNVUlNJT05fTElNSVQiLCJwIiwicXVldWVKb2IiLCJqb2IiLCJqb2JJZCIsImdldElkIiwibGFzdEpvYiIsInN0YXJ0IiwibWlkZGxlIiwibWlkZGxlSm9iIiwibWlkZGxlSm9iSWQiLCJmaW5kSW5zZXJ0aW9uSW5kZXgiLCJxdWV1ZUZsdXNoIiwiZmx1c2hKb2JzIiwicXVldWVQb3N0Rmx1c2hDYiIsImZsdXNoUHJlRmx1c2hDYnMiLCJ1aWQiLCJjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMiLCJmbHVzaFBvc3RGbHVzaENicyIsImRlZHVwZWQiLCJzb3J0IiwiY2hlY2siLCJjb3VudCIsImNvbXBvbmVudE5hbWUiLCJnZXRDb21wb25lbnROYW1lIiwiaXNIbXJVcGRhdGluZyIsImhtckRpcnR5Q29tcG9uZW50cyIsIl9fVlVFX0hNUl9SVU5USU1FX18iLCJjcmVhdGVSZWNvcmQiLCJ0cnlXcmFwIiwicmVyZW5kZXIiLCJuZXdSZW5kZXIiLCJyZWNvcmQiLCJpbml0aWFsRGVmIiwiaW5zdGFuY2VzIiwibm9ybWFsaXplQ2xhc3NDb21wb25lbnQiLCJyZW5kZXJDYWNoZSIsInVwZGF0ZSIsInJlbG9hZCIsIm5ld0NvbXAiLCJ1cGRhdGVDb21wb25lbnREZWYiLCJvbGRDb21wIiwiZGlydHlJbnN0YW5jZXMiLCJwcm9wc0NhY2hlIiwiZW1pdHNDYWNoZSIsIm9wdGlvbnNDYWNoZSIsImNlUmVsb2FkIiwic3R5bGVzIiwicm9vdCIsImNlIiwiX3JlbW92ZUNoaWxkU3R5bGUiLCJpc0NsYXNzQ29tcG9uZW50IiwiZGV2dG9vbHMkMSIsImRldnRvb2xzTm90SW5zdGFsbGVkIiwiZW1pdCQxIiwiZW1pdCIsInNldERldnRvb2xzSG9vayQxIiwiaG9vayIsImVuYWJsZWQiLCJIVE1MRWxlbWVudCIsIl9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18iLCJuZXdIb29rIiwiZGV2dG9vbHNDb21wb25lbnRBZGRlZCIsImNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayIsImRldnRvb2xzQ29tcG9uZW50VXBkYXRlZCIsIl9kZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQiLCJkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQiLCJjbGVhbnVwQnVmZmVyIiwiYXBwIiwiZGV2dG9vbHNQZXJmU3RhcnQiLCJjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayIsImRldnRvb2xzUGVyZkVuZCIsInRpbWUiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJjdXJyZW50U2NvcGVJZCIsInNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsIl9fc2NvcGVJZCIsInB1c2hTY29wZUlkIiwicG9wU2NvcGVJZCIsIndpdGhTY29wZUlkIiwiX2lkIiwid2l0aEN0eCIsImN0eCIsImlzTm9uU2NvcGVkU2xvdCIsIl9uIiwicmVuZGVyRm5XaXRoQ29udGV4dCIsIl9kIiwic2V0QmxvY2tUcmFja2luZyIsInByZXZJbnN0YW5jZSIsIl9jIiwidmFsaWRhdGVEaXJlY3RpdmVOYW1lIiwid2l0aERpcmVjdGl2ZXMiLCJkaXJlY3RpdmVzIiwiZ2V0Q29tcG9uZW50UHVibGljSW5zdGFuY2UiLCJiaW5kaW5ncyIsImRpcnMiLCJkaXIiLCJtb2RpZmllcnMiLCJ1cGRhdGVkIiwiZGVlcCIsImludm9rZURpcmVjdGl2ZUhvb2siLCJwcmV2Vk5vZGUiLCJvbGRCaW5kaW5ncyIsImJpbmRpbmciLCJUZWxlcG9ydEVuZEtleSIsImlzVGVsZXBvcnQiLCJfX2lzVGVsZXBvcnQiLCJpc1RlbGVwb3J0RGlzYWJsZWQiLCJkaXNhYmxlZCIsImlzVGVsZXBvcnREZWZlcnJlZCIsImRlZmVyIiwiaXNUYXJnZXRTVkciLCJTVkdFbGVtZW50IiwiaXNUYXJnZXRNYXRoTUwiLCJNYXRoTUxFbGVtZW50IiwicmVzb2x2ZVRhcmdldCIsInNlbGVjdCIsInRhcmdldFNlbGVjdG9yIiwidG8iLCJUZWxlcG9ydEltcGwiLCJuMSIsIm4yIiwiY29udGFpbmVyIiwiYW5jaG9yIiwicGFyZW50Q29tcG9uZW50IiwicGFyZW50U3VzcGVuc2UiLCJuYW1lc3BhY2UiLCJzbG90U2NvcGVJZHMiLCJvcHRpbWl6ZWQiLCJpbnRlcm5hbHMiLCJtYyIsIm1vdW50Q2hpbGRyZW4iLCJwYyIsInBhdGNoQ2hpbGRyZW4iLCJwYmMiLCJwYXRjaEJsb2NrQ2hpbGRyZW4iLCJvIiwiaW5zZXJ0IiwicXVlcnlTZWxlY3RvciIsImNyZWF0ZVRleHQiLCJjcmVhdGVDb21tZW50Iiwic2hhcGVGbGFnIiwiY2hpbGRyZW4iLCJkeW5hbWljQ2hpbGRyZW4iLCJwbGFjZWhvbGRlciIsIm1haW5BbmNob3IiLCJtb3VudCIsImNvbnRhaW5lcjIiLCJhbmNob3IyIiwiaXNDRSIsIl90ZWxlcG9ydFRhcmdldCIsIm1vdW50VG9UYXJnZXQiLCJ0YXJnZXRBbmNob3IiLCJwcmVwYXJlQW5jaG9yIiwidXBkYXRlQ3NzVmFycyIsInF1ZXVlUG9zdFJlbmRlckVmZmVjdCIsIl9faXNNb3VudGVkIiwidGFyZ2V0U3RhcnQiLCJ3YXNEaXNhYmxlZCIsImN1cnJlbnRDb250YWluZXIiLCJjdXJyZW50QW5jaG9yIiwidHJhdmVyc2VTdGF0aWNDaGlsZHJlbiIsIm1vdmVUZWxlcG9ydCIsIm5leHRUYXJnZXQiLCJ1bSIsInVubW91bnQiLCJob3N0UmVtb3ZlIiwiZG9SZW1vdmUiLCJzaG91bGRSZW1vdmUiLCJjaGlsZCIsIm1vdmUiLCJoeWRyYXRlIiwibm9kZSIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImh5ZHJhdGVDaGlsZHJlbiIsInRhcmdldE5vZGUiLCJfbHBhIiwiZmlyc3RDaGlsZCIsIm5vZGVUeXBlIiwicGFyZW50QW5jaG9yIiwibW92ZVR5cGUiLCJpc1Jlb3JkZXIiLCJUZWxlcG9ydCIsImlzRGlzYWJsZWQiLCJ1dCIsInNldEF0dHJpYnV0ZSIsImxlYXZlQ2JLZXkiLCJlbnRlckNiS2V5JDEiLCJ1c2VUcmFuc2l0aW9uU3RhdGUiLCJpc01vdW50ZWQiLCJpc0xlYXZpbmciLCJpc1VubW91bnRpbmciLCJsZWF2aW5nVk5vZGVzIiwib25Nb3VudGVkIiwib25CZWZvcmVVbm1vdW50IiwiVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IiLCJGdW5jdGlvbiIsIkJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzIiwibW9kZSIsImFwcGVhciIsIm9uQmVmb3JlRW50ZXIiLCJvbkVudGVyIiwib25BZnRlckVudGVyIiwib25FbnRlckNhbmNlbGxlZCIsIm9uQmVmb3JlTGVhdmUiLCJvbkxlYXZlIiwib25BZnRlckxlYXZlIiwib25MZWF2ZUNhbmNlbGxlZCIsIm9uQmVmb3JlQXBwZWFyIiwib25BcHBlYXIiLCJvbkFmdGVyQXBwZWFyIiwib25BcHBlYXJDYW5jZWxsZWQiLCJyZWN1cnNpdmVHZXRTdWJ0cmVlIiwic3ViVHJlZSIsImZpbmROb25Db21tZW50Q2hpbGQiLCJoYXNGb3VuZCIsIkNvbW1lbnQiLCJCYXNlVHJhbnNpdGlvbiIsInNldHVwIiwic2xvdHMiLCJnZXRDdXJyZW50SW5zdGFuY2UiLCJnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4iLCJyYXdQcm9wcyIsImVtcHR5UGxhY2Vob2xkZXIiLCJpbm5lckNoaWxkIiwiZ2V0SW5uZXJDaGlsZCQxIiwiZW50ZXJIb29rcyIsInJlc29sdmVUcmFuc2l0aW9uSG9va3MiLCJob29rcyIsInNldFRyYW5zaXRpb25Ib29rcyIsIm9sZElubmVyQ2hpbGQiLCJpc1NhbWVWTm9kZVR5cGUiLCJsZWF2aW5nSG9va3MiLCJhZnRlckxlYXZlIiwiZGVsYXlMZWF2ZSIsImVhcmx5UmVtb3ZlIiwiZGVsYXllZExlYXZlIiwiZ2V0TGVhdmluZ05vZGVzRm9yVHlwZSIsImxlYXZpbmdWTm9kZXNDYWNoZSIsInBvc3RDbG9uZSIsImNhbGxIb29rIiwiY2FsbEFzeW5jSG9vayIsImhvb2syIiwiYmVmb3JlRW50ZXIiLCJsZWF2aW5nVk5vZGUiLCJlbnRlciIsImFmdGVySG9vayIsImNhbmNlbEhvb2siLCJjYWxsZWQiLCJjYW5jZWxsZWQiLCJsZWF2ZSIsImNsb25lIiwidm5vZGUyIiwiaG9va3MyIiwiaXNLZWVwQWxpdmUiLCJjbG9uZVZOb2RlIiwidHJhbnNpdGlvbiIsInNzQ29udGVudCIsInNzRmFsbGJhY2siLCJrZWVwQ29tbWVudCIsInBhcmVudEtleSIsImtleWVkRnJhZ21lbnRDb3VudCIsIkZyYWdtZW50IiwicGF0Y2hGbGFnIiwiZGVmaW5lQ29tcG9uZW50IiwiZXh0cmFPcHRpb25zIiwidXNlSWQiLCJpZFByZWZpeCIsImlkcyIsIm1hcmtBc3luY0JvdW5kYXJ5Iiwia25vd25UZW1wbGF0ZVJlZnMiLCJ1c2VUZW1wbGF0ZVJlZiIsInJlZnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXRSZWYiLCJyYXdSZWYiLCJvbGRSYXdSZWYiLCJpc1VubW91bnQiLCJpc0FzeW5jV3JhcHBlciIsIl9fYXN5bmNSZXNvbHZlZCIsInJlZlZhbHVlIiwib2xkUmVmIiwic2V0dXBTdGF0ZSIsInJhd1NldHVwU3RhdGUiLCJjYW5TZXRTZXR1cFJlZiIsIl9pc1N0cmluZyIsIl9pc1JlZiIsImRvU2V0IiwiZiIsImV4aXN0aW5nIiwiayIsImhhc0xvZ2dlZE1pc21hdGNoRXJyb3IiLCJsb2dNaXNtYXRjaEVycm9yIiwiZ2V0Q29udGFpbmVyVHlwZSIsIm5hbWVzcGFjZVVSSSIsInRhZ05hbWUiLCJpc1NWR0NvbnRhaW5lciIsImlzTWF0aE1MQ29udGFpbmVyIiwiaXNDb21tZW50IiwiY3JlYXRlSHlkcmF0aW9uRnVuY3Rpb25zIiwicmVuZGVyZXJJbnRlcm5hbHMiLCJtdCIsIm1vdW50Q29tcG9uZW50IiwicGF0Y2giLCJwYXRjaFByb3AiLCJoeWRyYXRlTm9kZSIsImlzRnJhZ21lbnRTdGFydCIsIm9uTWlzbWF0Y2giLCJoYW5kbGVNaXNtYXRjaCIsImRvbVR5cGUiLCJuZXh0Tm9kZSIsIlRleHQiLCJpc1RlbXBsYXRlTm9kZSIsInJlcGxhY2VOb2RlIiwiU3RhdGljIiwibmVlZFRvQWRvcHRDb250ZW50Iiwic3RhdGljQ291bnQiLCJvdXRlckhUTUwiLCJoeWRyYXRlRnJhZ21lbnQiLCJoeWRyYXRlRWxlbWVudCIsImxvY2F0ZUNsb3NpbmdBbmNob3IiLCJjcmVhdGVWTm9kZSIsInByZXZpb3VzU2libGluZyIsImxhc3RDaGlsZCIsImNyZWF0ZVRleHRWTm9kZSIsImZvcmNlUGF0Y2giLCJ2bm9kZUhvb2tzIiwibmVlZENhbGxUcmFuc2l0aW9uSG9va3MiLCJuZWVkVHJhbnNpdGlvbiIsImlubmVySFRNTCIsImhhc1dhcm5lZCIsImlzTWlzbWF0Y2hBbGxvd2VkIiwiY2xpZW50VGV4dCIsImlzQ3VzdG9tRWxlbWVudCIsImQiLCJwcm9wSGFzTWlzbWF0Y2giLCJvblZub2RlQmVmb3JlTW91bnQiLCJpbnZva2VWTm9kZUhvb2siLCJvblZub2RlTW91bnRlZCIsInF1ZXVlRWZmZWN0V2l0aFN1c3BlbnNlIiwicGFyZW50Vk5vZGUiLCJub3JtYWxpemVWTm9kZSIsImlzVGV4dCIsImZyYWdtZW50U2xvdFNjb3BlSWRzIiwiaXNGcmFnbWVudCIsInBhcmVudEVsZW1lbnQiLCJuZXh0MiIsInVwZGF0ZUhPQ0hvc3RFbCIsIm5ld05vZGUiLCJvbGROb2RlIiwicGFyZW50Tm9kZTIiLCJyZXBsYWNlQ2hpbGQiLCJoYXNDaGlsZE5vZGVzIiwiX3Zub2RlIiwiY2xpZW50VmFsdWUiLCJtaXNtYXRjaFR5cGUiLCJtaXNtYXRjaEtleSIsImFjdHVhbCIsImV4cGVjdGVkIiwiZ2V0QXR0cmlidXRlIiwiaXNTZXRFcXVhbCIsInRvQ2xhc3NTZXQiLCJzdHJpbmdpZnlTdHlsZSIsImFjdHVhbE1hcCIsInRvU3R5bGVNYXAiLCJleHBlY3RlZE1hcCIsInJlc29sdmVDc3NWYXJzIiwiaXNNYXBFcXVhbCIsImhhc0F0dHJpYnV0ZSIsImlzUmVuZGVyYWJsZUF0dHJWYWx1ZSIsIk1pc21hdGNoVHlwZVN0cmluZyIsInN0eWxlTWFwIiwiZ2V0Q3NzVmFycyIsImNzc1ZhcnMiLCJhbGxvd01pc21hdGNoQXR0ciIsImFsbG93ZWRUeXBlIiwiYWxsb3dlZEF0dHIiLCJsaXN0IiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsImh5ZHJhdGVPbklkbGUiLCJoeWRyYXRlT25WaXNpYmxlIiwib2IiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImlzSW50ZXJzZWN0aW5nIiwiZGlzY29ubmVjdCIsIkVsZW1lbnQiLCJ0b3AiLCJsZWZ0IiwiYm90dG9tIiwicmlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpbm5lckhlaWdodCIsImVsZW1lbnRJc1Zpc2libGVJblZpZXdwb3J0Iiwib2JzZXJ2ZSIsImh5ZHJhdGVPbk1lZGlhUXVlcnkiLCJxdWVyeSIsIm1xbCIsIm1hdGNoTWVkaWEiLCJvbmNlIiwiaHlkcmF0ZU9uSW50ZXJhY3Rpb24iLCJpbnRlcmFjdGlvbnMiLCJoYXNIeWRyYXRlZCIsImRvSHlkcmF0ZSIsInRlYXJkb3duIiwiZGlzcGF0Y2hFdmVudCIsIl9fYXN5bmNMb2FkZXIiLCJkZWZpbmVBc3luY0NvbXBvbmVudCIsImxvYWRlciIsImxvYWRpbmdDb21wb25lbnQiLCJlcnJvckNvbXBvbmVudCIsImRlbGF5IiwiaHlkcmF0ZVN0cmF0ZWd5Iiwic3VzcGVuc2libGUiLCJvbkVycm9yIiwidXNlck9uRXJyb3IiLCJyZXNvbHZlZENvbXAiLCJwZW5kaW5nUmVxdWVzdCIsInJldHJpZXMiLCJsb2FkIiwidGhpc1JlcXVlc3QiLCJjb21wIiwiX19lc01vZHVsZSIsIl9fYXN5bmNIeWRyYXRlIiwiZm9yRWFjaEVsZW1lbnQiLCJidW0iLCJpc1VubW91bnRlZCIsImN1cnJlbnRJbnN0YW5jZSIsImNyZWF0ZUlubmVyQ29tcCIsInN1c3BlbnNlIiwiaXNJblNTUkNvbXBvbmVudFNldHVwIiwiZGVsYXllZCIsIl9faXNLZWVwQWxpdmUiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsIm1heCIsInNoYXJlZENvbnRleHQiLCJyZW5kZXJlciIsImN1cnJlbnQiLCJfX3ZfY2FjaGUiLCJfdW5tb3VudCIsImNyZWF0ZUVsZW1lbnQiLCJzdG9yYWdlQ29udGFpbmVyIiwicmVzZXRTaGFwZUZsYWciLCJwcnVuZUNhY2hlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY2FjaGVkIiwiYWN0aXZhdGUiLCJpbnN0YW5jZTIiLCJpc0RlYWN0aXZhdGVkIiwidm5vZGVIb29rIiwiZGVhY3RpdmF0ZSIsImludmFsaWRhdGVNb3VudCIsImRhIiwib25Wbm9kZVVubW91bnRlZCIsIndhdGNoIiwicGVuZGluZ0NhY2hlS2V5IiwiY2FjaGVTdWJ0cmVlIiwiaXNTdXNwZW5zZSIsImdldElubmVyQ2hpbGQiLCJvblVwZGF0ZWQiLCJyYXdWTm9kZSIsImlzVk5vZGUiLCJjYWNoZWRWTm9kZSIsInBhdHRlcm4iLCJvbkFjdGl2YXRlZCIsInJlZ2lzdGVyS2VlcEFsaXZlSG9vayIsIm9uRGVhY3RpdmF0ZWQiLCJ3cmFwcGVkSG9vayIsIl9fd2RjIiwiaW5qZWN0SG9vayIsImluamVjdFRvS2VlcEFsaXZlUm9vdCIsImtlZXBBbGl2ZVJvb3QiLCJpbmplY3RlZCIsIm9uVW5tb3VudGVkIiwicHJlcGVuZCIsIl9fd2VoIiwicmVzZXQiLCJzZXRDdXJyZW50SW5zdGFuY2UiLCJjcmVhdGVIb29rIiwibGlmZWN5Y2xlIiwib25CZWZvcmVNb3VudCIsIm9uQmVmb3JlVXBkYXRlIiwib25TZXJ2ZXJQcmVmZXRjaCIsIm9uUmVuZGVyVHJpZ2dlcmVkIiwib25SZW5kZXJUcmFja2VkIiwib25FcnJvckNhcHR1cmVkIiwiQ09NUE9ORU5UUyIsIkRJUkVDVElWRVMiLCJyZXNvbHZlQ29tcG9uZW50IiwibWF5YmVTZWxmUmVmZXJlbmNlIiwicmVzb2x2ZUFzc2V0IiwiTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCIsImZvciIsInJlc29sdmVEeW5hbWljQ29tcG9uZW50IiwicmVzb2x2ZURpcmVjdGl2ZSIsIndhcm5NaXNzaW5nIiwiQ29tcG9uZW50Iiwic2VsZk5hbWUiLCJleHRyYSIsInJlZ2lzdHJ5IiwicmVuZGVyTGlzdCIsInJlbmRlckl0ZW0iLCJzb3VyY2VJc0FycmF5IiwiaXNJbnRlZ2VyIiwiY3JlYXRlU2xvdHMiLCJkeW5hbWljU2xvdHMiLCJzbG90IiwiaiIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsIm5vU2xvdHRlZCIsIm9wZW5CbG9jayIsImNyZWF0ZUJsb2NrIiwidmFsaWRTbG90Q29udGVudCIsImVuc3VyZVZhbGlkVk5vZGUiLCJzbG90S2V5Iiwic2NvcGVJZCIsInZub2RlcyIsInRvSGFuZGxlcnMiLCJwcmVzZXJ2ZUNhc2VJZk5lY2Vzc2FyeSIsImdldFB1YmxpY0luc3RhbmNlIiwiaXNTdGF0ZWZ1bENvbXBvbmVudCIsInB1YmxpY1Byb3BlcnRpZXNNYXAiLCIkIiwiJGVsIiwiJHByb3BzIiwiJGF0dHJzIiwiYXR0cnMiLCIkc2xvdHMiLCIkcmVmcyIsIiRwYXJlbnQiLCIkcm9vdCIsIiRob3N0IiwiJGVtaXQiLCJyZXNvbHZlTWVyZ2VkT3B0aW9ucyIsIiRmb3JjZVVwZGF0ZSIsIiRuZXh0VGljayIsIiR3YXRjaCIsImluc3RhbmNlV2F0Y2giLCJpc1Jlc2VydmVkUHJlZml4IiwiaGFzU2V0dXBCaW5kaW5nIiwiX19pc1NjcmlwdFNldHVwIiwiUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzIiwiYWNjZXNzQ2FjaGUiLCJub3JtYWxpemVkUHJvcHMiLCJwcm9wc09wdGlvbnMiLCJzaG91bGRDYWNoZUFjY2VzcyIsInB1YmxpY0dldHRlciIsImNzc01vZHVsZSIsImdsb2JhbFByb3BlcnRpZXMiLCJtYXJrQXR0cnNBY2Nlc3NlZCIsIl9fY3NzTW9kdWxlcyIsIlJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyIsInVuc2NvcGFibGVzIiwid2FyblJ1bnRpbWVVc2FnZSIsImRlZmluZVByb3BzIiwiZGVmaW5lRW1pdHMiLCJkZWZpbmVFeHBvc2UiLCJleHBvc2VkIiwiZGVmaW5lT3B0aW9ucyIsImRlZmluZVNsb3RzIiwiZGVmaW5lTW9kZWwiLCJ3aXRoRGVmYXVsdHMiLCJ1c2VTbG90cyIsImdldENvbnRleHQiLCJ1c2VBdHRycyIsInNldHVwQ29udGV4dCIsImNyZWF0ZVNldHVwQ29udGV4dCIsIm5vcm1hbGl6ZVByb3BzT3JFbWl0cyIsIm1lcmdlRGVmYXVsdHMiLCJza2lwRmFjdG9yeSIsIm1lcmdlTW9kZWxzIiwiY3JlYXRlUHJvcHNSZXN0UHJveHkiLCJleGNsdWRlZEtleXMiLCJ3aXRoQXN5bmNDb250ZXh0IiwiZ2V0QXdhaXRhYmxlIiwiYXdhaXRhYmxlIiwidW5zZXRDdXJyZW50SW5zdGFuY2UiLCJhcHBseU9wdGlvbnMiLCJwdWJsaWNUaGlzIiwiYmVmb3JlQ3JlYXRlIiwiY2FsbEhvb2skMSIsImRhdGFPcHRpb25zIiwiY29tcHV0ZWRPcHRpb25zIiwid2F0Y2hPcHRpb25zIiwicHJvdmlkZSIsInByb3ZpZGVPcHRpb25zIiwiaW5qZWN0IiwiaW5qZWN0T3B0aW9ucyIsImJlZm9yZU1vdW50IiwiYmVmb3JlVXBkYXRlIiwiYWN0aXZhdGVkIiwiZGVhY3RpdmF0ZWQiLCJiZWZvcmVEZXN0cm95IiwiZGVzdHJveWVkIiwidW5tb3VudGVkIiwicmVuZGVyVHJhY2tlZCIsInJlbmRlclRyaWdnZXJlZCIsImVycm9yQ2FwdHVyZWQiLCJzZXJ2ZXJQcmVmZXRjaCIsImV4cG9zZSIsImluaGVyaXRBdHRycyIsImZpbHRlcnMiLCJjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMiLCJjcmVhdGVEdXBsaWNhdGVDaGVja2VyIiwibm9ybWFsaXplSW5qZWN0IiwicmVzb2x2ZUluamVjdGlvbnMiLCJtZXRob2RIYW5kbGVyIiwiY3JlYXRlV2F0Y2hlciIsInByb3ZpZGVzIiwicmVnaXN0ZXJMaWZlY3ljbGVIb29rIiwicmVnaXN0ZXIiLCJfaG9vayIsImdldHRlciIsImNyZWF0ZVBhdGhHZXR0ZXIiLCJoYW5kbGVyIiwiYmFzZSIsIm1peGlucyIsImV4dGVuZHMiLCJleHRlbmRzT3B0aW9ucyIsImdsb2JhbE1peGlucyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInJlc29sdmVkIiwibWVyZ2VPcHRpb25zIiwic3RyYXRzIiwiYXNNaXhpbiIsInN0cmF0IiwiaW50ZXJuYWxPcHRpb25NZXJnZVN0cmF0cyIsIm1lcmdlRGF0YUZuIiwibWVyZ2VFbWl0c09yUHJvcHNPcHRpb25zIiwiZW1pdHMiLCJtZXJnZU9iamVjdE9wdGlvbnMiLCJtZXJnZUFzQXJyYXkkMSIsImNyZWF0ZUFwcENvbnRleHQiLCJpc05hdGl2ZVRhZyIsInBlcmZvcm1hbmNlIiwiY29tcGlsZXJPcHRpb25zIiwidWlkJDEiLCJjcmVhdGVBcHBBUEkiLCJyb290Q29tcG9uZW50Iiwicm9vdFByb3BzIiwiaW5zdGFsbGVkUGx1Z2lucyIsInBsdWdpbkNsZWFudXBGbnMiLCJfdWlkIiwiX2NvbXBvbmVudCIsIl9wcm9wcyIsIl9jb250YWluZXIiLCJfY29udGV4dCIsIl9pbnN0YW5jZSIsInBsdWdpbiIsImluc3RhbGwiLCJtaXhpbiIsInZhbGlkYXRlQ29tcG9uZW50TmFtZSIsImRpcmVjdGl2ZSIsInJvb3RDb250YWluZXIiLCJpc0h5ZHJhdGUiLCJfX3Z1ZV9hcHBfXyIsIl9jZVZOb2RlIiwiZGV2dG9vbHNJbml0QXBwIiwib25Vbm1vdW50IiwiZGV2dG9vbHNVbm1vdW50QXBwIiwicnVuV2l0aENvbnRleHQiLCJsYXN0QXBwIiwiY3VycmVudEFwcCIsInBhcmVudFByb3ZpZGVzIiwidHJlYXREZWZhdWx0QXNGYWN0b3J5IiwiaGFzSW5qZWN0aW9uQ29udGV4dCIsImludGVybmFsT2JqZWN0UHJvdG8iLCJjcmVhdGVJbnRlcm5hbE9iamVjdCIsImlzSW50ZXJuYWxPYmplY3QiLCJzZXRGdWxsUHJvcHMiLCJuZWVkQ2FzdEtleXMiLCJyYXdDYXN0VmFsdWVzIiwiaGFzQXR0cnNDaGFuZ2VkIiwiY2FtZWxLZXkiLCJpc0VtaXRMaXN0ZW5lciIsImVtaXRzT3B0aW9ucyIsInJhd0N1cnJlbnRQcm9wcyIsImNhc3RWYWx1ZXMiLCJyZXNvbHZlUHJvcFZhbHVlIiwiaXNBYnNlbnQiLCJoYXNEZWZhdWx0IiwicHJvcHNEZWZhdWx0cyIsIl9zZXRQcm9wIiwibWl4aW5Qcm9wc0NhY2hlIiwibm9ybWFsaXplUHJvcHNPcHRpb25zIiwiaGFzRXh0ZW5kcyIsImV4dGVuZFByb3BzIiwicmF3MiIsIm5vcm1hbGl6ZWRLZXkiLCJ2YWxpZGF0ZVByb3BOYW1lIiwicHJvcFR5cGUiLCJzaG91bGRDYXN0Iiwic2hvdWxkQ2FzdFRydWUiLCJ0eXBlTmFtZSIsInZhbGlkYXRlUHJvcHMiLCJyZXNvbHZlZFZhbHVlcyIsImNhbWVsaXplUHJvcHNLZXkiLCJ2YWxpZGF0ZVByb3AiLCJyZXF1aXJlZCIsInNraXBDaGVjayIsImlzVmFsaWQiLCJ0eXBlcyIsImV4cGVjdGVkVHlwZXMiLCJ2YWxpZCIsImV4cGVjdGVkVHlwZSIsImFzc2VydFR5cGUiLCJyZWNlaXZlZFR5cGUiLCJleHBlY3RlZFZhbHVlIiwic3R5bGVWYWx1ZSIsInJlY2VpdmVkVmFsdWUiLCJpc0V4cGxpY2FibGUiLCJlbGVtIiwiZ2V0SW52YWxpZFR5cGVNZXNzYWdlIiwiaXNTaW1wbGVUeXBlIiwiY3RvciIsImdldFR5cGUiLCJ0IiwiaXNJbnRlcm5hbEtleSIsIm5vcm1hbGl6ZVNsb3RWYWx1ZSIsIm5vcm1hbGl6ZVNsb3QiLCJyYXdTbG90Iiwibm9ybWFsaXplT2JqZWN0U2xvdHMiLCJyYXdTbG90cyIsIl9jdHgiLCJub3JtYWxpemVWTm9kZVNsb3RzIiwiYXNzaWduU2xvdHMiLCJpbml0U2xvdHMiLCJ1cGRhdGVTbG90cyIsIm5lZWREZWxldGlvbkNoZWNrIiwiZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0IiwiJHN0YWJsZSIsInN1cHBvcnRlZCIsInBlcmYiLCJzdGFydE1lYXN1cmUiLCJpc1N1cHBvcnRlZCIsIm1hcmsiLCJlbmRNZWFzdXJlIiwic3RhcnRUYWciLCJlbmRUYWciLCJtZWFzdXJlIiwiY2xlYXJNYXJrcyIsImNyZWF0ZVJlbmRlcmVyIiwiYmFzZUNyZWF0ZVJlbmRlcmVyIiwiY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25GbnMiLCJfX1ZVRV9fIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImhvc3RJbnNlcnQiLCJob3N0UGF0Y2hQcm9wIiwiaG9zdENyZWF0ZUVsZW1lbnQiLCJob3N0Q3JlYXRlVGV4dCIsImhvc3RDcmVhdGVDb21tZW50Iiwic2V0VGV4dCIsImhvc3RTZXRUZXh0Iiwic2V0RWxlbWVudFRleHQiLCJob3N0U2V0RWxlbWVudFRleHQiLCJob3N0UGFyZW50Tm9kZSIsImhvc3ROZXh0U2libGluZyIsInNldFNjb3BlSWQiLCJob3N0U2V0U2NvcGVJZCIsImluc2VydFN0YXRpY0NvbnRlbnQiLCJob3N0SW5zZXJ0U3RhdGljQ29udGVudCIsImdldE5leHRIb3N0Tm9kZSIsInByb2Nlc3NUZXh0IiwicHJvY2Vzc0NvbW1lbnROb2RlIiwibW91bnRTdGF0aWNOb2RlIiwicGF0Y2hTdGF0aWNOb2RlIiwicHJvY2Vzc0ZyYWdtZW50IiwicHJvY2Vzc0VsZW1lbnQiLCJwcm9jZXNzQ29tcG9uZW50IiwicmVtb3ZlU3RhdGljTm9kZSIsIm1vdW50RWxlbWVudCIsInBhdGNoRWxlbWVudCIsInJlc29sdmVDaGlsZHJlbk5hbWVzcGFjZSIsImZpbHRlclNpbmdsZVJvb3QiLCJjbG9uZUlmTW91bnRlZCIsIl9fdm5vZGUiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwidG9nZ2xlUmVjdXJzZSIsIm9uVm5vZGVCZWZvcmVVcGRhdGUiLCJwYXRjaFByb3BzIiwicHJvcHNUb1VwZGF0ZSIsImR5bmFtaWNQcm9wcyIsIm9uVm5vZGVVcGRhdGVkIiwib2xkQ2hpbGRyZW4iLCJuZXdDaGlsZHJlbiIsImZhbGxiYWNrQ29udGFpbmVyIiwib2xkVk5vZGUiLCJuZXdWTm9kZSIsImZyYWdtZW50U3RhcnRBbmNob3IiLCJmcmFnbWVudEVuZEFuY2hvciIsInVwZGF0ZUNvbXBvbmVudCIsImluaXRpYWxWTm9kZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlIiwiX19obXJJZCIsInJlZ2lzdGVySE1SIiwic2V0dXBDb21wb25lbnQiLCJhc3luY0RlcCIsInJlZ2lzdGVyRGVwIiwic2V0dXBSZW5kZXJFZmZlY3QiLCJuZXh0Vk5vZGUiLCJwcmV2UHJvcHMiLCJwcmV2Q2hpbGRyZW4iLCJuZXh0UHJvcHMiLCJuZXh0Q2hpbGRyZW4iLCJoYXNQcm9wc0NoYW5nZWQiLCJzaG91bGRVcGRhdGVDb21wb25lbnQiLCJhc3luY1Jlc29sdmVkIiwidXBkYXRlQ29tcG9uZW50UHJlUmVuZGVyIiwiY29tcG9uZW50VXBkYXRlRm4iLCJidSIsInUiLCJub25IeWRyYXRlZEFzeW5jUm9vdCIsImxvY2F0ZU5vbkh5ZHJhdGVkQXN5bmNSb290Iiwib3JpZ2luTmV4dCIsIm5leHRUcmVlIiwicmVuZGVyQ29tcG9uZW50Um9vdCIsInByZXZUcmVlIiwiYm0iLCJpc0FzeW5jV3JhcHBlclZOb2RlIiwiaHlkcmF0ZVN1YlRyZWUiLCJfaW5qZWN0Q2hpbGRTdHlsZSIsInNjb3BlZEluaXRpYWxWTm9kZSIsInNjb3BlIiwicnRjIiwicnRnIiwicmF3UHJldlByb3BzIiwiaXNJbkhtckNvbnRleHQiLCJrZWJhYktleSIsImNhbWVsaXplZEtleSIsInVwZGF0ZVByb3BzIiwiYzEiLCJwcmV2U2hhcGVGbGFnIiwiYzIiLCJwYXRjaEtleWVkQ2hpbGRyZW4iLCJwYXRjaFVua2V5ZWRDaGlsZHJlbiIsInVubW91bnRDaGlsZHJlbiIsIm9sZExlbmd0aCIsImNvbW1vbkxlbmd0aCIsIm5leHRDaGlsZCIsImwyIiwiZTEiLCJlMiIsIm5leHRQb3MiLCJzMSIsInMyIiwia2V5VG9OZXdJbmRleE1hcCIsInBhdGNoZWQiLCJ0b0JlUGF0Y2hlZCIsIm1vdmVkIiwibWF4TmV3SW5kZXhTb0ZhciIsIm5ld0luZGV4VG9PbGRJbmRleE1hcCIsInByZXZDaGlsZCIsIm5ld0luZGV4IiwiaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UiLCJhcnJJIiwiZ2V0U2VxdWVuY2UiLCJuZXh0SW5kZXgiLCJtb3ZlU3RhdGljTm9kZSIsInJlbW92ZTIiLCJwZXJmb3JtTGVhdmUiLCJjYWNoZUluZGV4Iiwic2hvdWxkSW52b2tlRGlycyIsInNob3VsZEludm9rZVZub2RlSG9vayIsIm9uVm5vZGVCZWZvcmVVbm1vdW50IiwidW5tb3VudENvbXBvbmVudCIsImhhc09uY2UiLCJyZW1vdmVGcmFnbWVudCIsInBlcmZvcm1SZW1vdmUiLCJ1bnJlZ2lzdGVySE1SIiwicGVuZGluZ0JyYW5jaCIsInN1c3BlbnNlSWQiLCJwZW5kaW5nSWQiLCJ0ZWxlcG9ydEVuZCIsImlzRmx1c2hpbmciLCJjcmVhdGVBcHAiLCJjdXJyZW50TmFtZXNwYWNlIiwiZW5jb2RpbmciLCJhbGxvd2VkIiwiY2gxIiwiY2gyIiwic3ViQ29tcG9uZW50Iiwic3NyQ29udGV4dEtleSIsInVzZVNTUkNvbnRleHQiLCJ3YXRjaEVmZmVjdCIsImRvV2F0Y2giLCJ3YXRjaFBvc3RFZmZlY3QiLCJ3YXRjaFN5bmNFZmZlY3QiLCJpbW1lZGlhdGUiLCJiYXNlV2F0Y2hPcHRpb25zIiwib25XYXJuIiwicnVuc0ltbWVkaWF0ZWx5Iiwic3NyQ2xlYW51cCIsIl9fd2F0Y2hlckhhbmRsZXMiLCJ3YXRjaFN0b3BIYW5kbGUiLCJpc1ByZSIsImlzRmlyc3RSdW4iLCJhdWdtZW50Sm9iIiwid2F0Y2hIYW5kbGUiLCJ3YXJuSW52YWxpZFNvdXJjZSIsInJlYWN0aXZlR2V0dGVyIiwic291cmNlMiIsImJvdW5kQ2xlYW51cCIsImZvcmNlVHJpZ2dlciIsImlzTXVsdGlTb3VyY2UiLCJjdXJyZW50RWZmZWN0IiwiYmFzZUdldHRlciIsIl9jYiIsImZpbGwiLCJpbW1lZGlhdGVGaXJzdFJ1biIsImN1cnJlbnRXYXRjaGVyIiwiY2xlYW51cDIiLCJ3YXRjaCQxIiwic2VnbWVudHMiLCJ1c2VNb2RlbCIsImNhbWVsaXplZE5hbWUiLCJoeXBoZW5hdGVkTmFtZSIsImdldE1vZGVsTW9kaWZpZXJzIiwibG9jYWxWYWx1ZSIsInByZXZFbWl0dGVkVmFsdWUiLCJwcmV2U2V0VmFsdWUiLCJwcm9wVmFsdWUiLCJlbWl0dGVkVmFsdWUiLCJpMiIsIm1vZGVsTmFtZSIsIm1vZGVsTW9kaWZpZXJzIiwicmF3QXJncyIsImRldnRvb2xzQ29tcG9uZW50RW1pdCIsImxvd2VyQ2FzZUV2ZW50IiwiaGFuZGxlck5hbWUiLCJvbmNlSGFuZGxlciIsImVtaXR0ZWQiLCJub3JtYWxpemVFbWl0c09wdGlvbnMiLCJleHRlbmRFbWl0cyIsIm5vcm1hbGl6ZWRGcm9tRXh0ZW5kIiwiYWNjZXNzZWRBdHRycyIsIndpdGhQcm94eSIsImZhbGx0aHJvdWdoQXR0cnMiLCJwcm94eVRvVXNlIiwidGhpc1Byb3h5IiwicmVuZGVyMiIsImdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaCIsImJsb2NrU3RhY2siLCJzZXRSb290IiwiZ2V0Q2hpbGRSb290IiwiZmlsdGVyTW9kZWxMaXN0ZW5lcnMiLCJhbGxBdHRycyIsImV2ZW50QXR0cnMiLCJleHRyYUF0dHJzIiwiaXNFbGVtZW50Um9vdCIsInJhd0NoaWxkcmVuIiwiY2hpbGRSb290IiwiZHluYW1pY0luZGV4IiwidXBkYXRlZFJvb3QiLCJyZWN1cnNlIiwic2luZ2xlUm9vdCIsIm5leHRLZXlzIiwiYWN0aXZlQnJhbmNoIiwiX19pc1N1c3BlbnNlIiwiU3VzcGVuc2UiLCJoaWRkZW5Db250YWluZXIiLCJjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5IiwidHJpZ2dlckV2ZW50Iiwic2V0QWN0aXZlQnJhbmNoIiwibW91bnRTdXNwZW5zZSIsImlzSW5GYWxsYmFjayIsIm5ld0JyYW5jaCIsIm5ld0ZhbGxiYWNrIiwiaXNIeWRyYXRpbmciLCJwYXRjaFN1c3BlbnNlIiwiaXNTbG90Q2hpbGRyZW4iLCJub3JtYWxpemVTdXNwZW5zZVNsb3QiLCJldmVudExpc3RlbmVyIiwicGFyZW50U3VzcGVuc2VJZCIsImlzU3VzcGVuc2libGUiLCJpc1ZOb2RlU3VzcGVuc2libGUiLCJpbml0aWFsQW5jaG9yIiwic3luYyIsInBhcmVudENvbXBvbmVudDIiLCJkZWxheUVudGVyIiwiaGFzVW5yZXNvbHZlZEFuY2VzdG9yIiwiZmFsbGJhY2tWTm9kZSIsIm5hbWVzcGFjZTIiLCJtb3VudEZhbGxiYWNrIiwib3B0aW1pemVkMiIsImlzSW5QZW5kaW5nU3VzcGVuc2UiLCJoeWRyYXRlZEVsIiwiYXN5bmNTZXR1cFJlc3VsdCIsImhhbmRsZVNldHVwUmVzdWx0IiwicGFyZW50U3VzcGVuc2UyIiwiYmxvY2siLCJ0cmFja0Jsb2NrIiwiaXNCbG9ja1RyZWVFbmFibGVkIiwiY3VycmVudEJsb2NrIiwiY2xvc2VCbG9jayIsInNpbmdsZUNoaWxkIiwiYnJhbmNoIiwiZGlzYWJsZVRyYWNraW5nIiwidm5vZGVBcmdzVHJhbnNmb3JtZXIiLCJpblZPbmNlIiwic2V0dXBCbG9jayIsImNyZWF0ZUVsZW1lbnRCbG9jayIsImNyZWF0ZUJhc2VWTm9kZSIsIl9fdl9pc1ZOb2RlIiwidHJhbnNmb3JtVk5vZGVBcmdzIiwidHJhbnNmb3JtZXIiLCJub3JtYWxpemVLZXkiLCJub3JtYWxpemVSZWYiLCJyZWZfa2V5IiwicmVmX2ZvciIsImlzQmxvY2tOb2RlIiwibmVlZEZ1bGxDaGlsZHJlbk5vcm1hbGl6YXRpb24iLCJfX3Zfc2tpcCIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwiY2xvbmVkIiwiZ3VhcmRSZWFjdGl2ZVByb3BzIiwiZXh0cmFQcm9wcyIsIm1lcmdlUmVmIiwiY2xvbmVUcmFuc2l0aW9uIiwibWVyZ2VkUHJvcHMiLCJtZXJnZVByb3BzIiwiZGVlcENsb25lVk5vZGUiLCJ0ZXh0IiwiZmxhZyIsImNyZWF0ZVN0YXRpY1ZOb2RlIiwibnVtYmVyT2ZOb2RlcyIsImNyZWF0ZUNvbW1lbnRWTm9kZSIsImFzQmxvY2siLCJtZW1vIiwic2xvdEZsYWciLCJ0b01lcmdlIiwiaW5jb21pbmciLCJlbXB0eUFwcENvbnRleHQiLCJleHBvc2VQcm94eSIsImJjIiwic3AiLCJjcmVhdGVEZXZSZW5kZXJDb250ZXh0IiwiaW50ZXJuYWxTZXRDdXJyZW50SW5zdGFuY2UiLCJzZXRJblNTUlNldHVwU3RhdGUiLCJyZWdpc3Rlckdsb2JhbFNldHRlciIsInNldHRlcnMiLCJpc0J1aWx0SW5UYWciLCJjb21waWxlJDEiLCJpbnN0YWxsV2l0aFByb3h5IiwiaXNTdGF0ZWZ1bCIsImluaXRQcm9wcyIsInNldHVwUmVzdWx0IiwibmFtZXMiLCJpc1J1bnRpbWVPbmx5IiwiZXhwb3NlUHJvcHNPblJlbmRlckNvbnRleHQiLCJpc0FzeW5jU2V0dXAiLCJyZXNvbHZlZFJlc3VsdCIsImZpbmlzaENvbXBvbmVudFNldHVwIiwic2V0dXBTdGF0ZWZ1bENvbXBvbmVudCIsIl9fc3NySW5saW5lUmVuZGVyIiwic3NyUmVuZGVyIiwiZGV2dG9vbHNSYXdTZXR1cFN0YXRlIiwiZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dCIsInJlZ2lzdGVyUnVudGltZUNvbXBpbGVyIiwiX2NvbXBpbGUiLCJfcmMiLCJza2lwT3B0aW9ucyIsInRlbXBsYXRlIiwiZGVsaW1pdGVycyIsImNvbXBvbmVudENvbXBpbGVyT3B0aW9ucyIsImZpbmFsQ29tcGlsZXJPcHRpb25zIiwiYXR0cnNQcm94eUhhbmRsZXJzIiwiZXhwb3NlZFR5cGUiLCJhdHRyc1Byb3h5Iiwic2xvdHNQcm94eSIsImdldFNsb3RzUHJveHkiLCJjbGFzc2lmeVJFIiwiY2xhc3NpZnkiLCJpbmNsdWRlSW5mZXJyZWQiLCJkaXNwbGF5TmFtZSIsIl9fbmFtZSIsIl9fZmlsZSIsImluZmVyRnJvbVJlZ2lzdHJ5IiwiZ2V0dGVyT3JPcHRpb25zIiwiZGVidWdPcHRpb25zIiwiY1JlZiIsImNvbXB1dGVkJDEiLCJ3YXJuUmVjdXJzaXZlQ29tcHV0ZWQiLCJfd2FyblJlY3Vyc2l2ZSIsInByb3BzT3JDaGlsZHJlbiIsImluaXRDdXN0b21Gb3JtYXR0ZXIiLCJ2dWVTdHlsZSIsIm51bWJlclN0eWxlIiwic3RyaW5nU3R5bGUiLCJrZXl3b3JkU3R5bGUiLCJmb3JtYXR0ZXIiLCJfX3Z1ZV9jdXN0b21fZm9ybWF0dGVyIiwiX19pc1Z1ZSIsImdlblJlZkZsYWciLCJmb3JtYXRWYWx1ZSIsImhhc0JvZHkiLCJmb3JtYXRJbnN0YW5jZSIsImJsb2NrcyIsImNyZWF0ZUluc3RhbmNlQmxvY2siLCJleHRyYWN0S2V5cyIsImFzUmF3IiwiQ29tcCIsImV4dHJhY3RlZCIsImlzS2V5T2ZUeXBlIiwiZGV2dG9vbHNGb3JtYXR0ZXJzIiwid2l0aE1lbW8iLCJpc01lbW9TYW1lIiwid2FybiIsIkVycm9yVHlwZVN0cmluZ3MiLCJkZXZ0b29scyIsInNldERldnRvb2xzSG9vayIsInNzclV0aWxzIiwicmVzb2x2ZUZpbHRlciIsImNvbXBhdFV0aWxzIiwiRGVwcmVjYXRpb25UeXBlcyIsInBvbGljeSIsInR0IiwidHJ1c3RlZFR5cGVzIiwiY3JlYXRlUG9saWN5IiwiY3JlYXRlSFRNTCIsInVuc2FmZVRvVHJ1c3RlZEhUTUwiLCJkb2MiLCJ0ZW1wbGF0ZUNvbnRhaW5lciIsIm5vZGVPcHMiLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVDaGlsZCIsInRhZyIsImNyZWF0ZUVsZW1lbnROUyIsIm11bHRpcGxlIiwiY3JlYXRlVGV4dE5vZGUiLCJub2RlVmFsdWUiLCJzZWxlY3RvciIsImJlZm9yZSIsImNsb25lTm9kZSIsIndyYXBwZXIiLCJhcHBlbmRDaGlsZCIsIlRSQU5TSVRJT04kMSIsIkFOSU1BVElPTiIsInZ0Y0tleSIsIkRPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJjc3MiLCJkdXJhdGlvbiIsImVudGVyRnJvbUNsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImVudGVyVG9DbGFzcyIsImFwcGVhckZyb21DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImxlYXZlRnJvbUNsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsIlRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJUcmFuc2l0aW9uIiwiZGVjb3JhdGUkMSIsInJlc29sdmVUcmFuc2l0aW9uUHJvcHMiLCJoMiIsImhhc0V4cGxpY2l0Q2FsbGJhY2siLCJiYXNlUHJvcHMiLCJkdXJhdGlvbnMiLCJOdW1iZXJPZiIsIm5vcm1hbGl6ZUR1cmF0aW9uIiwiZW50ZXJEdXJhdGlvbiIsImxlYXZlRHVyYXRpb24iLCJmaW5pc2hFbnRlciIsImlzQXBwZWFyIiwiaXNDYW5jZWxsZWQiLCJfZW50ZXJDYW5jZWxsZWQiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJmaW5pc2hMZWF2ZSIsIl9pc0xlYXZpbmciLCJtYWtlRW50ZXJIb29rIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZm9yY2VSZWZsb3ciLCJjbHMiLCJjbGFzc0xpc3QiLCJfdnRjIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZW5kSWQiLCJleHBsaWNpdFRpbWVvdXQiLCJfZW5kSWQiLCJyZXNvbHZlSWZOb3RTdGFsZSIsInByb3BDb3VudCIsImdldFRyYW5zaXRpb25JbmZvIiwiZW5kRXZlbnQiLCJlbmRlZCIsIm9uRW5kIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFN0eWxlUHJvcGVydGllcyIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsInRvTXMiLCJvZmZzZXRIZWlnaHQiLCJ2U2hvd09yaWdpbmFsRGlzcGxheSIsInZTaG93SGlkZGVuIiwidlNob3ciLCJkaXNwbGF5Iiwic2V0RGlzcGxheSIsIkNTU19WQVJfVEVYVCIsInVzZUNzc1ZhcnMiLCJ1cGRhdGVUZWxlcG9ydHMiLCJ2YXJzIiwicXVlcnlTZWxlY3RvckFsbCIsInNldFZhcnNPbk5vZGUiLCJzZXRWYXJzIiwic2V0VmFyc09uVk5vZGUiLCJNdXRhdGlvbk9ic2VydmVyIiwiY2hpbGRMaXN0Iiwic2V0UHJvcGVydHkiLCJkaXNwbGF5UkUiLCJzZW1pY29sb25SRSIsImltcG9ydGFudFJFIiwic2V0U3R5bGUiLCJwcmVmaXhlZCIsInJhd05hbWUiLCJwcmVmaXhDYWNoZSIsInByZWZpeGVzIiwiYXV0b1ByZWZpeCIsInhsaW5rTlMiLCJwYXRjaEF0dHIiLCJpc1NWRyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwYXRjaERPTVByb3AiLCJhdHRyTmFtZSIsIm5lZWRSZW1vdmUiLCJ2ZWlLZXkiLCJwYXRjaEV2ZW50IiwicHJldlZhbHVlIiwibmV4dFZhbHVlIiwiaW52b2tlcnMiLCJleGlzdGluZ0ludm9rZXIiLCJzYW5pdGl6ZUV2ZW50VmFsdWUiLCJvcHRpb25zTW9kaWZpZXJSRSIsInBhcnNlTmFtZSIsImludm9rZXIiLCJpbml0aWFsVmFsdWUiLCJfdnRzIiwiYXR0YWNoZWQiLCJvcmlnaW5hbFN0b3AiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfc3RvcHBlZCIsInBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiZ2V0Tm93IiwiY3JlYXRlSW52b2tlciIsImNhY2hlZE5vdyIsInByb3BOYW1lIiwiaXNOYXRpdmVPbiIsIlJFTU9WQUwiLCJkZWZpbmVDdXN0b21FbGVtZW50IiwiX2NyZWF0ZUFwcCIsIlZ1ZUN1c3RvbUVsZW1lbnQiLCJWdWVFbGVtZW50IiwiaW5pdGlhbFByb3BzIiwiZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCIsImNyZWF0ZVNTUkFwcCIsIkJhc2VDbGFzcyIsIl9kZWYiLCJfaXNWdWVDRSIsIl9hcHAiLCJfbm9uY2UiLCJub25jZSIsIl9jb25uZWN0ZWQiLCJfcmVzb2x2ZWQiLCJfbnVtYmVyUHJvcHMiLCJfc3R5bGVDaGlsZHJlbiIsIl9vYiIsInNoYWRvd1Jvb3QiLCJfcm9vdCIsImF0dGFjaFNoYWRvdyIsIl9yZXNvbHZlUHJvcHMiLCJjb25uZWN0ZWRDYWxsYmFjayIsImlzQ29ubmVjdGVkIiwiX3BhcnNlU2xvdHMiLCJfcGFyZW50IiwiX3NldFBhcmVudCIsIl91cGRhdGUiLCJfcGVuZGluZ1Jlc29sdmUiLCJfcmVzb2x2ZURlZiIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiYXR0cmlidXRlcyIsIl9zZXRBdHRyIiwibXV0YXRpb25zIiwiYXR0cmlidXRlTmFtZSIsImlzQXN5bmMiLCJudW1iZXJQcm9wcyIsIl9hcHBseVN0eWxlcyIsIl9tb3VudCIsImFzeW5jRGVmIiwiY29uZmlndXJlQXBwIiwiZGVjbGFyZWRQcm9wS2V5cyIsIl9nZXRQcm9wIiwic2hvdWxkUmVmbGVjdCIsInNob3VsZFVwZGF0ZSIsIl9yZW5kZXJTbG90cyIsIm5ld1N0eWxlcyIsIl9zdHlsZXMiLCJkaXNwYXRjaCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiX2NoaWxkU3R5bGVzIiwiX3Nsb3RzIiwic2xvdE5hbWUiLCJvdXRsZXRzIiwid2Fsa2VyIiwiY3JlYXRlVHJlZVdhbGtlciIsIm9sZFN0eWxlcyIsInVzZUhvc3QiLCJjYWxsZXIiLCJ1c2VTaGFkb3dSb290IiwidXNlQ3NzTW9kdWxlIiwibW9kdWxlcyIsIm1vZCIsInBvc2l0aW9uTWFwIiwibmV3UG9zaXRpb25NYXAiLCJtb3ZlQ2JLZXkiLCJlbnRlckNiS2V5IiwiVHJhbnNpdGlvbkdyb3VwIiwiZGVjb3JhdGUiLCJtb3ZlQ2xhc3MiLCJoYXNDU1NUcmFuc2Zvcm0iLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwibW92ZWRDaGlsZHJlbiIsImFwcGx5VHJhbnNsYXRpb24iLCJ0cmFuc2Zvcm0iLCJ3ZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJwcm9wZXJ0eU5hbWUiLCJjc3NUcmFuc2l0aW9uUHJvcHMiLCJvbGRQb3MiLCJuZXdQb3MiLCJkeCIsImR5IiwiZ2V0TW9kZWxBc3NpZ25lciIsIm9uQ29tcG9zaXRpb25TdGFydCIsImNvbXBvc2luZyIsIm9uQ29tcG9zaXRpb25FbmQiLCJFdmVudCIsImFzc2lnbktleSIsInZNb2RlbFRleHQiLCJsYXp5IiwiY2FzdFRvTnVtYmVyIiwiZG9tVmFsdWUiLCJhY3RpdmVFbGVtZW50Iiwidk1vZGVsQ2hlY2tib3giLCJtb2RlbFZhbHVlIiwiX21vZGVsVmFsdWUiLCJlbGVtZW50VmFsdWUiLCJnZXRWYWx1ZSIsImNoZWNrZWQiLCJmb3VuZCIsImZpbHRlcmVkIiwiZ2V0Q2hlY2tib3hWYWx1ZSIsInNldENoZWNrZWQiLCJ2TW9kZWxSYWRpbyIsInZNb2RlbFNlbGVjdCIsImlzU2V0TW9kZWwiLCJzZWxlY3RlZFZhbCIsInNlbGVjdGVkIiwiX2Fzc2lnbmluZyIsInNldFNlbGVjdGVkIiwiX2JpbmRpbmciLCJpc011bHRpcGxlIiwiaXNBcnJheVZhbHVlIiwib3B0aW9uVmFsdWUiLCJvcHRpb25UeXBlIiwic2VsZWN0ZWRJbmRleCIsInZNb2RlbER5bmFtaWMiLCJjYWxsTW9kZWxIb29rIiwicmVzb2x2ZUR5bmFtaWNNb2RlbCIsInN5c3RlbU1vZGlmaWVycyIsIm1vZGlmaWVyR3VhcmRzIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudCIsInByZXZlbnREZWZhdWx0IiwiY3VycmVudFRhcmdldCIsImN0cmwiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhIiwibWV0YUtleSIsImJ1dHRvbiIsImV4YWN0Iiwid2l0aE1vZGlmaWVycyIsIl93aXRoTW9kcyIsImNhY2hlS2V5IiwiZ3VhcmQiLCJrZXlOYW1lcyIsImVzYyIsInNwYWNlIiwidXAiLCJkb3duIiwid2l0aEtleXMiLCJfd2l0aEtleXMiLCJldmVudEtleSIsInJlbmRlcmVyT3B0aW9ucyIsInRyYW5zaXRpb25DbGFzc2VzIiwicGF0Y2hDbGFzcyIsImlzQ3NzU3RyaW5nIiwiaGFzQ29udHJvbGxlZERpc3BsYXkiLCJwcmV2U3R5bGUiLCJjc3NWYXJUZXh0IiwicGF0Y2hTdHlsZSIsInNob3VsZFNldEFzUHJvcCIsIl90cnVlVmFsdWUiLCJfZmFsc2VWYWx1ZSIsImVuYWJsZWRIeWRyYXRpb24iLCJlbnN1cmVSZW5kZXJlciIsImVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyIiwiaW5qZWN0TmF0aXZlVGFnQ2hlY2siLCJpbmplY3RDb21waWxlck9wdGlvbnNDaGVjayIsImNvbnRhaW5lck9yU2VsZWN0b3IiLCJub3JtYWxpemVDb250YWluZXIiLCJyZXNvbHZlUm9vdE5hbWVzcGFjZSIsIlNoYWRvd1Jvb3QiLCJzc3JEaXJlY3RpdmVJbml0aWFsaXplZCIsImluaXREaXJlY3RpdmVzRm9yU1NSIiwiZ2V0U1NSUHJvcHMiLCJtb2RlbFRvVXNlIiwicnVudGltZURvbSIsImNyZWF0ZUVsZW1lbnRWTm9kZSIsIkZSQUdNRU5UIiwiVEVMRVBPUlQiLCJTVVNQRU5TRSIsIktFRVBfQUxJVkUiLCJCQVNFX1RSQU5TSVRJT04iLCJPUEVOX0JMT0NLIiwiQ1JFQVRFX0JMT0NLIiwiQ1JFQVRFX0VMRU1FTlRfQkxPQ0siLCJDUkVBVEVfVk5PREUiLCJDUkVBVEVfRUxFTUVOVF9WTk9ERSIsIkNSRUFURV9DT01NRU5UIiwiQ1JFQVRFX1RFWFQiLCJDUkVBVEVfU1RBVElDIiwiUkVTT0xWRV9DT01QT05FTlQiLCJSRVNPTFZFX0RZTkFNSUNfQ09NUE9ORU5UIiwiUkVTT0xWRV9ESVJFQ1RJVkUiLCJSRVNPTFZFX0ZJTFRFUiIsIldJVEhfRElSRUNUSVZFUyIsIlJFTkRFUl9MSVNUIiwiUkVOREVSX1NMT1QiLCJDUkVBVEVfU0xPVFMiLCJUT19ESVNQTEFZX1NUUklORyIsIk1FUkdFX1BST1BTIiwiTk9STUFMSVpFX0NMQVNTIiwiTk9STUFMSVpFX1NUWUxFIiwiTk9STUFMSVpFX1BST1BTIiwiR1VBUkRfUkVBQ1RJVkVfUFJPUFMiLCJUT19IQU5ETEVSUyIsIkNBTUVMSVpFIiwiQ0FQSVRBTElaRSIsIlRPX0hBTkRMRVJfS0VZIiwiU0VUX0JMT0NLX1RSQUNLSU5HIiwiUFVTSF9TQ09QRV9JRCIsIlBPUF9TQ09QRV9JRCIsIldJVEhfQ1RYIiwiVU5SRUYiLCJJU19SRUYiLCJXSVRIX01FTU8iLCJJU19NRU1PX1NBTUUiLCJoZWxwZXJOYW1lTWFwIiwibG9jU3R1YiIsImNvbHVtbiIsIm9mZnNldCIsImNyZWF0ZVZOb2RlQ2FsbCIsImlzQmxvY2siLCJpc0NvbXBvbmVudCIsImxvYyIsImhlbHBlciIsImdldFZOb2RlQmxvY2tIZWxwZXIiLCJpblNTUiIsImdldFZOb2RlSGVscGVyIiwiY3JlYXRlQXJyYXlFeHByZXNzaW9uIiwiZWxlbWVudHMiLCJjcmVhdGVPYmplY3RFeHByZXNzaW9uIiwicHJvcGVydGllcyIsImNyZWF0ZU9iamVjdFByb3BlcnR5IiwiY3JlYXRlU2ltcGxlRXhwcmVzc2lvbiIsImlzU3RhdGljIiwiY29uc3RUeXBlIiwiY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uIiwiY3JlYXRlQ2FsbEV4cHJlc3Npb24iLCJjYWxsZWUiLCJjcmVhdGVGdW5jdGlvbkV4cHJlc3Npb24iLCJyZXR1cm5zIiwibmV3bGluZSIsImlzU2xvdCIsImNyZWF0ZUNvbmRpdGlvbmFsRXhwcmVzc2lvbiIsImNvbnNlcXVlbnQiLCJhbHRlcm5hdGUiLCJzc3IiLCJjb252ZXJ0VG9CbG9jayIsInJlbW92ZUhlbHBlciIsImRlZmF1bHREZWxpbWl0ZXJzT3BlbiIsImRlZmF1bHREZWxpbWl0ZXJzQ2xvc2UiLCJpc1RhZ1N0YXJ0Q2hhciIsImlzV2hpdGVzcGFjZSIsImlzRW5kT2ZUYWdTZWN0aW9uIiwidG9DaGFyQ29kZXMiLCJTZXF1ZW5jZXMiLCJDZGF0YSIsIkNkYXRhRW5kIiwiQ29tbWVudEVuZCIsIlNjcmlwdEVuZCIsIlN0eWxlRW5kIiwiVGl0bGVFbmQiLCJUZXh0YXJlYUVuZCIsImRlZmF1bHRPbkVycm9yIiwiZGVmYXVsdE9uV2FybiIsImNyZWF0ZUNvbXBpbGVyRXJyb3IiLCJtZXNzYWdlcyIsImFkZGl0aW9uYWxNZXNzYWdlIiwiZXJyb3JNZXNzYWdlcyIsIlN5bnRheEVycm9yIiwiaXNTdGF0aWNFeHAiLCJpc0NvcmVDb21wb25lbnQiLCJub25JZGVudGlmaWVyUkUiLCJpc1NpbXBsZUlkZW50aWZpZXIiLCJ2YWxpZEZpcnN0SWRlbnRDaGFyUkUiLCJ2YWxpZElkZW50Q2hhclJFIiwid2hpdGVzcGFjZVJFIiwiZ2V0RXhwU291cmNlIiwiZXhwIiwiaXNNZW1iZXJFeHByZXNzaW9uIiwic3RhdGVTdGFjayIsImN1cnJlbnRPcGVuQnJhY2tldENvdW50IiwiY3VycmVudE9wZW5QYXJlbnNDb3VudCIsImN1cnJlbnRTdHJpbmdUeXBlIiwiZm5FeHBSRSIsImlzRm5FeHByZXNzaW9uIiwiYXNzZXJ0IiwiY29uZGl0aW9uIiwiZmluZERpciIsImFsbG93RW1wdHkiLCJmaW5kUHJvcCIsImR5bmFtaWNPbmx5IiwiaXNTdGF0aWNBcmdPZiIsImlzVGV4dCQxIiwiaXNWU2xvdCIsInRhZ1R5cGUiLCJpc1Nsb3RPdXRsZXQiLCJwcm9wc0hlbHBlclNldCIsImdldFVubm9ybWFsaXplZFByb3BzIiwiY2FsbFBhdGgiLCJpbmplY3RQcm9wIiwicHJvcHNXaXRoSW5qZWN0aW9uIiwicGFyZW50Q2FsbCIsImhhc1Byb3AiLCJwcm9wS2V5TmFtZSIsInRvVmFsaWRBc3NldElkIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJmb3JBbGlhc1JFIiwiZGVmYXVsdFBhcnNlck9wdGlvbnMiLCJwYXJzZU1vZGUiLCJucyIsImdldE5hbWVzcGFjZSIsImlzUHJlVGFnIiwiaXNJZ25vcmVOZXdsaW5lVGFnIiwiY29tbWVudHMiLCJwcmVmaXhJZGVudGlmaWVycyIsImN1cnJlbnRPcHRpb25zIiwiY3VycmVudFJvb3QiLCJjdXJyZW50SW5wdXQiLCJjdXJyZW50T3BlblRhZyIsImN1cnJlbnRQcm9wIiwiY3VycmVudEF0dHJWYWx1ZSIsImN1cnJlbnRBdHRyU3RhcnRJbmRleCIsImN1cnJlbnRBdHRyRW5kSW5kZXgiLCJpblByZSIsImluVlByZSIsImN1cnJlbnRWUHJlQm91bmRhcnkiLCJ0b2tlbml6ZXIiLCJjYnMiLCJzZWN0aW9uU3RhcnQiLCJlbnRpdHlTdGFydCIsImJhc2VTdGF0ZSIsImluUkNEQVRBIiwiaW5YTUwiLCJuZXdsaW5lcyIsImRlbGltaXRlck9wZW4iLCJkZWxpbWl0ZXJDbG9zZSIsImRlbGltaXRlckluZGV4IiwiY3VycmVudFNlcXVlbmNlIiwic2VxdWVuY2VJbmRleCIsImluU0ZDUm9vdCIsImdldFBvcyIsIm5ld2xpbmVJbmRleCIsInBlZWsiLCJzdGF0ZVRleHQiLCJvbnRleHQiLCJzdGF0ZUludGVycG9sYXRpb25PcGVuIiwic3RhdGVJblJDREFUQSIsInN0YXRlSW50ZXJwb2xhdGlvbiIsInN0YXRlSW50ZXJwb2xhdGlvbkNsb3NlIiwib25pbnRlcnBvbGF0aW9uIiwic3RhdGVTcGVjaWFsU3RhcnRTZXF1ZW5jZSIsImlzRW5kIiwic3RhdGVJblRhZ05hbWUiLCJlbmRPZlRleHQiLCJhY3R1YWxJbmRleCIsInN0YXRlSW5DbG9zaW5nVGFnTmFtZSIsImZhc3RGb3J3YXJkVG8iLCJzdGF0ZUNEQVRBU2VxdWVuY2UiLCJzdGF0ZUluRGVjbGFyYXRpb24iLCJjYyIsInN0YXRlSW5Db21tZW50TGlrZSIsIm9uY2RhdGEiLCJvbmNvbW1lbnQiLCJzdGFydFNwZWNpYWwiLCJzZXF1ZW5jZSIsImVudGVyUkNEQVRBIiwic3RhdGVCZWZvcmVUYWdOYW1lIiwiaGFuZGxlVGFnTmFtZSIsInN0YXRlSW5TRkNSb290VGFnTmFtZSIsIm9ub3BlbnRhZ25hbWUiLCJzdGF0ZUJlZm9yZUF0dHJOYW1lIiwic3RhdGVCZWZvcmVDbG9zaW5nVGFnTmFtZSIsIm9uZXJyIiwib25jbG9zZXRhZyIsInN0YXRlQWZ0ZXJDbG9zaW5nVGFnTmFtZSIsIm9ub3BlbnRhZ2VuZCIsImhhbmRsZUF0dHJTdGFydCIsIm9uZGlybmFtZSIsInN0YXRlSW5TZWxmQ2xvc2luZ1RhZyIsIm9uc2VsZmNsb3Npbmd0YWciLCJzdGF0ZUluQXR0ck5hbWUiLCJvbmF0dHJpYm5hbWUiLCJoYW5kbGVBdHRyTmFtZUVuZCIsInN0YXRlSW5EaXJOYW1lIiwic3RhdGVJbkRpckFyZyIsIm9uZGlyYXJnIiwic3RhdGVJbkR5bmFtaWNEaXJBcmciLCJzdGF0ZUluRGlyTW9kaWZpZXIiLCJvbmRpcm1vZGlmaWVyIiwib25hdHRyaWJuYW1lZW5kIiwic3RhdGVBZnRlckF0dHJOYW1lIiwib25hdHRyaWJlbmQiLCJzdGF0ZUJlZm9yZUF0dHJWYWx1ZSIsInN0YXRlSW5BdHRyVmFsdWVOb1F1b3RlcyIsImhhbmRsZUluQXR0clZhbHVlIiwicXVvdGUiLCJvbmF0dHJpYmRhdGEiLCJzdGF0ZUluQXR0clZhbHVlRG91YmxlUXVvdGVzIiwic3RhdGVJbkF0dHJWYWx1ZVNpbmdsZVF1b3RlcyIsInN0YXRlQmVmb3JlRGVjbGFyYXRpb24iLCJzdGF0ZUluUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwib25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24iLCJzdGF0ZUJlZm9yZUNvbW1lbnQiLCJzdGF0ZUluU3BlY2lhbENvbW1lbnQiLCJzdGF0ZUJlZm9yZVNwZWNpYWxTIiwic3RhdGVCZWZvcmVTcGVjaWFsVCIsInN0YXJ0RW50aXR5Iiwic3RhdGVJbkVudGl0eSIsImlucHV0IiwiZmluaXNoIiwiaGFuZGxlVHJhaWxpbmdEYXRhIiwib25lbmQiLCJlbmRJbmRleCIsImVtaXRDb2RlUG9pbnQiLCJjcCIsImNvbnN1bWVkIiwiZW1pdEVycm9yIiwib25UZXh0IiwiZ2V0U2xpY2UiLCJvbnRleHRlbnRpdHkiLCJpbm5lclN0YXJ0IiwiaW5uZXJFbmQiLCJkZWNvZGVFbnRpdGllcyIsImFkZE5vZGUiLCJjcmVhdGVFeHAiLCJnZXRMb2MiLCJjb2RlZ2VuTm9kZSIsImVuZE9wZW5UYWciLCJvbkNsb3NlVGFnIiwiYmFja1RyYWNrIiwiaXNTZWxmQ2xvc2luZyIsIm5hbWVMb2MiLCJkaXJUb0F0dHIiLCJzZXRMb2NFbmQiLCJvbmF0dHJpYmVudGl0eSIsImNvbmRlbnNlIiwiZXhwUGFyc2VNb2RlIiwiZm9yUGFyc2VSZXN1bHQiLCJpbk1hdGNoIiwiTEhTIiwiUkhTIiwiY3JlYXRlQWxpYXNFeHByZXNzaW9uIiwiYXNQYXJhbSIsImZpbmFsaXplZCIsInZhbHVlQ29udGVudCIsInN0cmlwUGFyZW5zUkUiLCJ0cmltbWVkT2Zmc2V0IiwiaXRlcmF0b3JNYXRjaCIsImZvckl0ZXJhdG9yUkUiLCJrZXlDb250ZW50Iiwia2V5T2Zmc2V0IiwiaW5kZXhDb250ZW50IiwicGFyc2VGb3JFeHByZXNzaW9uIiwiaW5uZXJMb2MiLCJsYXN0Tm9kZSIsImlzSW1wbGllZCIsImxvb2tBaGVhZCIsInNwZWNpYWxUZW1wbGF0ZURpciIsImlzRnJhZ21lbnRUZW1wbGF0ZSIsImlzQnVpbHRJbkNvbXBvbmVudCIsImNvbmRlbnNlV2hpdGVzcGFjZSIsIndpbmRvd3NOZXdsaW5lUkUiLCJub2RlcyIsInNob3VsZENvbmRlbnNlIiwid2hpdGVzcGFjZSIsInJlbW92ZWRXaGl0ZXNwYWNlIiwiaXNBbGxXaGl0ZXNwYWNlIiwiaGFzTmV3bGluZUNoYXIiLCJwcmV2Q2hhcklzV2hpdGVzcGFjZSIsImNsb25lTG9jIiwiYXR0ciIsImJhc2VQYXJzZSIsImhvaXN0cyIsImltcG9ydHMiLCJ0ZW1wcyIsImNyZWF0ZVJvb3QiLCJjYWNoZVN0YXRpYyIsIndhbGsiLCJpc1NpbmdsZUVsZW1lbnRSb290IiwiZG9Ob3RIb2lzdE5vZGUiLCJpbkZvciIsInRvQ2FjaGUiLCJjb25zdGFudFR5cGUiLCJnZXRDb25zdGFudFR5cGUiLCJnZXRHZW5lcmF0ZWRQcm9wc0NvbnN0YW50VHlwZSIsImdldE5vZGVQcm9wcyIsImhvaXN0IiwidlNsb3QiLCJicmFuY2hlcyIsImNhY2hlZEFzQXJyYXkiLCJnZXRDYWNoZUV4cHJlc3Npb24iLCJnZXRTbG90Tm9kZSIsImhtciIsIm5lZWRBcnJheVNwcmVhZCIsIm5vZGUyIiwidHJhbnNmb3JtSG9pc3QiLCJjb25zdGFudENhY2hlIiwicmV0dXJuVHlwZTIiLCJnZW5lcmF0ZWRQcm9wc1R5cGUiLCJjaGlsZFR5cGUiLCJleHBUeXBlIiwicmV0dXJuVHlwZSIsImFsbG93SG9pc3RlZEhlbHBlclNldCIsImdldENvbnN0YW50VHlwZU9mSGVscGVyQ2FsbCIsImtleVR5cGUiLCJ2YWx1ZVR5cGUiLCJjcmVhdGVUcmFuc2Zvcm1Db250ZXh0IiwiZmlsZW5hbWUiLCJob2lzdFN0YXRpYyIsImNhY2hlSGFuZGxlcnMiLCJub2RlVHJhbnNmb3JtcyIsImRpcmVjdGl2ZVRyYW5zZm9ybXMiLCJleHByZXNzaW9uUGx1Z2lucyIsInNsb3R0ZWQiLCJzc3JDc3NWYXJzIiwiYmluZGluZ01ldGFkYXRhIiwiaW5saW5lIiwiaXNUUyIsImNvbXBhdENvbmZpZyIsIm5hbWVNYXRjaCIsImlkZW50aWZpZXJzIiwidkZvciIsInZQcmUiLCJ2T25jZSIsImdyYW5kUGFyZW50IiwiY3VycmVudE5vZGUiLCJjaGlsZEluZGV4IiwiY3VycmVudENvdW50IiwiaGVscGVyU3RyaW5nIiwicmVtb3ZlTm9kZSIsInJlbW92YWxJbmRleCIsIm9uTm9kZVJlbW92ZWQiLCJhZGRJZGVudGlmaWVycyIsInJlbW92ZUlkZW50aWZpZXJzIiwiaWRlbnRpZmllciIsImhvaXN0ZWQiLCJjYWNoZUV4cCIsIm5lZWRQYXVzZVRyYWNraW5nIiwiY3JlYXRlQ2FjaGVFeHByZXNzaW9uIiwidHJhdmVyc2VOb2RlIiwiY3JlYXRlUm9vdENvZGVnZW4iLCJ0cmFuc2Zvcm1lZCIsImV4aXRGbnMiLCJvbkV4aXQiLCJub2RlUmVtb3ZlZCIsInRyYXZlcnNlQ2hpbGRyZW4iLCJjcmVhdGVTdHJ1Y3R1cmFsRGlyZWN0aXZlVHJhbnNmb3JtIiwiUFVSRV9BTk5PVEFUSU9OIiwiYWxpYXNIZWxwZXIiLCJnZW5lcmF0ZSIsImFzdCIsInNvdXJjZU1hcCIsIm9wdGltaXplSW1wb3J0cyIsInJ1bnRpbWVHbG9iYWxOYW1lIiwicnVudGltZU1vZHVsZU5hbWUiLCJzc3JSdW50aW1lTW9kdWxlTmFtZSIsImluZGVudExldmVsIiwicHVyZSIsImluZGVudCIsImRlaW5kZW50Iiwid2l0aG91dE5ld0xpbmUiLCJyZXBlYXQiLCJjcmVhdGVDb2RlZ2VuQ29udGV4dCIsIm9uQ29udGV4dENyZWF0ZWQiLCJoYXNIZWxwZXJzIiwidXNlV2l0aEJsb2NrIiwiVnVlQmluZGluZyIsImdlbk5vZGUiLCJnZW5Ib2lzdHMiLCJnZW5GdW5jdGlvblByZWFtYmxlIiwiZ2VuQXNzZXRzIiwicHJlYW1ibGUiLCJhc3NldHMiLCJyZXNvbHZlciIsImdlbk5vZGVMaXN0QXNBcnJheSIsIm11bHRpbGluZXMiLCJnZW5Ob2RlTGlzdCIsImNvbW1hIiwiZ2VuVGV4dCIsImdlbkV4cHJlc3Npb24iLCJnZW5JbnRlcnBvbGF0aW9uIiwiZ2VuQ29tcG91bmRFeHByZXNzaW9uIiwiZ2VuQ29tbWVudCIsInBhdGNoRmxhZ1N0cmluZyIsImZsYWdOYW1lcyIsImNhbGxIZWxwZXIiLCJnZW5OdWxsYWJsZUFyZ3MiLCJnZW5WTm9kZUNhbGwiLCJnZW5DYWxsRXhwcmVzc2lvbiIsImdlbkV4cHJlc3Npb25Bc1Byb3BlcnR5S2V5IiwiZ2VuT2JqZWN0RXhwcmVzc2lvbiIsImdlbkFycmF5RXhwcmVzc2lvbiIsImdlbkZ1bmN0aW9uRXhwcmVzc2lvbiIsIm5lZWROZXdsaW5lIiwibmVlZHNQYXJlbnMiLCJpc05lc3RlZCIsImdlbkNvbmRpdGlvbmFsRXhwcmVzc2lvbiIsImdlbkNhY2hlRXhwcmVzc2lvbiIsInByb2hpYml0ZWRLZXl3b3JkUkUiLCJzdHJpcFN0cmluZ1JFIiwidmFsaWRhdGVCcm93c2VyRXhwcmVzc2lvbiIsImFzUGFyYW1zIiwiYXNSYXdTdGF0ZW1lbnRzIiwia2V5d29yZE1hdGNoIiwidHJhbnNmb3JtRXhwcmVzc2lvbiIsInByb2Nlc3NFeHByZXNzaW9uIiwibG9jYWxWYXJzIiwidHJhbnNmb3JtSWYiLCJwcm9jZXNzQ29kZWdlbiIsImNyZWF0ZUlmQnJhbmNoIiwiaWZOb2RlIiwic2libGluZ3MiLCJzaWJsaW5nIiwidXNlcktleSIsImlzU2FtZUtleSIsInByb2Nlc3NJZiIsImNyZWF0ZUNvZGVnZW5Ob2RlRm9yQnJhbmNoIiwicGFyZW50Q29uZGl0aW9uIiwiZ2V0UGFyZW50Q29uZGl0aW9uIiwiaXNUZW1wbGF0ZUlmIiwia2V5SW5kZXgiLCJjcmVhdGVDaGlsZHJlbkNvZGVnZW5Ob2RlIiwia2V5UHJvcGVydHkiLCJ2bm9kZUNhbGwiLCJicmFuY2hFeHAiLCJ0cmFuc2Zvcm1CaW5kIiwiX25vZGUiLCJ0cmFuc2Zvcm1CaW5kU2hvcnRoYW5kIiwiaW5qZWN0UHJlZml4IiwicHJlZml4IiwidHJhbnNmb3JtRm9yIiwicGFyc2VSZXN1bHQiLCJmaW5hbGl6ZUZvclBhcnNlUmVzdWx0IiwiZm9yTm9kZSIsInZhbHVlQWxpYXMiLCJrZXlBbGlhcyIsIm9iamVjdEluZGV4QWxpYXMiLCJwcm9jZXNzRm9yIiwicmVuZGVyRXhwIiwiaXNUZW1wbGF0ZSIsImtleVByb3AiLCJrZXlFeHAiLCJpc1N0YWJsZUZyYWdtZW50IiwiZnJhZ21lbnRGbGFnIiwiY2hpbGRCbG9jayIsIm5lZWRGcmFnbWVudFdyYXBwZXIiLCJzbG90T3V0bGV0IiwibG9vcCIsImNyZWF0ZUZvckxvb3BQYXJhbXMiLCJtZW1vQXJncyIsImNyZWF0ZVBhcmFtc0xpc3QiLCJkZWZhdWx0RmFsbGJhY2siLCJ0cmFja1Nsb3RTY29wZXMiLCJidWlsZENsaWVudFNsb3RGbiIsIl92Rm9yRXhwIiwiYnVpbGRTbG90cyIsImJ1aWxkU2xvdEZuIiwic2xvdHNQcm9wZXJ0aWVzIiwiaGFzRHluYW1pY1Nsb3RzIiwib25Db21wb25lbnRTbG90IiwiaGFzVGVtcGxhdGVTbG90cyIsImhhc05hbWVkRGVmYXVsdFNsb3QiLCJpbXBsaWNpdERlZmF1bHRDaGlsZHJlbiIsInNlZW5TbG90TmFtZXMiLCJjb25kaXRpb25hbEJyYW5jaEluZGV4Iiwic2xvdEVsZW1lbnQiLCJzbG90RGlyIiwic2xvdENoaWxkcmVuIiwic2xvdExvYyIsInNsb3RQcm9wcyIsImRpckxvYyIsInN0YXRpY1Nsb3ROYW1lIiwic2xvdEZ1bmN0aW9uIiwidklmIiwidkVsc2UiLCJidWlsZER5bmFtaWNTbG90IiwiY29uZGl0aW9uYWwiLCJidWlsZERlZmF1bHRTbG90UHJvcGVydHkiLCJjaGlsZHJlbjIiLCJpc05vbldoaXRlc3BhY2VDb250ZW50IiwiaGFzRm9yd2FyZGVkU2xvdHMiLCJkaXJlY3RpdmVJbXBvcnRNYXAiLCJ0cmFuc2Zvcm1FbGVtZW50Iiwidm5vZGVUYWciLCJpc0V4cGxpY2l0RHluYW1pYyIsImlzQ29tcG9uZW50VGFnIiwiaXNQcm9wIiwiYnVpbHRJbiIsInJlc29sdmVDb21wb25lbnRUeXBlIiwiaXNEeW5hbWljQ29tcG9uZW50Iiwidm5vZGVQcm9wcyIsInZub2RlQ2hpbGRyZW4iLCJ2bm9kZUR5bmFtaWNQcm9wcyIsImR5bmFtaWNQcm9wTmFtZXMiLCJ2bm9kZURpcmVjdGl2ZXMiLCJzaG91bGRVc2VCbG9jayIsInByb3BzQnVpbGRSZXN1bHQiLCJidWlsZFByb3BzIiwiZGlyQXJncyIsInJ1bnRpbWUiLCJ0cnVlRXhwcmVzc2lvbiIsIm1vZGlmaWVyIiwiYnVpbGREaXJlY3RpdmVBcmdzIiwiaGFzRHluYW1pY1RleHRDaGlsZCIsInByb3BzTmFtZXNTdHJpbmciLCJzdHJpbmdpZnlEeW5hbWljUHJvcE5hbWVzIiwiZWxlbWVudExvYyIsIm1lcmdlQXJncyIsInJ1bnRpbWVEaXJlY3RpdmVzIiwiaGFzQ2hpbGRyZW4iLCJoYXNSZWYiLCJoYXNDbGFzc0JpbmRpbmciLCJoYXNTdHlsZUJpbmRpbmciLCJoYXNIeWRyYXRpb25FdmVudEJpbmRpbmciLCJoYXNEeW5hbWljS2V5cyIsImhhc1Zub2RlSG9vayIsInB1c2hNZXJnZUFyZyIsImRlZHVwZVByb3BlcnRpZXMiLCJwdXNoUmVmVkZvck1hcmtlciIsImFuYWx5emVQYXRjaEZsYWciLCJpc0V2ZW50SGFuZGxlciIsImlzVkJpbmQiLCJpc1ZPbiIsImRpcmVjdGl2ZVRyYW5zZm9ybSIsInByb3BzMiIsIm5lZWRSdW50aW1lIiwicHJvcHNFeHByZXNzaW9uIiwiY2xhc3NLZXlJbmRleCIsInN0eWxlS2V5SW5kZXgiLCJoYXNEeW5hbWljS2V5IiwiaXNIYW5kbGVyS2V5IiwiY2xhc3NQcm9wIiwic3R5bGVQcm9wIiwia25vd25Qcm9wcyIsIm1lcmdlQXNBcnJheSIsInRyYW5zZm9ybVNsb3RPdXRsZXQiLCJub25OYW1lUHJvcHMiLCJwcm9jZXNzU2xvdE91dGxldCIsInNsb3RBcmdzIiwiZXhwZWN0ZWRMZW4iLCJ0cmFuc2Zvcm1PbiQxIiwiYXVnbWVudG9yIiwiZXZlbnROYW1lIiwic2hvdWxkQ2FjaGUiLCJpc01lbWJlckV4cCIsImlzSW5saW5lU3RhdGVtZW50IiwiaGFzTXVsdGlwbGVTdGF0ZW1lbnRzIiwidHJhbnNmb3JtVGV4dCIsImhhc1RleHQiLCJjYWxsQXJncyIsInNlZW4kMSIsInRyYW5zZm9ybU9uY2UiLCJ0cmFuc2Zvcm1Nb2RlbCQxIiwiY3JlYXRlVHJhbnNmb3JtUHJvcHMiLCJyYXdFeHAiLCJleHBTdHJpbmciLCJiaW5kaW5nVHlwZSIsImFzc2lnbm1lbnRFeHAiLCJtb2RpZmllcnNLZXkiLCJ0cmFuc2Zvcm1NZW1vIiwiYmFzZUNvbXBpbGUiLCJpc01vZHVsZU1vZGUiLCJyZXNvbHZlZE9wdGlvbnMiLCJtb2RlbCIsIlZfTU9ERUxfUkFESU8iLCJWX01PREVMX0NIRUNLQk9YIiwiVl9NT0RFTF9URVhUIiwiVl9NT0RFTF9TRUxFQ1QiLCJWX01PREVMX0RZTkFNSUMiLCJWX09OX1dJVEhfTU9ESUZJRVJTIiwiVl9PTl9XSVRIX0tFWVMiLCJWX1NIT1ciLCJUUkFOU0lUSU9OIiwiVFJBTlNJVElPTl9HUk9VUCIsImRlY29kZXIiLCJwYXJzZXJPcHRpb25zIiwiYXNBdHRyIiwicm9vdE5hbWVzcGFjZSIsInBhcnNlSW5saW5lQ1NTIiwiY3JlYXRlRE9NQ29tcGlsZXJFcnJvciIsIkRPTUVycm9yTWVzc2FnZXMiLCJpc0V2ZW50T3B0aW9uTW9kaWZpZXIiLCJpc05vbktleU1vZGlmaWVyIiwibWF5YmVLZXlNb2RpZmllciIsImlzS2V5Ym9hcmRFdmVudCIsInRyYW5zZm9ybUNsaWNrIiwiaGFzTXVsdGlwbGVDaGlsZHJlbiIsImlnbm9yZVNpZGVFZmZlY3RUYWdzIiwiaGVhZGluZ3MiLCJlbXB0eVNldCIsIm9ubHlWYWxpZENoaWxkcmVuIiwib3B0Z3JvdXAiLCJ0YWJsZSIsInRyIiwiY29sZ3JvdXAiLCJ0Ym9keSIsInRoZWFkIiwidGZvb3QiLCJzY3JpcHQiLCJpZnJhbWUiLCJ0ZXh0YXJlYSIsIm9ubHlWYWxpZFBhcmVudHMiLCJodG1sIiwidGQiLCJjYXB0aW9uIiwiY29sIiwidGgiLCJkZCIsImR0IiwiZmlnY2FwdGlvbiIsInN1bW1hcnkiLCJhcmVhIiwia25vd25JbnZhbGlkQ2hpbGRyZW4iLCJzdmciLCJrbm93bkludmFsaWRQYXJlbnRzIiwiZm9ybSIsImxpIiwiaDEiLCJoMyIsImg0IiwiaDUiLCJoNiIsIkRPTU5vZGVUcmFuc2Zvcm1zIiwiRE9NRGlyZWN0aXZlVHJhbnNmb3JtcyIsImNsb2FrIiwiYmFzZVJlc3VsdCIsImNoZWNrRHVwbGljYXRlZFZhbHVlIiwiZGlyZWN0aXZlVG9Vc2UiLCJpc0ludmFsaWRUeXBlIiwiaGFzRHluYW1pY0tleVZCaW5kIiwiaGFuZGxlckV4cCIsImtleU1vZGlmaWVycyIsIm5vbktleU1vZGlmaWVycyIsImV2ZW50T3B0aW9uTW9kaWZpZXJzIiwicmVzb2x2ZU1vZGlmaWVycyIsIm1vZGlmaWVyUG9zdGZpeCIsInNob3ciLCJjb21waWxlQ2FjaGUiLCJjb21waWxlVG9GdW5jdGlvbiIsImdlbkNhY2hlS2V5IiwiY3VzdG9tRWxlbWVudHMiLCJjb21waWxlIiwiYXNXYXJuaW5nIiwiY29kZUZyYW1lIiwibGluZXMiLCJuZXdsaW5lU2VxdWVuY2VzIiwiaWR4IiwibGluZUxlbmd0aCIsIm5ld0xpbmVTZXFMZW5ndGgiLCJwYWQiLCJnZW5lcmF0ZUNvZGVGcmFtZSIsIkJlIiwic2UiLCJaZSIsIkIiLCJaIiwibGUiLCJlZSIsIkFlIiwiRiIsIkRlIiwidGhyb3ciLCJGZSIsInZhbHVlT2YiLCJwZSIsIk4iLCJJTklUSUFMSVpFRCIsIkxPQURJTkciLCJTVUNDRVNTIiwiRkFJTFVSRSIsImFwaUtleSIsImF1dGhSZWZlcnJlclBvbGljeSIsImNoYW5uZWwiLCJjbGllbnQiLCJsYW5ndWFnZSIsImxpYnJhcmllcyIsIm1hcElkcyIsInJlZ2lvbiIsImVycm9ycyIsImZhaWxlZCIsImNyZWF0ZVVybCIsImRlbGV0ZVNjcmlwdCIsImdldEVsZW1lbnRCeUlkIiwibG9hZFByb21pc2UiLCJsb2FkQ2FsbGJhY2siLCJnb29nbGUiLCJpbXBvcnRMaWJyYXJ5IiwiZXhlY3V0ZSIsIm1hcHMiLCJzZXRTY3JpcHQiLCJPIiwiTSIsIkUiLCJFcnJvckV2ZW50IiwibG9hZEVycm9yQ2FsbGJhY2siLCJvbmVycm9yRXZlbnQiLCJyZXNldElmUmV0cnlpbmdGYWlsZWQiLCJwb3ciLCJmZSIsIm1lIiwiemUiLCJhcGlQcm9taXNlIiwiYmFja2dyb3VuZENvbG9yIiwiY2xpY2thYmxlSWNvbnMiLCJjb250cm9sU2l6ZSIsImRpc2FibGVEZWZhdWx0VWkiLCJkaXNhYmxlRG91YmxlQ2xpY2tab29tIiwiZHJhZ2dhYmxlIiwiZHJhZ2dhYmxlQ3Vyc29yIiwiZHJhZ2dpbmdDdXJzb3IiLCJmdWxsc2NyZWVuQ29udHJvbCIsImZ1bGxzY3JlZW5Db250cm9sUG9zaXRpb24iLCJnZXN0dXJlSGFuZGxpbmciLCJoZWFkaW5nIiwiaXNGcmFjdGlvbmFsWm9vbUVuYWJsZWQiLCJrZXlib2FyZFNob3J0Y3V0cyIsIm1hcFR5cGVDb250cm9sIiwibWFwVHlwZUNvbnRyb2xPcHRpb25zIiwibWFwVHlwZUlkIiwibWFwSWQiLCJtYXhab29tIiwibWluWm9vbSIsIm5vQ2xlYXIiLCJwYW5Db250cm9sIiwicGFuQ29udHJvbFBvc2l0aW9uIiwicmVzdHJpY3Rpb24iLCJyb3RhdGVDb250cm9sIiwicm90YXRlQ29udHJvbFBvc2l0aW9uIiwic2NhbGVDb250cm9sIiwic2NhbGVDb250cm9sU3R5bGUiLCJzY3JvbGx3aGVlbCIsInN0cmVldFZpZXciLCJzdHJlZXRWaWV3Q29udHJvbCIsInN0cmVldFZpZXdDb250cm9sUG9zaXRpb24iLCJ0aWx0Iiwiem9vbUNvbnRyb2wiLCJ6b29tQ29udHJvbFBvc2l0aW9uIiwiQ29udHJvbFBvc2l0aW9uIiwic2NhbGVDb250cm9sT3B0aW9ucyIsInBhbkNvbnRyb2xPcHRpb25zIiwiem9vbUNvbnRyb2xPcHRpb25zIiwicm90YXRlQ29udHJvbE9wdGlvbnMiLCJzdHJlZXRWaWV3Q29udHJvbE9wdGlvbnMiLCJmdWxsc2NyZWVuQ29udHJvbE9wdGlvbnMiLCJkaXNhYmxlRGVmYXVsdFVJIiwiYWRkTGlzdGVuZXJPbmNlIiwiT3ZlcmxheVZpZXciLCJlbGVtZW50Iiwic2V0TWFwIiwiZ2V0UG9zaXRpb24iLCJMYXRMbmciLCJnZXRWaXNpYmxlIiwidmlzaWJpbGl0eSIsIm9wYWNpdHkiLCJvbkFkZCIsImdldFBhbmVzIiwib3ZlcmxheU1vdXNlVGFyZ2V0IiwiZHJhdyIsImdldFByb2plY3Rpb24iLCJmcm9tTGF0TG5nVG9EaXZQaXhlbCIsImFuY2hvclBvaW50Iiwib2Zmc2V0WCIsInkiLCJvZmZzZXRZIiwiekluZGV4Iiwib25SZW1vdmUiLCJzZXRPcHRpb25zIiwiVmUiLCJhZGRMaXN0ZW5lciIsIlMiLCJzZXRab29tIiwicGFuVG8iLCJjbGVhckluc3RhbmNlTGlzdGVuZXJzIiwibWFwUmVmIiwicmVhZHkiLCJhcGkiLCJtYXBUaWxlc0xvYWRlZCIsInRlIiwiR2UiLCJFdCIsIldlIiwiS2UiLCJBIiwiZ2UiLCJQdCIsInBpbk9wdGlvbnMiLCJtYXJrZXIiLCJBZHZhbmNlZE1hcmtlckVsZW1lbnQiLCJQaW5FbGVtZW50IiwicmVtb3ZlTWFya2VyIiwiYWRkTWFya2VyIiwiViIsIlllIiwiSmUiLCJ2ZSIsIkx0IiwiU3QiLCJwb2x5bGluZSIsInh0IiwicG9seWdvbiIsInllIiwiQXQiLCJyZWN0YW5nbGUiLCJ3ZSIsIkl0IiwiY2lyY2xlIiwiWGUiLCJjb250cm9scyIsInJlbW92ZUF0IiwiY29udHJvbFJlZiIsIlFlIiwiVHQiLCJfZSIsImluZm9XaW5kb3ciLCJpbmZvV2luZG93UmVmIiwiaGFzU2xvdENvbnRlbnQiLCJzdCIsIiR0Iiwia2UiLCJJbnQ4QXJyYXkiLCJVaW50OENsYW1wZWRBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsInVlIiwibnVtSXRlbXMiLCJub2RlU2l6ZSIsIkFycmF5VHlwZSIsIkluZGV4QXJyYXlUeXBlIiwiQllURVNfUEVSX0VMRU1FTlQiLCJjb29yZHMiLCJfcG9zIiwiX2ZpbmlzaGVkIiwiaWUiLCJ3aXRoaW4iLCJDZSIsIkllIiwibG9nIiwic3FydCIsIkciLCJuZSIsIm50IiwibWluUG9pbnRzIiwicmFkaXVzIiwiZXh0ZW50IiwiZ2VuZXJhdGVJZCIsImJlIiwiZnJvdW5kIiwiJGUiLCJ0cmVlcyIsInN0cmlkZSIsImNsdXN0ZXJQcm9wcyIsInBvaW50cyIsImdlb21ldHJ5IiwiY29vcmRpbmF0ZXMiLCJLIiwiWSIsIl9jcmVhdGVUcmVlIiwiX2NsdXN0ZXIiLCJnZXRDbHVzdGVycyIsIl9saW1pdFpvb20iLCJNZSIsImdldENoaWxkcmVuIiwiX2dldE9yaWdpbklkIiwiX2dldE9yaWdpblpvb20iLCJnZXRMZWF2ZXMiLCJfYXBwZW5kTGVhdmVzIiwiZ2V0VGlsZSIsImZlYXR1cmVzIiwiX2FkZFRpbGVGZWF0dXJlcyIsImdldENsdXN0ZXJFeHBhbnNpb25ab29tIiwiY2x1c3Rlcl9pZCIsImNsdXN0ZXIiLCJwb2ludF9jb3VudCIsIlJlIiwidGFncyIsIl9tYXAiLCJvdCIsIml0IiwicG9pbnRfY291bnRfYWJicmV2aWF0ZWQiLCJzaW4iLCJQSSIsImF0YW4iLCJkZSIsIkMiLCJpc0FkdmFuY2VkTWFya2VyQXZhaWxhYmxlIiwiZ2V0TWFwQ2FwYWJpbGl0aWVzIiwiaXNBZHZhbmNlZE1hcmtlcnNBdmFpbGFibGUiLCJpc0FkdmFuY2VkTWFya2VyIiwiVyIsIm1hcmtlcnMiLCJfcG9zaXRpb24iLCJib3VuZHMiLCJMYXRMbmdCb3VuZHMiLCJnZXRDZW50ZXIiLCJhdCIsImplIiwiZ2V0Qm91bmRzIiwiY29udGFpbnMiLCJub3J0aEVhc3QiLCJzb3V0aFdlc3QiLCJsdCIsImN0IiwiT2UiLCJnZXROb3J0aEVhc3QiLCJnZXRTb3V0aFdlc3QiLCJmcm9tRGl2UGl4ZWxUb0xhdExuZyIsInFlIiwiaHQiLCJ2aWV3cG9ydFBhZGRpbmciLCJjYWxjdWxhdGUiLCJtYXBDYW52YXNQcm9qZWN0aW9uIiwiZ2V0Wm9vbSIsImNsdXN0ZXJzIiwiY2hhbmdlZCIsInB0Iiwic3VwZXJDbHVzdGVyIiwidHJhbnNmb3JtQ2x1c3RlciIsImZ0IiwidmlldyIsInN1bSIsIm1lYW4iLCJndCIsIk1BWF9aSU5ERVgiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImljb24iLCJQb2ludCIsImhlIiwidnQiLCJEIiwiQ0xVU1RFUklOR19CRUdJTiIsIkNMVVNURVJJTkdfRU5EIiwiQ0xVU1RFUl9DTElDSyIsInl0IiwiZml0Qm91bmRzIiwid3QiLCJhbGdvcml0aG1PcHRpb25zIiwiYWxnb3JpdGhtIiwib25DbHVzdGVyQ2xpY2siLCJhZGRNYXJrZXJzIiwicmVtb3ZlTWFya2VycyIsImNsZWFyTWFya2VycyIsImdldE1hcCIsInJlbmRlckNsdXN0ZXJzIiwiaWRsZUxpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJFZSIsIlJ0IiwibWFya2VyQ2x1c3RlciIsIl90IiwiY3VzdG9tTWFya2VyIiwiY3VzdG9tTWFya2VyUmVmIiwia3QiLCJqdCIsImN1cnNvciIsInF0Iiwic3RydWN0dXJlZENsb25lIiwiTVZDQXJyYXkiLCJ2aXN1YWxpemF0aW9uIiwiSGVhdG1hcExheWVyIiwiaGVhdG1hcExheWVyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJBcHBQYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==