!function(){"use strict";var e={"./assets/js/AppSingleGuide.vue":
/*!**************************************!*\
  !*** ./assets/js/AppSingleGuide.vue ***!
  \**************************************/function(e,t,n){n.r(t);var o=n(/*! ./AppSingleGuide.vue?vue&type=template&id=1ec5b7db */"./assets/js/AppSingleGuide.vue?vue&type=template&id=1ec5b7db"),r=n(/*! ./AppSingleGuide.vue?vue&type=script&lang=js */"./assets/js/AppSingleGuide.vue?vue&type=script&lang=js");const s=(0,n(/*! ../../node_modules/vue-loader/dist/exportHelper.js */"./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__file","assets/js/AppSingleGuide.vue"]]);t.default=s},"./assets/js/AppSingleGuide.vue?vue&type=script&lang=js":
/*!**************************************************************!*\
  !*** ./assets/js/AppSingleGuide.vue?vue&type=script&lang=js ***!
  \**************************************************************/function(e,t,n){n.r(t),n.d(t,{default:function(){return o.default}});var o=n(/*! -!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./AppSingleGuide.vue?vue&type=script&lang=js */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/AppSingleGuide.vue?vue&type=script&lang=js")},"./assets/js/AppSingleGuide.vue?vue&type=template&id=1ec5b7db":
/*!********************************************************************!*\
  !*** ./assets/js/AppSingleGuide.vue?vue&type=template&id=1ec5b7db ***!
  \********************************************************************/function(e,t,n){n.r(t),n.d(t,{render:function(){return o.render}});var o=n(/*! -!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./AppSingleGuide.vue?vue&type=template&id=1ec5b7db */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/AppSingleGuide.vue?vue&type=template&id=1ec5b7db")},"./assets/js/components/Footer.vue":
/*!*****************************************!*\
  !*** ./assets/js/components/Footer.vue ***!
  \*****************************************/function(e,t,n){n.r(t);var o=n(/*! ./Footer.vue?vue&type=template&id=e4181508&scoped=true */"./assets/js/components/Footer.vue?vue&type=template&id=e4181508&scoped=true"),r=n(/*! ./Footer.vue?vue&type=script&lang=js */"./assets/js/components/Footer.vue?vue&type=script&lang=js");n(/*! ./Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true */"./assets/js/components/Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true");const s=(0,n(/*! ../../../node_modules/vue-loader/dist/exportHelper.js */"./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__scopeId","data-v-e4181508"],["__file","assets/js/components/Footer.vue"]]);t.default=s},"./assets/js/components/Footer.vue?vue&type=script&lang=js":
/*!*****************************************************************!*\
  !*** ./assets/js/components/Footer.vue?vue&type=script&lang=js ***!
  \*****************************************************************/function(e,t,n){n.r(t),n.d(t,{default:function(){return o.default}});var o=n(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./Footer.vue?vue&type=script&lang=js */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=script&lang=js")},"./assets/js/components/Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true":
/*!**************************************************************************************************!*\
  !*** ./assets/js/components/Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true ***!
  \**************************************************************************************************/function(e,t,n){n.r(t);n(/*! -!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true")},"./assets/js/components/Footer.vue?vue&type=template&id=e4181508&scoped=true":
/*!***********************************************************************************!*\
  !*** ./assets/js/components/Footer.vue?vue&type=template&id=e4181508&scoped=true ***!
  \***********************************************************************************/function(e,t,n){n.r(t),n.d(t,{render:function(){return o.render}});var o=n(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./Footer.vue?vue&type=template&id=e4181508&scoped=true */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=template&id=e4181508&scoped=true")},"./assets/js/components/NavigationMenu.vue":
/*!*************************************************!*\
  !*** ./assets/js/components/NavigationMenu.vue ***!
  \*************************************************/function(e,t,n){n.r(t);var o=n(/*! ./NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true */"./assets/js/components/NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true"),r=n(/*! ./NavigationMenu.vue?vue&type=script&lang=js */"./assets/js/components/NavigationMenu.vue?vue&type=script&lang=js");n(/*! ./NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true */"./assets/js/components/NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true");const s=(0,n(/*! ../../../node_modules/vue-loader/dist/exportHelper.js */"./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__scopeId","data-v-18a31474"],["__file","assets/js/components/NavigationMenu.vue"]]);t.default=s},"./assets/js/components/NavigationMenu.vue?vue&type=script&lang=js":
/*!*************************************************************************!*\
  !*** ./assets/js/components/NavigationMenu.vue?vue&type=script&lang=js ***!
  \*************************************************************************/function(e,t,n){n.r(t),n.d(t,{default:function(){return o.default}});var o=n(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./NavigationMenu.vue?vue&type=script&lang=js */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=script&lang=js")},"./assets/js/components/NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true":
/*!**********************************************************************************************************!*\
  !*** ./assets/js/components/NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true ***!
  \**********************************************************************************************************/function(e,t,n){n.r(t);n(/*! -!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true")},"./assets/js/components/NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true":
/*!*******************************************************************************************!*\
  !*** ./assets/js/components/NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true ***!
  \*******************************************************************************************/function(e,t,n){n.r(t),n.d(t,{render:function(){return o.render}});var o=n(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true")},"./assets/js/pages/SinglePostGoogleMap.vue":
/*!*************************************************!*\
  !*** ./assets/js/pages/SinglePostGoogleMap.vue ***!
  \*************************************************/function(e,t,n){n.r(t);var o=n(/*! ./SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true */"./assets/js/pages/SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true"),r=n(/*! ./SinglePostGoogleMap.vue?vue&type=script&lang=js */"./assets/js/pages/SinglePostGoogleMap.vue?vue&type=script&lang=js");n(/*! ./SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true */"./assets/js/pages/SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true");const s=(0,n(/*! ../../../node_modules/vue-loader/dist/exportHelper.js */"./node_modules/vue-loader/dist/exportHelper.js").default)(r.default,[["render",o.render],["__scopeId","data-v-6b912c10"],["__file","assets/js/pages/SinglePostGoogleMap.vue"]]);t.default=s},"./assets/js/pages/SinglePostGoogleMap.vue?vue&type=script&lang=js":
/*!*************************************************************************!*\
  !*** ./assets/js/pages/SinglePostGoogleMap.vue?vue&type=script&lang=js ***!
  \*************************************************************************/function(e,t,n){n.r(t),n.d(t,{default:function(){return o.default}});var o=n(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./SinglePostGoogleMap.vue?vue&type=script&lang=js */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=script&lang=js")},"./assets/js/pages/SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true":
/*!**********************************************************************************************************!*\
  !*** ./assets/js/pages/SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true ***!
  \**********************************************************************************************************/function(e,t,n){n.r(t);n(/*! -!../../../node_modules/mini-css-extract-plugin/dist/loader.js!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!../../../node_modules/vue-loader/dist/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true */"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true")},"./assets/js/pages/SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true":
/*!*******************************************************************************************!*\
  !*** ./assets/js/pages/SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true ***!
  \*******************************************************************************************/function(e,t,n){n.r(t),n.d(t,{render:function(){return o.render}});var o=n(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../node_modules/vue-loader/dist/index.js??ruleSet[0]!./SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true */"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true")},"./node_modules/axios/lib/adapters/adapters.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/adapters/adapters.js ***!
  \*****************************************************/function(e,t,n){n.r(t);var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ./http.js */"./node_modules/axios/lib/helpers/null.js"),s=n(/*! ./xhr.js */"./node_modules/axios/lib/adapters/xhr.js"),i=n(/*! ./fetch.js */"./node_modules/axios/lib/adapters/fetch.js"),a=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js");const l={http:r.default,xhr:s.default,fetch:i.default};o.default.forEach(l,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const c=e=>`- ${e}`,u=e=>o.default.isFunction(e)||null===e||!1===e;t.default={getAdapter:e=>{e=o.default.isArray(e)?e:[e];const{length:t}=e;let n,r;const s={};for(let o=0;o<t;o++){let t;if(n=e[o],r=n,!u(n)&&(r=l[(t=String(n)).toLowerCase()],void 0===r))throw new a.default(`Unknown adapter '${t}'`);if(r)break;s[t||"#"+o]=r}if(!r){const e=Object.entries(s).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(c).join("\n"):" "+c(e[0]):"as no adapter specified";throw new a.default("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r},adapters:l}},"./node_modules/axios/lib/adapters/fetch.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/adapters/fetch.js ***!
  \**************************************************/function(e,t,n){n.r(t);var o=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js"),r=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js"),i=n(/*! ../helpers/composeSignals.js */"./node_modules/axios/lib/helpers/composeSignals.js"),a=n(/*! ../helpers/trackStream.js */"./node_modules/axios/lib/helpers/trackStream.js"),l=n(/*! ../core/AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js"),c=n(/*! ../helpers/progressEventReducer.js */"./node_modules/axios/lib/helpers/progressEventReducer.js"),u=n(/*! ../helpers/resolveConfig.js */"./node_modules/axios/lib/helpers/resolveConfig.js"),d=n(/*! ../core/settle.js */"./node_modules/axios/lib/core/settle.js");const p="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,f=p&&"function"==typeof ReadableStream,h=p&&("function"==typeof TextEncoder?(m=new TextEncoder,e=>m.encode(e)):async e=>new Uint8Array(await new Response(e).arrayBuffer()));var m;const g=(e,...t)=>{try{return!!e(...t)}catch(e){return!1}},v=f&&g((()=>{let e=!1;const t=new Request(o.default.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t})),y=f&&g((()=>r.default.isReadableStream(new Response("").body))),b={stream:y&&(e=>e.body)};var _;p&&(_=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((e=>{!b[e]&&(b[e]=r.default.isFunction(_[e])?t=>t[e]():(t,n)=>{throw new s.default(`Response type '${e}' is not supported`,s.default.ERR_NOT_SUPPORT,n)})})));const x=async(e,t)=>{const n=r.default.toFiniteNumber(e.getContentLength());return null==n?(async e=>{if(null==e)return 0;if(r.default.isBlob(e))return e.size;if(r.default.isSpecCompliantForm(e)){const t=new Request(o.default.origin,{method:"POST",body:e});return(await t.arrayBuffer()).byteLength}return r.default.isArrayBufferView(e)||r.default.isArrayBuffer(e)?e.byteLength:(r.default.isURLSearchParams(e)&&(e+=""),r.default.isString(e)?(await h(e)).byteLength:void 0)})(t):n};t.default=p&&(async e=>{let{url:t,method:n,data:o,signal:p,cancelToken:f,timeout:h,onDownloadProgress:m,onUploadProgress:g,responseType:_,headers:S,withCredentials:w="same-origin",fetchOptions:k}=(0,u.default)(e);_=_?(_+"").toLowerCase():"text";let C,E=(0,i.default)([p,f&&f.toAbortSignal()],h);const j=E&&E.unsubscribe&&(()=>{E.unsubscribe()});let T;try{if(g&&v&&"get"!==n&&"head"!==n&&0!==(T=await x(S,o))){let e,n=new Request(t,{method:"POST",body:o,duplex:"half"});if(r.default.isFormData(o)&&(e=n.headers.get("content-type"))&&S.setContentType(e),n.body){const[e,t]=(0,c.progressEventDecorator)(T,(0,c.progressEventReducer)((0,c.asyncDecorator)(g)));o=(0,a.trackStream)(n.body,65536,e,t)}}r.default.isString(w)||(w=w?"include":"omit");const s="credentials"in Request.prototype;C=new Request(t,{...k,signal:E,method:n.toUpperCase(),headers:S.normalize().toJSON(),body:o,duplex:"half",credentials:s?w:void 0});let i=await fetch(C);const u=y&&("stream"===_||"response"===_);if(y&&(m||u&&j)){const e={};["status","statusText","headers"].forEach((t=>{e[t]=i[t]}));const t=r.default.toFiniteNumber(i.headers.get("content-length")),[n,o]=m&&(0,c.progressEventDecorator)(t,(0,c.progressEventReducer)((0,c.asyncDecorator)(m),!0))||[];i=new Response((0,a.trackStream)(i.body,65536,n,(()=>{o&&o(),j&&j()})),e)}_=_||"text";let p=await b[r.default.findKey(b,_)||"text"](i,e);return!u&&j&&j(),await new Promise(((t,n)=>{(0,d.default)(t,n,{data:p,headers:l.default.from(i.headers),status:i.status,statusText:i.statusText,config:e,request:C})}))}catch(t){if(j&&j(),t&&"TypeError"===t.name&&/Load failed|fetch/i.test(t.message))throw Object.assign(new s.default("Network Error",s.default.ERR_NETWORK,e,C),{cause:t.cause||t});throw s.default.from(t,t&&t.code,e,C)}})},"./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/function(e,t,n){n.r(t);var o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ./../core/settle.js */"./node_modules/axios/lib/core/settle.js"),s=n(/*! ../defaults/transitional.js */"./node_modules/axios/lib/defaults/transitional.js"),i=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js"),a=n(/*! ../cancel/CanceledError.js */"./node_modules/axios/lib/cancel/CanceledError.js"),l=n(/*! ../helpers/parseProtocol.js */"./node_modules/axios/lib/helpers/parseProtocol.js"),c=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js"),u=n(/*! ../core/AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js"),d=n(/*! ../helpers/progressEventReducer.js */"./node_modules/axios/lib/helpers/progressEventReducer.js"),p=n(/*! ../helpers/resolveConfig.js */"./node_modules/axios/lib/helpers/resolveConfig.js");const f="undefined"!=typeof XMLHttpRequest;t.default=f&&function(e){return new Promise((function(t,n){const f=(0,p.default)(e);let h=f.data;const m=u.default.from(f.headers).normalize();let g,v,y,b,_,{responseType:x,onUploadProgress:S,onDownloadProgress:w}=f;function k(){b&&b(),_&&_(),f.cancelToken&&f.cancelToken.unsubscribe(g),f.signal&&f.signal.removeEventListener("abort",g)}let C=new XMLHttpRequest;function E(){if(!C)return;const o=u.default.from("getAllResponseHeaders"in C&&C.getAllResponseHeaders()),s={data:x&&"text"!==x&&"json"!==x?C.response:C.responseText,status:C.status,statusText:C.statusText,headers:o,config:e,request:C};(0,r.default)((function(e){t(e),k()}),(function(e){n(e),k()}),s),C=null}C.open(f.method.toUpperCase(),f.url,!0),C.timeout=f.timeout,"onloadend"in C?C.onloadend=E:C.onreadystatechange=function(){C&&4===C.readyState&&(0!==C.status||C.responseURL&&0===C.responseURL.indexOf("file:"))&&setTimeout(E)},C.onabort=function(){C&&(n(new i.default("Request aborted",i.default.ECONNABORTED,e,C)),C=null)},C.onerror=function(){n(new i.default("Network Error",i.default.ERR_NETWORK,e,C)),C=null},C.ontimeout=function(){let t=f.timeout?"timeout of "+f.timeout+"ms exceeded":"timeout exceeded";const o=f.transitional||s.default;f.timeoutErrorMessage&&(t=f.timeoutErrorMessage),n(new i.default(t,o.clarifyTimeoutError?i.default.ETIMEDOUT:i.default.ECONNABORTED,e,C)),C=null},void 0===h&&m.setContentType(null),"setRequestHeader"in C&&o.default.forEach(m.toJSON(),(function(e,t){C.setRequestHeader(t,e)})),o.default.isUndefined(f.withCredentials)||(C.withCredentials=!!f.withCredentials),x&&"json"!==x&&(C.responseType=f.responseType),w&&([y,_]=(0,d.progressEventReducer)(w,!0),C.addEventListener("progress",y)),S&&C.upload&&([v,b]=(0,d.progressEventReducer)(S),C.upload.addEventListener("progress",v),C.upload.addEventListener("loadend",b)),(f.cancelToken||f.signal)&&(g=t=>{C&&(n(!t||t.type?new a.default(null,e,C):t),C.abort(),C=null)},f.cancelToken&&f.cancelToken.subscribe(g),f.signal&&(f.signal.aborted?g():f.signal.addEventListener("abort",g)));const j=(0,l.default)(f.url);j&&-1===c.default.protocols.indexOf(j)?n(new i.default("Unsupported protocol "+j+":",i.default.ERR_BAD_REQUEST,e)):C.send(h||null)}))}},"./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/function(e,t,n){n.r(t);var o=n(/*! ./utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ./helpers/bind.js */"./node_modules/axios/lib/helpers/bind.js"),s=n(/*! ./core/Axios.js */"./node_modules/axios/lib/core/Axios.js"),i=n(/*! ./core/mergeConfig.js */"./node_modules/axios/lib/core/mergeConfig.js"),a=n(/*! ./defaults/index.js */"./node_modules/axios/lib/defaults/index.js"),l=n(/*! ./helpers/formDataToJSON.js */"./node_modules/axios/lib/helpers/formDataToJSON.js"),c=n(/*! ./cancel/CanceledError.js */"./node_modules/axios/lib/cancel/CanceledError.js"),u=n(/*! ./cancel/CancelToken.js */"./node_modules/axios/lib/cancel/CancelToken.js"),d=n(/*! ./cancel/isCancel.js */"./node_modules/axios/lib/cancel/isCancel.js"),p=n(/*! ./env/data.js */"./node_modules/axios/lib/env/data.js"),f=n(/*! ./helpers/toFormData.js */"./node_modules/axios/lib/helpers/toFormData.js"),h=n(/*! ./core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js"),m=n(/*! ./helpers/spread.js */"./node_modules/axios/lib/helpers/spread.js"),g=n(/*! ./helpers/isAxiosError.js */"./node_modules/axios/lib/helpers/isAxiosError.js"),v=n(/*! ./core/AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js"),y=n(/*! ./adapters/adapters.js */"./node_modules/axios/lib/adapters/adapters.js"),b=n(/*! ./helpers/HttpStatusCode.js */"./node_modules/axios/lib/helpers/HttpStatusCode.js");const _=function e(t){const n=new s.default(t),a=(0,r.default)(s.default.prototype.request,n);return o.default.extend(a,s.default.prototype,n,{allOwnKeys:!0}),o.default.extend(a,n,null,{allOwnKeys:!0}),a.create=function(n){return e((0,i.default)(t,n))},a}(a.default);_.Axios=s.default,_.CanceledError=c.default,_.CancelToken=u.default,_.isCancel=d.default,_.VERSION=p.VERSION,_.toFormData=f.default,_.AxiosError=h.default,_.Cancel=_.CanceledError,_.all=function(e){return Promise.all(e)},_.spread=m.default,_.isAxiosError=g.default,_.mergeConfig=i.default,_.AxiosHeaders=v.default,_.formToJSON=e=>(0,l.default)(o.default.isHTMLForm(e)?new FormData(e):e),_.getAdapter=y.default.getAdapter,_.HttpStatusCode=b.default,_.default=_,t.default=_},"./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/function(e,t,n){n.r(t);var o=n(/*! ./CanceledError.js */"./node_modules/axios/lib/cancel/CanceledError.js");class r{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const o=new Promise((e=>{n.subscribe(e),t=e})).then(e);return o.cancel=function(){n.unsubscribe(t)},o},e((function(e,r,s){n.reason||(n.reason=new o.default(e,r,s),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}toAbortSignal(){const e=new AbortController,t=t=>{e.abort(t)};return this.subscribe(t),e.signal.unsubscribe=()=>this.unsubscribe(t),e.signal}static source(){let e;return{token:new r((function(t){e=t})),cancel:e}}}t.default=r},"./node_modules/axios/lib/cancel/CanceledError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CanceledError.js ***!
  \********************************************************/function(e,t,n){n.r(t);var o=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js");function r(e,t,n){o.default.call(this,null==e?"canceled":e,o.default.ERR_CANCELED,t,n),this.name="CanceledError"}n(/*! ../utils.js */"./node_modules/axios/lib/utils.js").default.inherits(r,o.default,{__CANCEL__:!0}),t.default=r},"./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/function(e,t,n){function o(e){return!(!e||!e.__CANCEL__)}n.r(t),n.d(t,{default:function(){return o}})},"./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/function(e,t,n){n.r(t);var o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ../helpers/buildURL.js */"./node_modules/axios/lib/helpers/buildURL.js"),s=n(/*! ./InterceptorManager.js */"./node_modules/axios/lib/core/InterceptorManager.js"),i=n(/*! ./dispatchRequest.js */"./node_modules/axios/lib/core/dispatchRequest.js"),a=n(/*! ./mergeConfig.js */"./node_modules/axios/lib/core/mergeConfig.js"),l=n(/*! ./buildFullPath.js */"./node_modules/axios/lib/core/buildFullPath.js"),c=n(/*! ../helpers/validator.js */"./node_modules/axios/lib/helpers/validator.js"),u=n(/*! ./AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js");const d=c.default.validators;class p{constructor(e){this.defaults=e||{},this.interceptors={request:new s.default,response:new s.default}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t={};Error.captureStackTrace?Error.captureStackTrace(t):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";try{e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}catch(e){}}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=(0,a.default)(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:s}=t;void 0!==n&&c.default.assertOptions(n,{silentJSONParsing:d.transitional(d.boolean),forcedJSONParsing:d.transitional(d.boolean),clarifyTimeoutError:d.transitional(d.boolean)},!1),null!=r&&(o.default.isFunction(r)?t.paramsSerializer={serialize:r}:c.default.assertOptions(r,{encode:d.function,serialize:d.function},!0)),void 0!==t.allowAbsoluteUrls||(void 0!==this.defaults.allowAbsoluteUrls?t.allowAbsoluteUrls=this.defaults.allowAbsoluteUrls:t.allowAbsoluteUrls=!0),c.default.assertOptions(t,{baseUrl:d.spelling("baseURL"),withXsrfToken:d.spelling("withXSRFToken")},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase();let l=s&&o.default.merge(s.common,s[t.method]);s&&o.default.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete s[e]})),t.headers=u.default.concat(l,s);const p=[];let f=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(f=f&&e.synchronous,p.unshift(e.fulfilled,e.rejected))}));const h=[];let m;this.interceptors.response.forEach((function(e){h.push(e.fulfilled,e.rejected)}));let g,v=0;if(!f){const e=[i.default.bind(this),void 0];for(e.unshift.apply(e,p),e.push.apply(e,h),g=e.length,m=Promise.resolve(t);v<g;)m=m.then(e[v++],e[v++]);return m}g=p.length;let y=t;for(v=0;v<g;){const e=p[v++],t=p[v++];try{y=e(y)}catch(e){t.call(this,e);break}}try{m=i.default.call(this,y)}catch(e){return Promise.reject(e)}for(v=0,g=h.length;v<g;)m=m.then(h[v++],h[v++]);return m}getUri(e){e=(0,a.default)(this.defaults,e);const t=(0,l.default)(e.baseURL,e.url,e.allowAbsoluteUrls);return(0,r.default)(t,e.params,e.paramsSerializer)}}o.default.forEach(["delete","get","head","options"],(function(e){p.prototype[e]=function(t,n){return this.request((0,a.default)(n||{},{method:e,url:t,data:(n||{}).data}))}})),o.default.forEach(["post","put","patch"],(function(e){function t(t){return function(n,o,r){return this.request((0,a.default)(r||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:o}))}}p.prototype[e]=t(),p.prototype[e+"Form"]=t(!0)})),t.default=p},"./node_modules/axios/lib/core/AxiosError.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosError.js ***!
  \***************************************************/function(e,t,n){n.r(t);var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js");function r(e,t,n,o,r){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),o&&(this.request=o),r&&(this.response=r,this.status=r.status?r.status:null)}o.default.inherits(r,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:o.default.toJSONObject(this.config),code:this.code,status:this.status}}});const s=r.prototype,i={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{i[e]={value:e}})),Object.defineProperties(r,i),Object.defineProperty(s,"isAxiosError",{value:!0}),r.from=(e,t,n,i,a,l)=>{const c=Object.create(s);return o.default.toFlatObject(e,c,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),r.call(c,e.message,t,n,i,a),c.cause=e,c.name=e.name,l&&Object.assign(c,l),c},t.default=r},"./node_modules/axios/lib/core/AxiosHeaders.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosHeaders.js ***!
  \*****************************************************/function(e,t,n){n.r(t);var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ../helpers/parseHeaders.js */"./node_modules/axios/lib/helpers/parseHeaders.js");const s=Symbol("internals");function i(e){return e&&String(e).trim().toLowerCase()}function a(e){return!1===e||null==e?e:o.default.isArray(e)?e.map(a):String(e)}function l(e,t,n,r,s){return o.default.isFunction(r)?r.call(this,t,n):(s&&(t=n),o.default.isString(t)?o.default.isString(r)?-1!==t.indexOf(r):o.default.isRegExp(r)?r.test(t):void 0:void 0)}class c{constructor(e){e&&this.set(e)}set(e,t,n){const s=this;function l(e,t,n){const r=i(t);if(!r)throw new Error("header name must be a non-empty string");const l=o.default.findKey(s,r);(!l||void 0===s[l]||!0===n||void 0===n&&!1!==s[l])&&(s[l||t]=a(e))}const c=(e,t)=>o.default.forEach(e,((e,n)=>l(e,n,t)));if(o.default.isPlainObject(e)||e instanceof this.constructor)c(e,t);else if(o.default.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim()))c((0,r.default)(e),t);else if(o.default.isObject(e)&&o.default.isIterable(e)){let n,r,s={};for(const t of e){if(!o.default.isArray(t))throw TypeError("Object iterator must return a key-value pair");s[r=t[0]]=(n=s[r])?o.default.isArray(n)?[...n,t[1]]:[n,t[1]]:t[1]}c(s,t)}else null!=e&&l(t,e,n);return this}get(e,t){if(e=i(e)){const n=o.default.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let o;for(;o=n.exec(e);)t[o[1]]=o[2];return t}(e);if(o.default.isFunction(t))return t.call(this,e,n);if(o.default.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=i(e)){const n=o.default.findKey(this,e);return!(!n||void 0===this[n]||t&&!l(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function s(e){if(e=i(e)){const s=o.default.findKey(n,e);!s||t&&!l(0,n[s],s,t)||(delete n[s],r=!0)}}return o.default.isArray(e)?e.forEach(s):s(e),r}clear(e){const t=Object.keys(this);let n=t.length,o=!1;for(;n--;){const r=t[n];e&&!l(0,this[r],r,e,!0)||(delete this[r],o=!0)}return o}normalize(e){const t=this,n={};return o.default.forEach(this,((r,s)=>{const i=o.default.findKey(n,s);if(i)return t[i]=a(r),void delete t[s];const l=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(s):String(s).trim();l!==s&&delete t[s],t[l]=a(r),n[l]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return o.default.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&o.default.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}getSetCookie(){return this.get("set-cookie")||[]}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[s]=this[s]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=i(e);t[r]||(!function(e,t){const n=o.default.toCamelCase(" "+t);["get","set","has"].forEach((o=>{Object.defineProperty(e,o+n,{value:function(e,n,r){return this[o].call(this,t,e,n,r)},configurable:!0})}))}(n,e),t[r]=!0)}return o.default.isArray(e)?e.forEach(r):r(e),this}}c.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),o.default.reduceDescriptors(c.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),o.default.freezeMethods(c),t.default=c},"./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/function(e,t,n){n.r(t);var o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js");t.default=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){o.default.forEach(this.handlers,(function(t){null!==t&&e(t)}))}}},"./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/function(e,t,n){n.r(t),n.d(t,{default:function(){return s}});var o=n(/*! ../helpers/isAbsoluteURL.js */"./node_modules/axios/lib/helpers/isAbsoluteURL.js"),r=n(/*! ../helpers/combineURLs.js */"./node_modules/axios/lib/helpers/combineURLs.js");function s(e,t,n){let s=!(0,o.default)(t);return e&&(s||0==n)?(0,r.default)(e,t):t}},"./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/function(e,t,n){n.r(t),n.d(t,{default:function(){return u}});var o=n(/*! ./transformData.js */"./node_modules/axios/lib/core/transformData.js"),r=n(/*! ../cancel/isCancel.js */"./node_modules/axios/lib/cancel/isCancel.js"),s=n(/*! ../defaults/index.js */"./node_modules/axios/lib/defaults/index.js"),i=n(/*! ../cancel/CanceledError.js */"./node_modules/axios/lib/cancel/CanceledError.js"),a=n(/*! ../core/AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js"),l=n(/*! ../adapters/adapters.js */"./node_modules/axios/lib/adapters/adapters.js");function c(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new i.default(null,e)}function u(e){c(e),e.headers=a.default.from(e.headers),e.data=o.default.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1);return l.default.getAdapter(e.adapter||s.default.adapter)(e).then((function(t){return c(e),t.data=o.default.call(e,e.transformResponse,t),t.headers=a.default.from(t.headers),t}),(function(t){return(0,r.default)(t)||(c(e),t&&t.response&&(t.response.data=o.default.call(e,e.transformResponse,t.response),t.response.headers=a.default.from(t.response.headers))),Promise.reject(t)}))}},"./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/function(e,t,n){n.r(t),n.d(t,{default:function(){return i}});var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ./AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js");const s=e=>e instanceof r.default?{...e}:e;function i(e,t){t=t||{};const n={};function r(e,t,n,r){return o.default.isPlainObject(e)&&o.default.isPlainObject(t)?o.default.merge.call({caseless:r},e,t):o.default.isPlainObject(t)?o.default.merge({},t):o.default.isArray(t)?t.slice():t}function i(e,t,n,s){return o.default.isUndefined(t)?o.default.isUndefined(e)?void 0:r(void 0,e,0,s):r(e,t,0,s)}function a(e,t){if(!o.default.isUndefined(t))return r(void 0,t)}function l(e,t){return o.default.isUndefined(t)?o.default.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function c(n,o,s){return s in t?r(n,o):s in e?r(void 0,n):void 0}const u={url:a,method:a,data:a,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,withXSRFToken:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,beforeRedirect:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:c,headers:(e,t,n)=>i(s(e),s(t),0,!0)};return o.default.forEach(Object.keys(Object.assign({},e,t)),(function(r){const s=u[r]||i,a=s(e[r],t[r],r);o.default.isUndefined(a)&&s!==c||(n[r]=a)})),n}},"./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/function(e,t,n){n.r(t),n.d(t,{default:function(){return r}});var o=n(/*! ./AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js");function r(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new o.default("Request failed with status code "+n.status,[o.default.ERR_BAD_REQUEST,o.default.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}},"./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/function(e,t,n){n.r(t),n.d(t,{default:function(){return i}});var o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ../defaults/index.js */"./node_modules/axios/lib/defaults/index.js"),s=n(/*! ../core/AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js");function i(e,t){const n=this||r.default,i=t||n,a=s.default.from(i.headers);let l=i.data;return o.default.forEach(e,(function(e){l=e.call(n,l,a.normalize(),t?t.status:void 0)})),a.normalize(),l}},"./node_modules/axios/lib/defaults/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/defaults/index.js ***!
  \**************************************************/function(e,t,n){n.r(t);var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js"),s=n(/*! ./transitional.js */"./node_modules/axios/lib/defaults/transitional.js"),i=n(/*! ../helpers/toFormData.js */"./node_modules/axios/lib/helpers/toFormData.js"),a=n(/*! ../helpers/toURLEncodedForm.js */"./node_modules/axios/lib/helpers/toURLEncodedForm.js"),l=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js"),c=n(/*! ../helpers/formDataToJSON.js */"./node_modules/axios/lib/helpers/formDataToJSON.js");const u={transitional:s.default,adapter:["xhr","http","fetch"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,s=o.default.isObject(e);s&&o.default.isHTMLForm(e)&&(e=new FormData(e));if(o.default.isFormData(e))return r?JSON.stringify((0,c.default)(e)):e;if(o.default.isArrayBuffer(e)||o.default.isBuffer(e)||o.default.isStream(e)||o.default.isFile(e)||o.default.isBlob(e)||o.default.isReadableStream(e))return e;if(o.default.isArrayBufferView(e))return e.buffer;if(o.default.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let l;if(s){if(n.indexOf("application/x-www-form-urlencoded")>-1)return(0,a.default)(e,this.formSerializer).toString();if((l=o.default.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return(0,i.default)(l?{"files[]":e}:e,t&&new t,this.formSerializer)}}return s||r?(t.setContentType("application/json",!1),function(e,t,n){if(o.default.isString(e))try{return(t||JSON.parse)(e),o.default.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(n||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||u.transitional,n=t&&t.forcedJSONParsing,s="json"===this.responseType;if(o.default.isResponse(e)||o.default.isReadableStream(e))return e;if(e&&o.default.isString(e)&&(n&&!this.responseType||s)){const n=!(t&&t.silentJSONParsing)&&s;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw r.default.from(e,r.default.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:l.default.classes.FormData,Blob:l.default.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};o.default.forEach(["delete","get","head","post","put","patch"],(e=>{u.headers[e]={}})),t.default=u},"./node_modules/axios/lib/defaults/transitional.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************/function(e,t,n){n.r(t),t.default={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},"./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/function(e,t,n){n.r(t),n.d(t,{VERSION:function(){return o}});const o="1.9.0"},"./node_modules/axios/lib/helpers/AxiosURLSearchParams.js":
/*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js ***!
  \****************************************************************/function(e,t,n){n.r(t);var o=n(/*! ./toFormData.js */"./node_modules/axios/lib/helpers/toFormData.js");function r(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function s(e,t){this._pairs=[],e&&(0,o.default)(e,this,t)}const i=s.prototype;i.append=function(e,t){this._pairs.push([e,t])},i.toString=function(e){const t=e?function(t){return e.call(this,t,r)}:r;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")},t.default=s},"./node_modules/axios/lib/helpers/HttpStatusCode.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/HttpStatusCode.js ***!
  \**********************************************************/function(e,t,n){n.r(t);const o={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(o).forEach((([e,t])=>{o[t]=e})),t.default=o},"./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/function(e,t,n){function o(e,t){return function(){return e.apply(t,arguments)}}n.r(t),n.d(t,{default:function(){return o}})},"./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/function(e,t,n){n.r(t),n.d(t,{default:function(){return i}});var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ../helpers/AxiosURLSearchParams.js */"./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");function s(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function i(e,t,n){if(!t)return e;const i=n&&n.encode||s;o.default.isFunction(n)&&(n={serialize:n});const a=n&&n.serialize;let l;if(l=a?a(t,n):o.default.isURLSearchParams(t)?t.toString():new r.default(t,n).toString(i),l){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+l}return e}},"./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/function(e,t,n){function o(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}n.r(t),n.d(t,{default:function(){return o}})},"./node_modules/axios/lib/helpers/composeSignals.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/composeSignals.js ***!
  \**********************************************************/function(e,t,n){n.r(t);var o=n(/*! ../cancel/CanceledError.js */"./node_modules/axios/lib/cancel/CanceledError.js"),r=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js"),s=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js");t.default=(e,t)=>{const{length:n}=e=e?e.filter(Boolean):[];if(t||n){let n,i=new AbortController;const a=function(e){if(!n){n=!0,c();const t=e instanceof Error?e:this.reason;i.abort(t instanceof r.default?t:new o.default(t instanceof Error?t.message:t))}};let l=t&&setTimeout((()=>{l=null,a(new r.default(`timeout ${t} of ms exceeded`,r.default.ETIMEDOUT))}),t);const c=()=>{e&&(l&&clearTimeout(l),l=null,e.forEach((e=>{e.unsubscribe?e.unsubscribe(a):e.removeEventListener("abort",a)})),e=null)};e.forEach((e=>e.addEventListener("abort",a)));const{signal:u}=i;return u.unsubscribe=()=>s.default.asap(c),u}}},"./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/function(e,t,n){n.r(t);var o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js");t.default=r.default.hasStandardBrowserEnv?{write(e,t,n,r,s,i){const a=[e+"="+encodeURIComponent(t)];o.default.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),o.default.isString(r)&&a.push("path="+r),o.default.isString(s)&&a.push("domain="+s),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}}},"./node_modules/axios/lib/helpers/formDataToJSON.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/formDataToJSON.js ***!
  \**********************************************************/function(e,t,n){n.r(t);var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js");t.default=function(e){function t(e,n,r,s){let i=e[s++];if("__proto__"===i)return!0;const a=Number.isFinite(+i),l=s>=e.length;if(i=!i&&o.default.isArray(r)?r.length:i,l)return o.default.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!a;r[i]&&o.default.isObject(r[i])||(r[i]=[]);return t(e,n,r[i],s)&&o.default.isArray(r[i])&&(r[i]=function(e){const t={},n=Object.keys(e);let o;const r=n.length;let s;for(o=0;o<r;o++)s=n[o],t[s]=e[s];return t}(r[i])),!a}if(o.default.isFormData(e)&&o.default.isFunction(e.entries)){const n={};return o.default.forEachEntry(e,((e,r)=>{t(function(e){return o.default.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null}},"./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/function(e,t,n){function o(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}n.r(t),n.d(t,{default:function(){return o}})},"./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/function(e,t,n){n.r(t),n.d(t,{default:function(){return r}});var o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js");function r(e){return o.default.isObject(e)&&!0===e.isAxiosError}},"./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/function(e,t,n){n.r(t);var o,r,s=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js");t.default=s.default.hasStandardBrowserEnv?(o=new URL(s.default.origin),r=s.default.navigator&&/(msie|trident)/i.test(s.default.navigator.userAgent),e=>(e=new URL(e,s.default.origin),o.protocol===e.protocol&&o.host===e.host&&(r||o.port===e.port))):()=>!0},"./node_modules/axios/lib/helpers/null.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/null.js ***!
  \************************************************/function(e,t,n){n.r(t),t.default=null},"./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/function(e,t,n){n.r(t);const o=n(/*! ./../utils.js */"./node_modules/axios/lib/utils.js").default.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]);t.default=e=>{const t={};let n,r,s;return e&&e.split("\n").forEach((function(e){s=e.indexOf(":"),n=e.substring(0,s).trim().toLowerCase(),r=e.substring(s+1).trim(),!n||t[n]&&o[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t}},"./node_modules/axios/lib/helpers/parseProtocol.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseProtocol.js ***!
  \*********************************************************/function(e,t,n){function o(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}n.r(t),n.d(t,{default:function(){return o}})},"./node_modules/axios/lib/helpers/progressEventReducer.js":
/*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/progressEventReducer.js ***!
  \****************************************************************/function(e,t,n){n.r(t),n.d(t,{asyncDecorator:function(){return l},progressEventDecorator:function(){return a},progressEventReducer:function(){return i}});var o=n(/*! ./speedometer.js */"./node_modules/axios/lib/helpers/speedometer.js"),r=n(/*! ./throttle.js */"./node_modules/axios/lib/helpers/throttle.js"),s=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js");const i=(e,t,n=3)=>{let s=0;const i=(0,o.default)(50,250);return(0,r.default)((n=>{const o=n.loaded,r=n.lengthComputable?n.total:void 0,a=o-s,l=i(a);s=o;e({loaded:o,total:r,progress:r?o/r:void 0,bytes:a,rate:l||void 0,estimated:l&&r&&o<=r?(r-o)/l:void 0,event:n,lengthComputable:null!=r,[t?"download":"upload"]:!0})}),n)},a=(e,t)=>{const n=null!=e;return[o=>t[0]({lengthComputable:n,total:e,loaded:o}),t[1]]},l=e=>(...t)=>s.default.asap((()=>e(...t)))},"./node_modules/axios/lib/helpers/resolveConfig.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/resolveConfig.js ***!
  \*********************************************************/function(e,t,n){n.r(t);var o=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js"),r=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),s=n(/*! ./isURLSameOrigin.js */"./node_modules/axios/lib/helpers/isURLSameOrigin.js"),i=n(/*! ./cookies.js */"./node_modules/axios/lib/helpers/cookies.js"),a=n(/*! ../core/buildFullPath.js */"./node_modules/axios/lib/core/buildFullPath.js"),l=n(/*! ../core/mergeConfig.js */"./node_modules/axios/lib/core/mergeConfig.js"),c=n(/*! ../core/AxiosHeaders.js */"./node_modules/axios/lib/core/AxiosHeaders.js"),u=n(/*! ./buildURL.js */"./node_modules/axios/lib/helpers/buildURL.js");t.default=e=>{const t=(0,l.default)({},e);let n,{data:d,withXSRFToken:p,xsrfHeaderName:f,xsrfCookieName:h,headers:m,auth:g}=t;if(t.headers=m=c.default.from(m),t.url=(0,u.default)((0,a.default)(t.baseURL,t.url,t.allowAbsoluteUrls),e.params,e.paramsSerializer),g&&m.set("Authorization","Basic "+btoa((g.username||"")+":"+(g.password?unescape(encodeURIComponent(g.password)):""))),r.default.isFormData(d))if(o.default.hasStandardBrowserEnv||o.default.hasStandardBrowserWebWorkerEnv)m.setContentType(void 0);else if(!1!==(n=m.getContentType())){const[e,...t]=n?n.split(";").map((e=>e.trim())).filter(Boolean):[];m.setContentType([e||"multipart/form-data",...t].join("; "))}if(o.default.hasStandardBrowserEnv&&(p&&r.default.isFunction(p)&&(p=p(t)),p||!1!==p&&(0,s.default)(t.url))){const e=f&&h&&i.default.read(h);e&&m.set(f,e)}return t}},"./node_modules/axios/lib/helpers/speedometer.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/speedometer.js ***!
  \*******************************************************/function(e,t,n){n.r(t),t.default=function(e,t){e=e||10;const n=new Array(e),o=new Array(e);let r,s=0,i=0;return t=void 0!==t?t:1e3,function(a){const l=Date.now(),c=o[i];r||(r=l),n[s]=a,o[s]=l;let u=i,d=0;for(;u!==s;)d+=n[u++],u%=e;if(s=(s+1)%e,s===i&&(i=(i+1)%e),l-r<t)return;const p=c&&l-c;return p?Math.round(1e3*d/p):void 0}}},"./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/function(e,t,n){function o(e){return function(t){return e.apply(null,t)}}n.r(t),n.d(t,{default:function(){return o}})},"./node_modules/axios/lib/helpers/throttle.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/throttle.js ***!
  \****************************************************/function(e,t,n){n.r(t),t.default=function(e,t){let n,o,r=0,s=1e3/t;const i=(t,s=Date.now())=>{r=s,n=null,o&&(clearTimeout(o),o=null),e.apply(null,t)};return[(...e)=>{const t=Date.now(),a=t-r;a>=s?i(e,t):(n=e,o||(o=setTimeout((()=>{o=null,i(n)}),s-a)))},()=>n&&i(n)]}},"./node_modules/axios/lib/helpers/toFormData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toFormData.js ***!
  \******************************************************/function(e,t,n){n.r(t);var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js"),s=n(/*! ../platform/node/classes/FormData.js */"./node_modules/axios/lib/helpers/null.js");function i(e){return o.default.isPlainObject(e)||o.default.isArray(e)}function a(e){return o.default.endsWith(e,"[]")?e.slice(0,-2):e}function l(e,t,n){return e?e.concat(t).map((function(e,t){return e=a(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const c=o.default.toFlatObject(o.default,{},null,(function(e){return/^is[A-Z]/.test(e)}));t.default=function(e,t,n){if(!o.default.isObject(e))throw new TypeError("target must be an object");t=t||new(s.default||FormData);const u=(n=o.default.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!o.default.isUndefined(t[e])}))).metaTokens,d=n.visitor||g,p=n.dots,f=n.indexes,h=(n.Blob||"undefined"!=typeof Blob&&Blob)&&o.default.isSpecCompliantForm(t);if(!o.default.isFunction(d))throw new TypeError("visitor must be a function");function m(e){if(null===e)return"";if(o.default.isDate(e))return e.toISOString();if(!h&&o.default.isBlob(e))throw new r.default("Blob is not supported. Use a Buffer instead.");return o.default.isArrayBuffer(e)||o.default.isTypedArray(e)?h&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function g(e,n,r){let s=e;if(e&&!r&&"object"==typeof e)if(o.default.endsWith(n,"{}"))n=u?n:n.slice(0,-2),e=JSON.stringify(e);else if(o.default.isArray(e)&&function(e){return o.default.isArray(e)&&!e.some(i)}(e)||(o.default.isFileList(e)||o.default.endsWith(n,"[]"))&&(s=o.default.toArray(e)))return n=a(n),s.forEach((function(e,r){!o.default.isUndefined(e)&&null!==e&&t.append(!0===f?l([n],r,p):null===f?n:n+"[]",m(e))})),!1;return!!i(e)||(t.append(l(r,n,p),m(e)),!1)}const v=[],y=Object.assign(c,{defaultVisitor:g,convertValue:m,isVisitable:i});if(!o.default.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!o.default.isUndefined(n)){if(-1!==v.indexOf(n))throw Error("Circular reference detected in "+r.join("."));v.push(n),o.default.forEach(n,(function(n,s){!0===(!(o.default.isUndefined(n)||null===n)&&d.call(t,n,o.default.isString(s)?s.trim():s,r,y))&&e(n,r?r.concat(s):[s])})),v.pop()}}(e),t}},"./node_modules/axios/lib/helpers/toURLEncodedForm.js":
/*!************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toURLEncodedForm.js ***!
  \************************************************************/function(e,t,n){n.r(t),n.d(t,{default:function(){return i}});var o=n(/*! ../utils.js */"./node_modules/axios/lib/utils.js"),r=n(/*! ./toFormData.js */"./node_modules/axios/lib/helpers/toFormData.js"),s=n(/*! ../platform/index.js */"./node_modules/axios/lib/platform/index.js");function i(e,t){return(0,r.default)(e,new s.default.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return s.default.isNode&&o.default.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}},"./node_modules/axios/lib/helpers/trackStream.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/trackStream.js ***!
  \*******************************************************/function(e,t,n){n.r(t),n.d(t,{readBytes:function(){return r},streamChunk:function(){return o},trackStream:function(){return i}});const o=function*(e,t){let n=e.byteLength;if(!t||n<t)return void(yield e);let o,r=0;for(;r<n;)o=r+t,yield e.slice(r,o),r=o},r=async function*(e,t){for await(const n of s(e))yield*o(n,t)},s=async function*(e){if(e[Symbol.asyncIterator])return void(yield*e);const t=e.getReader();try{for(;;){const{done:e,value:n}=await t.read();if(e)break;yield n}}finally{await t.cancel()}},i=(e,t,n,o)=>{const s=r(e,t);let i,a=0,l=e=>{i||(i=!0,o&&o(e))};return new ReadableStream({async pull(e){try{const{done:t,value:o}=await s.next();if(t)return l(),void e.close();let r=o.byteLength;if(n){let e=a+=r;n(e)}e.enqueue(new Uint8Array(o))}catch(e){throw l(e),e}},cancel(e){return l(e),s.return()}},{highWaterMark:2})}},"./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/function(e,t,n){n.r(t);var o=n(/*! ../env/data.js */"./node_modules/axios/lib/env/data.js"),r=n(/*! ../core/AxiosError.js */"./node_modules/axios/lib/core/AxiosError.js");const s={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{s[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const i={};s.transitional=function(e,t,n){return(s,a,l)=>{if(!1===e)throw new r.default(function(e,t){return"[Axios v"+o.VERSION+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}(a," has been removed"+(t?" in "+t:"")),r.default.ERR_DEPRECATED);return t&&!i[a]&&(i[a]=!0),!e||e(s,a,l)}},s.spelling=function(e){return(e,t)=>!0},t.default={assertOptions:function(e,t,n){if("object"!=typeof e)throw new r.default("options must be an object",r.default.ERR_BAD_OPTION_VALUE);const o=Object.keys(e);let s=o.length;for(;s-- >0;){const i=o[s],a=t[i];if(a){const t=e[i],n=void 0===t||a(t,i,e);if(!0!==n)throw new r.default("option "+i+" must be "+n,r.default.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new r.default("Unknown option "+i,r.default.ERR_BAD_OPTION)}},validators:s}},"./node_modules/axios/lib/platform/browser/classes/Blob.js":
/*!*****************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/Blob.js ***!
  \*****************************************************************/function(e,t,n){n.r(t),t.default="undefined"!=typeof Blob?Blob:null},"./node_modules/axios/lib/platform/browser/classes/FormData.js":
/*!*********************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/FormData.js ***!
  \*********************************************************************/function(e,t,n){n.r(t),t.default="undefined"!=typeof FormData?FormData:null},"./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js":
/*!****************************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js ***!
  \****************************************************************************/function(e,t,n){n.r(t);var o=n(/*! ../../../helpers/AxiosURLSearchParams.js */"./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");t.default="undefined"!=typeof URLSearchParams?URLSearchParams:o.default},"./node_modules/axios/lib/platform/browser/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/index.js ***!
  \**********************************************************/function(e,t,n){n.r(t);var o=n(/*! ./classes/URLSearchParams.js */"./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js"),r=n(/*! ./classes/FormData.js */"./node_modules/axios/lib/platform/browser/classes/FormData.js"),s=n(/*! ./classes/Blob.js */"./node_modules/axios/lib/platform/browser/classes/Blob.js");t.default={isBrowser:!0,classes:{URLSearchParams:o.default,FormData:r.default,Blob:s.default},protocols:["http","https","file","blob","url","data"]}},"./node_modules/axios/lib/platform/common/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/platform/common/utils.js ***!
  \*********************************************************/function(e,t,n){n.r(t),n.d(t,{hasBrowserEnv:function(){return o},hasStandardBrowserEnv:function(){return s},hasStandardBrowserWebWorkerEnv:function(){return i},navigator:function(){return r},origin:function(){return a}});const o="undefined"!=typeof window&&"undefined"!=typeof document,r="object"==typeof navigator&&navigator||void 0,s=o&&(!r||["ReactNative","NativeScript","NS"].indexOf(r.product)<0),i="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,a=o&&window.location.href||"http://localhost"},"./node_modules/axios/lib/platform/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/platform/index.js ***!
  \**************************************************/function(e,t,n){n.r(t);var o=n(/*! ./node/index.js */"./node_modules/axios/lib/platform/browser/index.js"),r=n(/*! ./common/utils.js */"./node_modules/axios/lib/platform/common/utils.js");t.default={...r,...o.default}},"./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/function(e,t,n){n.r(t);var o=n(/*! ./helpers/bind.js */"./node_modules/axios/lib/helpers/bind.js");const{toString:r}=Object.prototype,{getPrototypeOf:s}=Object,{iterator:i,toStringTag:a}=Symbol,l=(c=Object.create(null),e=>{const t=r.call(e);return c[t]||(c[t]=t.slice(8,-1).toLowerCase())});var c;const u=e=>(e=e.toLowerCase(),t=>l(t)===e),d=e=>t=>typeof t===e,{isArray:p}=Array,f=d("undefined");const h=u("ArrayBuffer");const m=d("string"),g=d("function"),v=d("number"),y=e=>null!==e&&"object"==typeof e,b=e=>{if("object"!==l(e))return!1;const t=s(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||a in e||i in e)},_=u("Date"),x=u("File"),S=u("Blob"),w=u("FileList"),k=u("URLSearchParams"),[C,E,j,T]=["ReadableStream","Request","Response","Headers"].map(u);function A(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let o,r;if("object"!=typeof e&&(e=[e]),p(e))for(o=0,r=e.length;o<r;o++)t.call(null,e[o],o,e);else{const r=n?Object.getOwnPropertyNames(e):Object.keys(e),s=r.length;let i;for(o=0;o<s;o++)i=r[o],t.call(null,e[i],i,e)}}function O(e,t){t=t.toLowerCase();const n=Object.keys(e);let o,r=n.length;for(;r-- >0;)if(o=n[r],t===o.toLowerCase())return o;return null}const R="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,N=e=>!f(e)&&e!==R;const P=(I="undefined"!=typeof Uint8Array&&s(Uint8Array),e=>I&&e instanceof I);var I;const M=u("HTMLFormElement"),L=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),F=u("RegExp"),$=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),o={};A(n,((n,r)=>{let s;!1!==(s=t(n,r,e))&&(o[r]=s||n)})),Object.defineProperties(e,o)};const D=u("AsyncFunction"),B=(U="function"==typeof setImmediate,V=g(R.postMessage),U?setImmediate:V?(q=`axios@${Math.random()}`,H=[],R.addEventListener("message",(({source:e,data:t})=>{e===R&&t===q&&H.length&&H.shift()()}),!1),e=>{H.push(e),R.postMessage(q,"*")}):e=>setTimeout(e));var U,V,q,H;const z="undefined"!=typeof queueMicrotask?queueMicrotask.bind(R):"undefined"!=typeof process&&process.nextTick||B;t.default={isArray:p,isArrayBuffer:h,isBuffer:function(e){return null!==e&&!f(e)&&null!==e.constructor&&!f(e.constructor)&&g(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||g(e.append)&&("formdata"===(t=l(e))||"object"===t&&g(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&h(e.buffer),t},isString:m,isNumber:v,isBoolean:e=>!0===e||!1===e,isObject:y,isPlainObject:b,isReadableStream:C,isRequest:E,isResponse:j,isHeaders:T,isUndefined:f,isDate:_,isFile:x,isBlob:S,isRegExp:F,isFunction:g,isStream:e=>y(e)&&g(e.pipe),isURLSearchParams:k,isTypedArray:P,isFileList:w,forEach:A,merge:function e(){const{caseless:t}=N(this)&&this||{},n={},o=(o,r)=>{const s=t&&O(n,r)||r;b(n[s])&&b(o)?n[s]=e(n[s],o):b(o)?n[s]=e({},o):p(o)?n[s]=o.slice():n[s]=o};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&A(arguments[e],o);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(A(t,((t,r)=>{n&&g(t)?e[r]=(0,o.default)(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,o)=>{e.prototype=Object.create(t.prototype,o),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,o)=>{let r,i,a;const l={};if(t=t||{},null==e)return t;do{for(r=Object.getOwnPropertyNames(e),i=r.length;i-- >0;)a=r[i],o&&!o(a,e,t)||l[a]||(t[a]=e[a],l[a]=!0);e=!1!==n&&s(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:l,kindOfTest:u,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const o=e.indexOf(t,n);return-1!==o&&o===n},toArray:e=>{if(!e)return null;if(p(e))return e;let t=e.length;if(!v(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[i]).call(e);let o;for(;(o=n.next())&&!o.done;){const n=o.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const o=[];for(;null!==(n=e.exec(t));)o.push(n);return o},isHTMLForm:M,hasOwnProperty:L,hasOwnProp:L,reduceDescriptors:$,freezeMethods:e=>{$(e,((t,n)=>{if(g(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const o=e[n];g(o)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},o=e=>{e.forEach((e=>{n[e]=!0}))};return p(e)?o(e):o(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>null!=e&&Number.isFinite(e=+e)?e:t,findKey:O,global:R,isContextDefined:N,isSpecCompliantForm:function(e){return!!(e&&g(e.append)&&"FormData"===e[a]&&e[i])},toJSONObject:e=>{const t=new Array(10),n=(e,o)=>{if(y(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[o]=e;const r=p(e)?[]:{};return A(e,((e,t)=>{const s=n(e,o+1);!f(s)&&(r[t]=s)})),t[o]=void 0,r}}return e};return n(e,0)},isAsyncFn:D,isThenable:e=>e&&(y(e)||g(e))&&g(e.then)&&g(e.catch),setImmediate:B,asap:z,isIterable:e=>null!=e&&g(e[i])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/AppSingleGuide.vue?vue&type=script&lang=js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/AppSingleGuide.vue?vue&type=script&lang=js ***!
  \********************************************************************************************************************************************************************************/function(e,t,n){n.r(t);var o=n(/*! ./components/NavigationMenu.vue */"./assets/js/components/NavigationMenu.vue"),r=n(/*! ./pages/SinglePostGoogleMap.vue */"./assets/js/pages/SinglePostGoogleMap.vue"),s=n(/*! ./components/Footer.vue */"./assets/js/components/Footer.vue");t.default={components:{navigation:o.default,singlepostgooglemap:r.default,mainfooter:s.default}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=script&lang=js":
/*!***********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=script&lang=js ***!
  \***********************************************************************************************************************************************************************************/function(e,t,n){n.r(t),t.default={name:"Main Footer",data(){return{local_data_primary_menu_footer:theme_vars.menu_footer,mobile:!0,mobileFooter:null,windowWidth:null}},created(){window.addEventListener("resize",this.checkScreen),this.checkScreen()},mounted(){document.addEventListener("click",this.handleClickOutsideDropdownMenu)},beforeUnmount(){document.removeEventListener("click",this.handleClickOutsideDropdownMenu)},methods:{togglemobileFooter(){this.mobileFooter=!this.mobileFooter},checkScreen(){this.windowWidth=window.innerWidth,this.windowWidth<=750?this.mobile=!0:(this.mobile=!1,this.mobileFooter=!1)},handleClickOutsideDropdownMenu(e){"mobile-nav"!==e.target.id&&"toggle-icon"!==e.target.id&&"link"!==e.target.className&&"link-wrapper"!==e.target.className&&(this.mobileFooter=!1)}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=script&lang=js":
/*!*******************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=script&lang=js ***!
  \*******************************************************************************************************************************************************************************************/function(e,t,n){n.r(t),t.default={name:"Main Nav",data(){return{local_data_primary_menu:theme_vars.menu,mobile:!0,mobileNav:null,mobileNavIsOpen:!1,windowWidth:null}},created(){window.addEventListener("resize",this.checkScreen),this.checkScreen()},methods:{toggleMobileNav(){this.mobileNavIsOpen=!this.mobileNavIsOpen,this.mobileNav=!this.mobileNav},checkScreen(){this.windowWidth=window.innerWidth,this.windowWidth<=750?this.mobile=!0:(this.mobile=!1,this.mobileNav=!1)}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=script&lang=js":
/*!*******************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=script&lang=js ***!
  \*******************************************************************************************************************************************************************************************/function(e,t,n){n.r(t);var o=n(/*! vue3-google-map */"./node_modules/vue3-google-map/dist/index.mjs"),r=n(/*! axios */"./node_modules/axios/lib/axios.js");t.default={name:"GoogleMapComponent",components:{GoogleMap:o.GoogleMap,Marker:o.Marker,InfoWindow:o.InfoWindow},data(){return{local_data_post_id:theme_vars.current_post_id,post:null,YOUR_GOOGLE_MAPS_API_KEY:"AIzaSyDgYeoslPIi0_0ttWCFbtQGdNTmT24ktfA",title:null,address:"1150 E Arkansas Ave, Denver, CO 80210, USA",center:null,loading:!1,mapZoom:10,infoWindowPosition:{lat:null,lng:null},infoWindowOpened:!1,selectedMarker:null}},async created(){this.loading=!0;const e=(await r.default.get(`/wp-json/wp/v2/guides/${this.local_data_post_id}`)).data;this.center={lat:e.acf.guides_location.lat,lng:e.acf.guides_location.lng},this.post=e,this.loading=!1},mounted(){},methods:{openInfoWindow(){this.infoWindowOpened=!0},closeInfoWindow(){this.infoWindowOpened=!1},get_title(e){return e.replace("&#8211;","-").replace("&amp;","&")},getGoogleMapsDirectionsLinke(){return`https://www.google.com/maps/dir/?api=1&destination=${this.address}`}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/AppSingleGuide.vue?vue&type=template&id=1ec5b7db":
/*!************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/AppSingleGuide.vue?vue&type=template&id=1ec5b7db ***!
  \************************************************************************************************************************************************************************************************************************************************************/function(e,t,n){n.r(t),n.d(t,{render:function(){return r}});var o=n(/*! vue */"./node_modules/vue/dist/vue.esm-browser.js");function r(e,t,n,r,s,i){const a=(0,o.resolveComponent)("navigation"),l=(0,o.resolveComponent)("singlepostgooglemap"),c=(0,o.resolveComponent)("mainfooter");return(0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,null,[(0,o.createVNode)(a),(0,o.createVNode)(l),(0,o.createVNode)(c)],64)}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=template&id=e4181508&scoped=true":
/*!***************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=template&id=e4181508&scoped=true ***!
  \***************************************************************************************************************************************************************************************************************************************************************************/function(e,t,n){n.r(t),n.d(t,{render:function(){return a}});var o=n(/*! vue */"./node_modules/vue/dist/vue.esm-browser.js");const r={class:"footer"},s={class:"navigation"},i=["href"];function a(e,t,n,a,l,c){return(0,o.openBlock)(),(0,o.createElementBlock)("div",r,[t[0]||(t[0]=(0,o.createElementVNode)("p",null," Copyright © 2025 Opened Range. All Rights Reserved.",-1)),(0,o.createElementVNode)("ul",s,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(l.local_data_primary_menu_footer,((e,t)=>((0,o.openBlock)(),(0,o.createElementBlock)("li",null,[(0,o.createElementVNode)("a",{class:"link-light link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover",href:e.url,target:"",rel:"noopener noreferrer"},(0,o.toDisplayString)(e.title),9,i)])))),256))])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true":
/*!***********************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=template&id=18a31474&scoped=true ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************/function(e,t,n){n.r(t),n.d(t,{render:function(){return u}});var o=n(/*! vue */"./node_modules/vue/dist/vue.esm-browser.js");const r={if:"true"},s={class:"navigation"},i=["href"],a={class:"dropdown-nav"},l={class:"link-rapper"},c=["href"];function u(e,t,n,u,d,p){return(0,o.openBlock)(),(0,o.createElementBlock)("div",r,[(0,o.createElementVNode)("header",null,[(0,o.createElementVNode)("nav",null,[t[1]||(t[1]=(0,o.createElementVNode)("a",{href:"/",target:"",class:"flex items-center text-white !no-underline"},[(0,o.createElementVNode)("img",{class:"w-13 h-13 mr-4",src:"/wp-content/themes/timber-starter-theme/assets/images/official-logo-v1-green.webp",alt:"Opened Range Logo"}),(0,o.createElementVNode)("div",{class:"fit-size h-auto font-bold"},"Opened Range")],-1)),(0,o.withDirectives)((0,o.createElementVNode)("ul",s,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(d.local_data_primary_menu,((e,t)=>((0,o.openBlock)(),(0,o.createElementBlock)("li",null,[(0,o.createElementVNode)("a",{class:"link-light link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover",href:e.url,target:"",rel:"noopener noreferrer"},(0,o.toDisplayString)(e.title),9,i)])))),256))],512),[[o.vShow,!d.mobile]]),(0,o.withDirectives)((0,o.createElementVNode)("div",{class:"icons",onClick:t[0]||(t[0]=(...e)=>p.toggleMobileNav&&p.toggleMobileNav(...e)),id:"toggle-icon"},[(0,o.createElementVNode)("i",{class:(0,o.normalizeClass)(["fa-solid fa-bars",{"icon-hide":d.mobileNavIsOpen}])},null,2),(0,o.createElementVNode)("i",{class:(0,o.normalizeClass)(["fa-solid fa-xmark",{"icon-active":d.mobileNavIsOpen}])},null,2)],512),[[o.vShow,d.mobile]]),(0,o.createVNode)(o.Transition,{id:"mobile-nav",name:"mobile-nav",persisted:""},{default:(0,o.withCtx)((()=>[(0,o.withDirectives)((0,o.createElementVNode)("ul",a,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(d.local_data_primary_menu,((e,t)=>((0,o.openBlock)(),(0,o.createElementBlock)("li",l,[(0,o.createElementVNode)("a",{class:"fit-size h-auto font-bold no-underline hover:underline text-black",href:e.url,target:"",rel:"noopener noreferrer"},(0,o.toDisplayString)(e.title),9,c)])))),256))],512),[[o.vShow,d.mobileNav]])])),_:1})])])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true":
/*!***********************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=template&id=6b912c10&scoped=true ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************/function(e,t,n){n.r(t),n.d(t,{render:function(){return b}});var o=n(/*! vue */"./node_modules/vue/dist/vue.esm-browser.js");const r={key:0,class:"max-w-7xl max-xl:pr-4 max-xl:pl-4 ml-auto mr-auto pt-4 pb-4"},s={class:"w-1/1"},i={class:"article-content"},a=["textContent"],l={class:"article-body"},c={class:"block mb-3",href:"{{ googleDirectionLink  }} ",target:"_blank",rel:"noopener noreferrer"},u={key:0},d={key:1},p={key:2},f={key:3,class:"block mb-3",href:"{{ post.acf.website }}",target:"_blank",rel:"noopener noreferrer"},h={key:4},m={key:5},g={id:"content"},v=["textContent"],y=["href"];function b(e,t,n,b,_,x){const S=(0,o.resolveComponent)("InfoWindow"),w=(0,o.resolveComponent)("Marker"),k=(0,o.resolveComponent)("GoogleMap");return _.loading?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createElementBlock)("div",r,[(0,o.createElementVNode)("article",s,[(0,o.createElementVNode)("section",i,[(0,o.createElementVNode)("h1",{class:"article-h1",textContent:(0,o.toDisplayString)(x.get_title(_.post.title.rendered))},null,8,a),(0,o.createElementVNode)("div",l,[(0,o.createElementVNode)("a",c," Address: "+(0,o.toDisplayString)(_.post.acf.guides_location.address),1),_.post.acf.registration?((0,o.openBlock)(),(0,o.createElementBlock)("p",u,"Registration: "+(0,o.toDisplayString)(_.post.acf.registration),1)):(0,o.createCommentVNode)("v-if",!0),_.post.acf.phone?((0,o.openBlock)(),(0,o.createElementBlock)("p",d,"Phone: "+(0,o.toDisplayString)(_.post.acf.phone),1)):(0,o.createCommentVNode)("v-if",!0),_.post.acf.hunt_units?((0,o.openBlock)(),(0,o.createElementBlock)("p",p,"Hunt Units: "+(0,o.toDisplayString)(_.post.acf.hunt_units),1)):(0,o.createCommentVNode)("v-if",!0),_.post.acf.website?((0,o.openBlock)(),(0,o.createElementBlock)("a",f,(0,o.toDisplayString)(_.post.acf.website),1)):(0,o.createCommentVNode)("v-if",!0),_.post.acf.openedrange_verified?((0,o.openBlock)(),(0,o.createElementBlock)("div",h,t[0]||(t[0]=[(0,o.createElementVNode)("p",null,"OpenedRange Verified: Yes",-1)]))):((0,o.openBlock)(),(0,o.createElementBlock)("div",m,t[1]||(t[1]=[(0,o.createElementVNode)("p",null,"OpenedRange Verified: No",-1)])))])])]),(0,o.createVNode)(k,{"api-key":_.YOUR_GOOGLE_MAPS_API_KEY,style:{width:"100%",height:"500px"},center:_.center,zoom:15},{default:(0,o.withCtx)((()=>[(0,o.createVNode)(w,{options:{position:_.center}},{default:(0,o.withCtx)((()=>[(0,o.createVNode)(S,null,{default:(0,o.withCtx)((()=>[(0,o.createElementVNode)("div",g,[t[2]||(t[2]=(0,o.createElementVNode)("div",{id:"siteNotice"},null,-1)),(0,o.createElementVNode)("h3",{id:"firstHeading",class:"firstHeading",textContent:(0,o.toDisplayString)(x.get_title(_.post.title.rendered))},null,8,v),(0,o.createElementVNode)("a",{href:x.getGoogleMapsDirectionsLinke(),target:"_blank",rel:"noopener noreferrer"},"Directions",8,y)])])),_:1})])),_:1},8,["options"])])),_:1},8,["api-key","center"])]))}},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/Footer.vue?vue&type=style&index=0&id=e4181508&lang=scss&scoped=true ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/function(e,t,n){n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/components/NavigationMenu.vue?vue&type=style&index=0&id=18a31474&lang=scss&scoped=true ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/function(e,t,n){n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-1.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-1.use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-1.use[3]!./node_modules/vue-loader/dist/index.js??ruleSet[0]!./assets/js/pages/SinglePostGoogleMap.vue?vue&type=style&index=0&id=6b912c10&lang=scss&scoped=true ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/function(e,t,n){n.r(t)},"./node_modules/vue-loader/dist/exportHelper.js":
/*!******************************************************!*\
  !*** ./node_modules/vue-loader/dist/exportHelper.js ***!
  \******************************************************/function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e,t)=>{const n=e.__vccOpts||e;for(const[e,o]of t)n[e]=o;return n}},"./node_modules/vue/dist/vue.esm-browser.js":
/*!**************************************************!*\
  !*** ./node_modules/vue/dist/vue.esm-browser.js ***!
  \**************************************************/function(e,t,n){
/**
* vue v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
/*! #__NO_SIDE_EFFECTS__ */
function o(e){const t=Object.create(null);for(const n of e.split(","))t[n]=1;return e=>e in t}n.r(t),n.d(t,{BaseTransition:function(){return Ko},BaseTransitionPropsValidators:function(){return zo},Comment:function(){return fa},DeprecationTypes:function(){return Ol},EffectScope:function(){return Se},ErrorCodes:function(){return On},ErrorTypeStrings:function(){return kl},Fragment:function(){return da},KeepAlive:function(){return Ar},ReactiveEffect:function(){return je},Static:function(){return ha},Suspense:function(){return ra},Teleport:function(){return $o},Text:function(){return pa},TrackOpTypes:function(){return hn},Transition:function(){return Vl},TransitionGroup:function(){return Bc},TriggerOpTypes:function(){return mn},VueElement:function(){return Nc},assertNumber:function(){return An},callWithAsyncErrorHandling:function(){return Pn},callWithErrorHandling:function(){return Nn},camelize:function(){return N},capitalize:function(){return M},cloneVNode:function(){return Pa},compatUtils:function(){return Al},compile:function(){return Th},computed:function(){return vl},createApp:function(){return vu},createBlock:function(){return ka},createCommentVNode:function(){return Fa},createElementBlock:function(){return wa},createElementVNode:function(){return Oa},createHydrationRenderer:function(){return ki},createPropsRestProxy:function(){return Ts},createRenderer:function(){return wi},createSSRApp:function(){return yu},createSlots:function(){return rs},createStaticVNode:function(){return La},createTextVNode:function(){return Ma},createVNode:function(){return Ra},customRef:function(){return an},defineAsyncComponent:function(){return Er},defineComponent:function(){return tr},defineCustomElement:function(){return Ac},defineEmits:function(){return gs},defineExpose:function(){return vs},defineModel:function(){return _s},defineOptions:function(){return ys},defineProps:function(){return ms},defineSSRCustomElement:function(){return Oc},defineSlots:function(){return bs},devtools:function(){return Cl},effect:function(){return Be},effectScope:function(){return we},getCurrentInstance:function(){return Ga},getCurrentScope:function(){return ke},getCurrentWatcher:function(){return bn},getTransitionRawChildren:function(){return er},guardReactiveProps:function(){return Na},h:function(){return yl},handleError:function(){return In},hasInjectionContext:function(){return Ks},hydrate:function(){return gu},hydrateOnIdle:function(){return xr},hydrateOnInteraction:function(){return kr},hydrateOnMediaQuery:function(){return wr},hydrateOnVisible:function(){return Sr},initCustomFormatter:function(){return bl},initDirectivesForSSR:function(){return ku},inject:function(){return Gs},isMemoSame:function(){return xl},isProxy:function(){return Ht},isReactive:function(){return Ut},isReadonly:function(){return Vt},isRef:function(){return Jt},isRuntimeOnly:function(){return al},isShallow:function(){return qt},isVNode:function(){return Ca},markRaw:function(){return Wt},mergeDefaults:function(){return Es},mergeModels:function(){return js},mergeProps:function(){return Ua},nextTick:function(){return qn},normalizeClass:function(){return Q},normalizeProps:function(){return ee},normalizeStyle:function(){return K},onActivated:function(){return Rr},onBeforeMount:function(){return Dr},onBeforeUnmount:function(){return qr},onBeforeUpdate:function(){return Ur},onDeactivated:function(){return Nr},onErrorCaptured:function(){return Kr},onMounted:function(){return Br},onRenderTracked:function(){return Gr},onRenderTriggered:function(){return Wr},onScopeDispose:function(){return Ce},onServerPrefetch:function(){return zr},onUnmounted:function(){return Hr},onUpdated:function(){return Vr},onWatcherCleanup:function(){return _n},openBlock:function(){return va},popScopeId:function(){return wo},provide:function(){return Ws},proxyRefs:function(){return rn},pushScopeId:function(){return So},queuePostFlushCb:function(){return Wn},reactive:function(){return Lt},readonly:function(){return $t},ref:function(){return Zt},registerRuntimeCompiler:function(){return il},render:function(){return mu},renderList:function(){return os},renderSlot:function(){return ss},resolveComponent:function(){return Xr},resolveDirective:function(){return es},resolveDynamicComponent:function(){return Qr},resolveFilter:function(){return Tl},resolveTransitionHooks:function(){return Zo},setBlockTracking:function(){return xa},setDevtoolsHook:function(){return El},setTransitionHooks:function(){return Qo},shallowReactive:function(){return Ft},shallowReadonly:function(){return Dt},shallowRef:function(){return Xt},ssrContextKey:function(){return Ni},ssrUtils:function(){return jl},stop:function(){return Ue},toDisplayString:function(){return ge},toHandlerKey:function(){return L},toHandlers:function(){return as},toRaw:function(){return zt},toRef:function(){return dn},toRefs:function(){return ln},toValue:function(){return nn},transformVNodeArgs:function(){return ja},triggerRef:function(){return en},unref:function(){return tn},useAttrs:function(){return ws},useCssModule:function(){return Mc},useCssVars:function(){return ac},useHost:function(){return Pc},useId:function(){return nr},useModel:function(){return Ui},useSSRContext:function(){return Pi},useShadowRoot:function(){return Ic},useSlots:function(){return Ss},useTemplateRef:function(){return sr},useTransitionState:function(){return qo},vModelCheckbox:function(){return Jc},vModelDynamic:function(){return nu},vModelRadio:function(){return Xc},vModelSelect:function(){return Yc},vModelText:function(){return Kc},vShow:function(){return rc},version:function(){return Sl},warn:function(){return wl},watch:function(){return Fi},watchEffect:function(){return Ii},watchPostEffect:function(){return Mi},watchSyncEffect:function(){return Li},withAsyncContext:function(){return As},withCtx:function(){return Co},withDefaults:function(){return xs},withDirectives:function(){return jo},withKeys:function(){return cu},withMemo:function(){return _l},withModifiers:function(){return au},withScopeId:function(){return ko}});const r=Object.freeze({}),s=Object.freeze([]),i=()=>{},a=()=>!1,l=e=>111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),c=e=>e.startsWith("onUpdate:"),u=Object.assign,d=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},p=Object.prototype.hasOwnProperty,f=(e,t)=>p.call(e,t),h=Array.isArray,m=e=>"[object Map]"===k(e),g=e=>"[object Set]"===k(e),v=e=>"[object Date]"===k(e),y=e=>"function"==typeof e,b=e=>"string"==typeof e,_=e=>"symbol"==typeof e,x=e=>null!==e&&"object"==typeof e,S=e=>(x(e)||y(e))&&y(e.then)&&y(e.catch),w=Object.prototype.toString,k=e=>w.call(e),C=e=>k(e).slice(8,-1),E=e=>"[object Object]"===k(e),j=e=>b(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,T=o(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),A=o("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),O=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},R=/-(\w)/g,N=O((e=>e.replace(R,((e,t)=>t?t.toUpperCase():"")))),P=/\B([A-Z])/g,I=O((e=>e.replace(P,"-$1").toLowerCase())),M=O((e=>e.charAt(0).toUpperCase()+e.slice(1))),L=O((e=>e?`on${M(e)}`:"")),F=(e,t)=>!Object.is(e,t),$=(e,...t)=>{for(let n=0;n<e.length;n++)e[n](...t)},D=(e,t,n,o=!1)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:o,value:n})},B=e=>{const t=parseFloat(e);return isNaN(t)?e:t},U=e=>{const t=b(e)?Number(e):NaN;return isNaN(t)?e:t};let V;const q=()=>V||(V="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{});const H={1:"TEXT",2:"CLASS",4:"STYLE",8:"PROPS",16:"FULL_PROPS",32:"NEED_HYDRATION",64:"STABLE_FRAGMENT",128:"KEYED_FRAGMENT",256:"UNKEYED_FRAGMENT",512:"NEED_PATCH",1024:"DYNAMIC_SLOTS",2048:"DEV_ROOT_FRAGMENT",[-1]:"HOISTED",[-2]:"BAIL"},z={1:"STABLE",2:"DYNAMIC",3:"FORWARDED"},W=o("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol"),G=2;function K(e){if(h(e)){const t={};for(let n=0;n<e.length;n++){const o=e[n],r=b(o)?Y(o):K(o);if(r)for(const e in r)t[e]=r[e]}return t}if(b(e)||x(e))return e}const J=/;(?![^(]*\))/g,Z=/:([^]+)/,X=/\/\*[^]*?\*\//g;function Y(e){const t={};return e.replace(X,"").split(J).forEach((e=>{if(e){const n=e.split(Z);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function Q(e){let t="";if(b(e))t=e;else if(h(e))for(let n=0;n<e.length;n++){const o=Q(e[n]);o&&(t+=o+" ")}else if(x(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function ee(e){if(!e)return null;let{class:t,style:n}=e;return t&&!b(t)&&(e.class=Q(t)),n&&(e.style=K(n)),e}const te=o("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),ne=o("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),oe=o("annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics"),re=o("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr"),se="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",ie=o(se),ae=o(se+",async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");function le(e){return!!e||""===e}const ce=o("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap"),ue=o("xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan");const de=/[ !"#$%&'()*+,./:;<=>?@[\\\]^`{|}~]/g;function pe(e,t){return e.replace(de,(e=>`\\${e}`))}function fe(e,t){if(e===t)return!0;let n=v(e),o=v(t);if(n||o)return!(!n||!o)&&e.getTime()===t.getTime();if(n=_(e),o=_(t),n||o)return e===t;if(n=h(e),o=h(t),n||o)return!(!n||!o)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let o=0;n&&o<e.length;o++)n=fe(e[o],t[o]);return n}(e,t);if(n=x(e),o=x(t),n||o){if(!n||!o)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const o=e.hasOwnProperty(n),r=t.hasOwnProperty(n);if(o&&!r||!o&&r||!fe(e[n],t[n]))return!1}}return String(e)===String(t)}function he(e,t){return e.findIndex((e=>fe(e,t)))}const me=e=>!(!e||!0!==e.__v_isRef),ge=e=>b(e)?e:null==e?"":h(e)||x(e)&&(e.toString===w||!y(e.toString))?me(e)?ge(e.value):JSON.stringify(e,ve,2):String(e),ve=(e,t)=>me(t)?ve(e,t.value):m(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n],o)=>(e[ye(t,o)+" =>"]=n,e)),{})}:g(t)?{[`Set(${t.size})`]:[...t.values()].map((e=>ye(e)))}:_(t)?ye(t):!x(t)||h(t)||E(t)?t:String(t),ye=(e,t="")=>{var n;return _(e)?`Symbol(${null!=(n=e.description)?n:t})`:e};function be(e,...t){}let _e,xe;class Se{constructor(e=!1){this.detached=e,this._active=!0,this._on=0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=_e,!e&&_e&&(this.index=(_e.scopes||(_e.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){let e,t;if(this._isPaused=!0,this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].pause();for(e=0,t=this.effects.length;e<t;e++)this.effects[e].pause()}}resume(){if(this._active&&this._isPaused){let e,t;if(this._isPaused=!1,this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].resume();for(e=0,t=this.effects.length;e<t;e++)this.effects[e].resume()}}run(e){if(this._active){const t=_e;try{return _e=this,e()}finally{_e=t}}}on(){1===++this._on&&(this.prevScope=_e,_e=this)}off(){this._on>0&&0===--this._on&&(_e=this.prevScope,this.prevScope=void 0)}stop(e){if(this._active){let t,n;for(this._active=!1,t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(this.effects.length=0,t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.cleanups.length=0,this.scopes){for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0}}}function we(e){return new Se(e)}function ke(){return _e}function Ce(e,t=!1){_e&&_e.cleanups.push(e)}const Ee=new WeakSet;class je{constructor(e){this.fn=e,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,_e&&_e.active&&_e.effects.push(this)}pause(){this.flags|=64}resume(){64&this.flags&&(this.flags&=-65,Ee.has(this)&&(Ee.delete(this),this.trigger()))}notify(){2&this.flags&&!(32&this.flags)||8&this.flags||Re(this)}run(){if(!(1&this.flags))return this.fn();this.flags|=2,We(this),Ie(this);const e=xe,t=Ve;xe=this,Ve=!0;try{return this.fn()}finally{Me(this),xe=e,Ve=t,this.flags&=-3}}stop(){if(1&this.flags){for(let e=this.deps;e;e=e.nextDep)$e(e);this.deps=this.depsTail=void 0,We(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){64&this.flags?Ee.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){Le(this)&&this.run()}get dirty(){return Le(this)}}let Te,Ae,Oe=0;function Re(e,t=!1){if(e.flags|=8,t)return e.next=Ae,void(Ae=e);e.next=Te,Te=e}function Ne(){Oe++}function Pe(){if(--Oe>0)return;if(Ae){let e=Ae;for(Ae=void 0;e;){const t=e.next;e.next=void 0,e.flags&=-9,e=t}}let e;for(;Te;){let t=Te;for(Te=void 0;t;){const n=t.next;if(t.next=void 0,t.flags&=-9,1&t.flags)try{t.trigger()}catch(t){e||(e=t)}t=n}}if(e)throw e}function Ie(e){for(let t=e.deps;t;t=t.nextDep)t.version=-1,t.prevActiveLink=t.dep.activeLink,t.dep.activeLink=t}function Me(e){let t,n=e.depsTail,o=n;for(;o;){const e=o.prevDep;-1===o.version?(o===n&&(n=e),$e(o),De(o)):t=o,o.dep.activeLink=o.prevActiveLink,o.prevActiveLink=void 0,o=e}e.deps=t,e.depsTail=n}function Le(e){for(let t=e.deps;t;t=t.nextDep)if(t.dep.version!==t.version||t.dep.computed&&(Fe(t.dep.computed)||t.dep.version!==t.version))return!0;return!!e._dirty}function Fe(e){if(4&e.flags&&!(16&e.flags))return;if(e.flags&=-17,e.globalVersion===Ge)return;if(e.globalVersion=Ge,!e.isSSR&&128&e.flags&&(!e.deps&&!e._dirty||!Le(e)))return;e.flags|=2;const t=e.dep,n=xe,o=Ve;xe=e,Ve=!0;try{Ie(e);const n=e.fn(e._value);(0===t.version||F(n,e._value))&&(e.flags|=128,e._value=n,t.version++)}catch(e){throw t.version++,e}finally{xe=n,Ve=o,Me(e),e.flags&=-3}}function $e(e,t=!1){const{dep:n,prevSub:o,nextSub:r}=e;if(o&&(o.nextSub=r,e.prevSub=void 0),r&&(r.prevSub=o,e.nextSub=void 0),n.subsHead===e&&(n.subsHead=r),n.subs===e&&(n.subs=o,!o&&n.computed)){n.computed.flags&=-5;for(let e=n.computed.deps;e;e=e.nextDep)$e(e,!0)}t||--n.sc||!n.map||n.map.delete(n.key)}function De(e){const{prevDep:t,nextDep:n}=e;t&&(t.nextDep=n,e.prevDep=void 0),n&&(n.prevDep=t,e.nextDep=void 0)}function Be(e,t){e.effect instanceof je&&(e=e.effect.fn);const n=new je(e);t&&u(n,t);try{n.run()}catch(e){throw n.stop(),e}const o=n.run.bind(n);return o.effect=n,o}function Ue(e){e.effect.stop()}let Ve=!0;const qe=[];function He(){qe.push(Ve),Ve=!1}function ze(){const e=qe.pop();Ve=void 0===e||e}function We(e){const{cleanup:t}=e;if(e.cleanup=void 0,t){const e=xe;xe=void 0;try{t()}finally{xe=e}}}let Ge=0;class Ke{constructor(e,t){this.sub=e,this.dep=t,this.version=t.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class Je{constructor(e){this.computed=e,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0,this.subsHead=void 0}track(e){if(!xe||!Ve||xe===this.computed)return;let t=this.activeLink;if(void 0===t||t.sub!==xe)t=this.activeLink=new Ke(xe,this),xe.deps?(t.prevDep=xe.depsTail,xe.depsTail.nextDep=t,xe.depsTail=t):xe.deps=xe.depsTail=t,Ze(t);else if(-1===t.version&&(t.version=this.version,t.nextDep)){const e=t.nextDep;e.prevDep=t.prevDep,t.prevDep&&(t.prevDep.nextDep=e),t.prevDep=xe.depsTail,t.nextDep=void 0,xe.depsTail.nextDep=t,xe.depsTail=t,xe.deps===t&&(xe.deps=e)}return xe.onTrack&&xe.onTrack(u({effect:xe},e)),t}trigger(e){this.version++,Ge++,this.notify(e)}notify(e){Ne();try{for(let t=this.subsHead;t;t=t.nextSub)!t.sub.onTrigger||8&t.sub.flags||t.sub.onTrigger(u({effect:t.sub},e));for(let e=this.subs;e;e=e.prevSub)e.sub.notify()&&e.sub.dep.notify()}finally{Pe()}}}function Ze(e){if(e.dep.sc++,4&e.sub.flags){const t=e.dep.computed;if(t&&!e.dep.subs){t.flags|=20;for(let e=t.deps;e;e=e.nextDep)Ze(e)}const n=e.dep.subs;n!==e&&(e.prevSub=n,n&&(n.nextSub=e)),void 0===e.dep.subsHead&&(e.dep.subsHead=e),e.dep.subs=e}}const Xe=new WeakMap,Ye=Symbol("Object iterate"),Qe=Symbol("Map keys iterate"),et=Symbol("Array iterate");function tt(e,t,n){if(Ve&&xe){let o=Xe.get(e);o||Xe.set(e,o=new Map);let r=o.get(n);r||(o.set(n,r=new Je),r.map=o,r.key=n),r.track({target:e,type:t,key:n})}}function nt(e,t,n,o,r,s){const i=Xe.get(e);if(!i)return void Ge++;const a=i=>{i&&i.trigger({target:e,type:t,key:n,newValue:o,oldValue:r,oldTarget:s})};if(Ne(),"clear"===t)i.forEach(a);else{const r=h(e),s=r&&j(n);if(r&&"length"===n){const e=Number(o);i.forEach(((t,n)=>{("length"===n||n===et||!_(n)&&n>=e)&&a(t)}))}else switch((void 0!==n||i.has(void 0))&&a(i.get(n)),s&&a(i.get(et)),t){case"add":r?s&&a(i.get("length")):(a(i.get(Ye)),m(e)&&a(i.get(Qe)));break;case"delete":r||(a(i.get(Ye)),m(e)&&a(i.get(Qe)));break;case"set":m(e)&&a(i.get(Ye))}}Pe()}function ot(e){const t=zt(e);return t===e?t:(tt(t,"iterate",et),qt(e)?t:t.map(Gt))}function rt(e){return tt(e=zt(e),"iterate",et),e}const st={__proto__:null,[Symbol.iterator](){return it(this,Symbol.iterator,Gt)},concat(...e){return ot(this).concat(...e.map((e=>h(e)?ot(e):e)))},entries(){return it(this,"entries",(e=>(e[1]=Gt(e[1]),e)))},every(e,t){return lt(this,"every",e,t,void 0,arguments)},filter(e,t){return lt(this,"filter",e,t,(e=>e.map(Gt)),arguments)},find(e,t){return lt(this,"find",e,t,Gt,arguments)},findIndex(e,t){return lt(this,"findIndex",e,t,void 0,arguments)},findLast(e,t){return lt(this,"findLast",e,t,Gt,arguments)},findLastIndex(e,t){return lt(this,"findLastIndex",e,t,void 0,arguments)},forEach(e,t){return lt(this,"forEach",e,t,void 0,arguments)},includes(...e){return ut(this,"includes",e)},indexOf(...e){return ut(this,"indexOf",e)},join(e){return ot(this).join(e)},lastIndexOf(...e){return ut(this,"lastIndexOf",e)},map(e,t){return lt(this,"map",e,t,void 0,arguments)},pop(){return dt(this,"pop")},push(...e){return dt(this,"push",e)},reduce(e,...t){return ct(this,"reduce",e,t)},reduceRight(e,...t){return ct(this,"reduceRight",e,t)},shift(){return dt(this,"shift")},some(e,t){return lt(this,"some",e,t,void 0,arguments)},splice(...e){return dt(this,"splice",e)},toReversed(){return ot(this).toReversed()},toSorted(e){return ot(this).toSorted(e)},toSpliced(...e){return ot(this).toSpliced(...e)},unshift(...e){return dt(this,"unshift",e)},values(){return it(this,"values",Gt)}};function it(e,t,n){const o=rt(e),r=o[t]();return o===e||qt(e)||(r._next=r.next,r.next=()=>{const e=r._next();return e.value&&(e.value=n(e.value)),e}),r}const at=Array.prototype;function lt(e,t,n,o,r,s){const i=rt(e),a=i!==e&&!qt(e),l=i[t];if(l!==at[t]){const t=l.apply(e,s);return a?Gt(t):t}let c=n;i!==e&&(a?c=function(t,o){return n.call(this,Gt(t),o,e)}:n.length>2&&(c=function(t,o){return n.call(this,t,o,e)}));const u=l.call(i,c,o);return a&&r?r(u):u}function ct(e,t,n,o){const r=rt(e);let s=n;return r!==e&&(qt(e)?n.length>3&&(s=function(t,o,r){return n.call(this,t,o,r,e)}):s=function(t,o,r){return n.call(this,t,Gt(o),r,e)}),r[t](s,...o)}function ut(e,t,n){const o=zt(e);tt(o,"iterate",et);const r=o[t](...n);return-1!==r&&!1!==r||!Ht(n[0])?r:(n[0]=zt(n[0]),o[t](...n))}function dt(e,t,n=[]){He(),Ne();const o=zt(e)[t].apply(e,n);return Pe(),ze(),o}const pt=o("__proto__,__v_isRef,__isVue"),ft=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(_));function ht(e){_(e)||(e=String(e));const t=zt(this);return tt(t,"has",e),t.hasOwnProperty(e)}class mt{constructor(e=!1,t=!1){this._isReadonly=e,this._isShallow=t}get(e,t,n){if("__v_skip"===t)return e.__v_skip;const o=this._isReadonly,r=this._isShallow;if("__v_isReactive"===t)return!o;if("__v_isReadonly"===t)return o;if("__v_isShallow"===t)return r;if("__v_raw"===t)return n===(o?r?Mt:It:r?Pt:Nt).get(e)||Object.getPrototypeOf(e)===Object.getPrototypeOf(n)?e:void 0;const s=h(e);if(!o){let e;if(s&&(e=st[t]))return e;if("hasOwnProperty"===t)return ht}const i=Reflect.get(e,t,Jt(e)?e:n);return(_(t)?ft.has(t):pt(t))?i:(o||tt(e,"get",t),r?i:Jt(i)?s&&j(t)?i:i.value:x(i)?o?$t(i):Lt(i):i)}}class gt extends mt{constructor(e=!1){super(!1,e)}set(e,t,n,o){let r=e[t];if(!this._isShallow){const t=Vt(r);if(qt(n)||Vt(n)||(r=zt(r),n=zt(n)),!h(e)&&Jt(r)&&!Jt(n))return!t&&(r.value=n,!0)}const s=h(e)&&j(t)?Number(t)<e.length:f(e,t),i=Reflect.set(e,t,n,Jt(e)?e:o);return e===zt(o)&&(s?F(n,r)&&nt(e,"set",t,n,r):nt(e,"add",t,n)),i}deleteProperty(e,t){const n=f(e,t),o=e[t],r=Reflect.deleteProperty(e,t);return r&&n&&nt(e,"delete",t,void 0,o),r}has(e,t){const n=Reflect.has(e,t);return _(t)&&ft.has(t)||tt(e,"has",t),n}ownKeys(e){return tt(e,"iterate",h(e)?"length":Ye),Reflect.ownKeys(e)}}class vt extends mt{constructor(e=!1){super(!0,e)}set(e,t){return String(t),!0}deleteProperty(e,t){return String(t),!0}}const yt=new gt,bt=new vt,_t=new gt(!0),xt=new vt(!0),St=e=>e,wt=e=>Reflect.getPrototypeOf(e);function kt(e){return function(...t){t[0]&&t[0];M(e),zt(this);return"delete"!==e&&("clear"===e?void 0:this)}}function Ct(e,t){const n={get(n){const o=this.__v_raw,r=zt(o),s=zt(n);e||(F(n,s)&&tt(r,"get",n),tt(r,"get",s));const{has:i}=wt(r),a=t?St:e?Kt:Gt;return i.call(r,n)?a(o.get(n)):i.call(r,s)?a(o.get(s)):void(o!==r&&o.get(n))},get size(){const t=this.__v_raw;return!e&&tt(zt(t),"iterate",Ye),Reflect.get(t,"size",t)},has(t){const n=this.__v_raw,o=zt(n),r=zt(t);return e||(F(t,r)&&tt(o,"has",t),tt(o,"has",r)),t===r?n.has(t):n.has(t)||n.has(r)},forEach(n,o){const r=this,s=r.__v_raw,i=zt(s),a=t?St:e?Kt:Gt;return!e&&tt(i,"iterate",Ye),s.forEach(((e,t)=>n.call(o,a(e),a(t),r)))}};u(n,e?{add:kt("add"),set:kt("set"),delete:kt("delete"),clear:kt("clear")}:{add(e){t||qt(e)||Vt(e)||(e=zt(e));const n=zt(this);return wt(n).has.call(n,e)||(n.add(e),nt(n,"add",e,e)),this},set(e,n){t||qt(n)||Vt(n)||(n=zt(n));const o=zt(this),{has:r,get:s}=wt(o);let i=r.call(o,e);i?Rt(o,r,e):(e=zt(e),i=r.call(o,e));const a=s.call(o,e);return o.set(e,n),i?F(n,a)&&nt(o,"set",e,n,a):nt(o,"add",e,n),this},delete(e){const t=zt(this),{has:n,get:o}=wt(t);let r=n.call(t,e);r?Rt(t,n,e):(e=zt(e),r=n.call(t,e));const s=o?o.call(t,e):void 0,i=t.delete(e);return r&&nt(t,"delete",e,void 0,s),i},clear(){const e=zt(this),t=0!==e.size,n=m(e)?new Map(e):new Set(e),o=e.clear();return t&&nt(e,"clear",void 0,void 0,n),o}});return["keys","values","entries",Symbol.iterator].forEach((o=>{n[o]=function(e,t,n){return function(...o){const r=this.__v_raw,s=zt(r),i=m(s),a="entries"===e||e===Symbol.iterator&&i,l="keys"===e&&i,c=r[e](...o),u=n?St:t?Kt:Gt;return!t&&tt(s,"iterate",l?Qe:Ye),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:a?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}(o,e,t)})),n}function Et(e,t){const n=Ct(e,t);return(t,o,r)=>"__v_isReactive"===o?!e:"__v_isReadonly"===o?e:"__v_raw"===o?t:Reflect.get(f(n,o)&&o in t?n:t,o,r)}const jt={get:Et(!1,!1)},Tt={get:Et(!1,!0)},At={get:Et(!0,!1)},Ot={get:Et(!0,!0)};function Rt(e,t,n){const o=zt(n);if(o!==n&&t.call(e,o)){C(e)}}const Nt=new WeakMap,Pt=new WeakMap,It=new WeakMap,Mt=new WeakMap;function Lt(e){return Vt(e)?e:Bt(e,!1,yt,jt,Nt)}function Ft(e){return Bt(e,!1,_t,Tt,Pt)}function $t(e){return Bt(e,!0,bt,At,It)}function Dt(e){return Bt(e,!0,xt,Ot,Mt)}function Bt(e,t,n,o,r){if(!x(e))return String(e),e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=(i=e).__v_skip||!Object.isExtensible(i)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}(C(i));var i;if(0===s)return e;const a=r.get(e);if(a)return a;const l=new Proxy(e,2===s?o:n);return r.set(e,l),l}function Ut(e){return Vt(e)?Ut(e.__v_raw):!(!e||!e.__v_isReactive)}function Vt(e){return!(!e||!e.__v_isReadonly)}function qt(e){return!(!e||!e.__v_isShallow)}function Ht(e){return!!e&&!!e.__v_raw}function zt(e){const t=e&&e.__v_raw;return t?zt(t):e}function Wt(e){return!f(e,"__v_skip")&&Object.isExtensible(e)&&D(e,"__v_skip",!0),e}const Gt=e=>x(e)?Lt(e):e,Kt=e=>x(e)?$t(e):e;function Jt(e){return!!e&&!0===e.__v_isRef}function Zt(e){return Yt(e,!1)}function Xt(e){return Yt(e,!0)}function Yt(e,t){return Jt(e)?e:new Qt(e,t)}class Qt{constructor(e,t){this.dep=new Je,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=t?e:zt(e),this._value=t?e:Gt(e),this.__v_isShallow=t}get value(){return this.dep.track({target:this,type:"get",key:"value"}),this._value}set value(e){const t=this._rawValue,n=this.__v_isShallow||qt(e)||Vt(e);e=n?e:zt(e),F(e,t)&&(this._rawValue=e,this._value=n?e:Gt(e),this.dep.trigger({target:this,type:"set",key:"value",newValue:e,oldValue:t}))}}function en(e){e.dep&&e.dep.trigger({target:e,type:"set",key:"value",newValue:e._value})}function tn(e){return Jt(e)?e.value:e}function nn(e){return y(e)?e():tn(e)}const on={get:(e,t,n)=>"__v_raw"===t?e:tn(Reflect.get(e,t,n)),set:(e,t,n,o)=>{const r=e[t];return Jt(r)&&!Jt(n)?(r.value=n,!0):Reflect.set(e,t,n,o)}};function rn(e){return Ut(e)?e:new Proxy(e,on)}class sn{constructor(e){this.__v_isRef=!0,this._value=void 0;const t=this.dep=new Je,{get:n,set:o}=e(t.track.bind(t),t.trigger.bind(t));this._get=n,this._set=o}get value(){return this._value=this._get()}set value(e){this._set(e)}}function an(e){return new sn(e)}function ln(e){Ht(e);const t=h(e)?new Array(e.length):{};for(const n in e)t[n]=pn(e,n);return t}class cn{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0,this._value=void 0}get value(){const e=this._object[this._key];return this._value=void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}get dep(){return function(e,t){const n=Xe.get(e);return n&&n.get(t)}(zt(this._object),this._key)}}class un{constructor(e){this._getter=e,this.__v_isRef=!0,this.__v_isReadonly=!0,this._value=void 0}get value(){return this._value=this._getter()}}function dn(e,t,n){return Jt(e)?e:y(e)?new un(e):x(e)&&arguments.length>1?pn(e,t,n):Zt(e)}function pn(e,t,n){const o=e[t];return Jt(o)?o:new cn(e,t,n)}class fn{constructor(e,t,n){this.fn=e,this.setter=t,this._value=void 0,this.dep=new Je(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=Ge-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!t,this.isSSR=n}notify(){if(this.flags|=16,!(8&this.flags)&&xe!==this)return Re(this,!0),!0}get value(){const e=this.dep.track({target:this,type:"get",key:"value"});return Fe(this),e&&(e.version=this.dep.version),this._value}set value(e){this.setter&&this.setter(e)}}const hn={GET:"get",HAS:"has",ITERATE:"iterate"},mn={SET:"set",ADD:"add",DELETE:"delete",CLEAR:"clear"},gn={},vn=new WeakMap;let yn;function bn(){return yn}function _n(e,t=!1,n=yn){if(n){let t=vn.get(n);t||vn.set(n,t=[]),t.push(e)}}function xn(e,t=1/0,n){if(t<=0||!x(e)||e.__v_skip)return e;if((n=n||new Set).has(e))return e;if(n.add(e),t--,Jt(e))xn(e.value,t,n);else if(h(e))for(let o=0;o<e.length;o++)xn(e[o],t,n);else if(g(e)||m(e))e.forEach((e=>{xn(e,t,n)}));else if(E(e)){for(const o in e)xn(e[o],t,n);for(const o of Object.getOwnPropertySymbols(e))Object.prototype.propertyIsEnumerable.call(e,o)&&xn(e[o],t,n)}return e}const Sn=[];function wn(e){Sn.push(e)}function kn(){Sn.pop()}let Cn=!1;function En(e,...t){if(Cn)return;Cn=!0,He();const n=Sn.length?Sn[Sn.length-1].component:null,o=n&&n.appContext.config.warnHandler,r=function(){let e=Sn[Sn.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}();if(o)Nn(o,n,11,[e+t.map((e=>{var t,n;return null!=(n=null==(t=e.toString)?void 0:t.call(e))?n:JSON.stringify(e)})).join(""),n&&n.proxy,r.map((({vnode:e})=>`at <${ml(n,e.type)}>`)).join("\n"),r]);else{const n=[`[Vue warn]: ${e}`,...t];r.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=!!e.component&&null==e.component.parent,r=` at <${ml(e.component,e.type,o)}`,s=">"+n;return e.props?[r,...jn(e.props),s]:[r+s]}(e))})),t}(r))}ze(),Cn=!1}function jn(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...Tn(n,e[n]))})),n.length>3&&t.push(" ..."),t}function Tn(e,t,n){return b(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:Jt(t)?(t=Tn(e,zt(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):y(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=zt(t),n?t:[`${e}=`,t])}function An(e,t){void 0!==e&&("number"!=typeof e?En(`${t} is not a valid number - got ${JSON.stringify(e)}.`):isNaN(e)&&En(`${t} is NaN - the duration expression might be incorrect.`))}const On={SETUP_FUNCTION:0,0:"SETUP_FUNCTION",RENDER_FUNCTION:1,1:"RENDER_FUNCTION",NATIVE_EVENT_HANDLER:5,5:"NATIVE_EVENT_HANDLER",COMPONENT_EVENT_HANDLER:6,6:"COMPONENT_EVENT_HANDLER",VNODE_HOOK:7,7:"VNODE_HOOK",DIRECTIVE_HOOK:8,8:"DIRECTIVE_HOOK",TRANSITION_HOOK:9,9:"TRANSITION_HOOK",APP_ERROR_HANDLER:10,10:"APP_ERROR_HANDLER",APP_WARN_HANDLER:11,11:"APP_WARN_HANDLER",FUNCTION_REF:12,12:"FUNCTION_REF",ASYNC_COMPONENT_LOADER:13,13:"ASYNC_COMPONENT_LOADER",SCHEDULER:14,14:"SCHEDULER",COMPONENT_UPDATE:15,15:"COMPONENT_UPDATE",APP_UNMOUNT_CLEANUP:16,16:"APP_UNMOUNT_CLEANUP"},Rn={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush",15:"component update",16:"app unmount cleanup function"};function Nn(e,t,n,o){try{return o?e(...o):e()}catch(e){In(e,t,n)}}function Pn(e,t,n,o){if(y(e)){const r=Nn(e,t,n,o);return r&&S(r)&&r.catch((e=>{In(e,t,n)})),r}if(h(e)){const r=[];for(let s=0;s<e.length;s++)r.push(Pn(e[s],t,n,o));return r}En("Invalid value type passed to callWithAsyncErrorHandling(): "+typeof e)}function In(e,t,n,o=!0){const s=t?t.vnode:null,{errorHandler:i,throwUnhandledErrorInProduction:a}=t&&t.appContext.config||r;if(t){let o=t.parent;const r=t.proxy,s=Rn[n];for(;o;){const t=o.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,r,s))return;o=o.parent}if(i)return He(),Nn(i,null,10,[e,r,s]),void ze()}!function(e,t,n,o=!0){{const r=Rn[t];if(n&&wn(n),En("Unhandled error"+(r?` during execution of ${r}`:"")),n&&kn(),o)throw e}}(e,n,s,o,a)}const Mn=[];let Ln=-1;const Fn=[];let $n=null,Dn=0;const Bn=Promise.resolve();let Un=null;const Vn=100;function qn(e){const t=Un||Bn;return e?t.then(this?e.bind(this):e):t}function Hn(e){if(!(1&e.flags)){const t=Jn(e),n=Mn[Mn.length-1];!n||!(2&e.flags)&&t>=Jn(n)?Mn.push(e):Mn.splice(function(e){let t=Ln+1,n=Mn.length;for(;t<n;){const o=t+n>>>1,r=Mn[o],s=Jn(r);s<e||s===e&&2&r.flags?t=o+1:n=o}return t}(t),0,e),e.flags|=1,zn()}}function zn(){Un||(Un=Bn.then(Zn))}function Wn(e){h(e)?Fn.push(...e):$n&&-1===e.id?$n.splice(Dn+1,0,e):1&e.flags||(Fn.push(e),e.flags|=1),zn()}function Gn(e,t,n=Ln+1){for(t=t||new Map;n<Mn.length;n++){const o=Mn[n];if(o&&2&o.flags){if(e&&o.id!==e.uid)continue;if(Xn(t,o))continue;Mn.splice(n,1),n--,4&o.flags&&(o.flags&=-2),o(),4&o.flags||(o.flags&=-2)}}}function Kn(e){if(Fn.length){const t=[...new Set(Fn)].sort(((e,t)=>Jn(e)-Jn(t)));if(Fn.length=0,$n)return void $n.push(...t);for($n=t,e=e||new Map,Dn=0;Dn<$n.length;Dn++){const t=$n[Dn];Xn(e,t)||(4&t.flags&&(t.flags&=-2),8&t.flags||t(),t.flags&=-2)}$n=null,Dn=0}}const Jn=e=>null==e.id?2&e.flags?-1:1/0:e.id;function Zn(e){e=e||new Map;const t=t=>Xn(e,t);try{for(Ln=0;Ln<Mn.length;Ln++){const e=Mn[Ln];if(e&&!(8&e.flags)){if(t(e))continue;4&e.flags&&(e.flags&=-2),Nn(e,e.i,e.i?15:14),4&e.flags||(e.flags&=-2)}}}finally{for(;Ln<Mn.length;Ln++){const e=Mn[Ln];e&&(e.flags&=-2)}Ln=-1,Mn.length=0,Kn(e),Un=null,(Mn.length||Fn.length)&&Zn(e)}}function Xn(e,t){const n=e.get(t)||0;if(n>Vn){const e=t.i,n=e&&hl(e.type);return In(`Maximum recursive updates exceeded${n?` in component <${n}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}return e.set(t,n+1),!1}let Yn=!1;const Qn=new Map;q().__VUE_HMR_RUNTIME__={createRecord:ro(to),rerender:ro((function(e,t){const n=eo.get(e);if(!n)return;n.initialDef.render=t,[...n.instances].forEach((e=>{t&&(e.render=t,no(e.type).render=t),e.renderCache=[],Yn=!0,e.update(),Yn=!1}))})),reload:ro((function(e,t){const n=eo.get(e);if(!n)return;t=no(t),oo(n.initialDef,t);const o=[...n.instances];for(let e=0;e<o.length;e++){const r=o[e],s=no(r.type);let i=Qn.get(s);i||(s!==n.initialDef&&oo(s,t),Qn.set(s,i=new Set)),i.add(r),r.appContext.propsCache.delete(r.type),r.appContext.emitsCache.delete(r.type),r.appContext.optionsCache.delete(r.type),r.ceReload?(i.add(r),r.ceReload(t.styles),i.delete(r)):r.parent?Hn((()=>{Yn=!0,r.parent.update(),Yn=!1,i.delete(r)})):r.appContext.reload?r.appContext.reload():"undefined"!=typeof window&&window.location.reload(),r.root.ce&&r!==r.root&&r.root.ce._removeChildStyle(s)}Wn((()=>{Qn.clear()}))}))};const eo=new Map;function to(e,t){return!eo.has(e)&&(eo.set(e,{initialDef:no(t),instances:new Set}),!0)}function no(e){return gl(e)?e.__vccOpts:e}function oo(e,t){u(e,t);for(const n in e)"__file"===n||n in t||delete e[n]}function ro(e){return(t,n)=>{try{return e(t,n)}catch(e){}}}let so,io=[],ao=!1;function lo(e,...t){so?so.emit(e,...t):ao||io.push({event:e,args:t})}function co(e,t){var n,o;if(so=e,so)so.enabled=!0,io.forEach((({event:e,args:t})=>so.emit(e,...t))),io=[];else if("undefined"!=typeof window&&window.HTMLElement&&!(null==(o=null==(n=window.navigator)?void 0:n.userAgent)?void 0:o.includes("jsdom"))){(t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{co(e,t)})),setTimeout((()=>{so||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,ao=!0,io=[])}),3e3)}else ao=!0,io=[]}const uo=mo("component:added"),po=mo("component:updated"),fo=mo("component:removed"),ho=e=>{so&&"function"==typeof so.cleanupBuffer&&!so.cleanupBuffer(e)&&fo(e)};
/*! #__NO_SIDE_EFFECTS__ */
function mo(e){return t=>{lo(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}const go=yo("perf:start"),vo=yo("perf:end");function yo(e){return(t,n,o)=>{lo(e,t.appContext.app,t.uid,t,n,o)}}let bo=null,_o=null;function xo(e){const t=bo;return bo=e,_o=e&&e.type.__scopeId||null,t}function So(e){_o=e}function wo(){_o=null}const ko=e=>Co;function Co(e,t=bo,n){if(!t)return e;if(e._n)return e;const o=(...n)=>{o._d&&xa(-1);const r=xo(t);let s;try{s=e(...n)}finally{xo(r),o._d&&xa(1)}return po(t),s};return o._n=!0,o._c=!0,o._d=!0,o}function Eo(e){A(e)&&En("Do not use built-in directive ids as custom directive id: "+e)}function jo(e,t){if(null===bo)return En("withDirectives can only be used inside render functions."),e;const n=dl(bo),o=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[s,i,a,l=r]=t[e];s&&(y(s)&&(s={mounted:s,updated:s}),s.deep&&xn(i),o.push({dir:s,instance:n,value:i,oldValue:void 0,arg:a,modifiers:l}))}return e}function To(e,t,n,o){const r=e.dirs,s=t&&t.dirs;for(let i=0;i<r.length;i++){const a=r[i];s&&(a.oldValue=s[i].value);let l=a.dir[o];l&&(He(),Pn(l,n,8,[e.el,a,e,t]),ze())}}const Ao=Symbol("_vte"),Oo=e=>e.__isTeleport,Ro=e=>e&&(e.disabled||""===e.disabled),No=e=>e&&(e.defer||""===e.defer),Po=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,Io=e=>"function"==typeof MathMLElement&&e instanceof MathMLElement,Mo=(e,t)=>{const n=e&&e.to;if(b(n)){if(t){const o=t(n);return o||Ro(e)||En(`Failed to locate Teleport target with selector "${n}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`),o}return En("Current renderer does not support string target for Teleports. (missing querySelector renderer option)"),null}return n||Ro(e)||En(`Invalid Teleport target: ${n}`),n},Lo={name:"Teleport",__isTeleport:!0,process(e,t,n,o,r,s,i,a,l,c){const{mc:u,pc:d,pbc:p,o:{insert:f,querySelector:h,createText:m,createComment:g}}=c,v=Ro(t.props);let{shapeFlag:y,children:b,dynamicChildren:_}=t;if(Yn&&(l=!1,_=null),null==e){const e=t.el=g("teleport start"),c=t.anchor=g("teleport end");f(e,n,o),f(c,n,o);const d=(e,t)=>{16&y&&(r&&r.isCE&&(r.ce._teleportTarget=e),u(b,e,t,r,s,i,a,l))},p=()=>{const e=t.target=Mo(t.props,h),n=Bo(e,t,m,f);e?("svg"!==i&&Po(e)?i="svg":"mathml"!==i&&Io(e)&&(i="mathml"),v||(d(e,n),Do(t,!1))):v||En("Invalid Teleport target on mount:",e,`(${typeof e})`)};v&&(d(n,c),Do(t,!0)),No(t.props)?(t.el.__isMounted=!1,Si((()=>{p(),delete t.el.__isMounted}),s)):p()}else{if(No(t.props)&&!1===e.el.__isMounted)return void Si((()=>{Lo.process(e,t,n,o,r,s,i,a,l,c)}),s);t.el=e.el,t.targetStart=e.targetStart;const u=t.anchor=e.anchor,f=t.target=e.target,m=t.targetAnchor=e.targetAnchor,g=Ro(e.props),y=g?n:f,b=g?u:m;if("svg"===i||Po(f)?i="svg":("mathml"===i||Io(f))&&(i="mathml"),_?(p(e.dynamicChildren,_,y,r,s,i,a),Ai(e,t,!1)):l||d(e,t,y,b,r,s,i,a,!1),v)g?t.props&&e.props&&t.props.to!==e.props.to&&(t.props.to=e.props.to):Fo(t,n,u,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=Mo(t.props,h);e?Fo(t,e,null,c,0):En("Invalid Teleport target on update:",f,`(${typeof f})`)}else g&&Fo(t,f,m,c,1);Do(t,v)}},remove(e,t,n,{um:o,o:{remove:r}},s){const{shapeFlag:i,children:a,anchor:l,targetStart:c,targetAnchor:u,target:d,props:p}=e;if(d&&(r(c),r(u)),s&&r(l),16&i){const e=s||!Ro(p);for(let r=0;r<a.length;r++){const s=a[r];o(s,t,n,e,!!s.dynamicChildren)}}},move:Fo,hydrate:function(e,t,n,o,r,s,{o:{nextSibling:i,parentNode:a,querySelector:l,insert:c,createText:u}},d){const p=t.target=Mo(t.props,l);if(p){const l=Ro(t.props),f=p._lpa||p.firstChild;if(16&t.shapeFlag)if(l)t.anchor=d(i(e),t,a(e),n,o,r,s),t.targetStart=f,t.targetAnchor=f&&i(f);else{t.anchor=i(e);let a=f;for(;a;){if(a&&8===a.nodeType)if("teleport start anchor"===a.data)t.targetStart=a;else if("teleport anchor"===a.data){t.targetAnchor=a,p._lpa=t.targetAnchor&&i(t.targetAnchor);break}a=i(a)}t.targetAnchor||Bo(p,t,u,c),d(f&&i(f),t,p,n,o,r,s)}Do(t,l)}return t.anchor&&i(t.anchor)}};function Fo(e,t,n,{o:{insert:o},m:r},s=2){0===s&&o(e.targetAnchor,t,n);const{el:i,anchor:a,shapeFlag:l,children:c,props:u}=e,d=2===s;if(d&&o(i,t,n),(!d||Ro(u))&&16&l)for(let e=0;e<c.length;e++)r(c[e],t,n,2);d&&o(a,t,n)}const $o=Lo;function Do(e,t){const n=e.ctx;if(n&&n.ut){let o,r;for(t?(o=e.el,r=e.anchor):(o=e.targetStart,r=e.targetAnchor);o&&o!==r;)1===o.nodeType&&o.setAttribute("data-v-owner",n.uid),o=o.nextSibling;n.ut()}}function Bo(e,t,n,o){const r=t.targetStart=n(""),s=t.targetAnchor=n("");return r[Ao]=s,e&&(o(r,e),o(s,e)),s}const Uo=Symbol("_leaveCb"),Vo=Symbol("_enterCb");function qo(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Br((()=>{e.isMounted=!0})),qr((()=>{e.isUnmounting=!0})),e}const Ho=[Function,Array],zo={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Ho,onEnter:Ho,onAfterEnter:Ho,onEnterCancelled:Ho,onBeforeLeave:Ho,onLeave:Ho,onAfterLeave:Ho,onLeaveCancelled:Ho,onBeforeAppear:Ho,onAppear:Ho,onAfterAppear:Ho,onAppearCancelled:Ho},Wo=e=>{const t=e.subTree;return t.component?Wo(t.component):t};function Go(e){let t=e[0];if(e.length>1){let n=!1;for(const o of e)if(o.type!==fa){if(n){En("<transition> can only be used on a single element or component. Use <transition-group> for lists.");break}t=o,n=!0}}return t}const Ko={name:"BaseTransition",props:zo,setup(e,{slots:t}){const n=Ga(),o=qo();return()=>{const r=t.default&&er(t.default(),!0);if(!r||!r.length)return;const s=Go(r),i=zt(e),{mode:a}=i;if(a&&"in-out"!==a&&"out-in"!==a&&"default"!==a&&En(`invalid <transition> mode: ${a}`),o.isLeaving)return Xo(s);const l=Yo(s);if(!l)return Xo(s);let c=Zo(l,i,o,n,(e=>c=e));l.type!==fa&&Qo(l,c);let u=n.subTree&&Yo(n.subTree);if(u&&u.type!==fa&&!Ea(l,u)&&Wo(n).type!==fa){let e=Zo(u,i,o,n);if(Qo(u,e),"out-in"===a&&l.type!==fa)return o.isLeaving=!0,e.afterLeave=()=>{o.isLeaving=!1,8&n.job.flags||n.update(),delete e.afterLeave,u=void 0},Xo(s);"in-out"===a&&l.type!==fa?e.delayLeave=(e,t,n)=>{Jo(o,u)[String(u.key)]=u,e[Uo]=()=>{t(),e[Uo]=void 0,delete c.delayedLeave,u=void 0},c.delayedLeave=()=>{n(),delete c.delayedLeave,u=void 0}}:u=void 0}else u&&(u=void 0);return s}}};function Jo(e,t){const{leavingVNodes:n}=e;let o=n.get(t.type);return o||(o=Object.create(null),n.set(t.type,o)),o}function Zo(e,t,n,o,r){const{appear:s,mode:i,persisted:a=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:p,onLeave:f,onAfterLeave:m,onLeaveCancelled:g,onBeforeAppear:v,onAppear:y,onAfterAppear:b,onAppearCancelled:_}=t,x=String(e.key),S=Jo(n,e),w=(e,t)=>{e&&Pn(e,o,9,t)},k=(e,t)=>{const n=t[1];w(e,t),h(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},C={mode:i,persisted:a,beforeEnter(t){let o=l;if(!n.isMounted){if(!s)return;o=v||l}t[Uo]&&t[Uo](!0);const r=S[x];r&&Ea(e,r)&&r.el[Uo]&&r.el[Uo](),w(o,[t])},enter(e){let t=c,o=u,r=d;if(!n.isMounted){if(!s)return;t=y||c,o=b||u,r=_||d}let i=!1;const a=e[Vo]=t=>{i||(i=!0,w(t?r:o,[e]),C.delayedLeave&&C.delayedLeave(),e[Vo]=void 0)};t?k(t,[e,a]):a()},leave(t,o){const r=String(e.key);if(t[Vo]&&t[Vo](!0),n.isUnmounting)return o();w(p,[t]);let s=!1;const i=t[Uo]=n=>{s||(s=!0,o(),w(n?g:m,[t]),t[Uo]=void 0,S[r]===e&&delete S[r])};S[r]=e,f?k(f,[t,i]):i()},clone(e){const s=Zo(e,t,n,o,r);return r&&r(s),s}};return C}function Xo(e){if(Tr(e))return(e=Pa(e)).children=null,e}function Yo(e){if(!Tr(e))return Oo(e.type)&&e.children?Go(e.children):e;if(e.component)return e.component.subTree;const{shapeFlag:t,children:n}=e;if(n){if(16&t)return n[0];if(32&t&&y(n.default))return n.default()}}function Qo(e,t){6&e.shapeFlag&&e.component?(e.transition=t,Qo(e.component.subTree,t)):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function er(e,t=!1,n){let o=[],r=0;for(let s=0;s<e.length;s++){let i=e[s];const a=null==n?i.key:String(n)+String(null!=i.key?i.key:s);i.type===da?(128&i.patchFlag&&r++,o=o.concat(er(i.children,t,a))):(t||i.type!==fa)&&o.push(null!=a?Pa(i,{key:a}):i)}if(r>1)for(let e=0;e<o.length;e++)o[e].patchFlag=-2;return o}
/*! #__NO_SIDE_EFFECTS__ */function tr(e,t){return y(e)?(()=>u({name:e.name},t,{setup:e}))():e}function nr(){const e=Ga();return e?(e.appContext.config.idPrefix||"v")+"-"+e.ids[0]+e.ids[1]++:(En("useId() is called when there is no active component instance to be associated with."),"")}function or(e){e.ids=[e.ids[0]+e.ids[2]+++"-",0,0]}const rr=new WeakSet;function sr(e){const t=Ga(),n=Xt(null);if(t){const o=t.refs===r?t.refs={}:t.refs;let s;(s=Object.getOwnPropertyDescriptor(o,e))&&!s.configurable?En(`useTemplateRef('${e}') already exists.`):Object.defineProperty(o,e,{enumerable:!0,get:()=>n.value,set:e=>n.value=e})}else En("useTemplateRef() is called when there is no active component instance to be associated with.");const o=$t(n);return rr.add(o),o}function ir(e,t,n,o,s=!1){if(h(e))return void e.forEach(((e,r)=>ir(e,t&&(h(t)?t[r]:t),n,o,s)));if(Cr(o)&&!s)return void(512&o.shapeFlag&&o.type.__asyncResolved&&o.component.subTree.component&&ir(e,t,n,o.component.subTree));const i=4&o.shapeFlag?dl(o.component):o.el,a=s?null:i,{i:l,r:c}=e;if(!l)return void En("Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.");const u=t&&t.r,p=l.refs===r?l.refs={}:l.refs,m=l.setupState,g=zt(m),v=m===r?()=>!1:e=>(f(g,e)&&!Jt(g[e])&&En(`Template ref "${e}" used on a non-ref value. It will not work in the production build.`),!rr.has(g[e])&&f(g,e));if(null!=u&&u!==c&&(b(u)?(p[u]=null,v(u)&&(m[u]=null)):Jt(u)&&(u.value=null)),y(c))Nn(c,l,12,[a,p]);else{const t=b(c),o=Jt(c);if(t||o){const r=()=>{if(e.f){const n=t?v(c)?m[c]:p[c]:c.value;s?h(n)&&d(n,i):h(n)?n.includes(i)||n.push(i):t?(p[c]=[i],v(c)&&(m[c]=p[c])):(c.value=[i],e.k&&(p[e.k]=c.value))}else t?(p[c]=a,v(c)&&(m[c]=a)):o?(c.value=a,e.k&&(p[e.k]=a)):En("Invalid template ref type:",c,`(${typeof c})`)};a?(r.id=-1,Si(r,n)):r()}else En("Invalid template ref type:",c,`(${typeof c})`)}}let ar=!1;const lr=()=>{ar||(ar=!0)},cr=e=>{if(1===e.nodeType)return(e=>e.namespaceURI.includes("svg")&&"foreignObject"!==e.tagName)(e)?"svg":(e=>e.namespaceURI.includes("MathML"))(e)?"mathml":void 0},ur=e=>8===e.nodeType;function dr(e){const{mt:t,p:n,o:{patchProp:o,createText:r,nextSibling:s,parentNode:i,remove:a,insert:c,createComment:u}}=e,d=(n,o,a,l,u,b=!1)=>{b=b||!!o.dynamicChildren;const _=ur(n)&&"["===n.data,x=()=>m(n,o,a,l,u,_),{type:S,ref:w,shapeFlag:k,patchFlag:C}=o;let E=n.nodeType;o.el=n,D(n,"__vnode",o,!0),D(n,"__vueParentComponent",a,!0),-2===C&&(b=!1,o.dynamicChildren=null);let j=null;switch(S){case pa:3!==E?""===o.children?(c(o.el=r(""),i(n),n),j=n):j=x():(n.data!==o.children&&(En("Hydration text mismatch in",n.parentNode,`\n  - rendered on server: ${JSON.stringify(n.data)}\n  - expected on client: ${JSON.stringify(o.children)}`),lr(),n.data=o.children),j=s(n));break;case fa:y(n)?(j=s(n),v(o.el=n.content.firstChild,n,a)):j=8!==E||_?x():s(n);break;case ha:if(_&&(E=(n=s(n)).nodeType),1===E||3===E){j=n;const e=!o.children.length;for(let t=0;t<o.staticCount;t++)e&&(o.children+=1===j.nodeType?j.outerHTML:j.data),t===o.staticCount-1&&(o.anchor=j),j=s(j);return _?s(j):j}x();break;case da:j=_?h(n,o,a,l,u,b):x();break;default:if(1&k)j=1===E&&o.type.toLowerCase()===n.tagName.toLowerCase()||y(n)?p(n,o,a,l,u,b):x();else if(6&k){o.slotScopeIds=u;const e=i(n);if(j=_?g(n):ur(n)&&"teleport start"===n.data?g(n,n.data,"teleport end"):s(n),t(o,e,null,a,l,cr(e),b),Cr(o)&&!o.type.__asyncResolved){let t;_?(t=Ra(da),t.anchor=j?j.previousSibling:e.lastChild):t=3===n.nodeType?Ma(""):Ra("div"),t.el=n,o.component.subTree=t}}else 64&k?j=8!==E?x():o.type.hydrate(n,o,a,l,u,b,e,f):128&k?j=o.type.hydrate(n,o,a,l,cr(i(n)),u,b,e,d):En("Invalid HostVNode type:",S,`(${typeof S})`)}return null!=w&&ir(w,null,l,o),j},p=(e,t,n,r,s,i)=>{i=i||!!t.dynamicChildren;const{type:c,props:u,patchFlag:d,shapeFlag:p,dirs:h,transition:m}=t,g="input"===c||"option"===c;{h&&To(t,null,n,"created");let c,d=!1;if(y(e)){d=Ti(null,m)&&n&&n.vnode.props&&n.vnode.props.appear;const o=e.content.firstChild;if(d){const e=o.getAttribute("class");e&&(o.$cls=e),m.beforeEnter(o)}v(o,e,n),t.el=e=o}if(16&p&&(!u||!u.innerHTML&&!u.textContent)){let o=f(e.firstChild,t,e,n,r,s,i),l=!1;for(;o;){yr(e,1)||(l||(En("Hydration children mismatch on",e,"\nServer rendered element contains more child nodes than client vdom."),l=!0),lr());const t=o;o=o.nextSibling,a(t)}}else if(8&p){let n=t.children;"\n"!==n[0]||"PRE"!==e.tagName&&"TEXTAREA"!==e.tagName||(n=n.slice(1)),e.textContent!==n&&(yr(e,0)||(En("Hydration text content mismatch on",e,`\n  - rendered on server: ${e.textContent}\n  - expected on client: ${t.children}`),lr()),e.textContent=t.children)}if(u){const r=e.tagName.includes("-");for(const s in u)h&&h.some((e=>e.dir.created))||!pr(e,s,u[s],t,n)||lr(),(g&&(s.endsWith("value")||"indeterminate"===s)||l(s)&&!T(s)||"."===s[0]||r)&&o(e,s,null,u[s],void 0,n)}(c=u&&u.onVnodeBeforeMount)&&Va(c,n,t),h&&To(t,null,n,"beforeMount"),((c=u&&u.onVnodeMounted)||h||d)&&ca((()=>{c&&Va(c,n,t),d&&m.enter(e),h&&To(t,null,n,"mounted")}),r)}return e.nextSibling},f=(e,t,o,i,a,l,u)=>{u=u||!!t.dynamicChildren;const p=t.children,f=p.length;let h=!1;for(let t=0;t<f;t++){const m=u?p[t]:p[t]=$a(p[t]),g=m.type===pa;e?(g&&!u&&t+1<f&&$a(p[t+1]).type===pa&&(c(r(e.data.slice(m.children.length)),o,s(e)),e.data=m.children),e=d(e,m,i,a,l,u)):g&&!m.children?c(m.el=r(""),o):(yr(o,1)||(h||(En("Hydration children mismatch on",o,"\nServer rendered element contains fewer child nodes than client vdom."),h=!0),lr()),n(null,m,o,null,i,a,cr(o),l))}return e},h=(e,t,n,o,r,a)=>{const{slotScopeIds:l}=t;l&&(r=r?r.concat(l):l);const d=i(e),p=f(s(e),t,d,n,o,r,a);return p&&ur(p)&&"]"===p.data?s(t.anchor=p):(lr(),c(t.anchor=u("]"),d,p),p)},m=(e,t,o,r,l,c)=>{if(yr(e.parentElement,1)||(En("Hydration node mismatch:\n- rendered on server:",e,3===e.nodeType?"(text)":ur(e)&&"["===e.data?"(start of fragment)":"","\n- expected on client:",t.type),lr()),t.el=null,c){const t=g(e);for(;;){const n=s(e);if(!n||n===t)break;a(n)}}const u=s(e),d=i(e);return a(e),n(null,t,d,u,o,r,cr(d),l),o&&(o.vnode.el=t.el,ta(o,t.el)),u},g=(e,t="[",n="]")=>{let o=0;for(;e;)if((e=s(e))&&ur(e)&&(e.data===t&&o++,e.data===n)){if(0===o)return s(e);o--}return e},v=(e,t,n)=>{const o=t.parentNode;o&&o.replaceChild(e,t);let r=n;for(;r;)r.vnode.el===t&&(r.vnode.el=r.subTree.el=e),r=r.parent},y=e=>1===e.nodeType&&"TEMPLATE"===e.tagName;return[(e,t)=>{if(!t.hasChildNodes())return En("Attempting to hydrate existing markup but container is empty. Performing full mount instead."),n(null,e,t),Kn(),void(t._vnode=e);d(t.firstChild,e,null,null,null),Kn(),t._vnode=e},d]}function pr(e,t,n,o,r){let s,i,a,l;if("class"===t)e.$cls?(a=e.$cls,delete e.$cls):a=e.getAttribute("class"),l=Q(n),function(e,t){if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0}(fr(a||""),fr(l))||(s=2,i="class");else if("style"===t){a=e.getAttribute("style")||"",l=b(n)?n:function(e){if(!e)return"";if(b(e))return e;let t="";for(const n in e){const o=e[n];(b(o)||"number"==typeof o)&&(t+=`${n.startsWith("--")?n:I(n)}:${o};`)}return t}(K(n));const t=hr(a),c=hr(l);if(o.dirs)for(const{dir:e,value:t}of o.dirs)"show"!==e.name||t||c.set("display","none");r&&mr(r,o,c),function(e,t){if(e.size!==t.size)return!1;for(const[n,o]of e)if(o!==t.get(n))return!1;return!0}(t,c)||(s=3,i="style")}else(e instanceof SVGElement&&ue(t)||e instanceof HTMLElement&&(ae(t)||ce(t)))&&(ae(t)?(a=e.hasAttribute(t),l=le(n)):null==n?(a=e.hasAttribute(t),l=!1):(a=e.hasAttribute(t)?e.getAttribute(t):"value"===t&&"TEXTAREA"===e.tagName&&e.value,l=!!function(e){if(null==e)return!1;const t=typeof e;return"string"===t||"number"===t||"boolean"===t}(n)&&String(n)),a!==l&&(s=4,i=t));if(null!=s&&!yr(e,s)){const t=e=>!1===e?"(not rendered)":`${i}="${e}"`;return En(`Hydration ${vr[s]} mismatch on`,e,`\n  - rendered on server: ${t(a)}\n  - expected on client: ${t(l)}\n  Note: this mismatch is check-only. The DOM will not be rectified in production due to performance overhead.\n  You should fix the source of the mismatch.`),!0}return!1}function fr(e){return new Set(e.trim().split(/\s+/))}function hr(e){const t=new Map;for(const n of e.split(";")){let[e,o]=n.split(":");e=e.trim(),o=o&&o.trim(),e&&o&&t.set(e,o)}return t}function mr(e,t,n){const o=e.subTree;if(e.getCssVars&&(t===o||o&&o.type===da&&o.children.includes(t))){const t=e.getCssVars();for(const e in t)n.set(`--${pe(e)}`,String(t[e]))}t===o&&e.parent&&mr(e.parent,e.vnode,n)}const gr="data-allow-mismatch",vr={0:"text",1:"children",2:"class",3:"style",4:"attribute"};function yr(e,t){if(0===t||1===t)for(;e&&!e.hasAttribute(gr);)e=e.parentElement;const n=e&&e.getAttribute(gr);if(null==n)return!1;if(""===n)return!0;{const e=n.split(",");return!(0!==t||!e.includes("children"))||n.split(",").includes(vr[t])}}const br=q().requestIdleCallback||(e=>setTimeout(e,1)),_r=q().cancelIdleCallback||(e=>clearTimeout(e)),xr=(e=1e4)=>t=>{const n=br(t,{timeout:e});return()=>_r(n)};const Sr=e=>(t,n)=>{const o=new IntersectionObserver((e=>{for(const n of e)if(n.isIntersecting){o.disconnect(),t();break}}),e);return n((e=>{if(e instanceof Element)return function(e){const{top:t,left:n,bottom:o,right:r}=e.getBoundingClientRect(),{innerHeight:s,innerWidth:i}=window;return(t>0&&t<s||o>0&&o<s)&&(n>0&&n<i||r>0&&r<i)}(e)?(t(),o.disconnect(),!1):void o.observe(e)})),()=>o.disconnect()},wr=e=>t=>{if(e){const n=matchMedia(e);if(!n.matches)return n.addEventListener("change",t,{once:!0}),()=>n.removeEventListener("change",t);t()}},kr=(e=[])=>(t,n)=>{b(e)&&(e=[e]);let o=!1;const r=e=>{o||(o=!0,s(),t(),e.target.dispatchEvent(new e.constructor(e.type,e)))},s=()=>{n((t=>{for(const n of e)t.removeEventListener(n,r)}))};return n((t=>{for(const n of e)t.addEventListener(n,r,{once:!0})})),s};const Cr=e=>!!e.type.__asyncLoader;
/*! #__NO_SIDE_EFFECTS__ */function Er(e){y(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:o,delay:r=200,hydrate:s,timeout:i,suspensible:a=!0,onError:l}=e;let c,u=null,d=0;const p=()=>{let e;return u||(e=u=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),l)return new Promise(((t,n)=>{l(e,(()=>t((d++,u=null,p()))),(()=>n(e)),d+1)}));throw e})).then((t=>{if(e!==u&&u)return u;if(t||En("Async component loader resolved to undefined. If you are using retry(), make sure to return its return value."),t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),t&&!x(t)&&!y(t))throw new Error(`Invalid async component load result: ${t}`);return c=t,t})))};return tr({name:"AsyncComponentWrapper",__asyncLoader:p,__asyncHydrate(e,t,n){let o=!1;const r=s?()=>{const r=s((()=>{o?En(`Skipping lazy hydration for component '${hl(c)}': it was updated before lazy hydration performed.`):n()}),(t=>function(e,t){if(ur(e)&&"["===e.data){let n=1,o=e.nextSibling;for(;o;){if(1===o.nodeType){if(!1===t(o))break}else if(ur(o))if("]"===o.data){if(0===--n)break}else"["===o.data&&n++;o=o.nextSibling}}else t(e)}(e,t)));r&&(t.bum||(t.bum=[])).push(r),(t.u||(t.u=[])).push((()=>o=!0))}:n;c?r():p().then((()=>!t.isUnmounted&&r()))},get __asyncResolved(){return c},setup(){const e=Wa;if(or(e),c)return()=>jr(c,e);const t=t=>{u=null,In(t,e,13,!o)};if(a&&e.suspense||ol)return p().then((t=>()=>jr(t,e))).catch((e=>(t(e),()=>o?Ra(o,{error:e}):null)));const s=Zt(!1),l=Zt(),d=Zt(!!r);return r&&setTimeout((()=>{d.value=!1}),r),null!=i&&setTimeout((()=>{if(!s.value&&!l.value){const e=new Error(`Async component timed out after ${i}ms.`);t(e),l.value=e}}),i),p().then((()=>{s.value=!0,e.parent&&Tr(e.parent.vnode)&&e.parent.update()})).catch((e=>{t(e),l.value=e})),()=>s.value&&c?jr(c,e):l.value&&o?Ra(o,{error:l.value}):n&&!d.value?Ra(n):void 0}})}function jr(e,t){const{ref:n,props:o,children:r,ce:s}=t.vnode,i=Ra(e,o,r);return i.ref=n,i.ce=s,delete t.vnode.ce,i}const Tr=e=>e.type.__isKeepAlive,Ar={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=Ga(),o=n.ctx;if(!o.renderer)return()=>{const e=t.default&&t.default();return e&&1===e.length?e[0]:e};const r=new Map,s=new Set;let i=null;n.__v_cache=r;const a=n.suspense,{renderer:{p:l,m:c,um:u,o:{createElement:d}}}=o,p=d("div");function f(e){Mr(e),u(e,n,a,!0)}function h(e){r.forEach(((t,n)=>{const o=hl(t.type);o&&!e(o)&&m(n)}))}function m(e){const t=r.get(e);!t||i&&Ea(t,i)?i&&Mr(i):f(t),r.delete(e),s.delete(e)}o.activate=(e,t,n,o,r)=>{const s=e.component;c(e,t,n,0,a),l(s.vnode,e,t,n,s,a,o,e.slotScopeIds,r),Si((()=>{s.isDeactivated=!1,s.a&&$(s.a);const t=e.props&&e.props.onVnodeMounted;t&&Va(t,s.parent,e)}),a),uo(s)},o.deactivate=e=>{const t=e.component;Ri(t.m),Ri(t.a),c(e,p,null,1,a),Si((()=>{t.da&&$(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&Va(n,t.parent,e),t.isDeactivated=!0}),a),uo(t),t.__keepAliveStorageContainer=p},Fi((()=>[e.include,e.exclude]),(([e,t])=>{e&&h((t=>Or(e,t))),t&&h((e=>!Or(t,e)))}),{flush:"post",deep:!0});let g=null;const v=()=>{null!=g&&(na(n.subTree.type)?Si((()=>{r.set(g,Lr(n.subTree))}),n.subTree.suspense):r.set(g,Lr(n.subTree)))};return Br(v),Vr(v),qr((()=>{r.forEach((e=>{const{subTree:t,suspense:o}=n,r=Lr(t);if(e.type!==r.type||e.key!==r.key)f(e);else{Mr(r);const e=r.component.da;e&&Si(e,o)}}))})),()=>{if(g=null,!t.default)return i=null;const n=t.default(),o=n[0];if(n.length>1)return En("KeepAlive should contain exactly one component child."),i=null,n;if(!(Ca(o)&&(4&o.shapeFlag||128&o.shapeFlag)))return i=null,o;let a=Lr(o);if(a.type===fa)return i=null,a;const l=a.type,c=hl(Cr(a)?a.type.__asyncResolved||{}:l),{include:u,exclude:d,max:p}=e;if(u&&(!c||!Or(u,c))||d&&c&&Or(d,c))return a.shapeFlag&=-257,i=a,o;const f=null==a.key?l:a.key,h=r.get(f);return a.el&&(a=Pa(a),128&o.shapeFlag&&(o.ssContent=a)),g=f,h?(a.el=h.el,a.component=h.component,a.transition&&Qo(a,a.transition),a.shapeFlag|=512,s.delete(f),s.add(f)):(s.add(f),p&&s.size>parseInt(p,10)&&m(s.values().next().value)),a.shapeFlag|=256,i=a,na(o.type)?o:a}}};function Or(e,t){return h(e)?e.some((e=>Or(e,t))):b(e)?e.split(",").includes(t):"[object RegExp]"===k(e)&&(e.lastIndex=0,e.test(t))}function Rr(e,t){Pr(e,"a",t)}function Nr(e,t){Pr(e,"da",t)}function Pr(e,t,n=Wa){const o=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(Fr(t,o,n),n){let e=n.parent;for(;e&&e.parent;)Tr(e.parent.vnode)&&Ir(o,t,n,e),e=e.parent}}function Ir(e,t,n,o){const r=Fr(t,e,o,!0);Hr((()=>{d(o[t],r)}),n)}function Mr(e){e.shapeFlag&=-257,e.shapeFlag&=-513}function Lr(e){return 128&e.shapeFlag?e.ssContent:e}function Fr(e,t,n=Wa,o=!1){if(n){const r=n[e]||(n[e]=[]),s=t.__weh||(t.__weh=(...o)=>{He();const r=Za(n),s=Pn(t,n,e,o);return r(),ze(),s});return o?r.unshift(s):r.push(s),s}En(`${L(Rn[e].replace(/ hook$/,""))} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`)}const $r=e=>(t,n=Wa)=>{ol&&"sp"!==e||Fr(e,((...e)=>t(...e)),n)},Dr=$r("bm"),Br=$r("m"),Ur=$r("bu"),Vr=$r("u"),qr=$r("bum"),Hr=$r("um"),zr=$r("sp"),Wr=$r("rtg"),Gr=$r("rtc");function Kr(e,t=Wa){Fr("ec",e,t)}const Jr="components",Zr="directives";function Xr(e,t){return ts(Jr,e,!0,t)||e}const Yr=Symbol.for("v-ndc");function Qr(e){return b(e)?ts(Jr,e,!1)||e:e||Yr}function es(e){return ts(Zr,e)}function ts(e,t,n=!0,o=!1){const r=bo||Wa;if(r){const s=r.type;if(e===Jr){const e=hl(s,!1);if(e&&(e===t||e===N(t)||e===M(N(t))))return s}const i=ns(r[e]||s[e],t)||ns(r.appContext[e],t);if(!i&&o)return s;if(n&&!i){const n=e===Jr?"\nIf this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.":"";En(`Failed to resolve ${e.slice(0,-1)}: ${t}${n}`)}return i}En(`resolve${M(e.slice(0,-1))} can only be used in render() or setup().`)}function ns(e,t){return e&&(e[t]||e[N(t)]||e[M(N(t))])}function os(e,t,n,o){let r;const s=n&&n[o],i=h(e);if(i||b(e)){let n=!1,o=!1;i&&Ut(e)&&(n=!qt(e),o=Vt(e),e=rt(e)),r=new Array(e.length);for(let i=0,a=e.length;i<a;i++)r[i]=t(n?o?Kt(Gt(e[i])):Gt(e[i]):e[i],i,void 0,s&&s[i])}else if("number"==typeof e){Number.isInteger(e)||En(`The v-for range expect an integer value but got ${e}.`),r=new Array(e);for(let n=0;n<e;n++)r[n]=t(n+1,n,void 0,s&&s[n])}else if(x(e))if(e[Symbol.iterator])r=Array.from(e,((e,n)=>t(e,n,void 0,s&&s[n])));else{const n=Object.keys(e);r=new Array(n.length);for(let o=0,i=n.length;o<i;o++){const i=n[o];r[o]=t(e[i],i,o,s&&s[o])}}else r=[];return n&&(n[o]=r),r}function rs(e,t){for(let n=0;n<t.length;n++){const o=t[n];if(h(o))for(let t=0;t<o.length;t++)e[o[t].name]=o[t].fn;else o&&(e[o.name]=o.key?(...e)=>{const t=o.fn(...e);return t&&(t.key=o.key),t}:o.fn)}return e}function ss(e,t,n={},o,r){if(bo.ce||bo.parent&&Cr(bo.parent)&&bo.parent.ce)return"default"!==t&&(n.name=t),va(),ka(da,null,[Ra("slot",n,o&&o())],64);let s=e[t];s&&s.length>1&&(En("SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template."),s=()=>[]),s&&s._c&&(s._d=!1),va();const i=s&&is(s(n)),a=n.key||i&&i.key,l=ka(da,{key:(a&&!_(a)?a:`_${t}`)+(!i&&o?"_fb":"")},i||(o?o():[]),i&&1===e._?64:-2);return!r&&l.scopeId&&(l.slotScopeIds=[l.scopeId+"-s"]),s&&s._c&&(s._d=!0),l}function is(e){return e.some((e=>!Ca(e)||e.type!==fa&&!(e.type===da&&!is(e.children))))?e:null}function as(e,t){const n={};if(!x(e))return En("v-on with no argument expects an object value."),n;for(const o in e)n[t&&/[A-Z]/.test(o)?`on:${o}`:L(o)]=e[o];return n}const ls=e=>e?el(e)?dl(e):ls(e.parent):null,cs=u(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>Dt(e.props),$attrs:e=>Dt(e.attrs),$slots:e=>Dt(e.slots),$refs:e=>Dt(e.refs),$parent:e=>ls(e.parent),$root:e=>ls(e.root),$host:e=>e.ce,$emit:e=>e.emit,$options:e=>Is(e),$forceUpdate:e=>e.f||(e.f=()=>{Hn(e.update)}),$nextTick:e=>e.n||(e.n=qn.bind(e.proxy)),$watch:e=>Di.bind(e)}),us=e=>"_"===e||"$"===e,ds=(e,t)=>e!==r&&!e.__isScriptSetup&&f(e,t),ps={get({_:e},t){if("__v_skip"===t)return!0;const{ctx:n,setupState:o,data:s,props:i,accessCache:a,type:l,appContext:c}=e;if("__isVue"===t)return!0;let u;if("$"!==t[0]){const l=a[t];if(void 0!==l)switch(l){case 1:return o[t];case 2:return s[t];case 4:return n[t];case 3:return i[t]}else{if(ds(o,t))return a[t]=1,o[t];if(s!==r&&f(s,t))return a[t]=2,s[t];if((u=e.propsOptions[0])&&f(u,t))return a[t]=3,i[t];if(n!==r&&f(n,t))return a[t]=4,n[t];Os&&(a[t]=0)}}const d=cs[t];let p,h;return d?("$attrs"===t?(tt(e.attrs,"get",""),Gi()):"$slots"===t&&tt(e,"get",t),d(e)):(p=l.__cssModules)&&(p=p[t])?p:n!==r&&f(n,t)?(a[t]=4,n[t]):(h=c.config.globalProperties,f(h,t)?h[t]:void(!bo||b(t)&&0===t.indexOf("__v")||(s!==r&&us(t[0])&&f(s,t)?En(`Property ${JSON.stringify(t)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`):e===bo&&En(`Property ${JSON.stringify(t)} was accessed during render but is not defined on instance.`))))},set({_:e},t,n){const{data:o,setupState:s,ctx:i}=e;return ds(s,t)?(s[t]=n,!0):s.__isScriptSetup&&f(s,t)?(En(`Cannot mutate <script setup> binding "${t}" from Options API.`),!1):o!==r&&f(o,t)?(o[t]=n,!0):f(e.props,t)?(En(`Attempting to mutate prop "${t}". Props are readonly.`),!1):"$"===t[0]&&t.slice(1)in e?(En(`Attempting to mutate public property "${t}". Properties starting with $ are reserved and readonly.`),!1):(t in e.appContext.config.globalProperties?Object.defineProperty(i,t,{enumerable:!0,configurable:!0,value:n}):i[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:o,appContext:s,propsOptions:i}},a){let l;return!!n[a]||e!==r&&f(e,a)||ds(t,a)||(l=i[0])&&f(l,a)||f(o,a)||f(cs,a)||f(s.config.globalProperties,a)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:f(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)},ownKeys:e=>(En("Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead."),Reflect.ownKeys(e))},fs=u({},ps,{get(e,t){if(t!==Symbol.unscopables)return ps.get(e,t,e)},has(e,t){const n="_"!==t[0]&&!W(t);return!n&&ps.has(e,t)&&En(`Property ${JSON.stringify(t)} should not start with _ which is a reserved prefix for Vue internals.`),n}});const hs=e=>En(`${e}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);function ms(){return hs("defineProps"),null}function gs(){return hs("defineEmits"),null}function vs(e){hs("defineExpose")}function ys(e){hs("defineOptions")}function bs(){return hs("defineSlots"),null}function _s(){hs("defineModel")}function xs(e,t){return hs("withDefaults"),null}function Ss(){return ks().slots}function ws(){return ks().attrs}function ks(){const e=Ga();return e||En("useContext() called without active instance."),e.setupContext||(e.setupContext=ul(e))}function Cs(e){return h(e)?e.reduce(((e,t)=>(e[t]=null,e)),{}):e}function Es(e,t){const n=Cs(e);for(const e in t){if(e.startsWith("__skip"))continue;let o=n[e];o?h(o)||y(o)?o=n[e]={type:o,default:t[e]}:o.default=t[e]:null===o?o=n[e]={default:t[e]}:En(`props default key "${e}" has no corresponding declaration.`),o&&t[`__skip_${e}`]&&(o.skipFactory=!0)}return n}function js(e,t){return e&&t?h(e)&&h(t)?e.concat(t):u({},Cs(e),Cs(t)):e||t}function Ts(e,t){const n={};for(const o in e)t.includes(o)||Object.defineProperty(n,o,{enumerable:!0,get:()=>e[o]});return n}function As(e){const t=Ga();t||En("withAsyncContext called without active current instance. This is likely a bug.");let n=e();return Xa(),S(n)&&(n=n.catch((e=>{throw Za(t),e}))),[n,()=>Za(t)]}let Os=!0;function Rs(e){const t=Is(e),n=e.proxy,o=e.ctx;Os=!1,t.beforeCreate&&Ns(t.beforeCreate,e,"bc");const{data:r,computed:s,methods:a,watch:l,provide:c,inject:u,created:d,beforeMount:p,mounted:f,beforeUpdate:m,updated:g,activated:v,deactivated:b,beforeDestroy:_,beforeUnmount:w,destroyed:k,unmounted:C,render:E,renderTracked:j,renderTriggered:T,errorCaptured:A,serverPrefetch:O,expose:R,inheritAttrs:N,components:P,directives:I,filters:M}=t,L=function(){const e=Object.create(null);return(t,n)=>{e[n]?En(`${t} property "${n}" is already defined in ${e[n]}.`):e[n]=t}}();{const[t]=e.propsOptions;if(t)for(const e in t)L("Props",e)}if(u&&function(e,t,n=i){h(e)&&(e=$s(e));for(const o in e){const r=e[o];let s;s=x(r)?"default"in r?Gs(r.from||o,r.default,!0):Gs(r.from||o):Gs(r),Jt(s)?Object.defineProperty(t,o,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[o]=s,n("Inject",o)}}(u,o,L),a)for(const e in a){const t=a[e];y(t)?(Object.defineProperty(o,e,{value:t.bind(n),configurable:!0,enumerable:!0,writable:!0}),L("Methods",e)):En(`Method "${e}" has type "${typeof t}" in the component definition. Did you reference the function correctly?`)}if(r){y(r)||En("The data option must be a function. Plain object usage is no longer supported.");const t=r.call(n,n);if(S(t)&&En("data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>."),x(t)){e.data=Lt(t);for(const e in t)L("Data",e),us(e[0])||Object.defineProperty(o,e,{configurable:!0,enumerable:!0,get:()=>t[e],set:i})}else En("data() should return an object.")}if(Os=!0,s)for(const e in s){const t=s[e],r=y(t)?t.bind(n,n):y(t.get)?t.get.bind(n,n):i;r===i&&En(`Computed property "${e}" has no getter.`);const a=!y(t)&&y(t.set)?t.set.bind(n):()=>{En(`Write operation failed: computed property "${e}" is readonly.`)},l=vl({get:r,set:a});Object.defineProperty(o,e,{enumerable:!0,configurable:!0,get:()=>l.value,set:e=>l.value=e}),L("Computed",e)}if(l)for(const e in l)Ps(l[e],o,n,e);if(c){const e=y(c)?c.call(n):c;Reflect.ownKeys(e).forEach((t=>{Ws(t,e[t])}))}function F(e,t){h(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(d&&Ns(d,e,"c"),F(Dr,p),F(Br,f),F(Ur,m),F(Vr,g),F(Rr,v),F(Nr,b),F(Kr,A),F(Gr,j),F(Wr,T),F(qr,w),F(Hr,C),F(zr,O),h(R))if(R.length){const t=e.exposed||(e.exposed={});R.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});E&&e.render===i&&(e.render=E),null!=N&&(e.inheritAttrs=N),P&&(e.components=P),I&&(e.directives=I),O&&or(e)}function Ns(e,t,n){Pn(h(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function Ps(e,t,n,o){let r=o.includes(".")?Bi(n,o):()=>n[o];if(b(e)){const n=t[e];y(n)?Fi(r,n):En(`Invalid watch handler specified by key "${e}"`,n)}else if(y(e))Fi(r,e.bind(n));else if(x(e))if(h(e))e.forEach((e=>Ps(e,t,n,o)));else{const o=y(e.handler)?e.handler.bind(n):t[e.handler];y(o)?Fi(r,o,e):En(`Invalid watch handler specified by key "${e.handler}"`,o)}else En(`Invalid watch option: "${o}"`,e)}function Is(e){const t=e.type,{mixins:n,extends:o}=t,{mixins:r,optionsCache:s,config:{optionMergeStrategies:i}}=e.appContext,a=s.get(t);let l;return a?l=a:r.length||n||o?(l={},r.length&&r.forEach((e=>Ms(l,e,i,!0))),Ms(l,t,i)):l=t,x(t)&&s.set(t,l),l}function Ms(e,t,n,o=!1){const{mixins:r,extends:s}=t;s&&Ms(e,s,n,!0),r&&r.forEach((t=>Ms(e,t,n,!0)));for(const r in t)if(o&&"expose"===r)En('"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.');else{const o=Ls[r]||n&&n[r];e[r]=o?o(e[r],t[r]):t[r]}return e}const Ls={data:Fs,props:Us,emits:Us,methods:Bs,computed:Bs,beforeCreate:Ds,created:Ds,beforeMount:Ds,mounted:Ds,beforeUpdate:Ds,updated:Ds,beforeDestroy:Ds,beforeUnmount:Ds,destroyed:Ds,unmounted:Ds,activated:Ds,deactivated:Ds,errorCaptured:Ds,serverPrefetch:Ds,components:Bs,directives:Bs,watch:function(e,t){if(!e)return t;if(!t)return e;const n=u(Object.create(null),e);for(const o in t)n[o]=Ds(e[o],t[o]);return n},provide:Fs,inject:function(e,t){return Bs($s(e),$s(t))}};function Fs(e,t){return t?e?function(){return u(y(e)?e.call(this,this):e,y(t)?t.call(this,this):t)}:t:e}function $s(e){if(h(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Ds(e,t){return e?[...new Set([].concat(e,t))]:t}function Bs(e,t){return e?u(Object.create(null),e,t):t}function Us(e,t){return e?h(e)&&h(t)?[...new Set([...e,...t])]:u(Object.create(null),Cs(e),Cs(null!=t?t:{})):t}function Vs(){return{app:null,config:{isNativeTag:a,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let qs=0;function Hs(e,t){return function(n,o=null){y(n)||(n=u({},n)),null==o||x(o)||(En("root props passed to app.mount() must be an object."),o=null);const r=Vs(),s=new WeakSet,i=[];let a=!1;const l=r.app={_uid:qs++,_component:n,_props:o,_container:null,_context:r,_instance:null,version:Sl,get config(){return r.config},set config(e){En("app.config cannot be replaced. Modify individual options instead.")},use(e,...t){return s.has(e)?En("Plugin has already been applied to target app."):e&&y(e.install)?(s.add(e),e.install(l,...t)):y(e)?(s.add(e),e(l,...t)):En('A plugin must either be a function or an object with an "install" function.'),l},mixin(e){return r.mixins.includes(e)?En("Mixin has already been applied to target app"+(e.name?`: ${e.name}`:"")):r.mixins.push(e),l},component(e,t){return Qa(e,r.config),t?(r.components[e]&&En(`Component "${e}" has already been registered in target app.`),r.components[e]=t,l):r.components[e]},directive(e,t){return Eo(e),t?(r.directives[e]&&En(`Directive "${e}" has already been registered in target app.`),r.directives[e]=t,l):r.directives[e]},mount(s,i,c){if(!a){s.__vue_app__&&En("There is already an app instance mounted on the host container.\n If you want to mount another app on the same host container, you need to unmount the previous app by calling `app.unmount()` first.");const u=l._ceVNode||Ra(n,o);return u.appContext=r,!0===c?c="svg":!1===c&&(c=void 0),r.reload=()=>{const t=Pa(u);t.el=null,e(t,s,c)},i&&t?t(u,s):e(u,s,c),a=!0,l._container=s,s.__vue_app__=l,l._instance=u.component,function(e,t){lo("app:init",e,t,{Fragment:da,Text:pa,Comment:fa,Static:ha})}(l,Sl),dl(u.component)}En("App has already been mounted.\nIf you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. `const createMyApp = () => createApp(App)`")},onUnmount(e){"function"!=typeof e&&En("Expected function as first argument to app.onUnmount(), but got "+typeof e),i.push(e)},unmount(){a?(Pn(i,l._instance,16),e(null,l._container),l._instance=null,function(e){lo("app:unmount",e)}(l),delete l._container.__vue_app__):En("Cannot unmount an app that is not mounted.")},provide(e,t){return e in r.provides&&(f(r.provides,e)?En(`App already provides property with key "${String(e)}". It will be overwritten with the new value.`):En(`App already provides property with key "${String(e)}" inherited from its parent element. It will be overwritten with the new value.`)),r.provides[e]=t,l},runWithContext(e){const t=zs;zs=l;try{return e()}finally{zs=t}}};return l}}let zs=null;function Ws(e,t){if(Wa){let n=Wa.provides;const o=Wa.parent&&Wa.parent.provides;o===n&&(n=Wa.provides=Object.create(o)),n[e]=t}else En("provide() can only be used inside setup().")}function Gs(e,t,n=!1){const o=Wa||bo;if(o||zs){let r=zs?zs._context.provides:o?null==o.parent||o.ce?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides:void 0;if(r&&e in r)return r[e];if(arguments.length>1)return n&&y(t)?t.call(o&&o.proxy):t;En(`injection "${String(e)}" not found.`)}else En("inject() can only be used inside setup() or functional components.")}function Ks(){return!!(Wa||bo||zs)}const Js={},Zs=()=>Object.create(Js),Xs=e=>Object.getPrototypeOf(e)===Js;function Ys(e,t,n,o){const[s,i]=e.propsOptions;let a,l=!1;if(t)for(let r in t){if(T(r))continue;const c=t[r];let u;s&&f(s,u=N(r))?i&&i.includes(u)?(a||(a={}))[u]=c:n[u]=c:zi(e.emitsOptions,r)||r in o&&c===o[r]||(o[r]=c,l=!0)}if(i){const t=zt(n),o=a||r;for(let r=0;r<i.length;r++){const a=i[r];n[a]=Qs(s,t,a,o[a],e,!f(o,a))}}return l}function Qs(e,t,n,o,r,s){const i=e[n];if(null!=i){const e=f(i,"default");if(e&&void 0===o){const e=i.default;if(i.type!==Function&&!i.skipFactory&&y(e)){const{propsDefaults:s}=r;if(n in s)o=s[n];else{const i=Za(r);o=s[n]=e.call(null,t),i()}}else o=e;r.ce&&r.ce._setProp(n,o)}i[0]&&(s&&!e?o=!1:!i[1]||""!==o&&o!==I(n)||(o=!0))}return o}const ei=new WeakMap;function ti(e,t,n=!1){const o=n?ei:t.propsCache,i=o.get(e);if(i)return i;const a=e.props,l={},c=[];let d=!1;if(!y(e)){const o=e=>{d=!0;const[n,o]=ti(e,t,!0);u(l,n),o&&c.push(...o)};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}if(!a&&!d)return x(e)&&o.set(e,s),s;if(h(a))for(let e=0;e<a.length;e++){b(a[e])||En("props must be strings when using array syntax.",a[e]);const t=N(a[e]);ni(t)&&(l[t]=r)}else if(a){x(a)||En("invalid props options",a);for(const e in a){const t=N(e);if(ni(t)){const n=a[e],o=l[t]=h(n)||y(n)?{type:n}:u({},n),r=o.type;let s=!1,i=!0;if(h(r))for(let e=0;e<r.length;++e){const t=r[e],n=y(t)&&t.name;if("Boolean"===n){s=!0;break}"String"===n&&(i=!1)}else s=y(r)&&"Boolean"===r.name;o[0]=s,o[1]=i,(s||f(o,"default"))&&c.push(t)}}}const p=[l,c];return x(e)&&o.set(e,p),p}function ni(e){return"$"!==e[0]&&!T(e)||(En(`Invalid prop name: "${e}" is a reserved property.`),!1)}function oi(e,t,n){const o=zt(t),r=n.propsOptions[0],s=Object.keys(e).map((e=>N(e)));for(const e in r){let t=r[e];null!=t&&ri(e,o[e],t,Dt(o),!s.includes(e))}}function ri(e,t,n,o,r){const{type:s,required:i,validator:a,skipCheck:l}=n;if(i&&r)En('Missing required prop: "'+e+'"');else if(null!=t||i){if(null!=s&&!0!==s&&!l){let n=!1;const o=h(s)?s:[s],r=[];for(let e=0;e<o.length&&!n;e++){const{valid:s,expectedType:i}=ii(t,o[e]);r.push(i||""),n=s}if(!n)return void En(function(e,t,n){if(0===n.length)return`Prop type [] for prop "${e}" won't match anything. Did you mean to use type Array instead?`;let o=`Invalid prop: type check failed for prop "${e}". Expected ${n.map(M).join(" | ")}`;const r=n[0],s=C(t),i=ai(t,r),a=ai(t,s);1===n.length&&li(r)&&!function(...e){return e.some((e=>"boolean"===e.toLowerCase()))}(r,s)&&(o+=` with value ${i}`);o+=`, got ${s} `,li(s)&&(o+=`with value ${a}.`);return o}(e,t,r))}a&&!a(t,o)&&En('Invalid prop: custom validator check failed for prop "'+e+'".')}}const si=o("String,Number,Boolean,Function,Symbol,BigInt");function ii(e,t){let n;const o=function(e){if(null===e)return"null";if("function"==typeof e)return e.name||"";if("object"==typeof e)return e.constructor&&e.constructor.name||"";return""}(t);if("null"===o)n=null===e;else if(si(o)){const r=typeof e;n=r===o.toLowerCase(),n||"object"!==r||(n=e instanceof t)}else n="Object"===o?x(e):"Array"===o?h(e):e instanceof t;return{valid:n,expectedType:o}}function ai(e,t){return"String"===t?`"${e}"`:"Number"===t?`${Number(e)}`:`${e}`}function li(e){return["string","number","boolean"].some((t=>e.toLowerCase()===t))}const ci=e=>"_"===e[0]||"$stable"===e,ui=e=>h(e)?e.map($a):[$a(e)],di=(e,t,n)=>{if(t._n)return t;const o=Co(((...o)=>(!Wa||null===n&&bo||n&&n.root!==Wa.root||En(`Slot "${e}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`),ui(t(...o)))),n);return o._c=!1,o},pi=(e,t,n)=>{const o=e._ctx;for(const n in e){if(ci(n))continue;const r=e[n];if(y(r))t[n]=di(n,r,o);else if(null!=r){En(`Non-function value encountered for slot "${n}". Prefer function slots for better performance.`);const e=ui(r);t[n]=()=>e}}},fi=(e,t)=>{Tr(e.vnode)||En("Non-function value encountered for default slot. Prefer function slots for better performance.");const n=ui(t);e.slots.default=()=>n},hi=(e,t,n)=>{for(const o in t)!n&&ci(o)||(e[o]=t[o])},mi=(e,t,n)=>{const o=e.slots=Zs();if(32&e.vnode.shapeFlag){const e=t._;e?(hi(o,t,n),n&&D(o,"_",e,!0)):pi(t,o)}else t&&fi(e,t)},gi=(e,t,n)=>{const{vnode:o,slots:s}=e;let i=!0,a=r;if(32&o.shapeFlag){const o=t._;o?Yn?(hi(s,t,n),nt(e,"set","$slots")):n&&1===o?i=!1:hi(s,t,n):(i=!t.$stable,pi(t,s)),a=t}else t&&(fi(e,t),a={default:1});if(i)for(const e in s)ci(e)||null!=a[e]||delete s[e]};let vi,yi;function bi(e,t){e.appContext.config.performance&&xi()&&yi.mark(`vue-${t}-${e.uid}`),go(e,t,xi()?yi.now():Date.now())}function _i(e,t){if(e.appContext.config.performance&&xi()){const n=`vue-${t}-${e.uid}`,o=n+":end";yi.mark(o),yi.measure(`<${ml(e,e.type)}> ${t}`,n,o),yi.clearMarks(n),yi.clearMarks(o)}vo(e,t,xi()?yi.now():Date.now())}function xi(){return void 0!==vi||("undefined"!=typeof window&&window.performance?(vi=!0,yi=window.performance):vi=!1),vi}const Si=ca;function wi(e){return Ci(e)}function ki(e){return Ci(e,dr)}function Ci(e,t){const n=q();n.__VUE__=!0,co(n.__VUE_DEVTOOLS_GLOBAL_HOOK__,n);const{insert:o,remove:a,patchProp:l,createElement:c,createText:u,createComment:d,setText:p,setElementText:m,parentNode:g,nextSibling:v,setScopeId:y=i,insertStaticContent:b}=e,_=(e,t,n,o=null,r=null,s=null,i=void 0,a=null,l=!Yn&&!!t.dynamicChildren)=>{if(e===t)return;e&&!Ea(e,t)&&(o=ee(e),J(e,r,s,!0),e=null),-2===t.patchFlag&&(l=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case pa:x(e,t,n,o);break;case fa:S(e,t,n,o);break;case ha:null==e?w(t,n,o,i):k(e,t,n,i);break;case da:L(e,t,n,o,r,s,i,a,l);break;default:1&d?E(e,t,n,o,r,s,i,a,l):6&d?F(e,t,n,o,r,s,i,a,l):64&d||128&d?c.process(e,t,n,o,r,s,i,a,l,oe):En("Invalid VNode type:",c,`(${typeof c})`)}null!=u&&r&&ir(u,e&&e.ref,s,t||e,!t)},x=(e,t,n,r)=>{if(null==e)o(t.el=u(t.children),n,r);else{const n=t.el=e.el;t.children!==e.children&&p(n,t.children)}},S=(e,t,n,r)=>{null==e?o(t.el=d(t.children||""),n,r):t.el=e.el},w=(e,t,n,o)=>{[e.el,e.anchor]=b(e.children,t,n,o,e.el,e.anchor)},k=(e,t,n,o)=>{if(t.children!==e.children){const r=v(e.anchor);C(e),[t.el,t.anchor]=b(t.children,n,r,o)}else t.el=e.el,t.anchor=e.anchor},C=({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=v(e),a(e),e=n;a(t)},E=(e,t,n,o,r,s,i,a,l)=>{"svg"===t.type?i="svg":"math"===t.type&&(i="mathml"),null==e?j(t,n,o,r,s,i,a,l):R(e,t,r,s,i,a,l)},j=(e,t,n,r,s,i,a,u)=>{let d,p;const{props:f,shapeFlag:h,transition:g,dirs:v}=e;if(d=e.el=c(e.type,i,f&&f.is,f),8&h?m(d,e.children):16&h&&O(e.children,d,null,r,s,Ei(e,i),a,u),v&&To(e,null,r,"created"),A(d,e,e.scopeId,a,r),f){for(const e in f)"value"===e||T(e)||l(d,e,null,f[e],i,r);"value"in f&&l(d,"value",null,f.value,i),(p=f.onVnodeBeforeMount)&&Va(p,r,e)}D(d,"__vnode",e,!0),D(d,"__vueParentComponent",r,!0),v&&To(e,null,r,"beforeMount");const y=Ti(s,g);y&&g.beforeEnter(d),o(d,t,n),((p=f&&f.onVnodeMounted)||y||v)&&Si((()=>{p&&Va(p,r,e),y&&g.enter(d),v&&To(e,null,r,"mounted")}),s)},A=(e,t,n,o,r)=>{if(n&&y(e,n),o)for(let t=0;t<o.length;t++)y(e,o[t]);if(r){let n=r.subTree;if(n.patchFlag>0&&2048&n.patchFlag&&(n=Zi(n.children)||n),t===n||na(n.type)&&(n.ssContent===t||n.ssFallback===t)){const t=r.vnode;A(e,t,t.scopeId,t.slotScopeIds,r.parent)}}},O=(e,t,n,o,r,s,i,a,l=0)=>{for(let c=l;c<e.length;c++){const l=e[c]=a?Da(e[c]):$a(e[c]);_(null,l,t,n,o,r,s,i,a)}},R=(e,t,n,o,s,i,a)=>{const c=t.el=e.el;c.__vnode=t;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const f=e.props||r,h=t.props||r;let g;if(n&&ji(n,!1),(g=h.onVnodeBeforeUpdate)&&Va(g,n,t,e),p&&To(t,e,n,"beforeUpdate"),n&&ji(n,!0),Yn&&(u=0,a=!1,d=null),(f.innerHTML&&null==h.innerHTML||f.textContent&&null==h.textContent)&&m(c,""),d?(P(e.dynamicChildren,d,c,n,o,Ei(t,s),i),Ai(e,t)):a||z(e,t,c,null,n,o,Ei(t,s),i,!1),u>0){if(16&u)M(c,f,h,n,s);else if(2&u&&f.class!==h.class&&l(c,"class",null,h.class,s),4&u&&l(c,"style",f.style,h.style,s),8&u){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const o=e[t],r=f[o],i=h[o];i===r&&"value"!==o||l(c,o,r,i,s,n)}}1&u&&e.children!==t.children&&m(c,t.children)}else a||null!=d||M(c,f,h,n,s);((g=h.onVnodeUpdated)||p)&&Si((()=>{g&&Va(g,n,t,e),p&&To(t,e,n,"updated")}),o)},P=(e,t,n,o,r,s,i)=>{for(let a=0;a<t.length;a++){const l=e[a],c=t[a],u=l.el&&(l.type===da||!Ea(l,c)||198&l.shapeFlag)?g(l.el):n;_(l,c,u,null,o,r,s,i,!0)}},M=(e,t,n,o,s)=>{if(t!==n){if(t!==r)for(const r in t)T(r)||r in n||l(e,r,t[r],null,s,o);for(const r in n){if(T(r))continue;const i=n[r],a=t[r];i!==a&&"value"!==r&&l(e,r,a,i,s,o)}"value"in n&&l(e,"value",t.value,n.value,s)}},L=(e,t,n,r,s,i,a,l,c)=>{const d=t.el=e?e.el:u(""),p=t.anchor=e?e.anchor:u("");let{patchFlag:f,dynamicChildren:h,slotScopeIds:m}=t;(Yn||2048&f)&&(f=0,c=!1,h=null),m&&(l=l?l.concat(m):m),null==e?(o(d,n,r),o(p,n,r),O(t.children||[],n,p,s,i,a,l,c)):f>0&&64&f&&h&&e.dynamicChildren?(P(e.dynamicChildren,h,n,s,i,a,l),Ai(e,t)):z(e,t,n,p,s,i,a,l,c)},F=(e,t,n,o,r,s,i,a,l)=>{t.slotScopeIds=a,null==e?512&t.shapeFlag?r.ctx.activate(t,n,o,i,l):B(t,n,o,r,s,i,l):U(e,t,l)},B=(e,t,n,o,r,s,i)=>{const a=e.component=za(e,o,r);if(a.type.__hmrId&&function(e){const t=e.type.__hmrId;let n=eo.get(t);n||(to(t,e.type),n=eo.get(t)),n.instances.add(e)}(a),wn(e),bi(a,"mount"),Tr(e)&&(a.ctx.renderer=oe),bi(a,"init"),rl(a,!1,i),_i(a,"init"),Yn&&(e.el=null),a.asyncDep){if(r&&r.registerDep(a,V,i),!e.el){const e=a.subTree=Ra(fa);S(null,e,t,n)}}else V(a,e,t,n,r,s,i);kn(),_i(a,"mount")},U=(e,t,n)=>{const o=t.component=e.component;if(function(e,t,n){const{props:o,children:r,component:s}=e,{props:i,children:a,patchFlag:l}=t,c=s.emitsOptions;if((r||a)&&Yn)return!0;if(t.dirs||t.transition)return!0;if(!(n&&l>=0))return!(!r&&!a||a&&a.$stable)||o!==i&&(o?!i||ea(o,i,c):!!i);if(1024&l)return!0;if(16&l)return o?ea(o,i,c):!!i;if(8&l){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(i[n]!==o[n]&&!zi(c,n))return!0}}return!1}(e,t,n)){if(o.asyncDep&&!o.asyncResolved)return wn(t),H(o,t,n),void kn();o.next=t,o.update()}else t.el=e.el,o.vnode=t},V=(e,t,n,o,r,s,i)=>{const a=()=>{if(e.isMounted){let{next:t,bu:n,u:o,parent:l,vnode:c}=e;{const n=Oi(e);if(n)return t&&(t.el=c.el,H(e,t,i)),void n.asyncDep.then((()=>{e.isUnmounted||a()}))}let u,d=t;wn(t||e.vnode),ji(e,!1),t?(t.el=c.el,H(e,t,i)):t=c,n&&$(n),(u=t.props&&t.props.onVnodeBeforeUpdate)&&Va(u,l,t,c),ji(e,!0),bi(e,"render");const p=Ki(e);_i(e,"render");const f=e.subTree;e.subTree=p,bi(e,"patch"),_(f,p,g(f.el),ee(f),e,r,s),_i(e,"patch"),t.el=p.el,null===d&&ta(e,p.el),o&&Si(o,r),(u=t.props&&t.props.onVnodeUpdated)&&Si((()=>Va(u,l,t,c)),r),po(e),kn()}else{let i;const{el:a,props:l}=t,{bm:c,m:u,parent:d,root:p,type:f}=e,h=Cr(t);if(ji(e,!1),c&&$(c),!h&&(i=l&&l.onVnodeBeforeMount)&&Va(i,d,t),ji(e,!0),a&&se){const t=()=>{bi(e,"render"),e.subTree=Ki(e),_i(e,"render"),bi(e,"hydrate"),se(a,e.subTree,e,r,null),_i(e,"hydrate")};h&&f.__asyncHydrate?f.__asyncHydrate(a,e,t):t()}else{p.ce&&p.ce._injectChildStyle(f),bi(e,"render");const i=e.subTree=Ki(e);_i(e,"render"),bi(e,"patch"),_(null,i,n,o,e,r,s),_i(e,"patch"),t.el=i.el}if(u&&Si(u,r),!h&&(i=l&&l.onVnodeMounted)){const e=t;Si((()=>Va(i,d,e)),r)}(256&t.shapeFlag||d&&Cr(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&Si(e.a,r),e.isMounted=!0,uo(e),t=n=o=null}};e.scope.on();const l=e.effect=new je(a);e.scope.off();const c=e.update=l.run.bind(l),u=e.job=l.runIfDirty.bind(l);u.i=e,u.id=e.uid,l.scheduler=()=>Hn(u),ji(e,!0),l.onTrack=e.rtc?t=>$(e.rtc,t):void 0,l.onTrigger=e.rtg?t=>$(e.rtg,t):void 0,c()},H=(e,t,n)=>{t.component=e;const o=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,o){const{props:r,attrs:s,vnode:{patchFlag:i}}=e,a=zt(r),[l]=e.propsOptions;let c=!1;if(function(e){for(;e;){if(e.type.__hmrId)return!0;e=e.parent}}(e)||!(o||i>0)||16&i){let o;Ys(e,t,r,s)&&(c=!0);for(const s in a)t&&(f(t,s)||(o=I(s))!==s&&f(t,o))||(l?!n||void 0===n[s]&&void 0===n[o]||(r[s]=Qs(l,a,s,void 0,e,!0)):delete r[s]);if(s!==a)for(const e in s)t&&f(t,e)||(delete s[e],c=!0)}else if(8&i){const n=e.vnode.dynamicProps;for(let o=0;o<n.length;o++){let i=n[o];if(zi(e.emitsOptions,i))continue;const u=t[i];if(l)if(f(s,i))u!==s[i]&&(s[i]=u,c=!0);else{const t=N(i);r[t]=Qs(l,a,t,u,e,!1)}else u!==s[i]&&(s[i]=u,c=!0)}}c&&nt(e.attrs,"set",""),oi(t||{},r,e)}(e,t.props,o,n),gi(e,t.children,n),He(),Gn(e),ze()},z=(e,t,n,o,r,s,i,a,l=!1)=>{const c=e&&e.children,u=e?e.shapeFlag:0,d=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void G(c,d,n,o,r,s,i,a,l);if(256&p)return void W(c,d,n,o,r,s,i,a,l)}8&f?(16&u&&Q(c,r,s),d!==c&&m(n,d)):16&u?16&f?G(c,d,n,o,r,s,i,a,l):Q(c,r,s,!0):(8&u&&m(n,""),16&f&&O(d,n,o,r,s,i,a,l))},W=(e,t,n,o,r,i,a,l,c)=>{t=t||s;const u=(e=e||s).length,d=t.length,p=Math.min(u,d);let f;for(f=0;f<p;f++){const o=t[f]=c?Da(t[f]):$a(t[f]);_(e[f],o,n,null,r,i,a,l,c)}u>d?Q(e,r,i,!0,!1,p):O(t,n,o,r,i,a,l,c,p)},G=(e,t,n,o,r,i,a,l,c)=>{let u=0;const d=t.length;let p=e.length-1,f=d-1;for(;u<=p&&u<=f;){const o=e[u],s=t[u]=c?Da(t[u]):$a(t[u]);if(!Ea(o,s))break;_(o,s,n,null,r,i,a,l,c),u++}for(;u<=p&&u<=f;){const o=e[p],s=t[f]=c?Da(t[f]):$a(t[f]);if(!Ea(o,s))break;_(o,s,n,null,r,i,a,l,c),p--,f--}if(u>p){if(u<=f){const e=f+1,s=e<d?t[e].el:o;for(;u<=f;)_(null,t[u]=c?Da(t[u]):$a(t[u]),n,s,r,i,a,l,c),u++}}else if(u>f)for(;u<=p;)J(e[u],r,i,!0),u++;else{const h=u,m=u,g=new Map;for(u=m;u<=f;u++){const e=t[u]=c?Da(t[u]):$a(t[u]);null!=e.key&&(g.has(e.key)&&En("Duplicate keys found during update:",JSON.stringify(e.key),"Make sure keys are unique."),g.set(e.key,u))}let v,y=0;const b=f-m+1;let x=!1,S=0;const w=new Array(b);for(u=0;u<b;u++)w[u]=0;for(u=h;u<=p;u++){const o=e[u];if(y>=b){J(o,r,i,!0);continue}let s;if(null!=o.key)s=g.get(o.key);else for(v=m;v<=f;v++)if(0===w[v-m]&&Ea(o,t[v])){s=v;break}void 0===s?J(o,r,i,!0):(w[s-m]=u+1,s>=S?S=s:x=!0,_(o,t[s],n,null,r,i,a,l,c),y++)}const k=x?function(e){const t=e.slice(),n=[0];let o,r,s,i,a;const l=e.length;for(o=0;o<l;o++){const l=e[o];if(0!==l){if(r=n[n.length-1],e[r]<l){t[o]=r,n.push(o);continue}for(s=0,i=n.length-1;s<i;)a=s+i>>1,e[n[a]]<l?s=a+1:i=a;l<e[n[s]]&&(s>0&&(t[o]=n[s-1]),n[s]=o)}}s=n.length,i=n[s-1];for(;s-- >0;)n[s]=i,i=t[i];return n}(w):s;for(v=k.length-1,u=b-1;u>=0;u--){const e=m+u,s=t[e],p=e+1<d?t[e+1].el:o;0===w[u]?_(null,s,n,p,r,i,a,l,c):x&&(v<0||u!==k[v]?K(s,n,p,2):v--)}}},K=(e,t,n,r,s=null)=>{const{el:i,type:l,transition:c,children:u,shapeFlag:d}=e;if(6&d)return void K(e.component.subTree,t,n,r);if(128&d)return void e.suspense.move(t,n,r);if(64&d)return void l.move(e,t,n,oe);if(l===da){o(i,t,n);for(let e=0;e<u.length;e++)K(u[e],t,n,r);return void o(e.anchor,t,n)}if(l===ha)return void(({el:e,anchor:t},n,r)=>{let s;for(;e&&e!==t;)s=v(e),o(e,n,r),e=s;o(t,n,r)})(e,t,n);if(2!==r&&1&d&&c)if(0===r)c.beforeEnter(i),o(i,t,n),Si((()=>c.enter(i)),s);else{const{leave:r,delayLeave:s,afterLeave:l}=c,u=()=>{e.ctx.isUnmounted?a(i):o(i,t,n)},d=()=>{r(i,(()=>{u(),l&&l()}))};s?s(i,u,d):d()}else o(i,t,n)},J=(e,t,n,o=!1,r=!1)=>{const{type:s,props:i,ref:a,children:l,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:p,cacheIndex:f}=e;if(-2===d&&(r=!1),null!=a&&(He(),ir(a,null,n,e,!0),ze()),null!=f&&(t.renderCache[f]=void 0),256&u)return void t.ctx.deactivate(e);const h=1&u&&p,m=!Cr(e);let g;if(m&&(g=i&&i.onVnodeBeforeUnmount)&&Va(g,t,e),6&u)Y(e.component,n,o);else{if(128&u)return void e.suspense.unmount(n,o);h&&To(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,oe,o):c&&!c.hasOnce&&(s!==da||d>0&&64&d)?Q(c,t,n,!1,!0):(s===da&&384&d||!r&&16&u)&&Q(l,t,n),o&&Z(e)}(m&&(g=i&&i.onVnodeUnmounted)||h)&&Si((()=>{g&&Va(g,t,e),h&&To(e,null,t,"unmounted")}),n)},Z=e=>{const{type:t,el:n,anchor:o,transition:r}=e;if(t===da)return void(e.patchFlag>0&&2048&e.patchFlag&&r&&!r.persisted?e.children.forEach((e=>{e.type===fa?a(e.el):Z(e)})):X(n,o));if(t===ha)return void C(e);const s=()=>{a(n),r&&!r.persisted&&r.afterLeave&&r.afterLeave()};if(1&e.shapeFlag&&r&&!r.persisted){const{leave:t,delayLeave:o}=r,i=()=>t(n,s);o?o(e.el,s,i):i()}else s()},X=(e,t)=>{let n;for(;e!==t;)n=v(e),a(e),e=n;a(t)},Y=(e,t,n)=>{e.type.__hmrId&&function(e){eo.get(e.type.__hmrId).instances.delete(e)}(e);const{bum:o,scope:r,job:s,subTree:i,um:a,m:l,a:c,parent:u,slots:{__:d}}=e;Ri(l),Ri(c),o&&$(o),u&&h(d)&&d.forEach((e=>{u.renderCache[e]=void 0})),r.stop(),s&&(s.flags|=8,J(i,e,t,n)),a&&Si(a,t),Si((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve()),ho(e)},Q=(e,t,n,o=!1,r=!1,s=0)=>{for(let i=s;i<e.length;i++)J(e[i],t,n,o,r)},ee=e=>{if(6&e.shapeFlag)return ee(e.component.subTree);if(128&e.shapeFlag)return e.suspense.next();const t=v(e.anchor||e.el),n=t&&t[Ao];return n?v(n):t};let te=!1;const ne=(e,t,n)=>{null==e?t._vnode&&J(t._vnode,null,null,!0):_(t._vnode||null,e,t,null,null,null,n),t._vnode=e,te||(te=!0,Gn(),Kn(),te=!1)},oe={p:_,um:J,m:K,r:Z,mt:B,mc:O,pc:z,pbc:P,n:ee,o:e};let re,se;return t&&([re,se]=t(oe)),{render:ne,hydrate:re,createApp:Hs(ne,re)}}function Ei({type:e,props:t},n){return"svg"===n&&"foreignObject"===e||"mathml"===n&&"annotation-xml"===e&&t&&t.encoding&&t.encoding.includes("html")?void 0:n}function ji({effect:e,job:t},n){n?(e.flags|=32,t.flags|=4):(e.flags&=-33,t.flags&=-5)}function Ti(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function Ai(e,t,n=!1){const o=e.children,r=t.children;if(h(o)&&h(r))for(let e=0;e<o.length;e++){const t=o[e];let s=r[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=r[e]=Da(r[e]),s.el=t.el),n||-2===s.patchFlag||Ai(t,s)),s.type===pa&&(s.el=t.el),s.type!==fa||s.el||(s.el=t.el),s.el&&(s.el.__vnode=s)}}function Oi(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:Oi(t)}function Ri(e){if(e)for(let t=0;t<e.length;t++)e[t].flags|=8}const Ni=Symbol.for("v-scx"),Pi=()=>{{const e=Gs(Ni);return e||En("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function Ii(e,t){return $i(e,null,t)}function Mi(e,t){return $i(e,null,u({},t,{flush:"post"}))}function Li(e,t){return $i(e,null,u({},t,{flush:"sync"}))}function Fi(e,t,n){return y(t)||En("`watch(fn, options?)` signature has been moved to a separate API. Use `watchEffect(fn, options?)` instead. `watch` now only supports `watch(source, cb, options?) signature."),$i(e,t,n)}function $i(e,t,n=r){const{immediate:o,deep:s,flush:a,once:l}=n;t||(void 0!==o&&En('watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.'),void 0!==s&&En('watch() "deep" option is only respected when using the watch(source, callback, options?) signature.'),void 0!==l&&En('watch() "once" option is only respected when using the watch(source, callback, options?) signature.'));const c=u({},n);c.onWarn=En;const p=t&&o||!t&&"post"!==a;let f;if(ol)if("sync"===a){const e=Pi();f=e.__watcherHandles||(e.__watcherHandles=[])}else if(!p){const e=()=>{};return e.stop=i,e.resume=i,e.pause=i,e}const m=Wa;c.call=(e,t,n)=>Pn(e,m,t,n);let g=!1;"post"===a?c.scheduler=e=>{Si(e,m&&m.suspense)}:"sync"!==a&&(g=!0,c.scheduler=(e,t)=>{t?e():Hn(e)}),c.augmentJob=e=>{t&&(e.flags|=4),g&&(e.flags|=2,m&&(e.id=m.uid,e.i=m))};const v=function(e,t,n=r){const{immediate:o,deep:s,once:a,scheduler:l,augmentJob:c,call:u}=n,p=e=>{(n.onWarn||be)("Invalid watch source: ",e,"A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.")},f=e=>s?e:qt(e)||!1===s||0===s?xn(e,1):xn(e);let m,g,v,b,_=!1,x=!1;if(Jt(e)?(g=()=>e.value,_=qt(e)):Ut(e)?(g=()=>f(e),_=!0):h(e)?(x=!0,_=e.some((e=>Ut(e)||qt(e))),g=()=>e.map((e=>Jt(e)?e.value:Ut(e)?f(e):y(e)?u?u(e,2):e():void p(e)))):y(e)?g=t?u?()=>u(e,2):e:()=>{if(v){He();try{v()}finally{ze()}}const t=yn;yn=m;try{return u?u(e,3,[b]):e(b)}finally{yn=t}}:(g=i,p(e)),t&&s){const e=g,t=!0===s?1/0:s;g=()=>xn(e(),t)}const S=ke(),w=()=>{m.stop(),S&&S.active&&d(S.effects,m)};if(a&&t){const e=t;t=(...t)=>{e(...t),w()}}let k=x?new Array(e.length).fill(gn):gn;const C=e=>{if(1&m.flags&&(m.dirty||e))if(t){const e=m.run();if(s||_||(x?e.some(((e,t)=>F(e,k[t]))):F(e,k))){v&&v();const n=yn;yn=m;try{const n=[e,k===gn?void 0:x&&k[0]===gn?[]:k,b];k=e,u?u(t,3,n):t(...n)}finally{yn=n}}}else m.run()};return c&&c(C),m=new je(g),m.scheduler=l?()=>l(C,!1):C,b=e=>_n(e,!1,m),v=m.onStop=()=>{const e=vn.get(m);if(e){if(u)u(e,4);else for(const t of e)t();vn.delete(m)}},m.onTrack=n.onTrack,m.onTrigger=n.onTrigger,t?o?C(!0):k=m.run():l?l(C.bind(null,!0),!0):m.run(),w.pause=m.pause.bind(m),w.resume=m.resume.bind(m),w.stop=w,w}(e,t,c);return ol&&(f?f.push(v):p&&v()),v}function Di(e,t,n){const o=this.proxy,r=b(e)?e.includes(".")?Bi(o,e):()=>o[e]:e.bind(o,o);let s;y(t)?s=t:(s=t.handler,n=t);const i=Za(this),a=$i(r,s.bind(o),n);return i(),a}function Bi(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function Ui(e,t,n=r){const o=Ga();if(!o)return En("useModel() called without active instance."),Zt();const s=N(t);if(!o.propsOptions[0][s])return En(`useModel() called with prop "${t}" which is not declared.`),Zt();const i=I(t),a=Vi(e,s),l=an(((a,l)=>{let c,u,d=r;return Li((()=>{const t=e[s];F(c,t)&&(c=t,l())})),{get(){return a(),n.get?n.get(c):c},set(e){const a=n.set?n.set(e):e;if(!(F(a,c)||d!==r&&F(e,d)))return;const p=o.vnode.props;p&&(t in p||s in p||i in p)&&(`onUpdate:${t}`in p||`onUpdate:${s}`in p||`onUpdate:${i}`in p)||(c=e,l()),o.emit(`update:${t}`,a),F(e,a)&&F(e,d)&&!F(a,u)&&l(),d=e,u=a}}}));return l[Symbol.iterator]=()=>{let e=0;return{next(){return e<2?{value:e++?a||r:l,done:!1}:{done:!0}}}},l}const Vi=(e,t)=>"modelValue"===t||"model-value"===t?e.modelModifiers:e[`${t}Modifiers`]||e[`${N(t)}Modifiers`]||e[`${I(t)}Modifiers`];function qi(e,t,...n){if(e.isUnmounted)return;const o=e.vnode.props||r;{const{emitsOptions:o,propsOptions:[r]}=e;if(o)if(t in o){const e=o[t];if(y(e)){e(...n)||En(`Invalid event arguments: event validation failed for event "${t}".`)}}else r&&L(N(t))in r||En(`Component emitted event "${t}" but it is neither declared in the emits option nor as an "${L(N(t))}" prop.`)}let s=n;const i=t.startsWith("update:"),a=i&&Vi(o,t.slice(7));a&&(a.trim&&(s=n.map((e=>b(e)?e.trim():e))),a.number&&(s=n.map(B))),function(e,t,n){lo("component:emit",e.appContext.app,e,t,n)}(e,t,s);{const n=t.toLowerCase();n!==t&&o[L(n)]&&En(`Event "${n}" is emitted in component ${ml(e,e.type)} but the handler is registered for "${t}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${I(t)}" instead of "${t}".`)}let l,c=o[l=L(t)]||o[l=L(N(t))];!c&&i&&(c=o[l=L(I(t))]),c&&Pn(c,e,6,s);const u=o[l+"Once"];if(u){if(e.emitted){if(e.emitted[l])return}else e.emitted={};e.emitted[l]=!0,Pn(u,e,6,s)}}function Hi(e,t,n=!1){const o=t.emitsCache,r=o.get(e);if(void 0!==r)return r;const s=e.emits;let i={},a=!1;if(!y(e)){const o=e=>{const n=Hi(e,t,!0);n&&(a=!0,u(i,n))};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}return s||a?(h(s)?s.forEach((e=>i[e]=null)):u(i,s),x(e)&&o.set(e,i),i):(x(e)&&o.set(e,null),null)}function zi(e,t){return!(!e||!l(t))&&(t=t.slice(2).replace(/Once$/,""),f(e,t[0].toLowerCase()+t.slice(1))||f(e,I(t))||f(e,t))}let Wi=!1;function Gi(){Wi=!0}function Ki(e){const{type:t,vnode:n,proxy:o,withProxy:r,propsOptions:[s],slots:i,attrs:a,emit:u,render:d,renderCache:p,props:f,data:h,setupState:m,ctx:g,inheritAttrs:v}=e,y=xo(e);let b,_;Wi=!1;try{if(4&n.shapeFlag){const e=r||o,t=m.__isScriptSetup?new Proxy(e,{get(e,t,n){return En(`Property '${String(t)}' was accessed via 'this'. Avoid using 'this' in templates.`),Reflect.get(e,t,n)}}):e;b=$a(d.call(t,e,p,Dt(f),m,h,g)),_=a}else{const e=t;a===f&&Gi(),b=$a(e.length>1?e(Dt(f),{get attrs(){return Gi(),Dt(a)},slots:i,emit:u}):e(Dt(f),null)),_=t.props?a:Xi(a)}}catch(t){ma.length=0,In(t,e,1),b=Ra(fa)}let x,S=b;if(b.patchFlag>0&&2048&b.patchFlag&&([S,x]=Ji(b)),_&&!1!==v){const e=Object.keys(_),{shapeFlag:t}=S;if(e.length)if(7&t)s&&e.some(c)&&(_=Yi(_,s)),S=Pa(S,_,!1,!0);else if(!Wi&&S.type!==fa){const e=Object.keys(a),t=[],n=[];for(let o=0,r=e.length;o<r;o++){const r=e[o];l(r)?c(r)||t.push(r[2].toLowerCase()+r.slice(3)):n.push(r)}n.length&&En(`Extraneous non-props attributes (${n.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text or teleport root nodes.`),t.length&&En(`Extraneous non-emits event listeners (${t.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`)}}return n.dirs&&(Qi(S)||En("Runtime directive used on component with non-element root node. The directives will not function as intended."),S=Pa(S,null,!1,!0),S.dirs=S.dirs?S.dirs.concat(n.dirs):n.dirs),n.transition&&(Qi(S)||En("Component inside <Transition> renders non-element root node that cannot be animated."),Qo(S,n.transition)),x?x(S):b=S,xo(y),b}const Ji=e=>{const t=e.children,n=e.dynamicChildren,o=Zi(t,!1);if(!o)return[e,void 0];if(o.patchFlag>0&&2048&o.patchFlag)return Ji(o);const r=t.indexOf(o),s=n?n.indexOf(o):-1;return[$a(o),o=>{t[r]=o,n&&(s>-1?n[s]=o:o.patchFlag>0&&(e.dynamicChildren=[...n,o]))}]};function Zi(e,t=!0){let n;for(let o=0;o<e.length;o++){const r=e[o];if(!Ca(r))return;if(r.type!==fa||"v-if"===r.children){if(n)return;if(n=r,t&&n.patchFlag>0&&2048&n.patchFlag)return Zi(n.children)}}return n}const Xi=e=>{let t;for(const n in e)("class"===n||"style"===n||l(n))&&((t||(t={}))[n]=e[n]);return t},Yi=(e,t)=>{const n={};for(const o in e)c(o)&&o.slice(9)in t||(n[o]=e[o]);return n},Qi=e=>7&e.shapeFlag||e.type===fa;function ea(e,t,n){const o=Object.keys(t);if(o.length!==Object.keys(e).length)return!0;for(let r=0;r<o.length;r++){const s=o[r];if(t[s]!==e[s]&&!zi(n,s))return!0}return!1}function ta({vnode:e,parent:t},n){for(;t;){const o=t.subTree;if(o.suspense&&o.suspense.activeBranch===e&&(o.el=e.el),o!==e)break;(e=t.vnode).el=n,t=t.parent}}const na=e=>e.__isSuspense;let oa=0;const ra={name:"Suspense",__isSuspense:!0,process(e,t,n,o,r,s,i,a,l,c){if(null==e)!function(e,t,n,o,r,s,i,a,l){const{p:c,o:{createElement:u}}=l,d=u("div"),p=e.suspense=aa(e,r,o,t,d,n,s,i,a,l);c(null,p.pendingBranch=e.ssContent,d,null,o,p,s,i),p.deps>0?(sa(e,"onPending"),sa(e,"onFallback"),c(null,e.ssFallback,t,n,o,null,s,i),ua(p,e.ssFallback)):p.resolve(!1,!0)}(t,n,o,r,s,i,a,l,c);else{if(s&&s.deps>0&&!e.suspense.isInFallback)return t.suspense=e.suspense,t.suspense.vnode=t,void(t.el=e.el);!function(e,t,n,o,r,s,i,a,{p:l,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const p=t.ssContent,f=t.ssFallback,{activeBranch:h,pendingBranch:m,isInFallback:g,isHydrating:v}=d;if(m)d.pendingBranch=p,Ea(p,m)?(l(m,p,d.hiddenContainer,null,r,d,s,i,a),d.deps<=0?d.resolve():g&&(v||(l(h,f,n,o,r,null,s,i,a),ua(d,f)))):(d.pendingId=oa++,v?(d.isHydrating=!1,d.activeBranch=m):c(m,r,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),g?(l(null,p,d.hiddenContainer,null,r,d,s,i,a),d.deps<=0?d.resolve():(l(h,f,n,o,r,null,s,i,a),ua(d,f))):h&&Ea(p,h)?(l(h,p,n,o,r,d,s,i,a),d.resolve(!0)):(l(null,p,d.hiddenContainer,null,r,d,s,i,a),d.deps<=0&&d.resolve()));else if(h&&Ea(p,h))l(h,p,n,o,r,d,s,i,a),ua(d,p);else if(sa(t,"onPending"),d.pendingBranch=p,512&p.shapeFlag?d.pendingId=p.component.suspenseId:d.pendingId=oa++,l(null,p,d.hiddenContainer,null,r,d,s,i,a),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(f)}),e):0===e&&d.fallback(f)}}(e,t,n,o,r,i,a,l,c)}},hydrate:function(e,t,n,o,r,s,i,a,l){const c=t.suspense=aa(t,o,n,e.parentNode,document.createElement("div"),null,r,s,i,a,!0),u=l(e,c.pendingBranch=t.ssContent,n,c,s,i);0===c.deps&&c.resolve(!1,!0);return u},normalize:function(e){const{shapeFlag:t,children:n}=e,o=32&t;e.ssContent=la(o?n.default:n),e.ssFallback=o?la(n.fallback):Ra(fa)}};function sa(e,t){const n=e.props&&e.props[t];y(n)&&n()}let ia=!1;function aa(e,t,n,o,r,s,i,a,l,c,u=!1){ia||(ia=!0);const{p:d,m:p,um:f,n:h,o:{parentNode:m,remove:g}}=c;let v;const y=function(e){const t=e.props&&e.props.suspensible;return null!=t&&!1!==t}(e);y&&t&&t.pendingBranch&&(v=t.pendingId,t.deps++);const b=e.props?U(e.props.timeout):void 0;An(b,"Suspense timeout");const _=s,x={vnode:e,parent:t,parentComponent:n,namespace:i,container:o,hiddenContainer:r,deps:0,pendingId:oa++,timeout:"number"==typeof b?b:-1,activeBranch:null,pendingBranch:null,isInFallback:!u,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1,n=!1){if(!e&&!x.pendingBranch)throw new Error("suspense.resolve() is called without a pending branch.");if(x.isUnmounted)throw new Error("suspense.resolve() is called on an already unmounted suspense boundary.");const{vnode:o,activeBranch:r,pendingBranch:i,pendingId:a,effects:l,parentComponent:c,container:u}=x;let d=!1;x.isHydrating?x.isHydrating=!1:e||(d=r&&i.transition&&"out-in"===i.transition.mode,d&&(r.transition.afterLeave=()=>{a===x.pendingId&&(p(i,u,s===_?h(r):s,0),Wn(l))}),r&&(m(r.el)===u&&(s=h(r)),f(r,c,x,!0)),d||p(i,u,s,0)),ua(x,i),x.pendingBranch=null,x.isInFallback=!1;let g=x.parent,b=!1;for(;g;){if(g.pendingBranch){g.effects.push(...l),b=!0;break}g=g.parent}b||d||Wn(l),x.effects=[],y&&t&&t.pendingBranch&&v===t.pendingId&&(t.deps--,0!==t.deps||n||t.resolve()),sa(o,"onResolve")},fallback(e){if(!x.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:o,container:r,namespace:s}=x;sa(t,"onFallback");const i=h(n),c=()=>{x.isInFallback&&(d(null,e,r,i,o,null,s,a,l),ua(x,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(n.transition.afterLeave=c),x.isInFallback=!0,f(n,o,null,!0),u||c()},move(e,t,n){x.activeBranch&&p(x.activeBranch,e,t,n),x.container=e},next(){return x.activeBranch&&h(x.activeBranch)},registerDep(e,t,n){const o=!!x.pendingBranch;o&&x.deps++;const r=e.vnode.el;e.asyncDep.catch((t=>{In(t,e,0)})).then((s=>{if(e.isUnmounted||x.isUnmounted||x.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:a}=e;wn(a),sl(e,s,!1),r&&(a.el=r);const l=!r&&e.subTree.el;t(e,a,m(r||e.subTree.el),r?null:h(e.subTree),x,i,n),l&&g(l),ta(e,a.el),kn(),o&&0===--x.deps&&x.resolve()}))},unmount(e,t){x.isUnmounted=!0,x.activeBranch&&f(x.activeBranch,n,e,t),x.pendingBranch&&f(x.pendingBranch,n,e,t)}};return x}function la(e){let t;if(y(e)){const n=_a&&e._c;n&&(e._d=!1,va()),e=e(),n&&(e._d=!0,t=ga,ya())}if(h(e)){const t=Zi(e);!t&&e.filter((e=>e!==Yr)).length>0&&En("<Suspense> slots expect a single root node."),e=t}return e=$a(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function ca(e,t){t&&t.pendingBranch?h(e)?t.effects.push(...e):t.effects.push(e):Wn(e)}function ua(e,t){e.activeBranch=t;const{vnode:n,parentComponent:o}=e;let r=t.el;for(;!r&&t.component;)r=(t=t.component.subTree).el;n.el=r,o&&o.subTree===n&&(o.vnode.el=r,ta(o,r))}const da=Symbol.for("v-fgt"),pa=Symbol.for("v-txt"),fa=Symbol.for("v-cmt"),ha=Symbol.for("v-stc"),ma=[];let ga=null;function va(e=!1){ma.push(ga=e?null:[])}function ya(){ma.pop(),ga=ma[ma.length-1]||null}let ba,_a=1;function xa(e,t=!1){_a+=e,e<0&&ga&&t&&(ga.hasOnce=!0)}function Sa(e){return e.dynamicChildren=_a>0?ga||s:null,ya(),_a>0&&ga&&ga.push(e),e}function wa(e,t,n,o,r,s){return Sa(Oa(e,t,n,o,r,s,!0))}function ka(e,t,n,o,r){return Sa(Ra(e,t,n,o,r,!0))}function Ca(e){return!!e&&!0===e.__v_isVNode}function Ea(e,t){if(6&t.shapeFlag&&e.component){const n=Qn.get(t.type);if(n&&n.has(e.component))return e.shapeFlag&=-257,t.shapeFlag&=-513,!1}return e.type===t.type&&e.key===t.key}function ja(e){ba=e}const Ta=({key:e})=>null!=e?e:null,Aa=({ref:e,ref_key:t,ref_for:n})=>("number"==typeof e&&(e=""+e),null!=e?b(e)||Jt(e)||y(e)?{i:bo,r:e,k:t,f:!!n}:e:null);function Oa(e,t=null,n=null,o=0,r=null,s=(e===da?0:1),i=!1,a=!1){const l={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Ta(t),ref:t&&Aa(t),scopeId:_o,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:o,dynamicProps:r,dynamicChildren:null,appContext:null,ctx:bo};return a?(Ba(l,n),128&s&&e.normalize(l)):n&&(l.shapeFlag|=b(n)?8:16),l.key!=l.key&&En("VNode created with invalid key (NaN). VNode type:",l.type),_a>0&&!i&&ga&&(l.patchFlag>0||6&s)&&32!==l.patchFlag&&ga.push(l),l}const Ra=(...e)=>function(e,t=null,n=null,o=0,r=null,s=!1){e&&e!==Yr||(e||En(`Invalid vnode type when creating vnode: ${e}.`),e=fa);if(Ca(e)){const o=Pa(e,t,!0);return n&&Ba(o,n),_a>0&&!s&&ga&&(6&o.shapeFlag?ga[ga.indexOf(e)]=o:ga.push(o)),o.patchFlag=-2,o}gl(e)&&(e=e.__vccOpts);if(t){t=Na(t);let{class:e,style:n}=t;e&&!b(e)&&(t.class=Q(e)),x(n)&&(Ht(n)&&!h(n)&&(n=u({},n)),t.style=K(n))}const i=b(e)?1:na(e)?128:Oo(e)?64:x(e)?4:y(e)?2:0;4&i&&Ht(e)&&En("Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with `markRaw` or using `shallowRef` instead of `ref`.","\nComponent that was made reactive: ",e=zt(e));return Oa(e,t,n,o,r,i,s,!0)}(...ba?ba(e,bo):e);function Na(e){return e?Ht(e)||Xs(e)?u({},e):e:null}function Pa(e,t,n=!1,o=!1){const{props:r,ref:s,patchFlag:i,children:a,transition:l}=e,c=t?Ua(r||{},t):r,u={__v_isVNode:!0,__v_skip:!0,type:e.type,props:c,key:c&&Ta(c),ref:t&&t.ref?n&&s?h(s)?s.concat(Aa(t)):[s,Aa(t)]:Aa(t):s,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:-1===i&&h(a)?a.map(Ia):a,target:e.target,targetStart:e.targetStart,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==da?-1===i?16:16|i:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:l,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Pa(e.ssContent),ssFallback:e.ssFallback&&Pa(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return l&&o&&Qo(u,l.clone(u)),u}function Ia(e){const t=Pa(e);return h(e.children)&&(t.children=e.children.map(Ia)),t}function Ma(e=" ",t=0){return Ra(pa,null,e,t)}function La(e,t){const n=Ra(ha,null,e);return n.staticCount=t,n}function Fa(e="",t=!1){return t?(va(),ka(fa,null,e)):Ra(fa,null,e)}function $a(e){return null==e||"boolean"==typeof e?Ra(fa):h(e)?Ra(da,null,e.slice()):Ca(e)?Da(e):Ra(pa,null,String(e))}function Da(e){return null===e.el&&-1!==e.patchFlag||e.memo?e:Pa(e)}function Ba(e,t){let n=0;const{shapeFlag:o}=e;if(null==t)t=null;else if(h(t))n=16;else if("object"==typeof t){if(65&o){const n=t.default;return void(n&&(n._c&&(n._d=!1),Ba(e,n()),n._c&&(n._d=!0)))}{n=32;const o=t._;o||Xs(t)?3===o&&bo&&(1===bo.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=bo}}else y(t)?(t={default:t,_ctx:bo},n=32):(t=String(t),64&o?(n=16,t=[Ma(t)]):n=8);e.children=t,e.shapeFlag|=n}function Ua(...e){const t={};for(let n=0;n<e.length;n++){const o=e[n];for(const e in o)if("class"===e)t.class!==o.class&&(t.class=Q([t.class,o.class]));else if("style"===e)t.style=K([t.style,o.style]);else if(l(e)){const n=t[e],r=o[e];!r||n===r||h(n)&&n.includes(r)||(t[e]=n?[].concat(n,r):r)}else""!==e&&(t[e]=o[e])}return t}function Va(e,t,n,o=null){Pn(e,t,7,[n,o])}const qa=Vs();let Ha=0;function za(e,t,n){const o=e.type,s=(t?t.appContext:e.appContext)||qa,a={uid:Ha++,vnode:e,type:o,parent:t,appContext:s,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new Se(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(s.provides),ids:t?t.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:ti(o,s),emitsOptions:Hi(o,s),emit:null,emitted:null,propsDefaults:r,inheritAttrs:o.inheritAttrs,ctx:r,data:r,props:r,attrs:r,slots:r,refs:r,setupState:r,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return a.ctx=function(e){const t={};return Object.defineProperty(t,"_",{configurable:!0,enumerable:!1,get:()=>e}),Object.keys(cs).forEach((n=>{Object.defineProperty(t,n,{configurable:!0,enumerable:!1,get:()=>cs[n](e),set:i})})),t}(a),a.root=t?t.root:a,a.emit=qi.bind(null,a),e.ce&&e.ce(a),a}let Wa=null;const Ga=()=>Wa||bo;let Ka,Ja;{const e=q(),t=(t,n)=>{let o;return(o=e[t])||(o=e[t]=[]),o.push(n),e=>{o.length>1?o.forEach((t=>t(e))):o[0](e)}};Ka=t("__VUE_INSTANCE_SETTERS__",(e=>Wa=e)),Ja=t("__VUE_SSR_SETTERS__",(e=>ol=e))}const Za=e=>{const t=Wa;return Ka(e),e.scope.on(),()=>{e.scope.off(),Ka(t)}},Xa=()=>{Wa&&Wa.scope.off(),Ka(null)},Ya=o("slot,component");function Qa(e,{isNativeTag:t}){(Ya(e)||t(e))&&En("Do not use built-in or reserved HTML elements as component id: "+e)}function el(e){return 4&e.vnode.shapeFlag}let tl,nl,ol=!1;function rl(e,t=!1,n=!1){t&&Ja(t);const{props:o,children:r}=e.vnode,s=el(e);!function(e,t,n,o=!1){const r={},s=Zs();e.propsDefaults=Object.create(null),Ys(e,t,r,s);for(const t in e.propsOptions[0])t in r||(r[t]=void 0);oi(t||{},r,e),n?e.props=o?r:Ft(r):e.type.props?e.props=r:e.props=s,e.attrs=s}(e,o,s,t),mi(e,r,n||t);const a=s?function(e,t){var n;const o=e.type;o.name&&Qa(o.name,e.appContext.config);if(o.components){const t=Object.keys(o.components);for(let n=0;n<t.length;n++)Qa(t[n],e.appContext.config)}if(o.directives){const e=Object.keys(o.directives);for(let t=0;t<e.length;t++)Eo(e[t])}o.compilerOptions&&al()&&En('"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.');e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,ps),function(e){const{ctx:t,propsOptions:[n]}=e;n&&Object.keys(n).forEach((n=>{Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>e.props[n],set:i})}))}(e);const{setup:r}=o;if(r){He();const s=e.setupContext=r.length>1?ul(e):null,i=Za(e),a=Nn(r,e,0,[Dt(e.props),s]),l=S(a);if(ze(),i(),!l&&!e.sp||Cr(e)||or(e),l){if(a.then(Xa,Xa),t)return a.then((n=>{sl(e,n,t)})).catch((t=>{In(t,e,0)}));if(e.asyncDep=a,!e.suspense){En(`Component <${null!=(n=o.name)?n:"Anonymous"}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`)}}else sl(e,a,t)}else ll(e,t)}(e,t):void 0;return t&&Ja(!1),a}function sl(e,t,n){y(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:x(t)?(Ca(t)&&En("setup() should not return VNodes directly - return a render function instead."),e.devtoolsRawSetupState=t,e.setupState=rn(t),function(e){const{ctx:t,setupState:n}=e;Object.keys(zt(n)).forEach((e=>{if(!n.__isScriptSetup){if(us(e[0]))return void En(`setup() return property ${JSON.stringify(e)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:()=>n[e],set:i})}}))}(e)):void 0!==t&&En("setup() should return an object. Received: "+(null===t?"null":typeof t)),ll(e,n)}function il(e){tl=e,nl=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,fs))}}const al=()=>!tl;function ll(e,t,n){const o=e.type;if(!e.render){if(!t&&tl&&!o.render){const t=o.template||Is(e).template;if(t){bi(e,"compile");const{isCustomElement:n,compilerOptions:r}=e.appContext.config,{delimiters:s,compilerOptions:i}=o,a=u(u({isCustomElement:n,delimiters:s},r),i);o.render=tl(t,a),_i(e,"compile")}}e.render=o.render||i,nl&&nl(e)}{const t=Za(e);He();try{Rs(e)}finally{ze(),t()}}o.render||e.render!==i||t||(!tl&&o.template?En('Component provided template option but runtime compilation is not supported in this build of Vue. Use "vue.esm-browser.js" instead.'):En("Component is missing template or render function: ",o))}const cl={get(e,t){return Gi(),tt(e,"get",""),e[t]},set(){return En("setupContext.attrs is readonly."),!1},deleteProperty(){return En("setupContext.attrs is readonly."),!1}};function ul(e){const t=t=>{if(e.exposed&&En("expose() should be called only once per setup()."),null!=t){let e=typeof t;"object"===e&&(h(t)?e="array":Jt(t)&&(e="ref")),"object"!==e&&En(`expose() should be passed a plain object, received ${e}.`)}e.exposed=t||{}};{let n,o;return Object.freeze({get attrs(){return n||(n=new Proxy(e.attrs,cl))},get slots(){return o||(o=function(e){return new Proxy(e.slots,{get(t,n){return tt(e,"get","$slots"),t[n]}})}(e))},get emit(){return(t,...n)=>e.emit(t,...n)},expose:t})}}function dl(e){return e.exposed?e.exposeProxy||(e.exposeProxy=new Proxy(rn(Wt(e.exposed)),{get(t,n){return n in t?t[n]:n in cs?cs[n](e):void 0},has(e,t){return t in e||t in cs}})):e.proxy}const pl=/(?:^|[-_])(\w)/g,fl=e=>e.replace(pl,(e=>e.toUpperCase())).replace(/[-_]/g,"");function hl(e,t=!0){return y(e)?e.displayName||e.name:e.name||t&&e.__name}function ml(e,t,n=!1){let o=hl(t);if(!o&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(o=e[1])}if(!o&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};o=n(e.components||e.parent.type.components)||n(e.appContext.components)}return o?fl(o):n?"App":"Anonymous"}function gl(e){return y(e)&&"__vccOpts"in e}const vl=(e,t)=>{const n=function(e,t,n=!1){let o,r;y(e)?o=e:(o=e.get,r=e.set);const s=new fn(o,r,n);return t&&!n&&(s.onTrack=t.onTrack,s.onTrigger=t.onTrigger),s}(e,t,ol);{const e=Ga();e&&e.appContext.config.warnRecursiveComputed&&(n._warnRecursive=!0)}return n};function yl(e,t,n){const o=arguments.length;return 2===o?x(t)&&!h(t)?Ca(t)?Ra(e,null,[t]):Ra(e,t):Ra(e,null,t):(o>3?n=Array.prototype.slice.call(arguments,2):3===o&&Ca(n)&&(n=[n]),Ra(e,t,n))}function bl(){if("undefined"==typeof window)return;const e={style:"color:#3ba776"},t={style:"color:#1677ff"},n={style:"color:#f5222d"},o={style:"color:#eb2f96"},s={__vue_custom_formatter:!0,header(t){if(!x(t))return null;if(t.__isVue)return["div",e,"VueInstance"];if(Jt(t)){He();const n=t.value;return ze(),["div",{},["span",e,p(t)],"<",l(n),">"]}return Ut(t)?["div",{},["span",e,qt(t)?"ShallowReactive":"Reactive"],"<",l(t),">"+(Vt(t)?" (readonly)":"")]:Vt(t)?["div",{},["span",e,qt(t)?"ShallowReadonly":"Readonly"],"<",l(t),">"]:null},hasBody(e){return e&&e.__isVue},body(e){if(e&&e.__isVue)return["div",{},...i(e.$)]}};function i(e){const t=[];e.type.props&&e.props&&t.push(a("props",zt(e.props))),e.setupState!==r&&t.push(a("setup",e.setupState)),e.data!==r&&t.push(a("data",zt(e.data)));const n=c(e,"computed");n&&t.push(a("computed",n));const s=c(e,"inject");return s&&t.push(a("injected",s)),t.push(["div",{},["span",{style:o.style+";opacity:0.66"},"$ (internal): "],["object",{object:e}]]),t}function a(e,t){return t=u({},t),Object.keys(t).length?["div",{style:"line-height:1.25em;margin-bottom:0.6em"},["div",{style:"color:#476582"},e],["div",{style:"padding-left:1.25em"},...Object.keys(t).map((e=>["div",{},["span",o,e+": "],l(t[e],!1)]))]]:["span",{}]}function l(e,r=!0){return"number"==typeof e?["span",t,e]:"string"==typeof e?["span",n,JSON.stringify(e)]:"boolean"==typeof e?["span",o,e]:x(e)?["object",{object:r?zt(e):e}]:["span",n,String(e)]}function c(e,t){const n=e.type;if(y(n))return;const o={};for(const r in e.ctx)d(n,r,t)&&(o[r]=e.ctx[r]);return o}function d(e,t,n){const o=e[n];return!!(h(o)&&o.includes(t)||x(o)&&t in o)||(!(!e.extends||!d(e.extends,t,n))||(!(!e.mixins||!e.mixins.some((e=>d(e,t,n))))||void 0))}function p(e){return qt(e)?"ShallowRef":e.effect?"ComputedRef":"Ref"}window.devtoolsFormatters?window.devtoolsFormatters.push(s):window.devtoolsFormatters=[s]}function _l(e,t,n,o){const r=n[o];if(r&&xl(r,e))return r;const s=t();return s.memo=e.slice(),s.cacheIndex=o,n[o]=s}function xl(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if(F(n[e],t[e]))return!1;return _a>0&&ga&&ga.push(e),!0}const Sl="3.5.16",wl=En,kl=Rn,Cl=so,El=co,jl={createComponentInstance:za,setupComponent:rl,renderComponentRoot:Ki,setCurrentRenderingInstance:xo,isVNode:Ca,normalizeVNode:$a,getComponentPublicInstance:dl,ensureValidVNode:is,pushWarningContext:wn,popWarningContext:kn},Tl=null,Al=null,Ol=null;let Rl;const Nl="undefined"!=typeof window&&window.trustedTypes;if(Nl)try{Rl=Nl.createPolicy("vue",{createHTML:e=>e})}catch(e){wl(`Error creating trusted types policy: ${e}`)}const Pl=Rl?e=>Rl.createHTML(e):e=>e,Il="undefined"!=typeof document?document:null,Ml=Il&&Il.createElement("template"),Ll={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,o)=>{const r="svg"===t?Il.createElementNS("http://www.w3.org/2000/svg",e):"mathml"===t?Il.createElementNS("http://www.w3.org/1998/Math/MathML",e):n?Il.createElement(e,{is:n}):Il.createElement(e);return"select"===e&&o&&null!=o.multiple&&r.setAttribute("multiple",o.multiple),r},createText:e=>Il.createTextNode(e),createComment:e=>Il.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Il.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,o,r,s){const i=n?n.previousSibling:t.lastChild;if(r&&(r===s||r.nextSibling))for(;t.insertBefore(r.cloneNode(!0),n),r!==s&&(r=r.nextSibling););else{Ml.innerHTML=Pl("svg"===o?`<svg>${e}</svg>`:"mathml"===o?`<math>${e}</math>`:e);const r=Ml.content;if("svg"===o||"mathml"===o){const e=r.firstChild;for(;e.firstChild;)r.appendChild(e.firstChild);r.removeChild(e)}t.insertBefore(r,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},Fl="transition",$l="animation",Dl=Symbol("_vtc"),Bl={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Ul=u({},zo,Bl),Vl=(e=>(e.displayName="Transition",e.props=Ul,e))(((e,{slots:t})=>yl(Ko,zl(e),t))),ql=(e,t=[])=>{h(e)?e.forEach((e=>e(...t))):e&&e(...t)},Hl=e=>!!e&&(h(e)?e.some((e=>e.length>1)):e.length>1);function zl(e){const t={};for(const n in e)n in Bl||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:o,duration:r,enterFromClass:s=`${n}-enter-from`,enterActiveClass:i=`${n}-enter-active`,enterToClass:a=`${n}-enter-to`,appearFromClass:l=s,appearActiveClass:c=i,appearToClass:d=a,leaveFromClass:p=`${n}-leave-from`,leaveActiveClass:f=`${n}-leave-active`,leaveToClass:h=`${n}-leave-to`}=e,m=function(e){if(null==e)return null;if(x(e))return[Wl(e.enter),Wl(e.leave)];{const t=Wl(e);return[t,t]}}(r),g=m&&m[0],v=m&&m[1],{onBeforeEnter:y,onEnter:b,onEnterCancelled:_,onLeave:S,onLeaveCancelled:w,onBeforeAppear:k=y,onAppear:C=b,onAppearCancelled:E=_}=t,j=(e,t,n,o)=>{e._enterCancelled=o,Kl(e,t?d:a),Kl(e,t?c:i),n&&n()},T=(e,t)=>{e._isLeaving=!1,Kl(e,p),Kl(e,h),Kl(e,f),t&&t()},A=e=>(t,n)=>{const r=e?C:b,i=()=>j(t,e,n);ql(r,[t,i]),Jl((()=>{Kl(t,e?l:s),Gl(t,e?d:a),Hl(r)||Xl(t,o,g,i)}))};return u(t,{onBeforeEnter(e){ql(y,[e]),Gl(e,s),Gl(e,i)},onBeforeAppear(e){ql(k,[e]),Gl(e,l),Gl(e,c)},onEnter:A(!1),onAppear:A(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>T(e,t);Gl(e,p),e._enterCancelled?(Gl(e,f),tc()):(tc(),Gl(e,f)),Jl((()=>{e._isLeaving&&(Kl(e,p),Gl(e,h),Hl(S)||Xl(e,o,v,n))})),ql(S,[e,n])},onEnterCancelled(e){j(e,!1,void 0,!0),ql(_,[e])},onAppearCancelled(e){j(e,!0,void 0,!0),ql(E,[e])},onLeaveCancelled(e){T(e),ql(w,[e])}})}function Wl(e){const t=U(e);return An(t,"<transition> explicit duration"),t}function Gl(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e[Dl]||(e[Dl]=new Set)).add(t)}function Kl(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const n=e[Dl];n&&(n.delete(t),n.size||(e[Dl]=void 0))}function Jl(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let Zl=0;function Xl(e,t,n,o){const r=e._endId=++Zl,s=()=>{r===e._endId&&o()};if(null!=n)return setTimeout(s,n);const{type:i,timeout:a,propCount:l}=Yl(e,t);if(!i)return o();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,p),s()},p=t=>{t.target===e&&++u>=l&&d()};setTimeout((()=>{u<l&&d()}),a+1),e.addEventListener(c,p)}function Yl(e,t){const n=window.getComputedStyle(e),o=e=>(n[e]||"").split(", "),r=o(`${Fl}Delay`),s=o(`${Fl}Duration`),i=Ql(r,s),a=o(`${$l}Delay`),l=o(`${$l}Duration`),c=Ql(a,l);let u=null,d=0,p=0;t===Fl?i>0&&(u=Fl,d=i,p=s.length):t===$l?c>0&&(u=$l,d=c,p=l.length):(d=Math.max(i,c),u=d>0?i>c?Fl:$l:null,p=u?u===Fl?s.length:l.length:0);return{type:u,timeout:d,propCount:p,hasTransform:u===Fl&&/\b(transform|all)(,|$)/.test(o(`${Fl}Property`).toString())}}function Ql(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>ec(t)+ec(e[n]))))}function ec(e){return"auto"===e?0:1e3*Number(e.slice(0,-1).replace(",","."))}function tc(){return document.body.offsetHeight}const nc=Symbol("_vod"),oc=Symbol("_vsh"),rc={beforeMount(e,{value:t},{transition:n}){e[nc]="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):sc(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:o}){!t!=!n&&(o?t?(o.beforeEnter(e),sc(e,!0),o.enter(e)):o.leave(e,(()=>{sc(e,!1)})):sc(e,t))},beforeUnmount(e,{value:t}){sc(e,t)}};function sc(e,t){e.style.display=t?e[nc]:"none",e[oc]=!t}rc.name="show";const ic=Symbol("CSS_VAR_TEXT");function ac(e){const t=Ga();if(!t)return void wl("useCssVars is called without current active component instance.");const n=t.ut=(n=e(t.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${t.uid}"]`)).forEach((e=>cc(e,n)))};t.getCssVars=()=>e(t.proxy);const o=()=>{const o=e(t.proxy);t.ce?cc(t.ce,o):lc(t.subTree,o),n(o)};Ur((()=>{Wn(o)})),Br((()=>{Fi(o,i,{flush:"post"});const e=new MutationObserver(o);e.observe(t.subTree.el.parentNode,{childList:!0}),Hr((()=>e.disconnect()))}))}function lc(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{lc(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)cc(e.el,t);else if(e.type===da)e.children.forEach((e=>lc(e,t)));else if(e.type===ha){let{el:n,anchor:o}=e;for(;n&&(cc(n,t),n!==o);)n=n.nextSibling}}function cc(e,t){if(1===e.nodeType){const n=e.style;let o="";for(const e in t)n.setProperty(`--${e}`,t[e]),o+=`--${e}: ${t[e]};`;n[ic]=o}}const uc=/(^|;)\s*display\s*:/;const dc=/[^\\];\s*$/,pc=/\s*!important$/;function fc(e,t,n){if(h(n))n.forEach((n=>fc(e,t,n)));else if(null==n&&(n=""),dc.test(n)&&wl(`Unexpected semicolon at the end of '${t}' style value: '${n}'`),t.startsWith("--"))e.setProperty(t,n);else{const o=function(e,t){const n=mc[t];if(n)return n;let o=N(t);if("filter"!==o&&o in e)return mc[t]=o;o=M(o);for(let n=0;n<hc.length;n++){const r=hc[n]+o;if(r in e)return mc[t]=r}return t}(e,t);pc.test(n)?e.setProperty(I(o),n.replace(pc,""),"important"):e[o]=n}}const hc=["Webkit","Moz","ms"],mc={};const gc="http://www.w3.org/1999/xlink";function vc(e,t,n,o,r,s=ie(t)){o&&t.startsWith("xlink:")?null==n?e.removeAttributeNS(gc,t.slice(6,t.length)):e.setAttributeNS(gc,t,n):null==n||s&&!le(n)?e.removeAttribute(t):e.setAttribute(t,s?"":_(n)?String(n):n)}function yc(e,t,n,o,r){if("innerHTML"===t||"textContent"===t)return void(null!=n&&(e[t]="innerHTML"===t?Pl(n):n));const s=e.tagName;if("value"===t&&"PROGRESS"!==s&&!s.includes("-")){const o="OPTION"===s?e.getAttribute("value")||"":e.value,r=null==n?"checkbox"===e.type?"on":"":String(n);return o===r&&"_value"in e||(e.value=r),null==n&&e.removeAttribute(t),void(e._value=n)}let i=!1;if(""===n||null==n){const o=typeof e[t];"boolean"===o?n=le(n):null==n&&"string"===o?(n="",i=!0):"number"===o&&(n=0,i=!0)}try{e[t]=n}catch(e){i||wl(`Failed setting prop "${t}" on <${s.toLowerCase()}>: value ${n} is invalid.`,e)}i&&e.removeAttribute(r||t)}function bc(e,t,n,o){e.addEventListener(t,n,o)}const _c=Symbol("_vei");function xc(e,t,n,o,r=null){const s=e[_c]||(e[_c]={}),i=s[t];if(o&&i)i.value=Ec(o,t);else{const[n,a]=function(e){let t;if(Sc.test(e)){let n;for(t={};n=e.match(Sc);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}const n=":"===e[2]?e.slice(3):I(e.slice(2));return[n,t]}(t);if(o){const i=s[t]=function(e,t){const n=e=>{if(e._vts){if(e._vts<=n.attached)return}else e._vts=Date.now();Pn(function(e,t){if(h(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=Cc(),n}(Ec(o,t),r);bc(e,n,i,a)}else i&&(!function(e,t,n,o){e.removeEventListener(t,n,o)}(e,n,i,a),s[t]=void 0)}}const Sc=/(?:Once|Passive|Capture)$/;let wc=0;const kc=Promise.resolve(),Cc=()=>wc||(kc.then((()=>wc=0)),wc=Date.now());function Ec(e,t){return y(e)||h(e)?e:(wl(`Wrong type passed as event handler to ${t} - did you forget @ or : in front of your prop?\nExpected function or array of functions, received type ${typeof e}.`),i)}const jc=e=>111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123;const Tc={};
/*! #__NO_SIDE_EFFECTS__ */function Ac(e,t,n){const o=tr(e,t);E(o)&&u(o,t);class r extends Nc{constructor(e){super(o,e,n)}}return r.def=o,r}
/*! #__NO_SIDE_EFFECTS__ */const Oc=(e,t)=>Ac(e,t,yu),Rc="undefined"!=typeof HTMLElement?HTMLElement:class{};class Nc extends Rc{constructor(e,t={},n=vu){super(),this._def=e,this._props=t,this._createApp=n,this._isVueCE=!0,this._instance=null,this._app=null,this._nonce=this._def.nonce,this._connected=!1,this._resolved=!1,this._numberProps=null,this._styleChildren=new WeakSet,this._ob=null,this.shadowRoot&&n!==vu?this._root=this.shadowRoot:(this.shadowRoot&&wl("Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use `defineSSRCustomElement`."),!1!==e.shadowRoot?(this.attachShadow({mode:"open"}),this._root=this.shadowRoot):this._root=this)}connectedCallback(){if(!this.isConnected)return;this.shadowRoot||this._resolved||this._parseSlots(),this._connected=!0;let e=this;for(;e=e&&(e.parentNode||e.host);)if(e instanceof Nc){this._parent=e;break}this._instance||(this._resolved?this._mount(this._def):e&&e._pendingResolve?this._pendingResolve=e._pendingResolve.then((()=>{this._pendingResolve=void 0,this._resolveDef()})):this._resolveDef())}_setParent(e=this._parent){e&&(this._instance.parent=e._instance,this._inheritParentContext(e))}_inheritParentContext(e=this._parent){e&&this._app&&Object.setPrototypeOf(this._app._context.provides,e._instance.provides)}disconnectedCallback(){this._connected=!1,qn((()=>{this._connected||(this._ob&&(this._ob.disconnect(),this._ob=null),this._app&&this._app.unmount(),this._instance&&(this._instance.ce=void 0),this._app=this._instance=null)}))}_resolveDef(){if(this._pendingResolve)return;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);this._ob=new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})),this._ob.observe(this,{attributes:!0});const e=(e,t=!1)=>{this._resolved=!0,this._pendingResolve=void 0;const{props:n,styles:o}=e;let r;if(n&&!h(n))for(const e in n){const t=n[e];(t===Number||t&&t.type===Number)&&(e in this._props&&(this._props[e]=U(this._props[e])),(r||(r=Object.create(null)))[N(e)]=!0)}this._numberProps=r,this._resolveProps(e),this.shadowRoot?this._applyStyles(o):o&&wl("Custom element style injection is not supported when using shadowRoot: false"),this._mount(e)},t=this._def.__asyncLoader;t?this._pendingResolve=t().then((t=>e(this._def=t,!0))):e(this._def)}_mount(e){e.name||(e.name="VueElement"),this._app=this._createApp(e),this._inheritParentContext(),e.configureApp&&e.configureApp(this._app),this._app._ceVNode=this._createVNode(),this._app.mount(this._root);const t=this._instance&&this._instance.exposed;if(t)for(const e in t)f(this,e)?wl(`Exposed property "${e}" already exists on custom element.`):Object.defineProperty(this,e,{get:()=>tn(t[e])})}_resolveProps(e){const{props:t}=e,n=h(t)?t:Object.keys(t||{});for(const e of Object.keys(this))"_"!==e[0]&&n.includes(e)&&this._setProp(e,this[e]);for(const e of n.map(N))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t,!0,!0)}})}_setAttr(e){if(e.startsWith("data-v-"))return;const t=this.hasAttribute(e);let n=t?this.getAttribute(e):Tc;const o=N(e);t&&this._numberProps&&this._numberProps[o]&&(n=U(n)),this._setProp(o,n,!1,!0)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,o=!1){if(t!==this._props[e]&&(t===Tc?delete this._props[e]:(this._props[e]=t,"key"===e&&this._app&&(this._app._ceVNode.key=t)),o&&this._instance&&this._update(),n)){const n=this._ob;n&&n.disconnect(),!0===t?this.setAttribute(I(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(I(e),t+""):t||this.removeAttribute(I(e)),n&&n.observe(this,{attributes:!0})}}_update(){const e=this._createVNode();this._app&&(e.appContext=this._app._context),mu(e,this._root)}_createVNode(){const e={};this.shadowRoot||(e.onVnodeMounted=e.onVnodeUpdated=this._renderSlots.bind(this));const t=Ra(this._def,u(e,this._props));return this._instance||(t.ce=e=>{this._instance=e,e.ce=this,e.isCE=!0,e.ceReload=e=>{this._styles&&(this._styles.forEach((e=>this._root.removeChild(e))),this._styles.length=0),this._applyStyles(e),this._instance=null,this._update()};const t=(e,t)=>{this.dispatchEvent(new CustomEvent(e,E(t[0])?u({detail:t},t[0]):{detail:t}))};e.emit=(e,...n)=>{t(e,n),I(e)!==e&&t(I(e),n)},this._setParent()}),t}_applyStyles(e,t){if(!e)return;if(t){if(t===this._def||this._styleChildren.has(t))return;this._styleChildren.add(t)}const n=this._nonce;for(let o=e.length-1;o>=0;o--){const r=document.createElement("style");if(n&&r.setAttribute("nonce",n),r.textContent=e[o],this.shadowRoot.prepend(r),t){if(t.__hmrId){this._childStyles||(this._childStyles=new Map);let e=this._childStyles.get(t.__hmrId);e||this._childStyles.set(t.__hmrId,e=[]),e.push(r)}}else(this._styles||(this._styles=[])).push(r)}}_parseSlots(){const e=this._slots={};let t;for(;t=this.firstChild;){const n=1===t.nodeType&&t.getAttribute("slot")||"default";(e[n]||(e[n]=[])).push(t),this.removeChild(t)}}_renderSlots(){const e=(this._teleportTarget||this).querySelectorAll("slot"),t=this._instance.type.__scopeId;for(let n=0;n<e.length;n++){const o=e[n],r=o.getAttribute("name")||"default",s=this._slots[r],i=o.parentNode;if(s)for(const e of s){if(t&&1===e.nodeType){const n=t+"-s",o=document.createTreeWalker(e,1);let r;for(e.setAttribute(n,"");r=o.nextNode();)r.setAttribute(n,"")}i.insertBefore(e,o)}else for(;o.firstChild;)i.insertBefore(o.firstChild,o);i.removeChild(o)}}_injectChildStyle(e){this._applyStyles(e.styles,e)}_removeChildStyle(e){if(this._styleChildren.delete(e),this._childStyles&&e.__hmrId){const t=this._childStyles.get(e.__hmrId);t&&(t.forEach((e=>this._root.removeChild(e))),t.length=0)}}}function Pc(e){const t=Ga(),n=t&&t.ce;return n||(wl(t?`${e||"useHost"} can only be used in components defined via defineCustomElement.`:`${e||"useHost"} called without an active component instance.`),null)}function Ic(){const e=Pc("useShadowRoot");return e&&e.shadowRoot}function Mc(e="$style"){{const t=Ga();if(!t)return wl("useCssModule must be called inside setup()"),r;const n=t.type.__cssModules;if(!n)return wl("Current instance does not have CSS modules injected."),r;const o=n[e];return o||(wl(`Current instance does not have CSS module named "${e}".`),r)}}const Lc=new WeakMap,Fc=new WeakMap,$c=Symbol("_moveCb"),Dc=Symbol("_enterCb"),Bc=(e=>(delete e.props.mode,e))({name:"TransitionGroup",props:u({},Ul,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=Ga(),o=qo();let r,s;return Vr((()=>{if(!r.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const o=e.cloneNode(),r=e[Dl];r&&r.forEach((e=>{e.split(/\s+/).forEach((e=>e&&o.classList.remove(e)))}));n.split(/\s+/).forEach((e=>e&&o.classList.add(e))),o.style.display="none";const s=1===t.nodeType?t:t.parentNode;s.appendChild(o);const{hasTransform:i}=Yl(o);return s.removeChild(o),i}(r[0].el,n.vnode.el,t))return void(r=[]);r.forEach(Uc),r.forEach(Vc);const o=r.filter(qc);tc(),o.forEach((e=>{const n=e.el,o=n.style;Gl(n,t),o.transform=o.webkitTransform=o.transitionDuration="";const r=n[$c]=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",r),n[$c]=null,Kl(n,t))};n.addEventListener("transitionend",r)})),r=[]})),()=>{const i=zt(e),a=zl(i);let l=i.tag||da;if(r=[],s)for(let e=0;e<s.length;e++){const t=s[e];t.el&&t.el instanceof Element&&(r.push(t),Qo(t,Zo(t,a,o,n)),Lc.set(t,t.el.getBoundingClientRect()))}s=t.default?er(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key?Qo(t,Zo(t,a,o,n)):t.type!==pa&&wl("<TransitionGroup> children must be keyed.")}return Ra(l,null,s)}}});function Uc(e){const t=e.el;t[$c]&&t[$c](),t[Dc]&&t[Dc]()}function Vc(e){Fc.set(e,e.el.getBoundingClientRect())}function qc(e){const t=Lc.get(e),n=Fc.get(e),o=t.left-n.left,r=t.top-n.top;if(o||r){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${o}px,${r}px)`,t.transitionDuration="0s",e}}const Hc=e=>{const t=e.props["onUpdate:modelValue"]||!1;return h(t)?e=>$(t,e):t};function zc(e){e.target.composing=!0}function Wc(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Gc=Symbol("_assign"),Kc={created(e,{modifiers:{lazy:t,trim:n,number:o}},r){e[Gc]=Hc(r);const s=o||r.props&&"number"===r.props.type;bc(e,t?"change":"input",(t=>{if(t.target.composing)return;let o=e.value;n&&(o=o.trim()),s&&(o=B(o)),e[Gc](o)})),n&&bc(e,"change",(()=>{e.value=e.value.trim()})),t||(bc(e,"compositionstart",zc),bc(e,"compositionend",Wc),bc(e,"change",Wc))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,oldValue:n,modifiers:{lazy:o,trim:r,number:s}},i){if(e[Gc]=Hc(i),e.composing)return;const a=null==t?"":t;if((!s&&"number"!==e.type||/^0\d/.test(e.value)?e.value:B(e.value))!==a){if(document.activeElement===e&&"range"!==e.type){if(o&&t===n)return;if(r&&e.value.trim()===a)return}e.value=a}}},Jc={deep:!0,created(e,t,n){e[Gc]=Hc(n),bc(e,"change",(()=>{const t=e._modelValue,n=eu(e),o=e.checked,r=e[Gc];if(h(t)){const e=he(t,n),s=-1!==e;if(o&&!s)r(t.concat(n));else if(!o&&s){const n=[...t];n.splice(e,1),r(n)}}else if(g(t)){const e=new Set(t);o?e.add(n):e.delete(n),r(e)}else r(tu(e,o))}))},mounted:Zc,beforeUpdate(e,t,n){e[Gc]=Hc(n),Zc(e,t,n)}};function Zc(e,{value:t,oldValue:n},o){let r;if(e._modelValue=t,h(t))r=he(t,o.props.value)>-1;else if(g(t))r=t.has(o.props.value);else{if(t===n)return;r=fe(t,tu(e,!0))}e.checked!==r&&(e.checked=r)}const Xc={created(e,{value:t},n){e.checked=fe(t,n.props.value),e[Gc]=Hc(n),bc(e,"change",(()=>{e[Gc](eu(e))}))},beforeUpdate(e,{value:t,oldValue:n},o){e[Gc]=Hc(o),t!==n&&(e.checked=fe(t,o.props.value))}},Yc={deep:!0,created(e,{value:t,modifiers:{number:n}},o){const r=g(t);bc(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?B(eu(e)):eu(e)));e[Gc](e.multiple?r?new Set(t):t:t[0]),e._assigning=!0,qn((()=>{e._assigning=!1}))})),e[Gc]=Hc(o)},mounted(e,{value:t}){Qc(e,t)},beforeUpdate(e,t,n){e[Gc]=Hc(n)},updated(e,{value:t}){e._assigning||Qc(e,t)}};function Qc(e,t){const n=e.multiple,o=h(t);if(!n||o||g(t)){for(let r=0,s=e.options.length;r<s;r++){const s=e.options[r],i=eu(s);if(n)if(o){const e=typeof i;s.selected="string"===e||"number"===e?t.some((e=>String(e)===String(i))):he(t,i)>-1}else s.selected=t.has(i);else if(fe(eu(s),t))return void(e.selectedIndex!==r&&(e.selectedIndex=r))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}else wl(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(t).slice(8,-1)}.`)}function eu(e){return"_value"in e?e._value:e.value}function tu(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const nu={created(e,t,n){ru(e,t,n,null,"created")},mounted(e,t,n){ru(e,t,n,null,"mounted")},beforeUpdate(e,t,n,o){ru(e,t,n,o,"beforeUpdate")},updated(e,t,n,o){ru(e,t,n,o,"updated")}};function ou(e,t){switch(e){case"SELECT":return Yc;case"TEXTAREA":return Kc;default:switch(t){case"checkbox":return Jc;case"radio":return Xc;default:return Kc}}}function ru(e,t,n,o,r){const s=ou(e.tagName,n.props&&n.props.type)[r];s&&s(e,t,n,o)}const su=["ctrl","shift","alt","meta"],iu={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>su.some((n=>e[`${n}Key`]&&!t.includes(n)))},au=(e,t)=>{const n=e._withMods||(e._withMods={}),o=t.join(".");return n[o]||(n[o]=(n,...o)=>{for(let e=0;e<t.length;e++){const o=iu[t[e]];if(o&&o(n,t))return}return e(n,...o)})},lu={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},cu=(e,t)=>{const n=e._withKeys||(e._withKeys={}),o=t.join(".");return n[o]||(n[o]=n=>{if(!("key"in n))return;const o=I(n.key);return t.some((e=>e===o||lu[e]===o))?e(n):void 0})},uu=u({patchProp:(e,t,n,o,r,s)=>{const i="svg"===r;"class"===t?function(e,t,n){const o=e[Dl];o&&(t=(t?[t,...o]:[...o]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,o,i):"style"===t?function(e,t,n){const o=e.style,r=b(n);let s=!1;if(n&&!r){if(t)if(b(t))for(const e of t.split(";")){const t=e.slice(0,e.indexOf(":")).trim();null==n[t]&&fc(o,t,"")}else for(const e in t)null==n[e]&&fc(o,e,"");for(const e in n)"display"===e&&(s=!0),fc(o,e,n[e])}else if(r){if(t!==n){const e=o[ic];e&&(n+=";"+e),o.cssText=n,s=uc.test(n)}}else t&&e.removeAttribute("style");nc in e&&(e[nc]=s?o.display:"",e[oc]&&(o.display="none"))}(e,n,o):l(t)?c(t)||xc(e,t,0,o,s):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,o){if(o)return"innerHTML"===t||"textContent"===t||!!(t in e&&jc(t)&&y(n));if("spellcheck"===t||"draggable"===t||"translate"===t||"autocorrect"===t)return!1;if("form"===t)return!1;if("list"===t&&"INPUT"===e.tagName)return!1;if("type"===t&&"TEXTAREA"===e.tagName)return!1;if("width"===t||"height"===t){const t=e.tagName;if("IMG"===t||"VIDEO"===t||"CANVAS"===t||"SOURCE"===t)return!1}if(jc(t)&&b(n))return!1;return t in e}(e,t,o,i))?(yc(e,t,o),e.tagName.includes("-")||"value"!==t&&"checked"!==t&&"selected"!==t||vc(e,t,o,i,0,"value"!==t)):!e._isVueCE||!/[A-Z]/.test(t)&&b(o)?("true-value"===t?e._trueValue=o:"false-value"===t&&(e._falseValue=o),vc(e,t,o,i)):yc(e,N(t),o,0,t)}},Ll);let du,pu=!1;function fu(){return du||(du=wi(uu))}function hu(){return du=pu?du:ki(uu),pu=!0,du}const mu=(...e)=>{fu().render(...e)},gu=(...e)=>{hu().hydrate(...e)},vu=(...e)=>{const t=fu().createApp(...e);_u(t),xu(t);const{mount:n}=t;return t.mount=e=>{const o=Su(e);if(!o)return;const r=t._component;y(r)||r.render||r.template||(r.template=o.innerHTML),1===o.nodeType&&(o.textContent="");const s=n(o,!1,bu(o));return o instanceof Element&&(o.removeAttribute("v-cloak"),o.setAttribute("data-v-app","")),s},t},yu=(...e)=>{const t=hu().createApp(...e);_u(t),xu(t);const{mount:n}=t;return t.mount=e=>{const t=Su(e);if(t)return n(t,!0,bu(t))},t};function bu(e){return e instanceof SVGElement?"svg":"function"==typeof MathMLElement&&e instanceof MathMLElement?"mathml":void 0}function _u(e){Object.defineProperty(e.config,"isNativeTag",{value:e=>te(e)||ne(e)||oe(e),writable:!1})}function xu(e){if(al()){const t=e.config.isCustomElement;Object.defineProperty(e.config,"isCustomElement",{get(){return t},set(){wl("The `isCustomElement` config option is deprecated. Use `compilerOptions.isCustomElement` instead.")}});const n=e.config.compilerOptions,o='The `compilerOptions` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, `compilerOptions` must be passed to `@vue/compiler-dom` in the build setup instead.\n- For vue-loader: pass it via vue-loader\'s `compilerOptions` loader option.\n- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc';Object.defineProperty(e.config,"compilerOptions",{get(){return wl(o),n},set(){wl(o)}})}}function Su(e){if(b(e)){const t=document.querySelector(e);return t||wl(`Failed to mount app: mount target selector "${e}" returned null.`),t}return window.ShadowRoot&&e instanceof window.ShadowRoot&&"closed"===e.mode&&wl('mounting on a ShadowRoot with `{mode: "closed"}` may lead to unpredictable bugs'),e}let wu=!1;const ku=()=>{wu||(wu=!0,Kc.getSSRProps=({value:e})=>({value:e}),Xc.getSSRProps=({value:e},t)=>{if(t.props&&fe(t.props.value,e))return{checked:!0}},Jc.getSSRProps=({value:e},t)=>{if(h(e)){if(t.props&&he(e,t.props.value)>-1)return{checked:!0}}else if(g(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},nu.getSSRProps=(e,t)=>{if("string"!=typeof t.type)return;const n=ou(t.type.toUpperCase(),t.props&&t.props.type);return n.getSSRProps?n.getSSRProps(e,t):void 0},rc.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}})};var Cu=Object.freeze({__proto__:null,BaseTransition:Ko,BaseTransitionPropsValidators:zo,Comment:fa,DeprecationTypes:Ol,EffectScope:Se,ErrorCodes:On,ErrorTypeStrings:kl,Fragment:da,KeepAlive:Ar,ReactiveEffect:je,Static:ha,Suspense:ra,Teleport:$o,Text:pa,TrackOpTypes:hn,Transition:Vl,TransitionGroup:Bc,TriggerOpTypes:mn,VueElement:Nc,assertNumber:An,callWithAsyncErrorHandling:Pn,callWithErrorHandling:Nn,camelize:N,capitalize:M,cloneVNode:Pa,compatUtils:Al,computed:vl,createApp:vu,createBlock:ka,createCommentVNode:Fa,createElementBlock:wa,createElementVNode:Oa,createHydrationRenderer:ki,createPropsRestProxy:Ts,createRenderer:wi,createSSRApp:yu,createSlots:rs,createStaticVNode:La,createTextVNode:Ma,createVNode:Ra,customRef:an,defineAsyncComponent:Er,defineComponent:tr,defineCustomElement:Ac,defineEmits:gs,defineExpose:vs,defineModel:_s,defineOptions:ys,defineProps:ms,defineSSRCustomElement:Oc,defineSlots:bs,devtools:Cl,effect:Be,effectScope:we,getCurrentInstance:Ga,getCurrentScope:ke,getCurrentWatcher:bn,getTransitionRawChildren:er,guardReactiveProps:Na,h:yl,handleError:In,hasInjectionContext:Ks,hydrate:gu,hydrateOnIdle:xr,hydrateOnInteraction:kr,hydrateOnMediaQuery:wr,hydrateOnVisible:Sr,initCustomFormatter:bl,initDirectivesForSSR:ku,inject:Gs,isMemoSame:xl,isProxy:Ht,isReactive:Ut,isReadonly:Vt,isRef:Jt,isRuntimeOnly:al,isShallow:qt,isVNode:Ca,markRaw:Wt,mergeDefaults:Es,mergeModels:js,mergeProps:Ua,nextTick:qn,normalizeClass:Q,normalizeProps:ee,normalizeStyle:K,onActivated:Rr,onBeforeMount:Dr,onBeforeUnmount:qr,onBeforeUpdate:Ur,onDeactivated:Nr,onErrorCaptured:Kr,onMounted:Br,onRenderTracked:Gr,onRenderTriggered:Wr,onScopeDispose:Ce,onServerPrefetch:zr,onUnmounted:Hr,onUpdated:Vr,onWatcherCleanup:_n,openBlock:va,popScopeId:wo,provide:Ws,proxyRefs:rn,pushScopeId:So,queuePostFlushCb:Wn,reactive:Lt,readonly:$t,ref:Zt,registerRuntimeCompiler:il,render:mu,renderList:os,renderSlot:ss,resolveComponent:Xr,resolveDirective:es,resolveDynamicComponent:Qr,resolveFilter:Tl,resolveTransitionHooks:Zo,setBlockTracking:xa,setDevtoolsHook:El,setTransitionHooks:Qo,shallowReactive:Ft,shallowReadonly:Dt,shallowRef:Xt,ssrContextKey:Ni,ssrUtils:jl,stop:Ue,toDisplayString:ge,toHandlerKey:L,toHandlers:as,toRaw:zt,toRef:dn,toRefs:ln,toValue:nn,transformVNodeArgs:ja,triggerRef:en,unref:tn,useAttrs:ws,useCssModule:Mc,useCssVars:ac,useHost:Pc,useId:nr,useModel:Ui,useSSRContext:Pi,useShadowRoot:Ic,useSlots:Ss,useTemplateRef:sr,useTransitionState:qo,vModelCheckbox:Jc,vModelDynamic:nu,vModelRadio:Xc,vModelSelect:Yc,vModelText:Kc,vShow:rc,version:Sl,warn:wl,watch:Fi,watchEffect:Ii,watchPostEffect:Mi,watchSyncEffect:Li,withAsyncContext:As,withCtx:Co,withDefaults:xs,withDirectives:jo,withKeys:cu,withMemo:_l,withModifiers:au,withScopeId:ko});const Eu=Symbol("Fragment"),ju=Symbol("Teleport"),Tu=Symbol("Suspense"),Au=Symbol("KeepAlive"),Ou=Symbol("BaseTransition"),Ru=Symbol("openBlock"),Nu=Symbol("createBlock"),Pu=Symbol("createElementBlock"),Iu=Symbol("createVNode"),Mu=Symbol("createElementVNode"),Lu=Symbol("createCommentVNode"),Fu=Symbol("createTextVNode"),$u=Symbol("createStaticVNode"),Du=Symbol("resolveComponent"),Bu=Symbol("resolveDynamicComponent"),Uu=Symbol("resolveDirective"),Vu=Symbol("resolveFilter"),qu=Symbol("withDirectives"),Hu=Symbol("renderList"),zu=Symbol("renderSlot"),Wu=Symbol("createSlots"),Gu=Symbol("toDisplayString"),Ku=Symbol("mergeProps"),Ju=Symbol("normalizeClass"),Zu=Symbol("normalizeStyle"),Xu=Symbol("normalizeProps"),Yu=Symbol("guardReactiveProps"),Qu=Symbol("toHandlers"),ed=Symbol("camelize"),td=Symbol("capitalize"),nd=Symbol("toHandlerKey"),od=Symbol("setBlockTracking"),rd=Symbol("pushScopeId"),sd=Symbol("popScopeId"),id=Symbol("withCtx"),ad=Symbol("unref"),ld=Symbol("isRef"),cd=Symbol("withMemo"),ud=Symbol("isMemoSame"),dd={[Eu]:"Fragment",[ju]:"Teleport",[Tu]:"Suspense",[Au]:"KeepAlive",[Ou]:"BaseTransition",[Ru]:"openBlock",[Nu]:"createBlock",[Pu]:"createElementBlock",[Iu]:"createVNode",[Mu]:"createElementVNode",[Lu]:"createCommentVNode",[Fu]:"createTextVNode",[$u]:"createStaticVNode",[Du]:"resolveComponent",[Bu]:"resolveDynamicComponent",[Uu]:"resolveDirective",[Vu]:"resolveFilter",[qu]:"withDirectives",[Hu]:"renderList",[zu]:"renderSlot",[Wu]:"createSlots",[Gu]:"toDisplayString",[Ku]:"mergeProps",[Ju]:"normalizeClass",[Zu]:"normalizeStyle",[Xu]:"normalizeProps",[Yu]:"guardReactiveProps",[Qu]:"toHandlers",[ed]:"camelize",[td]:"capitalize",[nd]:"toHandlerKey",[od]:"setBlockTracking",[rd]:"pushScopeId",[sd]:"popScopeId",[id]:"withCtx",[ad]:"unref",[ld]:"isRef",[cd]:"withMemo",[ud]:"isMemoSame"};const pd={start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0},source:""};function fd(e,t,n,o,r,s,i,a=!1,l=!1,c=!1,u=pd){return e&&(a?(e.helper(Ru),e.helper(wd(e.inSSR,c))):e.helper(Sd(e.inSSR,c)),i&&e.helper(qu)),{type:13,tag:t,props:n,children:o,patchFlag:r,dynamicProps:s,directives:i,isBlock:a,disableTracking:l,isComponent:c,loc:u}}function hd(e,t=pd){return{type:17,loc:t,elements:e}}function md(e,t=pd){return{type:15,loc:t,properties:e}}function gd(e,t){return{type:16,loc:pd,key:b(e)?vd(e,!0):e,value:t}}function vd(e,t=!1,n=pd,o=0){return{type:4,loc:n,content:e,isStatic:t,constType:t?3:o}}function yd(e,t=pd){return{type:8,loc:t,children:e}}function bd(e,t=[],n=pd){return{type:14,loc:n,callee:e,arguments:t}}function _d(e,t=void 0,n=!1,o=!1,r=pd){return{type:18,params:e,returns:t,newline:n,isSlot:o,loc:r}}function xd(e,t,n,o=!0){return{type:19,test:e,consequent:t,alternate:n,newline:o,loc:pd}}function Sd(e,t){return e||t?Iu:Mu}function wd(e,t){return e||t?Nu:Pu}function kd(e,{helper:t,removeHelper:n,inSSR:o}){e.isBlock||(e.isBlock=!0,n(Sd(o,e.isComponent)),t(Ru),t(wd(o,e.isComponent)))}const Cd=new Uint8Array([123,123]),Ed=new Uint8Array([125,125]);function jd(e){return e>=97&&e<=122||e>=65&&e<=90}function Td(e){return 32===e||10===e||9===e||12===e||13===e}function Ad(e){return 47===e||62===e||Td(e)}function Od(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}const Rd={Cdata:new Uint8Array([67,68,65,84,65,91]),CdataEnd:new Uint8Array([93,93,62]),CommentEnd:new Uint8Array([45,45,62]),ScriptEnd:new Uint8Array([60,47,115,99,114,105,112,116]),StyleEnd:new Uint8Array([60,47,115,116,121,108,101]),TitleEnd:new Uint8Array([60,47,116,105,116,108,101]),TextareaEnd:new Uint8Array([60,47,116,101,120,116,97,114,101,97])};function Nd(e){throw e}function Pd(e){}function Id(e,t,n,o){const r=(n||Md)[e]+(o||""),s=new SyntaxError(String(r));return s.code=e,s.loc=t,s}const Md={0:"Illegal comment.",1:"CDATA section is allowed only in XML context.",2:"Duplicate attribute.",3:"End tag cannot have attributes.",4:"Illegal '/' in tags.",5:"Unexpected EOF in tag.",6:"Unexpected EOF in CDATA section.",7:"Unexpected EOF in comment.",8:"Unexpected EOF in script.",9:"Unexpected EOF in tag.",10:"Incorrectly closed comment.",11:"Incorrectly opened comment.",12:"Illegal tag name. Use '&lt;' to print '<'.",13:"Attribute value was expected.",14:"End tag name was expected.",15:"Whitespace was expected.",16:"Unexpected '\x3c!--' in comment.",17:"Attribute name cannot contain U+0022 (\"), U+0027 ('), and U+003C (<).",18:"Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",19:"Attribute name cannot start with '='.",21:"'<?' is allowed only in XML context.",20:"Unexpected null character.",22:"Illegal '/' in tags.",23:"Invalid end tag.",24:"Element is missing end tag.",25:"Interpolation end sign was not found.",27:"End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",26:"Legal directive name was expected.",28:"v-if/v-else-if is missing expression.",29:"v-if/else branches must use unique keys.",30:"v-else/v-else-if has no adjacent v-if or v-else-if.",31:"v-for is missing expression.",32:"v-for has invalid expression.",33:"<template v-for> key should be placed on the <template> tag.",34:"v-bind is missing expression.",52:"v-bind with same-name shorthand only allows static argument.",35:"v-on is missing expression.",36:"Unexpected custom directive on <slot> outlet.",37:"Mixed v-slot usage on both the component and nested <template>. When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.",38:"Duplicate slot names found. ",39:"Extraneous children found when component already has explicitly named default slot. These children will be ignored.",40:"v-slot can only be used on components or <template> tags.",41:"v-model is missing expression.",42:"v-model value must be a valid JavaScript member expression.",43:"v-model cannot be used on v-for or v-slot scope variables because they are not writable.",44:"v-model cannot be used on a prop, because local prop bindings are not writable.\nUse a v-bind binding combined with a v-on listener that emits update:x event instead.",45:"Error parsing JavaScript expression: ",46:"<KeepAlive> expects exactly one child component.",51:"@vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, @vnode-mounted should be changed to @vue:mounted. @vnode-* hooks support has been removed in 3.4.",47:'"prefixIdentifiers" option is not supported in this build of compiler.',48:"ES module mode is not supported in this build of compiler.",49:'"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.',50:'"scopeId" option is only supported in module mode.',53:""},Ld=e=>4===e.type&&e.isStatic;function Fd(e){switch(e){case"Teleport":case"teleport":return ju;case"Suspense":case"suspense":return Tu;case"KeepAlive":case"keep-alive":return Au;case"BaseTransition":case"base-transition":return Ou}}const $d=/^\d|[^\$\w\xA0-\uFFFF]/,Dd=e=>!$d.test(e),Bd=/[A-Za-z_$\xA0-\uFFFF]/,Ud=/[\.\?\w$\xA0-\uFFFF]/,Vd=/\s+[.[]\s*|\s*[.[]\s+/g,qd=e=>4===e.type?e.content:e.loc.source,Hd=e=>{const t=qd(e).trim().replace(Vd,(e=>e.trim()));let n=0,o=[],r=0,s=0,i=null;for(let e=0;e<t.length;e++){const a=t.charAt(e);switch(n){case 0:if("["===a)o.push(n),n=1,r++;else if("("===a)o.push(n),n=2,s++;else if(!(0===e?Bd:Ud).test(a))return!1;break;case 1:"'"===a||'"'===a||"`"===a?(o.push(n),n=3,i=a):"["===a?r++:"]"===a&&(--r||(n=o.pop()));break;case 2:if("'"===a||'"'===a||"`"===a)o.push(n),n=3,i=a;else if("("===a)s++;else if(")"===a){if(e===t.length-1)return!1;--s||(n=o.pop())}break;case 3:a===i&&(n=o.pop(),i=null)}}return!r&&!s},zd=/^\s*(async\s*)?(\([^)]*?\)|[\w$_]+)\s*(:[^=]+)?=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Wd=e=>zd.test(qd(e));function Gd(e,t){if(!e)throw new Error(t||"unexpected compiler condition")}function Kd(e,t,n=!1){for(let o=0;o<e.props.length;o++){const r=e.props[o];if(7===r.type&&(n||r.exp)&&(b(t)?r.name===t:t.test(r.name)))return r}}function Jd(e,t,n=!1,o=!1){for(let r=0;r<e.props.length;r++){const s=e.props[r];if(6===s.type){if(n)continue;if(s.name===t&&(s.value||o))return s}else if("bind"===s.name&&(s.exp||o)&&Zd(s.arg,t))return s}}function Zd(e,t){return!(!e||!Ld(e)||e.content!==t)}function Xd(e){return 5===e.type||2===e.type}function Yd(e){return 7===e.type&&"slot"===e.name}function Qd(e){return 1===e.type&&3===e.tagType}function ep(e){return 1===e.type&&2===e.tagType}const tp=new Set([Xu,Yu]);function np(e,t=[]){if(e&&!b(e)&&14===e.type){const n=e.callee;if(!b(n)&&tp.has(n))return np(e.arguments[0],t.concat(e))}return[e,t]}function op(e,t,n){let o,r,s=13===e.type?e.props:e.arguments[2],i=[];if(s&&!b(s)&&14===s.type){const e=np(s);s=e[0],i=e[1],r=i[i.length-1]}if(null==s||b(s))o=md([t]);else if(14===s.type){const e=s.arguments[0];b(e)||15!==e.type?s.callee===Qu?o=bd(n.helper(Ku),[md([t]),s]):s.arguments.unshift(md([t])):rp(t,e)||e.properties.unshift(t),!o&&(o=s)}else 15===s.type?(rp(t,s)||s.properties.unshift(t),o=s):(o=bd(n.helper(Ku),[md([t]),s]),r&&r.callee===Yu&&(r=i[i.length-2]));13===e.type?r?r.arguments[0]=o:e.props=o:r?r.arguments[0]=o:e.arguments[2]=o}function rp(e,t){let n=!1;if(4===e.key.type){const o=e.key.content;n=t.properties.some((e=>4===e.key.type&&e.key.content===o))}return n}function sp(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,n)=>"-"===t?"_":e.charCodeAt(n).toString()))}`}const ip=/([\s\S]*?)\s+(?:in|of)\s+(\S[\s\S]*)/,ap={parseMode:"base",ns:0,delimiters:["{{","}}"],getNamespace:()=>0,isVoidTag:a,isPreTag:a,isIgnoreNewlineTag:a,isCustomElement:a,onError:Nd,onWarn:Pd,comments:!0,prefixIdentifiers:!1};let lp=ap,cp=null,up="",dp=null,pp=null,fp="",hp=-1,mp=-1,gp=0,vp=!1,yp=null;const bp=[],_p=new class{constructor(e,t){this.stack=e,this.cbs=t,this.state=1,this.buffer="",this.sectionStart=0,this.index=0,this.entityStart=0,this.baseState=1,this.inRCDATA=!1,this.inXML=!1,this.inVPre=!1,this.newlines=[],this.mode=0,this.delimiterOpen=Cd,this.delimiterClose=Ed,this.delimiterIndex=-1,this.currentSequence=void 0,this.sequenceIndex=0}get inSFCRoot(){return 2===this.mode&&0===this.stack.length}reset(){this.state=1,this.mode=0,this.buffer="",this.sectionStart=0,this.index=0,this.baseState=1,this.inRCDATA=!1,this.currentSequence=void 0,this.newlines.length=0,this.delimiterOpen=Cd,this.delimiterClose=Ed}getPos(e){let t=1,n=e+1;for(let o=this.newlines.length-1;o>=0;o--){const r=this.newlines[o];if(e>r){t=o+2,n=e-r;break}}return{column:n,line:t,offset:e}}peek(){return this.buffer.charCodeAt(this.index+1)}stateText(e){60===e?(this.index>this.sectionStart&&this.cbs.ontext(this.sectionStart,this.index),this.state=5,this.sectionStart=this.index):this.inVPre||e!==this.delimiterOpen[0]||(this.state=2,this.delimiterIndex=0,this.stateInterpolationOpen(e))}stateInterpolationOpen(e){if(e===this.delimiterOpen[this.delimiterIndex])if(this.delimiterIndex===this.delimiterOpen.length-1){const e=this.index+1-this.delimiterOpen.length;e>this.sectionStart&&this.cbs.ontext(this.sectionStart,e),this.state=3,this.sectionStart=e}else this.delimiterIndex++;else this.inRCDATA?(this.state=32,this.stateInRCDATA(e)):(this.state=1,this.stateText(e))}stateInterpolation(e){e===this.delimiterClose[0]&&(this.state=4,this.delimiterIndex=0,this.stateInterpolationClose(e))}stateInterpolationClose(e){e===this.delimiterClose[this.delimiterIndex]?this.delimiterIndex===this.delimiterClose.length-1?(this.cbs.oninterpolation(this.sectionStart,this.index+1),this.inRCDATA?this.state=32:this.state=1,this.sectionStart=this.index+1):this.delimiterIndex++:(this.state=3,this.stateInterpolation(e))}stateSpecialStartSequence(e){const t=this.sequenceIndex===this.currentSequence.length;if(t?Ad(e):(32|e)===this.currentSequence[this.sequenceIndex]){if(!t)return void this.sequenceIndex++}else this.inRCDATA=!1;this.sequenceIndex=0,this.state=6,this.stateInTagName(e)}stateInRCDATA(e){if(this.sequenceIndex===this.currentSequence.length){if(62===e||Td(e)){const t=this.index-this.currentSequence.length;if(this.sectionStart<t){const e=this.index;this.index=t,this.cbs.ontext(this.sectionStart,t),this.index=e}return this.sectionStart=t+2,this.stateInClosingTagName(e),void(this.inRCDATA=!1)}this.sequenceIndex=0}(32|e)===this.currentSequence[this.sequenceIndex]?this.sequenceIndex+=1:0===this.sequenceIndex?this.currentSequence===Rd.TitleEnd||this.currentSequence===Rd.TextareaEnd&&!this.inSFCRoot?this.inVPre||e!==this.delimiterOpen[0]||(this.state=2,this.delimiterIndex=0,this.stateInterpolationOpen(e)):this.fastForwardTo(60)&&(this.sequenceIndex=1):this.sequenceIndex=Number(60===e)}stateCDATASequence(e){e===Rd.Cdata[this.sequenceIndex]?++this.sequenceIndex===Rd.Cdata.length&&(this.state=28,this.currentSequence=Rd.CdataEnd,this.sequenceIndex=0,this.sectionStart=this.index+1):(this.sequenceIndex=0,this.state=23,this.stateInDeclaration(e))}fastForwardTo(e){for(;++this.index<this.buffer.length;){const t=this.buffer.charCodeAt(this.index);if(10===t&&this.newlines.push(this.index),t===e)return!0}return this.index=this.buffer.length-1,!1}stateInCommentLike(e){e===this.currentSequence[this.sequenceIndex]?++this.sequenceIndex===this.currentSequence.length&&(this.currentSequence===Rd.CdataEnd?this.cbs.oncdata(this.sectionStart,this.index-2):this.cbs.oncomment(this.sectionStart,this.index-2),this.sequenceIndex=0,this.sectionStart=this.index+1,this.state=1):0===this.sequenceIndex?this.fastForwardTo(this.currentSequence[0])&&(this.sequenceIndex=1):e!==this.currentSequence[this.sequenceIndex-1]&&(this.sequenceIndex=0)}startSpecial(e,t){this.enterRCDATA(e,t),this.state=31}enterRCDATA(e,t){this.inRCDATA=!0,this.currentSequence=e,this.sequenceIndex=t}stateBeforeTagName(e){33===e?(this.state=22,this.sectionStart=this.index+1):63===e?(this.state=24,this.sectionStart=this.index+1):jd(e)?(this.sectionStart=this.index,0===this.mode?this.state=6:this.inSFCRoot?this.state=34:this.inXML?this.state=6:this.state=116===e?30:115===e?29:6):47===e?this.state=8:(this.state=1,this.stateText(e))}stateInTagName(e){Ad(e)&&this.handleTagName(e)}stateInSFCRootTagName(e){if(Ad(e)){const t=this.buffer.slice(this.sectionStart,this.index);"template"!==t&&this.enterRCDATA(Od("</"+t),0),this.handleTagName(e)}}handleTagName(e){this.cbs.onopentagname(this.sectionStart,this.index),this.sectionStart=-1,this.state=11,this.stateBeforeAttrName(e)}stateBeforeClosingTagName(e){Td(e)||(62===e?(this.cbs.onerr(14,this.index),this.state=1,this.sectionStart=this.index+1):(this.state=jd(e)?9:27,this.sectionStart=this.index))}stateInClosingTagName(e){(62===e||Td(e))&&(this.cbs.onclosetag(this.sectionStart,this.index),this.sectionStart=-1,this.state=10,this.stateAfterClosingTagName(e))}stateAfterClosingTagName(e){62===e&&(this.state=1,this.sectionStart=this.index+1)}stateBeforeAttrName(e){62===e?(this.cbs.onopentagend(this.index),this.inRCDATA?this.state=32:this.state=1,this.sectionStart=this.index+1):47===e?(this.state=7,62!==this.peek()&&this.cbs.onerr(22,this.index)):60===e&&47===this.peek()?(this.cbs.onopentagend(this.index),this.state=5,this.sectionStart=this.index):Td(e)||(61===e&&this.cbs.onerr(19,this.index),this.handleAttrStart(e))}handleAttrStart(e){118===e&&45===this.peek()?(this.state=13,this.sectionStart=this.index):46===e||58===e||64===e||35===e?(this.cbs.ondirname(this.index,this.index+1),this.state=14,this.sectionStart=this.index+1):(this.state=12,this.sectionStart=this.index)}stateInSelfClosingTag(e){62===e?(this.cbs.onselfclosingtag(this.index),this.state=1,this.sectionStart=this.index+1,this.inRCDATA=!1):Td(e)||(this.state=11,this.stateBeforeAttrName(e))}stateInAttrName(e){61===e||Ad(e)?(this.cbs.onattribname(this.sectionStart,this.index),this.handleAttrNameEnd(e)):34!==e&&39!==e&&60!==e||this.cbs.onerr(17,this.index)}stateInDirName(e){61===e||Ad(e)?(this.cbs.ondirname(this.sectionStart,this.index),this.handleAttrNameEnd(e)):58===e?(this.cbs.ondirname(this.sectionStart,this.index),this.state=14,this.sectionStart=this.index+1):46===e&&(this.cbs.ondirname(this.sectionStart,this.index),this.state=16,this.sectionStart=this.index+1)}stateInDirArg(e){61===e||Ad(e)?(this.cbs.ondirarg(this.sectionStart,this.index),this.handleAttrNameEnd(e)):91===e?this.state=15:46===e&&(this.cbs.ondirarg(this.sectionStart,this.index),this.state=16,this.sectionStart=this.index+1)}stateInDynamicDirArg(e){93===e?this.state=14:(61===e||Ad(e))&&(this.cbs.ondirarg(this.sectionStart,this.index+1),this.handleAttrNameEnd(e),this.cbs.onerr(27,this.index))}stateInDirModifier(e){61===e||Ad(e)?(this.cbs.ondirmodifier(this.sectionStart,this.index),this.handleAttrNameEnd(e)):46===e&&(this.cbs.ondirmodifier(this.sectionStart,this.index),this.sectionStart=this.index+1)}handleAttrNameEnd(e){this.sectionStart=this.index,this.state=17,this.cbs.onattribnameend(this.index),this.stateAfterAttrName(e)}stateAfterAttrName(e){61===e?this.state=18:47===e||62===e?(this.cbs.onattribend(0,this.sectionStart),this.sectionStart=-1,this.state=11,this.stateBeforeAttrName(e)):Td(e)||(this.cbs.onattribend(0,this.sectionStart),this.handleAttrStart(e))}stateBeforeAttrValue(e){34===e?(this.state=19,this.sectionStart=this.index+1):39===e?(this.state=20,this.sectionStart=this.index+1):Td(e)||(this.sectionStart=this.index,this.state=21,this.stateInAttrValueNoQuotes(e))}handleInAttrValue(e,t){(e===t||this.fastForwardTo(t))&&(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(34===t?3:2,this.index+1),this.state=11)}stateInAttrValueDoubleQuotes(e){this.handleInAttrValue(e,34)}stateInAttrValueSingleQuotes(e){this.handleInAttrValue(e,39)}stateInAttrValueNoQuotes(e){Td(e)||62===e?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(1,this.index),this.state=11,this.stateBeforeAttrName(e)):34!==e&&39!==e&&60!==e&&61!==e&&96!==e||this.cbs.onerr(18,this.index)}stateBeforeDeclaration(e){91===e?(this.state=26,this.sequenceIndex=0):this.state=45===e?25:23}stateInDeclaration(e){(62===e||this.fastForwardTo(62))&&(this.state=1,this.sectionStart=this.index+1)}stateInProcessingInstruction(e){(62===e||this.fastForwardTo(62))&&(this.cbs.onprocessinginstruction(this.sectionStart,this.index),this.state=1,this.sectionStart=this.index+1)}stateBeforeComment(e){45===e?(this.state=28,this.currentSequence=Rd.CommentEnd,this.sequenceIndex=2,this.sectionStart=this.index+1):this.state=23}stateInSpecialComment(e){(62===e||this.fastForwardTo(62))&&(this.cbs.oncomment(this.sectionStart,this.index),this.state=1,this.sectionStart=this.index+1)}stateBeforeSpecialS(e){e===Rd.ScriptEnd[3]?this.startSpecial(Rd.ScriptEnd,4):e===Rd.StyleEnd[3]?this.startSpecial(Rd.StyleEnd,4):(this.state=6,this.stateInTagName(e))}stateBeforeSpecialT(e){e===Rd.TitleEnd[3]?this.startSpecial(Rd.TitleEnd,4):e===Rd.TextareaEnd[3]?this.startSpecial(Rd.TextareaEnd,4):(this.state=6,this.stateInTagName(e))}startEntity(){}stateInEntity(){}parse(e){for(this.buffer=e;this.index<this.buffer.length;){const e=this.buffer.charCodeAt(this.index);switch(10===e&&this.newlines.push(this.index),this.state){case 1:this.stateText(e);break;case 2:this.stateInterpolationOpen(e);break;case 3:this.stateInterpolation(e);break;case 4:this.stateInterpolationClose(e);break;case 31:this.stateSpecialStartSequence(e);break;case 32:this.stateInRCDATA(e);break;case 26:this.stateCDATASequence(e);break;case 19:this.stateInAttrValueDoubleQuotes(e);break;case 12:this.stateInAttrName(e);break;case 13:this.stateInDirName(e);break;case 14:this.stateInDirArg(e);break;case 15:this.stateInDynamicDirArg(e);break;case 16:this.stateInDirModifier(e);break;case 28:this.stateInCommentLike(e);break;case 27:this.stateInSpecialComment(e);break;case 11:this.stateBeforeAttrName(e);break;case 6:this.stateInTagName(e);break;case 34:this.stateInSFCRootTagName(e);break;case 9:this.stateInClosingTagName(e);break;case 5:this.stateBeforeTagName(e);break;case 17:this.stateAfterAttrName(e);break;case 20:this.stateInAttrValueSingleQuotes(e);break;case 18:this.stateBeforeAttrValue(e);break;case 8:this.stateBeforeClosingTagName(e);break;case 10:this.stateAfterClosingTagName(e);break;case 29:this.stateBeforeSpecialS(e);break;case 30:this.stateBeforeSpecialT(e);break;case 21:this.stateInAttrValueNoQuotes(e);break;case 7:this.stateInSelfClosingTag(e);break;case 23:this.stateInDeclaration(e);break;case 22:this.stateBeforeDeclaration(e);break;case 25:this.stateBeforeComment(e);break;case 24:this.stateInProcessingInstruction(e);break;case 33:this.stateInEntity()}this.index++}this.cleanup(),this.finish()}cleanup(){this.sectionStart!==this.index&&(1===this.state||32===this.state&&0===this.sequenceIndex?(this.cbs.ontext(this.sectionStart,this.index),this.sectionStart=this.index):19!==this.state&&20!==this.state&&21!==this.state||(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=this.index))}finish(){this.handleTrailingData(),this.cbs.onend()}handleTrailingData(){const e=this.buffer.length;this.sectionStart>=e||(28===this.state?this.currentSequence===Rd.CdataEnd?this.cbs.oncdata(this.sectionStart,e):this.cbs.oncomment(this.sectionStart,e):6===this.state||11===this.state||18===this.state||17===this.state||12===this.state||13===this.state||14===this.state||15===this.state||16===this.state||20===this.state||19===this.state||21===this.state||9===this.state||this.cbs.ontext(this.sectionStart,e))}emitCodePoint(e,t){}}(bp,{onerr:Bp,ontext(e,t){Cp(wp(e,t),e,t)},ontextentity(e,t,n){Cp(e,t,n)},oninterpolation(e,t){if(vp)return Cp(wp(e,t),e,t);let n=e+_p.delimiterOpen.length,o=t-_p.delimiterClose.length;for(;Td(up.charCodeAt(n));)n++;for(;Td(up.charCodeAt(o-1));)o--;let r=wp(n,o);r.includes("&")&&(r=lp.decodeEntities(r,!1)),Ip({type:5,content:Dp(r,!1,Mp(n,o)),loc:Mp(e,t)})},onopentagname(e,t){const n=wp(e,t);dp={type:1,tag:n,ns:lp.getNamespace(n,bp[0],lp.ns),tagType:0,props:[],children:[],loc:Mp(e-1,t),codegenNode:void 0}},onopentagend(e){kp(e)},onclosetag(e,t){const n=wp(e,t);if(!lp.isVoidTag(n)){let o=!1;for(let e=0;e<bp.length;e++){if(bp[e].tag.toLowerCase()===n.toLowerCase()){o=!0,e>0&&Bp(24,bp[0].loc.start.offset);for(let n=0;n<=e;n++){Ep(bp.shift(),t,n<e)}break}}o||Bp(23,jp(e,60))}},onselfclosingtag(e){const t=dp.tag;dp.isSelfClosing=!0,kp(e),bp[0]&&bp[0].tag===t&&Ep(bp.shift(),e)},onattribname(e,t){pp={type:6,name:wp(e,t),nameLoc:Mp(e,t),value:void 0,loc:Mp(e)}},ondirname(e,t){const n=wp(e,t),o="."===n||":"===n?"bind":"@"===n?"on":"#"===n?"slot":n.slice(2);if(vp||""!==o||Bp(26,e),vp||""===o)pp={type:6,name:n,nameLoc:Mp(e,t),value:void 0,loc:Mp(e)};else if(pp={type:7,name:o,rawName:n,exp:void 0,arg:void 0,modifiers:"."===n?[vd("prop")]:[],loc:Mp(e)},"pre"===o){vp=_p.inVPre=!0,yp=dp;const e=dp.props;for(let t=0;t<e.length;t++)7===e[t].type&&(e[t]=$p(e[t]))}},ondirarg(e,t){if(e===t)return;const n=wp(e,t);if(vp)pp.name+=n,Fp(pp.nameLoc,t);else{const o="["!==n[0];pp.arg=Dp(o?n:n.slice(1,-1),o,Mp(e,t),o?3:0)}},ondirmodifier(e,t){const n=wp(e,t);if(vp)pp.name+="."+n,Fp(pp.nameLoc,t);else if("slot"===pp.name){const e=pp.arg;e&&(e.content+="."+n,Fp(e.loc,t))}else{const o=vd(n,!0,Mp(e,t));pp.modifiers.push(o)}},onattribdata(e,t){fp+=wp(e,t),hp<0&&(hp=e),mp=t},onattribentity(e,t,n){fp+=e,hp<0&&(hp=t),mp=n},onattribnameend(e){const t=pp.loc.start.offset,n=wp(t,e);7===pp.type&&(pp.rawName=n),dp.props.some((e=>(7===e.type?e.rawName:e.name)===n))&&Bp(2,t)},onattribend(e,t){if(dp&&pp){if(Fp(pp.loc,t),0!==e)if(fp.includes("&")&&(fp=lp.decodeEntities(fp,!0)),6===pp.type)"class"===pp.name&&(fp=Pp(fp).trim()),1!==e||fp||Bp(13,t),pp.value={type:2,content:fp,loc:1===e?Mp(hp,mp):Mp(hp-1,mp+1)},_p.inSFCRoot&&"template"===dp.tag&&"lang"===pp.name&&fp&&"html"!==fp&&_p.enterRCDATA(Od("</template"),0);else{let e=0;pp.exp=Dp(fp,!1,Mp(hp,mp),0,e),"for"===pp.name&&(pp.forParseResult=function(e){const t=e.loc,n=e.content,o=n.match(ip);if(!o)return;const[,r,s]=o,i=(e,n,o=!1)=>{const r=t.start.offset+n;return Dp(e,!1,Mp(r,r+e.length),0,o?1:0)},a={source:i(s.trim(),n.indexOf(s,r.length)),value:void 0,key:void 0,index:void 0,finalized:!1};let l=r.trim().replace(Sp,"").trim();const c=r.indexOf(l),u=l.match(xp);if(u){l=l.replace(xp,"").trim();const e=u[1].trim();let t;if(e&&(t=n.indexOf(e,c+l.length),a.key=i(e,t,!0)),u[2]){const o=u[2].trim();o&&(a.index=i(o,n.indexOf(o,a.key?t+e.length:c+l.length),!0))}}l&&(a.value=i(l,c,!0));return a}(pp.exp))}7===pp.type&&"pre"===pp.name||dp.props.push(pp)}fp="",hp=mp=-1},oncomment(e,t){lp.comments&&Ip({type:3,content:wp(e,t),loc:Mp(e-4,t+3)})},onend(){const e=up.length;if(1!==_p.state)switch(_p.state){case 5:case 8:Bp(5,e);break;case 3:case 4:Bp(25,_p.sectionStart);break;case 28:_p.currentSequence===Rd.CdataEnd?Bp(6,e):Bp(7,e);break;case 6:case 7:case 9:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:Bp(9,e)}for(let t=0;t<bp.length;t++)Ep(bp[t],e-1),Bp(24,bp[t].loc.start.offset)},oncdata(e,t){0!==bp[0].ns?Cp(wp(e,t),e,t):Bp(1,e-9)},onprocessinginstruction(e){0===(bp[0]?bp[0].ns:lp.ns)&&Bp(21,e-1)}}),xp=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Sp=/^\(|\)$/g;function wp(e,t){return up.slice(e,t)}function kp(e){_p.inSFCRoot&&(dp.innerLoc=Mp(e+1,e+1)),Ip(dp);const{tag:t,ns:n}=dp;0===n&&lp.isPreTag(t)&&gp++,lp.isVoidTag(t)?Ep(dp,e):(bp.unshift(dp),1!==n&&2!==n||(_p.inXML=!0)),dp=null}function Cp(e,t,n){{const t=bp[0]&&bp[0].tag;"script"!==t&&"style"!==t&&e.includes("&")&&(e=lp.decodeEntities(e,!1))}const o=bp[0]||cp,r=o.children[o.children.length-1];r&&2===r.type?(r.content+=e,Fp(r.loc,n)):o.children.push({type:2,content:e,loc:Mp(t,n)})}function Ep(e,t,n=!1){Fp(e.loc,n?jp(t,60):function(e,t){let n=e;for(;up.charCodeAt(n)!==t&&n<up.length-1;)n++;return n}(t,62)+1),_p.inSFCRoot&&(e.children.length?e.innerLoc.end=u({},e.children[e.children.length-1].loc.end):e.innerLoc.end=u({},e.innerLoc.start),e.innerLoc.source=wp(e.innerLoc.start.offset,e.innerLoc.end.offset));const{tag:o,ns:r,children:s}=e;if(vp||("slot"===o?e.tagType=2:!function({tag:e,props:t}){if("template"===e)for(let e=0;e<t.length;e++)if(7===t[e].type&&Tp.has(t[e].name))return!0;return!1}(e)?function({tag:e,props:t}){if(lp.isCustomElement(e))return!1;if("component"===e||(n=e.charCodeAt(0),n>64&&n<91)||Fd(e)||lp.isBuiltInComponent&&lp.isBuiltInComponent(e)||lp.isNativeTag&&!lp.isNativeTag(e))return!0;var n;for(let e=0;e<t.length;e++){const n=t[e];if(6===n.type&&"is"===n.name&&n.value&&n.value.content.startsWith("vue:"))return!0}return!1}(e)&&(e.tagType=1):e.tagType=3),_p.inRCDATA||(e.children=Op(s)),0===r&&lp.isIgnoreNewlineTag(o)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}0===r&&lp.isPreTag(o)&&gp--,yp===e&&(vp=_p.inVPre=!1,yp=null),_p.inXML&&0===(bp[0]?bp[0].ns:lp.ns)&&(_p.inXML=!1)}function jp(e,t){let n=e;for(;up.charCodeAt(n)!==t&&n>=0;)n--;return n}const Tp=new Set(["if","else","else-if","for","slot"]);const Ap=/\r\n/g;function Op(e,t){const n="preserve"!==lp.whitespace;let o=!1;for(let t=0;t<e.length;t++){const r=e[t];if(2===r.type)if(gp)r.content=r.content.replace(Ap,"\n");else if(Rp(r.content)){const s=e[t-1]&&e[t-1].type,i=e[t+1]&&e[t+1].type;!s||!i||n&&(3===s&&(3===i||1===i)||1===s&&(3===i||1===i&&Np(r.content)))?(o=!0,e[t]=null):r.content=" "}else n&&(r.content=Pp(r.content))}return o?e.filter(Boolean):e}function Rp(e){for(let t=0;t<e.length;t++)if(!Td(e.charCodeAt(t)))return!1;return!0}function Np(e){for(let t=0;t<e.length;t++){const n=e.charCodeAt(t);if(10===n||13===n)return!0}return!1}function Pp(e){let t="",n=!1;for(let o=0;o<e.length;o++)Td(e.charCodeAt(o))?n||(t+=" ",n=!0):(t+=e[o],n=!1);return t}function Ip(e){(bp[0]||cp).children.push(e)}function Mp(e,t){return{start:_p.getPos(e),end:null==t?t:_p.getPos(t),source:null==t?t:wp(e,t)}}function Lp(e){return Mp(e.start.offset,e.end.offset)}function Fp(e,t){e.end=_p.getPos(t),e.source=wp(e.start.offset,t)}function $p(e){const t={type:6,name:e.rawName,nameLoc:Mp(e.loc.start.offset,e.loc.start.offset+e.rawName.length),value:void 0,loc:e.loc};if(e.exp){const n=e.exp.loc;n.end.offset<e.loc.end.offset&&(n.start.offset--,n.start.column--,n.end.offset++,n.end.column++),t.value={type:2,content:e.exp.content,loc:n}}return t}function Dp(e,t=!1,n,o=0,r=0){return vd(e,t,n,o)}function Bp(e,t,n){lp.onError(Id(e,Mp(t,t),void 0,n))}function Up(e,t){if(_p.reset(),dp=null,pp=null,fp="",hp=-1,mp=-1,bp.length=0,up=e,lp=u({},ap),t){let e;for(e in t)null!=t[e]&&(lp[e]=t[e])}if(!lp.decodeEntities)throw new Error("[@vue/compiler-core] decodeEntities option is required in browser builds.");_p.mode="html"===lp.parseMode?1:"sfc"===lp.parseMode?2:0,_p.inXML=1===lp.ns||2===lp.ns;const n=t&&t.delimiters;n&&(_p.delimiterOpen=Od(n[0]),_p.delimiterClose=Od(n[1]));const o=cp=function(e,t=""){return{type:0,source:t,children:e,helpers:new Set,components:[],directives:[],hoists:[],imports:[],cached:[],temps:0,codegenNode:void 0,loc:pd}}([],e);return _p.parse(up),o.loc=Mp(0,e.length),o.children=Op(o.children),cp=null,o}function Vp(e,t){Hp(e,void 0,t,qp(e,e.children[0]))}function qp(e,t){const{children:n}=e;return 1===n.length&&1===t.type&&!ep(t)}function Hp(e,t,n,o=!1,r=!1){const{children:s}=e,i=[];for(let t=0;t<s.length;t++){const a=s[t];if(1===a.type&&0===a.tagType){const e=o?0:zp(a,n);if(e>0){if(e>=2){a.codegenNode.patchFlag=-1,i.push(a);continue}}else{const e=a.codegenNode;if(13===e.type){const t=e.patchFlag;if((void 0===t||512===t||1===t)&&Kp(a,n)>=2){const t=Jp(a);t&&(e.props=n.hoist(t))}e.dynamicProps&&(e.dynamicProps=n.hoist(e.dynamicProps))}}}else if(12===a.type){if((o?0:zp(a,n))>=2){i.push(a);continue}}if(1===a.type){const t=1===a.tagType;t&&n.scopes.vSlot++,Hp(a,e,n,!1,r),t&&n.scopes.vSlot--}else if(11===a.type)Hp(a,e,n,1===a.children.length,!0);else if(9===a.type)for(let t=0;t<a.branches.length;t++)Hp(a.branches[t],e,n,1===a.branches[t].children.length,r)}let a=!1;const l=[];if(i.length===s.length&&1===e.type)if(0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&h(e.codegenNode.children))e.codegenNode.children=c(hd(e.codegenNode.children)),a=!0;else if(1===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&e.codegenNode.children&&!h(e.codegenNode.children)&&15===e.codegenNode.children.type){const t=u(e.codegenNode,"default");t&&(l.push(n.cached.length),t.returns=c(hd(t.returns)),a=!0)}else if(3===e.tagType&&t&&1===t.type&&1===t.tagType&&t.codegenNode&&13===t.codegenNode.type&&t.codegenNode.children&&!h(t.codegenNode.children)&&15===t.codegenNode.children.type){const o=Kd(e,"slot",!0),r=o&&o.arg&&u(t.codegenNode,o.arg);r&&(l.push(n.cached.length),r.returns=c(hd(r.returns)),a=!0)}if(!a)for(const e of i)l.push(n.cached.length),e.codegenNode=n.cache(e.codegenNode);function c(e){const t=n.cache(e);return r&&n.hmr&&(t.needArraySpread=!0),t}function u(e,t){if(e.children&&!h(e.children)&&15===e.children.type){const n=e.children.properties.find((e=>e.key===t||e.key.content===t));return n&&n.value}}l.length&&1===e.type&&1===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&e.codegenNode.children&&!h(e.codegenNode.children)&&15===e.codegenNode.children.type&&e.codegenNode.children.properties.push(gd("__",vd(JSON.stringify(l),!1))),i.length&&n.transformHoist&&n.transformHoist(s,n,e)}function zp(e,t){const{constantCache:n}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const o=n.get(e);if(void 0!==o)return o;const r=e.codegenNode;if(13!==r.type)return 0;if(r.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag&&"math"!==e.tag)return 0;if(void 0===r.patchFlag){let o=3;const s=Kp(e,t);if(0===s)return n.set(e,0),0;s<o&&(o=s);for(let r=0;r<e.children.length;r++){const s=zp(e.children[r],t);if(0===s)return n.set(e,0),0;s<o&&(o=s)}if(o>1)for(let r=0;r<e.props.length;r++){const s=e.props[r];if(7===s.type&&"bind"===s.name&&s.exp){const r=zp(s.exp,t);if(0===r)return n.set(e,0),0;r<o&&(o=r)}}if(r.isBlock){for(let t=0;t<e.props.length;t++){if(7===e.props[t].type)return n.set(e,0),0}t.removeHelper(Ru),t.removeHelper(wd(t.inSSR,r.isComponent)),r.isBlock=!1,t.helper(Sd(t.inSSR,r.isComponent))}return n.set(e,o),o}return n.set(e,0),0;case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return zp(e.content,t);case 4:return e.constType;case 8:let s=3;for(let n=0;n<e.children.length;n++){const o=e.children[n];if(b(o)||_(o))continue;const r=zp(o,t);if(0===r)return 0;r<s&&(s=r)}return s;case 20:return 2}}const Wp=new Set([Ju,Zu,Xu,Yu]);function Gp(e,t){if(14===e.type&&!b(e.callee)&&Wp.has(e.callee)){const n=e.arguments[0];if(4===n.type)return zp(n,t);if(14===n.type)return Gp(n,t)}return 0}function Kp(e,t){let n=3;const o=Jp(e);if(o&&15===o.type){const{properties:e}=o;for(let o=0;o<e.length;o++){const{key:r,value:s}=e[o],i=zp(r,t);if(0===i)return i;let a;if(i<n&&(n=i),a=4===s.type?zp(s,t):14===s.type?Gp(s,t):0,0===a)return a;a<n&&(n=a)}}return n}function Jp(e){const t=e.codegenNode;if(13===t.type)return t.props}function Zp(e,{filename:t="",prefixIdentifiers:n=!1,hoistStatic:o=!1,hmr:s=!1,cacheHandlers:a=!1,nodeTransforms:l=[],directiveTransforms:c={},transformHoist:u=null,isBuiltInComponent:d=i,isCustomElement:p=i,expressionPlugins:f=[],scopeId:h=null,slotted:m=!0,ssr:g=!1,inSSR:v=!1,ssrCssVars:y="",bindingMetadata:_=r,inline:x=!1,isTS:S=!1,onError:w=Nd,onWarn:k=Pd,compatConfig:C}){const E=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),j={filename:t,selfName:E&&M(N(E[1])),prefixIdentifiers:n,hoistStatic:o,hmr:s,cacheHandlers:a,nodeTransforms:l,directiveTransforms:c,transformHoist:u,isBuiltInComponent:d,isCustomElement:p,expressionPlugins:f,scopeId:h,slotted:m,ssr:g,inSSR:v,ssrCssVars:y,bindingMetadata:_,inline:x,isTS:S,onError:w,onWarn:k,compatConfig:C,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],cached:[],constantCache:new WeakMap,temps:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,grandParent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=j.helpers.get(e)||0;return j.helpers.set(e,t+1),e},removeHelper(e){const t=j.helpers.get(e);if(t){const n=t-1;n?j.helpers.set(e,n):j.helpers.delete(e)}},helperString(e){return`_${dd[j.helper(e)]}`},replaceNode(e){if(!j.currentNode)throw new Error("Node being replaced is already removed.");if(!j.parent)throw new Error("Cannot replace root node.");j.parent.children[j.childIndex]=j.currentNode=e},removeNode(e){if(!j.parent)throw new Error("Cannot remove root node.");const t=j.parent.children,n=e?t.indexOf(e):j.currentNode?j.childIndex:-1;if(n<0)throw new Error("node being removed is not a child of current parent");e&&e!==j.currentNode?j.childIndex>n&&(j.childIndex--,j.onNodeRemoved()):(j.currentNode=null,j.onNodeRemoved()),j.parent.children.splice(n,1)},onNodeRemoved:i,addIdentifiers(e){},removeIdentifiers(e){},hoist(e){b(e)&&(e=vd(e)),j.hoists.push(e);const t=vd(`_hoisted_${j.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache(e,t=!1,n=!1){const o=function(e,t,n=!1,o=!1){return{type:20,index:e,value:t,needPauseTracking:n,inVOnce:o,needArraySpread:!1,loc:pd}}(j.cached.length,e,t,n);return j.cached.push(o),o}};return j}function Xp(e,t){const n=Zp(e,t);Yp(e,n),t.hoistStatic&&Vp(e,n),t.ssr||function(e,t){const{helper:n}=t,{children:o}=e;if(1===o.length){const n=o[0];if(qp(e,n)&&n.codegenNode){const o=n.codegenNode;13===o.type&&kd(o,t),e.codegenNode=o}else e.codegenNode=n}else if(o.length>1){let r=64;1===o.filter((e=>3!==e.type)).length&&(r|=2048),e.codegenNode=fd(t,n(Eu),void 0,e.children,r,void 0,void 0,!0,void 0,!1)}}(e,n),e.helpers=new Set([...n.helpers.keys()]),e.components=[...n.components],e.directives=[...n.directives],e.imports=n.imports,e.hoists=n.hoists,e.temps=n.temps,e.cached=n.cached,e.transformed=!0}function Yp(e,t){t.currentNode=e;const{nodeTransforms:n}=t,o=[];for(let r=0;r<n.length;r++){const s=n[r](e,t);if(s&&(h(s)?o.push(...s):o.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(Lu);break;case 5:t.ssr||t.helper(Gu);break;case 9:for(let n=0;n<e.branches.length;n++)Yp(e.branches[n],t);break;case 10:case 11:case 1:case 0:!function(e,t){let n=0;const o=()=>{n--};for(;n<e.children.length;n++){const r=e.children[n];b(r)||(t.grandParent=t.parent,t.parent=e,t.childIndex=n,t.onNodeRemoved=o,Yp(r,t))}}(e,t)}t.currentNode=e;let r=o.length;for(;r--;)o[r]()}function Qp(e,t){const n=b(e)?t=>t===e:t=>e.test(t);return(e,o)=>{if(1===e.type){const{props:r}=e;if(3===e.tagType&&r.some(Yd))return;const s=[];for(let i=0;i<r.length;i++){const a=r[i];if(7===a.type&&n(a.name)){r.splice(i,1),i--;const n=t(e,a,o);n&&s.push(n)}}return s}}}const ef="/*@__PURE__*/",tf=e=>`${dd[e]}: _${dd[e]}`;function nf(e,t={}){const n=function(e,{mode:t="function",prefixIdentifiers:n="module"===t,sourceMap:o=!1,filename:r="template.vue.html",scopeId:s=null,optimizeImports:i=!1,runtimeGlobalName:a="Vue",runtimeModuleName:l="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:p=!1}){const f={mode:t,prefixIdentifiers:n,sourceMap:o,filename:r,scopeId:s,optimizeImports:i,runtimeGlobalName:a,runtimeModuleName:l,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:p,source:e.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper(e){return`_${dd[e]}`},push(e,t=-2,n){f.code+=e},indent(){h(++f.indentLevel)},deindent(e=!1){e?--f.indentLevel:h(--f.indentLevel)},newline(){h(f.indentLevel)}};function h(e){f.push("\n"+"  ".repeat(e),0)}return f}(e,t);t.onContextCreated&&t.onContextCreated(n);const{mode:o,push:r,prefixIdentifiers:s,indent:i,deindent:a,newline:l,scopeId:c,ssr:u}=n,d=Array.from(e.helpers),p=d.length>0,f=!s&&"module"!==o;!function(e,t){const{ssr:n,prefixIdentifiers:o,push:r,newline:s,runtimeModuleName:i,runtimeGlobalName:a,ssrRuntimeModuleName:l}=t,c=a,u=Array.from(e.helpers);if(u.length>0&&(r(`const _Vue = ${c}\n`,-1),e.hoists.length)){r(`const { ${[Iu,Mu,Lu,Fu,$u].filter((e=>u.includes(e))).map(tf).join(", ")} } = _Vue\n`,-1)}(function(e,t){if(!e.length)return;t.pure=!0;const{push:n,newline:o}=t;o();for(let r=0;r<e.length;r++){const s=e[r];s&&(n(`const _hoisted_${r+1} = `),af(s,t),o())}t.pure=!1})(e.hoists,t),s(),r("return ")}(e,n);if(r(`function ${u?"ssrRender":"render"}(${(u?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),i(),f&&(r("with (_ctx) {"),i(),p&&(r(`const { ${d.map(tf).join(", ")} } = _Vue\n`,-1),l())),e.components.length&&(of(e.components,"component",n),(e.directives.length||e.temps>0)&&l()),e.directives.length&&(of(e.directives,"directive",n),e.temps>0&&l()),e.temps>0){r("let ");for(let t=0;t<e.temps;t++)r(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(r("\n",0),l()),u||r("return "),e.codegenNode?af(e.codegenNode,n):r("null"),f&&(a(),r("}")),a(),r("}"),{ast:e,code:n.code,preamble:"",map:n.map?n.map.toJSON():void 0}}function of(e,t,{helper:n,push:o,newline:r,isTS:s}){const i=n("component"===t?Du:Uu);for(let n=0;n<e.length;n++){let a=e[n];const l=a.endsWith("__self");l&&(a=a.slice(0,-6)),o(`const ${sp(a,t)} = ${i}(${JSON.stringify(a)}${l?", true":""})${s?"!":""}`),n<e.length-1&&r()}}function rf(e,t){const n=e.length>3||e.some((e=>h(e)||!function(e){return b(e)||4===e.type||2===e.type||5===e.type||8===e.type}(e)));t.push("["),n&&t.indent(),sf(e,t,n),n&&t.deindent(),t.push("]")}function sf(e,t,n=!1,o=!0){const{push:r,newline:s}=t;for(let i=0;i<e.length;i++){const a=e[i];b(a)?r(a,-3):h(a)?rf(a,t):af(a,t),i<e.length-1&&(n?(o&&r(","),s()):o&&r(", "))}}function af(e,t){if(b(e))t.push(e,-3);else if(_(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:Gd(null!=e.codegenNode,"Codegen node is missing for element/if/for node. Apply appropriate transforms first."),af(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),-3,e)}(e,t);break;case 4:lf(e,t);break;case 5:!function(e,t){const{push:n,helper:o,pure:r}=t;r&&n(ef);n(`${o(Gu)}(`),af(e.content,t),n(")")}(e,t);break;case 12:af(e.codegenNode,t);break;case 8:cf(e,t);break;case 3:!function(e,t){const{push:n,helper:o,pure:r}=t;r&&n(ef);n(`${o(Lu)}(${JSON.stringify(e.content)})`,-3,e)}(e,t);break;case 13:!function(e,t){const{push:n,helper:o,pure:r}=t,{tag:s,props:i,children:a,patchFlag:l,dynamicProps:c,directives:u,isBlock:d,disableTracking:p,isComponent:f}=e;let h;if(l)if(l<0)h=l+` /* ${H[l]} */`;else{const e=Object.keys(H).map(Number).filter((e=>e>0&&l&e)).map((e=>H[e])).join(", ");h=l+` /* ${e} */`}u&&n(o(qu)+"(");d&&n(`(${o(Ru)}(${p?"true":""}), `);r&&n(ef);const m=d?wd(t.inSSR,f):Sd(t.inSSR,f);n(o(m)+"(",-2,e),sf(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,i,a,h,c]),t),n(")"),d&&n(")");u&&(n(", "),af(u,t),n(")"))}(e,t);break;case 14:!function(e,t){const{push:n,helper:o,pure:r}=t,s=b(e.callee)?e.callee:o(e.callee);r&&n(ef);n(s+"(",-2,e),sf(e.arguments,t),n(")")}(e,t);break;case 15:!function(e,t){const{push:n,indent:o,deindent:r,newline:s}=t,{properties:i}=e;if(!i.length)return void n("{}",-2,e);const a=i.length>1||i.some((e=>4!==e.value.type));n(a?"{":"{ "),a&&o();for(let e=0;e<i.length;e++){const{key:o,value:r}=i[e];uf(o,t),n(": "),af(r,t),e<i.length-1&&(n(","),s())}a&&r(),n(a?"}":" }")}(e,t);break;case 17:!function(e,t){rf(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:n,indent:o,deindent:r}=t,{params:s,returns:i,body:a,newline:l,isSlot:c}=e;c&&n(`_${dd[id]}(`);n("(",-2,e),h(s)?sf(s,t):s&&af(s,t);n(") => "),(l||a)&&(n("{"),o());i?(l&&n("return "),h(i)?rf(i,t):af(i,t)):a&&af(a,t);(l||a)&&(r(),n("}"));c&&n(")")}(e,t);break;case 19:!function(e,t){const{test:n,consequent:o,alternate:r,newline:s}=e,{push:i,indent:a,deindent:l,newline:c}=t;if(4===n.type){const e=!Dd(n.content);e&&i("("),lf(n,t),e&&i(")")}else i("("),af(n,t),i(")");s&&a(),t.indentLevel++,s||i(" "),i("? "),af(o,t),t.indentLevel--,s&&c(),s||i(" "),i(": ");const u=19===r.type;u||t.indentLevel++;af(r,t),u||t.indentLevel--;s&&l(!0)}(e,t);break;case 20:!function(e,t){const{push:n,helper:o,indent:r,deindent:s,newline:i}=t,{needPauseTracking:a,needArraySpread:l}=e;l&&n("[...(");n(`_cache[${e.index}] || (`),a&&(r(),n(`${o(od)}(-1`),e.inVOnce&&n(", true"),n("),"),i(),n("("));n(`_cache[${e.index}] = `),af(e.value,t),a&&(n(`).cacheIndex = ${e.index},`),i(),n(`${o(od)}(1),`),i(),n(`_cache[${e.index}]`),s());n(")"),l&&n(")]")}(e,t);break;case 21:sf(e.body,t,!0,!1);break;case 22:case 23:case 24:case 25:case 26:case 10:break;default:Gd(!1,`unhandled codegen node type: ${e.type}`);return e}}function lf(e,t){const{content:n,isStatic:o}=e;t.push(o?JSON.stringify(n):n,-3,e)}function cf(e,t){for(let n=0;n<e.children.length;n++){const o=e.children[n];b(o)?t.push(o,-3):af(o,t)}}function uf(e,t){const{push:n}=t;if(8===e.type)n("["),cf(e,t),n("]");else if(e.isStatic){n(Dd(e.content)?e.content:JSON.stringify(e.content),-2,e)}else n(`[${e.content}]`,-3,e)}const df=new RegExp("\\b"+"arguments,await,break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,let,new,return,super,switch,throw,try,var,void,while,with,yield".split(",").join("\\b|\\b")+"\\b"),pf=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;function ff(e,t,n=!1,o=!1){const r=e.content;if(r.trim())try{new Function(o?` ${r} `:"return "+(n?`(${r}) => {}`:`(${r})`))}catch(n){let o=n.message;const s=r.replace(pf,"").match(df);s&&(o=`avoid using JavaScript keyword as property name: "${s[0]}"`),t.onError(Id(45,e.loc,void 0,o))}}const hf=(e,t)=>{if(5===e.type)e.content=mf(e.content,t);else if(1===e.type){const n=Kd(e,"memo");for(let o=0;o<e.props.length;o++){const r=e.props[o];if(7===r.type&&"for"!==r.name){const e=r.exp,o=r.arg;!e||4!==e.type||"on"===r.name&&o||n&&o&&4===o.type&&"key"===o.content||(r.exp=mf(e,t,"slot"===r.name)),o&&4===o.type&&!o.isStatic&&(r.arg=mf(o,t))}}}};function mf(e,t,n=!1,o=!1,r=Object.create(t.identifiers)){return ff(e,t,n,o),e}const gf=Qp(/^(if|else|else-if)$/,((e,t,n)=>function(e,t,n,o){if(!("else"===t.name||t.exp&&t.exp.content.trim())){const o=t.exp?t.exp.loc:e.loc;n.onError(Id(28,t.loc)),t.exp=vd("true",!1,o)}t.exp&&ff(t.exp,n);if("if"===t.name){const r=vf(e,t),s={type:9,loc:Lp(e.loc),branches:[r]};if(n.replaceNode(s),o)return o(s,r,!0)}else{const r=n.parent.children,s=[];let i=r.indexOf(e);for(;i-- >=-1;){const a=r[i];if(a&&3===a.type)n.removeNode(a),s.unshift(a);else{if(!a||2!==a.type||a.content.trim().length){if(a&&9===a.type){"else-if"===t.name&&void 0===a.branches[a.branches.length-1].condition&&n.onError(Id(30,e.loc)),n.removeNode();const r=vf(e,t);s.length&&(!n.parent||1!==n.parent.type||"transition"!==n.parent.tag&&"Transition"!==n.parent.tag)&&(r.children=[...s,...r.children]);{const e=r.userKey;e&&a.branches.forEach((({userKey:t})=>{_f(t,e)&&n.onError(Id(29,r.userKey.loc))}))}a.branches.push(r);const i=o&&o(a,r,!1);Yp(r,n),i&&i(),n.currentNode=null}else n.onError(Id(30,e.loc));break}n.removeNode(a)}}}}(e,t,n,((e,t,o)=>{const r=n.parent.children;let s=r.indexOf(e),i=0;for(;s-- >=0;){const e=r[s];e&&9===e.type&&(i+=e.branches.length)}return()=>{if(o)e.codegenNode=yf(t,i,n);else{const o=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);o.alternate=yf(t,i+e.branches.length-1,n)}}}))));function vf(e,t){const n=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:n&&!Kd(e,"for")?e.children:[e],userKey:Jd(e,"key"),isTemplateIf:n}}function yf(e,t,n){return e.condition?xd(e.condition,bf(e,t,n),bd(n.helper(Lu),['"v-if"',"true"])):bf(e,t,n)}function bf(e,t,n){const{helper:o}=n,r=gd("key",vd(`${t}`,!1,pd,2)),{children:s}=e,i=s[0];if(1!==s.length||1!==i.type){if(1===s.length&&11===i.type){const e=i.codegenNode;return op(e,r,n),e}{let t=64;return e.isTemplateIf||1!==s.filter((e=>3!==e.type)).length||(t|=2048),fd(n,o(Eu),md([r]),s,t,void 0,void 0,!0,!1,!1,e.loc)}}{const e=i.codegenNode,t=14===(a=e).type&&a.callee===cd?a.arguments[1].returns:a;return 13===t.type&&kd(t,n),op(t,r,n),e}var a}function _f(e,t){if(!e||e.type!==t.type)return!1;if(6===e.type){if(e.value.content!==t.value.content)return!1}else{const n=e.exp,o=t.exp;if(n.type!==o.type)return!1;if(4!==n.type||n.isStatic!==o.isStatic||n.content!==o.content)return!1}return!0}const xf=(e,t,n)=>{const{modifiers:o,loc:r}=e,s=e.arg;let{exp:i}=e;if(i&&4===i.type&&!i.content.trim()&&(i=void 0),!i){if(4!==s.type||!s.isStatic)return n.onError(Id(52,s.loc)),{props:[gd(s,vd("",!0,r))]};Sf(e),i=e.exp}return 4!==s.type?(s.children.unshift("("),s.children.push(') || ""')):s.isStatic||(s.content=`${s.content} || ""`),o.some((e=>"camel"===e.content))&&(4===s.type?s.isStatic?s.content=N(s.content):s.content=`${n.helperString(ed)}(${s.content})`:(s.children.unshift(`${n.helperString(ed)}(`),s.children.push(")"))),n.inSSR||(o.some((e=>"prop"===e.content))&&wf(s,"."),o.some((e=>"attr"===e.content))&&wf(s,"^")),{props:[gd(s,i)]}},Sf=(e,t)=>{const n=e.arg,o=N(n.content);e.exp=vd(o,!1,n.loc)},wf=(e,t)=>{4===e.type?e.isStatic?e.content=t+e.content:e.content=`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},kf=Qp("for",((e,t,n)=>{const{helper:o,removeHelper:r}=n;return function(e,t,n,o){if(!t.exp)return void n.onError(Id(31,t.loc));const r=t.forParseResult;if(!r)return void n.onError(Id(32,t.loc));Cf(r,n);const{addIdentifiers:s,removeIdentifiers:i,scopes:a}=n,{source:l,value:c,key:u,index:d}=r,p={type:11,loc:t.loc,source:l,valueAlias:c,keyAlias:u,objectIndexAlias:d,parseResult:r,children:Qd(e)?e.children:[e]};n.replaceNode(p),a.vFor++;const f=o&&o(p);return()=>{a.vFor--,f&&f()}}(e,t,n,(t=>{const s=bd(o(Hu),[t.source]),i=Qd(e),a=Kd(e,"memo"),l=Jd(e,"key",!1,!0);l&&7===l.type&&!l.exp&&Sf(l);let c=l&&(6===l.type?l.value?vd(l.value.content,!0):void 0:l.exp);const u=l&&c?gd("key",c):null,d=4===t.source.type&&t.source.constType>0,p=d?64:l?128:256;return t.codegenNode=fd(n,o(Eu),void 0,s,p,void 0,void 0,!0,!d,!1,e.loc),()=>{let l;const{children:p}=t;i&&e.children.some((e=>{if(1===e.type){const t=Jd(e,"key");if(t)return n.onError(Id(33,t.loc)),!0}}));const f=1!==p.length||1!==p[0].type,h=ep(e)?e:i&&1===e.children.length&&ep(e.children[0])?e.children[0]:null;if(h?(l=h.codegenNode,i&&u&&op(l,u,n)):f?l=fd(n,o(Eu),u?md([u]):void 0,e.children,64,void 0,void 0,!0,void 0,!1):(l=p[0].codegenNode,i&&u&&op(l,u,n),l.isBlock!==!d&&(l.isBlock?(r(Ru),r(wd(n.inSSR,l.isComponent))):r(Sd(n.inSSR,l.isComponent))),l.isBlock=!d,l.isBlock?(o(Ru),o(wd(n.inSSR,l.isComponent))):o(Sd(n.inSSR,l.isComponent))),a){const e=_d(Ef(t.parseResult,[vd("_cached")]));e.body={type:21,body:[yd(["const _memo = (",a.exp,")"]),yd(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${n.helperString(ud)}(_cached, _memo)) return _cached`]),yd(["const _item = ",l]),vd("_item.memo = _memo"),vd("return _item")],loc:pd},s.arguments.push(e,vd("_cache"),vd(String(n.cached.length))),n.cached.push(null)}else s.arguments.push(_d(Ef(t.parseResult),l,!0))}}))}));function Cf(e,t){e.finalized||(ff(e.source,t),e.key&&ff(e.key,t,!0),e.index&&ff(e.index,t,!0),e.value&&ff(e.value,t,!0),e.finalized=!0)}function Ef({value:e,key:t,index:n},o=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||vd("_".repeat(t+1),!1)))}([e,t,n,...o])}const jf=vd("undefined",!1),Tf=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){const n=Kd(e,"slot");if(n)return n.exp,t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Af=(e,t,n,o)=>_d(e,n,!1,!0,n.length?n[0].loc:o);function Of(e,t,n=Af){t.helper(id);const{children:o,loc:r}=e,s=[],i=[];let a=t.scopes.vSlot>0||t.scopes.vFor>0;const l=Kd(e,"slot",!0);if(l){const{arg:e,exp:t}=l;e&&!Ld(e)&&(a=!0),s.push(gd(e||vd("default",!0),n(t,void 0,o,r)))}let c=!1,u=!1;const d=[],p=new Set;let f=0;for(let e=0;e<o.length;e++){const r=o[e];let h;if(!Qd(r)||!(h=Kd(r,"slot",!0))){3!==r.type&&d.push(r);continue}if(l){t.onError(Id(37,h.loc));break}c=!0;const{children:m,loc:g}=r,{arg:v=vd("default",!0),exp:y,loc:b}=h;let _;Ld(v)?_=v?v.content:"default":a=!0;const x=Kd(r,"for"),S=n(y,x,m,g);let w,k;if(w=Kd(r,"if"))a=!0,i.push(xd(w.exp,Rf(v,S,f++),jf));else if(k=Kd(r,/^else(-if)?$/,!0)){let n,r=e;for(;r--&&(n=o[r],3===n.type););if(n&&Qd(n)&&Kd(n,/^(else-)?if$/)){let e=i[i.length-1];for(;19===e.alternate.type;)e=e.alternate;e.alternate=k.exp?xd(k.exp,Rf(v,S,f++),jf):Rf(v,S,f++)}else t.onError(Id(30,k.loc))}else if(x){a=!0;const e=x.forParseResult;e?(Cf(e,t),i.push(bd(t.helper(Hu),[e.source,_d(Ef(e),Rf(v,S),!0)]))):t.onError(Id(32,x.loc))}else{if(_){if(p.has(_)){t.onError(Id(38,b));continue}p.add(_),"default"===_&&(u=!0)}s.push(gd(v,S))}}if(!l){const e=(e,t)=>gd("default",n(e,void 0,t,r));c?d.length&&d.some((e=>Pf(e)))&&(u?t.onError(Id(39,d[0].loc)):s.push(e(void 0,d))):s.push(e(void 0,o))}const h=a?2:Nf(e.children)?3:1;let m=md(s.concat(gd("_",vd(h+` /* ${z[h]} */`,!1))),r);return i.length&&(m=bd(t.helper(Wu),[m,hd(i)])),{slots:m,hasDynamicSlots:a}}function Rf(e,t,n){const o=[gd("name",e),gd("fn",t)];return null!=n&&o.push(gd("key",vd(String(n),!0))),md(o)}function Nf(e){for(let t=0;t<e.length;t++){const n=e[t];switch(n.type){case 1:if(2===n.tagType||Nf(n.children))return!0;break;case 9:if(Nf(n.branches))return!0;break;case 10:case 11:if(Nf(n.children))return!0}}return!1}function Pf(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Pf(e.content))}const If=new WeakMap,Mf=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:n,props:o}=e,r=1===e.tagType;let s=r?function(e,t,n=!1){let{tag:o}=e;const r=Df(o),s=Jd(e,"is",!1,!0);if(s)if(r){let e;if(6===s.type?e=s.value&&vd(s.value.content,!0):(e=s.exp,e||(e=vd("is",!1,s.arg.loc))),e)return bd(t.helper(Bu),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(o=s.value.content.slice(4));const i=Fd(o)||t.isBuiltInComponent(o);if(i)return n||t.helper(i),i;return t.helper(Du),t.components.add(o),sp(o,"component")}(e,t):`"${n}"`;const i=x(s)&&s.callee===Bu;let a,l,c,u,d,p=0,f=i||s===ju||s===Tu||!r&&("svg"===n||"foreignObject"===n||"math"===n);if(o.length>0){const n=Lf(e,t,void 0,r,i);a=n.props,p=n.patchFlag,u=n.dynamicPropNames;const o=n.directives;d=o&&o.length?hd(o.map((e=>function(e,t){const n=[],o=If.get(e);o?n.push(t.helperString(o)):(t.helper(Uu),t.directives.add(e.name),n.push(sp(e.name,"directive")));const{loc:r}=e;e.exp&&n.push(e.exp);e.arg&&(e.exp||n.push("void 0"),n.push(e.arg));if(Object.keys(e.modifiers).length){e.arg||(e.exp||n.push("void 0"),n.push("void 0"));const t=vd("true",!1,r);n.push(md(e.modifiers.map((e=>gd(e,t))),r))}return hd(n,e.loc)}(e,t)))):void 0,n.shouldUseBlock&&(f=!0)}if(e.children.length>0){s===Au&&(f=!0,p|=1024,e.children.length>1&&t.onError(Id(46,{start:e.children[0].loc.start,end:e.children[e.children.length-1].loc.end,source:""})));if(r&&s!==ju&&s!==Au){const{slots:n,hasDynamicSlots:o}=Of(e,t);l=n,o&&(p|=1024)}else if(1===e.children.length&&s!==ju){const n=e.children[0],o=n.type,r=5===o||8===o;r&&0===zp(n,t)&&(p|=1),l=r||2===o?n:e.children}else l=e.children}u&&u.length&&(c=function(e){let t="[";for(let n=0,o=e.length;n<o;n++)t+=JSON.stringify(e[n]),n<o-1&&(t+=", ");return t+"]"}(u)),e.codegenNode=fd(t,s,a,l,0===p?void 0:p,c,d,!!f,!1,r,e.loc)};function Lf(e,t,n=e.props,o,r,s=!1){const{tag:i,loc:a,children:c}=e;let u=[];const d=[],p=[],f=c.length>0;let h=!1,m=0,g=!1,v=!1,y=!1,b=!1,x=!1,S=!1;const w=[],k=e=>{u.length&&(d.push(md(Ff(u),a)),u=[]),e&&d.push(e)},C=()=>{t.scopes.vFor>0&&u.push(gd(vd("ref_for",!0),vd("true")))},E=({key:e,value:n})=>{if(Ld(e)){const s=e.content,i=l(s);if(!i||o&&!r||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||T(s)||(b=!0),i&&T(s)&&(S=!0),i&&14===n.type&&(n=n.arguments[0]),20===n.type||(4===n.type||8===n.type)&&zp(n,t)>0)return;"ref"===s?g=!0:"class"===s?v=!0:"style"===s?y=!0:"key"===s||w.includes(s)||w.push(s),!o||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else x=!0};for(let r=0;r<n.length;r++){const l=n[r];if(6===l.type){const{loc:e,name:t,nameLoc:n,value:o}=l;let r=!0;if("ref"===t&&(g=!0,C()),"is"===t&&(Df(i)||o&&o.content.startsWith("vue:")))continue;u.push(gd(vd(t,!0,n),vd(o?o.content:"",r,o?o.loc:e)))}else{const{name:n,arg:r,exp:c,loc:g,modifiers:v}=l,y="bind"===n,b="on"===n;if("slot"===n){o||t.onError(Id(40,g));continue}if("once"===n||"memo"===n)continue;if("is"===n||y&&Zd(r,"is")&&Df(i))continue;if(b&&s)continue;if((y&&Zd(r,"key")||b&&f&&Zd(r,"vue:before-update"))&&(h=!0),y&&Zd(r,"ref")&&C(),!r&&(y||b)){x=!0,c?y?(C(),k(),d.push(c)):k({type:14,loc:g,callee:t.helper(Qu),arguments:o?[c]:[c,"true"]}):t.onError(Id(y?34:35,g));continue}y&&v.some((e=>"prop"===e.content))&&(m|=32);const S=t.directiveTransforms[n];if(S){const{props:n,needRuntime:o}=S(l,e,t);!s&&n.forEach(E),b&&r&&!Ld(r)?k(md(n,a)):u.push(...n),o&&(p.push(l),_(o)&&If.set(l,o))}else A(n)||(p.push(l),f&&(h=!0))}}let j;if(d.length?(k(),j=d.length>1?bd(t.helper(Ku),d,a):d[0]):u.length&&(j=md(Ff(u),a)),x?m|=16:(v&&!o&&(m|=2),y&&!o&&(m|=4),w.length&&(m|=8),b&&(m|=32)),h||0!==m&&32!==m||!(g||S||p.length>0)||(m|=512),!t.inSSR&&j)switch(j.type){case 15:let e=-1,n=-1,o=!1;for(let t=0;t<j.properties.length;t++){const r=j.properties[t].key;Ld(r)?"class"===r.content?e=t:"style"===r.content&&(n=t):r.isHandlerKey||(o=!0)}const r=j.properties[e],s=j.properties[n];o?j=bd(t.helper(Xu),[j]):(r&&!Ld(r.value)&&(r.value=bd(t.helper(Ju),[r.value])),s&&(y||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=bd(t.helper(Zu),[s.value])));break;case 14:break;default:j=bd(t.helper(Xu),[bd(t.helper(Yu),[j])])}return{props:j,directives:p,patchFlag:m,dynamicPropNames:w,shouldUseBlock:h}}function Ff(e){const t=new Map,n=[];for(let o=0;o<e.length;o++){const r=e[o];if(8===r.key.type||!r.key.isStatic){n.push(r);continue}const s=r.key.content,i=t.get(s);i?("style"===s||"class"===s||l(s))&&$f(i,r):(t.set(s,r),n.push(r))}return n}function $f(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=hd([e.value,t.value],e.loc)}function Df(e){return"component"===e||"Component"===e}const Bf=(e,t)=>{if(ep(e)){const{children:n,loc:o}=e,{slotName:r,slotProps:s}=function(e,t){let n,o='"default"';const r=[];for(let t=0;t<e.props.length;t++){const n=e.props[t];if(6===n.type)n.value&&("name"===n.name?o=JSON.stringify(n.value.content):(n.name=N(n.name),r.push(n)));else if("bind"===n.name&&Zd(n.arg,"name")){if(n.exp)o=n.exp;else if(n.arg&&4===n.arg.type){const e=N(n.arg.content);o=n.exp=vd(e,!1,n.arg.loc)}}else"bind"===n.name&&n.arg&&Ld(n.arg)&&(n.arg.content=N(n.arg.content)),r.push(n)}if(r.length>0){const{props:o,directives:s}=Lf(e,t,r,!1,!1);n=o,s.length&&t.onError(Id(36,s[0].loc))}return{slotName:o,slotProps:n}}(e,t),i=[t.prefixIdentifiers?"_ctx.$slots":"$slots",r,"{}","undefined","true"];let a=2;s&&(i[2]=s,a=3),n.length&&(i[3]=_d([],n,!1,!1,o),a=4),t.scopeId&&!t.slotted&&(a=5),i.splice(a),e.codegenNode=bd(t.helper(zu),i,o)}};const Uf=(e,t,n,o)=>{const{loc:r,modifiers:s,arg:i}=e;let a;if(e.exp||s.length||n.onError(Id(35,r)),4===i.type)if(i.isStatic){let e=i.content;e.startsWith("vnode")&&n.onError(Id(51,i.loc)),e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`);a=vd(0!==t.tagType||e.startsWith("vnode")||!/[A-Z]/.test(e)?L(N(e)):`on:${e}`,!0,i.loc)}else a=yd([`${n.helperString(nd)}(`,i,")"]);else a=i,a.children.unshift(`${n.helperString(nd)}(`),a.children.push(")");let l=e.exp;l&&!l.content.trim()&&(l=void 0);let c=n.cacheHandlers&&!l&&!n.inVOnce;if(l){const e=Hd(l),t=!(e||Wd(l)),o=l.content.includes(";");ff(l,n,!1,o),(t||c&&e)&&(l=yd([`${t?"$event":"(...args)"} => ${o?"{":"("}`,l,o?"}":")"]))}let u={props:[gd(a,l||vd("() => {}",!1,r))]};return o&&(u=o(u)),c&&(u.props[0].value=n.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Vf=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const n=e.children;let o,r=!1;for(let e=0;e<n.length;e++){const t=n[e];if(Xd(t)){r=!0;for(let r=e+1;r<n.length;r++){const s=n[r];if(!Xd(s)){o=void 0;break}o||(o=n[e]=yd([t],t.loc)),o.children.push(" + ",s),n.splice(r,1),r--}}}if(r&&(1!==n.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<n.length;e++){const o=n[e];if(Xd(o)||8===o.type){const r=[];2===o.type&&" "===o.content||r.push(o),t.ssr||0!==zp(o,t)||r.push(`1 /* ${H[1]} */`),n[e]={type:12,content:o,loc:o.loc,codegenNode:bd(t.helper(Fu),r)}}}}},qf=new WeakSet,Hf=(e,t)=>{if(1===e.type&&Kd(e,"once",!0)){if(qf.has(e)||t.inVOnce||t.inSSR)return;return qf.add(e),t.inVOnce=!0,t.helper(od),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0,!0))}}},zf=(e,t,n)=>{const{exp:o,arg:r}=e;if(!o)return n.onError(Id(41,e.loc)),Wf();const s=o.loc.source.trim(),i=4===o.type?o.content:s,a=n.bindingMetadata[s];if("props"===a||"props-aliased"===a)return n.onError(Id(44,o.loc)),Wf();if(!i.trim()||!Hd(o))return n.onError(Id(42,o.loc)),Wf();const l=r||vd("modelValue",!0),c=r?Ld(r)?`onUpdate:${N(r.content)}`:yd(['"onUpdate:" + ',r]):"onUpdate:modelValue";let u;u=yd([`${n.isTS?"($event: any)":"$event"} => ((`,o,") = $event)"]);const d=[gd(l,e.exp),gd(c,u)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>e.content)).map((e=>(Dd(e)?e:JSON.stringify(e))+": true")).join(", "),n=r?Ld(r)?`${r.content}Modifiers`:yd([r,' + "Modifiers"']):"modelModifiers";d.push(gd(n,vd(`{ ${t} }`,!1,e.loc,2)))}return Wf(d)};function Wf(e=[]){return{props:e}}const Gf=new WeakSet,Kf=(e,t)=>{if(1===e.type){const n=Kd(e,"memo");if(!n||Gf.has(e))return;return Gf.add(e),()=>{const o=e.codegenNode||t.currentNode.codegenNode;o&&13===o.type&&(1!==e.tagType&&kd(o,t),e.codegenNode=bd(t.helper(cd),[n.exp,_d(void 0,o),"_cache",String(t.cached.length)]),t.cached.push(null))}}};function Jf(e,t={}){const n=t.onError||Nd,o="module"===t.mode;!0===t.prefixIdentifiers?n(Id(47)):o&&n(Id(48));t.cacheHandlers&&n(Id(49)),t.scopeId&&!o&&n(Id(50));const r=u({},t,{prefixIdentifiers:!1}),s=b(e)?Up(e,r):e,[i,a]=[[Hf,gf,Kf,kf,hf,Bf,Mf,Tf,Vf],{on:Uf,bind:xf,model:zf}];return Xp(s,u({},r,{nodeTransforms:[...i,...t.nodeTransforms||[]],directiveTransforms:u({},a,t.directiveTransforms||{})})),nf(s,r)}const Zf=Symbol("vModelRadio"),Xf=Symbol("vModelCheckbox"),Yf=Symbol("vModelText"),Qf=Symbol("vModelSelect"),eh=Symbol("vModelDynamic"),th=Symbol("vOnModifiersGuard"),nh=Symbol("vOnKeysGuard"),oh=Symbol("vShow"),rh=Symbol("Transition"),sh=Symbol("TransitionGroup");var ih;let ah;ih={[Zf]:"vModelRadio",[Xf]:"vModelCheckbox",[Yf]:"vModelText",[Qf]:"vModelSelect",[eh]:"vModelDynamic",[th]:"withModifiers",[nh]:"withKeys",[oh]:"vShow",[rh]:"Transition",[sh]:"TransitionGroup"},Object.getOwnPropertySymbols(ih).forEach((e=>{dd[e]=ih[e]}));const lh={parseMode:"html",isVoidTag:re,isNativeTag:e=>te(e)||ne(e)||oe(e),isPreTag:e=>"pre"===e,isIgnoreNewlineTag:e=>"pre"===e||"textarea"===e,decodeEntities:function(e,t=!1){return ah||(ah=document.createElement("div")),t?(ah.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,ah.children[0].getAttribute("foo")):(ah.innerHTML=e,ah.textContent)},isBuiltInComponent:e=>"Transition"===e||"transition"===e?rh:"TransitionGroup"===e||"transition-group"===e?sh:void 0,getNamespace(e,t,n){let o=t?t.ns:n;if(t&&2===o)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(o=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(o=0);else t&&1===o&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(o=0));if(0===o){if("svg"===e)return 1;if("math"===e)return 2}return o}},ch=(e,t)=>{const n=Y(e);return vd(JSON.stringify(n),!1,t,3)};function uh(e,t){return Id(e,t,dh)}const dh={53:"v-html is missing expression.",54:"v-html will override element children.",55:"v-text is missing expression.",56:"v-text will override element children.",57:"v-model can only be used on <input>, <textarea> and <select> elements.",58:"v-model argument is not supported on plain elements.",59:"v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.",60:"Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.",61:"v-show is missing expression.",62:"<Transition> expects exactly one child element or component.",63:"Tags with side effect (<script> and <style>) are ignored in client component templates."},ph=o("passive,once,capture"),fh=o("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),hh=o("left,right"),mh=o("onkeyup,onkeydown,onkeypress"),gh=(e,t)=>Ld(e)&&"onclick"===e.content.toLowerCase()?vd(t,!0):4!==e.type?yd(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e;function vh(e){const t=e.children=e.children.filter((e=>3!==e.type&&!(2===e.type&&!e.content.trim()))),n=t[0];return 1!==t.length||11===n.type||9===n.type&&n.branches.some(vh)}const yh=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||(t.onError(uh(63,e.loc)),t.removeNode())};const bh=new Set(["h1","h2","h3","h4","h5","h6"]),_h=new Set([]),xh={head:new Set(["base","basefront","bgsound","link","meta","title","noscript","noframes","style","script","template"]),optgroup:new Set(["option"]),select:new Set(["optgroup","option","hr"]),table:new Set(["caption","colgroup","tbody","tfoot","thead"]),tr:new Set(["td","th"]),colgroup:new Set(["col"]),tbody:new Set(["tr"]),thead:new Set(["tr"]),tfoot:new Set(["tr"]),script:_h,iframe:_h,option:_h,textarea:_h,style:_h,title:_h},Sh={html:_h,body:new Set(["html"]),head:new Set(["html"]),td:new Set(["tr"]),colgroup:new Set(["table"]),caption:new Set(["table"]),tbody:new Set(["table"]),tfoot:new Set(["table"]),col:new Set(["colgroup"]),th:new Set(["tr"]),thead:new Set(["table"]),tr:new Set(["tbody","thead","tfoot"]),dd:new Set(["dl","div"]),dt:new Set(["dl","div"]),figcaption:new Set(["figure"]),summary:new Set(["details"]),area:new Set(["map"])},wh={p:new Set(["address","article","aside","blockquote","center","details","dialog","dir","div","dl","fieldset","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","li","main","nav","menu","ol","p","pre","section","table","ul"]),svg:new Set(["b","blockquote","br","code","dd","div","dl","dt","em","embed","h1","h2","h3","h4","h5","h6","hr","i","img","li","menu","meta","ol","p","pre","ruby","s","small","span","strong","sub","sup","table","u","ul","var"])},kh={a:new Set(["a"]),button:new Set(["button"]),dd:new Set(["dd","dt"]),dt:new Set(["dd","dt"]),form:new Set(["form"]),li:new Set(["li"]),h1:bh,h2:bh,h3:bh,h4:bh,h5:bh,h6:bh},Ch=[e=>{1===e.type&&e.props.forEach(((t,n)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[n]={type:7,name:"bind",arg:vd("style",!0,t.loc),exp:ch(t.value.content,t.loc),modifiers:[],loc:t.loc})}))},(e,t)=>{if(1===e.type&&1===e.tagType){if(t.isBuiltInComponent(e.tag)===rh)return()=>{if(!e.children.length)return;vh(e)&&t.onError(uh(62,{start:e.children[0].loc.start,end:e.children[e.children.length-1].loc.end,source:""}));const n=e.children[0];if(1===n.type)for(const t of n.props)7===t.type&&"show"===t.name&&e.props.push({type:6,name:"persisted",nameLoc:e.loc,value:void 0,loc:e.loc})}}},(e,t)=>{if(1===e.type&&0===e.tagType&&t.parent&&1===t.parent.type&&0===t.parent.tagType&&(n=t.parent.tag,o=e.tag,"template"!==n&&(n in xh?!xh[n].has(o):o in Sh?!Sh[o].has(n):n in wh&&wh[n].has(o)||o in kh&&kh[o].has(n)))){const n=new SyntaxError(`<${e.tag}> cannot be child of <${t.parent.tag}>, according to HTML specifications. This can cause hydration errors or potentially disrupt future functionality.`);n.loc=e.loc,t.onWarn(n)}var n,o}],Eh={cloak:()=>({props:[]}),html:(e,t,n)=>{const{exp:o,loc:r}=e;return o||n.onError(uh(53,r)),t.children.length&&(n.onError(uh(54,r)),t.children.length=0),{props:[gd(vd("innerHTML",!0,r),o||vd("",!0))]}},text:(e,t,n)=>{const{exp:o,loc:r}=e;return o||n.onError(uh(55,r)),t.children.length&&(n.onError(uh(56,r)),t.children.length=0),{props:[gd(vd("textContent",!0),o?zp(o,n)>0?o:bd(n.helperString(Gu),[o],r):vd("",!0))]}},model:(e,t,n)=>{const o=zf(e,t,n);if(!o.props.length||1===t.tagType)return o;function r(){const e=Kd(t,"bind");e&&Zd(e.arg,"value")&&n.onError(uh(60,e.loc))}e.arg&&n.onError(uh(58,e.arg.loc));const{tag:s}=t,i=n.isCustomElement(s);if("input"===s||"textarea"===s||"select"===s||i){let a=Yf,l=!1;if("input"===s||i){const o=Jd(t,"type");if(o){if(7===o.type)a=eh;else if(o.value)switch(o.value.content){case"radio":a=Zf;break;case"checkbox":a=Xf;break;case"file":l=!0,n.onError(uh(59,e.loc));break;default:r()}}else!function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))}(t)?r():a=eh}else"select"===s?a=Qf:r();l||(o.needRuntime=n.helper(a))}else n.onError(uh(57,e.loc));return o.props=o.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),o},on:(e,t,n)=>Uf(e,t,n,(t=>{const{modifiers:o}=e;if(!o.length)return t;let{key:r,value:s}=t.props[0];const{keyModifiers:i,nonKeyModifiers:a,eventOptionModifiers:l}=((e,t)=>{const n=[],o=[],r=[];for(let s=0;s<t.length;s++){const i=t[s].content;ph(i)?r.push(i):hh(i)?Ld(e)?mh(e.content.toLowerCase())?n.push(i):o.push(i):(n.push(i),o.push(i)):fh(i)?o.push(i):n.push(i)}return{keyModifiers:n,nonKeyModifiers:o,eventOptionModifiers:r}})(r,o,0,e.loc);if(a.includes("right")&&(r=gh(r,"onContextmenu")),a.includes("middle")&&(r=gh(r,"onMouseup")),a.length&&(s=bd(n.helper(th),[s,JSON.stringify(a)])),!i.length||Ld(r)&&!mh(r.content.toLowerCase())||(s=bd(n.helper(nh),[s,JSON.stringify(i)])),l.length){const e=l.map(M).join("");r=Ld(r)?vd(`${r.content}${e}`,!0):yd(["(",r,`) + "${e}"`])}return{props:[gd(r,s)]}})),show:(e,t,n)=>{const{exp:o,loc:r}=e;return o||n.onError(uh(61,r)),{props:[],needRuntime:n.helper(oh)}}};bl();const jh=Object.create(null);function Th(e,t){if(!b(e)){if(!e.nodeType)return wl("invalid template option: ",e),i;e=e.innerHTML}const n=function(e,t){return e+JSON.stringify(t,((e,t)=>"function"==typeof t?t.toString():t))}(e,t),o=jh[n];if(o)return o;if("#"===e[0]){const t=document.querySelector(e);t||wl(`Template element not found or is empty: ${e}`),e=t?t.innerHTML:""}const r=u({hoistStatic:!0,onError:a,onWarn:e=>a(e,!0)},t);r.isCustomElement||"undefined"==typeof customElements||(r.isCustomElement=e=>!!customElements.get(e));const{code:s}=function(e,t={}){return Jf(e,u({},lh,t,{nodeTransforms:[yh,...Ch,...t.nodeTransforms||[]],directiveTransforms:u({},Eh,t.directiveTransforms||{}),transformHoist:null}))}(e,r);function a(t,n=!1){const o=n?t.message:`Template compilation error: ${t.message}`,r=t.loc&&function(e,t=0,n=e.length){if((t=Math.max(0,Math.min(t,e.length)))>(n=Math.max(0,Math.min(n,e.length))))return"";let o=e.split(/(\r?\n)/);const r=o.filter(((e,t)=>t%2==1));o=o.filter(((e,t)=>t%2==0));let s=0;const i=[];for(let e=0;e<o.length;e++)if(s+=o[e].length+(r[e]&&r[e].length||0),s>=t){for(let a=e-G;a<=e+G||n>s;a++){if(a<0||a>=o.length)continue;const l=a+1;i.push(`${l}${" ".repeat(Math.max(3-String(l).length,0))}|  ${o[a]}`);const c=o[a].length,u=r[a]&&r[a].length||0;if(a===e){const e=t-(s-(c+u)),o=Math.max(1,n>s?c-e:n-t);i.push("   |  "+" ".repeat(e)+"^".repeat(o))}else if(a>e){if(n>s){const e=Math.max(Math.min(n-s,c),1);i.push("   |  "+"^".repeat(e))}s+=c+u}}break}return i.join("\n")}(e,t.loc.start.offset,t.loc.end.offset);wl(r?`${o}\n${r}`:o)}const l=new Function("Vue",s)(Cu);return l._rc=!0,jh[n]=l}il(Th)},"./node_modules/vue3-google-map/dist/index.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/vue3-google-map/dist/index.mjs ***!
  \*****************************************************/function(e,t,n){n.r(t),n.d(t,{AdvancedMarker:function(){return A},Circle:function(){return $},CustomControl:function(){return U},CustomMarker:function(){return Ne},GoogleMap:function(){return k},HeatmapLayer:function(){return Pe},InfoWindow:function(){return z},Marker:function(){return N},MarkerCluster:function(){return Ae},Polygon:function(){return I},Polyline:function(){return P},Rectangle:function(){return L}});var o=n(/*! vue */"./node_modules/vue/dist/vue.esm-browser.js");!function(){try{if(typeof document<"u"){var e=document.createElement("style");e.appendChild(document.createTextNode(".mapdiv[data-v-d05fc6bc]{width:100%;height:100%}.custom-control-wrapper[data-v-d099a3a6]{display:none}.mapdiv .custom-control-wrapper[data-v-d099a3a6]{display:inline-block}.info-window-wrapper[data-v-cbe1707b]{display:none}.mapdiv .info-window-wrapper[data-v-cbe1707b]{display:inline-block}.custom-marker-wrapper[data-v-2d2d343a]{display:none}.mapdiv .custom-marker-wrapper[data-v-2d2d343a]{display:inline-block}")),document.head.appendChild(e)}}catch(e){}}();var r=Object.defineProperty,s=(e,t,n)=>(((e,t,n)=>{t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n})(e,"symbol"!=typeof t?t+"":t,n),n);const i=Symbol("map"),a=Symbol("api"),l=Symbol("marker"),c=Symbol("markerCluster"),u=Symbol("CustomMarker"),d=Symbol("mapTilesLoaded"),p=["click","dblclick","drag","dragend","dragstart","mousedown","mousemove","mouseout","mouseover","mouseup","rightclick"];
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function f(e,t,n,o){return new(n||(n=Promise))((function(r,s){function i(e){try{l(o.next(e))}catch(e){s(e)}}function a(e){try{l(o.throw(e))}catch(e){s(e)}}function l(e){e.done?r(e.value):function(e){return e instanceof n?e:new n((function(t){t(e)}))}(e.value).then(i,a)}l((o=o.apply(e,t||[])).next())}))}var h=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var o,r,s;if(Array.isArray(t)){if((o=t.length)!=n.length)return!1;for(r=o;0!==r--;)if(!e(t[r],n[r]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((o=(s=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(r=o;0!==r--;)if(!Object.prototype.hasOwnProperty.call(n,s[r]))return!1;for(r=o;0!==r--;){var i=s[r];if(!e(t[i],n[i]))return!1}return!0}return t!=t&&n!=n};const m="__googleMapsScriptId";var g,v;(v=g||(g={}))[v.INITIALIZED=0]="INITIALIZED",v[v.LOADING=1]="LOADING",v[v.SUCCESS=2]="SUCCESS",v[v.FAILURE=3]="FAILURE";class y{constructor({apiKey:e,authReferrerPolicy:t,channel:n,client:o,id:r=m,language:s,libraries:i=[],mapIds:a,nonce:l,region:c,retries:u=3,url:d="https://maps.googleapis.com/maps/api/js",version:p}){if(this.callbacks=[],this.done=!1,this.loading=!1,this.errors=[],this.apiKey=e,this.authReferrerPolicy=t,this.channel=n,this.client=o,this.id=r||m,this.language=s,this.libraries=i,this.mapIds=a,this.nonce=l,this.region=c,this.retries=u,this.url=d,this.version=p,y.instance){if(!h(this.options,y.instance.options))throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(y.instance.options)}`);return y.instance}y.instance=this}get options(){return{version:this.version,apiKey:this.apiKey,channel:this.channel,client:this.client,id:this.id,libraries:this.libraries,language:this.language,region:this.region,mapIds:this.mapIds,nonce:this.nonce,url:this.url,authReferrerPolicy:this.authReferrerPolicy}}get status(){return this.errors.length?g.FAILURE:this.done?g.SUCCESS:this.loading?g.LOADING:g.INITIALIZED}get failed(){return this.done&&!this.loading&&this.errors.length>=this.retries+1}createUrl(){let e=this.url;return e+="?callback=__googleMapsCallback",this.apiKey&&(e+=`&key=${this.apiKey}`),this.channel&&(e+=`&channel=${this.channel}`),this.client&&(e+=`&client=${this.client}`),this.libraries.length>0&&(e+=`&libraries=${this.libraries.join(",")}`),this.language&&(e+=`&language=${this.language}`),this.region&&(e+=`&region=${this.region}`),this.version&&(e+=`&v=${this.version}`),this.mapIds&&(e+=`&map_ids=${this.mapIds.join(",")}`),this.authReferrerPolicy&&(e+=`&auth_referrer_policy=${this.authReferrerPolicy}`),e}deleteScript(){const e=document.getElementById(this.id);e&&e.remove()}load(){return this.loadPromise()}loadPromise(){return new Promise(((e,t)=>{this.loadCallback((n=>{n?t(n.error):e(window.google)}))}))}importLibrary(e){return this.execute(),google.maps.importLibrary(e)}loadCallback(e){this.callbacks.push(e),this.execute()}setScript(){var e,t;if(document.getElementById(this.id))return void this.callback();const n={key:this.apiKey,channel:this.channel,client:this.client,libraries:this.libraries.length&&this.libraries,v:this.version,mapIds:this.mapIds,language:this.language,region:this.region,authReferrerPolicy:this.authReferrerPolicy};Object.keys(n).forEach((e=>!n[e]&&delete n[e])),null!==(t=null===(e=null==window?void 0:window.google)||void 0===e?void 0:e.maps)&&void 0!==t&&t.importLibrary||(e=>{let t,n,o,r="google",s="importLibrary",i="__ib__",a=document,l=window;l=l[r]||(l[r]={});const c=l.maps||(l.maps={}),u=new Set,d=new URLSearchParams,p=()=>t||(t=new Promise(((s,l)=>f(this,void 0,void 0,(function*(){var p;for(o in yield n=a.createElement("script"),n.id=this.id,d.set("libraries",[...u]+""),e)d.set(o.replace(/[A-Z]/g,(e=>"_"+e[0].toLowerCase())),e[o]);d.set("callback",r+".maps."+i),n.src=this.url+"?"+d,c[i]=s,n.onerror=()=>t=l(Error("The Google Maps JavaScript API could not load.")),n.nonce=this.nonce||(null===(p=a.querySelector("script[nonce]"))||void 0===p?void 0:p.nonce)||"",a.head.append(n)})))));c[s]||(c[s]=(e,...t)=>u.add(e)&&p().then((()=>c[s](e,...t))))})(n);const o=this.libraries.map((e=>this.importLibrary(e)));o.length||o.push(this.importLibrary("core")),Promise.all(o).then((()=>this.callback()),(e=>{const t=new ErrorEvent("error",{error:e});this.loadErrorCallback(t)}))}reset(){this.deleteScript(),this.done=!1,this.loading=!1,this.errors=[],this.onerrorEvent=null}resetIfRetryingFailed(){this.failed&&this.reset()}loadErrorCallback(e){if(this.errors.push(e),this.errors.length<=this.retries){const e=this.errors.length*Math.pow(2,this.errors.length);setTimeout((()=>{this.deleteScript(),this.setScript()}),e)}else this.onerrorEvent=e,this.callback()}callback(){this.done=!0,this.loading=!1,this.callbacks.forEach((e=>{e(this.onerrorEvent)})),this.callbacks=[]}execute(){if(this.resetIfRetryingFailed(),this.done)this.callback();else{if(window.google&&window.google.maps&&window.google.maps.version)return void this.callback();this.loading||(this.loading=!0,this.setScript())}}}let b;const _=["bounds_changed","center_changed","click","contextmenu","dblclick","drag","dragend","dragstart","heading_changed","idle","isfractionalzoomenabled_changed","mapcapabilities_changed","maptypeid_changed","mousemove","mouseout","mouseover","projection_changed","renderingtype_changed","rightclick","tilesloaded","tilt_changed","zoom_changed"],x=(0,o.defineComponent)({props:{apiPromise:{type:Promise},apiKey:{type:String,default:""},version:{type:String,default:"weekly"},libraries:{type:Array,default:()=>["places","marker"]},region:{type:String,required:!1},language:{type:String,required:!1},backgroundColor:{type:String,required:!1},center:{type:Object,default:()=>({lat:0,lng:0})},clickableIcons:{type:Boolean,required:!1,default:void 0},controlSize:{type:Number,required:!1},disableDefaultUi:{type:Boolean,required:!1,default:void 0},disableDoubleClickZoom:{type:Boolean,required:!1,default:void 0},draggable:{type:Boolean,required:!1,default:void 0},draggableCursor:{type:String,required:!1},draggingCursor:{type:String,required:!1},fullscreenControl:{type:Boolean,required:!1,default:void 0},fullscreenControlPosition:{type:String,required:!1},gestureHandling:{type:String,required:!1},heading:{type:Number,required:!1},isFractionalZoomEnabled:{type:Boolean,required:!1,default:void 0},keyboardShortcuts:{type:Boolean,required:!1,default:void 0},mapTypeControl:{type:Boolean,required:!1,default:void 0},mapTypeControlOptions:{type:Object,required:!1},mapTypeId:{type:[Number,String],required:!1},mapId:{type:String,required:!1},maxZoom:{type:Number,required:!1},minZoom:{type:Number,required:!1},noClear:{type:Boolean,required:!1,default:void 0},panControl:{type:Boolean,required:!1,default:void 0},panControlPosition:{type:String,required:!1},restriction:{type:Object,required:!1},rotateControl:{type:Boolean,required:!1,default:void 0},rotateControlPosition:{type:String,required:!1},scaleControl:{type:Boolean,required:!1,default:void 0},scaleControlStyle:{type:Number,required:!1},scrollwheel:{type:Boolean,required:!1,default:void 0},streetView:{type:Object,required:!1},streetViewControl:{type:Boolean,required:!1,default:void 0},streetViewControlPosition:{type:String,required:!1},styles:{type:Array,required:!1},tilt:{type:Number,required:!1},zoom:{type:Number,required:!1},zoomControl:{type:Boolean,required:!1,default:void 0},zoomControlPosition:{type:String,required:!1},nonce:{type:String,default:""}},emits:_,setup(e,{emit:t}){const n=(0,o.ref)(),r=(0,o.ref)(!1),l=(0,o.ref)(),c=(0,o.ref)(),p=(0,o.ref)(!1);(0,o.provide)(i,l),(0,o.provide)(a,c),(0,o.provide)(d,p);const f=()=>{const t={...e};Object.keys(t).forEach((e=>{void 0===t[e]&&delete t[e]}));const n=e=>{var t;return e?{position:null==(t=c.value)?void 0:t.ControlPosition[e]}:{}},o={scaleControlOptions:e.scaleControlStyle?{style:e.scaleControlStyle}:{},panControlOptions:n(e.panControlPosition),zoomControlOptions:n(e.zoomControlPosition),rotateControlOptions:n(e.rotateControlPosition),streetViewControlOptions:n(e.streetViewControlPosition),fullscreenControlOptions:n(e.fullscreenControlPosition),disableDefaultUI:e.disableDefaultUi};return{...t,...o}},h=(0,o.watch)([c,l],(([e,t])=>{const n=t;e&&n&&(e.event.addListenerOnce(n,"tilesloaded",(()=>{p.value=!0})),setTimeout(h,0))}),{immediate:!0}),m=i=>{c.value=(0,o.markRaw)(i.maps),l.value=(0,o.markRaw)(new i.maps.Map(n.value,f()));const a=function(e){return class extends e.OverlayView{constructor(e){super(),s(this,"element"),s(this,"opts");const{element:t,...n}=e;this.element=t,this.opts=n,this.opts.map&&this.setMap(this.opts.map)}getPosition(){return this.opts.position?this.opts.position instanceof e.LatLng?this.opts.position:new e.LatLng(this.opts.position):null}getVisible(){if(!this.element)return!1;const e=this.element;return"none"!==e.style.display&&"hidden"!==e.style.visibility&&(""===e.style.opacity||Number(e.style.opacity)>.01)}onAdd(){if(!this.element)return;const e=this.getPanes();e&&e.overlayMouseTarget.appendChild(this.element)}draw(){if(!this.element)return;const e=this.getProjection(),t=null==e?void 0:e.fromLatLngToDivPixel(this.getPosition());if(t){let e,n;switch(this.element.style.position="absolute",this.opts.anchorPoint){case"TOP_CENTER":e="-50%",n="-100%";break;case"BOTTOM_CENTER":e="-50%",n="0";break;case"LEFT_CENTER":e="-100%",n="-50%";break;case"RIGHT_CENTER":e="0",n="-50%";break;case"TOP_LEFT":e="-100%",n="-100%";break;case"TOP_RIGHT":e="0",n="-100%";break;case"BOTTOM_LEFT":e="-100%",n="0";break;case"BOTTOM_RIGHT":e="0",n="0";break;default:e="-50%",n="-50%"}const o=t.x+(this.opts.offsetX||0)+"px",r=t.y+(this.opts.offsetY||0)+"px";this.element.style.transform=`translateX(${e}) translateX(${o}) translateY(${n}) translateY(${r})`,this.opts.zIndex&&(this.element.style.zIndex=this.opts.zIndex.toString())}}onRemove(){this.element&&this.element.remove()}setOptions(e){const{element:t,...n}=e;this.element=t,this.opts=n,this.draw()}}}(c.value);c.value[u]=a,_.forEach((e=>{var n;null==(n=l.value)||n.addListener(e,(n=>t(e,n)))})),r.value=!0;const d=Object.keys(e).filter((e=>!["apiPromise","apiKey","version","libraries","region","language","center","zoom","nonce"].includes(e))).map((t=>(0,o.toRef)(e,t)));(0,o.watch)([()=>e.center,()=>e.zoom,...d],(([e,t],[n,o])=>{var r,s,i;const{center:a,zoom:c,...u}=f();null==(r=l.value)||r.setOptions(u),void 0!==t&&t!==o&&(null==(s=l.value)||s.setZoom(t));const d=!n||e.lng!==n.lng||e.lat!==n.lat;e&&d&&(null==(i=l.value)||i.panTo(e))}))};return(0,o.onMounted)((()=>{e.apiPromise&&e.apiPromise instanceof Promise?e.apiPromise.then(m):((()=>{try{const{apiKey:t,region:n,version:o,language:r,libraries:s,nonce:i}=e;b=new y({apiKey:t,region:n,version:o,language:r,libraries:s,nonce:i})}catch(e){}})(),b.load().then(m))})),(0,o.onBeforeUnmount)((()=>{var e;p.value=!1,l.value&&(null==(e=c.value)||e.event.clearInstanceListeners(l.value))})),{mapRef:n,ready:r,map:l,api:c,mapTilesLoaded:p}}}),S=(e,t)=>{const n=e.__vccOpts||e;for(const[e,o]of t)n[e]=o;return n},w={ref:"mapRef",class:"mapdiv"};const k=S(x,[["render",function(e,t,n,r,s,i){return(0,o.openBlock)(),(0,o.createElementBlock)("div",null,[(0,o.createElementVNode)("div",w,null,512),(0,o.renderSlot)(e.$slots,"default",(0,o.normalizeProps)((0,o.guardReactiveProps)({ready:e.ready,map:e.map,api:e.api,mapTilesLoaded:e.mapTilesLoaded})),void 0,!0)])}],["__scopeId","data-v-d05fc6bc"]]);function C(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var E=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var o,r,s;if(Array.isArray(t)){if((o=t.length)!=n.length)return!1;for(r=o;0!==r--;)if(!e(t[r],n[r]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((o=(s=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(r=o;0!==r--;)if(!Object.prototype.hasOwnProperty.call(n,s[r]))return!1;for(r=o;0!==r--;){var i=s[r];if(!e(t[i],n[i]))return!1}return!0}return t!=t&&n!=n};const j=C(E),T=["click","drag","dragend","dragstart","gmp-click"],A=(0,o.defineComponent)({name:"AdvancedMarker",props:{options:{type:Object,required:!0},pinOptions:{type:Object,required:!1}},emits:T,setup(e,{emit:t,expose:n,slots:r}){const s=(0,o.toRef)(e,"options"),u=(0,o.toRef)(e,"pinOptions"),d=(0,o.ref)(),p=(0,o.inject)(i,(0,o.ref)()),f=(0,o.inject)(a,(0,o.ref)()),h=(0,o.inject)(c,(0,o.ref)()),m=(0,o.computed)((()=>!!(h.value&&f.value&&d.value instanceof google.maps.marker.AdvancedMarkerElement)));return(0,o.watch)([p,s,u],(async(e,[n,r,i])=>{var a,l,c;const g=!j(s.value,r)||!j(u.value,i)||p.value!==n;if(!p.value||!f.value||!g)return;const{AdvancedMarkerElement:v,PinElement:y}=f.value.marker;if(d.value){const{map:e,content:t,...n}=s.value;Object.assign(d.value,{content:u.value?new y(u.value).element:t,...n}),m.value&&(null==(a=h.value)||a.removeMarker(d.value),null==(l=h.value)||l.addMarker(d.value))}else u.value&&(s.value.content=new y(u.value).element),d.value=(0,o.markRaw)(new v(s.value)),m.value?null==(c=h.value)||c.addMarker(d.value):d.value.map=p.value,T.forEach((e=>{var n;null==(n=d.value)||n.addListener(e,(n=>t(e,n)))}))}),{immediate:!0}),(0,o.onBeforeUnmount)((()=>{var e,t;d.value&&(null==(e=f.value)||e.event.clearInstanceListeners(d.value),m.value?null==(t=h.value)||t.removeMarker(d.value):d.value.map=null)})),(0,o.provide)(l,d),n({marker:d}),()=>{var e;return null==(e=r.default)?void 0:e.call(r)}}}),O=(e,t,n,r)=>{const s=(0,o.ref)(),l=(0,o.inject)(i,(0,o.ref)()),d=(0,o.inject)(a,(0,o.ref)()),p=(0,o.inject)(c,(0,o.ref)()),f=(0,o.computed)((()=>!!(p.value&&d.value&&(s.value instanceof d.value.Marker||s.value instanceof d.value[u]))));return(0,o.watch)([l,n],((i,[a,c])=>{var h,m,g;const v=!j(n.value,c)||l.value!==a;!l.value||!d.value||!v||(s.value?(s.value.setOptions(n.value),f.value&&(null==(h=p.value)||h.removeMarker(s.value),null==(m=p.value)||m.addMarker(s.value))):((e=>"Marker"===e)(e)||(e=>e===u)(e)?s.value=(0,o.markRaw)(new d.value[e](n.value)):s.value=(0,o.markRaw)(new d.value[e]({...n.value,map:l.value})),f.value?null==(g=p.value)||g.addMarker(s.value):s.value.setMap(l.value),t.forEach((e=>{var t;null==(t=s.value)||t.addListener(e,(t=>r(e,t)))}))))}),{immediate:!0}),(0,o.onBeforeUnmount)((()=>{var e,t;s.value&&(null==(e=d.value)||e.event.clearInstanceListeners(s.value),f.value?null==(t=p.value)||t.removeMarker(s.value):s.value.setMap(null))})),s},R=["animation_changed","click","dblclick","rightclick","dragstart","dragend","drag","mouseover","mousedown","mouseout","mouseup","draggable_changed","clickable_changed","contextmenu","cursor_changed","flat_changed","rightclick","zindex_changed","icon_changed","position_changed","shape_changed","title_changed","visible_changed"],N=(0,o.defineComponent)({name:"Marker",props:{options:{type:Object,required:!0}},emits:R,setup(e,{emit:t,expose:n,slots:r}){const s=(0,o.toRef)(e,"options"),i=O("Marker",R,s,t);return(0,o.provide)(l,i),n({marker:i}),()=>{var e;return null==(e=r.default)?void 0:e.call(r)}}}),P=(0,o.defineComponent)({name:"Polyline",props:{options:{type:Object,required:!0}},emits:p,setup(e,{emit:t}){const n=(0,o.toRef)(e,"options");return{polyline:O("Polyline",p,n,t)}},render:()=>null}),I=(0,o.defineComponent)({name:"Polygon",props:{options:{type:Object,required:!0}},emits:p,setup(e,{emit:t}){const n=(0,o.toRef)(e,"options");return{polygon:O("Polygon",p,n,t)}},render:()=>null}),M=p.concat(["bounds_changed"]),L=(0,o.defineComponent)({name:"Rectangle",props:{options:{type:Object,required:!0}},emits:M,setup(e,{emit:t}){const n=(0,o.toRef)(e,"options");return{rectangle:O("Rectangle",M,n,t)}},render:()=>null}),F=p.concat(["center_changed","radius_changed"]),$=(0,o.defineComponent)({name:"Circle",props:{options:{type:Object,required:!0}},emits:F,setup(e,{emit:t}){const n=(0,o.toRef)(e,"options");return{circle:O("Circle",F,n,t)}},render:()=>null}),D=(0,o.defineComponent)({props:{position:{type:String,required:!0},index:{type:Number,default:1}},emits:["content:loaded"],setup(e,{emit:t}){const n=(0,o.ref)(null),r=(0,o.inject)(i,(0,o.ref)()),s=(0,o.inject)(a,(0,o.ref)()),l=(0,o.inject)(d,(0,o.ref)(!1)),c=(0,o.watch)([l,s,n],(([n,o,r])=>{o&&n&&r&&(u(e.position),t("content:loaded"),setTimeout(c,0))}),{immediate:!0}),u=e=>{if(r.value&&s.value&&n.value){const t=s.value.ControlPosition[e];r.value.controls[t].push(n.value)}},p=e=>{if(r.value&&s.value){let t=null;const o=s.value.ControlPosition[e];r.value.controls[o].forEach(((e,o)=>{e===n.value&&(t=o)})),null!==t&&r.value.controls[o].removeAt(t)}};return(0,o.onBeforeUnmount)((()=>p(e.position))),(0,o.watch)((()=>e.position),((e,t)=>{p(t),u(e)})),(0,o.watch)((()=>e.index),(t=>{t&&n.value&&(n.value.index=e.index)})),{controlRef:n}}}),B={ref:"controlRef",class:"custom-control-wrapper"};const U=S(D,[["render",function(e,t,n,r,s,i){return(0,o.openBlock)(),(0,o.createElementBlock)("div",B,[(0,o.renderSlot)(e.$slots,"default",{},void 0,!0)],512)}],["__scopeId","data-v-d099a3a6"]]),V=["closeclick","content_changed","domready","position_changed","visible","zindex_changed"],q=(0,o.defineComponent)({inheritAttrs:!1,props:{options:{type:Object,default:()=>({})},modelValue:{type:Boolean}},emits:[...V,"update:modelValue"],setup(e,{slots:t,emit:n,expose:r}){const s=(0,o.ref)(),c=(0,o.ref)(),u=(0,o.inject)(i,(0,o.ref)()),d=(0,o.inject)(a,(0,o.ref)()),p=(0,o.inject)(l,(0,o.ref)());let f,h=e.modelValue;const m=(0,o.computed)((()=>{var e;return null==(e=t.default)?void 0:e.call(t).some((e=>e.type!==o.Comment))})),g=e=>{h=e,n("update:modelValue",e)},v=e=>{s.value&&(s.value.open({map:u.value,anchor:p.value,...e}),g(!0))},y=()=>{s.value&&(s.value.close(),g(!1))};return(0,o.onMounted)((()=>{(0,o.watch)([u,()=>e.options],(([e,t],[r,i])=>{var a;const l=!j(t,i)||u.value!==r;u.value&&d.value&&l&&(s.value?(s.value.setOptions({...t,content:m.value?c.value:t.content}),p.value||v()):(s.value=(0,o.markRaw)(new d.value.InfoWindow({...t,content:m.value?c.value:t.content})),p.value&&(f=p.value.addListener("click",(()=>{v()}))),(!p.value||h)&&v(),V.forEach((e=>{var t;null==(t=s.value)||t.addListener(e,(t=>n(e,t)))})),null==(a=s.value)||a.addListener("closeclick",(()=>g(!1)))))}),{immediate:!0}),(0,o.watch)((()=>e.modelValue),(e=>{e!==h&&(e?v():y())}))})),(0,o.onBeforeUnmount)((()=>{var e;f&&f.remove(),s.value&&(null==(e=d.value)||e.event.clearInstanceListeners(s.value),y())})),r({infoWindow:s,open:v,close:y}),{infoWindow:s,infoWindowRef:c,hasSlotContent:m,open:v,close:y}}}),H={key:0,class:"info-window-wrapper"};const z=S(q,[["render",function(e,t,n,r,s,i){return e.hasSlotContent?((0,o.openBlock)(),(0,o.createElementBlock)("div",H,[(0,o.createElementVNode)("div",(0,o.mergeProps)({ref:"infoWindowRef"},e.$attrs),[(0,o.renderSlot)(e.$slots,"default",{},void 0,!0)],16)])):(0,o.createCommentVNode)("",!0)}],["__scopeId","data-v-cbe1707b"]]),W=[Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];class G{static from(e){if(!(e instanceof ArrayBuffer))throw new Error("Data must be an instance of ArrayBuffer.");const[t,n]=new Uint8Array(e,0,2);if(219!==t)throw new Error("Data does not appear to be in a KDBush format.");const o=n>>4;if(1!==o)throw new Error(`Got v${o} data when expected v1.`);const r=W[15&n];if(!r)throw new Error("Unrecognized array type.");const[s]=new Uint16Array(e,2,1),[i]=new Uint32Array(e,4,1);return new G(i,s,r,e)}constructor(e,t=64,n=Float64Array,o){if(isNaN(e)||e<0)throw new Error(`Unpexpected numItems value: ${e}.`);this.numItems=+e,this.nodeSize=Math.min(Math.max(+t,2),65535),this.ArrayType=n,this.IndexArrayType=e<65536?Uint16Array:Uint32Array;const r=W.indexOf(this.ArrayType),s=2*e*this.ArrayType.BYTES_PER_ELEMENT,i=e*this.IndexArrayType.BYTES_PER_ELEMENT,a=(8-i%8)%8;if(r<0)throw new Error(`Unexpected typed array class: ${n}.`);o&&o instanceof ArrayBuffer?(this.data=o,this.ids=new this.IndexArrayType(this.data,8,e),this.coords=new this.ArrayType(this.data,8+i+a,2*e),this._pos=2*e,this._finished=!0):(this.data=new ArrayBuffer(8+s+i+a),this.ids=new this.IndexArrayType(this.data,8,e),this.coords=new this.ArrayType(this.data,8+i+a,2*e),this._pos=0,this._finished=!1,new Uint8Array(this.data,0,2).set([219,16+r]),new Uint16Array(this.data,2,1)[0]=t,new Uint32Array(this.data,4,1)[0]=e)}add(e,t){const n=this._pos>>1;return this.ids[n]=n,this.coords[this._pos++]=e,this.coords[this._pos++]=t,n}finish(){const e=this._pos>>1;if(e!==this.numItems)throw new Error(`Added ${e} items when expected ${this.numItems}.`);return K(this.ids,this.coords,this.nodeSize,0,this.numItems-1,0),this._finished=!0,this}range(e,t,n,o){if(!this._finished)throw new Error("Data not yet indexed - call index.finish().");const{ids:r,coords:s,nodeSize:i}=this,a=[0,r.length-1,0],l=[];for(;a.length;){const c=a.pop()||0,u=a.pop()||0,d=a.pop()||0;if(u-d<=i){for(let i=d;i<=u;i++){const a=s[2*i],c=s[2*i+1];a>=e&&a<=n&&c>=t&&c<=o&&l.push(r[i])}continue}const p=d+u>>1,f=s[2*p],h=s[2*p+1];f>=e&&f<=n&&h>=t&&h<=o&&l.push(r[p]),(0===c?e<=f:t<=h)&&(a.push(d),a.push(p-1),a.push(1-c)),(0===c?n>=f:o>=h)&&(a.push(p+1),a.push(u),a.push(1-c))}return l}within(e,t,n){if(!this._finished)throw new Error("Data not yet indexed - call index.finish().");const{ids:o,coords:r,nodeSize:s}=this,i=[0,o.length-1,0],a=[],l=n*n;for(;i.length;){const c=i.pop()||0,u=i.pop()||0,d=i.pop()||0;if(u-d<=s){for(let n=d;n<=u;n++)Y(r[2*n],r[2*n+1],e,t)<=l&&a.push(o[n]);continue}const p=d+u>>1,f=r[2*p],h=r[2*p+1];Y(f,h,e,t)<=l&&a.push(o[p]),(0===c?e-n<=f:t-n<=h)&&(i.push(d),i.push(p-1),i.push(1-c)),(0===c?e+n>=f:t+n>=h)&&(i.push(p+1),i.push(u),i.push(1-c))}return a}}function K(e,t,n,o,r,s){if(r-o<=n)return;const i=o+r>>1;J(e,t,i,o,r,s),K(e,t,n,o,i-1,1-s),K(e,t,n,i+1,r,1-s)}function J(e,t,n,o,r,s){for(;r>o;){if(r-o>600){const i=r-o+1,a=n-o+1,l=Math.log(i),c=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*c*(i-c)/i)*(a-i/2<0?-1:1);J(e,t,n,Math.max(o,Math.floor(n-a*c/i+u)),Math.min(r,Math.floor(n+(i-a)*c/i+u)),s)}const i=t[2*n+s];let a=o,l=r;for(Z(e,t,o,n),t[2*r+s]>i&&Z(e,t,o,r);a<l;){for(Z(e,t,a,l),a++,l--;t[2*a+s]<i;)a++;for(;t[2*l+s]>i;)l--}t[2*o+s]===i?Z(e,t,o,l):(l++,Z(e,t,l,r)),l<=n&&(o=l+1),n<=l&&(r=l-1)}}function Z(e,t,n,o){X(e,n,o),X(t,2*n,2*o),X(t,2*n+1,2*o+1)}function X(e,t,n){const o=e[t];e[t]=e[n],e[n]=o}function Y(e,t,n,o){const r=e-n,s=t-o;return r*r+s*s}const Q={minZoom:0,maxZoom:16,minPoints:2,radius:40,extent:512,nodeSize:64,log:!1,generateId:!1,reduce:null,map:e=>e},ee=Math.fround||(e=>t=>(e[0]=+t,e[0]))(new Float32Array(1));class te{constructor(e){this.options=Object.assign(Object.create(Q),e),this.trees=new Array(this.options.maxZoom+1),this.stride=this.options.reduce?7:6,this.clusterProps=[]}load(e){const{log:t,minZoom:n,maxZoom:o}=this.options;e.length;this.points=e;const r=[];for(let t=0;t<e.length;t++){const n=e[t];if(!n.geometry)continue;const[o,s]=n.geometry.coordinates,i=ee(re(o)),a=ee(se(s));r.push(i,a,1/0,t,-1,1),this.options.reduce&&r.push(0)}let s=this.trees[o+1]=this._createTree(r);for(let e=o;e>=n;e--){Date.now();s=this.trees[e]=this._createTree(this._cluster(s,e))}return this}getClusters(e,t){let n=((e[0]+180)%360+360)%360-180;const o=Math.max(-90,Math.min(90,e[1]));let r=180===e[2]?180:((e[2]+180)%360+360)%360-180;const s=Math.max(-90,Math.min(90,e[3]));if(e[2]-e[0]>=360)n=-180,r=180;else if(n>r){const e=this.getClusters([n,o,180,s],t),i=this.getClusters([-180,o,r,s],t);return e.concat(i)}const i=this.trees[this._limitZoom(t)],a=i.range(re(n),se(s),re(r),se(o)),l=i.data,c=[];for(const e of a){const t=this.stride*e;c.push(l[t+5]>1?ne(l,t,this.clusterProps):this.points[l[t+3]])}return c}getChildren(e){const t=this._getOriginId(e),n=this._getOriginZoom(e),o="No cluster with the specified id.",r=this.trees[n];if(!r)throw new Error(o);const s=r.data;if(t*this.stride>=s.length)throw new Error(o);const i=this.options.radius/(this.options.extent*Math.pow(2,n-1)),a=s[t*this.stride],l=s[t*this.stride+1],c=r.within(a,l,i),u=[];for(const t of c){const n=t*this.stride;s[n+4]===e&&u.push(s[n+5]>1?ne(s,n,this.clusterProps):this.points[s[n+3]])}if(0===u.length)throw new Error(o);return u}getLeaves(e,t,n){t=t||10,n=n||0;const o=[];return this._appendLeaves(o,e,t,n,0),o}getTile(e,t,n){const o=this.trees[this._limitZoom(e)],r=Math.pow(2,e),{extent:s,radius:i}=this.options,a=i/s,l=(n-a)/r,c=(n+1+a)/r,u={features:[]};return this._addTileFeatures(o.range((t-a)/r,l,(t+1+a)/r,c),o.data,t,n,r,u),0===t&&this._addTileFeatures(o.range(1-a/r,l,1,c),o.data,r,n,r,u),t===r-1&&this._addTileFeatures(o.range(0,l,a/r,c),o.data,-1,n,r,u),u.features.length?u:null}getClusterExpansionZoom(e){let t=this._getOriginZoom(e)-1;for(;t<=this.options.maxZoom;){const n=this.getChildren(e);if(t++,1!==n.length)break;e=n[0].properties.cluster_id}return t}_appendLeaves(e,t,n,o,r){const s=this.getChildren(t);for(const t of s){const s=t.properties;if(s&&s.cluster?r+s.point_count<=o?r+=s.point_count:r=this._appendLeaves(e,s.cluster_id,n,o,r):r<o?r++:e.push(t),e.length===n)break}return r}_createTree(e){const t=new G(e.length/this.stride|0,this.options.nodeSize,Float32Array);for(let n=0;n<e.length;n+=this.stride)t.add(e[n],e[n+1]);return t.finish(),t.data=e,t}_addTileFeatures(e,t,n,o,r,s){for(const i of e){const e=i*this.stride,a=t[e+5]>1;let l,c,u;if(a)l=oe(t,e,this.clusterProps),c=t[e],u=t[e+1];else{const n=this.points[t[e+3]];l=n.properties;const[o,r]=n.geometry.coordinates;c=re(o),u=se(r)}const d={type:1,geometry:[[Math.round(this.options.extent*(c*r-n)),Math.round(this.options.extent*(u*r-o))]],tags:l};let p;p=a||this.options.generateId?t[e+3]:this.points[t[e+3]].id,void 0!==p&&(d.id=p),s.features.push(d)}}_limitZoom(e){return Math.max(this.options.minZoom,Math.min(Math.floor(+e),this.options.maxZoom+1))}_cluster(e,t){const{radius:n,extent:o,reduce:r,minPoints:s}=this.options,i=n/(o*Math.pow(2,t)),a=e.data,l=[],c=this.stride;for(let n=0;n<a.length;n+=c){if(a[n+2]<=t)continue;a[n+2]=t;const o=a[n],u=a[n+1],d=e.within(a[n],a[n+1],i),p=a[n+5];let f=p;for(const e of d){const n=e*c;a[n+2]>t&&(f+=a[n+5])}if(f>p&&f>=s){let e,s=o*p,i=u*p,h=-1;const m=(n/c<<5)+(t+1)+this.points.length;for(const o of d){const l=o*c;if(a[l+2]<=t)continue;a[l+2]=t;const u=a[l+5];s+=a[l]*u,i+=a[l+1]*u,a[l+4]=m,r&&(e||(e=this._map(a,n,!0),h=this.clusterProps.length,this.clusterProps.push(e)),r(e,this._map(a,l)))}a[n+4]=m,l.push(s/f,i/f,1/0,m,-1,f),r&&l.push(h)}else{for(let e=0;e<c;e++)l.push(a[n+e]);if(f>1)for(const e of d){const n=e*c;if(!(a[n+2]<=t)){a[n+2]=t;for(let e=0;e<c;e++)l.push(a[n+e])}}}}return l}_getOriginId(e){return e-this.points.length>>5}_getOriginZoom(e){return(e-this.points.length)%32}_map(e,t,n){if(e[t+5]>1){const o=this.clusterProps[e[t+6]];return n?Object.assign({},o):o}const o=this.points[e[t+3]].properties,r=this.options.map(o);return n&&r===o?Object.assign({},r):r}}function ne(e,t,n){return{type:"Feature",id:e[t+3],properties:oe(e,t,n),geometry:{type:"Point",coordinates:[ie(e[t]),ae(e[t+1])]}}}function oe(e,t,n){const o=e[t+5],r=o>=1e4?`${Math.round(o/1e3)}k`:o>=1e3?Math.round(o/100)/10+"k":o,s=e[t+6],i=-1===s?{}:Object.assign({},n[s]);return Object.assign(i,{cluster:!0,cluster_id:e[t+3],point_count:o,point_count_abbreviated:r})}function re(e){return e/360+.5}function se(e){const t=Math.sin(e*Math.PI/180),n=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return n<0?0:n>1?1:n}function ie(e){return 360*(e-.5)}function ae(e){const t=(180-360*e)*Math.PI/180;return 360*Math.atan(Math.exp(t))/Math.PI-90}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */function le(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(n[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(o=Object.getOwnPropertySymbols(e);r<o.length;r++)t.indexOf(o[r])<0&&Object.prototype.propertyIsEnumerable.call(e,o[r])&&(n[o[r]]=e[o[r]])}return n}class ce{static isAdvancedMarkerAvailable(e){return google.maps.marker&&!0===e.getMapCapabilities().isAdvancedMarkersAvailable}static isAdvancedMarker(e){return google.maps.marker&&e instanceof google.maps.marker.AdvancedMarkerElement}static setMap(e,t){this.isAdvancedMarker(e)?e.map=t:e.setMap(t)}static getPosition(e){if(this.isAdvancedMarker(e)){if(e.position){if(e.position instanceof google.maps.LatLng)return e.position;if(e.position.lat&&e.position.lng)return new google.maps.LatLng(e.position.lat,e.position.lng)}return new google.maps.LatLng(null)}return e.getPosition()}static getVisible(e){return!!this.isAdvancedMarker(e)||e.getVisible()}}class ue{constructor({markers:e,position:t}){this.markers=e,t&&(t instanceof google.maps.LatLng?this._position=t:this._position=new google.maps.LatLng(t))}get bounds(){if(0===this.markers.length&&!this._position)return;const e=new google.maps.LatLngBounds(this._position,this._position);for(const t of this.markers)e.extend(ce.getPosition(t));return e}get position(){return this._position||this.bounds.getCenter()}get count(){return this.markers.filter((e=>ce.getVisible(e))).length}push(e){this.markers.push(e)}delete(){this.marker&&(ce.setMap(this.marker,null),this.marker=void 0),this.markers.length=0}}const de=(e,t,n,o)=>{const r=pe(e.getBounds(),t,o);return n.filter((e=>r.contains(ce.getPosition(e))))},pe=(e,t,n)=>{const{northEast:o,southWest:r}=he(e,t),s=me({northEast:o,southWest:r},n);return ge(s,t)},fe=(e,t,n)=>{const o=pe(e,t,n),r=o.getNorthEast(),s=o.getSouthWest();return[s.lng(),s.lat(),r.lng(),r.lat()]},he=(e,t)=>({northEast:t.fromLatLngToDivPixel(e.getNorthEast()),southWest:t.fromLatLngToDivPixel(e.getSouthWest())}),me=({northEast:e,southWest:t},n)=>(e.x+=n,e.y-=n,t.x-=n,t.y+=n,{northEast:e,southWest:t}),ge=({northEast:e,southWest:t},n)=>{const o=n.fromDivPixelToLatLng(t),r=n.fromDivPixelToLatLng(e);return new google.maps.LatLngBounds(o,r)};class ve{constructor({maxZoom:e=16}){this.maxZoom=e}noop({markers:e}){return be(e)}}class ye extends ve{constructor(e){var{viewportPadding:t=60}=e;super(le(e,["viewportPadding"])),this.viewportPadding=60,this.viewportPadding=t}calculate({markers:e,map:t,mapCanvasProjection:n}){return t.getZoom()>=this.maxZoom?{clusters:this.noop({markers:e}),changed:!1}:{clusters:this.cluster({markers:de(t,n,e,this.viewportPadding),map:t,mapCanvasProjection:n})}}}const be=e=>e.map((e=>new ue({position:ce.getPosition(e),markers:[e]})));class _e extends ve{constructor(e){var{maxZoom:t,radius:n=60}=e,o=le(e,["maxZoom","radius"]);super({maxZoom:t}),this.state={zoom:-1},this.superCluster=new te(Object.assign({maxZoom:this.maxZoom,radius:n},o))}calculate(e){let t=!1;const n={zoom:e.map.getZoom()};if(!j(e.markers,this.markers)){t=!0,this.markers=[...e.markers];const n=this.markers.map((e=>{const t=ce.getPosition(e);return{type:"Feature",geometry:{type:"Point",coordinates:[t.lng(),t.lat()]},properties:{marker:e}}}));this.superCluster.load(n)}return t||(this.state.zoom<=this.maxZoom||n.zoom<=this.maxZoom)&&(t=!j(this.state,n)),this.state=n,t&&(this.clusters=this.cluster(e)),{clusters:this.clusters,changed:t}}cluster({map:e}){return this.superCluster.getClusters([-180,-90,180,90],Math.round(e.getZoom())).map((e=>this.transformCluster(e)))}transformCluster({geometry:{coordinates:[e,t]},properties:n}){if(n.cluster)return new ue({markers:this.superCluster.getLeaves(n.cluster_id,1/0).map((e=>e.properties.marker)),position:{lat:t,lng:e}});const o=n.marker;return new ue({markers:[o],position:ce.getPosition(o)})}}class xe extends ye{constructor(e){var{maxZoom:t,radius:n=60,viewportPadding:o=60}=e,r=le(e,["maxZoom","radius","viewportPadding"]);super({maxZoom:t,viewportPadding:o}),this.superCluster=new te(Object.assign({maxZoom:this.maxZoom,radius:n},r)),this.state={zoom:-1,view:[0,0,0,0]}}calculate(e){const t={zoom:Math.round(e.map.getZoom()),view:fe(e.map.getBounds(),e.mapCanvasProjection,this.viewportPadding)};let n=!j(this.state,t);if(!j(e.markers,this.markers)){n=!0,this.markers=[...e.markers];const t=this.markers.map((e=>{const t=ce.getPosition(e);return{type:"Feature",geometry:{type:"Point",coordinates:[t.lng(),t.lat()]},properties:{marker:e}}}));this.superCluster.load(t)}return n&&(this.clusters=this.cluster(e),this.state=t),{clusters:this.clusters,changed:n}}cluster({map:e,mapCanvasProjection:t}){const n={zoom:Math.round(e.getZoom()),view:fe(e.getBounds(),t,this.viewportPadding)};return this.superCluster.getClusters(n.view,n.zoom).map((e=>this.transformCluster(e)))}transformCluster({geometry:{coordinates:[e,t]},properties:n}){if(n.cluster)return new ue({markers:this.superCluster.getLeaves(n.cluster_id,1/0).map((e=>e.properties.marker)),position:{lat:t,lng:e}});const o=n.marker;return new ue({markers:[o],position:ce.getPosition(o)})}}class Se{constructor(e,t){this.markers={sum:e.length};const n=t.map((e=>e.count)),o=n.reduce(((e,t)=>e+t),0);this.clusters={count:t.length,markers:{mean:o/t.length,sum:o,min:Math.min(...n),max:Math.max(...n)}}}}class we{render({count:e,position:t},n,o){const r=`<svg fill="${e>Math.max(10,n.clusters.markers.mean)?"#ff0000":"#0000ff"}" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 240 240" width="50" height="50">\n<circle cx="120" cy="120" opacity=".6" r="70" />\n<circle cx="120" cy="120" opacity=".3" r="90" />\n<circle cx="120" cy="120" opacity=".2" r="110" />\n<text x="50%" y="50%" style="fill:#fff" text-anchor="middle" font-size="50" dominant-baseline="middle" font-family="roboto,arial,sans-serif">${e}</text>\n</svg>`,s=`Cluster of ${e} markers`,i=Number(google.maps.Marker.MAX_ZINDEX)+e;if(ce.isAdvancedMarkerAvailable(o)){const e=document.createElement("div");e.innerHTML=r;const n=e.firstElementChild;n.setAttribute("transform","translate(0 25)");const a={map:o,position:t,zIndex:i,title:s,content:n};return new google.maps.marker.AdvancedMarkerElement(a)}const a={position:t,zIndex:i,title:s,icon:{url:`data:image/svg+xml;base64,${btoa(r)}`,anchor:new google.maps.Point(25,25)}};return new google.maps.Marker(a)}}class ke{constructor(){!function(e,t){for(let n in t.prototype)e.prototype[n]=t.prototype[n]}(ke,google.maps.OverlayView)}}var Ce;!function(e){e.CLUSTERING_BEGIN="clusteringbegin",e.CLUSTERING_END="clusteringend",e.CLUSTER_CLICK="click"}(Ce||(Ce={}));const Ee=(e,t,n)=>{n.fitBounds(t.bounds)};class je extends ke{constructor({map:e,markers:t=[],algorithmOptions:n={},algorithm:o=new _e(n),renderer:r=new we,onClusterClick:s=Ee}){super(),this.markers=[...t],this.clusters=[],this.algorithm=o,this.renderer=r,this.onClusterClick=s,e&&this.setMap(e)}addMarker(e,t){this.markers.includes(e)||(this.markers.push(e),t||this.render())}addMarkers(e,t){e.forEach((e=>{this.addMarker(e,!0)})),t||this.render()}removeMarker(e,t){const n=this.markers.indexOf(e);return-1!==n&&(ce.setMap(e,null),this.markers.splice(n,1),t||this.render(),!0)}removeMarkers(e,t){let n=!1;return e.forEach((e=>{n=this.removeMarker(e,!0)||n})),n&&!t&&this.render(),n}clearMarkers(e){this.markers.length=0,e||this.render()}render(){const e=this.getMap();if(e instanceof google.maps.Map&&e.getProjection()){google.maps.event.trigger(this,Ce.CLUSTERING_BEGIN,this);const{clusters:t,changed:n}=this.algorithm.calculate({markers:this.markers,map:e,mapCanvasProjection:this.getProjection()});if(n||null==n){const e=new Set;for(const n of t)1==n.markers.length&&e.add(n.markers[0]);const n=[];for(const t of this.clusters)null!=t.marker&&(1==t.markers.length?e.has(t.marker)||ce.setMap(t.marker,null):n.push(t.marker));this.clusters=t,this.renderClusters(),requestAnimationFrame((()=>n.forEach((e=>ce.setMap(e,null)))))}google.maps.event.trigger(this,Ce.CLUSTERING_END,this)}}onAdd(){this.idleListener=this.getMap().addListener("idle",this.render.bind(this)),this.render()}onRemove(){google.maps.event.removeListener(this.idleListener),this.reset()}reset(){this.markers.forEach((e=>ce.setMap(e,null))),this.clusters.forEach((e=>e.delete())),this.clusters=[]}renderClusters(){const e=new Se(this.markers,this.clusters),t=this.getMap();this.clusters.forEach((n=>{1===n.markers.length?n.marker=n.markers[0]:(n.marker=this.renderer.render(n,e,t),n.markers.forEach((e=>ce.setMap(e,null))),this.onClusterClick&&n.marker.addListener("click",(e=>{google.maps.event.trigger(this,Ce.CLUSTER_CLICK,n),this.onClusterClick(e,n,t)}))),ce.setMap(n.marker,t)}))}}const Te=Object.values(Ce),Ae=(0,o.defineComponent)({name:"MarkerCluster",props:{options:{type:Object,default:()=>({})}},emits:Te,setup(e,{emit:t,expose:n,slots:r}){const s=(0,o.ref)(),l=(0,o.inject)(i,(0,o.ref)()),u=(0,o.inject)(a,(0,o.ref)());return(0,o.provide)(c,s),(0,o.watch)(l,(()=>{l.value&&(s.value=(0,o.markRaw)(new je({map:l.value,algorithm:new xe(e.options.algorithmOptions??{}),...e.options})),Te.forEach((e=>{var n;null==(n=s.value)||n.addListener(e,(n=>t(e,n)))})))}),{immediate:!0}),(0,o.onBeforeUnmount)((()=>{var e;s.value&&(null==(e=u.value)||e.event.clearInstanceListeners(s.value),s.value.clearMarkers(),s.value.setMap(null))})),n({markerCluster:s}),()=>{var e;return null==(e=r.default)?void 0:e.call(r)}}}),Oe=(0,o.defineComponent)({inheritAttrs:!1,props:{options:{type:Object,required:!0}},setup(e,{slots:t,emit:n,expose:r}){const s=(0,o.ref)(),i=(0,o.computed)((()=>{var e;return null==(e=t.default)?void 0:e.call(t).some((e=>e.type!==o.Comment))})),a=(0,o.computed)((()=>({...e.options,element:s.value}))),l=O(u,[],a,n);return r({customMarker:l}),{customMarkerRef:s,customMarker:l,hasSlotContent:i}}}),Re={key:0,class:"custom-marker-wrapper"};const Ne=S(Oe,[["render",function(e,t,n,r,s,i){return e.hasSlotContent?((0,o.openBlock)(),(0,o.createElementBlock)("div",Re,[(0,o.createElementVNode)("div",(0,o.mergeProps)({ref:"customMarkerRef",style:{cursor:e.$attrs.onClick?"pointer":void 0}},e.$attrs),[(0,o.renderSlot)(e.$slots,"default",{},void 0,!0)],16)])):(0,o.createCommentVNode)("",!0)}],["__scopeId","data-v-2d2d343a"]]),Pe=(0,o.defineComponent)({name:"HeatmapLayer",props:{options:{type:Object,default:()=>({})}},setup(e){const t=(0,o.ref)(),n=(0,o.inject)(i,(0,o.ref)()),r=(0,o.inject)(a,(0,o.ref)());return(0,o.watch)([n,()=>e.options],(([e,s],[i,a])=>{var l;const c=!j(s,a)||n.value!==i;if(n.value&&r.value&&c){const e=structuredClone(s);if(e.data&&!(e.data instanceof r.value.MVCArray)){const t=r.value.LatLng;e.data=null==(l=e.data)?void 0:l.map((e=>e instanceof t||"location"in e&&(e.location instanceof t||null===e.location)?e:"location"in e?{...e,location:new t(e.location)}:new t(e)))}t.value?t.value.setOptions(e):t.value=(0,o.markRaw)(new r.value.visualization.HeatmapLayer({...e,map:n.value}))}}),{immediate:!0}),(0,o.onBeforeUnmount)((()=>{t.value&&t.value.setMap(null)})),{heatmapLayer:t}},render:()=>null})}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var s=t[o]={exports:{}};return e[o](s,s.exports,n),s.exports}n.d=function(e,t){for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};!function(){
/*!******************************************!*\
  !*** ./assets/js/indexAppSingleGuide.js ***!
  \******************************************/
n.r(o);var e=n(/*! vue */"./node_modules/vue/dist/vue.esm-browser.js"),t=n(/*! ./AppSingleGuide.vue */"./assets/js/AppSingleGuide.vue");(0,e.createApp)(t.default).mount("#appSingleGuide")}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LE9BQU8sR0FDdkQsRTs7Ozt5SUNIdUIraUUsRUFBQUEsRUFBQUEsV0FBVWloRCxFQUFBQSxTQUNsQnZ2RSxNQUFNLGtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9hc3NldHMvanMvQXBwU2luZ2xlR3VpZGUudnVlPzg0MDkiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9hc3NldHMvanMvY29tcG9uZW50cy9Gb290ZXIudnVlP2FjMDUiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9hc3NldHMvanMvY29tcG9uZW50cy9OYXZpZ2F0aW9uTWVudS52dWU/NTg5MCIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL2Fzc2V0cy9qcy9wYWdlcy9TaW5nbGVQb3N0R29vZ2xlTWFwLnZ1ZT8xMzc0Iiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy9hZGFwdGVycy5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0Vycm9yLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zSGVhZGVycy5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL2luZGV4LmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tcG9zZVNpZ25hbHMuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0Fic29sdXRlVVJMLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbnVsbC5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wcm9ncmVzc0V2ZW50UmVkdWNlci5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9yZXNvbHZlQ29uZmlnLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b0Zvcm1EYXRhLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdHJhY2tTdHJlYW0uanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvQmxvYi5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Zvcm1EYXRhLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9jb21tb24vdXRpbHMuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2luZGV4LmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS8uL2Fzc2V0cy9qcy9BcHBTaW5nbGVHdWlkZS52dWUiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9hc3NldHMvanMvY29tcG9uZW50cy9Gb290ZXIudnVlIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vYXNzZXRzL2pzL2NvbXBvbmVudHMvTmF2aWdhdGlvbk1lbnUudnVlIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vYXNzZXRzL2pzL3BhZ2VzL1NpbmdsZVBvc3RHb29nbGVNYXAudnVlIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLmVzbS1icm93c2VyLmpzIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lLy4vbm9kZV9tb2R1bGVzL3Z1ZTMtZ29vZ2xlLW1hcC9kaXN0L2luZGV4Lm1qcyIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly90aW1iZXItc3RhcnRlci10aGVtZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RpbWJlci1zdGFydGVyLXRoZW1lL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdGltYmVyLXN0YXJ0ZXItdGhlbWUvLi9hc3NldHMvanMvaW5kZXhBcHBTaW5nbGVHdWlkZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9BcHBTaW5nbGVHdWlkZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MWVjNWI3ZGJcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BcHBTaW5nbGVHdWlkZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwU2luZ2xlR3VpZGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcImFzc2V0cy9qcy9BcHBTaW5nbGVHdWlkZS52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiMWVjNWI3ZGJcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCcxZWM1YjdkYicsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJzFlYzViN2RiJywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9BcHBTaW5nbGVHdWlkZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MWVjNWI3ZGJcIiwgKCkgPT4ge1xuICAgIGFwaS5yZXJlbmRlcignMWVjNWI3ZGInLCByZW5kZXIpXG4gIH0pXG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBfX2V4cG9ydHNfXyIsImltcG9ydCB7IHJlbmRlciB9IGZyb20gXCIuL0Zvb3Rlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZTQxODE1MDgmc2NvcGVkPXRydWVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Gb290ZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcbmV4cG9ydCAqIGZyb20gXCIuL0Zvb3Rlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuXG5pbXBvcnQgXCIuL0Zvb3Rlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1lNDE4MTUwOCZsYW5nPXNjc3Mmc2NvcGVkPXRydWVcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LWU0MTgxNTA4XCJdLFsnX19maWxlJyxcImFzc2V0cy9qcy9jb21wb25lbnRzL0Zvb3Rlci52dWVcIl1dKVxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgX19leHBvcnRzX18uX19obXJJZCA9IFwiZTQxODE1MDhcIlxuICBjb25zdCBhcGkgPSBfX1ZVRV9ITVJfUlVOVElNRV9fXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFhcGkuY3JlYXRlUmVjb3JkKCdlNDE4MTUwOCcsIF9fZXhwb3J0c19fKSkge1xuICAgIGFwaS5yZWxvYWQoJ2U0MTgxNTA4JywgX19leHBvcnRzX18pXG4gIH1cbiAgXG4gIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9Gb290ZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWU0MTgxNTA4JnNjb3BlZD10cnVlXCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJ2U0MTgxNTA4JywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9OYXZpZ2F0aW9uTWVudS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MThhMzE0NzQmc2NvcGVkPXRydWVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9OYXZpZ2F0aW9uTWVudS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vTmF2aWdhdGlvbk1lbnUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IFwiLi9OYXZpZ2F0aW9uTWVudS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0xOGEzMTQ3NCZsYW5nPXNjc3Mmc2NvcGVkPXRydWVcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTE4YTMxNDc0XCJdLFsnX19maWxlJyxcImFzc2V0cy9qcy9jb21wb25lbnRzL05hdmlnYXRpb25NZW51LnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCIxOGEzMTQ3NFwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzE4YTMxNDc0JywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnMThhMzE0NzQnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL05hdmlnYXRpb25NZW51LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xOGEzMTQ3NCZzY29wZWQ9dHJ1ZVwiLCAoKSA9PiB7XG4gICAgYXBpLnJlcmVuZGVyKCcxOGEzMTQ3NCcsIHJlbmRlcilcbiAgfSlcblxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IF9fZXhwb3J0c19fIiwiaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSBcIi4vU2luZ2xlUG9zdEdvb2dsZU1hcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NmI5MTJjMTAmc2NvcGVkPXRydWVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9TaW5nbGVQb3N0R29vZ2xlTWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5leHBvcnQgKiBmcm9tIFwiLi9TaW5nbGVQb3N0R29vZ2xlTWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qc1wiXG5cbmltcG9ydCBcIi4vU2luZ2xlUG9zdEdvb2dsZU1hcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD02YjkxMmMxMCZsYW5nPXNjc3Mmc2NvcGVkPXRydWVcIlxuXG5pbXBvcnQgZXhwb3J0Q29tcG9uZW50IGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2V4cG9ydEhlbHBlci5qc1wiXG5jb25zdCBfX2V4cG9ydHNfXyA9IC8qI19fUFVSRV9fKi9leHBvcnRDb21wb25lbnQoc2NyaXB0LCBbWydyZW5kZXInLHJlbmRlcl0sWydfX3Njb3BlSWQnLFwiZGF0YS12LTZiOTEyYzEwXCJdLFsnX19maWxlJyxcImFzc2V0cy9qcy9wYWdlcy9TaW5nbGVQb3N0R29vZ2xlTWFwLnZ1ZVwiXV0pXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICBfX2V4cG9ydHNfXy5fX2htcklkID0gXCI2YjkxMmMxMFwiXG4gIGNvbnN0IGFwaSA9IF9fVlVFX0hNUl9SVU5USU1FX19cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIWFwaS5jcmVhdGVSZWNvcmQoJzZiOTEyYzEwJywgX19leHBvcnRzX18pKSB7XG4gICAgYXBpLnJlbG9hZCgnNmI5MTJjMTAnLCBfX2V4cG9ydHNfXylcbiAgfVxuICBcbiAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1NpbmdsZVBvc3RHb29nbGVNYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZiOTEyYzEwJnNjb3BlZD10cnVlXCIsICgpID0+IHtcbiAgICBhcGkucmVyZW5kZXIoJzZiOTEyYzEwJywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IGh0dHBBZGFwdGVyIGZyb20gJy4vaHR0cC5qcyc7XG5pbXBvcnQgeGhyQWRhcHRlciBmcm9tICcuL3hoci5qcyc7XG5pbXBvcnQgZmV0Y2hBZGFwdGVyIGZyb20gJy4vZmV0Y2guanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyLFxuICBmZXRjaDogZmV0Y2hBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnbmFtZScsIHt2YWx1ZX0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdhZGFwdGVyTmFtZScsIHt2YWx1ZX0pO1xuICB9XG59KTtcblxuY29uc3QgcmVuZGVyUmVhc29uID0gKHJlYXNvbikgPT4gYC0gJHtyZWFzb259YDtcblxuY29uc3QgaXNSZXNvbHZlZEhhbmRsZSA9IChhZGFwdGVyKSA9PiB1dGlscy5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscy5pc0FycmF5KGFkYXB0ZXJzKSA/IGFkYXB0ZXJzIDogW2FkYXB0ZXJzXTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gYWRhcHRlcnM7XG4gICAgbGV0IG5hbWVPckFkYXB0ZXI7XG4gICAgbGV0IGFkYXB0ZXI7XG5cbiAgICBjb25zdCByZWplY3RlZFJlYXNvbnMgPSB7fTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hbWVPckFkYXB0ZXIgPSBhZGFwdGVyc1tpXTtcbiAgICAgIGxldCBpZDtcblxuICAgICAgYWRhcHRlciA9IG5hbWVPckFkYXB0ZXI7XG5cbiAgICAgIGlmICghaXNSZXNvbHZlZEhhbmRsZShuYW1lT3JBZGFwdGVyKSkge1xuICAgICAgICBhZGFwdGVyID0ga25vd25BZGFwdGVyc1soaWQgPSBTdHJpbmcobmFtZU9yQWRhcHRlcikpLnRvTG93ZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChhZGFwdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgVW5rbm93biBhZGFwdGVyICcke2lkfSdgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRhcHRlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVqZWN0ZWRSZWFzb25zW2lkIHx8ICcjJyArIGldID0gYWRhcHRlcjtcbiAgICB9XG5cbiAgICBpZiAoIWFkYXB0ZXIpIHtcblxuICAgICAgY29uc3QgcmVhc29ucyA9IE9iamVjdC5lbnRyaWVzKHJlamVjdGVkUmVhc29ucylcbiAgICAgICAgLm1hcCgoW2lkLCBzdGF0ZV0pID0+IGBhZGFwdGVyICR7aWR9IGAgK1xuICAgICAgICAgIChzdGF0ZSA9PT0gZmFsc2UgPyAnaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQnIDogJ2lzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkJylcbiAgICAgICAgKTtcblxuICAgICAgbGV0IHMgPSBsZW5ndGggP1xuICAgICAgICAocmVhc29ucy5sZW5ndGggPiAxID8gJ3NpbmNlIDpcXG4nICsgcmVhc29ucy5tYXAocmVuZGVyUmVhc29uKS5qb2luKCdcXG4nKSA6ICcgJyArIHJlbmRlclJlYXNvbihyZWFzb25zWzBdKSkgOlxuICAgICAgICAnYXMgbm8gYWRhcHRlciBzcGVjaWZpZWQnO1xuXG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgYFRoZXJlIGlzIG5vIHN1aXRhYmxlIGFkYXB0ZXIgdG8gZGlzcGF0Y2ggdGhlIHJlcXVlc3QgYCArIHMsXG4gICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gXCIuLi9wbGF0Zm9ybS9pbmRleC5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi91dGlscy5qc1wiO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuaW1wb3J0IGNvbXBvc2VTaWduYWxzIGZyb20gXCIuLi9oZWxwZXJzL2NvbXBvc2VTaWduYWxzLmpzXCI7XG5pbXBvcnQge3RyYWNrU3RyZWFtfSBmcm9tIFwiLi4vaGVscGVycy90cmFja1N0cmVhbS5qc1wiO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCB7cHJvZ3Jlc3NFdmVudFJlZHVjZXIsIHByb2dyZXNzRXZlbnREZWNvcmF0b3IsIGFzeW5jRGVjb3JhdG9yfSBmcm9tIFwiLi4vaGVscGVycy9wcm9ncmVzc0V2ZW50UmVkdWNlci5qc1wiO1xuaW1wb3J0IHJlc29sdmVDb25maWcgZnJvbSBcIi4uL2hlbHBlcnMvcmVzb2x2ZUNvbmZpZy5qc1wiO1xuaW1wb3J0IHNldHRsZSBmcm9tIFwiLi4vY29yZS9zZXR0bGUuanNcIjtcblxuY29uc3QgaXNGZXRjaFN1cHBvcnRlZCA9IHR5cGVvZiBmZXRjaCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgUmVzcG9uc2UgPT09ICdmdW5jdGlvbic7XG5jb25zdCBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkID0gaXNGZXRjaFN1cHBvcnRlZCAmJiB0eXBlb2YgUmVhZGFibGVTdHJlYW0gPT09ICdmdW5jdGlvbic7XG5cbi8vIHVzZWQgb25seSBpbnNpZGUgdGhlIGZldGNoIGFkYXB0ZXJcbmNvbnN0IGVuY29kZVRleHQgPSBpc0ZldGNoU3VwcG9ydGVkICYmICh0eXBlb2YgVGV4dEVuY29kZXIgPT09ICdmdW5jdGlvbicgP1xuICAgICgoZW5jb2RlcikgPT4gKHN0cikgPT4gZW5jb2Rlci5lbmNvZGUoc3RyKSkobmV3IFRleHRFbmNvZGVyKCkpIDpcbiAgICBhc3luYyAoc3RyKSA9PiBuZXcgVWludDhBcnJheShhd2FpdCBuZXcgUmVzcG9uc2Uoc3RyKS5hcnJheUJ1ZmZlcigpKVxuKTtcblxuY29uc3QgdGVzdCA9IChmbiwgLi4uYXJncykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiAhIWZuKC4uLmFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuY29uc3Qgc3VwcG9ydHNSZXF1ZXN0U3RyZWFtID0gaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCAmJiB0ZXN0KCgpID0+IHtcbiAgbGV0IGR1cGxleEFjY2Vzc2VkID0gZmFsc2U7XG5cbiAgY29uc3QgaGFzQ29udGVudFR5cGUgPSBuZXcgUmVxdWVzdChwbGF0Zm9ybS5vcmlnaW4sIHtcbiAgICBib2R5OiBuZXcgUmVhZGFibGVTdHJlYW0oKSxcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBnZXQgZHVwbGV4KCkge1xuICAgICAgZHVwbGV4QWNjZXNzZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuICdoYWxmJztcbiAgICB9LFxuICB9KS5oZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJyk7XG5cbiAgcmV0dXJuIGR1cGxleEFjY2Vzc2VkICYmICFoYXNDb250ZW50VHlwZTtcbn0pO1xuXG5jb25zdCBERUZBVUxUX0NIVU5LX1NJWkUgPSA2NCAqIDEwMjQ7XG5cbmNvbnN0IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmXG4gIHRlc3QoKCkgPT4gdXRpbHMuaXNSZWFkYWJsZVN0cmVhbShuZXcgUmVzcG9uc2UoJycpLmJvZHkpKTtcblxuXG5jb25zdCByZXNvbHZlcnMgPSB7XG4gIHN0cmVhbTogc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAoKHJlcykgPT4gcmVzLmJvZHkpXG59O1xuXG5pc0ZldGNoU3VwcG9ydGVkICYmICgoKHJlcykgPT4ge1xuICBbJ3RleHQnLCAnYXJyYXlCdWZmZXInLCAnYmxvYicsICdmb3JtRGF0YScsICdzdHJlYW0nXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICFyZXNvbHZlcnNbdHlwZV0gJiYgKHJlc29sdmVyc1t0eXBlXSA9IHV0aWxzLmlzRnVuY3Rpb24ocmVzW3R5cGVdKSA/IChyZXMpID0+IHJlc1t0eXBlXSgpIDpcbiAgICAgIChfLCBjb25maWcpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFJlc3BvbnNlIHR5cGUgJyR7dHlwZX0nIGlzIG5vdCBzdXBwb3J0ZWRgLCBBeGlvc0Vycm9yLkVSUl9OT1RfU1VQUE9SVCwgY29uZmlnKTtcbiAgICAgIH0pXG4gIH0pO1xufSkobmV3IFJlc3BvbnNlKSk7XG5cbmNvbnN0IGdldEJvZHlMZW5ndGggPSBhc3luYyAoYm9keSkgPT4ge1xuICBpZiAoYm9keSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZih1dGlscy5pc0Jsb2IoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS5zaXplO1xuICB9XG5cbiAgaWYodXRpbHMuaXNTcGVjQ29tcGxpYW50Rm9ybShib2R5KSkge1xuICAgIGNvbnN0IF9yZXF1ZXN0ID0gbmV3IFJlcXVlc3QocGxhdGZvcm0ub3JpZ2luLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHksXG4gICAgfSk7XG4gICAgcmV0dXJuIChhd2FpdCBfcmVxdWVzdC5hcnJheUJ1ZmZlcigpKS5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgaWYodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkgfHwgdXRpbHMuaXNBcnJheUJ1ZmZlcihib2R5KSkge1xuICAgIHJldHVybiBib2R5LmJ5dGVMZW5ndGg7XG4gIH1cblxuICBpZih1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhib2R5KSkge1xuICAgIGJvZHkgPSBib2R5ICsgJyc7XG4gIH1cblxuICBpZih1dGlscy5pc1N0cmluZyhib2R5KSkge1xuICAgIHJldHVybiAoYXdhaXQgZW5jb2RlVGV4dChib2R5KSkuYnl0ZUxlbmd0aDtcbiAgfVxufVxuXG5jb25zdCByZXNvbHZlQm9keUxlbmd0aCA9IGFzeW5jIChoZWFkZXJzLCBib2R5KSA9PiB7XG4gIGNvbnN0IGxlbmd0aCA9IHV0aWxzLnRvRmluaXRlTnVtYmVyKGhlYWRlcnMuZ2V0Q29udGVudExlbmd0aCgpKTtcblxuICByZXR1cm4gbGVuZ3RoID09IG51bGwgPyBnZXRCb2R5TGVuZ3RoKGJvZHkpIDogbGVuZ3RoO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0ZldGNoU3VwcG9ydGVkICYmIChhc3luYyAoY29uZmlnKSA9PiB7XG4gIGxldCB7XG4gICAgdXJsLFxuICAgIG1ldGhvZCxcbiAgICBkYXRhLFxuICAgIHNpZ25hbCxcbiAgICBjYW5jZWxUb2tlbixcbiAgICB0aW1lb3V0LFxuICAgIG9uRG93bmxvYWRQcm9ncmVzcyxcbiAgICBvblVwbG9hZFByb2dyZXNzLFxuICAgIHJlc3BvbnNlVHlwZSxcbiAgICBoZWFkZXJzLFxuICAgIHdpdGhDcmVkZW50aWFscyA9ICdzYW1lLW9yaWdpbicsXG4gICAgZmV0Y2hPcHRpb25zXG4gIH0gPSByZXNvbHZlQ29uZmlnKGNvbmZpZyk7XG5cbiAgcmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlID8gKHJlc3BvbnNlVHlwZSArICcnKS50b0xvd2VyQ2FzZSgpIDogJ3RleHQnO1xuXG4gIGxldCBjb21wb3NlZFNpZ25hbCA9IGNvbXBvc2VTaWduYWxzKFtzaWduYWwsIGNhbmNlbFRva2VuICYmIGNhbmNlbFRva2VuLnRvQWJvcnRTaWduYWwoKV0sIHRpbWVvdXQpO1xuXG4gIGxldCByZXF1ZXN0O1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gY29tcG9zZWRTaWduYWwgJiYgY29tcG9zZWRTaWduYWwudW5zdWJzY3JpYmUgJiYgKCgpID0+IHtcbiAgICAgIGNvbXBvc2VkU2lnbmFsLnVuc3Vic2NyaWJlKCk7XG4gIH0pO1xuXG4gIGxldCByZXF1ZXN0Q29udGVudExlbmd0aDtcblxuICB0cnkge1xuICAgIGlmIChcbiAgICAgIG9uVXBsb2FkUHJvZ3Jlc3MgJiYgc3VwcG9ydHNSZXF1ZXN0U3RyZWFtICYmIG1ldGhvZCAhPT0gJ2dldCcgJiYgbWV0aG9kICE9PSAnaGVhZCcgJiZcbiAgICAgIChyZXF1ZXN0Q29udGVudExlbmd0aCA9IGF3YWl0IHJlc29sdmVCb2R5TGVuZ3RoKGhlYWRlcnMsIGRhdGEpKSAhPT0gMFxuICAgICkge1xuICAgICAgbGV0IF9yZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBkYXRhLFxuICAgICAgICBkdXBsZXg6IFwiaGFsZlwiXG4gICAgICB9KTtcblxuICAgICAgbGV0IGNvbnRlbnRUeXBlSGVhZGVyO1xuXG4gICAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSAmJiAoY29udGVudFR5cGVIZWFkZXIgPSBfcmVxdWVzdC5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoY29udGVudFR5cGVIZWFkZXIpXG4gICAgICB9XG5cbiAgICAgIGlmIChfcmVxdWVzdC5ib2R5KSB7XG4gICAgICAgIGNvbnN0IFtvblByb2dyZXNzLCBmbHVzaF0gPSBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yKFxuICAgICAgICAgIHJlcXVlc3RDb250ZW50TGVuZ3RoLFxuICAgICAgICAgIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGFzeW5jRGVjb3JhdG9yKG9uVXBsb2FkUHJvZ3Jlc3MpKVxuICAgICAgICApO1xuXG4gICAgICAgIGRhdGEgPSB0cmFja1N0cmVhbShfcmVxdWVzdC5ib2R5LCBERUZBVUxUX0NIVU5LX1NJWkUsIG9uUHJvZ3Jlc3MsIGZsdXNoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXV0aWxzLmlzU3RyaW5nKHdpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHdpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdvbWl0JztcbiAgICB9XG5cbiAgICAvLyBDbG91ZGZsYXJlIFdvcmtlcnMgdGhyb3dzIHdoZW4gY3JlZGVudGlhbHMgYXJlIGRlZmluZWRcbiAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZmxhcmUvd29ya2VyZC9pc3N1ZXMvOTAyXG4gICAgY29uc3QgaXNDcmVkZW50aWFsc1N1cHBvcnRlZCA9IFwiY3JlZGVudGlhbHNcIiBpbiBSZXF1ZXN0LnByb3RvdHlwZTtcbiAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAuLi5mZXRjaE9wdGlvbnMsXG4gICAgICBzaWduYWw6IGNvbXBvc2VkU2lnbmFsLFxuICAgICAgbWV0aG9kOiBtZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMubm9ybWFsaXplKCkudG9KU09OKCksXG4gICAgICBib2R5OiBkYXRhLFxuICAgICAgZHVwbGV4OiBcImhhbGZcIixcbiAgICAgIGNyZWRlbnRpYWxzOiBpc0NyZWRlbnRpYWxzU3VwcG9ydGVkID8gd2l0aENyZWRlbnRpYWxzIDogdW5kZWZpbmVkXG4gICAgfSk7XG5cbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChyZXF1ZXN0KTtcblxuICAgIGNvbnN0IGlzU3RyZWFtUmVzcG9uc2UgPSBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmIChyZXNwb25zZVR5cGUgPT09ICdzdHJlYW0nIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3Jlc3BvbnNlJyk7XG5cbiAgICBpZiAoc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAob25Eb3dubG9hZFByb2dyZXNzIHx8IChpc1N0cmVhbVJlc3BvbnNlICYmIHVuc3Vic2NyaWJlKSkpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7fTtcblxuICAgICAgWydzdGF0dXMnLCAnc3RhdHVzVGV4dCcsICdoZWFkZXJzJ10uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgb3B0aW9uc1twcm9wXSA9IHJlc3BvbnNlW3Byb3BdO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlQ29udGVudExlbmd0aCA9IHV0aWxzLnRvRmluaXRlTnVtYmVyKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LWxlbmd0aCcpKTtcblxuICAgICAgY29uc3QgW29uUHJvZ3Jlc3MsIGZsdXNoXSA9IG9uRG93bmxvYWRQcm9ncmVzcyAmJiBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yKFxuICAgICAgICByZXNwb25zZUNvbnRlbnRMZW5ndGgsXG4gICAgICAgIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGFzeW5jRGVjb3JhdG9yKG9uRG93bmxvYWRQcm9ncmVzcyksIHRydWUpXG4gICAgICApIHx8IFtdO1xuXG4gICAgICByZXNwb25zZSA9IG5ldyBSZXNwb25zZShcbiAgICAgICAgdHJhY2tTdHJlYW0ocmVzcG9uc2UuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBvblByb2dyZXNzLCAoKSA9PiB7XG4gICAgICAgICAgZmx1c2ggJiYgZmx1c2goKTtcbiAgICAgICAgICB1bnN1YnNjcmliZSAmJiB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9KSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgfHwgJ3RleHQnO1xuXG4gICAgbGV0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc29sdmVyc1t1dGlscy5maW5kS2V5KHJlc29sdmVycywgcmVzcG9uc2VUeXBlKSB8fCAndGV4dCddKHJlc3BvbnNlLCBjb25maWcpO1xuXG4gICAgIWlzU3RyZWFtUmVzcG9uc2UgJiYgdW5zdWJzY3JpYmUgJiYgdW5zdWJzY3JpYmUoKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgaGVhZGVyczogQXhpb3NIZWFkZXJzLmZyb20ocmVzcG9uc2UuaGVhZGVycyksXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH0pXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdW5zdWJzY3JpYmUgJiYgdW5zdWJzY3JpYmUoKTtcblxuICAgIGlmIChlcnIgJiYgZXJyLm5hbWUgPT09ICdUeXBlRXJyb3InICYmIC9Mb2FkIGZhaWxlZHxmZXRjaC9pLnRlc3QoZXJyLm1lc3NhZ2UpKSB7XG4gICAgICB0aHJvdyBPYmplY3QuYXNzaWduKFxuICAgICAgICBuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCksXG4gICAgICAgIHtcbiAgICAgICAgICBjYXVzZTogZXJyLmNhdXNlIHx8IGVyclxuICAgICAgICB9XG4gICAgICApXG4gICAgfVxuXG4gICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGVyciwgZXJyICYmIGVyci5jb2RlLCBjb25maWcsIHJlcXVlc3QpO1xuICB9XG59KTtcblxuXG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgc2V0dGxlIGZyb20gJy4vLi4vY29yZS9zZXR0bGUuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCB7cHJvZ3Jlc3NFdmVudFJlZHVjZXJ9IGZyb20gJy4uL2hlbHBlcnMvcHJvZ3Jlc3NFdmVudFJlZHVjZXIuanMnO1xuaW1wb3J0IHJlc29sdmVDb25maWcgZnJvbSBcIi4uL2hlbHBlcnMvcmVzb2x2ZUNvbmZpZy5qc1wiO1xuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGNvbnN0IF9jb25maWcgPSByZXNvbHZlQ29uZmlnKGNvbmZpZyk7XG4gICAgbGV0IHJlcXVlc3REYXRhID0gX2NvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oX2NvbmZpZy5oZWFkZXJzKS5ub3JtYWxpemUoKTtcbiAgICBsZXQge3Jlc3BvbnNlVHlwZSwgb25VcGxvYWRQcm9ncmVzcywgb25Eb3dubG9hZFByb2dyZXNzfSA9IF9jb25maWc7XG4gICAgbGV0IG9uQ2FuY2VsZWQ7XG4gICAgbGV0IHVwbG9hZFRocm90dGxlZCwgZG93bmxvYWRUaHJvdHRsZWQ7XG4gICAgbGV0IGZsdXNoVXBsb2FkLCBmbHVzaERvd25sb2FkO1xuXG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGZsdXNoVXBsb2FkICYmIGZsdXNoVXBsb2FkKCk7IC8vIGZsdXNoIGV2ZW50c1xuICAgICAgZmx1c2hEb3dubG9hZCAmJiBmbHVzaERvd25sb2FkKCk7IC8vIGZsdXNoIGV2ZW50c1xuXG4gICAgICBfY29uZmlnLmNhbmNlbFRva2VuICYmIF9jb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG5cbiAgICAgIF9jb25maWcuc2lnbmFsICYmIF9jb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIHJlcXVlc3Qub3BlbihfY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBfY29uZmlnLnVybCwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IF9jb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oXG4gICAgICAgICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgJiYgcmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgbGV0IHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBfY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgX2NvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IF9jb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKF9jb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gX2NvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgIHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQgJiYgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUobnVsbCk7XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycy50b0pTT04oKSwgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoX2NvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhX2NvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gX2NvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmIChvbkRvd25sb2FkUHJvZ3Jlc3MpIHtcbiAgICAgIChbZG93bmxvYWRUaHJvdHRsZWQsIGZsdXNoRG93bmxvYWRdID0gcHJvZ3Jlc3NFdmVudFJlZHVjZXIob25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKSk7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZG93bmxvYWRUaHJvdHRsZWQpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKG9uVXBsb2FkUHJvZ3Jlc3MgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIChbdXBsb2FkVGhyb3R0bGVkLCBmbHVzaFVwbG9hZF0gPSBwcm9ncmVzc0V2ZW50UmVkdWNlcihvblVwbG9hZFByb2dyZXNzKSk7XG5cbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgdXBsb2FkVGhyb3R0bGVkKTtcblxuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVuZCcsIGZsdXNoVXBsb2FkKTtcbiAgICB9XG5cbiAgICBpZiAoX2NvbmZpZy5jYW5jZWxUb2tlbiB8fCBfY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIF9jb25maWcuY2FuY2VsVG9rZW4gJiYgX2NvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgX2NvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IF9jb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKF9jb25maWcudXJsKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBwbGF0Zm9ybS5wcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcbmltcG9ydCBBeGlvcyBmcm9tICcuL2NvcmUvQXhpb3MuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vY29yZS9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbFRva2VuIGZyb20gJy4vY2FuY2VsL0NhbmNlbFRva2VuLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4vZW52L2RhdGEuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHNwcmVhZCBmcm9tICcuL2hlbHBlcnMvc3ByZWFkLmpzJztcbmltcG9ydCBpc0F4aW9zRXJyb3IgZnJvbSAnLi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSAnLi9hZGFwdGVycy9hZGFwdGVycy5qcyc7XG5pbXBvcnQgSHR0cFN0YXR1c0NvZGUgZnJvbSAnLi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQsIG51bGwsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxuY29uc3QgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW47XG5heGlvcy5pc0NhbmNlbCA9IGlzQ2FuY2VsO1xuYXhpb3MuVkVSU0lPTiA9IFZFUlNJT047XG5heGlvcy50b0Zvcm1EYXRhID0gdG9Gb3JtRGF0YTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSBBeGlvc0Vycm9yO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuYXhpb3Muc3ByZWFkID0gc3ByZWFkO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSBpc0F4aW9zRXJyb3I7XG5cbi8vIEV4cG9zZSBtZXJnZUNvbmZpZ1xuYXhpb3MubWVyZ2VDb25maWcgPSBtZXJnZUNvbmZpZztcblxuYXhpb3MuQXhpb3NIZWFkZXJzID0gQXhpb3NIZWFkZXJzO1xuXG5heGlvcy5mb3JtVG9KU09OID0gdGhpbmcgPT4gZm9ybURhdGFUb0pTT04odXRpbHMuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xuXG5heGlvcy5nZXRBZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcjtcblxuYXhpb3MuSHR0cFN0YXR1c0NvZGUgPSBIdHRwU3RhdHVzQ29kZTtcblxuYXhpb3MuZGVmYXVsdCA9IGF4aW9zO1xuXG4vLyB0aGlzIG1vZHVsZSBzaG91bGQgb25seSBoYXZlIGEgZGVmYXVsdCBleHBvcnRcbmV4cG9ydCBkZWZhdWx0IGF4aW9zXG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgdG9BYm9ydFNpZ25hbCgpIHtcbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gICAgY29uc3QgYWJvcnQgPSAoZXJyKSA9PiB7XG4gICAgICBjb250cm9sbGVyLmFib3J0KGVycik7XG4gICAgfTtcblxuICAgIHRoaXMuc3Vic2NyaWJlKGFib3J0KTtcblxuICAgIGNvbnRyb2xsZXIuc2lnbmFsLnVuc3Vic2NyaWJlID0gKCkgPT4gdGhpcy51bnN1YnNjcmliZShhYm9ydCk7XG5cbiAgICByZXR1cm4gY29udHJvbGxlci5zaWduYWw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICAgKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICAgKi9cbiAgc3RhdGljIHNvdXJjZSgpIHtcbiAgICBsZXQgY2FuY2VsO1xuICAgIGNvbnN0IHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICAgIGNhbmNlbCA9IGM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuLFxuICAgICAgY2FuY2VsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdD19IHJlcXVlc3QgVGhlIHJlcXVlc3QuXG4gKlxuICogQHJldHVybnMge0NhbmNlbGVkRXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgQXhpb3NFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UgPT0gbnVsbCA/ICdjYW5jZWxlZCcgOiBtZXNzYWdlLCBBeGlvc0Vycm9yLkVSUl9DQU5DRUxFRCwgY29uZmlnLCByZXF1ZXN0KTtcbiAgdGhpcy5uYW1lID0gJ0NhbmNlbGVkRXJyb3InO1xufVxuXG51dGlscy5pbmhlcml0cyhDYW5jZWxlZEVycm9yLCBBeGlvc0Vycm9yLCB7XG4gIF9fQ0FOQ0VMX186IHRydWVcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxlZEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBidWlsZFVSTCBmcm9tICcuLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBJbnRlcmNlcHRvck1hbmFnZXIgZnJvbSAnLi9JbnRlcmNlcHRvck1hbmFnZXIuanMnO1xuaW1wb3J0IGRpc3BhdGNoUmVxdWVzdCBmcm9tICcuL2Rpc3BhdGNoUmVxdWVzdC5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IHZhbGlkYXRvciBmcm9tICcuLi9oZWxwZXJzL3ZhbGlkYXRvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4vQXhpb3NIZWFkZXJzLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5jbGFzcyBBeGlvcyB7XG4gIGNvbnN0cnVjdG9yKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnIHx8IHt9O1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gY29uZmlnT3JVcmwgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICAgKiBAcGFyYW0gez9PYmplY3R9IGNvbmZpZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gICAqL1xuICBhc3luYyByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX3JlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgbGV0IGR1bW15ID0ge307XG5cbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UgPyBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShkdW1teSkgOiAoZHVtbXkgPSBuZXcgRXJyb3IoKSk7XG5cbiAgICAgICAgLy8gc2xpY2Ugb2ZmIHRoZSBFcnJvcjogLi4uIGxpbmVcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBkdW1teS5zdGFjayA/IGR1bW15LnN0YWNrLnJlcGxhY2UoL14uK1xcbi8sICcnKSA6ICcnO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICghZXJyLnN0YWNrKSB7XG4gICAgICAgICAgICBlcnIuc3RhY2sgPSBzdGFjaztcbiAgICAgICAgICAgIC8vIG1hdGNoIHdpdGhvdXQgdGhlIDIgdG9wIHN0YWNrIGxpbmVzXG4gICAgICAgICAgfSBlbHNlIGlmIChzdGFjayAmJiAhU3RyaW5nKGVyci5zdGFjaykuZW5kc1dpdGgoc3RhY2sucmVwbGFjZSgvXi4rXFxuLitcXG4vLCAnJykpKSB7XG4gICAgICAgICAgICBlcnIuc3RhY2sgKz0gJ1xcbicgKyBzdGFja1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlnbm9yZSB0aGUgY2FzZSB3aGVyZSBcInN0YWNrXCIgaXMgYW4gdW4td3JpdGFibGUgcHJvcGVydHlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgX3JlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgICAgY29uZmlnLnVybCA9IGNvbmZpZ09yVXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgICB9XG5cbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gICAgY29uc3Qge3RyYW5zaXRpb25hbCwgcGFyYW1zU2VyaWFsaXplciwgaGVhZGVyc30gPSBjb25maWc7XG5cbiAgICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zU2VyaWFsaXplciAhPSBudWxsKSB7XG4gICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJhbXNTZXJpYWxpemVyKSkge1xuICAgICAgICBjb25maWcucGFyYW1zU2VyaWFsaXplciA9IHtcbiAgICAgICAgICBzZXJpYWxpemU6IHBhcmFtc1NlcmlhbGl6ZXJcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnMocGFyYW1zU2VyaWFsaXplciwge1xuICAgICAgICAgIGVuY29kZTogdmFsaWRhdG9ycy5mdW5jdGlvbixcbiAgICAgICAgICBzZXJpYWxpemU6IHZhbGlkYXRvcnMuZnVuY3Rpb25cbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2V0IGNvbmZpZy5hbGxvd0Fic29sdXRlVXJsc1xuICAgIGlmIChjb25maWcuYWxsb3dBYnNvbHV0ZVVybHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5hbGxvd0Fic29sdXRlVXJscyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25maWcuYWxsb3dBYnNvbHV0ZVVybHMgPSB0aGlzLmRlZmF1bHRzLmFsbG93QWJzb2x1dGVVcmxzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcuYWxsb3dBYnNvbHV0ZVVybHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKGNvbmZpZywge1xuICAgICAgYmFzZVVybDogdmFsaWRhdG9ycy5zcGVsbGluZygnYmFzZVVSTCcpLFxuICAgICAgd2l0aFhzcmZUb2tlbjogdmFsaWRhdG9ycy5zcGVsbGluZygnd2l0aFhTUkZUb2tlbicpXG4gICAgfSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICAgIGNvbmZpZy5tZXRob2QgPSAoY29uZmlnLm1ldGhvZCB8fCB0aGlzLmRlZmF1bHRzLm1ldGhvZCB8fCAnZ2V0JykudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICAgIGxldCBjb250ZXh0SGVhZGVycyA9IGhlYWRlcnMgJiYgdXRpbHMubWVyZ2UoXG4gICAgICBoZWFkZXJzLmNvbW1vbixcbiAgICAgIGhlYWRlcnNbY29uZmlnLm1ldGhvZF1cbiAgICApO1xuXG4gICAgaGVhZGVycyAmJiB1dGlscy5mb3JFYWNoKFxuICAgICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgICAobWV0aG9kKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzW21ldGhvZF07XG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmNvbmNhdChjb250ZXh0SGVhZGVycywgaGVhZGVycyk7XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gICAgY29uc3QgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICBsZXQgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgbGV0IHByb21pc2U7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBsZW47XG5cbiAgICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgICAgY29uc3QgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LmJpbmQodGhpcyksIHVuZGVmaW5lZF07XG4gICAgICBjaGFpbi51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBjaGFpbi5wdXNoLmFwcGx5KGNoYWluLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgbGVuID0gY2hhaW4ubGVuZ3RoO1xuXG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW5baSsrXSwgY2hhaW5baSsrXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIGxlbiA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIGxldCBuZXdDb25maWcgPSBjb25maWc7XG5cbiAgICBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBjb25zdCBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICBjb25zdCBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBvblJlamVjdGVkLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdC5jYWxsKHRoaXMsIG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaSA9IDA7XG4gICAgbGVuID0gcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXRVcmkoY29uZmlnKSB7XG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwsIGNvbmZpZy5hbGxvd0Fic29sdXRlVXJscyk7XG4gICAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG4gIH1cbn1cblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgaWYgKHJlc3BvbnNlKSB7XG4gICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIHRoaXMuc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzID8gcmVzcG9uc2Uuc3RhdHVzIDogbnVsbDtcbiAgfVxufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB1dGlscy50b0pTT05PYmplY3QodGhpcy5jb25maWcpLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1c1xuICAgIH07XG4gIH1cbn0pO1xuXG5jb25zdCBwcm90b3R5cGUgPSBBeGlvc0Vycm9yLnByb3RvdHlwZTtcbmNvbnN0IGRlc2NyaXB0b3JzID0ge307XG5cbltcbiAgJ0VSUl9CQURfT1BUSU9OX1ZBTFVFJyxcbiAgJ0VSUl9CQURfT1BUSU9OJyxcbiAgJ0VDT05OQUJPUlRFRCcsXG4gICdFVElNRURPVVQnLFxuICAnRVJSX05FVFdPUksnLFxuICAnRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUUycsXG4gICdFUlJfREVQUkVDQVRFRCcsXG4gICdFUlJfQkFEX1JFU1BPTlNFJyxcbiAgJ0VSUl9CQURfUkVRVUVTVCcsXG4gICdFUlJfQ0FOQ0VMRUQnLFxuICAnRVJSX05PVF9TVVBQT1JUJyxcbiAgJ0VSUl9JTlZBTElEX1VSTCdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5dLmZvckVhY2goY29kZSA9PiB7XG4gIGRlc2NyaXB0b3JzW2NvZGVdID0ge3ZhbHVlOiBjb2RlfTtcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBeGlvc0Vycm9yLCBkZXNjcmlwdG9ycyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAnaXNBeGlvc0Vycm9yJywge3ZhbHVlOiB0cnVlfSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5BeGlvc0Vycm9yLmZyb20gPSAoZXJyb3IsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UsIGN1c3RvbVByb3BzKSA9PiB7XG4gIGNvbnN0IGF4aW9zRXJyb3IgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7XG5cbiAgdXRpbHMudG9GbGF0T2JqZWN0KGVycm9yLCBheGlvc0Vycm9yLCBmdW5jdGlvbiBmaWx0ZXIob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gRXJyb3IucHJvdG90eXBlO1xuICB9LCBwcm9wID0+IHtcbiAgICByZXR1cm4gcHJvcCAhPT0gJ2lzQXhpb3NFcnJvcic7XG4gIH0pO1xuXG4gIEF4aW9zRXJyb3IuY2FsbChheGlvc0Vycm9yLCBlcnJvci5tZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKTtcblxuICBheGlvc0Vycm9yLmNhdXNlID0gZXJyb3I7XG5cbiAgYXhpb3NFcnJvci5uYW1lID0gZXJyb3IubmFtZTtcblxuICBjdXN0b21Qcm9wcyAmJiBPYmplY3QuYXNzaWduKGF4aW9zRXJyb3IsIGN1c3RvbVByb3BzKTtcblxuICByZXR1cm4gYXhpb3NFcnJvcjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgcGFyc2VIZWFkZXJzIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzJztcblxuY29uc3QgJGludGVybmFscyA9IFN5bWJvbCgnaW50ZXJuYWxzJyk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlciAmJiBTdHJpbmcoaGVhZGVyKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZhbHVlKSA6IFN0cmluZyh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVG9rZW5zKHN0cikge1xuICBjb25zdCB0b2tlbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCB0b2tlbnNSRSA9IC8oW15cXHMsOz1dKylcXHMqKD86PVxccyooW14sO10rKSk/L2c7XG4gIGxldCBtYXRjaDtcblxuICB3aGlsZSAoKG1hdGNoID0gdG9rZW5zUkUuZXhlYyhzdHIpKSkge1xuICAgIHRva2Vuc1ttYXRjaFsxXV0gPSBtYXRjaFsyXTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmNvbnN0IGlzVmFsaWRIZWFkZXJOYW1lID0gKHN0cikgPT4gL15bLV9hLXpBLVowLTleYHx+LCEjJCUmJyorLl0rJC8udGVzdChzdHIudHJpbSgpKTtcblxuZnVuY3Rpb24gbWF0Y2hIZWFkZXJWYWx1ZShjb250ZXh0LCB2YWx1ZSwgaGVhZGVyLCBmaWx0ZXIsIGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICBpZiAodXRpbHMuaXNGdW5jdGlvbihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMsIHZhbHVlLCBoZWFkZXIpO1xuICB9XG5cbiAgaWYgKGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICAgIHZhbHVlID0gaGVhZGVyO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc1N0cmluZyh2YWx1ZSkpIHJldHVybjtcblxuICBpZiAodXRpbHMuaXNTdHJpbmcoZmlsdGVyKSkge1xuICAgIHJldHVybiB2YWx1ZS5pbmRleE9mKGZpbHRlcikgIT09IC0xO1xuICB9XG5cbiAgaWYgKHV0aWxzLmlzUmVnRXhwKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLnRlc3QodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlci50cmltKClcbiAgICAudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxcZF0pKFxcdyopL2csICh3LCBjaGFyLCBzdHIpID0+IHtcbiAgICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCkgKyBzdHI7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQWNjZXNzb3JzKG9iaiwgaGVhZGVyKSB7XG4gIGNvbnN0IGFjY2Vzc29yTmFtZSA9IHV0aWxzLnRvQ2FtZWxDYXNlKCcgJyArIGhlYWRlcik7XG5cbiAgWydnZXQnLCAnc2V0JywgJ2hhcyddLmZvckVhY2gobWV0aG9kTmFtZSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbWV0aG9kTmFtZSArIGFjY2Vzc29yTmFtZSwge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbbWV0aG9kTmFtZV0uY2FsbCh0aGlzLCBoZWFkZXIsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgICAgfSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9KTtcbn1cblxuY2xhc3MgQXhpb3NIZWFkZXJzIHtcbiAgY29uc3RydWN0b3IoaGVhZGVycykge1xuICAgIGhlYWRlcnMgJiYgdGhpcy5zZXQoaGVhZGVycyk7XG4gIH1cblxuICBzZXQoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSwgcmV3cml0ZSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghbEhlYWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hlYWRlciBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgbEhlYWRlcik7XG5cbiAgICAgIGlmKCFrZXkgfHwgc2VsZltrZXldID09PSB1bmRlZmluZWQgfHwgX3Jld3JpdGUgPT09IHRydWUgfHwgKF9yZXdyaXRlID09PSB1bmRlZmluZWQgJiYgc2VsZltrZXldICE9PSBmYWxzZSkpIHtcbiAgICAgICAgc2VsZltrZXkgfHwgX2hlYWRlcl0gPSBub3JtYWxpemVWYWx1ZShfdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHNldEhlYWRlcnMgPSAoaGVhZGVycywgX3Jld3JpdGUpID0+XG4gICAgICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIChfdmFsdWUsIF9oZWFkZXIpID0+IHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSk7XG5cbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChoZWFkZXIpIHx8IGhlYWRlciBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IpIHtcbiAgICAgIHNldEhlYWRlcnMoaGVhZGVyLCB2YWx1ZU9yUmV3cml0ZSlcbiAgICB9IGVsc2UgaWYodXRpbHMuaXNTdHJpbmcoaGVhZGVyKSAmJiAoaGVhZGVyID0gaGVhZGVyLnRyaW0oKSkgJiYgIWlzVmFsaWRIZWFkZXJOYW1lKGhlYWRlcikpIHtcbiAgICAgIHNldEhlYWRlcnMocGFyc2VIZWFkZXJzKGhlYWRlciksIHZhbHVlT3JSZXdyaXRlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KGhlYWRlcikgJiYgdXRpbHMuaXNJdGVyYWJsZShoZWFkZXIpKSB7XG4gICAgICBsZXQgb2JqID0ge30sIGRlc3QsIGtleTtcbiAgICAgIGZvciAoY29uc3QgZW50cnkgb2YgaGVhZGVyKSB7XG4gICAgICAgIGlmICghdXRpbHMuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ09iamVjdCBpdGVyYXRvciBtdXN0IHJldHVybiBhIGtleS12YWx1ZSBwYWlyJyk7XG4gICAgICAgIH1cblxuICAgICAgICBvYmpba2V5ID0gZW50cnlbMF1dID0gKGRlc3QgPSBvYmpba2V5XSkgP1xuICAgICAgICAgICh1dGlscy5pc0FycmF5KGRlc3QpID8gWy4uLmRlc3QsIGVudHJ5WzFdXSA6IFtkZXN0LCBlbnRyeVsxXV0pIDogZW50cnlbMV07XG4gICAgICB9XG5cbiAgICAgIHNldEhlYWRlcnMob2JqLCB2YWx1ZU9yUmV3cml0ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZGVyICE9IG51bGwgJiYgc2V0SGVhZGVyKHZhbHVlT3JSZXdyaXRlLCBoZWFkZXIsIHJld3JpdGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0KGhlYWRlciwgcGFyc2VyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzW2tleV07XG5cbiAgICAgICAgaWYgKCFwYXJzZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyc2VyID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVG9rZW5zKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmNhbGwodGhpcywgdmFsdWUsIGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNSZWdFeHAocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuZXhlYyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwYXJzZXIgbXVzdCBiZSBib29sZWFufHJlZ2V4cHxmdW5jdGlvbicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhcyhoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgcmV0dXJuICEhKGtleSAmJiB0aGlzW2tleV0gIT09IHVuZGVmaW5lZCAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlcikpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBkZWxldGUoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGRlbGV0ZUhlYWRlcihfaGVhZGVyKSB7XG4gICAgICBfaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoX2hlYWRlcikge1xuICAgICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIF9oZWFkZXIpO1xuXG4gICAgICAgIGlmIChrZXkgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUoc2VsZiwgc2VsZltrZXldLCBrZXksIG1hdGNoZXIpKSkge1xuICAgICAgICAgIGRlbGV0ZSBzZWxmW2tleV07XG5cbiAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5KGhlYWRlcikpIHtcbiAgICAgIGhlYWRlci5mb3JFYWNoKGRlbGV0ZUhlYWRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUhlYWRlcihoZWFkZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgY2xlYXIobWF0Y2hlcikge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZSh0aGlzLCB0aGlzW2tleV0sIGtleSwgbWF0Y2hlciwgdHJ1ZSkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBub3JtYWxpemUoZm9ybWF0KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgaGVhZGVycyA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShoZWFkZXJzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHNlbGZba2V5XSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub3JtYWxpemVkID0gZm9ybWF0ID8gZm9ybWF0SGVhZGVyKGhlYWRlcikgOiBTdHJpbmcoaGVhZGVyKS50cmltKCk7XG5cbiAgICAgIGlmIChub3JtYWxpemVkICE9PSBoZWFkZXIpIHtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgIH1cblxuICAgICAgc2VsZltub3JtYWxpemVkXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcblxuICAgICAgaGVhZGVyc1tub3JtYWxpemVkXSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvbmNhdCguLi50YXJnZXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuY29uY2F0KHRoaXMsIC4uLnRhcmdldHMpO1xuICB9XG5cbiAgdG9KU09OKGFzU3RyaW5ncykge1xuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSBmYWxzZSAmJiAob2JqW2hlYWRlcl0gPSBhc1N0cmluZ3MgJiYgdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5qb2luKCcsICcpIDogdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSkubWFwKChbaGVhZGVyLCB2YWx1ZV0pID0+IGhlYWRlciArICc6ICcgKyB2YWx1ZSkuam9pbignXFxuJyk7XG4gIH1cblxuICBnZXRTZXRDb29raWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KFwic2V0LWNvb2tpZVwiKSB8fCBbXTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0F4aW9zSGVhZGVycyc7XG4gIH1cblxuICBzdGF0aWMgZnJvbSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyBpbnN0YW5jZW9mIHRoaXMgPyB0aGluZyA6IG5ldyB0aGlzKHRoaW5nKTtcbiAgfVxuXG4gIHN0YXRpYyBjb25jYXQoZmlyc3QsIC4uLnRhcmdldHMpIHtcbiAgICBjb25zdCBjb21wdXRlZCA9IG5ldyB0aGlzKGZpcnN0KTtcblxuICAgIHRhcmdldHMuZm9yRWFjaCgodGFyZ2V0KSA9PiBjb21wdXRlZC5zZXQodGFyZ2V0KSk7XG5cbiAgICByZXR1cm4gY29tcHV0ZWQ7XG4gIH1cblxuICBzdGF0aWMgYWNjZXNzb3IoaGVhZGVyKSB7XG4gICAgY29uc3QgaW50ZXJuYWxzID0gdGhpc1skaW50ZXJuYWxzXSA9ICh0aGlzWyRpbnRlcm5hbHNdID0ge1xuICAgICAgYWNjZXNzb3JzOiB7fVxuICAgIH0pO1xuXG4gICAgY29uc3QgYWNjZXNzb3JzID0gaW50ZXJuYWxzLmFjY2Vzc29ycztcbiAgICBjb25zdCBwcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcblxuICAgIGZ1bmN0aW9uIGRlZmluZUFjY2Vzc29yKF9oZWFkZXIpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghYWNjZXNzb3JzW2xIZWFkZXJdKSB7XG4gICAgICAgIGJ1aWxkQWNjZXNzb3JzKHByb3RvdHlwZSwgX2hlYWRlcik7XG4gICAgICAgIGFjY2Vzc29yc1tsSGVhZGVyXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXRpbHMuaXNBcnJheShoZWFkZXIpID8gaGVhZGVyLmZvckVhY2goZGVmaW5lQWNjZXNzb3IpIDogZGVmaW5lQWNjZXNzb3IoaGVhZGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbkF4aW9zSGVhZGVycy5hY2Nlc3NvcihbJ0NvbnRlbnQtVHlwZScsICdDb250ZW50LUxlbmd0aCcsICdBY2NlcHQnLCAnQWNjZXB0LUVuY29kaW5nJywgJ1VzZXItQWdlbnQnLCAnQXV0aG9yaXphdGlvbiddKTtcblxuLy8gcmVzZXJ2ZWQgbmFtZXMgaG90Zml4XG51dGlscy5yZWR1Y2VEZXNjcmlwdG9ycyhBeGlvc0hlYWRlcnMucHJvdG90eXBlLCAoe3ZhbHVlfSwga2V5KSA9PiB7XG4gIGxldCBtYXBwZWQgPSBrZXlbMF0udG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKTsgLy8gbWFwIGBzZXRgID0+IGBTZXRgXG4gIHJldHVybiB7XG4gICAgZ2V0OiAoKSA9PiB2YWx1ZSxcbiAgICBzZXQoaGVhZGVyVmFsdWUpIHtcbiAgICAgIHRoaXNbbWFwcGVkXSA9IGhlYWRlclZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnV0aWxzLmZyZWV6ZU1ldGhvZHMoQXhpb3NIZWFkZXJzKTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NIZWFkZXJzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbmNsYXNzIEludGVyY2VwdG9yTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICAgKi9cbiAgdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgICAgZnVsZmlsbGVkLFxuICAgICAgcmVqZWN0ZWQsXG4gICAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnRlcmNlcHRvciB3YXMgcmVtb3ZlZCwgYGZhbHNlYCBvdGhlcndpc2VcbiAgICovXG4gIGVqZWN0KGlkKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpbnRlcmNlcHRvcnMgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjbGVhcigpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVycykge1xuICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICAgKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmb3JFYWNoKGZuKSB7XG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgICBmbihoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpc0Fic29sdXRlVVJMIGZyb20gJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyc7XG5pbXBvcnQgY29tYmluZVVSTHMgZnJvbSAnLi4vaGVscGVycy9jb21iaW5lVVJMcy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCwgYWxsb3dBYnNvbHV0ZVVybHMpIHtcbiAgbGV0IGlzUmVsYXRpdmVVcmwgPSAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpO1xuICBpZiAoYmFzZVVSTCAmJiAoaXNSZWxhdGl2ZVVybCB8fCBhbGxvd0Fic29sdXRlVXJscyA9PSBmYWxzZSkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHJhbnNmb3JtRGF0YSBmcm9tICcuL3RyYW5zZm9ybURhdGEuanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4uL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSBcIi4uL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzXCI7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZVxuICAgICAgICApO1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL0F4aW9zSGVhZGVycy5qc1wiO1xuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzID8geyAuLi50aGluZyB9IDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBwcm9wLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgcHJvcCAsIGNhc2VsZXNzKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIsIHByb3AgLCBjYXNlbGVzcyk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEsIHByb3AgLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aFhTUkZUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIgLCBwcm9wKSA9PiBtZXJnZURlZXBQcm9wZXJ0aWVzKGhlYWRlcnNUb09iamVjdChhKSwgaGVhZGVyc1RvT2JqZWN0KGIpLHByb3AsIHRydWUpXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBjb25maWcxLCBjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL0F4aW9zRXJyb3IuanMnO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCB0b1VSTEVuY29kZWRGb3JtIGZyb20gJy4uL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4uL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nLCB0cmllcyB0byBwYXJzZSBpdCwgYW5kIGlmIGl0IGZhaWxzLCBpdCByZXR1cm5zIHRoZSBzdHJpbmdpZmllZCB2ZXJzaW9uXG4gKiBvZiB0aGUgaW5wdXRcbiAqXG4gKiBAcGFyYW0ge2FueX0gcmF3VmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgc3RyaW5naWZpZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXJzZXIgLSBBIGZ1bmN0aW9uIHRoYXQgcGFyc2VzIGEgc3RyaW5nIGludG8gYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVuY29kZXIgLSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSB2YWx1ZSBhbmQgcmV0dXJucyBhIHN0cmluZy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZ2lmaWVkIHZlcnNpb24gb2YgdGhlIHJhd1ZhbHVlLlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxuY29uc3QgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBbJ3hocicsICdodHRwJywgJ2ZldGNoJ10sXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpIHx8ICcnO1xuICAgIGNvbnN0IGhhc0pTT05Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIGNvbnN0IGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzLmlzT2JqZWN0KGRhdGEpO1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCAmJiB1dGlscy5pc0hUTUxGb3JtKGRhdGEpKSB7XG4gICAgICBkYXRhID0gbmV3IEZvcm1EYXRhKGRhdGEpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRm9ybURhdGEgPSB1dGlscy5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHV0aWxzLmlzUmVzcG9uc2UoZGF0YSkgfHwgdXRpbHMuaXNSZWFkYWJsZVN0cmVhbShkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCddLCAobWV0aG9kKSA9PiB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS45LjBcIjsiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogSXQgZW5jb2RlcyBhIHN0cmluZyBieSByZXBsYWNpbmcgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGluIHRoZSB1bnJlc2VydmVkIHNldCB3aXRoXG4gKiB0aGVpciBwZXJjZW50LWVuY29kZWQgZXF1aXZhbGVudHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlbmNvZGUoc3RyKSB7XG4gIGNvbnN0IGNoYXJNYXAgPSB7XG4gICAgJyEnOiAnJTIxJyxcbiAgICBcIidcIjogJyUyNycsXG4gICAgJygnOiAnJTI4JyxcbiAgICAnKSc6ICclMjknLFxuICAgICd+JzogJyU3RScsXG4gICAgJyUyMCc6ICcrJyxcbiAgICAnJTAwJzogJ1xceDAwJ1xuICB9O1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhcmFtcyBvYmplY3QgYW5kIGNvbnZlcnRzIGl0IHRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBGb3JtRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBBeGlvcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX3BhaXJzLnB1c2goW25hbWUsIHZhbHVlXSk7XG59O1xuXG5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhlbmNvZGVyKSB7XG4gIGNvbnN0IF9lbmNvZGUgPSBlbmNvZGVyID8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5jYWxsKHRoaXMsIHZhbHVlLCBlbmNvZGUpO1xuICB9IDogZW5jb2RlO1xuXG4gIHJldHVybiB0aGlzLl9wYWlycy5tYXAoZnVuY3Rpb24gZWFjaChwYWlyKSB7XG4gICAgcmV0dXJuIF9lbmNvZGUocGFpclswXSkgKyAnPScgKyBfZW5jb2RlKHBhaXJbMV0pO1xuICB9LCAnJykuam9pbignJicpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCJjb25zdCBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgQ29udGludWU6IDEwMCxcbiAgU3dpdGNoaW5nUHJvdG9jb2xzOiAxMDEsXG4gIFByb2Nlc3Npbmc6IDEwMixcbiAgRWFybHlIaW50czogMTAzLFxuICBPazogMjAwLFxuICBDcmVhdGVkOiAyMDEsXG4gIEFjY2VwdGVkOiAyMDIsXG4gIE5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbjogMjAzLFxuICBOb0NvbnRlbnQ6IDIwNCxcbiAgUmVzZXRDb250ZW50OiAyMDUsXG4gIFBhcnRpYWxDb250ZW50OiAyMDYsXG4gIE11bHRpU3RhdHVzOiAyMDcsXG4gIEFscmVhZHlSZXBvcnRlZDogMjA4LFxuICBJbVVzZWQ6IDIyNixcbiAgTXVsdGlwbGVDaG9pY2VzOiAzMDAsXG4gIE1vdmVkUGVybWFuZW50bHk6IDMwMSxcbiAgRm91bmQ6IDMwMixcbiAgU2VlT3RoZXI6IDMwMyxcbiAgTm90TW9kaWZpZWQ6IDMwNCxcbiAgVXNlUHJveHk6IDMwNSxcbiAgVW51c2VkOiAzMDYsXG4gIFRlbXBvcmFyeVJlZGlyZWN0OiAzMDcsXG4gIFBlcm1hbmVudFJlZGlyZWN0OiAzMDgsXG4gIEJhZFJlcXVlc3Q6IDQwMCxcbiAgVW5hdXRob3JpemVkOiA0MDEsXG4gIFBheW1lbnRSZXF1aXJlZDogNDAyLFxuICBGb3JiaWRkZW46IDQwMyxcbiAgTm90Rm91bmQ6IDQwNCxcbiAgTWV0aG9kTm90QWxsb3dlZDogNDA1LFxuICBOb3RBY2NlcHRhYmxlOiA0MDYsXG4gIFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDogNDA3LFxuICBSZXF1ZXN0VGltZW91dDogNDA4LFxuICBDb25mbGljdDogNDA5LFxuICBHb25lOiA0MTAsXG4gIExlbmd0aFJlcXVpcmVkOiA0MTEsXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogNDEyLFxuICBQYXlsb2FkVG9vTGFyZ2U6IDQxMyxcbiAgVXJpVG9vTG9uZzogNDE0LFxuICBVbnN1cHBvcnRlZE1lZGlhVHlwZTogNDE1LFxuICBSYW5nZU5vdFNhdGlzZmlhYmxlOiA0MTYsXG4gIEV4cGVjdGF0aW9uRmFpbGVkOiA0MTcsXG4gIEltQVRlYXBvdDogNDE4LFxuICBNaXNkaXJlY3RlZFJlcXVlc3Q6IDQyMSxcbiAgVW5wcm9jZXNzYWJsZUVudGl0eTogNDIyLFxuICBMb2NrZWQ6IDQyMyxcbiAgRmFpbGVkRGVwZW5kZW5jeTogNDI0LFxuICBUb29FYXJseTogNDI1LFxuICBVcGdyYWRlUmVxdWlyZWQ6IDQyNixcbiAgUHJlY29uZGl0aW9uUmVxdWlyZWQ6IDQyOCxcbiAgVG9vTWFueVJlcXVlc3RzOiA0MjksXG4gIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZTogNDMxLFxuICBVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczogNDUxLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiA1MDAsXG4gIE5vdEltcGxlbWVudGVkOiA1MDEsXG4gIEJhZEdhdGV3YXk6IDUwMixcbiAgU2VydmljZVVuYXZhaWxhYmxlOiA1MDMsXG4gIEdhdGV3YXlUaW1lb3V0OiA1MDQsXG4gIEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOiA1MDUsXG4gIFZhcmlhbnRBbHNvTmVnb3RpYXRlczogNTA2LFxuICBJbnN1ZmZpY2llbnRTdG9yYWdlOiA1MDcsXG4gIExvb3BEZXRlY3RlZDogNTA4LFxuICBOb3RFeHRlbmRlZDogNTEwLFxuICBOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZDogNTExLFxufTtcblxuT2JqZWN0LmVudHJpZXMoSHR0cFN0YXR1c0NvZGUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICBIdHRwU3RhdHVzQ29kZVt2YWx1ZV0gPSBrZXk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgSHR0cFN0YXR1c0NvZGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/KG9iamVjdHxGdW5jdGlvbil9IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgb3B0aW9ucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIFxuICBjb25zdCBfZW5jb2RlID0gb3B0aW9ucyAmJiBvcHRpb25zLmVuY29kZSB8fCBlbmNvZGU7XG5cbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgc2VyaWFsaXplOiBvcHRpb25zXG4gICAgfTtcbiAgfSBcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykgP1xuICAgICAgcGFyYW1zLnRvU3RyaW5nKCkgOlxuICAgICAgbmV3IEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykudG9TdHJpbmcoX2VuY29kZSk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIGNvbnN0IGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLz9cXC8kLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59XG4iLCJpbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tIFwiLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanNcIjtcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gXCIuLi9jb3JlL0F4aW9zRXJyb3IuanNcIjtcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbmNvbnN0IGNvbXBvc2VTaWduYWxzID0gKHNpZ25hbHMsIHRpbWVvdXQpID0+IHtcbiAgY29uc3Qge2xlbmd0aH0gPSAoc2lnbmFscyA9IHNpZ25hbHMgPyBzaWduYWxzLmZpbHRlcihCb29sZWFuKSA6IFtdKTtcblxuICBpZiAodGltZW91dCB8fCBsZW5ndGgpIHtcbiAgICBsZXQgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcblxuICAgIGxldCBhYm9ydGVkO1xuXG4gICAgY29uc3Qgb25hYm9ydCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlmICghYWJvcnRlZCkge1xuICAgICAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgY29uc3QgZXJyID0gcmVhc29uIGluc3RhbmNlb2YgRXJyb3IgPyByZWFzb24gOiB0aGlzLnJlYXNvbjtcbiAgICAgICAgY29udHJvbGxlci5hYm9ydChlcnIgaW5zdGFuY2VvZiBBeGlvc0Vycm9yID8gZXJyIDogbmV3IENhbmNlbGVkRXJyb3IoZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIubWVzc2FnZSA6IGVycikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCB0aW1lciA9IHRpbWVvdXQgJiYgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aW1lciA9IG51bGw7XG4gICAgICBvbmFib3J0KG5ldyBBeGlvc0Vycm9yKGB0aW1lb3V0ICR7dGltZW91dH0gb2YgbXMgZXhjZWVkZWRgLCBBeGlvc0Vycm9yLkVUSU1FRE9VVCkpXG4gICAgfSwgdGltZW91dClcblxuICAgIGNvbnN0IHVuc3Vic2NyaWJlID0gKCkgPT4ge1xuICAgICAgaWYgKHNpZ25hbHMpIHtcbiAgICAgICAgdGltZXIgJiYgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgICBzaWduYWxzLmZvckVhY2goc2lnbmFsID0+IHtcbiAgICAgICAgICBzaWduYWwudW5zdWJzY3JpYmUgPyBzaWduYWwudW5zdWJzY3JpYmUob25hYm9ydCkgOiBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbmFib3J0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNpZ25hbHMgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNpZ25hbHMuZm9yRWFjaCgoc2lnbmFsKSA9PiBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbmFib3J0KSk7XG5cbiAgICBjb25zdCB7c2lnbmFsfSA9IGNvbnRyb2xsZXI7XG5cbiAgICBzaWduYWwudW5zdWJzY3JpYmUgPSAoKSA9PiB1dGlscy5hc2FwKHVuc3Vic2NyaWJlKTtcblxuICAgIHJldHVybiBzaWduYWw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZVNpZ25hbHM7XG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICB7XG4gICAgd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICBjb25zdCBjb29raWUgPSBbbmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSldO1xuXG4gICAgICB1dGlscy5pc051bWJlcihleHBpcmVzKSAmJiBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG5cbiAgICAgIHV0aWxzLmlzU3RyaW5nKHBhdGgpICYmIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcoZG9tYWluKSAmJiBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuXG4gICAgICBzZWN1cmUgPT09IHRydWUgJiYgY29va2llLnB1c2goJ3NlY3VyZScpO1xuXG4gICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICB9LFxuXG4gICAgcmVhZChuYW1lKSB7XG4gICAgICBjb25zdCBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgIH0sXG5cbiAgICByZW1vdmUobmFtZSkge1xuICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICB9XG4gIH1cblxuICA6XG5cbiAgLy8gTm9uLXN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICB7XG4gICAgd3JpdGUoKSB7fSxcbiAgICByZWFkKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICByZW1vdmUoKSB7fVxuICB9O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzLm1hdGNoQWxsKC9cXHcrfFxcWyhcXHcqKV0vZywgbmFtZSkubWFwKG1hdGNoID0+IHtcbiAgICByZXR1cm4gbWF0Y2hbMF0gPT09ICdbXScgPyAnJyA6IG1hdGNoWzFdIHx8IG1hdGNoWzBdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGFycmF5IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjb252ZXJ0IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFuZCB2YWx1ZXMgYXMgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheVRvT2JqZWN0KGFycikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFycik7XG4gIGxldCBpO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGtleTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBvYmpba2V5XSA9IGFycltrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBGb3JtRGF0YSBvYmplY3QgYW5kIHJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGNvbnZlcnQgdG8gSlNPTi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgYW55PiB8IG51bGx9IFRoZSBjb252ZXJ0ZWQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBmb3JtRGF0YVRvSlNPTihmb3JtRGF0YSkge1xuICBmdW5jdGlvbiBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldCwgaW5kZXgpIHtcbiAgICBsZXQgbmFtZSA9IHBhdGhbaW5kZXgrK107XG5cbiAgICBpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHJldHVybiB0cnVlO1xuXG4gICAgY29uc3QgaXNOdW1lcmljS2V5ID0gTnVtYmVyLmlzRmluaXRlKCtuYW1lKTtcbiAgICBjb25zdCBpc0xhc3QgPSBpbmRleCA+PSBwYXRoLmxlbmd0aDtcbiAgICBuYW1lID0gIW5hbWUgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXQpID8gdGFyZ2V0Lmxlbmd0aCA6IG5hbWU7XG5cbiAgICBpZiAoaXNMYXN0KSB7XG4gICAgICBpZiAodXRpbHMuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMuaXNPYmplY3QodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXRbbmFtZV0sIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMuaXNGdW5jdGlvbihmb3JtRGF0YS5lbnRyaWVzKSkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaEVudHJ5KGZvcm1EYXRhLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybURhdGFUb0pTT047XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn1cbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/ICgob3JpZ2luLCBpc01TSUUpID0+ICh1cmwpID0+IHtcbiAgdXJsID0gbmV3IFVSTCh1cmwsIHBsYXRmb3JtLm9yaWdpbik7XG5cbiAgcmV0dXJuIChcbiAgICBvcmlnaW4ucHJvdG9jb2wgPT09IHVybC5wcm90b2NvbCAmJlxuICAgIG9yaWdpbi5ob3N0ID09PSB1cmwuaG9zdCAmJlxuICAgIChpc01TSUUgfHwgb3JpZ2luLnBvcnQgPT09IHVybC5wb3J0KVxuICApO1xufSkoXG4gIG5ldyBVUkwocGxhdGZvcm0ub3JpZ2luKSxcbiAgcGxhdGZvcm0ubmF2aWdhdG9yICYmIC8obXNpZXx0cmlkZW50KS9pLnRlc3QocGxhdGZvcm0ubmF2aWdhdG9yLnVzZXJBZ2VudClcbikgOiAoKSA9PiB0cnVlO1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxuZXhwb3J0IGRlZmF1bHQgbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vLyBSYXdBeGlvc0hlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG5jb25zdCBpZ25vcmVEdXBsaWNhdGVPZiA9IHV0aWxzLnRvT2JqZWN0U2V0KFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0hlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IHJhd0hlYWRlcnMgPT4ge1xuICBjb25zdCBwYXJzZWQgPSB7fTtcbiAgbGV0IGtleTtcbiAgbGV0IHZhbDtcbiAgbGV0IGk7XG5cbiAgcmF3SGVhZGVycyAmJiByYXdIZWFkZXJzLnNwbGl0KCdcXG4nKS5mb3JFYWNoKGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IGxpbmUuc3Vic3RyaW5nKDAsIGkpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IGxpbmUuc3Vic3RyaW5nKGkgKyAxKS50cmltKCk7XG5cbiAgICBpZiAoIWtleSB8fCAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2Zba2V5XSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSkge1xuICAgICAgICBwYXJzZWRba2V5XS5wdXNoKHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IFt2YWxdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufVxuIiwiaW1wb3J0IHNwZWVkb21ldGVyIGZyb20gXCIuL3NwZWVkb21ldGVyLmpzXCI7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSBcIi4vdGhyb3R0bGUuanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcblxuZXhwb3J0IGNvbnN0IHByb2dyZXNzRXZlbnRSZWR1Y2VyID0gKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtLCBmcmVxID0gMykgPT4ge1xuICBsZXQgYnl0ZXNOb3RpZmllZCA9IDA7XG4gIGNvbnN0IF9zcGVlZG9tZXRlciA9IHNwZWVkb21ldGVyKDUwLCAyNTApO1xuXG4gIHJldHVybiB0aHJvdHRsZShlID0+IHtcbiAgICBjb25zdCBsb2FkZWQgPSBlLmxvYWRlZDtcbiAgICBjb25zdCB0b3RhbCA9IGUubGVuZ3RoQ29tcHV0YWJsZSA/IGUudG90YWwgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGxvYWRlZCAtIGJ5dGVzTm90aWZpZWQ7XG4gICAgY29uc3QgcmF0ZSA9IF9zcGVlZG9tZXRlcihwcm9ncmVzc0J5dGVzKTtcbiAgICBjb25zdCBpblJhbmdlID0gbG9hZGVkIDw9IHRvdGFsO1xuXG4gICAgYnl0ZXNOb3RpZmllZCA9IGxvYWRlZDtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBsb2FkZWQsXG4gICAgICB0b3RhbCxcbiAgICAgIHByb2dyZXNzOiB0b3RhbCA/IChsb2FkZWQgLyB0b3RhbCkgOiB1bmRlZmluZWQsXG4gICAgICBieXRlczogcHJvZ3Jlc3NCeXRlcyxcbiAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXN0aW1hdGVkOiByYXRlICYmIHRvdGFsICYmIGluUmFuZ2UgPyAodG90YWwgLSBsb2FkZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGV2ZW50OiBlLFxuICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdG90YWwgIT0gbnVsbCxcbiAgICAgIFtpc0Rvd25sb2FkU3RyZWFtID8gJ2Rvd25sb2FkJyA6ICd1cGxvYWQnXTogdHJ1ZVxuICAgIH07XG5cbiAgICBsaXN0ZW5lcihkYXRhKTtcbiAgfSwgZnJlcSk7XG59XG5cbmV4cG9ydCBjb25zdCBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yID0gKHRvdGFsLCB0aHJvdHRsZWQpID0+IHtcbiAgY29uc3QgbGVuZ3RoQ29tcHV0YWJsZSA9IHRvdGFsICE9IG51bGw7XG5cbiAgcmV0dXJuIFsobG9hZGVkKSA9PiB0aHJvdHRsZWRbMF0oe1xuICAgIGxlbmd0aENvbXB1dGFibGUsXG4gICAgdG90YWwsXG4gICAgbG9hZGVkXG4gIH0pLCB0aHJvdHRsZWRbMV1dO1xufVxuXG5leHBvcnQgY29uc3QgYXN5bmNEZWNvcmF0b3IgPSAoZm4pID0+ICguLi5hcmdzKSA9PiB1dGlscy5hc2FwKCgpID0+IGZuKC4uLmFyZ3MpKTtcbiIsImltcG9ydCBwbGF0Zm9ybSBmcm9tIFwiLi4vcGxhdGZvcm0vaW5kZXguanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcbmltcG9ydCBpc1VSTFNhbWVPcmlnaW4gZnJvbSBcIi4vaXNVUkxTYW1lT3JpZ2luLmpzXCI7XG5pbXBvcnQgY29va2llcyBmcm9tIFwiLi9jb29raWVzLmpzXCI7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tIFwiLi4vY29yZS9idWlsZEZ1bGxQYXRoLmpzXCI7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSBcIi4uL2NvcmUvbWVyZ2VDb25maWcuanNcIjtcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSBcIi4vYnVpbGRVUkwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGNvbmZpZykgPT4ge1xuICBjb25zdCBuZXdDb25maWcgPSBtZXJnZUNvbmZpZyh7fSwgY29uZmlnKTtcblxuICBsZXQge2RhdGEsIHdpdGhYU1JGVG9rZW4sIHhzcmZIZWFkZXJOYW1lLCB4c3JmQ29va2llTmFtZSwgaGVhZGVycywgYXV0aH0gPSBuZXdDb25maWc7XG5cbiAgbmV3Q29uZmlnLmhlYWRlcnMgPSBoZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oaGVhZGVycyk7XG5cbiAgbmV3Q29uZmlnLnVybCA9IGJ1aWxkVVJMKGJ1aWxkRnVsbFBhdGgobmV3Q29uZmlnLmJhc2VVUkwsIG5ld0NvbmZpZy51cmwsIG5ld0NvbmZpZy5hbGxvd0Fic29sdXRlVXJscyksIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcblxuICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gIGlmIChhdXRoKSB7XG4gICAgaGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArXG4gICAgICBidG9hKChhdXRoLnVzZXJuYW1lIHx8ICcnKSArICc6JyArIChhdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgucGFzc3dvcmQpKSA6ICcnKSlcbiAgICApO1xuICB9XG5cbiAgbGV0IGNvbnRlbnRUeXBlO1xuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpKSB7XG4gICAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiB8fCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYpIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUodW5kZWZpbmVkKTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH0gZWxzZSBpZiAoKGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpKSAhPT0gZmFsc2UpIHtcbiAgICAgIC8vIGZpeCBzZW1pY29sb24gZHVwbGljYXRpb24gaXNzdWUgZm9yIFJlYWN0TmF0aXZlIEZvcm1EYXRhIGltcGxlbWVudGF0aW9uXG4gICAgICBjb25zdCBbdHlwZSwgLi4udG9rZW5zXSA9IGNvbnRlbnRUeXBlID8gY29udGVudFR5cGUuc3BsaXQoJzsnKS5tYXAodG9rZW4gPT4gdG9rZW4udHJpbSgpKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoW3R5cGUgfHwgJ211bHRpcGFydC9mb3JtLWRhdGEnLCAuLi50b2tlbnNdLmpvaW4oJzsgJykpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCB4c3JmIGhlYWRlclxuICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cblxuICBpZiAocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52KSB7XG4gICAgd2l0aFhTUkZUb2tlbiAmJiB1dGlscy5pc0Z1bmN0aW9uKHdpdGhYU1JGVG9rZW4pICYmICh3aXRoWFNSRlRva2VuID0gd2l0aFhTUkZUb2tlbihuZXdDb25maWcpKTtcblxuICAgIGlmICh3aXRoWFNSRlRva2VuIHx8ICh3aXRoWFNSRlRva2VuICE9PSBmYWxzZSAmJiBpc1VSTFNhbWVPcmlnaW4obmV3Q29uZmlnLnVybCkpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIGNvbnN0IHhzcmZWYWx1ZSA9IHhzcmZIZWFkZXJOYW1lICYmIHhzcmZDb29raWVOYW1lICYmIGNvb2tpZXMucmVhZCh4c3JmQ29va2llTmFtZSk7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgaGVhZGVycy5zZXQoeHNyZkhlYWRlck5hbWUsIHhzcmZWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0NvbmZpZztcbn1cblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENhbGN1bGF0ZSBkYXRhIG1heFJhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2FtcGxlc0NvdW50PSAxMF1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbbWluPSAxMDAwXVxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBzcGVlZG9tZXRlcihzYW1wbGVzQ291bnQsIG1pbikge1xuICBzYW1wbGVzQ291bnQgPSBzYW1wbGVzQ291bnQgfHwgMTA7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGNvbnN0IHRpbWVzdGFtcHMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgbGV0IGhlYWQgPSAwO1xuICBsZXQgdGFpbCA9IDA7XG4gIGxldCBmaXJzdFNhbXBsZVRTO1xuXG4gIG1pbiA9IG1pbiAhPT0gdW5kZWZpbmVkID8gbWluIDogMTAwMDtcblxuICByZXR1cm4gZnVuY3Rpb24gcHVzaChjaHVua0xlbmd0aCkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICBjb25zdCBzdGFydGVkQXQgPSB0aW1lc3RhbXBzW3RhaWxdO1xuXG4gICAgaWYgKCFmaXJzdFNhbXBsZVRTKSB7XG4gICAgICBmaXJzdFNhbXBsZVRTID0gbm93O1xuICAgIH1cblxuICAgIGJ5dGVzW2hlYWRdID0gY2h1bmtMZW5ndGg7XG4gICAgdGltZXN0YW1wc1toZWFkXSA9IG5vdztcblxuICAgIGxldCBpID0gdGFpbDtcbiAgICBsZXQgYnl0ZXNDb3VudCA9IDA7XG5cbiAgICB3aGlsZSAoaSAhPT0gaGVhZCkge1xuICAgICAgYnl0ZXNDb3VudCArPSBieXRlc1tpKytdO1xuICAgICAgaSA9IGkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaGVhZCA9IChoZWFkICsgMSkgJSBzYW1wbGVzQ291bnQ7XG5cbiAgICBpZiAoaGVhZCA9PT0gdGFpbCkge1xuICAgICAgdGFpbCA9ICh0YWlsICsgMSkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaWYgKG5vdyAtIGZpcnN0U2FtcGxlVFMgPCBtaW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXNzZWQgPSBzdGFydGVkQXQgJiYgbm93IC0gc3RhcnRlZEF0O1xuXG4gICAgcmV0dXJuIHBhc3NlZCA/IE1hdGgucm91bmQoYnl0ZXNDb3VudCAqIDEwMDAgLyBwYXNzZWQpIDogdW5kZWZpbmVkO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzcGVlZG9tZXRlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59XG4iLCIvKipcbiAqIFRocm90dGxlIGRlY29yYXRvclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7TnVtYmVyfSBmcmVxXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZm4sIGZyZXEpIHtcbiAgbGV0IHRpbWVzdGFtcCA9IDA7XG4gIGxldCB0aHJlc2hvbGQgPSAxMDAwIC8gZnJlcTtcbiAgbGV0IGxhc3RBcmdzO1xuICBsZXQgdGltZXI7XG5cbiAgY29uc3QgaW52b2tlID0gKGFyZ3MsIG5vdyA9IERhdGUubm93KCkpID0+IHtcbiAgICB0aW1lc3RhbXAgPSBub3c7XG4gICAgbGFzdEFyZ3MgPSBudWxsO1xuICAgIGlmICh0aW1lcikge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIHRpbWVyID0gbnVsbDtcbiAgICB9XG4gICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gIH1cblxuICBjb25zdCB0aHJvdHRsZWQgPSAoLi4uYXJncykgPT4ge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgY29uc3QgcGFzc2VkID0gbm93IC0gdGltZXN0YW1wO1xuICAgIGlmICggcGFzc2VkID49IHRocmVzaG9sZCkge1xuICAgICAgaW52b2tlKGFyZ3MsIG5vdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3RBcmdzID0gYXJncztcbiAgICAgIGlmICghdGltZXIpIHtcbiAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgICAgaW52b2tlKGxhc3RBcmdzKVxuICAgICAgICB9LCB0aHJlc2hvbGQgLSBwYXNzZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGZsdXNoID0gKCkgPT4gbGFzdEFyZ3MgJiYgaW52b2tlKGxhc3RBcmdzKTtcblxuICByZXR1cm4gW3Rocm90dGxlZCwgZmx1c2hdO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0aHJvdHRsZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG4vLyB0ZW1wb3JhcnkgaG90Zml4IHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgdW50aWwgQXhpb3NVUkxTZWFyY2hQYXJhbXMgaXMgcmVmYWN0b3JlZFxuaW1wb3J0IFBsYXRmb3JtRm9ybURhdGEgZnJvbSAnLi4vcGxhdGZvcm0vbm9kZS9jbGFzc2VzL0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscy5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzLnRvRmxhdE9iamVjdCh1dGlscywge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoUGxhdGZvcm1Gb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gdG9Gb3JtRGF0YShkYXRhLCBuZXcgcGxhdGZvcm0uY2xhc3Nlcy5VUkxTZWFyY2hQYXJhbXMoKSwgT2JqZWN0LmFzc2lnbih7XG4gICAgdmlzaXRvcjogZnVuY3Rpb24odmFsdWUsIGtleSwgcGF0aCwgaGVscGVycykge1xuICAgICAgaWYgKHBsYXRmb3JtLmlzTm9kZSAmJiB1dGlscy5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygnYmFzZTY0JykpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoZWxwZXJzLmRlZmF1bHRWaXNpdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCBvcHRpb25zKSk7XG59XG4iLCJcbmV4cG9ydCBjb25zdCBzdHJlYW1DaHVuayA9IGZ1bmN0aW9uKiAoY2h1bmssIGNodW5rU2l6ZSkge1xuICBsZXQgbGVuID0gY2h1bmsuYnl0ZUxlbmd0aDtcblxuICBpZiAoIWNodW5rU2l6ZSB8fCBsZW4gPCBjaHVua1NpemUpIHtcbiAgICB5aWVsZCBjaHVuaztcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgcG9zID0gMDtcbiAgbGV0IGVuZDtcblxuICB3aGlsZSAocG9zIDwgbGVuKSB7XG4gICAgZW5kID0gcG9zICsgY2h1bmtTaXplO1xuICAgIHlpZWxkIGNodW5rLnNsaWNlKHBvcywgZW5kKTtcbiAgICBwb3MgPSBlbmQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHJlYWRCeXRlcyA9IGFzeW5jIGZ1bmN0aW9uKiAoaXRlcmFibGUsIGNodW5rU2l6ZSkge1xuICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHJlYWRTdHJlYW0oaXRlcmFibGUpKSB7XG4gICAgeWllbGQqIHN0cmVhbUNodW5rKGNodW5rLCBjaHVua1NpemUpO1xuICB9XG59XG5cbmNvbnN0IHJlYWRTdHJlYW0gPSBhc3luYyBmdW5jdGlvbiogKHN0cmVhbSkge1xuICBpZiAoc3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSkge1xuICAgIHlpZWxkKiBzdHJlYW07XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICB0cnkge1xuICAgIGZvciAoOzspIHtcbiAgICAgIGNvbnN0IHtkb25lLCB2YWx1ZX0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB5aWVsZCB2YWx1ZTtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgcmVhZGVyLmNhbmNlbCgpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB0cmFja1N0cmVhbSA9IChzdHJlYW0sIGNodW5rU2l6ZSwgb25Qcm9ncmVzcywgb25GaW5pc2gpID0+IHtcbiAgY29uc3QgaXRlcmF0b3IgPSByZWFkQnl0ZXMoc3RyZWFtLCBjaHVua1NpemUpO1xuXG4gIGxldCBieXRlcyA9IDA7XG4gIGxldCBkb25lO1xuICBsZXQgX29uRmluaXNoID0gKGUpID0+IHtcbiAgICBpZiAoIWRvbmUpIHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgb25GaW5pc2ggJiYgb25GaW5pc2goZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgYXN5bmMgcHVsbChjb250cm9sbGVyKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7ZG9uZSwgdmFsdWV9ID0gYXdhaXQgaXRlcmF0b3IubmV4dCgpO1xuXG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICBfb25GaW5pc2goKTtcbiAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxlbiA9IHZhbHVlLmJ5dGVMZW5ndGg7XG4gICAgICAgIGlmIChvblByb2dyZXNzKSB7XG4gICAgICAgICAgbGV0IGxvYWRlZEJ5dGVzID0gYnl0ZXMgKz0gbGVuO1xuICAgICAgICAgIG9uUHJvZ3Jlc3MobG9hZGVkQnl0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShuZXcgVWludDhBcnJheSh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9vbkZpbmlzaChlcnIpO1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfSxcbiAgICBjYW5jZWwocmVhc29uKSB7XG4gICAgICBfb25GaW5pc2gocmVhc29uKTtcbiAgICAgIHJldHVybiBpdGVyYXRvci5yZXR1cm4oKTtcbiAgICB9XG4gIH0sIHtcbiAgICBoaWdoV2F0ZXJNYXJrOiAyXG4gIH0pXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi4vZW52L2RhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goKHR5cGUsIGkpID0+IHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuICh2YWx1ZSwgb3B0LCBvcHRzKSA9PiB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbnZhbGlkYXRvcnMuc3BlbGxpbmcgPSBmdW5jdGlvbiBzcGVsbGluZyhjb3JyZWN0U3BlbGxpbmcpIHtcbiAgcmV0dXJuICh2YWx1ZSwgb3B0KSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oYCR7b3B0fSBpcyBsaWtlbHkgYSBtaXNzcGVsbGluZyBvZiAke2NvcnJlY3RTcGVsbGluZ31gKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgY29uc3Qgb3B0ID0ga2V5c1tpXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnNcbn07XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGxcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyA/IEZvcm1EYXRhIDogbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgPyBVUkxTZWFyY2hQYXJhbXMgOiBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5pbXBvcnQgQmxvYiBmcm9tICcuL2NsYXNzZXMvQmxvYi5qcydcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0Jyb3dzZXI6IHRydWUsXG4gIGNsYXNzZXM6IHtcbiAgICBVUkxTZWFyY2hQYXJhbXMsXG4gICAgRm9ybURhdGEsXG4gICAgQmxvYlxuICB9LFxuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmaWxlJywgJ2Jsb2InLCAndXJsJywgJ2RhdGEnXVxufTtcbiIsImNvbnN0IGhhc0Jyb3dzZXJFbnYgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG5jb25zdCBfbmF2aWdhdG9yID0gdHlwZW9mIG5hdmlnYXRvciA9PT0gJ29iamVjdCcgJiYgbmF2aWdhdG9yIHx8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlckVudiA9IGhhc0Jyb3dzZXJFbnYgJiZcbiAgKCFfbmF2aWdhdG9yIHx8IFsnUmVhY3ROYXRpdmUnLCAnTmF0aXZlU2NyaXB0JywgJ05TJ10uaW5kZXhPZihfbmF2aWdhdG9yLnByb2R1Y3QpIDwgMCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIHdlYldvcmtlciBlbnZpcm9ubWVudFxuICpcbiAqIEFsdGhvdWdoIHRoZSBgaXNTdGFuZGFyZEJyb3dzZXJFbnZgIG1ldGhvZCBpbmRpY2F0ZXMgdGhhdFxuICogYGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyYCwgdGhlIFdlYldvcmtlciB3aWxsIHN0aWxsIGJlXG4gKiBmaWx0ZXJlZCBvdXQgZHVlIHRvIGl0cyBqdWRnbWVudCBzdGFuZGFyZFxuICogYHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdgLlxuICogVGhpcyBsZWFkcyB0byBhIHByb2JsZW0gd2hlbiBheGlvcyBwb3N0IGBGb3JtRGF0YWAgaW4gd2ViV29ya2VyXG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiA9ICgoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJlxuICAgIHR5cGVvZiBzZWxmLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbidcbiAgKTtcbn0pKCk7XG5cbmNvbnN0IG9yaWdpbiA9IGhhc0Jyb3dzZXJFbnYgJiYgd2luZG93LmxvY2F0aW9uLmhyZWYgfHwgJ2h0dHA6Ly9sb2NhbGhvc3QnO1xuXG5leHBvcnQge1xuICBoYXNCcm93c2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlckVudixcbiAgX25hdmlnYXRvciBhcyBuYXZpZ2F0b3IsXG4gIG9yaWdpblxufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4vbm9kZS9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2NvbW1vbi91dGlscy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLi4udXRpbHMsXG4gIC4uLnBsYXRmb3JtXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxuY29uc3Qge3RvU3RyaW5nfSA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCB7Z2V0UHJvdG90eXBlT2Z9ID0gT2JqZWN0O1xuY29uc3Qge2l0ZXJhdG9yLCB0b1N0cmluZ1RhZ30gPSBTeW1ib2w7XG5cbmNvbnN0IGtpbmRPZiA9IChjYWNoZSA9PiB0aGluZyA9PiB7XG4gICAgY29uc3Qgc3RyID0gdG9TdHJpbmcuY2FsbCh0aGluZyk7XG4gICAgcmV0dXJuIGNhY2hlW3N0cl0gfHwgKGNhY2hlW3N0cl0gPSBzdHIuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKCkpO1xufSkoT2JqZWN0LmNyZWF0ZShudWxsKSk7XG5cbmNvbnN0IGtpbmRPZlRlc3QgPSAodHlwZSkgPT4ge1xuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKHRoaW5nKSA9PiBraW5kT2YodGhpbmcpID09PSB0eXBlXG59XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKHRvU3RyaW5nVGFnIGluIHZhbCkgJiYgIShpdGVyYXRvciBpbiB2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBsZXQga2luZDtcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8IChcbiAgICAgIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiAoXG4gICAgICAgIChraW5kID0ga2luZE9mKHRoaW5nKSkgPT09ICdmb3JtZGF0YScgfHxcbiAgICAgICAgLy8gZGV0ZWN0IGZvcm0tZGF0YSBpbnN0YW5jZVxuICAgICAgICAoa2luZCA9PT0gJ29iamVjdCcgJiYgaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJylcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVVJMU2VhcmNoUGFyYW1zID0ga2luZE9mVGVzdCgnVVJMU2VhcmNoUGFyYW1zJyk7XG5cbmNvbnN0IFtpc1JlYWRhYmxlU3RyZWFtLCBpc1JlcXVlc3QsIGlzUmVzcG9uc2UsIGlzSGVhZGVyc10gPSBbJ1JlYWRhYmxlU3RyZWFtJywgJ1JlcXVlc3QnLCAnUmVzcG9uc2UnLCAnSGVhZGVycyddLm1hcChraW5kT2ZUZXN0KTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICpcbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuY29uc3QgdHJpbSA9IChzdHIpID0+IHN0ci50cmltID9cbiAgc3RyLnRyaW0oKSA6IHN0ci5yZXBsYWNlKC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZywgJycpO1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5cyA9IGZhbHNlXVxuICogQHJldHVybnMge2FueX1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuLCB7YWxsT3duS2V5cyA9IGZhbHNlfSA9IHt9KSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGk7XG4gIGxldCBsO1xuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yIChpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBjb25zdCBrZXlzID0gYWxsT3duS2V5cyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikgOiBPYmplY3Qua2V5cyhvYmopO1xuICAgIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrZXk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqLCBrZXkpIHtcbiAga2V5ID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICBsZXQgX2tleTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBfa2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoa2V5ID09PSBfa2V5LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBfa2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgX2dsb2JhbCA9ICgoKSA9PiB7XG4gIC8qZXNsaW50IG5vLXVuZGVmOjAqL1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBnbG9iYWxUaGlzO1xuICByZXR1cm4gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKVxufSkoKTtcblxuY29uc3QgaXNDb250ZXh0RGVmaW5lZCA9IChjb250ZXh0KSA9PiAhaXNVbmRlZmluZWQoY29udGV4dCkgJiYgY29udGV4dCAhPT0gX2dsb2JhbDtcblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKlxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICBjb25zdCB7Y2FzZWxlc3N9ID0gaXNDb250ZXh0RGVmaW5lZCh0aGlzKSAmJiB0aGlzIHx8IHt9O1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgYXNzaWduVmFsdWUgPSAodmFsLCBrZXkpID0+IHtcbiAgICBjb25zdCB0YXJnZXRLZXkgPSBjYXNlbGVzcyAmJiBmaW5kS2V5KHJlc3VsdCwga2V5KSB8fCBrZXk7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W3RhcmdldEtleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZShyZXN1bHRbdGFyZ2V0S2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W3RhcmdldEtleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJndW1lbnRzW2ldICYmIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXNdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmNvbnN0IGV4dGVuZCA9IChhLCBiLCB0aGlzQXJnLCB7YWxsT3duS2V5c309IHt9KSA9PiB7XG4gIGZvckVhY2goYiwgKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKHRoaXNBcmcgJiYgaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0sIHthbGxPd25LZXlzfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5jb25zdCBzdHJpcEJPTSA9IChjb250ZW50KSA9PiB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gKiBAcGFyYW0ge29iamVjdH0gW2Rlc2NyaXB0b3JzXVxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBpbmhlcml0cyA9IChjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgcHJvcHMsIGRlc2NyaXB0b3JzKSA9PiB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGRlc2NyaXB0b3JzKTtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25zdHJ1Y3RvciwgJ3N1cGVyJywge1xuICAgIHZhbHVlOiBzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZVxuICB9KTtcbiAgcHJvcHMgJiYgT2JqZWN0LmFzc2lnbihjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbnxCb29sZWFufSBbZmlsdGVyXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BGaWx0ZXJdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuY29uc3QgdG9GbGF0T2JqZWN0ID0gKHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyLCBwcm9wRmlsdGVyKSA9PiB7XG4gIGxldCBwcm9wcztcbiAgbGV0IGk7XG4gIGxldCBwcm9wO1xuICBjb25zdCBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIGlmIChzb3VyY2VPYmogPT0gbnVsbCkgcmV0dXJuIGRlc3RPYmo7XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoKCFwcm9wRmlsdGVyIHx8IHByb3BGaWx0ZXIocHJvcCwgc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBmaWx0ZXIgIT09IGZhbHNlICYmIGdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBzdHJpbmcgZW5kcyB3aXRoIHRoZSBjaGFyYWN0ZXJzIG9mIGEgc3BlY2lmaWVkIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGVuZHNXaXRoID0gKHN0ciwgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikgPT4ge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPiBzdHIubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHIubGVuZ3RoO1xuICB9XG4gIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gIGNvbnN0IGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdCBvciBudWxsIGlmIGZhaWxlZFxuICpcbiAqIEBwYXJhbSB7Kn0gW3RoaW5nXVxuICpcbiAqIEByZXR1cm5zIHs/QXJyYXl9XG4gKi9cbmNvbnN0IHRvQXJyYXkgPSAodGhpbmcpID0+IHtcbiAgaWYgKCF0aGluZykgcmV0dXJuIG51bGw7XG4gIGlmIChpc0FycmF5KHRoaW5nKSkgcmV0dXJuIHRoaW5nO1xuICBsZXQgaSA9IHRoaW5nLmxlbmd0aDtcbiAgaWYgKCFpc051bWJlcihpKSkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGFyciA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBhcnJbaV0gPSB0aGluZ1tpXTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vKipcbiAqIENoZWNraW5nIGlmIHRoZSBVaW50OEFycmF5IGV4aXN0cyBhbmQgaWYgaXQgZG9lcywgaXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZVxuICogdGhpbmcgcGFzc2VkIGluIGlzIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXlcbiAqXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9XG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuY29uc3QgaXNUeXBlZEFycmF5ID0gKFR5cGVkQXJyYXkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gdGhpbmcgPT4ge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBnZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbi8qKlxuICogRm9yIGVhY2ggZW50cnkgaW4gdGhlIG9iamVjdCwgY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCB0aGUga2V5IGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBlbnRyeS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgZm9yRWFjaEVudHJ5ID0gKG9iaiwgZm4pID0+IHtcbiAgY29uc3QgZ2VuZXJhdG9yID0gb2JqICYmIG9ialtpdGVyYXRvcl07XG5cbiAgY29uc3QgX2l0ZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwob2JqKTtcblxuICBsZXQgcmVzdWx0O1xuXG4gIHdoaWxlICgocmVzdWx0ID0gX2l0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBsZXQgcmV0O1xuICAgIGlmICgocmV0ID0gcmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IHJldCB8fCBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCByZWR1Y2VkRGVzY3JpcHRvcnMpO1xufVxuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSA9ICt2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgdGhpbmcgaXMgYSBGb3JtRGF0YSBvYmplY3QsIHJldHVybiB0cnVlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGhpbmcgLSBUaGUgdGhpbmcgdG8gY2hlY2suXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3BlY0NvbXBsaWFudEZvcm0odGhpbmcpIHtcbiAgcmV0dXJuICEhKHRoaW5nICYmIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1t0b1N0cmluZ1RhZ10gPT09ICdGb3JtRGF0YScgJiYgdGhpbmdbaXRlcmF0b3JdKTtcbn1cblxuY29uc3QgdG9KU09OT2JqZWN0ID0gKG9iaikgPT4ge1xuICBjb25zdCBzdGFjayA9IG5ldyBBcnJheSgxMCk7XG5cbiAgY29uc3QgdmlzaXQgPSAoc291cmNlLCBpKSA9PiB7XG5cbiAgICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2Yoc291cmNlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYoISgndG9KU09OJyBpbiBzb3VyY2UpKSB7XG4gICAgICAgIHN0YWNrW2ldID0gc291cmNlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBpc0FycmF5KHNvdXJjZSkgPyBbXSA6IHt9O1xuXG4gICAgICAgIGZvckVhY2goc291cmNlLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlZHVjZWRWYWx1ZSA9IHZpc2l0KHZhbHVlLCBpICsgMSk7XG4gICAgICAgICAgIWlzVW5kZWZpbmVkKHJlZHVjZWRWYWx1ZSkgJiYgKHRhcmdldFtrZXldID0gcmVkdWNlZFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhY2tbaV0gPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgcmV0dXJuIHZpc2l0KG9iaiwgMCk7XG59XG5cbmNvbnN0IGlzQXN5bmNGbiA9IGtpbmRPZlRlc3QoJ0FzeW5jRnVuY3Rpb24nKTtcblxuY29uc3QgaXNUaGVuYWJsZSA9ICh0aGluZykgPT5cbiAgdGhpbmcgJiYgKGlzT2JqZWN0KHRoaW5nKSB8fCBpc0Z1bmN0aW9uKHRoaW5nKSkgJiYgaXNGdW5jdGlvbih0aGluZy50aGVuKSAmJiBpc0Z1bmN0aW9uKHRoaW5nLmNhdGNoKTtcblxuLy8gb3JpZ2luYWwgY29kZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0RpZ2l0YWxCcmFpbkpTL0F4aW9zUHJvbWlzZS9ibG9iLzE2ZGVhYjEzNzEwZWMwOTc3OTkyMjEzMWYzZmE1OTU0MzIwZjgzYWIvbGliL3V0aWxzLmpzI0wxMS1MMzRcblxuY29uc3QgX3NldEltbWVkaWF0ZSA9ICgoc2V0SW1tZWRpYXRlU3VwcG9ydGVkLCBwb3N0TWVzc2FnZVN1cHBvcnRlZCkgPT4ge1xuICBpZiAoc2V0SW1tZWRpYXRlU3VwcG9ydGVkKSB7XG4gICAgcmV0dXJuIHNldEltbWVkaWF0ZTtcbiAgfVxuXG4gIHJldHVybiBwb3N0TWVzc2FnZVN1cHBvcnRlZCA/ICgodG9rZW4sIGNhbGxiYWNrcykgPT4ge1xuICAgIF9nbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgKHtzb3VyY2UsIGRhdGF9KSA9PiB7XG4gICAgICBpZiAoc291cmNlID09PSBfZ2xvYmFsICYmIGRhdGEgPT09IHRva2VuKSB7XG4gICAgICAgIGNhbGxiYWNrcy5sZW5ndGggJiYgY2FsbGJhY2tzLnNoaWZ0KCkoKTtcbiAgICAgIH1cbiAgICB9LCBmYWxzZSk7XG5cbiAgICByZXR1cm4gKGNiKSA9PiB7XG4gICAgICBjYWxsYmFja3MucHVzaChjYik7XG4gICAgICBfZ2xvYmFsLnBvc3RNZXNzYWdlKHRva2VuLCBcIipcIik7XG4gICAgfVxuICB9KShgYXhpb3NAJHtNYXRoLnJhbmRvbSgpfWAsIFtdKSA6IChjYikgPT4gc2V0VGltZW91dChjYik7XG59KShcbiAgdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJyxcbiAgaXNGdW5jdGlvbihfZ2xvYmFsLnBvc3RNZXNzYWdlKVxuKTtcblxuY29uc3QgYXNhcCA9IHR5cGVvZiBxdWV1ZU1pY3JvdGFzayAhPT0gJ3VuZGVmaW5lZCcgP1xuICBxdWV1ZU1pY3JvdGFzay5iaW5kKF9nbG9iYWwpIDogKCB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5uZXh0VGljayB8fCBfc2V0SW1tZWRpYXRlKTtcblxuLy8gKioqKioqKioqKioqKioqKioqKioqXG5cblxuY29uc3QgaXNJdGVyYWJsZSA9ICh0aGluZykgPT4gdGhpbmcgIT0gbnVsbCAmJiBpc0Z1bmN0aW9uKHRoaW5nW2l0ZXJhdG9yXSk7XG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNSZWFkYWJsZVN0cmVhbSxcbiAgaXNSZXF1ZXN0LFxuICBpc1Jlc3BvbnNlLFxuICBpc0hlYWRlcnMsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIGlzU3BlY0NvbXBsaWFudEZvcm0sXG4gIHRvSlNPTk9iamVjdCxcbiAgaXNBc3luY0ZuLFxuICBpc1RoZW5hYmxlLFxuICBzZXRJbW1lZGlhdGU6IF9zZXRJbW1lZGlhdGUsXG4gIGFzYXAsXG4gIGlzSXRlcmFibGVcbn07XG4iLCI8dGVtcGxhdGU+XG4gICAgPG5hdmlnYXRpb24+PC9uYXZpZ2F0aW9uPlxuICAgIDxzaW5nbGVwb3N0Z29vZ2xlbWFwPjwvc2luZ2xlcG9zdGdvb2dsZW1hcD5cbiAgICA8bWFpbmZvb3Rlcj48L21haW5mb290ZXI+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBOYXZpZ2F0aW9uTWVudSBmcm9tICcuL2NvbXBvbmVudHMvTmF2aWdhdGlvbk1lbnUudnVlJztcbmltcG9ydCBTaW5nbGVQb3N0R29vZ2xlTWFwIGZyb20gJy4vcGFnZXMvU2luZ2xlUG9zdEdvb2dsZU1hcC52dWUnXG5pbXBvcnQgTWFpbkZvb3RlciBmcm9tICcuL2NvbXBvbmVudHMvRm9vdGVyLnZ1ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgICduYXZpZ2F0aW9uJzogTmF2aWdhdGlvbk1lbnUsXG4gICAgJ3NpbmdsZXBvc3Rnb29nbGVtYXAnIDogU2luZ2xlUG9zdEdvb2dsZU1hcCxcbiAgICAnbWFpbmZvb3RlcicgOiBNYWluRm9vdGVyLFxuICB9LFxufTtcbjwvc2NyaXB0PiIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwiZm9vdGVyXCI+XG4gICAgICAgIDxwPiBDb3B5cmlnaHQgwqkgMjAyNSBPcGVuZWQgUmFuZ2UuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuPC9wPlxuXHRcdCAgICA8dWwgY2xhc3M9XCJuYXZpZ2F0aW9uXCI+XG5cdFx0XHRcdFx0XHQ8bGkgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGxvY2FsX2RhdGFfcHJpbWFyeV9tZW51X2Zvb3RlclwiPlxuXHRcdFx0XHRcdFx0XHRcdDxhIGNsYXNzPVwibGluay1saWdodCBsaW5rLW9mZnNldC0yIGxpbmstdW5kZXJsaW5lLW9wYWNpdHktMjUgbGluay11bmRlcmxpbmUtb3BhY2l0eS0xMDAtaG92ZXJcIiA6aHJlZj1pdGVtLnVybCB0YXJnZXQ9XCJcIiByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCI+e3sgaXRlbS50aXRsZSB9fTwvYT5cblx0XHRcdFx0XHRcdDwvbGk+XG5cdFx0XHRcdDwvdWw+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuXG4gICAgZXhwb3J0IGRlZmF1bHQge1xuXHRcdG5hbWU6ICdNYWluIEZvb3RlcicsXG5cdFx0ZGF0YSgpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGxvY2FsX2RhdGFfcHJpbWFyeV9tZW51X2Zvb3RlcjogdGhlbWVfdmFyc1snbWVudV9mb290ZXInXSxcblx0XHRcdFx0bW9iaWxlOiB0cnVlLFxuXHRcdFx0XHRtb2JpbGVGb290ZXI6IG51bGwsXG5cdFx0XHRcdHdpbmRvd1dpZHRoOiBudWxsXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRjcmVhdGVkKCkge1xuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuY2hlY2tTY3JlZW4pO1xuXHRcdFx0dGhpcy5jaGVja1NjcmVlbigpO1xuXHRcdH0sXG5cdFx0bW91bnRlZCgpIHtcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGlja091dHNpZGVEcm9wZG93bk1lbnUpO1xuXHRcdH0sXG5cdFx0YmVmb3JlVW5tb3VudCgpIHtcblx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGlja091dHNpZGVEcm9wZG93bk1lbnUpO1xuXHRcdH0sXG5cdFx0bWV0aG9kczoge1xuXHRcdFx0dG9nZ2xlbW9iaWxlRm9vdGVyKCl7XG5cdFx0XHRcdHRoaXMubW9iaWxlRm9vdGVyID0gIXRoaXMubW9iaWxlRm9vdGVyO1xuXHRcdFx0fSxcblx0XHRcdGNoZWNrU2NyZWVuKCl7XG5cdFx0XHRcdHRoaXMud2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcblx0XHRcdFx0aWYodGhpcy53aW5kb3dXaWR0aCA8PSA3NTApe1xuXHRcdFx0XHRcdHRoaXMubW9iaWxlID0gdHJ1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLm1vYmlsZSA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLm1vYmlsZUZvb3RlciA9IGZhbHNlO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9LFxuXHRcdFx0aGFuZGxlQ2xpY2tPdXRzaWRlRHJvcGRvd25NZW51KGV2ZW50KXtcblx0XHRcdFx0aWYgKGV2ZW50LnRhcmdldC5pZCAhPT0gXCJtb2JpbGUtbmF2XCIgJiYgZXZlbnQudGFyZ2V0LmlkICE9PSBcInRvZ2dsZS1pY29uXCIgJiYgZXZlbnQudGFyZ2V0LmNsYXNzTmFtZSAhPT0gXCJsaW5rXCIgJiYgZXZlbnQudGFyZ2V0LmNsYXNzTmFtZSAhPT0gXCJsaW5rLXdyYXBwZXJcIiAgKSB7XG5cdFx0XHRcdFx0dGhpcy5tb2JpbGVGb290ZXIgPSBmYWxzZTtcblx0XHRcdFx0fSBcblx0XHRcdH1cblx0XHR9LFxuICAgIH1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG4gICAgLmZvb3RlcntcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0XHRcdG1hcmdpbi1ib3R0b206IDBweDtcblx0XHRcdFx0cGFkZGluZzogMjBweCAxNXB4O1xuXHRcdFx0XHRmb250LXNpemU6IDE0cHg7XG5cblx0XHRcdFx0cHtcblx0XHRcdFx0XHRtYXJnaW4tYm90dG9tOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dWx7XG5cdFx0XHRcdFx0bGlzdC1zdHlsZTogbm9uZTtcblx0XHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0XHRcdGZsZXgtd3JhcDogd3JhcDtcblx0XHRcdFx0XHRtYXJnaW4tdG9wOiAxMHB4O1xuXHRcdFx0XHRcdHBhZGRpbmc6IDBweDtcblx0XHRcdFx0XHRsaXtcblx0XHRcdFx0XHRcdHBhZGRpbmc6IDVweCA1cHg7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGF7XG5cdFx0XHRcdFx0XHRwYWRkaW5nOiAwIDVweDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cbiAgICB9XG48L3N0eWxlPiIsIjx0ZW1wbGF0ZT5cbjxkaXYgaWY9XCJ0cnVlXCI+XG4gICAgPGhlYWRlcj5cbiAgICAgICAgPG5hdj5cbiAgICAgICAgICAgIDxhIGhyZWY9XCIvXCIgdGFyZ2V0PVwiXCIgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciB0ZXh0LXdoaXRlICFuby11bmRlcmxpbmVcIj5cbiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwidy0xMyBoLTEzIG1yLTRcIiBzcmM9XCIvd3AtY29udGVudC90aGVtZXMvdGltYmVyLXN0YXJ0ZXItdGhlbWUvYXNzZXRzL2ltYWdlcy9vZmZpY2lhbC1sb2dvLXYxLWdyZWVuLndlYnBcIiBhbHQ9XCJPcGVuZWQgUmFuZ2UgTG9nb1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmaXQtc2l6ZSBoLWF1dG8gZm9udC1ib2xkXCI+T3BlbmVkIFJhbmdlPC9kaXY+XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8dWwgdi1zaG93PVwiIW1vYmlsZVwiIGNsYXNzPVwibmF2aWdhdGlvblwiPlxuICAgICAgICAgICAgICAgIDxsaSB2LWZvcj1cIihpdGVtLCBpbmRleCkgaW4gbG9jYWxfZGF0YV9wcmltYXJ5X21lbnVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJsaW5rLWxpZ2h0IGxpbmstb2Zmc2V0LTIgbGluay11bmRlcmxpbmUtb3BhY2l0eS0yNSBsaW5rLXVuZGVybGluZS1vcGFjaXR5LTEwMC1ob3ZlclwiIDpocmVmPWl0ZW0udXJsIHRhcmdldD1cIlwiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIj57eyBpdGVtLnRpdGxlIH19PC9hPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPGRpdiB2LXNob3c9XCJtb2JpbGVcIiAgY2xhc3M9XCJpY29uc1wiICBAY2xpY2s9XCJ0b2dnbGVNb2JpbGVOYXZcIiBpZD1cInRvZ2dsZS1pY29uXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1iYXJzXCIgOmNsYXNzPVwieydpY29uLWhpZGUnIDogbW9iaWxlTmF2SXNPcGVuIH1cIj48L2k+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS14bWFya1wiIDpjbGFzcz1cInsnaWNvbi1hY3RpdmUnIDogbW9iaWxlTmF2SXNPcGVuIH1cIj48L2k+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxUcmFuc2l0aW9uIGlkPVwibW9iaWxlLW5hdlwiIG5hbWU9XCJtb2JpbGUtbmF2XCI+XG4gICAgICAgICAgICAgICAgPHVsIHYtc2hvdz1cIm1vYmlsZU5hdlwiIGNsYXNzPVwiZHJvcGRvd24tbmF2XCI+XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImxpbmstcmFwcGVyXCIgdi1mb3I9XCIoaXRlbSwgaW5kZXgpIGluIGxvY2FsX2RhdGFfcHJpbWFyeV9tZW51XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImZpdC1zaXplIGgtYXV0byBmb250LWJvbGQgbm8tdW5kZXJsaW5lIGhvdmVyOnVuZGVybGluZSB0ZXh0LWJsYWNrXCIgOmhyZWY9aXRlbS51cmwgdGFyZ2V0PVwiXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPnt7IGl0ZW0udGl0bGUgfX08L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgIDwvVHJhbnNpdGlvbj5cbiAgICAgICAgPC9uYXY+XG4gICAgPC9oZWFkZXI+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0bmFtZTogJ01haW4gTmF2JyxcbiAgICBkYXRhKCkge1xuXHRcdFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbG9jYWxfZGF0YV9wcmltYXJ5X21lbnU6IHRoZW1lX3ZhcnNbJ21lbnUnXSxcbiAgICAgICAgICAgIG1vYmlsZTogdHJ1ZSxcbiAgICAgICAgICAgIG1vYmlsZU5hdjogbnVsbCxcbiAgICAgICAgICAgIG1vYmlsZU5hdklzT3BlbjogZmFsc2UsXG4gICAgICAgICAgICB3aW5kb3dXaWR0aDogbnVsbFxuICAgICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGVkKCkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5jaGVja1NjcmVlbik7XG4gICAgICAgIHRoaXMuY2hlY2tTY3JlZW4oKTtcbiAgICB9LFxuICAgIC8vIG1vdW50ZWQoKSB7XG4gICAgLy8gICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGlja091dHNpZGVEcm9wZG93bk1lbnUpO1xuICAgIC8vIH0sXG4gICAgLy8gYmVmb3JlVW5tb3VudCgpIHtcbiAgICAvLyAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrT3V0c2lkZURyb3Bkb3duTWVudSk7XG4gICAgLy8gfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHRvZ2dsZU1vYmlsZU5hdigpe1xuICAgICAgICAgICAgdGhpcy5tb2JpbGVOYXZJc09wZW4gPSAhdGhpcy5tb2JpbGVOYXZJc09wZW47XG4gICAgICAgICAgICB0aGlzLm1vYmlsZU5hdiA9ICF0aGlzLm1vYmlsZU5hdjtcbiAgICAgICAgfSxcbiAgICAgICAgY2hlY2tTY3JlZW4oKXtcbiAgICAgICAgICAgIHRoaXMud2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgICAgIGlmKHRoaXMud2luZG93V2lkdGggPD0gNzUwKXtcbiAgICAgICAgICAgICAgICB0aGlzLm1vYmlsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm1vYmlsZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5tb2JpbGVOYXYgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gaGFuZGxlQ2xpY2tPdXRzaWRlRHJvcGRvd25NZW51KGV2ZW50KXtcbiAgICAgICAgLy8gICAgIGlmIChldmVudC50YXJnZXQuaWQgIT09IFwibW9iaWxlLW5hdlwiICYmIGV2ZW50LnRhcmdldC5pZCAhPT0gXCJ0b2dnbGUtaWNvblwiICYmIGV2ZW50LnRhcmdldC5jbGFzc05hbWUgIT09IFwibGlua1wiICYmIGV2ZW50LnRhcmdldC5jbGFzc05hbWUgIT09IFwibGluay13cmFwcGVyXCIgICkge1xuICAgICAgICAvLyAgICAgICAgIHRoaXMubW9iaWxlTmF2ID0gZmFsc2U7XG4gICAgICAgIC8vICAgICB9IFxuICAgICAgICAvLyB9XG4gICAgfSxcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG5oZWFkZXJ7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcbiAgICBuYXZ7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLDAsMCwwLjgpO1xuICAgICAgICB6LWluZGV4OiA5OTtcbiAgICAgICAgcGFkZGluZzogMTJweCAwO1xuICAgICAgICB0cmFuc2l0aW9uOiAwLjVzIGVhc2UgYWxsO1xuICAgICAgICB3aWR0aDogOTIlO1xuICAgICAgICBtYXJnaW46IDAgYXV0bztcbiAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTE0MHB4KSB7XG4gICAgICAgICAgICBtYXgtd2lkdGg6IDEyODBweDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC5uYXZpZ2F0aW9ue1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBmbGV4OiAxO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgIH1cblxuXG4gICAgdWwsXG4gICAgLmxpbmt7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgbGlzdC1zdHlsZTogbm9uZTtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIH1cblxuICAgIGxpe1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgICAgICAgcGFkZGluZzogMTZweDtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDE2cHg7XG4gICAgfVxuXG4gICAgLmxpbmt7XG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgdHJhbnNpdGlvbjogMC41cyBlYXNlIGFsbDtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDRweDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogNHB4O1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgICAgIGNvbG9yOiBibGFjaztcblxuICAgICAgICAmOmhvdmVye1xuICAgICAgICAgICAgY29sb3I6ICMwMGFmZWE7XG4gICAgICAgICAgICBib3JkZXItY29sb3I6ICMwMGFmZWE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLmljb24taGlkZSxcbiAgICAuZmEteG1hcmt7XG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG4gICAgXG4gICAgLmZhLXhtYXJrLFxuICAgIC5mYS1iYXJze1xuICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgfVxuXG4gICAgLmljb25ze1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogNDAlO1xuICAgICAgICByaWdodDogMjVweDtcbiAgICAgICAgaGVpZ2h0OiBmaXQtY29udGVudDtcblxuICAgICAgICBpe1xuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgbGVmdDogMHB4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLmRyb3Bkb3duLW5hdntcbiAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgbWF4LXdpZHRoOiAyNTBweDtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuXG4gICAgICAgIGxpe1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgICAgICAgICAubGlua3tcbiAgICAgICAgICAgICAgICBjb2xvcjogIzAwMDtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLmljb24tYWN0aXZle1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgIH1cblxuICAgIC53ZWJzaXRlLXRpdGxlLWxvZ297XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICB9XG5cbiAgICAubW9iaWxlLW5hdi1lbnRlci1hY3RpdmUsXG4gICAgLm1vYmlsZS1uYXYtbGVhdmUtYWN0aXZle1xuICAgICAgICB0cmFuc2l0aW9uOiAxcyBlYXNlIGFsbDtcbiAgICB9XG4gICAgLm1vYmlsZS1uYXYtbGVhdmUtdG8sXG4gICAgLm1vYmlsZS1uYXYtZW50ZXItZnJvbXtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTI1MHB4KTtcbiAgICB9XG5cbiAgICAubW9iaWxlLW5hdi1lbnRlci10b3tcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCk7XG4gICAgfVxuXG59XG48L3N0eWxlPiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiB2LWlmPVwiIWxvYWRpbmdcIiBjbGFzcz1cIm1heC13LTd4bCBtYXgteGw6cHItNCBtYXgteGw6cGwtNCBtbC1hdXRvIG1yLWF1dG8gcHQtNCBwYi00XCI+XG4gICAgICA8YXJ0aWNsZSBjbGFzcz1cInctMS8xXCI+XG4gICAgICAgIDxzZWN0aW9uIGNsYXNzPVwiYXJ0aWNsZS1jb250ZW50XCI+XG4gICAgICAgICAgICA8aDEgY2xhc3M9XCJhcnRpY2xlLWgxXCIgdi10ZXh0PVwiZ2V0X3RpdGxlKHBvc3QudGl0bGUucmVuZGVyZWQpXCI+PC9oMT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhcnRpY2xlLWJvZHlcIj5cbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImJsb2NrIG1iLTNcIiBocmVmPVwie3sgZ29vZ2xlRGlyZWN0aW9uTGluayAgfX0gXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPlxuICAgICAgICAgICAgICAgICAgQWRkcmVzczogIHt7IHBvc3QuYWNmLmd1aWRlc19sb2NhdGlvbi5hZGRyZXNzfX1cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgPHAgdi1pZj1cInBvc3QuYWNmLnJlZ2lzdHJhdGlvblwiPlJlZ2lzdHJhdGlvbjogIHt7IHBvc3QuYWNmLnJlZ2lzdHJhdGlvbiB9fTwvcD5cbiAgICAgICAgICAgICAgICA8cCB2LWlmPVwicG9zdC5hY2YucGhvbmVcIj5QaG9uZToge3sgcG9zdC5hY2YucGhvbmUgfX08L3A+XG4gICAgICAgICAgICAgICAgPHAgdi1pZj1cInBvc3QuYWNmLmh1bnRfdW5pdHNcIj5IdW50IFVuaXRzOiB7eyBwb3N0LmFjZi5odW50X3VuaXRzIH19PC9wPlxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwiYmxvY2sgbWItM1wiIHYtaWY9XCJwb3N0LmFjZi53ZWJzaXRlXCIgaHJlZj1cInt7IHBvc3QuYWNmLndlYnNpdGUgfX1cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCI+e3sgcG9zdC5hY2Yud2Vic2l0ZSB9fTwvYT5cbiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJwb3N0LmFjZi5vcGVuZWRyYW5nZV92ZXJpZmllZFwiPlxuICAgICAgICAgICAgICAgICAgPHA+T3BlbmVkUmFuZ2UgVmVyaWZpZWQ6IFllczwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IHYtZWxzZT5cbiAgICAgICAgICAgICAgICAgIDxwPk9wZW5lZFJhbmdlIFZlcmlmaWVkOiBObzwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvc2VjdGlvbj5cbiAgICAgIDwvYXJ0aWNsZT5cblxuICAgICAgPEdvb2dsZU1hcCBcbiAgICA6YXBpLWtleT1cIllPVVJfR09PR0xFX01BUFNfQVBJX0tFWVwiIFxuICAgIHN0eWxlPVwid2lkdGg6IDEwMCU7IGhlaWdodDogNTAwcHhcIiBcbiAgICA6Y2VudGVyPVwiY2VudGVyXCIgXG4gICAgOnpvb209XCIxNVwiXG4gID5cbiAgICA8TWFya2VyIDpvcHRpb25zPVwieyBwb3NpdGlvbjogY2VudGVyIH1cIj5cbiAgICAgIDxJbmZvV2luZG93PlxuICAgICAgICA8ZGl2IGlkPVwiY29udGVudFwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJzaXRlTm90aWNlXCI+PC9kaXY+XG4gICAgICAgICAgPGgzIGlkPVwiZmlyc3RIZWFkaW5nXCIgY2xhc3M9XCJmaXJzdEhlYWRpbmdcIiB2LXRleHQ9XCJnZXRfdGl0bGUocG9zdC50aXRsZS5yZW5kZXJlZClcIj48L2gzPlxuICAgICAgICAgIDxhIDpocmVmPVwiZ2V0R29vZ2xlTWFwc0RpcmVjdGlvbnNMaW5rZSgpXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiPkRpcmVjdGlvbnM8L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9JbmZvV2luZG93PlxuICAgIDwvTWFya2VyPlxuICBcbiAgPC9Hb29nbGVNYXA+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IEdvb2dsZU1hcCwgTWFya2VyLCBJbmZvV2luZG93IH0gZnJvbSBcInZ1ZTMtZ29vZ2xlLW1hcFwiO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiBcIkdvb2dsZU1hcENvbXBvbmVudFwiLFxuICBjb21wb25lbnRzOiB7XG4gICAgR29vZ2xlTWFwLFxuICAgIE1hcmtlcixcbiAgICBJbmZvV2luZG93XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbG9jYWxfZGF0YV9wb3N0X2lkOiB0aGVtZV92YXJzWydjdXJyZW50X3Bvc3RfaWQnXSxcbiAgICAgICAgcG9zdDogbnVsbCxcbiAgICAgICAgWU9VUl9HT09HTEVfTUFQU19BUElfS0VZOiBwcm9jZXNzLmVudi5HT09HTEVfTUFQU19BUEksIC8vIFJlcGxhY2Ugd2l0aCB5b3VyIGFjdHVhbCBBUEkga2V5XG4gICAgICAgIHRpdGxlOiBudWxsLFxuICAgICAgICBhZGRyZXNzOiBcIjExNTAgRSBBcmthbnNhcyBBdmUsIERlbnZlciwgQ08gODAyMTAsIFVTQVwiLFxuICAgICAgICBjZW50ZXI6IG51bGwsXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICBtYXBab29tOiAxMCxcbiAgICAgICAgaW5mb1dpbmRvd1Bvc2l0aW9uOiB7IFxuICAgICAgICAgICAgICAgICAgbGF0OiBudWxsLCBcbiAgICAgICAgICAgICAgICAgIGxuZzogbnVsbFxuICAgICAgICAgICAgICB9LFxuICAgICAgICBpbmZvV2luZG93T3BlbmVkOiBmYWxzZSxcbiAgICAgICAgc2VsZWN0ZWRNYXJrZXI6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgYXN5bmMgY3JlYXRlZCgpIHtcbiAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KGAvd3AtanNvbi93cC92Mi9ndWlkZXMvJHt0aGlzLmxvY2FsX2RhdGFfcG9zdF9pZH1gKTtcbiAgICBjb25zdCBwb3N0ID0gcmVzcG9uc2UuZGF0YTtcbiAgICB0aGlzLmNlbnRlciA9IHtcbiAgICAgIGxhdDogcG9zdC5hY2YuZ3VpZGVzX2xvY2F0aW9uLmxhdCxcbiAgICAgIGxuZzogcG9zdC5hY2YuZ3VpZGVzX2xvY2F0aW9uLmxuZyxcbiAgICB9O1xuICAgIHRoaXMucG9zdCA9IHBvc3Q7XG4gICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBvcGVuSW5mb1dpbmRvdygpIHtcbiAgICAgIHRoaXMuaW5mb1dpbmRvd09wZW5lZCA9IHRydWU7XG4gICAgfSxcbiAgICBjbG9zZUluZm9XaW5kb3coKSB7XG4gICAgICB0aGlzLmluZm9XaW5kb3dPcGVuZWQgPSBmYWxzZTtcbiAgICB9LFxuICAgIGdldF90aXRsZShjdXJyZW50X3RpdGxlKXtcbiAgICAgIGNvbnNvbGUubG9nKGN1cnJlbnRfdGl0bGUpO1xuICAgICAgbGV0IHRpdGxlID0gY3VycmVudF90aXRsZS5yZXBsYWNlKFwiJiM4MjExO1wiLCBcIi1cIik7XG4gICAgICBsZXQgdGl0bGUyID0gdGl0bGUucmVwbGFjZShcIiZhbXA7XCIsIFwiJlwiKTtcblxuICAgICAgcmV0dXJuIHRpdGxlMjtcbiAgICB9LFxuICAgIGdldEdvb2dsZU1hcHNEaXJlY3Rpb25zTGlua2UoKXtcbiAgICAgIHJldHVybiBgaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL2Rpci8/YXBpPTEmZGVzdGluYXRpb249JHt0aGlzLmFkZHJlc3N9YDtcbiAgICB9XG4gIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbiAgICAuZm9vdGVye1xuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cbjwvc3R5bGU+IiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBydW50aW1lIGhlbHBlciBmb3Igc2V0dGluZyBwcm9wZXJ0aWVzIG9uIGNvbXBvbmVudHNcbi8vIGluIGEgdHJlZS1zaGFrYWJsZSB3YXlcbmV4cG9ydHMuZGVmYXVsdCA9IChzZmMsIHByb3BzKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0ID0gc2ZjLl9fdmNjT3B0cyB8fCBzZmM7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIHByb3BzKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIi8qKlxuKiB2dWUgdjMuNS4xNlxuKiAoYykgMjAxOC1wcmVzZW50IFl1eGkgKEV2YW4pIFlvdSBhbmQgVnVlIGNvbnRyaWJ1dG9yc1xuKiBAbGljZW5zZSBNSVRcbioqL1xuLyohICNfX05PX1NJREVfRUZGRUNUU19fICovXG4vLyBAX19OT19TSURFX0VGRkVDVFNfX1xuZnVuY3Rpb24gbWFrZU1hcChzdHIpIHtcbiAgY29uc3QgbWFwID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZvciAoY29uc3Qga2V5IG9mIHN0ci5zcGxpdChcIixcIikpIG1hcFtrZXldID0gMTtcbiAgcmV0dXJuICh2YWwpID0+IHZhbCBpbiBtYXA7XG59XG5cbmNvbnN0IEVNUFRZX09CSiA9IE9iamVjdC5mcmVlemUoe30pIDtcbmNvbnN0IEVNUFRZX0FSUiA9IE9iamVjdC5mcmVlemUoW10pIDtcbmNvbnN0IE5PT1AgPSAoKSA9PiB7XG59O1xuY29uc3QgTk8gPSAoKSA9PiBmYWxzZTtcbmNvbnN0IGlzT24gPSAoa2V5KSA9PiBrZXkuY2hhckNvZGVBdCgwKSA9PT0gMTExICYmIGtleS5jaGFyQ29kZUF0KDEpID09PSAxMTAgJiYgLy8gdXBwZXJjYXNlIGxldHRlclxuKGtleS5jaGFyQ29kZUF0KDIpID4gMTIyIHx8IGtleS5jaGFyQ29kZUF0KDIpIDwgOTcpO1xuY29uc3QgaXNNb2RlbExpc3RlbmVyID0gKGtleSkgPT4ga2V5LnN0YXJ0c1dpdGgoXCJvblVwZGF0ZTpcIik7XG5jb25zdCBleHRlbmQgPSBPYmplY3QuYXNzaWduO1xuY29uc3QgcmVtb3ZlID0gKGFyciwgZWwpID0+IHtcbiAgY29uc3QgaSA9IGFyci5pbmRleE9mKGVsKTtcbiAgaWYgKGkgPiAtMSkge1xuICAgIGFyci5zcGxpY2UoaSwgMSk7XG4gIH1cbn07XG5jb25zdCBoYXNPd25Qcm9wZXJ0eSQxID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmNvbnN0IGhhc093biA9ICh2YWwsIGtleSkgPT4gaGFzT3duUHJvcGVydHkkMS5jYWxsKHZhbCwga2V5KTtcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuY29uc3QgaXNNYXAgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gXCJbb2JqZWN0IE1hcF1cIjtcbmNvbnN0IGlzU2V0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09IFwiW29iamVjdCBTZXRdXCI7XG5jb25zdCBpc0RhdGUgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gXCJbb2JqZWN0IERhdGVdXCI7XG5jb25zdCBpc1JlZ0V4cCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSBcIltvYmplY3QgUmVnRXhwXVwiO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwiZnVuY3Rpb25cIjtcbmNvbnN0IGlzU3RyaW5nID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIjtcbmNvbnN0IGlzU3ltYm9sID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzeW1ib2xcIjtcbmNvbnN0IGlzT2JqZWN0ID0gKHZhbCkgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCI7XG5jb25zdCBpc1Byb21pc2UgPSAodmFsKSA9PiB7XG4gIHJldHVybiAoaXNPYmplY3QodmFsKSB8fCBpc0Z1bmN0aW9uKHZhbCkpICYmIGlzRnVuY3Rpb24odmFsLnRoZW4pICYmIGlzRnVuY3Rpb24odmFsLmNhdGNoKTtcbn07XG5jb25zdCBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5jb25zdCB0b1R5cGVTdHJpbmcgPSAodmFsdWUpID0+IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuY29uc3QgdG9SYXdUeXBlID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiB0b1R5cGVTdHJpbmcodmFsdWUpLnNsaWNlKDgsIC0xKTtcbn07XG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09IFwiW29iamVjdCBPYmplY3RdXCI7XG5jb25zdCBpc0ludGVnZXJLZXkgPSAoa2V5KSA9PiBpc1N0cmluZyhrZXkpICYmIGtleSAhPT0gXCJOYU5cIiAmJiBrZXlbMF0gIT09IFwiLVwiICYmIFwiXCIgKyBwYXJzZUludChrZXksIDEwKSA9PT0ga2V5O1xuY29uc3QgaXNSZXNlcnZlZFByb3AgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgLy8gdGhlIGxlYWRpbmcgY29tbWEgaXMgaW50ZW50aW9uYWwgc28gZW1wdHkgc3RyaW5nIFwiXCIgaXMgYWxzbyBpbmNsdWRlZFxuICBcIixrZXkscmVmLHJlZl9mb3IscmVmX2tleSxvblZub2RlQmVmb3JlTW91bnQsb25Wbm9kZU1vdW50ZWQsb25Wbm9kZUJlZm9yZVVwZGF0ZSxvblZub2RlVXBkYXRlZCxvblZub2RlQmVmb3JlVW5tb3VudCxvblZub2RlVW5tb3VudGVkXCJcbik7XG5jb25zdCBpc0J1aWx0SW5EaXJlY3RpdmUgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgXCJiaW5kLGNsb2FrLGVsc2UtaWYsZWxzZSxmb3IsaHRtbCxpZixtb2RlbCxvbixvbmNlLHByZSxzaG93LHNsb3QsdGV4dCxtZW1vXCJcbik7XG5jb25zdCBjYWNoZVN0cmluZ0Z1bmN0aW9uID0gKGZuKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoc3RyKSA9PiB7XG4gICAgY29uc3QgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSk7XG4gIH07XG59O1xuY29uc3QgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbmNvbnN0IGNhbWVsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbihcbiAgKHN0cikgPT4ge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCAoXywgYykgPT4gYyA/IGMudG9VcHBlckNhc2UoKSA6IFwiXCIpO1xuICB9XG4pO1xuY29uc3QgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xuY29uc3QgaHlwaGVuYXRlID0gY2FjaGVTdHJpbmdGdW5jdGlvbihcbiAgKHN0cikgPT4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKClcbik7XG5jb25zdCBjYXBpdGFsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59KTtcbmNvbnN0IHRvSGFuZGxlcktleSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oXG4gIChzdHIpID0+IHtcbiAgICBjb25zdCBzID0gc3RyID8gYG9uJHtjYXBpdGFsaXplKHN0cil9YCA6IGBgO1xuICAgIHJldHVybiBzO1xuICB9XG4pO1xuY29uc3QgaGFzQ2hhbmdlZCA9ICh2YWx1ZSwgb2xkVmFsdWUpID0+ICFPYmplY3QuaXModmFsdWUsIG9sZFZhbHVlKTtcbmNvbnN0IGludm9rZUFycmF5Rm5zID0gKGZucywgLi4uYXJnKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgZm5zW2ldKC4uLmFyZyk7XG4gIH1cbn07XG5jb25zdCBkZWYgPSAob2JqLCBrZXksIHZhbHVlLCB3cml0YWJsZSA9IGZhbHNlKSA9PiB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZSxcbiAgICB2YWx1ZVxuICB9KTtcbn07XG5jb25zdCBsb29zZVRvTnVtYmVyID0gKHZhbCkgPT4ge1xuICBjb25zdCBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuO1xufTtcbmNvbnN0IHRvTnVtYmVyID0gKHZhbCkgPT4ge1xuICBjb25zdCBuID0gaXNTdHJpbmcodmFsKSA/IE51bWJlcih2YWwpIDogTmFOO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuO1xufTtcbmxldCBfZ2xvYmFsVGhpcztcbmNvbnN0IGdldEdsb2JhbFRoaXMgPSAoKSA9PiB7XG4gIHJldHVybiBfZ2xvYmFsVGhpcyB8fCAoX2dsb2JhbFRoaXMgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHt9KTtcbn07XG5mdW5jdGlvbiBnZW5DYWNoZUtleShzb3VyY2UsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHNvdXJjZSArIEpTT04uc3RyaW5naWZ5KFxuICAgIG9wdGlvbnMsXG4gICAgKF8sIHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJmdW5jdGlvblwiID8gdmFsLnRvU3RyaW5nKCkgOiB2YWxcbiAgKTtcbn1cblxuY29uc3QgUGF0Y2hGbGFnTmFtZXMgPSB7XG4gIFsxXTogYFRFWFRgLFxuICBbMl06IGBDTEFTU2AsXG4gIFs0XTogYFNUWUxFYCxcbiAgWzhdOiBgUFJPUFNgLFxuICBbMTZdOiBgRlVMTF9QUk9QU2AsXG4gIFszMl06IGBORUVEX0hZRFJBVElPTmAsXG4gIFs2NF06IGBTVEFCTEVfRlJBR01FTlRgLFxuICBbMTI4XTogYEtFWUVEX0ZSQUdNRU5UYCxcbiAgWzI1Nl06IGBVTktFWUVEX0ZSQUdNRU5UYCxcbiAgWzUxMl06IGBORUVEX1BBVENIYCxcbiAgWzEwMjRdOiBgRFlOQU1JQ19TTE9UU2AsXG4gIFsyMDQ4XTogYERFVl9ST09UX0ZSQUdNRU5UYCxcbiAgWy0xXTogYEhPSVNURURgLFxuICBbLTJdOiBgQkFJTGBcbn07XG5cbmNvbnN0IHNsb3RGbGFnc1RleHQgPSB7XG4gIFsxXTogXCJTVEFCTEVcIixcbiAgWzJdOiBcIkRZTkFNSUNcIixcbiAgWzNdOiBcIkZPUldBUkRFRFwiXG59O1xuXG5jb25zdCBHTE9CQUxTX0FMTE9XRUQgPSBcIkluZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4scGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLEJpZ0ludCxjb25zb2xlLEVycm9yLFN5bWJvbFwiO1xuY29uc3QgaXNHbG9iYWxseUFsbG93ZWQgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChHTE9CQUxTX0FMTE9XRUQpO1xuXG5jb25zdCByYW5nZSA9IDI7XG5mdW5jdGlvbiBnZW5lcmF0ZUNvZGVGcmFtZShzb3VyY2UsIHN0YXJ0ID0gMCwgZW5kID0gc291cmNlLmxlbmd0aCkge1xuICBzdGFydCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHN0YXJ0LCBzb3VyY2UubGVuZ3RoKSk7XG4gIGVuZCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGVuZCwgc291cmNlLmxlbmd0aCkpO1xuICBpZiAoc3RhcnQgPiBlbmQpIHJldHVybiBcIlwiO1xuICBsZXQgbGluZXMgPSBzb3VyY2Uuc3BsaXQoLyhcXHI/XFxuKS8pO1xuICBjb25zdCBuZXdsaW5lU2VxdWVuY2VzID0gbGluZXMuZmlsdGVyKChfLCBpZHgpID0+IGlkeCAlIDIgPT09IDEpO1xuICBsaW5lcyA9IGxpbmVzLmZpbHRlcigoXywgaWR4KSA9PiBpZHggJSAyID09PSAwKTtcbiAgbGV0IGNvdW50ID0gMDtcbiAgY29uc3QgcmVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3VudCArPSBsaW5lc1tpXS5sZW5ndGggKyAobmV3bGluZVNlcXVlbmNlc1tpXSAmJiBuZXdsaW5lU2VxdWVuY2VzW2ldLmxlbmd0aCB8fCAwKTtcbiAgICBpZiAoY291bnQgPj0gc3RhcnQpIHtcbiAgICAgIGZvciAobGV0IGogPSBpIC0gcmFuZ2U7IGogPD0gaSArIHJhbmdlIHx8IGVuZCA+IGNvdW50OyBqKyspIHtcbiAgICAgICAgaWYgKGogPCAwIHx8IGogPj0gbGluZXMubGVuZ3RoKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgbGluZSA9IGogKyAxO1xuICAgICAgICByZXMucHVzaChcbiAgICAgICAgICBgJHtsaW5lfSR7XCIgXCIucmVwZWF0KE1hdGgubWF4KDMgLSBTdHJpbmcobGluZSkubGVuZ3RoLCAwKSl9fCAgJHtsaW5lc1tqXX1gXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGxpbmVMZW5ndGggPSBsaW5lc1tqXS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG5ld0xpbmVTZXFMZW5ndGggPSBuZXdsaW5lU2VxdWVuY2VzW2pdICYmIG5ld2xpbmVTZXF1ZW5jZXNbal0ubGVuZ3RoIHx8IDA7XG4gICAgICAgIGlmIChqID09PSBpKSB7XG4gICAgICAgICAgY29uc3QgcGFkID0gc3RhcnQgLSAoY291bnQgLSAobGluZUxlbmd0aCArIG5ld0xpbmVTZXFMZW5ndGgpKTtcbiAgICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heChcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICBlbmQgPiBjb3VudCA/IGxpbmVMZW5ndGggLSBwYWQgOiBlbmQgLSBzdGFydFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmVzLnB1c2goYCAgIHwgIGAgKyBcIiBcIi5yZXBlYXQocGFkKSArIFwiXlwiLnJlcGVhdChsZW5ndGgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChqID4gaSkge1xuICAgICAgICAgIGlmIChlbmQgPiBjb3VudCkge1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpLCAxKTtcbiAgICAgICAgICAgIHJlcy5wdXNoKGAgICB8ICBgICsgXCJeXCIucmVwZWF0KGxlbmd0aCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb3VudCArPSBsaW5lTGVuZ3RoICsgbmV3TGluZVNlcUxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXMuam9pbihcIlxcblwiKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGUodmFsdWUpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IHZhbHVlW2ldO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGlzU3RyaW5nKGl0ZW0pID8gcGFyc2VTdHJpbmdTdHlsZShpdGVtKSA6IG5vcm1hbGl6ZVN0eWxlKGl0ZW0pO1xuICAgICAgaWYgKG5vcm1hbGl6ZWQpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbm9ybWFsaXplZCkge1xuICAgICAgICAgIHJlc1trZXldID0gbm9ybWFsaXplZFtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH0gZWxzZSBpZiAoaXNTdHJpbmcodmFsdWUpIHx8IGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuY29uc3QgbGlzdERlbGltaXRlclJFID0gLzsoPyFbXihdKlxcKSkvZztcbmNvbnN0IHByb3BlcnR5RGVsaW1pdGVyUkUgPSAvOihbXl0rKS87XG5jb25zdCBzdHlsZUNvbW1lbnRSRSA9IC9cXC9cXCpbXl0qP1xcKlxcLy9nO1xuZnVuY3Rpb24gcGFyc2VTdHJpbmdTdHlsZShjc3NUZXh0KSB7XG4gIGNvbnN0IHJldCA9IHt9O1xuICBjc3NUZXh0LnJlcGxhY2Uoc3R5bGVDb21tZW50UkUsIFwiXCIpLnNwbGl0KGxpc3REZWxpbWl0ZXJSRSkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICBjb25zdCB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyUkUpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJldFt0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlTdHlsZShzdHlsZXMpIHtcbiAgaWYgKCFzdHlsZXMpIHJldHVybiBcIlwiO1xuICBpZiAoaXNTdHJpbmcoc3R5bGVzKSkgcmV0dXJuIHN0eWxlcztcbiAgbGV0IHJldCA9IFwiXCI7XG4gIGZvciAoY29uc3Qga2V5IGluIHN0eWxlcykge1xuICAgIGNvbnN0IHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBrZXkuc3RhcnRzV2l0aChgLS1gKSA/IGtleSA6IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgcmV0ICs9IGAke25vcm1hbGl6ZWRLZXl9OiR7dmFsdWV9O2A7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiBub3JtYWxpemVDbGFzcyh2YWx1ZSkge1xuICBsZXQgcmVzID0gXCJcIjtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHJlcyA9IHZhbHVlO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZUNsYXNzKHZhbHVlW2ldKTtcbiAgICAgIGlmIChub3JtYWxpemVkKSB7XG4gICAgICAgIHJlcyArPSBub3JtYWxpemVkICsgXCIgXCI7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIGZvciAoY29uc3QgbmFtZSBpbiB2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlW25hbWVdKSB7XG4gICAgICAgIHJlcyArPSBuYW1lICsgXCIgXCI7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXMudHJpbSgpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMocHJvcHMpIHtcbiAgaWYgKCFwcm9wcykgcmV0dXJuIG51bGw7XG4gIGxldCB7IGNsYXNzOiBrbGFzcywgc3R5bGUgfSA9IHByb3BzO1xuICBpZiAoa2xhc3MgJiYgIWlzU3RyaW5nKGtsYXNzKSkge1xuICAgIHByb3BzLmNsYXNzID0gbm9ybWFsaXplQ2xhc3Moa2xhc3MpO1xuICB9XG4gIGlmIChzdHlsZSkge1xuICAgIHByb3BzLnN0eWxlID0gbm9ybWFsaXplU3R5bGUoc3R5bGUpO1xuICB9XG4gIHJldHVybiBwcm9wcztcbn1cblxuY29uc3QgSFRNTF9UQUdTID0gXCJodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSxhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoZ3JvdXAsaDEsaDIsaDMsaDQsaDUsaDYsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ1YnkscyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbixvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLGRldGFpbHMsZGlhbG9nLG1lbnUsc3VtbWFyeSx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdFwiO1xuY29uc3QgU1ZHX1RBR1MgPSBcInN2ZyxhbmltYXRlLGFuaW1hdGVNb3Rpb24sYW5pbWF0ZVRyYW5zZm9ybSxjaXJjbGUsY2xpcFBhdGgsY29sb3ItcHJvZmlsZSxkZWZzLGRlc2MsZGlzY2FyZCxlbGxpcHNlLGZlQmxlbmQsZmVDb2xvck1hdHJpeCxmZUNvbXBvbmVudFRyYW5zZmVyLGZlQ29tcG9zaXRlLGZlQ29udm9sdmVNYXRyaXgsZmVEaWZmdXNlTGlnaHRpbmcsZmVEaXNwbGFjZW1lbnRNYXAsZmVEaXN0YW50TGlnaHQsZmVEcm9wU2hhZG93LGZlRmxvb2QsZmVGdW5jQSxmZUZ1bmNCLGZlRnVuY0csZmVGdW5jUixmZUdhdXNzaWFuQmx1cixmZUltYWdlLGZlTWVyZ2UsZmVNZXJnZU5vZGUsZmVNb3JwaG9sb2d5LGZlT2Zmc2V0LGZlUG9pbnRMaWdodCxmZVNwZWN1bGFyTGlnaHRpbmcsZmVTcG90TGlnaHQsZmVUaWxlLGZlVHVyYnVsZW5jZSxmaWx0ZXIsZm9yZWlnbk9iamVjdCxnLGhhdGNoLGhhdGNocGF0aCxpbWFnZSxsaW5lLGxpbmVhckdyYWRpZW50LG1hcmtlcixtYXNrLG1lc2gsbWVzaGdyYWRpZW50LG1lc2hwYXRjaCxtZXNocm93LG1ldGFkYXRhLG1wYXRoLHBhdGgscGF0dGVybixwb2x5Z29uLHBvbHlsaW5lLHJhZGlhbEdyYWRpZW50LHJlY3Qsc2V0LHNvbGlkY29sb3Isc3RvcCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dFBhdGgsdGl0bGUsdHNwYW4sdW5rbm93bix1c2Usdmlld1wiO1xuY29uc3QgTUFUSF9UQUdTID0gXCJhbm5vdGF0aW9uLGFubm90YXRpb24teG1sLG1hY3Rpb24sbWFsaWduZ3JvdXAsbWFsaWdubWFyayxtYXRoLG1lbmNsb3NlLG1lcnJvcixtZmVuY2VkLG1mcmFjLG1mcmFjdGlvbixtZ2x5cGgsbWksbWxhYmVsZWR0cixtbG9uZ2RpdixtbXVsdGlzY3JpcHRzLG1uLG1vLG1vdmVyLG1wYWRkZWQsbXBoYW50b20sbXByZXNjcmlwdHMsbXJvb3QsbXJvdyxtcyxtc2NhcnJpZXMsbXNjYXJyeSxtc2dyb3VwLG1zbGluZSxtc3BhY2UsbXNxcnQsbXNyb3csbXN0YWNrLG1zdHlsZSxtc3ViLG1zdWJzdXAsbXN1cCxtdGFibGUsbXRkLG10ZXh0LG10cixtdW5kZXIsbXVuZGVyb3Zlcixub25lLHNlbWFudGljc1wiO1xuY29uc3QgVk9JRF9UQUdTID0gXCJhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGhyLGltZyxpbnB1dCxsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdiclwiO1xuY29uc3QgaXNIVE1MVGFnID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoSFRNTF9UQUdTKTtcbmNvbnN0IGlzU1ZHVGFnID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoU1ZHX1RBR1MpO1xuY29uc3QgaXNNYXRoTUxUYWcgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChNQVRIX1RBR1MpO1xuY29uc3QgaXNWb2lkVGFnID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoVk9JRF9UQUdTKTtcblxuY29uc3Qgc3BlY2lhbEJvb2xlYW5BdHRycyA9IGBpdGVtc2NvcGUsYWxsb3dmdWxsc2NyZWVuLGZvcm1ub3ZhbGlkYXRlLGlzbWFwLG5vbW9kdWxlLG5vdmFsaWRhdGUscmVhZG9ubHlgO1xuY29uc3QgaXNTcGVjaWFsQm9vbGVhbkF0dHIgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzKTtcbmNvbnN0IGlzQm9vbGVhbkF0dHIgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgc3BlY2lhbEJvb2xlYW5BdHRycyArIGAsYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNvbnRyb2xzLGRlZmF1bHQsZGVmZXIsZGlzYWJsZWQsaGlkZGVuLGluZXJ0LGxvb3Asb3BlbixyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3MsY2hlY2tlZCxtdXRlZCxtdWx0aXBsZSxzZWxlY3RlZGBcbik7XG5mdW5jdGlvbiBpbmNsdWRlQm9vbGVhbkF0dHIodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgfHwgdmFsdWUgPT09IFwiXCI7XG59XG5jb25zdCBpc0tub3duSHRtbEF0dHIgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgYGFjY2VwdCxhY2NlcHQtY2hhcnNldCxhY2Nlc3NrZXksYWN0aW9uLGFsaWduLGFsbG93LGFsdCxhc3luYyxhdXRvY2FwaXRhbGl6ZSxhdXRvY29tcGxldGUsYXV0b2ZvY3VzLGF1dG9wbGF5LGJhY2tncm91bmQsYmdjb2xvcixib3JkZXIsYnVmZmVyZWQsY2FwdHVyZSxjaGFsbGVuZ2UsY2hhcnNldCxjaGVja2VkLGNpdGUsY2xhc3MsY29kZSxjb2RlYmFzZSxjb2xvcixjb2xzLGNvbHNwYW4sY29udGVudCxjb250ZW50ZWRpdGFibGUsY29udGV4dG1lbnUsY29udHJvbHMsY29vcmRzLGNyb3Nzb3JpZ2luLGNzcCxkYXRhLGRhdGV0aW1lLGRlY29kaW5nLGRlZmF1bHQsZGVmZXIsZGlyLGRpcm5hbWUsZGlzYWJsZWQsZG93bmxvYWQsZHJhZ2dhYmxlLGRyb3B6b25lLGVuY3R5cGUsZW50ZXJrZXloaW50LGZvcixmb3JtLGZvcm1hY3Rpb24sZm9ybWVuY3R5cGUsZm9ybW1ldGhvZCxmb3Jtbm92YWxpZGF0ZSxmb3JtdGFyZ2V0LGhlYWRlcnMsaGVpZ2h0LGhpZGRlbixoaWdoLGhyZWYsaHJlZmxhbmcsaHR0cC1lcXVpdixpY29uLGlkLGltcG9ydGFuY2UsaW5lcnQsaW50ZWdyaXR5LGlzbWFwLGl0ZW1wcm9wLGtleXR5cGUsa2luZCxsYWJlbCxsYW5nLGxhbmd1YWdlLGxvYWRpbmcsbGlzdCxsb29wLGxvdyxtYW5pZmVzdCxtYXgsbWF4bGVuZ3RoLG1pbmxlbmd0aCxtZWRpYSxtaW4sbXVsdGlwbGUsbXV0ZWQsbmFtZSxub3ZhbGlkYXRlLG9wZW4sb3B0aW11bSxwYXR0ZXJuLHBpbmcscGxhY2Vob2xkZXIscG9zdGVyLHByZWxvYWQscmFkaW9ncm91cCxyZWFkb25seSxyZWZlcnJlcnBvbGljeSxyZWwscmVxdWlyZWQscmV2ZXJzZWQscm93cyxyb3dzcGFuLHNhbmRib3gsc2NvcGUsc2NvcGVkLHNlbGVjdGVkLHNoYXBlLHNpemUsc2l6ZXMsc2xvdCxzcGFuLHNwZWxsY2hlY2ssc3JjLHNyY2RvYyxzcmNsYW5nLHNyY3NldCxzdGFydCxzdGVwLHN0eWxlLHN1bW1hcnksdGFiaW5kZXgsdGFyZ2V0LHRpdGxlLHRyYW5zbGF0ZSx0eXBlLHVzZW1hcCx2YWx1ZSx3aWR0aCx3cmFwYFxuKTtcbmNvbnN0IGlzS25vd25TdmdBdHRyID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoXG4gIGB4bWxucyxhY2NlbnQtaGVpZ2h0LGFjY3VtdWxhdGUsYWRkaXRpdmUsYWxpZ25tZW50LWJhc2VsaW5lLGFscGhhYmV0aWMsYW1wbGl0dWRlLGFyYWJpYy1mb3JtLGFzY2VudCxhdHRyaWJ1dGVOYW1lLGF0dHJpYnV0ZVR5cGUsYXppbXV0aCxiYXNlRnJlcXVlbmN5LGJhc2VsaW5lLXNoaWZ0LGJhc2VQcm9maWxlLGJib3gsYmVnaW4sYmlhcyxieSxjYWxjTW9kZSxjYXAtaGVpZ2h0LGNsYXNzLGNsaXAsY2xpcFBhdGhVbml0cyxjbGlwLXBhdGgsY2xpcC1ydWxlLGNvbG9yLGNvbG9yLWludGVycG9sYXRpb24sY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzLGNvbG9yLXByb2ZpbGUsY29sb3ItcmVuZGVyaW5nLGNvbnRlbnRTY3JpcHRUeXBlLGNvbnRlbnRTdHlsZVR5cGUsY3Jvc3NvcmlnaW4sY3Vyc29yLGN4LGN5LGQsZGVjZWxlcmF0ZSxkZXNjZW50LGRpZmZ1c2VDb25zdGFudCxkaXJlY3Rpb24sZGlzcGxheSxkaXZpc29yLGRvbWluYW50LWJhc2VsaW5lLGR1cixkeCxkeSxlZGdlTW9kZSxlbGV2YXRpb24sZW5hYmxlLWJhY2tncm91bmQsZW5kLGV4cG9uZW50LGZpbGwsZmlsbC1vcGFjaXR5LGZpbGwtcnVsZSxmaWx0ZXIsZmlsdGVyUmVzLGZpbHRlclVuaXRzLGZsb29kLWNvbG9yLGZsb29kLW9wYWNpdHksZm9udC1mYW1pbHksZm9udC1zaXplLGZvbnQtc2l6ZS1hZGp1c3QsZm9udC1zdHJldGNoLGZvbnQtc3R5bGUsZm9udC12YXJpYW50LGZvbnQtd2VpZ2h0LGZvcm1hdCxmcm9tLGZyLGZ4LGZ5LGcxLGcyLGdseXBoLW5hbWUsZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCxnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCxnbHlwaFJlZixncmFkaWVudFRyYW5zZm9ybSxncmFkaWVudFVuaXRzLGhhbmdpbmcsaGVpZ2h0LGhyZWYsaHJlZmxhbmcsaG9yaXotYWR2LXgsaG9yaXotb3JpZ2luLXgsaWQsaWRlb2dyYXBoaWMsaW1hZ2UtcmVuZGVyaW5nLGluLGluMixpbnRlcmNlcHQsayxrMSxrMixrMyxrNCxrZXJuZWxNYXRyaXgsa2VybmVsVW5pdExlbmd0aCxrZXJuaW5nLGtleVBvaW50cyxrZXlTcGxpbmVzLGtleVRpbWVzLGxhbmcsbGVuZ3RoQWRqdXN0LGxldHRlci1zcGFjaW5nLGxpZ2h0aW5nLWNvbG9yLGxpbWl0aW5nQ29uZUFuZ2xlLGxvY2FsLG1hcmtlci1lbmQsbWFya2VyLW1pZCxtYXJrZXItc3RhcnQsbWFya2VySGVpZ2h0LG1hcmtlclVuaXRzLG1hcmtlcldpZHRoLG1hc2ssbWFza0NvbnRlbnRVbml0cyxtYXNrVW5pdHMsbWF0aGVtYXRpY2FsLG1heCxtZWRpYSxtZXRob2QsbWluLG1vZGUsbmFtZSxudW1PY3RhdmVzLG9mZnNldCxvcGFjaXR5LG9wZXJhdG9yLG9yZGVyLG9yaWVudCxvcmllbnRhdGlvbixvcmlnaW4sb3ZlcmZsb3csb3ZlcmxpbmUtcG9zaXRpb24sb3ZlcmxpbmUtdGhpY2tuZXNzLHBhbm9zZS0xLHBhaW50LW9yZGVyLHBhdGgscGF0aExlbmd0aCxwYXR0ZXJuQ29udGVudFVuaXRzLHBhdHRlcm5UcmFuc2Zvcm0scGF0dGVyblVuaXRzLHBpbmcscG9pbnRlci1ldmVudHMscG9pbnRzLHBvaW50c0F0WCxwb2ludHNBdFkscG9pbnRzQXRaLHByZXNlcnZlQWxwaGEscHJlc2VydmVBc3BlY3RSYXRpbyxwcmltaXRpdmVVbml0cyxyLHJhZGl1cyxyZWZlcnJlclBvbGljeSxyZWZYLHJlZlkscmVsLHJlbmRlcmluZy1pbnRlbnQscmVwZWF0Q291bnQscmVwZWF0RHVyLHJlcXVpcmVkRXh0ZW5zaW9ucyxyZXF1aXJlZEZlYXR1cmVzLHJlc3RhcnQscmVzdWx0LHJvdGF0ZSxyeCxyeSxzY2FsZSxzZWVkLHNoYXBlLXJlbmRlcmluZyxzbG9wZSxzcGFjaW5nLHNwZWN1bGFyQ29uc3RhbnQsc3BlY3VsYXJFeHBvbmVudCxzcGVlZCxzcHJlYWRNZXRob2Qsc3RhcnRPZmZzZXQsc3RkRGV2aWF0aW9uLHN0ZW1oLHN0ZW12LHN0aXRjaFRpbGVzLHN0b3AtY29sb3Isc3RvcC1vcGFjaXR5LHN0cmlrZXRocm91Z2gtcG9zaXRpb24sc3RyaWtldGhyb3VnaC10aGlja25lc3Msc3RyaW5nLHN0cm9rZSxzdHJva2UtZGFzaGFycmF5LHN0cm9rZS1kYXNob2Zmc2V0LHN0cm9rZS1saW5lY2FwLHN0cm9rZS1saW5lam9pbixzdHJva2UtbWl0ZXJsaW1pdCxzdHJva2Utb3BhY2l0eSxzdHJva2Utd2lkdGgsc3R5bGUsc3VyZmFjZVNjYWxlLHN5c3RlbUxhbmd1YWdlLHRhYmluZGV4LHRhYmxlVmFsdWVzLHRhcmdldCx0YXJnZXRYLHRhcmdldFksdGV4dC1hbmNob3IsdGV4dC1kZWNvcmF0aW9uLHRleHQtcmVuZGVyaW5nLHRleHRMZW5ndGgsdG8sdHJhbnNmb3JtLHRyYW5zZm9ybS1vcmlnaW4sdHlwZSx1MSx1Mix1bmRlcmxpbmUtcG9zaXRpb24sdW5kZXJsaW5lLXRoaWNrbmVzcyx1bmljb2RlLHVuaWNvZGUtYmlkaSx1bmljb2RlLXJhbmdlLHVuaXRzLXBlci1lbSx2LWFscGhhYmV0aWMsdi1oYW5naW5nLHYtaWRlb2dyYXBoaWMsdi1tYXRoZW1hdGljYWwsdmFsdWVzLHZlY3Rvci1lZmZlY3QsdmVyc2lvbix2ZXJ0LWFkdi15LHZlcnQtb3JpZ2luLXgsdmVydC1vcmlnaW4teSx2aWV3Qm94LHZpZXdUYXJnZXQsdmlzaWJpbGl0eSx3aWR0aCx3aWR0aHMsd29yZC1zcGFjaW5nLHdyaXRpbmctbW9kZSx4LHgtaGVpZ2h0LHgxLHgyLHhDaGFubmVsU2VsZWN0b3IseGxpbms6YWN0dWF0ZSx4bGluazphcmNyb2xlLHhsaW5rOmhyZWYseGxpbms6cm9sZSx4bGluazpzaG93LHhsaW5rOnRpdGxlLHhsaW5rOnR5cGUseG1sbnM6eGxpbmsseG1sOmJhc2UseG1sOmxhbmcseG1sOnNwYWNlLHkseTEseTIseUNoYW5uZWxTZWxlY3Rvcix6LHpvb21BbmRQYW5gXG4pO1xuZnVuY3Rpb24gaXNSZW5kZXJhYmxlQXR0clZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB0eXBlID09PSBcInN0cmluZ1wiIHx8IHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJib29sZWFuXCI7XG59XG5cbmNvbnN0IGNzc1Zhck5hbWVFc2NhcGVTeW1ib2xzUkUgPSAvWyAhXCIjJCUmJygpKissLi86Ozw9Pj9AW1xcXFxcXF1eYHt8fX5dL2c7XG5mdW5jdGlvbiBnZXRFc2NhcGVkQ3NzVmFyTmFtZShrZXksIGRvdWJsZUVzY2FwZSkge1xuICByZXR1cm4ga2V5LnJlcGxhY2UoXG4gICAgY3NzVmFyTmFtZUVzY2FwZVN5bWJvbHNSRSxcbiAgICAocykgPT4gYFxcXFwke3N9YFxuICApO1xufVxuXG5mdW5jdGlvbiBsb29zZUNvbXBhcmVBcnJheXMoYSwgYikge1xuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gIGxldCBlcXVhbCA9IHRydWU7XG4gIGZvciAobGV0IGkgPSAwOyBlcXVhbCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgIGVxdWFsID0gbG9vc2VFcXVhbChhW2ldLCBiW2ldKTtcbiAgfVxuICByZXR1cm4gZXF1YWw7XG59XG5mdW5jdGlvbiBsb29zZUVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuICBsZXQgYVZhbGlkVHlwZSA9IGlzRGF0ZShhKTtcbiAgbGV0IGJWYWxpZFR5cGUgPSBpc0RhdGUoYik7XG4gIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcbiAgICByZXR1cm4gYVZhbGlkVHlwZSAmJiBiVmFsaWRUeXBlID8gYS5nZXRUaW1lKCkgPT09IGIuZ2V0VGltZSgpIDogZmFsc2U7XG4gIH1cbiAgYVZhbGlkVHlwZSA9IGlzU3ltYm9sKGEpO1xuICBiVmFsaWRUeXBlID0gaXNTeW1ib2woYik7XG4gIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgfVxuICBhVmFsaWRUeXBlID0gaXNBcnJheShhKTtcbiAgYlZhbGlkVHlwZSA9IGlzQXJyYXkoYik7XG4gIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcbiAgICByZXR1cm4gYVZhbGlkVHlwZSAmJiBiVmFsaWRUeXBlID8gbG9vc2VDb21wYXJlQXJyYXlzKGEsIGIpIDogZmFsc2U7XG4gIH1cbiAgYVZhbGlkVHlwZSA9IGlzT2JqZWN0KGEpO1xuICBiVmFsaWRUeXBlID0gaXNPYmplY3QoYik7XG4gIGlmIChhVmFsaWRUeXBlIHx8IGJWYWxpZFR5cGUpIHtcbiAgICBpZiAoIWFWYWxpZFR5cGUgfHwgIWJWYWxpZFR5cGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgYUtleXNDb3VudCA9IE9iamVjdC5rZXlzKGEpLmxlbmd0aDtcbiAgICBjb25zdCBiS2V5c0NvdW50ID0gT2JqZWN0LmtleXMoYikubGVuZ3RoO1xuICAgIGlmIChhS2V5c0NvdW50ICE9PSBiS2V5c0NvdW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIGEpIHtcbiAgICAgIGNvbnN0IGFIYXNLZXkgPSBhLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICBjb25zdCBiSGFzS2V5ID0gYi5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgICAgaWYgKGFIYXNLZXkgJiYgIWJIYXNLZXkgfHwgIWFIYXNLZXkgJiYgYkhhc0tleSB8fCAhbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XG59XG5mdW5jdGlvbiBsb29zZUluZGV4T2YoYXJyLCB2YWwpIHtcbiAgcmV0dXJuIGFyci5maW5kSW5kZXgoKGl0ZW0pID0+IGxvb3NlRXF1YWwoaXRlbSwgdmFsKSk7XG59XG5cbmNvbnN0IGlzUmVmJDEgPSAodmFsKSA9PiB7XG4gIHJldHVybiAhISh2YWwgJiYgdmFsW1wiX192X2lzUmVmXCJdID09PSB0cnVlKTtcbn07XG5jb25zdCB0b0Rpc3BsYXlTdHJpbmcgPSAodmFsKSA9PiB7XG4gIHJldHVybiBpc1N0cmluZyh2YWwpID8gdmFsIDogdmFsID09IG51bGwgPyBcIlwiIDogaXNBcnJheSh2YWwpIHx8IGlzT2JqZWN0KHZhbCkgJiYgKHZhbC50b1N0cmluZyA9PT0gb2JqZWN0VG9TdHJpbmcgfHwgIWlzRnVuY3Rpb24odmFsLnRvU3RyaW5nKSkgPyBpc1JlZiQxKHZhbCkgPyB0b0Rpc3BsYXlTdHJpbmcodmFsLnZhbHVlKSA6IEpTT04uc3RyaW5naWZ5KHZhbCwgcmVwbGFjZXIsIDIpIDogU3RyaW5nKHZhbCk7XG59O1xuY29uc3QgcmVwbGFjZXIgPSAoX2tleSwgdmFsKSA9PiB7XG4gIGlmIChpc1JlZiQxKHZhbCkpIHtcbiAgICByZXR1cm4gcmVwbGFjZXIoX2tleSwgdmFsLnZhbHVlKTtcbiAgfSBlbHNlIGlmIChpc01hcCh2YWwpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFtgTWFwKCR7dmFsLnNpemV9KWBdOiBbLi4udmFsLmVudHJpZXMoKV0ucmVkdWNlKFxuICAgICAgICAoZW50cmllcywgW2tleSwgdmFsMl0sIGkpID0+IHtcbiAgICAgICAgICBlbnRyaWVzW3N0cmluZ2lmeVN5bWJvbChrZXksIGkpICsgXCIgPT5cIl0gPSB2YWwyO1xuICAgICAgICAgIHJldHVybiBlbnRyaWVzO1xuICAgICAgICB9LFxuICAgICAgICB7fVxuICAgICAgKVxuICAgIH07XG4gIH0gZWxzZSBpZiAoaXNTZXQodmFsKSkge1xuICAgIHJldHVybiB7XG4gICAgICBbYFNldCgke3ZhbC5zaXplfSlgXTogWy4uLnZhbC52YWx1ZXMoKV0ubWFwKCh2KSA9PiBzdHJpbmdpZnlTeW1ib2wodikpXG4gICAgfTtcbiAgfSBlbHNlIGlmIChpc1N5bWJvbCh2YWwpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeVN5bWJvbCh2YWwpO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkgJiYgIWlzQXJyYXkodmFsKSAmJiAhaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWwpO1xuICB9XG4gIHJldHVybiB2YWw7XG59O1xuY29uc3Qgc3RyaW5naWZ5U3ltYm9sID0gKHYsIGkgPSBcIlwiKSA9PiB7XG4gIHZhciBfYTtcbiAgcmV0dXJuIChcbiAgICAvLyBTeW1ib2wuZGVzY3JpcHRpb24gaW4gZXMyMDE5KyBzbyB3ZSBuZWVkIHRvIGNhc3QgaGVyZSB0byBwYXNzXG4gICAgLy8gdGhlIGxpYjogZXMyMDE2IGNoZWNrXG4gICAgaXNTeW1ib2wodikgPyBgU3ltYm9sKCR7KF9hID0gdi5kZXNjcmlwdGlvbikgIT0gbnVsbCA/IF9hIDogaX0pYCA6IHZcbiAgKTtcbn07XG5cbmZ1bmN0aW9uIHdhcm4kMihtc2csIC4uLmFyZ3MpIHtcbiAgY29uc29sZS53YXJuKGBbVnVlIHdhcm5dICR7bXNnfWAsIC4uLmFyZ3MpO1xufVxuXG5sZXQgYWN0aXZlRWZmZWN0U2NvcGU7XG5jbGFzcyBFZmZlY3RTY29wZSB7XG4gIGNvbnN0cnVjdG9yKGRldGFjaGVkID0gZmFsc2UpIHtcbiAgICB0aGlzLmRldGFjaGVkID0gZGV0YWNoZWQ7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWwgdHJhY2sgYG9uYCBjYWxscywgYWxsb3cgYG9uYCBjYWxsIG11bHRpcGxlIHRpbWVzXG4gICAgICovXG4gICAgdGhpcy5fb24gPSAwO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZWZmZWN0cyA9IFtdO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuY2xlYW51cHMgPSBbXTtcbiAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgIHRoaXMucGFyZW50ID0gYWN0aXZlRWZmZWN0U2NvcGU7XG4gICAgaWYgKCFkZXRhY2hlZCAmJiBhY3RpdmVFZmZlY3RTY29wZSkge1xuICAgICAgdGhpcy5pbmRleCA9IChhY3RpdmVFZmZlY3RTY29wZS5zY29wZXMgfHwgKGFjdGl2ZUVmZmVjdFNjb3BlLnNjb3BlcyA9IFtdKSkucHVzaChcbiAgICAgICAgdGhpc1xuICAgICAgKSAtIDE7XG4gICAgfVxuICB9XG4gIGdldCBhY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgfVxuICBwYXVzZSgpIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gICAgICBsZXQgaSwgbDtcbiAgICAgIGlmICh0aGlzLnNjb3Blcykge1xuICAgICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5zY29wZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5zY29wZXNbaV0ucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuZWZmZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5lZmZlY3RzW2ldLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXN1bWVzIHRoZSBlZmZlY3Qgc2NvcGUsIGluY2x1ZGluZyBhbGwgY2hpbGQgc2NvcGVzIGFuZCBlZmZlY3RzLlxuICAgKi9cbiAgcmVzdW1lKCkge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIGlmICh0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgICBsZXQgaSwgbDtcbiAgICAgICAgaWYgKHRoaXMuc2NvcGVzKSB7XG4gICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuc2NvcGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5zY29wZXNbaV0ucmVzdW1lKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmVmZmVjdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5lZmZlY3RzW2ldLnJlc3VtZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJ1bihmbikge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRFZmZlY3RTY29wZSA9IGFjdGl2ZUVmZmVjdFNjb3BlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUgPSB0aGlzO1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gY3VycmVudEVmZmVjdFNjb3BlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDIoYGNhbm5vdCBydW4gYW4gaW5hY3RpdmUgZWZmZWN0IHNjb3BlLmApO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gbm9uLWRldGFjaGVkIHNjb3Blc1xuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG9uKCkge1xuICAgIGlmICgrK3RoaXMuX29uID09PSAxKSB7XG4gICAgICB0aGlzLnByZXZTY29wZSA9IGFjdGl2ZUVmZmVjdFNjb3BlO1xuICAgICAgYWN0aXZlRWZmZWN0U2NvcGUgPSB0aGlzO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgb24gbm9uLWRldGFjaGVkIHNjb3Blc1xuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG9mZigpIHtcbiAgICBpZiAodGhpcy5fb24gPiAwICYmIC0tdGhpcy5fb24gPT09IDApIHtcbiAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gdGhpcy5wcmV2U2NvcGU7XG4gICAgICB0aGlzLnByZXZTY29wZSA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgc3RvcChmcm9tUGFyZW50KSB7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICBsZXQgaSwgbDtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmVmZmVjdHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZWZmZWN0c1tpXS5zdG9wKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmVmZmVjdHMubGVuZ3RoID0gMDtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmNsZWFudXBzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0aGlzLmNsZWFudXBzW2ldKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmNsZWFudXBzLmxlbmd0aCA9IDA7XG4gICAgICBpZiAodGhpcy5zY29wZXMpIHtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuc2NvcGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIHRoaXMuc2NvcGVzW2ldLnN0b3AodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY29wZXMubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5kZXRhY2hlZCAmJiB0aGlzLnBhcmVudCAmJiAhZnJvbVBhcmVudCkge1xuICAgICAgICBjb25zdCBsYXN0ID0gdGhpcy5wYXJlbnQuc2NvcGVzLnBvcCgpO1xuICAgICAgICBpZiAobGFzdCAmJiBsYXN0ICE9PSB0aGlzKSB7XG4gICAgICAgICAgdGhpcy5wYXJlbnQuc2NvcGVzW3RoaXMuaW5kZXhdID0gbGFzdDtcbiAgICAgICAgICBsYXN0LmluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5wYXJlbnQgPSB2b2lkIDA7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBlZmZlY3RTY29wZShkZXRhY2hlZCkge1xuICByZXR1cm4gbmV3IEVmZmVjdFNjb3BlKGRldGFjaGVkKTtcbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY29wZSgpIHtcbiAgcmV0dXJuIGFjdGl2ZUVmZmVjdFNjb3BlO1xufVxuZnVuY3Rpb24gb25TY29wZURpc3Bvc2UoZm4sIGZhaWxTaWxlbnRseSA9IGZhbHNlKSB7XG4gIGlmIChhY3RpdmVFZmZlY3RTY29wZSkge1xuICAgIGFjdGl2ZUVmZmVjdFNjb3BlLmNsZWFudXBzLnB1c2goZm4pO1xuICB9IGVsc2UgaWYgKCFmYWlsU2lsZW50bHkpIHtcbiAgICB3YXJuJDIoXG4gICAgICBgb25TY29wZURpc3Bvc2UoKSBpcyBjYWxsZWQgd2hlbiB0aGVyZSBpcyBubyBhY3RpdmUgZWZmZWN0IHNjb3BlIHRvIGJlIGFzc29jaWF0ZWQgd2l0aC5gXG4gICAgKTtcbiAgfVxufVxuXG5sZXQgYWN0aXZlU3ViO1xuY29uc3QgcGF1c2VkUXVldWVFZmZlY3RzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCk7XG5jbGFzcyBSZWFjdGl2ZUVmZmVjdCB7XG4gIGNvbnN0cnVjdG9yKGZuKSB7XG4gICAgdGhpcy5mbiA9IGZuO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZGVwcyA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLmRlcHNUYWlsID0gdm9pZCAwO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZmxhZ3MgPSAxIHwgNDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLm5leHQgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5jbGVhbnVwID0gdm9pZCAwO1xuICAgIHRoaXMuc2NoZWR1bGVyID0gdm9pZCAwO1xuICAgIGlmIChhY3RpdmVFZmZlY3RTY29wZSAmJiBhY3RpdmVFZmZlY3RTY29wZS5hY3RpdmUpIHtcbiAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlLmVmZmVjdHMucHVzaCh0aGlzKTtcbiAgICB9XG4gIH1cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5mbGFncyB8PSA2NDtcbiAgfVxuICByZXN1bWUoKSB7XG4gICAgaWYgKHRoaXMuZmxhZ3MgJiA2NCkge1xuICAgICAgdGhpcy5mbGFncyAmPSAtNjU7XG4gICAgICBpZiAocGF1c2VkUXVldWVFZmZlY3RzLmhhcyh0aGlzKSkge1xuICAgICAgICBwYXVzZWRRdWV1ZUVmZmVjdHMuZGVsZXRlKHRoaXMpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbm90aWZ5KCkge1xuICAgIGlmICh0aGlzLmZsYWdzICYgMiAmJiAhKHRoaXMuZmxhZ3MgJiAzMikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCEodGhpcy5mbGFncyAmIDgpKSB7XG4gICAgICBiYXRjaCh0aGlzKTtcbiAgICB9XG4gIH1cbiAgcnVuKCkge1xuICAgIGlmICghKHRoaXMuZmxhZ3MgJiAxKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZm4oKTtcbiAgICB9XG4gICAgdGhpcy5mbGFncyB8PSAyO1xuICAgIGNsZWFudXBFZmZlY3QodGhpcyk7XG4gICAgcHJlcGFyZURlcHModGhpcyk7XG4gICAgY29uc3QgcHJldkVmZmVjdCA9IGFjdGl2ZVN1YjtcbiAgICBjb25zdCBwcmV2U2hvdWxkVHJhY2sgPSBzaG91bGRUcmFjaztcbiAgICBhY3RpdmVTdWIgPSB0aGlzO1xuICAgIHNob3VsZFRyYWNrID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMuZm4oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKGFjdGl2ZVN1YiAhPT0gdGhpcykge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgXCJBY3RpdmUgZWZmZWN0IHdhcyBub3QgcmVzdG9yZWQgY29ycmVjdGx5IC0gdGhpcyBpcyBsaWtlbHkgYSBWdWUgaW50ZXJuYWwgYnVnLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjbGVhbnVwRGVwcyh0aGlzKTtcbiAgICAgIGFjdGl2ZVN1YiA9IHByZXZFZmZlY3Q7XG4gICAgICBzaG91bGRUcmFjayA9IHByZXZTaG91bGRUcmFjaztcbiAgICAgIHRoaXMuZmxhZ3MgJj0gLTM7XG4gICAgfVxuICB9XG4gIHN0b3AoKSB7XG4gICAgaWYgKHRoaXMuZmxhZ3MgJiAxKSB7XG4gICAgICBmb3IgKGxldCBsaW5rID0gdGhpcy5kZXBzOyBsaW5rOyBsaW5rID0gbGluay5uZXh0RGVwKSB7XG4gICAgICAgIHJlbW92ZVN1YihsaW5rKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGVwcyA9IHRoaXMuZGVwc1RhaWwgPSB2b2lkIDA7XG4gICAgICBjbGVhbnVwRWZmZWN0KHRoaXMpO1xuICAgICAgdGhpcy5vblN0b3AgJiYgdGhpcy5vblN0b3AoKTtcbiAgICAgIHRoaXMuZmxhZ3MgJj0gLTI7XG4gICAgfVxuICB9XG4gIHRyaWdnZXIoKSB7XG4gICAgaWYgKHRoaXMuZmxhZ3MgJiA2NCkge1xuICAgICAgcGF1c2VkUXVldWVFZmZlY3RzLmFkZCh0aGlzKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2NoZWR1bGVyKSB7XG4gICAgICB0aGlzLnNjaGVkdWxlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJ1bklmRGlydHkoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcnVuSWZEaXJ0eSgpIHtcbiAgICBpZiAoaXNEaXJ0eSh0aGlzKSkge1xuICAgICAgdGhpcy5ydW4oKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGRpcnR5KCkge1xuICAgIHJldHVybiBpc0RpcnR5KHRoaXMpO1xuICB9XG59XG5sZXQgYmF0Y2hEZXB0aCA9IDA7XG5sZXQgYmF0Y2hlZFN1YjtcbmxldCBiYXRjaGVkQ29tcHV0ZWQ7XG5mdW5jdGlvbiBiYXRjaChzdWIsIGlzQ29tcHV0ZWQgPSBmYWxzZSkge1xuICBzdWIuZmxhZ3MgfD0gODtcbiAgaWYgKGlzQ29tcHV0ZWQpIHtcbiAgICBzdWIubmV4dCA9IGJhdGNoZWRDb21wdXRlZDtcbiAgICBiYXRjaGVkQ29tcHV0ZWQgPSBzdWI7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN1Yi5uZXh0ID0gYmF0Y2hlZFN1YjtcbiAgYmF0Y2hlZFN1YiA9IHN1Yjtcbn1cbmZ1bmN0aW9uIHN0YXJ0QmF0Y2goKSB7XG4gIGJhdGNoRGVwdGgrKztcbn1cbmZ1bmN0aW9uIGVuZEJhdGNoKCkge1xuICBpZiAoLS1iYXRjaERlcHRoID4gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoYmF0Y2hlZENvbXB1dGVkKSB7XG4gICAgbGV0IGUgPSBiYXRjaGVkQ29tcHV0ZWQ7XG4gICAgYmF0Y2hlZENvbXB1dGVkID0gdm9pZCAwO1xuICAgIHdoaWxlIChlKSB7XG4gICAgICBjb25zdCBuZXh0ID0gZS5uZXh0O1xuICAgICAgZS5uZXh0ID0gdm9pZCAwO1xuICAgICAgZS5mbGFncyAmPSAtOTtcbiAgICAgIGUgPSBuZXh0O1xuICAgIH1cbiAgfVxuICBsZXQgZXJyb3I7XG4gIHdoaWxlIChiYXRjaGVkU3ViKSB7XG4gICAgbGV0IGUgPSBiYXRjaGVkU3ViO1xuICAgIGJhdGNoZWRTdWIgPSB2b2lkIDA7XG4gICAgd2hpbGUgKGUpIHtcbiAgICAgIGNvbnN0IG5leHQgPSBlLm5leHQ7XG4gICAgICBlLm5leHQgPSB2b2lkIDA7XG4gICAgICBlLmZsYWdzICY9IC05O1xuICAgICAgaWYgKGUuZmxhZ3MgJiAxKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgO1xuICAgICAgICAgIGUudHJpZ2dlcigpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZSA9IG5leHQ7XG4gICAgfVxuICB9XG4gIGlmIChlcnJvcikgdGhyb3cgZXJyb3I7XG59XG5mdW5jdGlvbiBwcmVwYXJlRGVwcyhzdWIpIHtcbiAgZm9yIChsZXQgbGluayA9IHN1Yi5kZXBzOyBsaW5rOyBsaW5rID0gbGluay5uZXh0RGVwKSB7XG4gICAgbGluay52ZXJzaW9uID0gLTE7XG4gICAgbGluay5wcmV2QWN0aXZlTGluayA9IGxpbmsuZGVwLmFjdGl2ZUxpbms7XG4gICAgbGluay5kZXAuYWN0aXZlTGluayA9IGxpbms7XG4gIH1cbn1cbmZ1bmN0aW9uIGNsZWFudXBEZXBzKHN1Yikge1xuICBsZXQgaGVhZDtcbiAgbGV0IHRhaWwgPSBzdWIuZGVwc1RhaWw7XG4gIGxldCBsaW5rID0gdGFpbDtcbiAgd2hpbGUgKGxpbmspIHtcbiAgICBjb25zdCBwcmV2ID0gbGluay5wcmV2RGVwO1xuICAgIGlmIChsaW5rLnZlcnNpb24gPT09IC0xKSB7XG4gICAgICBpZiAobGluayA9PT0gdGFpbCkgdGFpbCA9IHByZXY7XG4gICAgICByZW1vdmVTdWIobGluayk7XG4gICAgICByZW1vdmVEZXAobGluayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWQgPSBsaW5rO1xuICAgIH1cbiAgICBsaW5rLmRlcC5hY3RpdmVMaW5rID0gbGluay5wcmV2QWN0aXZlTGluaztcbiAgICBsaW5rLnByZXZBY3RpdmVMaW5rID0gdm9pZCAwO1xuICAgIGxpbmsgPSBwcmV2O1xuICB9XG4gIHN1Yi5kZXBzID0gaGVhZDtcbiAgc3ViLmRlcHNUYWlsID0gdGFpbDtcbn1cbmZ1bmN0aW9uIGlzRGlydHkoc3ViKSB7XG4gIGZvciAobGV0IGxpbmsgPSBzdWIuZGVwczsgbGluazsgbGluayA9IGxpbmsubmV4dERlcCkge1xuICAgIGlmIChsaW5rLmRlcC52ZXJzaW9uICE9PSBsaW5rLnZlcnNpb24gfHwgbGluay5kZXAuY29tcHV0ZWQgJiYgKHJlZnJlc2hDb21wdXRlZChsaW5rLmRlcC5jb21wdXRlZCkgfHwgbGluay5kZXAudmVyc2lvbiAhPT0gbGluay52ZXJzaW9uKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChzdWIuX2RpcnR5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gcmVmcmVzaENvbXB1dGVkKGNvbXB1dGVkKSB7XG4gIGlmIChjb21wdXRlZC5mbGFncyAmIDQgJiYgIShjb21wdXRlZC5mbGFncyAmIDE2KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb21wdXRlZC5mbGFncyAmPSAtMTc7XG4gIGlmIChjb21wdXRlZC5nbG9iYWxWZXJzaW9uID09PSBnbG9iYWxWZXJzaW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbXB1dGVkLmdsb2JhbFZlcnNpb24gPSBnbG9iYWxWZXJzaW9uO1xuICBpZiAoIWNvbXB1dGVkLmlzU1NSICYmIGNvbXB1dGVkLmZsYWdzICYgMTI4ICYmICghY29tcHV0ZWQuZGVwcyAmJiAhY29tcHV0ZWQuX2RpcnR5IHx8ICFpc0RpcnR5KGNvbXB1dGVkKSkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29tcHV0ZWQuZmxhZ3MgfD0gMjtcbiAgY29uc3QgZGVwID0gY29tcHV0ZWQuZGVwO1xuICBjb25zdCBwcmV2U3ViID0gYWN0aXZlU3ViO1xuICBjb25zdCBwcmV2U2hvdWxkVHJhY2sgPSBzaG91bGRUcmFjaztcbiAgYWN0aXZlU3ViID0gY29tcHV0ZWQ7XG4gIHNob3VsZFRyYWNrID0gdHJ1ZTtcbiAgdHJ5IHtcbiAgICBwcmVwYXJlRGVwcyhjb21wdXRlZCk7XG4gICAgY29uc3QgdmFsdWUgPSBjb21wdXRlZC5mbihjb21wdXRlZC5fdmFsdWUpO1xuICAgIGlmIChkZXAudmVyc2lvbiA9PT0gMCB8fCBoYXNDaGFuZ2VkKHZhbHVlLCBjb21wdXRlZC5fdmFsdWUpKSB7XG4gICAgICBjb21wdXRlZC5mbGFncyB8PSAxMjg7XG4gICAgICBjb21wdXRlZC5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgIGRlcC52ZXJzaW9uKys7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZXAudmVyc2lvbisrO1xuICAgIHRocm93IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICBhY3RpdmVTdWIgPSBwcmV2U3ViO1xuICAgIHNob3VsZFRyYWNrID0gcHJldlNob3VsZFRyYWNrO1xuICAgIGNsZWFudXBEZXBzKGNvbXB1dGVkKTtcbiAgICBjb21wdXRlZC5mbGFncyAmPSAtMztcbiAgfVxufVxuZnVuY3Rpb24gcmVtb3ZlU3ViKGxpbmssIHNvZnQgPSBmYWxzZSkge1xuICBjb25zdCB7IGRlcCwgcHJldlN1YiwgbmV4dFN1YiB9ID0gbGluaztcbiAgaWYgKHByZXZTdWIpIHtcbiAgICBwcmV2U3ViLm5leHRTdWIgPSBuZXh0U3ViO1xuICAgIGxpbmsucHJldlN1YiA9IHZvaWQgMDtcbiAgfVxuICBpZiAobmV4dFN1Yikge1xuICAgIG5leHRTdWIucHJldlN1YiA9IHByZXZTdWI7XG4gICAgbGluay5uZXh0U3ViID0gdm9pZCAwO1xuICB9XG4gIGlmIChkZXAuc3Vic0hlYWQgPT09IGxpbmspIHtcbiAgICBkZXAuc3Vic0hlYWQgPSBuZXh0U3ViO1xuICB9XG4gIGlmIChkZXAuc3VicyA9PT0gbGluaykge1xuICAgIGRlcC5zdWJzID0gcHJldlN1YjtcbiAgICBpZiAoIXByZXZTdWIgJiYgZGVwLmNvbXB1dGVkKSB7XG4gICAgICBkZXAuY29tcHV0ZWQuZmxhZ3MgJj0gLTU7XG4gICAgICBmb3IgKGxldCBsID0gZGVwLmNvbXB1dGVkLmRlcHM7IGw7IGwgPSBsLm5leHREZXApIHtcbiAgICAgICAgcmVtb3ZlU3ViKGwsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIXNvZnQgJiYgIS0tZGVwLnNjICYmIGRlcC5tYXApIHtcbiAgICBkZXAubWFwLmRlbGV0ZShkZXAua2V5KTtcbiAgfVxufVxuZnVuY3Rpb24gcmVtb3ZlRGVwKGxpbmspIHtcbiAgY29uc3QgeyBwcmV2RGVwLCBuZXh0RGVwIH0gPSBsaW5rO1xuICBpZiAocHJldkRlcCkge1xuICAgIHByZXZEZXAubmV4dERlcCA9IG5leHREZXA7XG4gICAgbGluay5wcmV2RGVwID0gdm9pZCAwO1xuICB9XG4gIGlmIChuZXh0RGVwKSB7XG4gICAgbmV4dERlcC5wcmV2RGVwID0gcHJldkRlcDtcbiAgICBsaW5rLm5leHREZXAgPSB2b2lkIDA7XG4gIH1cbn1cbmZ1bmN0aW9uIGVmZmVjdChmbiwgb3B0aW9ucykge1xuICBpZiAoZm4uZWZmZWN0IGluc3RhbmNlb2YgUmVhY3RpdmVFZmZlY3QpIHtcbiAgICBmbiA9IGZuLmVmZmVjdC5mbjtcbiAgfVxuICBjb25zdCBlID0gbmV3IFJlYWN0aXZlRWZmZWN0KGZuKTtcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBleHRlbmQoZSwgb3B0aW9ucyk7XG4gIH1cbiAgdHJ5IHtcbiAgICBlLnJ1bigpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlLnN0b3AoKTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbiAgY29uc3QgcnVubmVyID0gZS5ydW4uYmluZChlKTtcbiAgcnVubmVyLmVmZmVjdCA9IGU7XG4gIHJldHVybiBydW5uZXI7XG59XG5mdW5jdGlvbiBzdG9wKHJ1bm5lcikge1xuICBydW5uZXIuZWZmZWN0LnN0b3AoKTtcbn1cbmxldCBzaG91bGRUcmFjayA9IHRydWU7XG5jb25zdCB0cmFja1N0YWNrID0gW107XG5mdW5jdGlvbiBwYXVzZVRyYWNraW5nKCkge1xuICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xuICBzaG91bGRUcmFjayA9IGZhbHNlO1xufVxuZnVuY3Rpb24gcmVzZXRUcmFja2luZygpIHtcbiAgY29uc3QgbGFzdCA9IHRyYWNrU3RhY2sucG9wKCk7XG4gIHNob3VsZFRyYWNrID0gbGFzdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IGxhc3Q7XG59XG5mdW5jdGlvbiBjbGVhbnVwRWZmZWN0KGUpIHtcbiAgY29uc3QgeyBjbGVhbnVwIH0gPSBlO1xuICBlLmNsZWFudXAgPSB2b2lkIDA7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgY29uc3QgcHJldlN1YiA9IGFjdGl2ZVN1YjtcbiAgICBhY3RpdmVTdWIgPSB2b2lkIDA7XG4gICAgdHJ5IHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgYWN0aXZlU3ViID0gcHJldlN1YjtcbiAgICB9XG4gIH1cbn1cblxubGV0IGdsb2JhbFZlcnNpb24gPSAwO1xuY2xhc3MgTGluayB7XG4gIGNvbnN0cnVjdG9yKHN1YiwgZGVwKSB7XG4gICAgdGhpcy5zdWIgPSBzdWI7XG4gICAgdGhpcy5kZXAgPSBkZXA7XG4gICAgdGhpcy52ZXJzaW9uID0gZGVwLnZlcnNpb247XG4gICAgdGhpcy5uZXh0RGVwID0gdGhpcy5wcmV2RGVwID0gdGhpcy5uZXh0U3ViID0gdGhpcy5wcmV2U3ViID0gdGhpcy5wcmV2QWN0aXZlTGluayA9IHZvaWQgMDtcbiAgfVxufVxuY2xhc3MgRGVwIHtcbiAgY29uc3RydWN0b3IoY29tcHV0ZWQpIHtcbiAgICB0aGlzLmNvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgdGhpcy52ZXJzaW9uID0gMDtcbiAgICAvKipcbiAgICAgKiBMaW5rIGJldHdlZW4gdGhpcyBkZXAgYW5kIHRoZSBjdXJyZW50IGFjdGl2ZSBlZmZlY3RcbiAgICAgKi9cbiAgICB0aGlzLmFjdGl2ZUxpbmsgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogRG91Ymx5IGxpbmtlZCBsaXN0IHJlcHJlc2VudGluZyB0aGUgc3Vic2NyaWJpbmcgZWZmZWN0cyAodGFpbClcbiAgICAgKi9cbiAgICB0aGlzLnN1YnMgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogRm9yIG9iamVjdCBwcm9wZXJ0eSBkZXBzIGNsZWFudXBcbiAgICAgKi9cbiAgICB0aGlzLm1hcCA9IHZvaWQgMDtcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmVyIGNvdW50ZXJcbiAgICAgKi9cbiAgICB0aGlzLnNjID0gMDtcbiAgICB7XG4gICAgICB0aGlzLnN1YnNIZWFkID0gdm9pZCAwO1xuICAgIH1cbiAgfVxuICB0cmFjayhkZWJ1Z0luZm8pIHtcbiAgICBpZiAoIWFjdGl2ZVN1YiB8fCAhc2hvdWxkVHJhY2sgfHwgYWN0aXZlU3ViID09PSB0aGlzLmNvbXB1dGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBsaW5rID0gdGhpcy5hY3RpdmVMaW5rO1xuICAgIGlmIChsaW5rID09PSB2b2lkIDAgfHwgbGluay5zdWIgIT09IGFjdGl2ZVN1Yikge1xuICAgICAgbGluayA9IHRoaXMuYWN0aXZlTGluayA9IG5ldyBMaW5rKGFjdGl2ZVN1YiwgdGhpcyk7XG4gICAgICBpZiAoIWFjdGl2ZVN1Yi5kZXBzKSB7XG4gICAgICAgIGFjdGl2ZVN1Yi5kZXBzID0gYWN0aXZlU3ViLmRlcHNUYWlsID0gbGluaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpbmsucHJldkRlcCA9IGFjdGl2ZVN1Yi5kZXBzVGFpbDtcbiAgICAgICAgYWN0aXZlU3ViLmRlcHNUYWlsLm5leHREZXAgPSBsaW5rO1xuICAgICAgICBhY3RpdmVTdWIuZGVwc1RhaWwgPSBsaW5rO1xuICAgICAgfVxuICAgICAgYWRkU3ViKGxpbmspO1xuICAgIH0gZWxzZSBpZiAobGluay52ZXJzaW9uID09PSAtMSkge1xuICAgICAgbGluay52ZXJzaW9uID0gdGhpcy52ZXJzaW9uO1xuICAgICAgaWYgKGxpbmsubmV4dERlcCkge1xuICAgICAgICBjb25zdCBuZXh0ID0gbGluay5uZXh0RGVwO1xuICAgICAgICBuZXh0LnByZXZEZXAgPSBsaW5rLnByZXZEZXA7XG4gICAgICAgIGlmIChsaW5rLnByZXZEZXApIHtcbiAgICAgICAgICBsaW5rLnByZXZEZXAubmV4dERlcCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgbGluay5wcmV2RGVwID0gYWN0aXZlU3ViLmRlcHNUYWlsO1xuICAgICAgICBsaW5rLm5leHREZXAgPSB2b2lkIDA7XG4gICAgICAgIGFjdGl2ZVN1Yi5kZXBzVGFpbC5uZXh0RGVwID0gbGluaztcbiAgICAgICAgYWN0aXZlU3ViLmRlcHNUYWlsID0gbGluaztcbiAgICAgICAgaWYgKGFjdGl2ZVN1Yi5kZXBzID09PSBsaW5rKSB7XG4gICAgICAgICAgYWN0aXZlU3ViLmRlcHMgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhY3RpdmVTdWIub25UcmFjaykge1xuICAgICAgYWN0aXZlU3ViLm9uVHJhY2soXG4gICAgICAgIGV4dGVuZChcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlZmZlY3Q6IGFjdGl2ZVN1YlxuICAgICAgICAgIH0sXG4gICAgICAgICAgZGVidWdJbmZvXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBsaW5rO1xuICB9XG4gIHRyaWdnZXIoZGVidWdJbmZvKSB7XG4gICAgdGhpcy52ZXJzaW9uKys7XG4gICAgZ2xvYmFsVmVyc2lvbisrO1xuICAgIHRoaXMubm90aWZ5KGRlYnVnSW5mbyk7XG4gIH1cbiAgbm90aWZ5KGRlYnVnSW5mbykge1xuICAgIHN0YXJ0QmF0Y2goKTtcbiAgICB0cnkge1xuICAgICAgaWYgKHRydWUpIHtcbiAgICAgICAgZm9yIChsZXQgaGVhZCA9IHRoaXMuc3Vic0hlYWQ7IGhlYWQ7IGhlYWQgPSBoZWFkLm5leHRTdWIpIHtcbiAgICAgICAgICBpZiAoaGVhZC5zdWIub25UcmlnZ2VyICYmICEoaGVhZC5zdWIuZmxhZ3MgJiA4KSkge1xuICAgICAgICAgICAgaGVhZC5zdWIub25UcmlnZ2VyKFxuICAgICAgICAgICAgICBleHRlbmQoXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgZWZmZWN0OiBoZWFkLnN1YlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVidWdJbmZvXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBsaW5rID0gdGhpcy5zdWJzOyBsaW5rOyBsaW5rID0gbGluay5wcmV2U3ViKSB7XG4gICAgICAgIGlmIChsaW5rLnN1Yi5ub3RpZnkoKSkge1xuICAgICAgICAgIDtcbiAgICAgICAgICBsaW5rLnN1Yi5kZXAubm90aWZ5KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgZW5kQmF0Y2goKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGFkZFN1YihsaW5rKSB7XG4gIGxpbmsuZGVwLnNjKys7XG4gIGlmIChsaW5rLnN1Yi5mbGFncyAmIDQpIHtcbiAgICBjb25zdCBjb21wdXRlZCA9IGxpbmsuZGVwLmNvbXB1dGVkO1xuICAgIGlmIChjb21wdXRlZCAmJiAhbGluay5kZXAuc3Vicykge1xuICAgICAgY29tcHV0ZWQuZmxhZ3MgfD0gNCB8IDE2O1xuICAgICAgZm9yIChsZXQgbCA9IGNvbXB1dGVkLmRlcHM7IGw7IGwgPSBsLm5leHREZXApIHtcbiAgICAgICAgYWRkU3ViKGwpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjdXJyZW50VGFpbCA9IGxpbmsuZGVwLnN1YnM7XG4gICAgaWYgKGN1cnJlbnRUYWlsICE9PSBsaW5rKSB7XG4gICAgICBsaW5rLnByZXZTdWIgPSBjdXJyZW50VGFpbDtcbiAgICAgIGlmIChjdXJyZW50VGFpbCkgY3VycmVudFRhaWwubmV4dFN1YiA9IGxpbms7XG4gICAgfVxuICAgIGlmIChsaW5rLmRlcC5zdWJzSGVhZCA9PT0gdm9pZCAwKSB7XG4gICAgICBsaW5rLmRlcC5zdWJzSGVhZCA9IGxpbms7XG4gICAgfVxuICAgIGxpbmsuZGVwLnN1YnMgPSBsaW5rO1xuICB9XG59XG5jb25zdCB0YXJnZXRNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IElURVJBVEVfS0VZID0gU3ltYm9sKFxuICBcIk9iamVjdCBpdGVyYXRlXCIgXG4pO1xuY29uc3QgTUFQX0tFWV9JVEVSQVRFX0tFWSA9IFN5bWJvbChcbiAgXCJNYXAga2V5cyBpdGVyYXRlXCIgXG4pO1xuY29uc3QgQVJSQVlfSVRFUkFURV9LRVkgPSBTeW1ib2woXG4gIFwiQXJyYXkgaXRlcmF0ZVwiIFxuKTtcbmZ1bmN0aW9uIHRyYWNrKHRhcmdldCwgdHlwZSwga2V5KSB7XG4gIGlmIChzaG91bGRUcmFjayAmJiBhY3RpdmVTdWIpIHtcbiAgICBsZXQgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcbiAgICBpZiAoIWRlcHNNYXApIHtcbiAgICAgIHRhcmdldE1hcC5zZXQodGFyZ2V0LCBkZXBzTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSk7XG4gICAgfVxuICAgIGxldCBkZXAgPSBkZXBzTWFwLmdldChrZXkpO1xuICAgIGlmICghZGVwKSB7XG4gICAgICBkZXBzTWFwLnNldChrZXksIGRlcCA9IG5ldyBEZXAoKSk7XG4gICAgICBkZXAubWFwID0gZGVwc01hcDtcbiAgICAgIGRlcC5rZXkgPSBrZXk7XG4gICAgfVxuICAgIHtcbiAgICAgIGRlcC50cmFjayh7XG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgdHlwZSxcbiAgICAgICAga2V5XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHRyaWdnZXIodGFyZ2V0LCB0eXBlLCBrZXksIG5ld1ZhbHVlLCBvbGRWYWx1ZSwgb2xkVGFyZ2V0KSB7XG4gIGNvbnN0IGRlcHNNYXAgPSB0YXJnZXRNYXAuZ2V0KHRhcmdldCk7XG4gIGlmICghZGVwc01hcCkge1xuICAgIGdsb2JhbFZlcnNpb24rKztcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcnVuID0gKGRlcCkgPT4ge1xuICAgIGlmIChkZXApIHtcbiAgICAgIHtcbiAgICAgICAgZGVwLnRyaWdnZXIoe1xuICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICBvbGRWYWx1ZSxcbiAgICAgICAgICBvbGRUYXJnZXRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzdGFydEJhdGNoKCk7XG4gIGlmICh0eXBlID09PSBcImNsZWFyXCIpIHtcbiAgICBkZXBzTWFwLmZvckVhY2gocnVuKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB0YXJnZXRJc0FycmF5ID0gaXNBcnJheSh0YXJnZXQpO1xuICAgIGNvbnN0IGlzQXJyYXlJbmRleCA9IHRhcmdldElzQXJyYXkgJiYgaXNJbnRlZ2VyS2V5KGtleSk7XG4gICAgaWYgKHRhcmdldElzQXJyYXkgJiYga2V5ID09PSBcImxlbmd0aFwiKSB7XG4gICAgICBjb25zdCBuZXdMZW5ndGggPSBOdW1iZXIobmV3VmFsdWUpO1xuICAgICAgZGVwc01hcC5mb3JFYWNoKChkZXAsIGtleTIpID0+IHtcbiAgICAgICAgaWYgKGtleTIgPT09IFwibGVuZ3RoXCIgfHwga2V5MiA9PT0gQVJSQVlfSVRFUkFURV9LRVkgfHwgIWlzU3ltYm9sKGtleTIpICYmIGtleTIgPj0gbmV3TGVuZ3RoKSB7XG4gICAgICAgICAgcnVuKGRlcCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoa2V5ICE9PSB2b2lkIDAgfHwgZGVwc01hcC5oYXModm9pZCAwKSkge1xuICAgICAgICBydW4oZGVwc01hcC5nZXQoa2V5KSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUluZGV4KSB7XG4gICAgICAgIHJ1bihkZXBzTWFwLmdldChBUlJBWV9JVEVSQVRFX0tFWSkpO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJhZGRcIjpcbiAgICAgICAgICBpZiAoIXRhcmdldElzQXJyYXkpIHtcbiAgICAgICAgICAgIHJ1bihkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xuICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgcnVuKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlJbmRleCkge1xuICAgICAgICAgICAgcnVuKGRlcHNNYXAuZ2V0KFwibGVuZ3RoXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJkZWxldGVcIjpcbiAgICAgICAgICBpZiAoIXRhcmdldElzQXJyYXkpIHtcbiAgICAgICAgICAgIHJ1bihkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xuICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgcnVuKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzZXRcIjpcbiAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xuICAgICAgICAgICAgcnVuKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBlbmRCYXRjaCgpO1xufVxuZnVuY3Rpb24gZ2V0RGVwRnJvbVJlYWN0aXZlKG9iamVjdCwga2V5KSB7XG4gIGNvbnN0IGRlcE1hcCA9IHRhcmdldE1hcC5nZXQob2JqZWN0KTtcbiAgcmV0dXJuIGRlcE1hcCAmJiBkZXBNYXAuZ2V0KGtleSk7XG59XG5cbmZ1bmN0aW9uIHJlYWN0aXZlUmVhZEFycmF5KGFycmF5KSB7XG4gIGNvbnN0IHJhdyA9IHRvUmF3KGFycmF5KTtcbiAgaWYgKHJhdyA9PT0gYXJyYXkpIHJldHVybiByYXc7XG4gIHRyYWNrKHJhdywgXCJpdGVyYXRlXCIsIEFSUkFZX0lURVJBVEVfS0VZKTtcbiAgcmV0dXJuIGlzU2hhbGxvdyhhcnJheSkgPyByYXcgOiByYXcubWFwKHRvUmVhY3RpdmUpO1xufVxuZnVuY3Rpb24gc2hhbGxvd1JlYWRBcnJheShhcnIpIHtcbiAgdHJhY2soYXJyID0gdG9SYXcoYXJyKSwgXCJpdGVyYXRlXCIsIEFSUkFZX0lURVJBVEVfS0VZKTtcbiAgcmV0dXJuIGFycjtcbn1cbmNvbnN0IGFycmF5SW5zdHJ1bWVudGF0aW9ucyA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gaXRlcmF0b3IodGhpcywgU3ltYm9sLml0ZXJhdG9yLCB0b1JlYWN0aXZlKTtcbiAgfSxcbiAgY29uY2F0KC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gcmVhY3RpdmVSZWFkQXJyYXkodGhpcykuY29uY2F0KFxuICAgICAgLi4uYXJncy5tYXAoKHgpID0+IGlzQXJyYXkoeCkgPyByZWFjdGl2ZVJlYWRBcnJheSh4KSA6IHgpXG4gICAgKTtcbiAgfSxcbiAgZW50cmllcygpIHtcbiAgICByZXR1cm4gaXRlcmF0b3IodGhpcywgXCJlbnRyaWVzXCIsICh2YWx1ZSkgPT4ge1xuICAgICAgdmFsdWVbMV0gPSB0b1JlYWN0aXZlKHZhbHVlWzFdKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbiAgfSxcbiAgZXZlcnkoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gYXBwbHkodGhpcywgXCJldmVyeVwiLCBmbiwgdGhpc0FyZywgdm9pZCAwLCBhcmd1bWVudHMpO1xuICB9LFxuICBmaWx0ZXIoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gYXBwbHkodGhpcywgXCJmaWx0ZXJcIiwgZm4sIHRoaXNBcmcsICh2KSA9PiB2Lm1hcCh0b1JlYWN0aXZlKSwgYXJndW1lbnRzKTtcbiAgfSxcbiAgZmluZChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBhcHBseSh0aGlzLCBcImZpbmRcIiwgZm4sIHRoaXNBcmcsIHRvUmVhY3RpdmUsIGFyZ3VtZW50cyk7XG4gIH0sXG4gIGZpbmRJbmRleChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBhcHBseSh0aGlzLCBcImZpbmRJbmRleFwiLCBmbiwgdGhpc0FyZywgdm9pZCAwLCBhcmd1bWVudHMpO1xuICB9LFxuICBmaW5kTGFzdChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBhcHBseSh0aGlzLCBcImZpbmRMYXN0XCIsIGZuLCB0aGlzQXJnLCB0b1JlYWN0aXZlLCBhcmd1bWVudHMpO1xuICB9LFxuICBmaW5kTGFzdEluZGV4KGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGFwcGx5KHRoaXMsIFwiZmluZExhc3RJbmRleFwiLCBmbiwgdGhpc0FyZywgdm9pZCAwLCBhcmd1bWVudHMpO1xuICB9LFxuICAvLyBmbGF0LCBmbGF0TWFwIGNvdWxkIGJlbmVmaXQgZnJvbSBBUlJBWV9JVEVSQVRFIGJ1dCBhcmUgbm90IHN0cmFpZ2h0LWZvcndhcmQgdG8gaW1wbGVtZW50XG4gIGZvckVhY2goZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gYXBwbHkodGhpcywgXCJmb3JFYWNoXCIsIGZuLCB0aGlzQXJnLCB2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH0sXG4gIGluY2x1ZGVzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gc2VhcmNoUHJveHkodGhpcywgXCJpbmNsdWRlc1wiLCBhcmdzKTtcbiAgfSxcbiAgaW5kZXhPZiguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHNlYXJjaFByb3h5KHRoaXMsIFwiaW5kZXhPZlwiLCBhcmdzKTtcbiAgfSxcbiAgam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gcmVhY3RpdmVSZWFkQXJyYXkodGhpcykuam9pbihzZXBhcmF0b3IpO1xuICB9LFxuICAvLyBrZXlzKCkgaXRlcmF0b3Igb25seSByZWFkcyBgbGVuZ3RoYCwgbm8gb3B0aW1pc2F0aW9uIHJlcXVpcmVkXG4gIGxhc3RJbmRleE9mKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gc2VhcmNoUHJveHkodGhpcywgXCJsYXN0SW5kZXhPZlwiLCBhcmdzKTtcbiAgfSxcbiAgbWFwKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGFwcGx5KHRoaXMsIFwibWFwXCIsIGZuLCB0aGlzQXJnLCB2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH0sXG4gIHBvcCgpIHtcbiAgICByZXR1cm4gbm9UcmFja2luZyh0aGlzLCBcInBvcFwiKTtcbiAgfSxcbiAgcHVzaCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIG5vVHJhY2tpbmcodGhpcywgXCJwdXNoXCIsIGFyZ3MpO1xuICB9LFxuICByZWR1Y2UoZm4sIC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gcmVkdWNlKHRoaXMsIFwicmVkdWNlXCIsIGZuLCBhcmdzKTtcbiAgfSxcbiAgcmVkdWNlUmlnaHQoZm4sIC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gcmVkdWNlKHRoaXMsIFwicmVkdWNlUmlnaHRcIiwgZm4sIGFyZ3MpO1xuICB9LFxuICBzaGlmdCgpIHtcbiAgICByZXR1cm4gbm9UcmFja2luZyh0aGlzLCBcInNoaWZ0XCIpO1xuICB9LFxuICAvLyBzbGljZSBjb3VsZCB1c2UgQVJSQVlfSVRFUkFURSBidXQgYWxzbyBzZWVtcyB0byBiZWcgZm9yIHJhbmdlIHRyYWNraW5nXG4gIHNvbWUoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gYXBwbHkodGhpcywgXCJzb21lXCIsIGZuLCB0aGlzQXJnLCB2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH0sXG4gIHNwbGljZSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIG5vVHJhY2tpbmcodGhpcywgXCJzcGxpY2VcIiwgYXJncyk7XG4gIH0sXG4gIHRvUmV2ZXJzZWQoKSB7XG4gICAgcmV0dXJuIHJlYWN0aXZlUmVhZEFycmF5KHRoaXMpLnRvUmV2ZXJzZWQoKTtcbiAgfSxcbiAgdG9Tb3J0ZWQoY29tcGFyZXIpIHtcbiAgICByZXR1cm4gcmVhY3RpdmVSZWFkQXJyYXkodGhpcykudG9Tb3J0ZWQoY29tcGFyZXIpO1xuICB9LFxuICB0b1NwbGljZWQoLi4uYXJncykge1xuICAgIHJldHVybiByZWFjdGl2ZVJlYWRBcnJheSh0aGlzKS50b1NwbGljZWQoLi4uYXJncyk7XG4gIH0sXG4gIHVuc2hpZnQoLi4uYXJncykge1xuICAgIHJldHVybiBub1RyYWNraW5nKHRoaXMsIFwidW5zaGlmdFwiLCBhcmdzKTtcbiAgfSxcbiAgdmFsdWVzKCkge1xuICAgIHJldHVybiBpdGVyYXRvcih0aGlzLCBcInZhbHVlc1wiLCB0b1JlYWN0aXZlKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGl0ZXJhdG9yKHNlbGYsIG1ldGhvZCwgd3JhcFZhbHVlKSB7XG4gIGNvbnN0IGFyciA9IHNoYWxsb3dSZWFkQXJyYXkoc2VsZik7XG4gIGNvbnN0IGl0ZXIgPSBhcnJbbWV0aG9kXSgpO1xuICBpZiAoYXJyICE9PSBzZWxmICYmICFpc1NoYWxsb3coc2VsZikpIHtcbiAgICBpdGVyLl9uZXh0ID0gaXRlci5uZXh0O1xuICAgIGl0ZXIubmV4dCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGl0ZXIuX25leHQoKTtcbiAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcbiAgICAgICAgcmVzdWx0LnZhbHVlID0gd3JhcFZhbHVlKHJlc3VsdC52YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGl0ZXI7XG59XG5jb25zdCBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuZnVuY3Rpb24gYXBwbHkoc2VsZiwgbWV0aG9kLCBmbiwgdGhpc0FyZywgd3JhcHBlZFJldEZuLCBhcmdzKSB7XG4gIGNvbnN0IGFyciA9IHNoYWxsb3dSZWFkQXJyYXkoc2VsZik7XG4gIGNvbnN0IG5lZWRzV3JhcCA9IGFyciAhPT0gc2VsZiAmJiAhaXNTaGFsbG93KHNlbGYpO1xuICBjb25zdCBtZXRob2RGbiA9IGFyclttZXRob2RdO1xuICBpZiAobWV0aG9kRm4gIT09IGFycmF5UHJvdG9bbWV0aG9kXSkge1xuICAgIGNvbnN0IHJlc3VsdDIgPSBtZXRob2RGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICByZXR1cm4gbmVlZHNXcmFwID8gdG9SZWFjdGl2ZShyZXN1bHQyKSA6IHJlc3VsdDI7XG4gIH1cbiAgbGV0IHdyYXBwZWRGbiA9IGZuO1xuICBpZiAoYXJyICE9PSBzZWxmKSB7XG4gICAgaWYgKG5lZWRzV3JhcCkge1xuICAgICAgd3JhcHBlZEZuID0gZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdG9SZWFjdGl2ZShpdGVtKSwgaW5kZXgsIHNlbGYpO1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGZuLmxlbmd0aCA+IDIpIHtcbiAgICAgIHdyYXBwZWRGbiA9IGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGl0ZW0sIGluZGV4LCBzZWxmKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlc3VsdCA9IG1ldGhvZEZuLmNhbGwoYXJyLCB3cmFwcGVkRm4sIHRoaXNBcmcpO1xuICByZXR1cm4gbmVlZHNXcmFwICYmIHdyYXBwZWRSZXRGbiA/IHdyYXBwZWRSZXRGbihyZXN1bHQpIDogcmVzdWx0O1xufVxuZnVuY3Rpb24gcmVkdWNlKHNlbGYsIG1ldGhvZCwgZm4sIGFyZ3MpIHtcbiAgY29uc3QgYXJyID0gc2hhbGxvd1JlYWRBcnJheShzZWxmKTtcbiAgbGV0IHdyYXBwZWRGbiA9IGZuO1xuICBpZiAoYXJyICE9PSBzZWxmKSB7XG4gICAgaWYgKCFpc1NoYWxsb3coc2VsZikpIHtcbiAgICAgIHdyYXBwZWRGbiA9IGZ1bmN0aW9uKGFjYywgaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgYWNjLCB0b1JlYWN0aXZlKGl0ZW0pLCBpbmRleCwgc2VsZik7XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoZm4ubGVuZ3RoID4gMykge1xuICAgICAgd3JhcHBlZEZuID0gZnVuY3Rpb24oYWNjLCBpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBhY2MsIGl0ZW0sIGluZGV4LCBzZWxmKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJbbWV0aG9kXSh3cmFwcGVkRm4sIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gc2VhcmNoUHJveHkoc2VsZiwgbWV0aG9kLCBhcmdzKSB7XG4gIGNvbnN0IGFyciA9IHRvUmF3KHNlbGYpO1xuICB0cmFjayhhcnIsIFwiaXRlcmF0ZVwiLCBBUlJBWV9JVEVSQVRFX0tFWSk7XG4gIGNvbnN0IHJlcyA9IGFyclttZXRob2RdKC4uLmFyZ3MpO1xuICBpZiAoKHJlcyA9PT0gLTEgfHwgcmVzID09PSBmYWxzZSkgJiYgaXNQcm94eShhcmdzWzBdKSkge1xuICAgIGFyZ3NbMF0gPSB0b1JhdyhhcmdzWzBdKTtcbiAgICByZXR1cm4gYXJyW21ldGhvZF0oLi4uYXJncyk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIG5vVHJhY2tpbmcoc2VsZiwgbWV0aG9kLCBhcmdzID0gW10pIHtcbiAgcGF1c2VUcmFja2luZygpO1xuICBzdGFydEJhdGNoKCk7XG4gIGNvbnN0IHJlcyA9IHRvUmF3KHNlbGYpW21ldGhvZF0uYXBwbHkoc2VsZiwgYXJncyk7XG4gIGVuZEJhdGNoKCk7XG4gIHJlc2V0VHJhY2tpbmcoKTtcbiAgcmV0dXJuIHJlcztcbn1cblxuY29uc3QgaXNOb25UcmFja2FibGVLZXlzID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoYF9fcHJvdG9fXyxfX3ZfaXNSZWYsX19pc1Z1ZWApO1xuY29uc3QgYnVpbHRJblN5bWJvbHMgPSBuZXcgU2V0KFxuICAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoU3ltYm9sKS5maWx0ZXIoKGtleSkgPT4ga2V5ICE9PSBcImFyZ3VtZW50c1wiICYmIGtleSAhPT0gXCJjYWxsZXJcIikubWFwKChrZXkpID0+IFN5bWJvbFtrZXldKS5maWx0ZXIoaXNTeW1ib2wpXG4pO1xuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkoa2V5KSB7XG4gIGlmICghaXNTeW1ib2woa2V5KSkga2V5ID0gU3RyaW5nKGtleSk7XG4gIGNvbnN0IG9iaiA9IHRvUmF3KHRoaXMpO1xuICB0cmFjayhvYmosIFwiaGFzXCIsIGtleSk7XG4gIHJldHVybiBvYmouaGFzT3duUHJvcGVydHkoa2V5KTtcbn1cbmNsYXNzIEJhc2VSZWFjdGl2ZUhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcihfaXNSZWFkb25seSA9IGZhbHNlLCBfaXNTaGFsbG93ID0gZmFsc2UpIHtcbiAgICB0aGlzLl9pc1JlYWRvbmx5ID0gX2lzUmVhZG9ubHk7XG4gICAgdGhpcy5faXNTaGFsbG93ID0gX2lzU2hhbGxvdztcbiAgfVxuICBnZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSB7XG4gICAgaWYgKGtleSA9PT0gXCJfX3Zfc2tpcFwiKSByZXR1cm4gdGFyZ2V0W1wiX192X3NraXBcIl07XG4gICAgY29uc3QgaXNSZWFkb25seTIgPSB0aGlzLl9pc1JlYWRvbmx5LCBpc1NoYWxsb3cyID0gdGhpcy5faXNTaGFsbG93O1xuICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIikge1xuICAgICAgcmV0dXJuICFpc1JlYWRvbmx5MjtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiKSB7XG4gICAgICByZXR1cm4gaXNSZWFkb25seTI7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiX192X2lzU2hhbGxvd1wiKSB7XG4gICAgICByZXR1cm4gaXNTaGFsbG93MjtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIpIHtcbiAgICAgIGlmIChyZWNlaXZlciA9PT0gKGlzUmVhZG9ubHkyID8gaXNTaGFsbG93MiA/IHNoYWxsb3dSZWFkb25seU1hcCA6IHJlYWRvbmx5TWFwIDogaXNTaGFsbG93MiA/IHNoYWxsb3dSZWFjdGl2ZU1hcCA6IHJlYWN0aXZlTWFwKS5nZXQodGFyZ2V0KSB8fCAvLyByZWNlaXZlciBpcyBub3QgdGhlIHJlYWN0aXZlIHByb3h5LCBidXQgaGFzIHRoZSBzYW1lIHByb3RvdHlwZVxuICAgICAgLy8gdGhpcyBtZWFucyB0aGUgcmVjZWl2ZXIgaXMgYSB1c2VyIHByb3h5IG9mIHRoZSByZWFjdGl2ZSBwcm94eVxuICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCkgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZihyZWNlaXZlcikpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0SXNBcnJheSA9IGlzQXJyYXkodGFyZ2V0KTtcbiAgICBpZiAoIWlzUmVhZG9ubHkyKSB7XG4gICAgICBsZXQgZm47XG4gICAgICBpZiAodGFyZ2V0SXNBcnJheSAmJiAoZm4gPSBhcnJheUluc3RydW1lbnRhdGlvbnNba2V5XSkpIHtcbiAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gXCJoYXNPd25Qcm9wZXJ0eVwiKSB7XG4gICAgICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzID0gUmVmbGVjdC5nZXQoXG4gICAgICB0YXJnZXQsXG4gICAgICBrZXksXG4gICAgICAvLyBpZiB0aGlzIGlzIGEgcHJveHkgd3JhcHBpbmcgYSByZWYsIHJldHVybiBtZXRob2RzIHVzaW5nIHRoZSByYXcgcmVmXG4gICAgICAvLyBhcyByZWNlaXZlciBzbyB0aGF0IHdlIGRvbid0IGhhdmUgdG8gY2FsbCBgdG9SYXdgIG9uIHRoZSByZWYgaW4gYWxsXG4gICAgICAvLyBpdHMgY2xhc3MgbWV0aG9kc1xuICAgICAgaXNSZWYodGFyZ2V0KSA/IHRhcmdldCA6IHJlY2VpdmVyXG4gICAgKTtcbiAgICBpZiAoaXNTeW1ib2woa2V5KSA/IGJ1aWx0SW5TeW1ib2xzLmhhcyhrZXkpIDogaXNOb25UcmFja2FibGVLZXlzKGtleSkpIHtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmICghaXNSZWFkb25seTIpIHtcbiAgICAgIHRyYWNrKHRhcmdldCwgXCJnZXRcIiwga2V5KTtcbiAgICB9XG4gICAgaWYgKGlzU2hhbGxvdzIpIHtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmIChpc1JlZihyZXMpKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0SXNBcnJheSAmJiBpc0ludGVnZXJLZXkoa2V5KSA/IHJlcyA6IHJlcy52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIHJldHVybiBpc1JlYWRvbmx5MiA/IHJlYWRvbmx5KHJlcykgOiByZWFjdGl2ZShyZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG59XG5jbGFzcyBNdXRhYmxlUmVhY3RpdmVIYW5kbGVyIGV4dGVuZHMgQmFzZVJlYWN0aXZlSGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKGlzU2hhbGxvdzIgPSBmYWxzZSkge1xuICAgIHN1cGVyKGZhbHNlLCBpc1NoYWxsb3cyKTtcbiAgfVxuICBzZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikge1xuICAgIGxldCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xuICAgIGlmICghdGhpcy5faXNTaGFsbG93KSB7XG4gICAgICBjb25zdCBpc09sZFZhbHVlUmVhZG9ubHkgPSBpc1JlYWRvbmx5KG9sZFZhbHVlKTtcbiAgICAgIGlmICghaXNTaGFsbG93KHZhbHVlKSAmJiAhaXNSZWFkb25seSh2YWx1ZSkpIHtcbiAgICAgICAgb2xkVmFsdWUgPSB0b1JhdyhvbGRWYWx1ZSk7XG4gICAgICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkgJiYgaXNSZWYob2xkVmFsdWUpICYmICFpc1JlZih2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGlzT2xkVmFsdWVSZWFkb25seSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGhhZEtleSA9IGlzQXJyYXkodGFyZ2V0KSAmJiBpc0ludGVnZXJLZXkoa2V5KSA/IE51bWJlcihrZXkpIDwgdGFyZ2V0Lmxlbmd0aCA6IGhhc093bih0YXJnZXQsIGtleSk7XG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5zZXQoXG4gICAgICB0YXJnZXQsXG4gICAgICBrZXksXG4gICAgICB2YWx1ZSxcbiAgICAgIGlzUmVmKHRhcmdldCkgPyB0YXJnZXQgOiByZWNlaXZlclxuICAgICk7XG4gICAgaWYgKHRhcmdldCA9PT0gdG9SYXcocmVjZWl2ZXIpKSB7XG4gICAgICBpZiAoIWhhZEtleSkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJhZGRcIiwga2V5LCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJzZXRcIiwga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KSB7XG4gICAgY29uc3QgaGFkS2V5ID0gaGFzT3duKHRhcmdldCwga2V5KTtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xuICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpO1xuICAgIGlmIChyZXN1bHQgJiYgaGFkS2V5KSB7XG4gICAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiwga2V5LCB2b2lkIDAsIG9sZFZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBoYXModGFyZ2V0LCBrZXkpIHtcbiAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0Lmhhcyh0YXJnZXQsIGtleSk7XG4gICAgaWYgKCFpc1N5bWJvbChrZXkpIHx8ICFidWlsdEluU3ltYm9scy5oYXMoa2V5KSkge1xuICAgICAgdHJhY2sodGFyZ2V0LCBcImhhc1wiLCBrZXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIG93bktleXModGFyZ2V0KSB7XG4gICAgdHJhY2soXG4gICAgICB0YXJnZXQsXG4gICAgICBcIml0ZXJhdGVcIixcbiAgICAgIGlzQXJyYXkodGFyZ2V0KSA/IFwibGVuZ3RoXCIgOiBJVEVSQVRFX0tFWVxuICAgICk7XG4gICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xuICB9XG59XG5jbGFzcyBSZWFkb25seVJlYWN0aXZlSGFuZGxlciBleHRlbmRzIEJhc2VSZWFjdGl2ZUhhbmRsZXIge1xuICBjb25zdHJ1Y3Rvcihpc1NoYWxsb3cyID0gZmFsc2UpIHtcbiAgICBzdXBlcih0cnVlLCBpc1NoYWxsb3cyKTtcbiAgfVxuICBzZXQodGFyZ2V0LCBrZXkpIHtcbiAgICB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIGBTZXQgb3BlcmF0aW9uIG9uIGtleSBcIiR7U3RyaW5nKGtleSl9XCIgZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCxcbiAgICAgICAgdGFyZ2V0XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSkge1xuICAgIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgYERlbGV0ZSBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLFxuICAgICAgICB0YXJnZXRcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5jb25zdCBtdXRhYmxlSGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE11dGFibGVSZWFjdGl2ZUhhbmRsZXIoKTtcbmNvbnN0IHJlYWRvbmx5SGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFJlYWRvbmx5UmVhY3RpdmVIYW5kbGVyKCk7XG5jb25zdCBzaGFsbG93UmVhY3RpdmVIYW5kbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTXV0YWJsZVJlYWN0aXZlSGFuZGxlcih0cnVlKTtcbmNvbnN0IHNoYWxsb3dSZWFkb25seUhhbmRsZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBSZWFkb25seVJlYWN0aXZlSGFuZGxlcih0cnVlKTtcblxuY29uc3QgdG9TaGFsbG93ID0gKHZhbHVlKSA9PiB2YWx1ZTtcbmNvbnN0IGdldFByb3RvID0gKHYpID0+IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yodik7XG5mdW5jdGlvbiBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGlzUmVhZG9ubHkyLCBpc1NoYWxsb3cyKSB7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIl07XG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcbiAgICBjb25zdCB0YXJnZXRJc01hcCA9IGlzTWFwKHJhd1RhcmdldCk7XG4gICAgY29uc3QgaXNQYWlyID0gbWV0aG9kID09PSBcImVudHJpZXNcIiB8fCBtZXRob2QgPT09IFN5bWJvbC5pdGVyYXRvciAmJiB0YXJnZXRJc01hcDtcbiAgICBjb25zdCBpc0tleU9ubHkgPSBtZXRob2QgPT09IFwia2V5c1wiICYmIHRhcmdldElzTWFwO1xuICAgIGNvbnN0IGlubmVySXRlcmF0b3IgPSB0YXJnZXRbbWV0aG9kXSguLi5hcmdzKTtcbiAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93MiA/IHRvU2hhbGxvdyA6IGlzUmVhZG9ubHkyID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XG4gICAgIWlzUmVhZG9ubHkyICYmIHRyYWNrKFxuICAgICAgcmF3VGFyZ2V0LFxuICAgICAgXCJpdGVyYXRlXCIsXG4gICAgICBpc0tleU9ubHkgPyBNQVBfS0VZX0lURVJBVEVfS0VZIDogSVRFUkFURV9LRVlcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICAvLyBpdGVyYXRvciBwcm90b2NvbFxuICAgICAgbmV4dCgpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gaW5uZXJJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIHJldHVybiBkb25lID8geyB2YWx1ZSwgZG9uZSB9IDoge1xuICAgICAgICAgIHZhbHVlOiBpc1BhaXIgPyBbd3JhcCh2YWx1ZVswXSksIHdyYXAodmFsdWVbMV0pXSA6IHdyYXAodmFsdWUpLFxuICAgICAgICAgIGRvbmVcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICAvLyBpdGVyYWJsZSBwcm90b2NvbFxuICAgICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVSZWFkb25seU1ldGhvZCh0eXBlKSB7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAge1xuICAgICAgY29uc3Qga2V5ID0gYXJnc1swXSA/IGBvbiBrZXkgXCIke2FyZ3NbMF19XCIgYCA6IGBgO1xuICAgICAgd2FybiQyKFxuICAgICAgICBgJHtjYXBpdGFsaXplKHR5cGUpfSBvcGVyYXRpb24gJHtrZXl9ZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCxcbiAgICAgICAgdG9SYXcodGhpcylcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0eXBlID09PSBcImRlbGV0ZVwiID8gZmFsc2UgOiB0eXBlID09PSBcImNsZWFyXCIgPyB2b2lkIDAgOiB0aGlzO1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSW5zdHJ1bWVudGF0aW9ucyhyZWFkb25seSwgc2hhbGxvdykge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0ge1xuICAgIGdldChrZXkpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbXCJfX3ZfcmF3XCJdO1xuICAgICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcbiAgICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gICAgICBpZiAoIXJlYWRvbmx5KSB7XG4gICAgICAgIGlmIChoYXNDaGFuZ2VkKGtleSwgcmF3S2V5KSkge1xuICAgICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJnZXRcIiwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIsIHJhd0tleSk7XG4gICAgICB9XG4gICAgICBjb25zdCB7IGhhcyB9ID0gZ2V0UHJvdG8ocmF3VGFyZ2V0KTtcbiAgICAgIGNvbnN0IHdyYXAgPSBzaGFsbG93ID8gdG9TaGFsbG93IDogcmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogdG9SZWFjdGl2ZTtcbiAgICAgIGlmIChoYXMuY2FsbChyYXdUYXJnZXQsIGtleSkpIHtcbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0LmdldChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoaGFzLmNhbGwocmF3VGFyZ2V0LCByYXdLZXkpKSB7XG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldC5nZXQocmF3S2V5KSk7XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldCAhPT0gcmF3VGFyZ2V0KSB7XG4gICAgICAgIHRhcmdldC5nZXQoa2V5KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldCBzaXplKCkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIl07XG4gICAgICAhcmVhZG9ubHkgJiYgdHJhY2sodG9SYXcodGFyZ2V0KSwgXCJpdGVyYXRlXCIsIElURVJBVEVfS0VZKTtcbiAgICAgIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIFwic2l6ZVwiLCB0YXJnZXQpO1xuICAgIH0sXG4gICAgaGFzKGtleSkge1xuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcIl9fdl9yYXdcIl07XG4gICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcbiAgICAgIGlmICghcmVhZG9ubHkpIHtcbiAgICAgICAgaWYgKGhhc0NoYW5nZWQoa2V5LCByYXdLZXkpKSB7XG4gICAgICAgICAgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJoYXNcIiwgcmF3S2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXkgPT09IHJhd0tleSA/IHRhcmdldC5oYXMoa2V5KSA6IHRhcmdldC5oYXMoa2V5KSB8fCB0YXJnZXQuaGFzKHJhd0tleSk7XG4gICAgfSxcbiAgICBmb3JFYWNoKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICBjb25zdCBvYnNlcnZlZCA9IHRoaXM7XG4gICAgICBjb25zdCB0YXJnZXQgPSBvYnNlcnZlZFtcIl9fdl9yYXdcIl07XG4gICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgICAgY29uc3Qgd3JhcCA9IHNoYWxsb3cgPyB0b1NoYWxsb3cgOiByZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xuICAgICAgIXJlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIsIElURVJBVEVfS0VZKTtcbiAgICAgIHJldHVybiB0YXJnZXQuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB3cmFwKHZhbHVlKSwgd3JhcChrZXkpLCBvYnNlcnZlZCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIGV4dGVuZChcbiAgICBpbnN0cnVtZW50YXRpb25zLFxuICAgIHJlYWRvbmx5ID8ge1xuICAgICAgYWRkOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImFkZFwiKSxcbiAgICAgIHNldDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJzZXRcIiksXG4gICAgICBkZWxldGU6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiZGVsZXRlXCIpLFxuICAgICAgY2xlYXI6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiY2xlYXJcIilcbiAgICB9IDoge1xuICAgICAgYWRkKHZhbHVlKSB7XG4gICAgICAgIGlmICghc2hhbGxvdyAmJiAhaXNTaGFsbG93KHZhbHVlKSAmJiAhaXNSZWFkb25seSh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICAgICAgY29uc3QgcHJvdG8gPSBnZXRQcm90byh0YXJnZXQpO1xuICAgICAgICBjb25zdCBoYWRLZXkgPSBwcm90by5oYXMuY2FsbCh0YXJnZXQsIHZhbHVlKTtcbiAgICAgICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAgICB0YXJnZXQuYWRkKHZhbHVlKTtcbiAgICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJhZGRcIiwgdmFsdWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXNoYWxsb3cgJiYgIWlzU2hhbGxvdyh2YWx1ZSkgJiYgIWlzUmVhZG9ubHkodmFsdWUpKSB7XG4gICAgICAgICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XG4gICAgICAgIGNvbnN0IHsgaGFzLCBnZXQgfSA9IGdldFByb3RvKHRhcmdldCk7XG4gICAgICAgIGxldCBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgICAgIGlmICghaGFkS2V5KSB7XG4gICAgICAgICAga2V5ID0gdG9SYXcoa2V5KTtcbiAgICAgICAgICBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQuY2FsbCh0YXJnZXQsIGtleSk7XG4gICAgICAgIHRhcmdldC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICghaGFkS2V5KSB7XG4gICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIsIGtleSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiLCBrZXksIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgZGVsZXRlKGtleSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgICAgICAgY29uc3QgeyBoYXMsIGdldCB9ID0gZ2V0UHJvdG8odGFyZ2V0KTtcbiAgICAgICAgbGV0IGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcbiAgICAgICAgaWYgKCFoYWRLZXkpIHtcbiAgICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xuICAgICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhcywga2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IGdldCA/IGdldC5jYWxsKHRhcmdldCwga2V5KSA6IHZvaWQgMDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmRlbGV0ZShrZXkpO1xuICAgICAgICBpZiAoaGFkS2V5KSB7XG4gICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiZGVsZXRlXCIsIGtleSwgdm9pZCAwLCBvbGRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0sXG4gICAgICBjbGVhcigpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XG4gICAgICAgIGNvbnN0IGhhZEl0ZW1zID0gdGFyZ2V0LnNpemUgIT09IDA7XG4gICAgICAgIGNvbnN0IG9sZFRhcmdldCA9IGlzTWFwKHRhcmdldCkgPyBuZXcgTWFwKHRhcmdldCkgOiBuZXcgU2V0KHRhcmdldCkgO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuY2xlYXIoKTtcbiAgICAgICAgaWYgKGhhZEl0ZW1zKSB7XG4gICAgICAgICAgdHJpZ2dlcihcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIFwiY2xlYXJcIixcbiAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgIHZvaWQgMCxcbiAgICAgICAgICAgIG9sZFRhcmdldFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICk7XG4gIGNvbnN0IGl0ZXJhdG9yTWV0aG9kcyA9IFtcbiAgICBcImtleXNcIixcbiAgICBcInZhbHVlc1wiLFxuICAgIFwiZW50cmllc1wiLFxuICAgIFN5bWJvbC5pdGVyYXRvclxuICBdO1xuICBpdGVyYXRvck1ldGhvZHMuZm9yRWFjaCgobWV0aG9kKSA9PiB7XG4gICAgaW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCByZWFkb25seSwgc2hhbGxvdyk7XG4gIH0pO1xuICByZXR1cm4gaW5zdHJ1bWVudGF0aW9ucztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihpc1JlYWRvbmx5Miwgc2hhbGxvdykge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0gY3JlYXRlSW5zdHJ1bWVudGF0aW9ucyhpc1JlYWRvbmx5Miwgc2hhbGxvdyk7XG4gIHJldHVybiAodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSA9PiB7XG4gICAgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFjdGl2ZVwiKSB7XG4gICAgICByZXR1cm4gIWlzUmVhZG9ubHkyO1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWRvbmx5XCIpIHtcbiAgICAgIHJldHVybiBpc1JlYWRvbmx5MjtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIpIHtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIHJldHVybiBSZWZsZWN0LmdldChcbiAgICAgIGhhc093bihpbnN0cnVtZW50YXRpb25zLCBrZXkpICYmIGtleSBpbiB0YXJnZXQgPyBpbnN0cnVtZW50YXRpb25zIDogdGFyZ2V0LFxuICAgICAga2V5LFxuICAgICAgcmVjZWl2ZXJcbiAgICApO1xuICB9O1xufVxuY29uc3QgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcbiAgZ2V0OiAvKiBAX19QVVJFX18gKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGZhbHNlLCBmYWxzZSlcbn07XG5jb25zdCBzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzID0ge1xuICBnZXQ6IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoZmFsc2UsIHRydWUpXG59O1xuY29uc3QgcmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gIGdldDogLyogQF9fUFVSRV9fICovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcih0cnVlLCBmYWxzZSlcbn07XG5jb25zdCBzaGFsbG93UmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gIGdldDogLyogQF9fUFVSRV9fICovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcih0cnVlLCB0cnVlKVxufTtcbmZ1bmN0aW9uIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpIHtcbiAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcbiAgaWYgKHJhd0tleSAhPT0ga2V5ICYmIGhhcy5jYWxsKHRhcmdldCwgcmF3S2V5KSkge1xuICAgIGNvbnN0IHR5cGUgPSB0b1Jhd1R5cGUodGFyZ2V0KTtcbiAgICB3YXJuJDIoXG4gICAgICBgUmVhY3RpdmUgJHt0eXBlfSBjb250YWlucyBib3RoIHRoZSByYXcgYW5kIHJlYWN0aXZlIHZlcnNpb25zIG9mIHRoZSBzYW1lIG9iamVjdCR7dHlwZSA9PT0gYE1hcGAgPyBgIGFzIGtleXNgIDogYGB9LCB3aGljaCBjYW4gbGVhZCB0byBpbmNvbnNpc3RlbmNpZXMuIEF2b2lkIGRpZmZlcmVudGlhdGluZyBiZXR3ZWVuIHRoZSByYXcgYW5kIHJlYWN0aXZlIHZlcnNpb25zIG9mIGFuIG9iamVjdCBhbmQgb25seSB1c2UgdGhlIHJlYWN0aXZlIHZlcnNpb24gaWYgcG9zc2libGUuYFxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgcmVhY3RpdmVNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHNoYWxsb3dSZWFjdGl2ZU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmVhZG9ubHlNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHNoYWxsb3dSZWFkb25seU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gdGFyZ2V0VHlwZU1hcChyYXdUeXBlKSB7XG4gIHN3aXRjaCAocmF3VHlwZSkge1xuICAgIGNhc2UgXCJPYmplY3RcIjpcbiAgICBjYXNlIFwiQXJyYXlcIjpcbiAgICAgIHJldHVybiAxIC8qIENPTU1PTiAqLztcbiAgICBjYXNlIFwiTWFwXCI6XG4gICAgY2FzZSBcIlNldFwiOlxuICAgIGNhc2UgXCJXZWFrTWFwXCI6XG4gICAgY2FzZSBcIldlYWtTZXRcIjpcbiAgICAgIHJldHVybiAyIC8qIENPTExFQ1RJT04gKi87XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAwIC8qIElOVkFMSUQgKi87XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRhcmdldFR5cGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlW1wiX192X3NraXBcIl0gfHwgIU9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpID8gMCAvKiBJTlZBTElEICovIDogdGFyZ2V0VHlwZU1hcCh0b1Jhd1R5cGUodmFsdWUpKTtcbn1cbmZ1bmN0aW9uIHJlYWN0aXZlKHRhcmdldCkge1xuICBpZiAoaXNSZWFkb25seSh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QoXG4gICAgdGFyZ2V0LFxuICAgIGZhbHNlLFxuICAgIG11dGFibGVIYW5kbGVycyxcbiAgICBtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzLFxuICAgIHJlYWN0aXZlTWFwXG4gICk7XG59XG5mdW5jdGlvbiBzaGFsbG93UmVhY3RpdmUodGFyZ2V0KSB7XG4gIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdChcbiAgICB0YXJnZXQsXG4gICAgZmFsc2UsXG4gICAgc2hhbGxvd1JlYWN0aXZlSGFuZGxlcnMsXG4gICAgc2hhbGxvd0NvbGxlY3Rpb25IYW5kbGVycyxcbiAgICBzaGFsbG93UmVhY3RpdmVNYXBcbiAgKTtcbn1cbmZ1bmN0aW9uIHJlYWRvbmx5KHRhcmdldCkge1xuICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QoXG4gICAgdGFyZ2V0LFxuICAgIHRydWUsXG4gICAgcmVhZG9ubHlIYW5kbGVycyxcbiAgICByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyxcbiAgICByZWFkb25seU1hcFxuICApO1xufVxuZnVuY3Rpb24gc2hhbGxvd1JlYWRvbmx5KHRhcmdldCkge1xuICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QoXG4gICAgdGFyZ2V0LFxuICAgIHRydWUsXG4gICAgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMsXG4gICAgc2hhbGxvd1JlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzLFxuICAgIHNoYWxsb3dSZWFkb25seU1hcFxuICApO1xufVxuZnVuY3Rpb24gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBpc1JlYWRvbmx5MiwgYmFzZUhhbmRsZXJzLCBjb2xsZWN0aW9uSGFuZGxlcnMsIHByb3h5TWFwKSB7XG4gIGlmICghaXNPYmplY3QodGFyZ2V0KSkge1xuICAgIHtcbiAgICAgIHdhcm4kMihcbiAgICAgICAgYHZhbHVlIGNhbm5vdCBiZSBtYWRlICR7aXNSZWFkb25seTIgPyBcInJlYWRvbmx5XCIgOiBcInJlYWN0aXZlXCJ9OiAke1N0cmluZyhcbiAgICAgICAgICB0YXJnZXRcbiAgICAgICAgKX1gXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIGlmICh0YXJnZXRbXCJfX3ZfcmF3XCJdICYmICEoaXNSZWFkb25seTIgJiYgdGFyZ2V0W1wiX192X2lzUmVhY3RpdmVcIl0pKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICBjb25zdCB0YXJnZXRUeXBlID0gZ2V0VGFyZ2V0VHlwZSh0YXJnZXQpO1xuICBpZiAodGFyZ2V0VHlwZSA9PT0gMCAvKiBJTlZBTElEICovKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICBjb25zdCBleGlzdGluZ1Byb3h5ID0gcHJveHlNYXAuZ2V0KHRhcmdldCk7XG4gIGlmIChleGlzdGluZ1Byb3h5KSB7XG4gICAgcmV0dXJuIGV4aXN0aW5nUHJveHk7XG4gIH1cbiAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkoXG4gICAgdGFyZ2V0LFxuICAgIHRhcmdldFR5cGUgPT09IDIgLyogQ09MTEVDVElPTiAqLyA/IGNvbGxlY3Rpb25IYW5kbGVycyA6IGJhc2VIYW5kbGVyc1xuICApO1xuICBwcm94eU1hcC5zZXQodGFyZ2V0LCBwcm94eSk7XG4gIHJldHVybiBwcm94eTtcbn1cbmZ1bmN0aW9uIGlzUmVhY3RpdmUodmFsdWUpIHtcbiAgaWYgKGlzUmVhZG9ubHkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGlzUmVhY3RpdmUodmFsdWVbXCJfX3ZfcmF3XCJdKTtcbiAgfVxuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFjdGl2ZVwiXSk7XG59XG5mdW5jdGlvbiBpc1JlYWRvbmx5KHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1JlYWRvbmx5XCJdKTtcbn1cbmZ1bmN0aW9uIGlzU2hhbGxvdyh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNTaGFsbG93XCJdKTtcbn1cbmZ1bmN0aW9uIGlzUHJveHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID8gISF2YWx1ZVtcIl9fdl9yYXdcIl0gOiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHRvUmF3KG9ic2VydmVkKSB7XG4gIGNvbnN0IHJhdyA9IG9ic2VydmVkICYmIG9ic2VydmVkW1wiX192X3Jhd1wiXTtcbiAgcmV0dXJuIHJhdyA/IHRvUmF3KHJhdykgOiBvYnNlcnZlZDtcbn1cbmZ1bmN0aW9uIG1hcmtSYXcodmFsdWUpIHtcbiAgaWYgKCFoYXNPd24odmFsdWUsIFwiX192X3NraXBcIikgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkpIHtcbiAgICBkZWYodmFsdWUsIFwiX192X3NraXBcIiwgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuY29uc3QgdG9SZWFjdGl2ZSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhY3RpdmUodmFsdWUpIDogdmFsdWU7XG5jb25zdCB0b1JlYWRvbmx5ID0gKHZhbHVlKSA9PiBpc09iamVjdCh2YWx1ZSkgPyByZWFkb25seSh2YWx1ZSkgOiB2YWx1ZTtcblxuZnVuY3Rpb24gaXNSZWYocikge1xuICByZXR1cm4gciA/IHJbXCJfX3ZfaXNSZWZcIl0gPT09IHRydWUgOiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHJlZih2YWx1ZSkge1xuICByZXR1cm4gY3JlYXRlUmVmKHZhbHVlLCBmYWxzZSk7XG59XG5mdW5jdGlvbiBzaGFsbG93UmVmKHZhbHVlKSB7XG4gIHJldHVybiBjcmVhdGVSZWYodmFsdWUsIHRydWUpO1xufVxuZnVuY3Rpb24gY3JlYXRlUmVmKHJhd1ZhbHVlLCBzaGFsbG93KSB7XG4gIGlmIChpc1JlZihyYXdWYWx1ZSkpIHtcbiAgICByZXR1cm4gcmF3VmFsdWU7XG4gIH1cbiAgcmV0dXJuIG5ldyBSZWZJbXBsKHJhd1ZhbHVlLCBzaGFsbG93KTtcbn1cbmNsYXNzIFJlZkltcGwge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSwgaXNTaGFsbG93Mikge1xuICAgIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICAgIHRoaXNbXCJfX3ZfaXNSZWZcIl0gPSB0cnVlO1xuICAgIHRoaXNbXCJfX3ZfaXNTaGFsbG93XCJdID0gZmFsc2U7XG4gICAgdGhpcy5fcmF3VmFsdWUgPSBpc1NoYWxsb3cyID8gdmFsdWUgOiB0b1Jhdyh2YWx1ZSk7XG4gICAgdGhpcy5fdmFsdWUgPSBpc1NoYWxsb3cyID8gdmFsdWUgOiB0b1JlYWN0aXZlKHZhbHVlKTtcbiAgICB0aGlzW1wiX192X2lzU2hhbGxvd1wiXSA9IGlzU2hhbGxvdzI7XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHtcbiAgICAgIHRoaXMuZGVwLnRyYWNrKHtcbiAgICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgICB0eXBlOiBcImdldFwiLFxuICAgICAgICBrZXk6IFwidmFsdWVcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuX3Jhd1ZhbHVlO1xuICAgIGNvbnN0IHVzZURpcmVjdFZhbHVlID0gdGhpc1tcIl9fdl9pc1NoYWxsb3dcIl0gfHwgaXNTaGFsbG93KG5ld1ZhbHVlKSB8fCBpc1JlYWRvbmx5KG5ld1ZhbHVlKTtcbiAgICBuZXdWYWx1ZSA9IHVzZURpcmVjdFZhbHVlID8gbmV3VmFsdWUgOiB0b1JhdyhuZXdWYWx1ZSk7XG4gICAgaWYgKGhhc0NoYW5nZWQobmV3VmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgdGhpcy5fcmF3VmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIHRoaXMuX3ZhbHVlID0gdXNlRGlyZWN0VmFsdWUgPyBuZXdWYWx1ZSA6IHRvUmVhY3RpdmUobmV3VmFsdWUpO1xuICAgICAge1xuICAgICAgICB0aGlzLmRlcC50cmlnZ2VyKHtcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICAgICAgdHlwZTogXCJzZXRcIixcbiAgICAgICAgICBrZXk6IFwidmFsdWVcIixcbiAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICBvbGRWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHRyaWdnZXJSZWYocmVmMikge1xuICBpZiAocmVmMi5kZXApIHtcbiAgICB7XG4gICAgICByZWYyLmRlcC50cmlnZ2VyKHtcbiAgICAgICAgdGFyZ2V0OiByZWYyLFxuICAgICAgICB0eXBlOiBcInNldFwiLFxuICAgICAgICBrZXk6IFwidmFsdWVcIixcbiAgICAgICAgbmV3VmFsdWU6IHJlZjIuX3ZhbHVlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHVucmVmKHJlZjIpIHtcbiAgcmV0dXJuIGlzUmVmKHJlZjIpID8gcmVmMi52YWx1ZSA6IHJlZjI7XG59XG5mdW5jdGlvbiB0b1ZhbHVlKHNvdXJjZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbihzb3VyY2UpID8gc291cmNlKCkgOiB1bnJlZihzb3VyY2UpO1xufVxuY29uc3Qgc2hhbGxvd1Vud3JhcEhhbmRsZXJzID0ge1xuICBnZXQ6ICh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpID0+IGtleSA9PT0gXCJfX3ZfcmF3XCIgPyB0YXJnZXQgOiB1bnJlZihSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpKSxcbiAgc2V0OiAodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcikgPT4ge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgaWYgKGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XG4gICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBwcm94eVJlZnMob2JqZWN0V2l0aFJlZnMpIHtcbiAgcmV0dXJuIGlzUmVhY3RpdmUob2JqZWN0V2l0aFJlZnMpID8gb2JqZWN0V2l0aFJlZnMgOiBuZXcgUHJveHkob2JqZWN0V2l0aFJlZnMsIHNoYWxsb3dVbndyYXBIYW5kbGVycyk7XG59XG5jbGFzcyBDdXN0b21SZWZJbXBsIHtcbiAgY29uc3RydWN0b3IoZmFjdG9yeSkge1xuICAgIHRoaXNbXCJfX3ZfaXNSZWZcIl0gPSB0cnVlO1xuICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICAgIGNvbnN0IGRlcCA9IHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICAgIGNvbnN0IHsgZ2V0LCBzZXQgfSA9IGZhY3RvcnkoZGVwLnRyYWNrLmJpbmQoZGVwKSwgZGVwLnRyaWdnZXIuYmluZChkZXApKTtcbiAgICB0aGlzLl9nZXQgPSBnZXQ7XG4gICAgdGhpcy5fc2V0ID0gc2V0O1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSB0aGlzLl9nZXQoKTtcbiAgfVxuICBzZXQgdmFsdWUobmV3VmFsKSB7XG4gICAgdGhpcy5fc2V0KG5ld1ZhbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGN1c3RvbVJlZihmYWN0b3J5KSB7XG4gIHJldHVybiBuZXcgQ3VzdG9tUmVmSW1wbChmYWN0b3J5KTtcbn1cbmZ1bmN0aW9uIHRvUmVmcyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3h5KG9iamVjdCkpIHtcbiAgICB3YXJuJDIoYHRvUmVmcygpIGV4cGVjdHMgYSByZWFjdGl2ZSBvYmplY3QgYnV0IHJlY2VpdmVkIGEgcGxhaW4gb25lLmApO1xuICB9XG4gIGNvbnN0IHJldCA9IGlzQXJyYXkob2JqZWN0KSA/IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKSA6IHt9O1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICByZXRba2V5XSA9IHByb3BlcnR5VG9SZWYob2JqZWN0LCBrZXkpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5jbGFzcyBPYmplY3RSZWZJbXBsIHtcbiAgY29uc3RydWN0b3IoX29iamVjdCwgX2tleSwgX2RlZmF1bHRWYWx1ZSkge1xuICAgIHRoaXMuX29iamVjdCA9IF9vYmplY3Q7XG4gICAgdGhpcy5fa2V5ID0gX2tleTtcbiAgICB0aGlzLl9kZWZhdWx0VmFsdWUgPSBfZGVmYXVsdFZhbHVlO1xuICAgIHRoaXNbXCJfX3ZfaXNSZWZcIl0gPSB0cnVlO1xuICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICBjb25zdCB2YWwgPSB0aGlzLl9vYmplY3RbdGhpcy5fa2V5XTtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSB2YWwgPT09IHZvaWQgMCA/IHRoaXMuX2RlZmF1bHRWYWx1ZSA6IHZhbDtcbiAgfVxuICBzZXQgdmFsdWUobmV3VmFsKSB7XG4gICAgdGhpcy5fb2JqZWN0W3RoaXMuX2tleV0gPSBuZXdWYWw7XG4gIH1cbiAgZ2V0IGRlcCgpIHtcbiAgICByZXR1cm4gZ2V0RGVwRnJvbVJlYWN0aXZlKHRvUmF3KHRoaXMuX29iamVjdCksIHRoaXMuX2tleSk7XG4gIH1cbn1cbmNsYXNzIEdldHRlclJlZkltcGwge1xuICBjb25zdHJ1Y3RvcihfZ2V0dGVyKSB7XG4gICAgdGhpcy5fZ2V0dGVyID0gX2dldHRlcjtcbiAgICB0aGlzW1wiX192X2lzUmVmXCJdID0gdHJ1ZTtcbiAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIl0gPSB0cnVlO1xuICAgIHRoaXMuX3ZhbHVlID0gdm9pZCAwO1xuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWUgPSB0aGlzLl9nZXR0ZXIoKTtcbiAgfVxufVxuZnVuY3Rpb24gdG9SZWYoc291cmNlLCBrZXksIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoaXNSZWYoc291cmNlKSkge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XG4gICAgcmV0dXJuIG5ldyBHZXR0ZXJSZWZJbXBsKHNvdXJjZSk7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3Qoc291cmNlKSAmJiBhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiBwcm9wZXJ0eVRvUmVmKHNvdXJjZSwga2V5LCBkZWZhdWx0VmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZWYoc291cmNlKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJvcGVydHlUb1JlZihzb3VyY2UsIGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gIGNvbnN0IHZhbCA9IHNvdXJjZVtrZXldO1xuICByZXR1cm4gaXNSZWYodmFsKSA/IHZhbCA6IG5ldyBPYmplY3RSZWZJbXBsKHNvdXJjZSwga2V5LCBkZWZhdWx0VmFsdWUpO1xufVxuXG5jbGFzcyBDb21wdXRlZFJlZkltcGwge1xuICBjb25zdHJ1Y3Rvcihmbiwgc2V0dGVyLCBpc1NTUikge1xuICAgIHRoaXMuZm4gPSBmbjtcbiAgICB0aGlzLnNldHRlciA9IHNldHRlcjtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLl92YWx1ZSA9IHZvaWQgMDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLmRlcCA9IG5ldyBEZXAodGhpcyk7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xuICAgIC8vIFRPRE8gaXNvbGF0ZWREZWNsYXJhdGlvbnMgXCJfX3ZfaXNSZWFkb25seVwiXG4gICAgLy8gQSBjb21wdXRlZCBpcyBhbHNvIGEgc3Vic2NyaWJlciB0aGF0IHRyYWNrcyBvdGhlciBkZXBzXG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5kZXBzID0gdm9pZCAwO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZGVwc1RhaWwgPSB2b2lkIDA7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5mbGFncyA9IDE2O1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMuZ2xvYmFsVmVyc2lvbiA9IGdsb2JhbFZlcnNpb24gLSAxO1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHRoaXMubmV4dCA9IHZvaWQgMDtcbiAgICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgIHRoaXMuZWZmZWN0ID0gdGhpcztcbiAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIl0gPSAhc2V0dGVyO1xuICAgIHRoaXMuaXNTU1IgPSBpc1NTUjtcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBub3RpZnkoKSB7XG4gICAgdGhpcy5mbGFncyB8PSAxNjtcbiAgICBpZiAoISh0aGlzLmZsYWdzICYgOCkgJiYgLy8gYXZvaWQgaW5maW5pdGUgc2VsZiByZWN1cnNpb25cbiAgICBhY3RpdmVTdWIgIT09IHRoaXMpIHtcbiAgICAgIGJhdGNoKHRoaXMsIHRydWUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGdldCB2YWx1ZSgpIHtcbiAgICBjb25zdCBsaW5rID0gdGhpcy5kZXAudHJhY2soe1xuICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgdHlwZTogXCJnZXRcIixcbiAgICAgIGtleTogXCJ2YWx1ZVwiXG4gICAgfSkgO1xuICAgIHJlZnJlc2hDb21wdXRlZCh0aGlzKTtcbiAgICBpZiAobGluaykge1xuICAgICAgbGluay52ZXJzaW9uID0gdGhpcy5kZXAudmVyc2lvbjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG4gIHNldCB2YWx1ZShuZXdWYWx1ZSkge1xuICAgIGlmICh0aGlzLnNldHRlcikge1xuICAgICAgdGhpcy5zZXR0ZXIobmV3VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDIoXCJXcml0ZSBvcGVyYXRpb24gZmFpbGVkOiBjb21wdXRlZCB2YWx1ZSBpcyByZWFkb25seVwiKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbXB1dGVkJDEoZ2V0dGVyT3JPcHRpb25zLCBkZWJ1Z09wdGlvbnMsIGlzU1NSID0gZmFsc2UpIHtcbiAgbGV0IGdldHRlcjtcbiAgbGV0IHNldHRlcjtcbiAgaWYgKGlzRnVuY3Rpb24oZ2V0dGVyT3JPcHRpb25zKSkge1xuICAgIGdldHRlciA9IGdldHRlck9yT3B0aW9ucztcbiAgfSBlbHNlIHtcbiAgICBnZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnMuZ2V0O1xuICAgIHNldHRlciA9IGdldHRlck9yT3B0aW9ucy5zZXQ7XG4gIH1cbiAgY29uc3QgY1JlZiA9IG5ldyBDb21wdXRlZFJlZkltcGwoZ2V0dGVyLCBzZXR0ZXIsIGlzU1NSKTtcbiAgaWYgKGRlYnVnT3B0aW9ucyAmJiAhaXNTU1IpIHtcbiAgICBjUmVmLm9uVHJhY2sgPSBkZWJ1Z09wdGlvbnMub25UcmFjaztcbiAgICBjUmVmLm9uVHJpZ2dlciA9IGRlYnVnT3B0aW9ucy5vblRyaWdnZXI7XG4gIH1cbiAgcmV0dXJuIGNSZWY7XG59XG5cbmNvbnN0IFRyYWNrT3BUeXBlcyA9IHtcbiAgXCJHRVRcIjogXCJnZXRcIixcbiAgXCJIQVNcIjogXCJoYXNcIixcbiAgXCJJVEVSQVRFXCI6IFwiaXRlcmF0ZVwiXG59O1xuY29uc3QgVHJpZ2dlck9wVHlwZXMgPSB7XG4gIFwiU0VUXCI6IFwic2V0XCIsXG4gIFwiQUREXCI6IFwiYWRkXCIsXG4gIFwiREVMRVRFXCI6IFwiZGVsZXRlXCIsXG4gIFwiQ0xFQVJcIjogXCJjbGVhclwiXG59O1xuXG5jb25zdCBJTklUSUFMX1dBVENIRVJfVkFMVUUgPSB7fTtcbmNvbnN0IGNsZWFudXBNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmxldCBhY3RpdmVXYXRjaGVyID0gdm9pZCAwO1xuZnVuY3Rpb24gZ2V0Q3VycmVudFdhdGNoZXIoKSB7XG4gIHJldHVybiBhY3RpdmVXYXRjaGVyO1xufVxuZnVuY3Rpb24gb25XYXRjaGVyQ2xlYW51cChjbGVhbnVwRm4sIGZhaWxTaWxlbnRseSA9IGZhbHNlLCBvd25lciA9IGFjdGl2ZVdhdGNoZXIpIHtcbiAgaWYgKG93bmVyKSB7XG4gICAgbGV0IGNsZWFudXBzID0gY2xlYW51cE1hcC5nZXQob3duZXIpO1xuICAgIGlmICghY2xlYW51cHMpIGNsZWFudXBNYXAuc2V0KG93bmVyLCBjbGVhbnVwcyA9IFtdKTtcbiAgICBjbGVhbnVwcy5wdXNoKGNsZWFudXBGbik7XG4gIH0gZWxzZSBpZiAoIWZhaWxTaWxlbnRseSkge1xuICAgIHdhcm4kMihcbiAgICAgIGBvbldhdGNoZXJDbGVhbnVwKCkgd2FzIGNhbGxlZCB3aGVuIHRoZXJlIHdhcyBubyBhY3RpdmUgd2F0Y2hlciB0byBhc3NvY2lhdGUgd2l0aC5gXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gd2F0Y2gkMShzb3VyY2UsIGNiLCBvcHRpb25zID0gRU1QVFlfT0JKKSB7XG4gIGNvbnN0IHsgaW1tZWRpYXRlLCBkZWVwLCBvbmNlLCBzY2hlZHVsZXIsIGF1Z21lbnRKb2IsIGNhbGwgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHdhcm5JbnZhbGlkU291cmNlID0gKHMpID0+IHtcbiAgICAob3B0aW9ucy5vbldhcm4gfHwgd2FybiQyKShcbiAgICAgIGBJbnZhbGlkIHdhdGNoIHNvdXJjZTogYCxcbiAgICAgIHMsXG4gICAgICBgQSB3YXRjaCBzb3VyY2UgY2FuIG9ubHkgYmUgYSBnZXR0ZXIvZWZmZWN0IGZ1bmN0aW9uLCBhIHJlZiwgYSByZWFjdGl2ZSBvYmplY3QsIG9yIGFuIGFycmF5IG9mIHRoZXNlIHR5cGVzLmBcbiAgICApO1xuICB9O1xuICBjb25zdCByZWFjdGl2ZUdldHRlciA9IChzb3VyY2UyKSA9PiB7XG4gICAgaWYgKGRlZXApIHJldHVybiBzb3VyY2UyO1xuICAgIGlmIChpc1NoYWxsb3coc291cmNlMikgfHwgZGVlcCA9PT0gZmFsc2UgfHwgZGVlcCA9PT0gMClcbiAgICAgIHJldHVybiB0cmF2ZXJzZShzb3VyY2UyLCAxKTtcbiAgICByZXR1cm4gdHJhdmVyc2Uoc291cmNlMik7XG4gIH07XG4gIGxldCBlZmZlY3Q7XG4gIGxldCBnZXR0ZXI7XG4gIGxldCBjbGVhbnVwO1xuICBsZXQgYm91bmRDbGVhbnVwO1xuICBsZXQgZm9yY2VUcmlnZ2VyID0gZmFsc2U7XG4gIGxldCBpc011bHRpU291cmNlID0gZmFsc2U7XG4gIGlmIChpc1JlZihzb3VyY2UpKSB7XG4gICAgZ2V0dGVyID0gKCkgPT4gc291cmNlLnZhbHVlO1xuICAgIGZvcmNlVHJpZ2dlciA9IGlzU2hhbGxvdyhzb3VyY2UpO1xuICB9IGVsc2UgaWYgKGlzUmVhY3RpdmUoc291cmNlKSkge1xuICAgIGdldHRlciA9ICgpID0+IHJlYWN0aXZlR2V0dGVyKHNvdXJjZSk7XG4gICAgZm9yY2VUcmlnZ2VyID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICBpc011bHRpU291cmNlID0gdHJ1ZTtcbiAgICBmb3JjZVRyaWdnZXIgPSBzb3VyY2Uuc29tZSgocykgPT4gaXNSZWFjdGl2ZShzKSB8fCBpc1NoYWxsb3cocykpO1xuICAgIGdldHRlciA9ICgpID0+IHNvdXJjZS5tYXAoKHMpID0+IHtcbiAgICAgIGlmIChpc1JlZihzKSkge1xuICAgICAgICByZXR1cm4gcy52YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNSZWFjdGl2ZShzKSkge1xuICAgICAgICByZXR1cm4gcmVhY3RpdmVHZXR0ZXIocyk7XG4gICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24ocykpIHtcbiAgICAgICAgcmV0dXJuIGNhbGwgPyBjYWxsKHMsIDIpIDogcygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybkludmFsaWRTb3VyY2Uocyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICBnZXR0ZXIgPSBjYWxsID8gKCkgPT4gY2FsbChzb3VyY2UsIDIpIDogc291cmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZXR0ZXIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjbGVhbnVwKSB7XG4gICAgICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudEVmZmVjdCA9IGFjdGl2ZVdhdGNoZXI7XG4gICAgICAgIGFjdGl2ZVdhdGNoZXIgPSBlZmZlY3Q7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGwgPyBjYWxsKHNvdXJjZSwgMywgW2JvdW5kQ2xlYW51cF0pIDogc291cmNlKGJvdW5kQ2xlYW51cCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgYWN0aXZlV2F0Y2hlciA9IGN1cnJlbnRFZmZlY3Q7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGdldHRlciA9IE5PT1A7XG4gICAgd2FybkludmFsaWRTb3VyY2Uoc291cmNlKTtcbiAgfVxuICBpZiAoY2IgJiYgZGVlcCkge1xuICAgIGNvbnN0IGJhc2VHZXR0ZXIgPSBnZXR0ZXI7XG4gICAgY29uc3QgZGVwdGggPSBkZWVwID09PSB0cnVlID8gSW5maW5pdHkgOiBkZWVwO1xuICAgIGdldHRlciA9ICgpID0+IHRyYXZlcnNlKGJhc2VHZXR0ZXIoKSwgZGVwdGgpO1xuICB9XG4gIGNvbnN0IHNjb3BlID0gZ2V0Q3VycmVudFNjb3BlKCk7XG4gIGNvbnN0IHdhdGNoSGFuZGxlID0gKCkgPT4ge1xuICAgIGVmZmVjdC5zdG9wKCk7XG4gICAgaWYgKHNjb3BlICYmIHNjb3BlLmFjdGl2ZSkge1xuICAgICAgcmVtb3ZlKHNjb3BlLmVmZmVjdHMsIGVmZmVjdCk7XG4gICAgfVxuICB9O1xuICBpZiAob25jZSAmJiBjYikge1xuICAgIGNvbnN0IF9jYiA9IGNiO1xuICAgIGNiID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIF9jYiguLi5hcmdzKTtcbiAgICAgIHdhdGNoSGFuZGxlKCk7XG4gICAgfTtcbiAgfVxuICBsZXQgb2xkVmFsdWUgPSBpc011bHRpU291cmNlID8gbmV3IEFycmF5KHNvdXJjZS5sZW5ndGgpLmZpbGwoSU5JVElBTF9XQVRDSEVSX1ZBTFVFKSA6IElOSVRJQUxfV0FUQ0hFUl9WQUxVRTtcbiAgY29uc3Qgam9iID0gKGltbWVkaWF0ZUZpcnN0UnVuKSA9PiB7XG4gICAgaWYgKCEoZWZmZWN0LmZsYWdzICYgMSkgfHwgIWVmZmVjdC5kaXJ0eSAmJiAhaW1tZWRpYXRlRmlyc3RSdW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNiKSB7XG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IGVmZmVjdC5ydW4oKTtcbiAgICAgIGlmIChkZWVwIHx8IGZvcmNlVHJpZ2dlciB8fCAoaXNNdWx0aVNvdXJjZSA/IG5ld1ZhbHVlLnNvbWUoKHYsIGkpID0+IGhhc0NoYW5nZWQodiwgb2xkVmFsdWVbaV0pKSA6IGhhc0NoYW5nZWQobmV3VmFsdWUsIG9sZFZhbHVlKSkpIHtcbiAgICAgICAgaWYgKGNsZWFudXApIHtcbiAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudFdhdGNoZXIgPSBhY3RpdmVXYXRjaGVyO1xuICAgICAgICBhY3RpdmVXYXRjaGVyID0gZWZmZWN0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGFyZ3MgPSBbXG4gICAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICAgIC8vIHBhc3MgdW5kZWZpbmVkIGFzIHRoZSBvbGQgdmFsdWUgd2hlbiBpdCdzIGNoYW5nZWQgZm9yIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgICAgICBvbGRWYWx1ZSA9PT0gSU5JVElBTF9XQVRDSEVSX1ZBTFVFID8gdm9pZCAwIDogaXNNdWx0aVNvdXJjZSAmJiBvbGRWYWx1ZVswXSA9PT0gSU5JVElBTF9XQVRDSEVSX1ZBTFVFID8gW10gOiBvbGRWYWx1ZSxcbiAgICAgICAgICAgIGJvdW5kQ2xlYW51cFxuICAgICAgICAgIF07XG4gICAgICAgICAgb2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICBjYWxsID8gY2FsbChjYiwgMywgYXJncykgOiAoXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBjYiguLi5hcmdzKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgYWN0aXZlV2F0Y2hlciA9IGN1cnJlbnRXYXRjaGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVmZmVjdC5ydW4oKTtcbiAgICB9XG4gIH07XG4gIGlmIChhdWdtZW50Sm9iKSB7XG4gICAgYXVnbWVudEpvYihqb2IpO1xuICB9XG4gIGVmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChnZXR0ZXIpO1xuICBlZmZlY3Quc2NoZWR1bGVyID0gc2NoZWR1bGVyID8gKCkgPT4gc2NoZWR1bGVyKGpvYiwgZmFsc2UpIDogam9iO1xuICBib3VuZENsZWFudXAgPSAoZm4pID0+IG9uV2F0Y2hlckNsZWFudXAoZm4sIGZhbHNlLCBlZmZlY3QpO1xuICBjbGVhbnVwID0gZWZmZWN0Lm9uU3RvcCA9ICgpID0+IHtcbiAgICBjb25zdCBjbGVhbnVwcyA9IGNsZWFudXBNYXAuZ2V0KGVmZmVjdCk7XG4gICAgaWYgKGNsZWFudXBzKSB7XG4gICAgICBpZiAoY2FsbCkge1xuICAgICAgICBjYWxsKGNsZWFudXBzLCA0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3QgY2xlYW51cDIgb2YgY2xlYW51cHMpIGNsZWFudXAyKCk7XG4gICAgICB9XG4gICAgICBjbGVhbnVwTWFwLmRlbGV0ZShlZmZlY3QpO1xuICAgIH1cbiAgfTtcbiAge1xuICAgIGVmZmVjdC5vblRyYWNrID0gb3B0aW9ucy5vblRyYWNrO1xuICAgIGVmZmVjdC5vblRyaWdnZXIgPSBvcHRpb25zLm9uVHJpZ2dlcjtcbiAgfVxuICBpZiAoY2IpIHtcbiAgICBpZiAoaW1tZWRpYXRlKSB7XG4gICAgICBqb2IodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9sZFZhbHVlID0gZWZmZWN0LnJ1bigpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzY2hlZHVsZXIpIHtcbiAgICBzY2hlZHVsZXIoam9iLmJpbmQobnVsbCwgdHJ1ZSksIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGVmZmVjdC5ydW4oKTtcbiAgfVxuICB3YXRjaEhhbmRsZS5wYXVzZSA9IGVmZmVjdC5wYXVzZS5iaW5kKGVmZmVjdCk7XG4gIHdhdGNoSGFuZGxlLnJlc3VtZSA9IGVmZmVjdC5yZXN1bWUuYmluZChlZmZlY3QpO1xuICB3YXRjaEhhbmRsZS5zdG9wID0gd2F0Y2hIYW5kbGU7XG4gIHJldHVybiB3YXRjaEhhbmRsZTtcbn1cbmZ1bmN0aW9uIHRyYXZlcnNlKHZhbHVlLCBkZXB0aCA9IEluZmluaXR5LCBzZWVuKSB7XG4gIGlmIChkZXB0aCA8PSAwIHx8ICFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWVbXCJfX3Zfc2tpcFwiXSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBzZWVuID0gc2VlbiB8fCAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBpZiAoc2Vlbi5oYXModmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHNlZW4uYWRkKHZhbHVlKTtcbiAgZGVwdGgtLTtcbiAgaWYgKGlzUmVmKHZhbHVlKSkge1xuICAgIHRyYXZlcnNlKHZhbHVlLnZhbHVlLCBkZXB0aCwgc2Vlbik7XG4gIH0gZWxzZSBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZVtpXSwgZGVwdGgsIHNlZW4pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1NldCh2YWx1ZSkgfHwgaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaCgodikgPT4ge1xuICAgICAgdHJhdmVyc2UodiwgZGVwdGgsIHNlZW4pO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcbiAgICAgIHRyYXZlcnNlKHZhbHVlW2tleV0sIGRlcHRoLCBzZWVuKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh2YWx1ZSkpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgICAgdHJhdmVyc2UodmFsdWVba2V5XSwgZGVwdGgsIHNlZW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmNvbnN0IHN0YWNrJDEgPSBbXTtcbmZ1bmN0aW9uIHB1c2hXYXJuaW5nQ29udGV4dCh2bm9kZSkge1xuICBzdGFjayQxLnB1c2godm5vZGUpO1xufVxuZnVuY3Rpb24gcG9wV2FybmluZ0NvbnRleHQoKSB7XG4gIHN0YWNrJDEucG9wKCk7XG59XG5sZXQgaXNXYXJuaW5nID0gZmFsc2U7XG5mdW5jdGlvbiB3YXJuJDEobXNnLCAuLi5hcmdzKSB7XG4gIGlmIChpc1dhcm5pbmcpIHJldHVybjtcbiAgaXNXYXJuaW5nID0gdHJ1ZTtcbiAgcGF1c2VUcmFja2luZygpO1xuICBjb25zdCBpbnN0YW5jZSA9IHN0YWNrJDEubGVuZ3RoID8gc3RhY2skMVtzdGFjayQxLmxlbmd0aCAtIDFdLmNvbXBvbmVudCA6IG51bGw7XG4gIGNvbnN0IGFwcFdhcm5IYW5kbGVyID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcud2FybkhhbmRsZXI7XG4gIGNvbnN0IHRyYWNlID0gZ2V0Q29tcG9uZW50VHJhY2UoKTtcbiAgaWYgKGFwcFdhcm5IYW5kbGVyKSB7XG4gICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKFxuICAgICAgYXBwV2FybkhhbmRsZXIsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDExLFxuICAgICAgW1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgbXNnICsgYXJncy5tYXAoKGEpID0+IHtcbiAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSBhLnRvU3RyaW5nKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChhKSkgIT0gbnVsbCA/IF9iIDogSlNPTi5zdHJpbmdpZnkoYSk7XG4gICAgICAgIH0pLmpvaW4oXCJcIiksXG4gICAgICAgIGluc3RhbmNlICYmIGluc3RhbmNlLnByb3h5LFxuICAgICAgICB0cmFjZS5tYXAoXG4gICAgICAgICAgKHsgdm5vZGUgfSkgPT4gYGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIHZub2RlLnR5cGUpfT5gXG4gICAgICAgICkuam9pbihcIlxcblwiKSxcbiAgICAgICAgdHJhY2VcbiAgICAgIF1cbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHdhcm5BcmdzID0gW2BbVnVlIHdhcm5dOiAke21zZ31gLCAuLi5hcmdzXTtcbiAgICBpZiAodHJhY2UubGVuZ3RoICYmIC8vIGF2b2lkIHNwYW1taW5nIGNvbnNvbGUgZHVyaW5nIHRlc3RzXG4gICAgdHJ1ZSkge1xuICAgICAgd2FybkFyZ3MucHVzaChgXG5gLCAuLi5mb3JtYXRUcmFjZSh0cmFjZSkpO1xuICAgIH1cbiAgICBjb25zb2xlLndhcm4oLi4ud2FybkFyZ3MpO1xuICB9XG4gIHJlc2V0VHJhY2tpbmcoKTtcbiAgaXNXYXJuaW5nID0gZmFsc2U7XG59XG5mdW5jdGlvbiBnZXRDb21wb25lbnRUcmFjZSgpIHtcbiAgbGV0IGN1cnJlbnRWTm9kZSA9IHN0YWNrJDFbc3RhY2skMS5sZW5ndGggLSAxXTtcbiAgaWYgKCFjdXJyZW50Vk5vZGUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3Qgbm9ybWFsaXplZFN0YWNrID0gW107XG4gIHdoaWxlIChjdXJyZW50Vk5vZGUpIHtcbiAgICBjb25zdCBsYXN0ID0gbm9ybWFsaXplZFN0YWNrWzBdO1xuICAgIGlmIChsYXN0ICYmIGxhc3Qudm5vZGUgPT09IGN1cnJlbnRWTm9kZSkge1xuICAgICAgbGFzdC5yZWN1cnNlQ291bnQrKztcbiAgICB9IGVsc2Uge1xuICAgICAgbm9ybWFsaXplZFN0YWNrLnB1c2goe1xuICAgICAgICB2bm9kZTogY3VycmVudFZOb2RlLFxuICAgICAgICByZWN1cnNlQ291bnQ6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBwYXJlbnRJbnN0YW5jZSA9IGN1cnJlbnRWTm9kZS5jb21wb25lbnQgJiYgY3VycmVudFZOb2RlLmNvbXBvbmVudC5wYXJlbnQ7XG4gICAgY3VycmVudFZOb2RlID0gcGFyZW50SW5zdGFuY2UgJiYgcGFyZW50SW5zdGFuY2Uudm5vZGU7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWRTdGFjaztcbn1cbmZ1bmN0aW9uIGZvcm1hdFRyYWNlKHRyYWNlKSB7XG4gIGNvbnN0IGxvZ3MgPSBbXTtcbiAgdHJhY2UuZm9yRWFjaCgoZW50cnksIGkpID0+IHtcbiAgICBsb2dzLnB1c2goLi4uaSA9PT0gMCA/IFtdIDogW2BcbmBdLCAuLi5mb3JtYXRUcmFjZUVudHJ5KGVudHJ5KSk7XG4gIH0pO1xuICByZXR1cm4gbG9ncztcbn1cbmZ1bmN0aW9uIGZvcm1hdFRyYWNlRW50cnkoeyB2bm9kZSwgcmVjdXJzZUNvdW50IH0pIHtcbiAgY29uc3QgcG9zdGZpeCA9IHJlY3Vyc2VDb3VudCA+IDAgPyBgLi4uICgke3JlY3Vyc2VDb3VudH0gcmVjdXJzaXZlIGNhbGxzKWAgOiBgYDtcbiAgY29uc3QgaXNSb290ID0gdm5vZGUuY29tcG9uZW50ID8gdm5vZGUuY29tcG9uZW50LnBhcmVudCA9PSBudWxsIDogZmFsc2U7XG4gIGNvbnN0IG9wZW4gPSBgIGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUoXG4gICAgdm5vZGUuY29tcG9uZW50LFxuICAgIHZub2RlLnR5cGUsXG4gICAgaXNSb290XG4gICl9YDtcbiAgY29uc3QgY2xvc2UgPSBgPmAgKyBwb3N0Zml4O1xuICByZXR1cm4gdm5vZGUucHJvcHMgPyBbb3BlbiwgLi4uZm9ybWF0UHJvcHModm5vZGUucHJvcHMpLCBjbG9zZV0gOiBbb3BlbiArIGNsb3NlXTtcbn1cbmZ1bmN0aW9uIGZvcm1hdFByb3BzKHByb3BzKSB7XG4gIGNvbnN0IHJlcyA9IFtdO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpO1xuICBrZXlzLnNsaWNlKDAsIDMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIHJlcy5wdXNoKC4uLmZvcm1hdFByb3Aoa2V5LCBwcm9wc1trZXldKSk7XG4gIH0pO1xuICBpZiAoa2V5cy5sZW5ndGggPiAzKSB7XG4gICAgcmVzLnB1c2goYCAuLi5gKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gZm9ybWF0UHJvcChrZXksIHZhbHVlLCByYXcpIHtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XG4gIH0gZWxzZSBpZiAoaXNSZWYodmFsdWUpKSB7XG4gICAgdmFsdWUgPSBmb3JtYXRQcm9wKGtleSwgdG9SYXcodmFsdWUudmFsdWUpLCB0cnVlKTtcbiAgICByZXR1cm4gcmF3ID8gdmFsdWUgOiBbYCR7a2V5fT1SZWY8YCwgdmFsdWUsIGA+YF07XG4gIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICByZXR1cm4gW2Ake2tleX09Zm4ke3ZhbHVlLm5hbWUgPyBgPCR7dmFsdWUubmFtZX0+YCA6IGBgfWBdO1xuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PWAsIHZhbHVlXTtcbiAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0TnVtYmVyKHZhbCwgdHlwZSkge1xuICBpZiAodmFsID09PSB2b2lkIDApIHtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCAhPT0gXCJudW1iZXJcIikge1xuICAgIHdhcm4kMShgJHt0eXBlfSBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBnb3QgJHtKU09OLnN0cmluZ2lmeSh2YWwpfS5gKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybiQxKGAke3R5cGV9IGlzIE5hTiAtIHRoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC5gKTtcbiAgfVxufVxuXG5jb25zdCBFcnJvckNvZGVzID0ge1xuICBcIlNFVFVQX0ZVTkNUSU9OXCI6IDAsXG4gIFwiMFwiOiBcIlNFVFVQX0ZVTkNUSU9OXCIsXG4gIFwiUkVOREVSX0ZVTkNUSU9OXCI6IDEsXG4gIFwiMVwiOiBcIlJFTkRFUl9GVU5DVElPTlwiLFxuICBcIk5BVElWRV9FVkVOVF9IQU5ETEVSXCI6IDUsXG4gIFwiNVwiOiBcIk5BVElWRV9FVkVOVF9IQU5ETEVSXCIsXG4gIFwiQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVJcIjogNixcbiAgXCI2XCI6IFwiQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVJcIixcbiAgXCJWTk9ERV9IT09LXCI6IDcsXG4gIFwiN1wiOiBcIlZOT0RFX0hPT0tcIixcbiAgXCJESVJFQ1RJVkVfSE9PS1wiOiA4LFxuICBcIjhcIjogXCJESVJFQ1RJVkVfSE9PS1wiLFxuICBcIlRSQU5TSVRJT05fSE9PS1wiOiA5LFxuICBcIjlcIjogXCJUUkFOU0lUSU9OX0hPT0tcIixcbiAgXCJBUFBfRVJST1JfSEFORExFUlwiOiAxMCxcbiAgXCIxMFwiOiBcIkFQUF9FUlJPUl9IQU5ETEVSXCIsXG4gIFwiQVBQX1dBUk5fSEFORExFUlwiOiAxMSxcbiAgXCIxMVwiOiBcIkFQUF9XQVJOX0hBTkRMRVJcIixcbiAgXCJGVU5DVElPTl9SRUZcIjogMTIsXG4gIFwiMTJcIjogXCJGVU5DVElPTl9SRUZcIixcbiAgXCJBU1lOQ19DT01QT05FTlRfTE9BREVSXCI6IDEzLFxuICBcIjEzXCI6IFwiQVNZTkNfQ09NUE9ORU5UX0xPQURFUlwiLFxuICBcIlNDSEVEVUxFUlwiOiAxNCxcbiAgXCIxNFwiOiBcIlNDSEVEVUxFUlwiLFxuICBcIkNPTVBPTkVOVF9VUERBVEVcIjogMTUsXG4gIFwiMTVcIjogXCJDT01QT05FTlRfVVBEQVRFXCIsXG4gIFwiQVBQX1VOTU9VTlRfQ0xFQU5VUFwiOiAxNixcbiAgXCIxNlwiOiBcIkFQUF9VTk1PVU5UX0NMRUFOVVBcIlxufTtcbmNvbnN0IEVycm9yVHlwZVN0cmluZ3MkMSA9IHtcbiAgW1wic3BcIl06IFwic2VydmVyUHJlZmV0Y2ggaG9va1wiLFxuICBbXCJiY1wiXTogXCJiZWZvcmVDcmVhdGUgaG9va1wiLFxuICBbXCJjXCJdOiBcImNyZWF0ZWQgaG9va1wiLFxuICBbXCJibVwiXTogXCJiZWZvcmVNb3VudCBob29rXCIsXG4gIFtcIm1cIl06IFwibW91bnRlZCBob29rXCIsXG4gIFtcImJ1XCJdOiBcImJlZm9yZVVwZGF0ZSBob29rXCIsXG4gIFtcInVcIl06IFwidXBkYXRlZFwiLFxuICBbXCJidW1cIl06IFwiYmVmb3JlVW5tb3VudCBob29rXCIsXG4gIFtcInVtXCJdOiBcInVubW91bnRlZCBob29rXCIsXG4gIFtcImFcIl06IFwiYWN0aXZhdGVkIGhvb2tcIixcbiAgW1wiZGFcIl06IFwiZGVhY3RpdmF0ZWQgaG9va1wiLFxuICBbXCJlY1wiXTogXCJlcnJvckNhcHR1cmVkIGhvb2tcIixcbiAgW1wicnRjXCJdOiBcInJlbmRlclRyYWNrZWQgaG9va1wiLFxuICBbXCJydGdcIl06IFwicmVuZGVyVHJpZ2dlcmVkIGhvb2tcIixcbiAgWzBdOiBcInNldHVwIGZ1bmN0aW9uXCIsXG4gIFsxXTogXCJyZW5kZXIgZnVuY3Rpb25cIixcbiAgWzJdOiBcIndhdGNoZXIgZ2V0dGVyXCIsXG4gIFszXTogXCJ3YXRjaGVyIGNhbGxiYWNrXCIsXG4gIFs0XTogXCJ3YXRjaGVyIGNsZWFudXAgZnVuY3Rpb25cIixcbiAgWzVdOiBcIm5hdGl2ZSBldmVudCBoYW5kbGVyXCIsXG4gIFs2XTogXCJjb21wb25lbnQgZXZlbnQgaGFuZGxlclwiLFxuICBbN106IFwidm5vZGUgaG9va1wiLFxuICBbOF06IFwiZGlyZWN0aXZlIGhvb2tcIixcbiAgWzldOiBcInRyYW5zaXRpb24gaG9va1wiLFxuICBbMTBdOiBcImFwcCBlcnJvckhhbmRsZXJcIixcbiAgWzExXTogXCJhcHAgd2FybkhhbmRsZXJcIixcbiAgWzEyXTogXCJyZWYgZnVuY3Rpb25cIixcbiAgWzEzXTogXCJhc3luYyBjb21wb25lbnQgbG9hZGVyXCIsXG4gIFsxNF06IFwic2NoZWR1bGVyIGZsdXNoXCIsXG4gIFsxNV06IFwiY29tcG9uZW50IHVwZGF0ZVwiLFxuICBbMTZdOiBcImFwcCB1bm1vdW50IGNsZWFudXAgZnVuY3Rpb25cIlxufTtcbmZ1bmN0aW9uIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIHR5cGUsIGFyZ3MpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYXJncyA/IGZuKC4uLmFyZ3MpIDogZm4oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncykge1xuICBpZiAoaXNGdW5jdGlvbihmbikpIHtcbiAgICBjb25zdCByZXMgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKTtcbiAgICBpZiAocmVzICYmIGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGlmIChpc0FycmF5KGZuKSkge1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlcy5wdXNoKGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGZuW2ldLCBpbnN0YW5jZSwgdHlwZSwgYXJncykpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWVzO1xuICB9IGVsc2Uge1xuICAgIHdhcm4kMShcbiAgICAgIGBJbnZhbGlkIHZhbHVlIHR5cGUgcGFzc2VkIHRvIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKCk6ICR7dHlwZW9mIGZufWBcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlLCB0aHJvd0luRGV2ID0gdHJ1ZSkge1xuICBjb25zdCBjb250ZXh0Vk5vZGUgPSBpbnN0YW5jZSA/IGluc3RhbmNlLnZub2RlIDogbnVsbDtcbiAgY29uc3QgeyBlcnJvckhhbmRsZXIsIHRocm93VW5oYW5kbGVkRXJyb3JJblByb2R1Y3Rpb24gfSA9IGluc3RhbmNlICYmIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnIHx8IEVNUFRZX09CSjtcbiAgaWYgKGluc3RhbmNlKSB7XG4gICAgbGV0IGN1ciA9IGluc3RhbmNlLnBhcmVudDtcbiAgICBjb25zdCBleHBvc2VkSW5zdGFuY2UgPSBpbnN0YW5jZS5wcm94eTtcbiAgICBjb25zdCBlcnJvckluZm8gPSBFcnJvclR5cGVTdHJpbmdzJDFbdHlwZV0gO1xuICAgIHdoaWxlIChjdXIpIHtcbiAgICAgIGNvbnN0IGVycm9yQ2FwdHVyZWRIb29rcyA9IGN1ci5lYztcbiAgICAgIGlmIChlcnJvckNhcHR1cmVkSG9va3MpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcnJvckNhcHR1cmVkSG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZXJyb3JDYXB0dXJlZEhvb2tzW2ldKGVyciwgZXhwb3NlZEluc3RhbmNlLCBlcnJvckluZm8pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3VyID0gY3VyLnBhcmVudDtcbiAgICB9XG4gICAgaWYgKGVycm9ySGFuZGxlcikge1xuICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGVycm9ySGFuZGxlciwgbnVsbCwgMTAsIFtcbiAgICAgICAgZXJyLFxuICAgICAgICBleHBvc2VkSW5zdGFuY2UsXG4gICAgICAgIGVycm9ySW5mb1xuICAgICAgXSk7XG4gICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGxvZ0Vycm9yKGVyciwgdHlwZSwgY29udGV4dFZOb2RlLCB0aHJvd0luRGV2LCB0aHJvd1VuaGFuZGxlZEVycm9ySW5Qcm9kdWN0aW9uKTtcbn1cbmZ1bmN0aW9uIGxvZ0Vycm9yKGVyciwgdHlwZSwgY29udGV4dFZOb2RlLCB0aHJvd0luRGV2ID0gdHJ1ZSwgdGhyb3dJblByb2QgPSBmYWxzZSkge1xuICB7XG4gICAgY29uc3QgaW5mbyA9IEVycm9yVHlwZVN0cmluZ3MkMVt0eXBlXTtcbiAgICBpZiAoY29udGV4dFZOb2RlKSB7XG4gICAgICBwdXNoV2FybmluZ0NvbnRleHQoY29udGV4dFZOb2RlKTtcbiAgICB9XG4gICAgd2FybiQxKGBVbmhhbmRsZWQgZXJyb3Ike2luZm8gPyBgIGR1cmluZyBleGVjdXRpb24gb2YgJHtpbmZvfWAgOiBgYH1gKTtcbiAgICBpZiAoY29udGV4dFZOb2RlKSB7XG4gICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgIH1cbiAgICBpZiAodGhyb3dJbkRldikge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHF1ZXVlID0gW107XG5sZXQgZmx1c2hJbmRleCA9IC0xO1xuY29uc3QgcGVuZGluZ1Bvc3RGbHVzaENicyA9IFtdO1xubGV0IGFjdGl2ZVBvc3RGbHVzaENicyA9IG51bGw7XG5sZXQgcG9zdEZsdXNoSW5kZXggPSAwO1xuY29uc3QgcmVzb2x2ZWRQcm9taXNlID0gLyogQF9fUFVSRV9fICovIFByb21pc2UucmVzb2x2ZSgpO1xubGV0IGN1cnJlbnRGbHVzaFByb21pc2UgPSBudWxsO1xuY29uc3QgUkVDVVJTSU9OX0xJTUlUID0gMTAwO1xuZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgY29uc3QgcCA9IGN1cnJlbnRGbHVzaFByb21pc2UgfHwgcmVzb2x2ZWRQcm9taXNlO1xuICByZXR1cm4gZm4gPyBwLnRoZW4odGhpcyA/IGZuLmJpbmQodGhpcykgOiBmbikgOiBwO1xufVxuZnVuY3Rpb24gZmluZEluc2VydGlvbkluZGV4KGlkKSB7XG4gIGxldCBzdGFydCA9IGZsdXNoSW5kZXggKyAxO1xuICBsZXQgZW5kID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICBjb25zdCBtaWRkbGUgPSBzdGFydCArIGVuZCA+Pj4gMTtcbiAgICBjb25zdCBtaWRkbGVKb2IgPSBxdWV1ZVttaWRkbGVdO1xuICAgIGNvbnN0IG1pZGRsZUpvYklkID0gZ2V0SWQobWlkZGxlSm9iKTtcbiAgICBpZiAobWlkZGxlSm9iSWQgPCBpZCB8fCBtaWRkbGVKb2JJZCA9PT0gaWQgJiYgbWlkZGxlSm9iLmZsYWdzICYgMikge1xuICAgICAgc3RhcnQgPSBtaWRkbGUgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmQgPSBtaWRkbGU7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdGFydDtcbn1cbmZ1bmN0aW9uIHF1ZXVlSm9iKGpvYikge1xuICBpZiAoIShqb2IuZmxhZ3MgJiAxKSkge1xuICAgIGNvbnN0IGpvYklkID0gZ2V0SWQoam9iKTtcbiAgICBjb25zdCBsYXN0Sm9iID0gcXVldWVbcXVldWUubGVuZ3RoIC0gMV07XG4gICAgaWYgKCFsYXN0Sm9iIHx8IC8vIGZhc3QgcGF0aCB3aGVuIHRoZSBqb2IgaWQgaXMgbGFyZ2VyIHRoYW4gdGhlIHRhaWxcbiAgICAhKGpvYi5mbGFncyAmIDIpICYmIGpvYklkID49IGdldElkKGxhc3RKb2IpKSB7XG4gICAgICBxdWV1ZS5wdXNoKGpvYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXVlLnNwbGljZShmaW5kSW5zZXJ0aW9uSW5kZXgoam9iSWQpLCAwLCBqb2IpO1xuICAgIH1cbiAgICBqb2IuZmxhZ3MgfD0gMTtcbiAgICBxdWV1ZUZsdXNoKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHF1ZXVlRmx1c2goKSB7XG4gIGlmICghY3VycmVudEZsdXNoUHJvbWlzZSkge1xuICAgIGN1cnJlbnRGbHVzaFByb21pc2UgPSByZXNvbHZlZFByb21pc2UudGhlbihmbHVzaEpvYnMpO1xuICB9XG59XG5mdW5jdGlvbiBxdWV1ZVBvc3RGbHVzaENiKGNiKSB7XG4gIGlmICghaXNBcnJheShjYikpIHtcbiAgICBpZiAoYWN0aXZlUG9zdEZsdXNoQ2JzICYmIGNiLmlkID09PSAtMSkge1xuICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzLnNwbGljZShwb3N0Rmx1c2hJbmRleCArIDEsIDAsIGNiKTtcbiAgICB9IGVsc2UgaWYgKCEoY2IuZmxhZ3MgJiAxKSkge1xuICAgICAgcGVuZGluZ1Bvc3RGbHVzaENicy5wdXNoKGNiKTtcbiAgICAgIGNiLmZsYWdzIHw9IDE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBlbmRpbmdQb3N0Rmx1c2hDYnMucHVzaCguLi5jYik7XG4gIH1cbiAgcXVldWVGbHVzaCgpO1xufVxuZnVuY3Rpb24gZmx1c2hQcmVGbHVzaENicyhpbnN0YW5jZSwgc2VlbiwgaSA9IGZsdXNoSW5kZXggKyAxKSB7XG4gIHtcbiAgICBzZWVuID0gc2VlbiB8fCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICB9XG4gIGZvciAoOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjYiA9IHF1ZXVlW2ldO1xuICAgIGlmIChjYiAmJiBjYi5mbGFncyAmIDIpIHtcbiAgICAgIGlmIChpbnN0YW5jZSAmJiBjYi5pZCAhPT0gaW5zdGFuY2UudWlkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBjYikpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSwgMSk7XG4gICAgICBpLS07XG4gICAgICBpZiAoY2IuZmxhZ3MgJiA0KSB7XG4gICAgICAgIGNiLmZsYWdzICY9IC0yO1xuICAgICAgfVxuICAgICAgY2IoKTtcbiAgICAgIGlmICghKGNiLmZsYWdzICYgNCkpIHtcbiAgICAgICAgY2IuZmxhZ3MgJj0gLTI7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBmbHVzaFBvc3RGbHVzaENicyhzZWVuKSB7XG4gIGlmIChwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCkge1xuICAgIGNvbnN0IGRlZHVwZWQgPSBbLi4ubmV3IFNldChwZW5kaW5nUG9zdEZsdXNoQ2JzKV0uc29ydChcbiAgICAgIChhLCBiKSA9PiBnZXRJZChhKSAtIGdldElkKGIpXG4gICAgKTtcbiAgICBwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCA9IDA7XG4gICAgaWYgKGFjdGl2ZVBvc3RGbHVzaENicykge1xuICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzLnB1c2goLi4uZGVkdXBlZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFjdGl2ZVBvc3RGbHVzaENicyA9IGRlZHVwZWQ7XG4gICAge1xuICAgICAgc2VlbiA9IHNlZW4gfHwgLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICB9XG4gICAgZm9yIChwb3N0Rmx1c2hJbmRleCA9IDA7IHBvc3RGbHVzaEluZGV4IDwgYWN0aXZlUG9zdEZsdXNoQ2JzLmxlbmd0aDsgcG9zdEZsdXNoSW5kZXgrKykge1xuICAgICAgY29uc3QgY2IgPSBhY3RpdmVQb3N0Rmx1c2hDYnNbcG9zdEZsdXNoSW5kZXhdO1xuICAgICAgaWYgKGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBjYikpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoY2IuZmxhZ3MgJiA0KSB7XG4gICAgICAgIGNiLmZsYWdzICY9IC0yO1xuICAgICAgfVxuICAgICAgaWYgKCEoY2IuZmxhZ3MgJiA4KSkgY2IoKTtcbiAgICAgIGNiLmZsYWdzICY9IC0yO1xuICAgIH1cbiAgICBhY3RpdmVQb3N0Rmx1c2hDYnMgPSBudWxsO1xuICAgIHBvc3RGbHVzaEluZGV4ID0gMDtcbiAgfVxufVxuY29uc3QgZ2V0SWQgPSAoam9iKSA9PiBqb2IuaWQgPT0gbnVsbCA/IGpvYi5mbGFncyAmIDIgPyAtMSA6IEluZmluaXR5IDogam9iLmlkO1xuZnVuY3Rpb24gZmx1c2hKb2JzKHNlZW4pIHtcbiAge1xuICAgIHNlZW4gPSBzZWVuIHx8IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIH1cbiAgY29uc3QgY2hlY2sgPSAoam9iKSA9PiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2Vlbiwgam9iKSA7XG4gIHRyeSB7XG4gICAgZm9yIChmbHVzaEluZGV4ID0gMDsgZmx1c2hJbmRleCA8IHF1ZXVlLmxlbmd0aDsgZmx1c2hJbmRleCsrKSB7XG4gICAgICBjb25zdCBqb2IgPSBxdWV1ZVtmbHVzaEluZGV4XTtcbiAgICAgIGlmIChqb2IgJiYgIShqb2IuZmxhZ3MgJiA4KSkge1xuICAgICAgICBpZiAoY2hlY2soam9iKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqb2IuZmxhZ3MgJiA0KSB7XG4gICAgICAgICAgam9iLmZsYWdzICY9IH4xO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhcbiAgICAgICAgICBqb2IsXG4gICAgICAgICAgam9iLmksXG4gICAgICAgICAgam9iLmkgPyAxNSA6IDE0XG4gICAgICAgICk7XG4gICAgICAgIGlmICghKGpvYi5mbGFncyAmIDQpKSB7XG4gICAgICAgICAgam9iLmZsYWdzICY9IH4xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGZvciAoOyBmbHVzaEluZGV4IDwgcXVldWUubGVuZ3RoOyBmbHVzaEluZGV4KyspIHtcbiAgICAgIGNvbnN0IGpvYiA9IHF1ZXVlW2ZsdXNoSW5kZXhdO1xuICAgICAgaWYgKGpvYikge1xuICAgICAgICBqb2IuZmxhZ3MgJj0gLTI7XG4gICAgICB9XG4gICAgfVxuICAgIGZsdXNoSW5kZXggPSAtMTtcbiAgICBxdWV1ZS5sZW5ndGggPSAwO1xuICAgIGZsdXNoUG9zdEZsdXNoQ2JzKHNlZW4pO1xuICAgIGN1cnJlbnRGbHVzaFByb21pc2UgPSBudWxsO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggfHwgcGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGgpIHtcbiAgICAgIGZsdXNoSm9icyhzZWVuKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNoZWNrUmVjdXJzaXZlVXBkYXRlcyhzZWVuLCBmbikge1xuICBjb25zdCBjb3VudCA9IHNlZW4uZ2V0KGZuKSB8fCAwO1xuICBpZiAoY291bnQgPiBSRUNVUlNJT05fTElNSVQpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGZuLmk7XG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9IGluc3RhbmNlICYmIGdldENvbXBvbmVudE5hbWUoaW5zdGFuY2UudHlwZSk7XG4gICAgaGFuZGxlRXJyb3IoXG4gICAgICBgTWF4aW11bSByZWN1cnNpdmUgdXBkYXRlcyBleGNlZWRlZCR7Y29tcG9uZW50TmFtZSA/IGAgaW4gY29tcG9uZW50IDwke2NvbXBvbmVudE5hbWV9PmAgOiBgYH0uIFRoaXMgbWVhbnMgeW91IGhhdmUgYSByZWFjdGl2ZSBlZmZlY3QgdGhhdCBpcyBtdXRhdGluZyBpdHMgb3duIGRlcGVuZGVuY2llcyBhbmQgdGh1cyByZWN1cnNpdmVseSB0cmlnZ2VyaW5nIGl0c2VsZi4gUG9zc2libGUgc291cmNlcyBpbmNsdWRlIGNvbXBvbmVudCB0ZW1wbGF0ZSwgcmVuZGVyIGZ1bmN0aW9uLCB1cGRhdGVkIGhvb2sgb3Igd2F0Y2hlciBzb3VyY2UgZnVuY3Rpb24uYCxcbiAgICAgIG51bGwsXG4gICAgICAxMFxuICAgICk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgc2Vlbi5zZXQoZm4sIGNvdW50ICsgMSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubGV0IGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcbmNvbnN0IGhtckRpcnR5Q29tcG9uZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG57XG4gIGdldEdsb2JhbFRoaXMoKS5fX1ZVRV9ITVJfUlVOVElNRV9fID0ge1xuICAgIGNyZWF0ZVJlY29yZDogdHJ5V3JhcChjcmVhdGVSZWNvcmQpLFxuICAgIHJlcmVuZGVyOiB0cnlXcmFwKHJlcmVuZGVyKSxcbiAgICByZWxvYWQ6IHRyeVdyYXAocmVsb2FkKVxuICB9O1xufVxuY29uc3QgbWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbmZ1bmN0aW9uIHJlZ2lzdGVySE1SKGluc3RhbmNlKSB7XG4gIGNvbnN0IGlkID0gaW5zdGFuY2UudHlwZS5fX2htcklkO1xuICBsZXQgcmVjb3JkID0gbWFwLmdldChpZCk7XG4gIGlmICghcmVjb3JkKSB7XG4gICAgY3JlYXRlUmVjb3JkKGlkLCBpbnN0YW5jZS50eXBlKTtcbiAgICByZWNvcmQgPSBtYXAuZ2V0KGlkKTtcbiAgfVxuICByZWNvcmQuaW5zdGFuY2VzLmFkZChpbnN0YW5jZSk7XG59XG5mdW5jdGlvbiB1bnJlZ2lzdGVySE1SKGluc3RhbmNlKSB7XG4gIG1hcC5nZXQoaW5zdGFuY2UudHlwZS5fX2htcklkKS5pbnN0YW5jZXMuZGVsZXRlKGluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlY29yZChpZCwgaW5pdGlhbERlZikge1xuICBpZiAobWFwLmhhcyhpZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbWFwLnNldChpZCwge1xuICAgIGluaXRpYWxEZWY6IG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluaXRpYWxEZWYpLFxuICAgIGluc3RhbmNlczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKVxuICB9KTtcbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBub3JtYWxpemVDbGFzc0NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgcmV0dXJuIGlzQ2xhc3NDb21wb25lbnQoY29tcG9uZW50KSA/IGNvbXBvbmVudC5fX3ZjY09wdHMgOiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiByZXJlbmRlcihpZCwgbmV3UmVuZGVyKSB7XG4gIGNvbnN0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICBpZiAoIXJlY29yZCkge1xuICAgIHJldHVybjtcbiAgfVxuICByZWNvcmQuaW5pdGlhbERlZi5yZW5kZXIgPSBuZXdSZW5kZXI7XG4gIFsuLi5yZWNvcmQuaW5zdGFuY2VzXS5mb3JFYWNoKChpbnN0YW5jZSkgPT4ge1xuICAgIGlmIChuZXdSZW5kZXIpIHtcbiAgICAgIGluc3RhbmNlLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgICAgIG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluc3RhbmNlLnR5cGUpLnJlbmRlciA9IG5ld1JlbmRlcjtcbiAgICB9XG4gICAgaW5zdGFuY2UucmVuZGVyQ2FjaGUgPSBbXTtcbiAgICBpc0htclVwZGF0aW5nID0gdHJ1ZTtcbiAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICBpc0htclVwZGF0aW5nID0gZmFsc2U7XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVsb2FkKGlkLCBuZXdDb21wKSB7XG4gIGNvbnN0IHJlY29yZCA9IG1hcC5nZXQoaWQpO1xuICBpZiAoIXJlY29yZCkgcmV0dXJuO1xuICBuZXdDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQobmV3Q29tcCk7XG4gIHVwZGF0ZUNvbXBvbmVudERlZihyZWNvcmQuaW5pdGlhbERlZiwgbmV3Q29tcCk7XG4gIGNvbnN0IGluc3RhbmNlcyA9IFsuLi5yZWNvcmQuaW5zdGFuY2VzXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGluc3RhbmNlc1tpXTtcbiAgICBjb25zdCBvbGRDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5zdGFuY2UudHlwZSk7XG4gICAgbGV0IGRpcnR5SW5zdGFuY2VzID0gaG1yRGlydHlDb21wb25lbnRzLmdldChvbGRDb21wKTtcbiAgICBpZiAoIWRpcnR5SW5zdGFuY2VzKSB7XG4gICAgICBpZiAob2xkQ29tcCAhPT0gcmVjb3JkLmluaXRpYWxEZWYpIHtcbiAgICAgICAgdXBkYXRlQ29tcG9uZW50RGVmKG9sZENvbXAsIG5ld0NvbXApO1xuICAgICAgfVxuICAgICAgaG1yRGlydHlDb21wb25lbnRzLnNldChvbGRDb21wLCBkaXJ0eUluc3RhbmNlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpO1xuICAgIH1cbiAgICBkaXJ0eUluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xuICAgIGluc3RhbmNlLmFwcENvbnRleHQucHJvcHNDYWNoZS5kZWxldGUoaW5zdGFuY2UudHlwZSk7XG4gICAgaW5zdGFuY2UuYXBwQ29udGV4dC5lbWl0c0NhY2hlLmRlbGV0ZShpbnN0YW5jZS50eXBlKTtcbiAgICBpbnN0YW5jZS5hcHBDb250ZXh0Lm9wdGlvbnNDYWNoZS5kZWxldGUoaW5zdGFuY2UudHlwZSk7XG4gICAgaWYgKGluc3RhbmNlLmNlUmVsb2FkKSB7XG4gICAgICBkaXJ0eUluc3RhbmNlcy5hZGQoaW5zdGFuY2UpO1xuICAgICAgaW5zdGFuY2UuY2VSZWxvYWQobmV3Q29tcC5zdHlsZXMpO1xuICAgICAgZGlydHlJbnN0YW5jZXMuZGVsZXRlKGluc3RhbmNlKTtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlLnBhcmVudCkge1xuICAgICAgcXVldWVKb2IoKCkgPT4ge1xuICAgICAgICBpc0htclVwZGF0aW5nID0gdHJ1ZTtcbiAgICAgICAgaW5zdGFuY2UucGFyZW50LnVwZGF0ZSgpO1xuICAgICAgICBpc0htclVwZGF0aW5nID0gZmFsc2U7XG4gICAgICAgIGRpcnR5SW5zdGFuY2VzLmRlbGV0ZShpbnN0YW5jZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlLmFwcENvbnRleHQucmVsb2FkKSB7XG4gICAgICBpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCgpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiW0hNUl0gUm9vdCBvciBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlIG1vZGlmaWVkLiBGdWxsIHJlbG9hZCByZXF1aXJlZC5cIlxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLnJvb3QuY2UgJiYgaW5zdGFuY2UgIT09IGluc3RhbmNlLnJvb3QpIHtcbiAgICAgIGluc3RhbmNlLnJvb3QuY2UuX3JlbW92ZUNoaWxkU3R5bGUob2xkQ29tcCk7XG4gICAgfVxuICB9XG4gIHF1ZXVlUG9zdEZsdXNoQ2IoKCkgPT4ge1xuICAgIGhtckRpcnR5Q29tcG9uZW50cy5jbGVhcigpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudERlZihvbGRDb21wLCBuZXdDb21wKSB7XG4gIGV4dGVuZChvbGRDb21wLCBuZXdDb21wKTtcbiAgZm9yIChjb25zdCBrZXkgaW4gb2xkQ29tcCkge1xuICAgIGlmIChrZXkgIT09IFwiX19maWxlXCIgJiYgIShrZXkgaW4gbmV3Q29tcCkpIHtcbiAgICAgIGRlbGV0ZSBvbGRDb21wW2tleV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiB0cnlXcmFwKGZuKSB7XG4gIHJldHVybiAoaWQsIGFyZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4oaWQsIGFyZyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFtITVJdIFNvbWV0aGluZyB3ZW50IHdyb25nIGR1cmluZyBWdWUgY29tcG9uZW50IGhvdC1yZWxvYWQuIEZ1bGwgcmVsb2FkIHJlcXVpcmVkLmBcbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuXG5sZXQgZGV2dG9vbHMkMTtcbmxldCBidWZmZXIgPSBbXTtcbmxldCBkZXZ0b29sc05vdEluc3RhbGxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gZW1pdCQxKGV2ZW50LCAuLi5hcmdzKSB7XG4gIGlmIChkZXZ0b29scyQxKSB7XG4gICAgZGV2dG9vbHMkMS5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgfSBlbHNlIGlmICghZGV2dG9vbHNOb3RJbnN0YWxsZWQpIHtcbiAgICBidWZmZXIucHVzaCh7IGV2ZW50LCBhcmdzIH0pO1xuICB9XG59XG5mdW5jdGlvbiBzZXREZXZ0b29sc0hvb2skMShob29rLCB0YXJnZXQpIHtcbiAgdmFyIF9hLCBfYjtcbiAgZGV2dG9vbHMkMSA9IGhvb2s7XG4gIGlmIChkZXZ0b29scyQxKSB7XG4gICAgZGV2dG9vbHMkMS5lbmFibGVkID0gdHJ1ZTtcbiAgICBidWZmZXIuZm9yRWFjaCgoeyBldmVudCwgYXJncyB9KSA9PiBkZXZ0b29scyQxLmVtaXQoZXZlbnQsIC4uLmFyZ3MpKTtcbiAgICBidWZmZXIgPSBbXTtcbiAgfSBlbHNlIGlmIChcbiAgICAvLyBoYW5kbGUgbGF0ZSBkZXZ0b29scyBpbmplY3Rpb24gLSBvbmx5IGRvIHRoaXMgaWYgd2UgYXJlIGluIGFuIGFjdHVhbFxuICAgIC8vIGJyb3dzZXIgZW52aXJvbm1lbnQgdG8gYXZvaWQgdGhlIHRpbWVyIGhhbmRsZSBzdGFsbGluZyB0ZXN0IHJ1bm5lciBleGl0XG4gICAgLy8gKCM0ODE1KVxuICAgIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgLy8gc29tZSBlbnZzIG1vY2sgd2luZG93IGJ1dCBub3QgZnVsbHlcbiAgICB3aW5kb3cuSFRNTEVsZW1lbnQgJiYgLy8gYWxzbyBleGNsdWRlIGpzZG9tXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgISgoX2IgPSAoX2EgPSB3aW5kb3cubmF2aWdhdG9yKSA9PSBudWxsID8gdm9pZCAwIDogX2EudXNlckFnZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2IuaW5jbHVkZXMoXCJqc2RvbVwiKSlcbiAgKSB7XG4gICAgY29uc3QgcmVwbGF5ID0gdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18gPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyB8fCBbXTtcbiAgICByZXBsYXkucHVzaCgobmV3SG9vaykgPT4ge1xuICAgICAgc2V0RGV2dG9vbHNIb29rJDEobmV3SG9vaywgdGFyZ2V0KTtcbiAgICB9KTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICghZGV2dG9vbHMkMSkge1xuICAgICAgICB0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyA9IG51bGw7XG4gICAgICAgIGRldnRvb2xzTm90SW5zdGFsbGVkID0gdHJ1ZTtcbiAgICAgICAgYnVmZmVyID0gW107XG4gICAgICB9XG4gICAgfSwgM2UzKTtcbiAgfSBlbHNlIHtcbiAgICBkZXZ0b29sc05vdEluc3RhbGxlZCA9IHRydWU7XG4gICAgYnVmZmVyID0gW107XG4gIH1cbn1cbmZ1bmN0aW9uIGRldnRvb2xzSW5pdEFwcChhcHAsIHZlcnNpb24pIHtcbiAgZW1pdCQxKFwiYXBwOmluaXRcIiAvKiBBUFBfSU5JVCAqLywgYXBwLCB2ZXJzaW9uLCB7XG4gICAgRnJhZ21lbnQsXG4gICAgVGV4dCxcbiAgICBDb21tZW50LFxuICAgIFN0YXRpY1xuICB9KTtcbn1cbmZ1bmN0aW9uIGRldnRvb2xzVW5tb3VudEFwcChhcHApIHtcbiAgZW1pdCQxKFwiYXBwOnVubW91bnRcIiAvKiBBUFBfVU5NT1VOVCAqLywgYXBwKTtcbn1cbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50QWRkZWQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFwiY29tcG9uZW50OmFkZGVkXCIgLyogQ09NUE9ORU5UX0FEREVEICovKTtcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6dXBkYXRlZFwiIC8qIENPTVBPTkVOVF9VUERBVEVEICovKTtcbmNvbnN0IF9kZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKFxuICBcImNvbXBvbmVudDpyZW1vdmVkXCIgLyogQ09NUE9ORU5UX1JFTU9WRUQgKi9cbik7XG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSAoY29tcG9uZW50KSA9PiB7XG4gIGlmIChkZXZ0b29scyQxICYmIHR5cGVvZiBkZXZ0b29scyQxLmNsZWFudXBCdWZmZXIgPT09IFwiZnVuY3Rpb25cIiAmJiAvLyByZW1vdmUgdGhlIGNvbXBvbmVudCBpZiBpdCB3YXNuJ3QgYnVmZmVyZWRcbiAgIWRldnRvb2xzJDEuY2xlYW51cEJ1ZmZlcihjb21wb25lbnQpKSB7XG4gICAgX2RldnRvb2xzQ29tcG9uZW50UmVtb3ZlZChjb21wb25lbnQpO1xuICB9XG59O1xuLyohICNfX05PX1NJREVfRUZGRUNUU19fICovXG4vLyBAX19OT19TSURFX0VGRkVDVFNfX1xuZnVuY3Rpb24gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKGhvb2spIHtcbiAgcmV0dXJuIChjb21wb25lbnQpID0+IHtcbiAgICBlbWl0JDEoXG4gICAgICBob29rLFxuICAgICAgY29tcG9uZW50LmFwcENvbnRleHQuYXBwLFxuICAgICAgY29tcG9uZW50LnVpZCxcbiAgICAgIGNvbXBvbmVudC5wYXJlbnQgPyBjb21wb25lbnQucGFyZW50LnVpZCA6IHZvaWQgMCxcbiAgICAgIGNvbXBvbmVudFxuICAgICk7XG4gIH07XG59XG5jb25zdCBkZXZ0b29sc1BlcmZTdGFydCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhcInBlcmY6c3RhcnRcIiAvKiBQRVJGT1JNQU5DRV9TVEFSVCAqLyk7XG5jb25zdCBkZXZ0b29sc1BlcmZFbmQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlRGV2dG9vbHNQZXJmb3JtYW5jZUhvb2soXCJwZXJmOmVuZFwiIC8qIFBFUkZPUk1BTkNFX0VORCAqLyk7XG5mdW5jdGlvbiBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhob29rKSB7XG4gIHJldHVybiAoY29tcG9uZW50LCB0eXBlLCB0aW1lKSA9PiB7XG4gICAgZW1pdCQxKGhvb2ssIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LnVpZCwgY29tcG9uZW50LCB0eXBlLCB0aW1lKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGRldnRvb2xzQ29tcG9uZW50RW1pdChjb21wb25lbnQsIGV2ZW50LCBwYXJhbXMpIHtcbiAgZW1pdCQxKFxuICAgIFwiY29tcG9uZW50OmVtaXRcIiAvKiBDT01QT05FTlRfRU1JVCAqLyxcbiAgICBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsXG4gICAgY29tcG9uZW50LFxuICAgIGV2ZW50LFxuICAgIHBhcmFtc1xuICApO1xufVxuXG5sZXQgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbmxldCBjdXJyZW50U2NvcGVJZCA9IG51bGw7XG5mdW5jdGlvbiBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgY29uc3QgcHJldiA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gaW5zdGFuY2U7XG4gIGN1cnJlbnRTY29wZUlkID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UudHlwZS5fX3Njb3BlSWQgfHwgbnVsbDtcbiAgcmV0dXJuIHByZXY7XG59XG5mdW5jdGlvbiBwdXNoU2NvcGVJZChpZCkge1xuICBjdXJyZW50U2NvcGVJZCA9IGlkO1xufVxuZnVuY3Rpb24gcG9wU2NvcGVJZCgpIHtcbiAgY3VycmVudFNjb3BlSWQgPSBudWxsO1xufVxuY29uc3Qgd2l0aFNjb3BlSWQgPSAoX2lkKSA9PiB3aXRoQ3R4O1xuZnVuY3Rpb24gd2l0aEN0eChmbiwgY3R4ID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLCBpc05vblNjb3BlZFNsb3QpIHtcbiAgaWYgKCFjdHgpIHJldHVybiBmbjtcbiAgaWYgKGZuLl9uKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG4gIGNvbnN0IHJlbmRlckZuV2l0aENvbnRleHQgPSAoLi4uYXJncykgPT4ge1xuICAgIGlmIChyZW5kZXJGbldpdGhDb250ZXh0Ll9kKSB7XG4gICAgICBzZXRCbG9ja1RyYWNraW5nKC0xKTtcbiAgICB9XG4gICAgY29uc3QgcHJldkluc3RhbmNlID0gc2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlKGN0eCk7XG4gICAgbGV0IHJlcztcbiAgICB0cnkge1xuICAgICAgcmVzID0gZm4oLi4uYXJncyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2SW5zdGFuY2UpO1xuICAgICAgaWYgKHJlbmRlckZuV2l0aENvbnRleHQuX2QpIHtcbiAgICAgICAgc2V0QmxvY2tUcmFja2luZygxKTtcbiAgICAgIH1cbiAgICB9XG4gICAge1xuICAgICAgZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkKGN0eCk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG4gIHJlbmRlckZuV2l0aENvbnRleHQuX24gPSB0cnVlO1xuICByZW5kZXJGbldpdGhDb250ZXh0Ll9jID0gdHJ1ZTtcbiAgcmVuZGVyRm5XaXRoQ29udGV4dC5fZCA9IHRydWU7XG4gIHJldHVybiByZW5kZXJGbldpdGhDb250ZXh0O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZSkge1xuICBpZiAoaXNCdWlsdEluRGlyZWN0aXZlKG5hbWUpKSB7XG4gICAgd2FybiQxKFwiRG8gbm90IHVzZSBidWlsdC1pbiBkaXJlY3RpdmUgaWRzIGFzIGN1c3RvbSBkaXJlY3RpdmUgaWQ6IFwiICsgbmFtZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHdpdGhEaXJlY3RpdmVzKHZub2RlLCBkaXJlY3RpdmVzKSB7XG4gIGlmIChjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICB3YXJuJDEoYHdpdGhEaXJlY3RpdmVzIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHJlbmRlciBmdW5jdGlvbnMuYCk7XG4gICAgcmV0dXJuIHZub2RlO1xuICB9XG4gIGNvbnN0IGluc3RhbmNlID0gZ2V0Q29tcG9uZW50UHVibGljSW5zdGFuY2UoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKTtcbiAgY29uc3QgYmluZGluZ3MgPSB2bm9kZS5kaXJzIHx8ICh2bm9kZS5kaXJzID0gW10pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcmVjdGl2ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgW2RpciwgdmFsdWUsIGFyZywgbW9kaWZpZXJzID0gRU1QVFlfT0JKXSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgaWYgKGRpcikge1xuICAgICAgaWYgKGlzRnVuY3Rpb24oZGlyKSkge1xuICAgICAgICBkaXIgPSB7XG4gICAgICAgICAgbW91bnRlZDogZGlyLFxuICAgICAgICAgIHVwZGF0ZWQ6IGRpclxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKGRpci5kZWVwKSB7XG4gICAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGJpbmRpbmdzLnB1c2goe1xuICAgICAgICBkaXIsXG4gICAgICAgIGluc3RhbmNlLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgb2xkVmFsdWU6IHZvaWQgMCxcbiAgICAgICAgYXJnLFxuICAgICAgICBtb2RpZmllcnNcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdm5vZGU7XG59XG5mdW5jdGlvbiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBwcmV2Vk5vZGUsIGluc3RhbmNlLCBuYW1lKSB7XG4gIGNvbnN0IGJpbmRpbmdzID0gdm5vZGUuZGlycztcbiAgY29uc3Qgb2xkQmluZGluZ3MgPSBwcmV2Vk5vZGUgJiYgcHJldlZOb2RlLmRpcnM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYmluZGluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBiaW5kaW5nID0gYmluZGluZ3NbaV07XG4gICAgaWYgKG9sZEJpbmRpbmdzKSB7XG4gICAgICBiaW5kaW5nLm9sZFZhbHVlID0gb2xkQmluZGluZ3NbaV0udmFsdWU7XG4gICAgfVxuICAgIGxldCBob29rID0gYmluZGluZy5kaXJbbmFtZV07XG4gICAgaWYgKGhvb2spIHtcbiAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGhvb2ssIGluc3RhbmNlLCA4LCBbXG4gICAgICAgIHZub2RlLmVsLFxuICAgICAgICBiaW5kaW5nLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgcHJldlZOb2RlXG4gICAgICBdKTtcbiAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgVGVsZXBvcnRFbmRLZXkgPSBTeW1ib2woXCJfdnRlXCIpO1xuY29uc3QgaXNUZWxlcG9ydCA9ICh0eXBlKSA9PiB0eXBlLl9faXNUZWxlcG9ydDtcbmNvbnN0IGlzVGVsZXBvcnREaXNhYmxlZCA9IChwcm9wcykgPT4gcHJvcHMgJiYgKHByb3BzLmRpc2FibGVkIHx8IHByb3BzLmRpc2FibGVkID09PSBcIlwiKTtcbmNvbnN0IGlzVGVsZXBvcnREZWZlcnJlZCA9IChwcm9wcykgPT4gcHJvcHMgJiYgKHByb3BzLmRlZmVyIHx8IHByb3BzLmRlZmVyID09PSBcIlwiKTtcbmNvbnN0IGlzVGFyZ2V0U1ZHID0gKHRhcmdldCkgPT4gdHlwZW9mIFNWR0VsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdGFyZ2V0IGluc3RhbmNlb2YgU1ZHRWxlbWVudDtcbmNvbnN0IGlzVGFyZ2V0TWF0aE1MID0gKHRhcmdldCkgPT4gdHlwZW9mIE1hdGhNTEVsZW1lbnQgPT09IFwiZnVuY3Rpb25cIiAmJiB0YXJnZXQgaW5zdGFuY2VvZiBNYXRoTUxFbGVtZW50O1xuY29uc3QgcmVzb2x2ZVRhcmdldCA9IChwcm9wcywgc2VsZWN0KSA9PiB7XG4gIGNvbnN0IHRhcmdldFNlbGVjdG9yID0gcHJvcHMgJiYgcHJvcHMudG87XG4gIGlmIChpc1N0cmluZyh0YXJnZXRTZWxlY3RvcikpIHtcbiAgICBpZiAoIXNlbGVjdCkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgQ3VycmVudCByZW5kZXJlciBkb2VzIG5vdCBzdXBwb3J0IHN0cmluZyB0YXJnZXQgZm9yIFRlbGVwb3J0cy4gKG1pc3NpbmcgcXVlcnlTZWxlY3RvciByZW5kZXJlciBvcHRpb24pYFxuICAgICAgKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBzZWxlY3QodGFyZ2V0U2VsZWN0b3IpO1xuICAgICAgaWYgKCF0YXJnZXQgJiYgIWlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcbiAgICAgICAgd2FybiQxKFxuICAgICAgICAgIGBGYWlsZWQgdG8gbG9jYXRlIFRlbGVwb3J0IHRhcmdldCB3aXRoIHNlbGVjdG9yIFwiJHt0YXJnZXRTZWxlY3Rvcn1cIi4gTm90ZSB0aGUgdGFyZ2V0IGVsZW1lbnQgbXVzdCBleGlzdCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkIC0gaS5lLiB0aGUgdGFyZ2V0IGNhbm5vdCBiZSByZW5kZXJlZCBieSB0aGUgY29tcG9uZW50IGl0c2VsZiwgYW5kIGlkZWFsbHkgc2hvdWxkIGJlIG91dHNpZGUgb2YgdGhlIGVudGlyZSBWdWUgY29tcG9uZW50IHRyZWUuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKCF0YXJnZXRTZWxlY3RvciAmJiAhaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgICAgd2FybiQxKGBJbnZhbGlkIFRlbGVwb3J0IHRhcmdldDogJHt0YXJnZXRTZWxlY3Rvcn1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldFNlbGVjdG9yO1xuICB9XG59O1xuY29uc3QgVGVsZXBvcnRJbXBsID0ge1xuICBuYW1lOiBcIlRlbGVwb3J0XCIsXG4gIF9faXNUZWxlcG9ydDogdHJ1ZSxcbiAgcHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBpbnRlcm5hbHMpIHtcbiAgICBjb25zdCB7XG4gICAgICBtYzogbW91bnRDaGlsZHJlbixcbiAgICAgIHBjOiBwYXRjaENoaWxkcmVuLFxuICAgICAgcGJjOiBwYXRjaEJsb2NrQ2hpbGRyZW4sXG4gICAgICBvOiB7IGluc2VydCwgcXVlcnlTZWxlY3RvciwgY3JlYXRlVGV4dCwgY3JlYXRlQ29tbWVudCB9XG4gICAgfSA9IGludGVybmFscztcbiAgICBjb25zdCBkaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZChuMi5wcm9wcyk7XG4gICAgbGV0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuIH0gPSBuMjtcbiAgICBpZiAoaXNIbXJVcGRhdGluZykge1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSBuMi5lbCA9IGNyZWF0ZUNvbW1lbnQoXCJ0ZWxlcG9ydCBzdGFydFwiKSA7XG4gICAgICBjb25zdCBtYWluQW5jaG9yID0gbjIuYW5jaG9yID0gY3JlYXRlQ29tbWVudChcInRlbGVwb3J0IGVuZFwiKSA7XG4gICAgICBpbnNlcnQocGxhY2Vob2xkZXIsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIGluc2VydChtYWluQW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICBjb25zdCBtb3VudCA9IChjb250YWluZXIyLCBhbmNob3IyKSA9PiB7XG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgICAgIGlmIChwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LmlzQ0UpIHtcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudC5jZS5fdGVsZXBvcnRUYXJnZXQgPSBjb250YWluZXIyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtb3VudENoaWxkcmVuKFxuICAgICAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgICAgICBjb250YWluZXIyLFxuICAgICAgICAgICAgYW5jaG9yMixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IG1vdW50VG9UYXJnZXQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IG4yLnRhcmdldCA9IHJlc29sdmVUYXJnZXQobjIucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpO1xuICAgICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSBwcmVwYXJlQW5jaG9yKHRhcmdldCwgbjIsIGNyZWF0ZVRleHQsIGluc2VydCk7XG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICBpZiAobmFtZXNwYWNlICE9PSBcInN2Z1wiICYmIGlzVGFyZ2V0U1ZHKHRhcmdldCkpIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZSA9IFwic3ZnXCI7XG4gICAgICAgICAgfSBlbHNlIGlmIChuYW1lc3BhY2UgIT09IFwibWF0aG1sXCIgJiYgaXNUYXJnZXRNYXRoTUwodGFyZ2V0KSkge1xuICAgICAgICAgICAgbmFtZXNwYWNlID0gXCJtYXRobWxcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFkaXNhYmxlZCkge1xuICAgICAgICAgICAgbW91bnQodGFyZ2V0LCB0YXJnZXRBbmNob3IpO1xuICAgICAgICAgICAgdXBkYXRlQ3NzVmFycyhuMiwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghZGlzYWJsZWQpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBcIkludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIG1vdW50OlwiLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgYCgke3R5cGVvZiB0YXJnZXR9KWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIG1vdW50KGNvbnRhaW5lciwgbWFpbkFuY2hvcik7XG4gICAgICAgIHVwZGF0ZUNzc1ZhcnMobjIsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVGVsZXBvcnREZWZlcnJlZChuMi5wcm9wcykpIHtcbiAgICAgICAgbjIuZWwuX19pc01vdW50ZWQgPSBmYWxzZTtcbiAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgICBtb3VudFRvVGFyZ2V0KCk7XG4gICAgICAgICAgZGVsZXRlIG4yLmVsLl9faXNNb3VudGVkO1xuICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb3VudFRvVGFyZ2V0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RlbGVwb3J0RGVmZXJyZWQobjIucHJvcHMpICYmIG4xLmVsLl9faXNNb3VudGVkID09PSBmYWxzZSkge1xuICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICAgIFRlbGVwb3J0SW1wbC5wcm9jZXNzKFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICAgICAgaW50ZXJuYWxzXG4gICAgICAgICAgKTtcbiAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBuMi5lbCA9IG4xLmVsO1xuICAgICAgbjIudGFyZ2V0U3RhcnQgPSBuMS50YXJnZXRTdGFydDtcbiAgICAgIGNvbnN0IG1haW5BbmNob3IgPSBuMi5hbmNob3IgPSBuMS5hbmNob3I7XG4gICAgICBjb25zdCB0YXJnZXQgPSBuMi50YXJnZXQgPSBuMS50YXJnZXQ7XG4gICAgICBjb25zdCB0YXJnZXRBbmNob3IgPSBuMi50YXJnZXRBbmNob3IgPSBuMS50YXJnZXRBbmNob3I7XG4gICAgICBjb25zdCB3YXNEaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZChuMS5wcm9wcyk7XG4gICAgICBjb25zdCBjdXJyZW50Q29udGFpbmVyID0gd2FzRGlzYWJsZWQgPyBjb250YWluZXIgOiB0YXJnZXQ7XG4gICAgICBjb25zdCBjdXJyZW50QW5jaG9yID0gd2FzRGlzYWJsZWQgPyBtYWluQW5jaG9yIDogdGFyZ2V0QW5jaG9yO1xuICAgICAgaWYgKG5hbWVzcGFjZSA9PT0gXCJzdmdcIiB8fCBpc1RhcmdldFNWRyh0YXJnZXQpKSB7XG4gICAgICAgIG5hbWVzcGFjZSA9IFwic3ZnXCI7XG4gICAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZSA9PT0gXCJtYXRobWxcIiB8fCBpc1RhcmdldE1hdGhNTCh0YXJnZXQpKSB7XG4gICAgICAgIG5hbWVzcGFjZSA9IFwibWF0aG1sXCI7XG4gICAgICB9XG4gICAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihcbiAgICAgICAgICBuMS5keW5hbWljQ2hpbGRyZW4sXG4gICAgICAgICAgZHluYW1pY0NoaWxkcmVuLFxuICAgICAgICAgIGN1cnJlbnRDb250YWluZXIsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHNcbiAgICAgICAgKTtcbiAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAoIW9wdGltaXplZCkge1xuICAgICAgICBwYXRjaENoaWxkcmVuKFxuICAgICAgICAgIG4xLFxuICAgICAgICAgIG4yLFxuICAgICAgICAgIGN1cnJlbnRDb250YWluZXIsXG4gICAgICAgICAgY3VycmVudEFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIGlmICghd2FzRGlzYWJsZWQpIHtcbiAgICAgICAgICBtb3ZlVGVsZXBvcnQoXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIG1haW5BbmNob3IsXG4gICAgICAgICAgICBpbnRlcm5hbHMsXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAobjIucHJvcHMgJiYgbjEucHJvcHMgJiYgbjIucHJvcHMudG8gIT09IG4xLnByb3BzLnRvKSB7XG4gICAgICAgICAgICBuMi5wcm9wcy50byA9IG4xLnByb3BzLnRvO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKChuMi5wcm9wcyAmJiBuMi5wcm9wcy50bykgIT09IChuMS5wcm9wcyAmJiBuMS5wcm9wcy50bykpIHtcbiAgICAgICAgICBjb25zdCBuZXh0VGFyZ2V0ID0gbjIudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChcbiAgICAgICAgICAgIG4yLnByb3BzLFxuICAgICAgICAgICAgcXVlcnlTZWxlY3RvclxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKG5leHRUYXJnZXQpIHtcbiAgICAgICAgICAgIG1vdmVUZWxlcG9ydChcbiAgICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICAgIG5leHRUYXJnZXQsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIGludGVybmFscyxcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgICBcIkludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIHVwZGF0ZTpcIixcbiAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICBgKCR7dHlwZW9mIHRhcmdldH0pYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAod2FzRGlzYWJsZWQpIHtcbiAgICAgICAgICBtb3ZlVGVsZXBvcnQoXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIHRhcmdldEFuY2hvcixcbiAgICAgICAgICAgIGludGVybmFscyxcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB1cGRhdGVDc3NWYXJzKG4yLCBkaXNhYmxlZCk7XG4gICAgfVxuICB9LFxuICByZW1vdmUodm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHsgdW06IHVubW91bnQsIG86IHsgcmVtb3ZlOiBob3N0UmVtb3ZlIH0gfSwgZG9SZW1vdmUpIHtcbiAgICBjb25zdCB7XG4gICAgICBzaGFwZUZsYWcsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGFuY2hvcixcbiAgICAgIHRhcmdldFN0YXJ0LFxuICAgICAgdGFyZ2V0QW5jaG9yLFxuICAgICAgdGFyZ2V0LFxuICAgICAgcHJvcHNcbiAgICB9ID0gdm5vZGU7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgaG9zdFJlbW92ZSh0YXJnZXRTdGFydCk7XG4gICAgICBob3N0UmVtb3ZlKHRhcmdldEFuY2hvcik7XG4gICAgfVxuICAgIGRvUmVtb3ZlICYmIGhvc3RSZW1vdmUoYW5jaG9yKTtcbiAgICBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgIGNvbnN0IHNob3VsZFJlbW92ZSA9IGRvUmVtb3ZlIHx8ICFpc1RlbGVwb3J0RGlzYWJsZWQocHJvcHMpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICB1bm1vdW50KFxuICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzaG91bGRSZW1vdmUsXG4gICAgICAgICAgISFjaGlsZC5keW5hbWljQ2hpbGRyZW5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1vdmU6IG1vdmVUZWxlcG9ydCxcbiAgaHlkcmF0ZTogaHlkcmF0ZVRlbGVwb3J0XG59O1xuZnVuY3Rpb24gbW92ZVRlbGVwb3J0KHZub2RlLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgeyBvOiB7IGluc2VydCB9LCBtOiBtb3ZlIH0sIG1vdmVUeXBlID0gMikge1xuICBpZiAobW92ZVR5cGUgPT09IDApIHtcbiAgICBpbnNlcnQodm5vZGUudGFyZ2V0QW5jaG9yLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gIH1cbiAgY29uc3QgeyBlbCwgYW5jaG9yLCBzaGFwZUZsYWcsIGNoaWxkcmVuLCBwcm9wcyB9ID0gdm5vZGU7XG4gIGNvbnN0IGlzUmVvcmRlciA9IG1vdmVUeXBlID09PSAyO1xuICBpZiAoaXNSZW9yZGVyKSB7XG4gICAgaW5zZXJ0KGVsLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XG4gIH1cbiAgaWYgKCFpc1Jlb3JkZXIgfHwgaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xuICAgIGlmIChzaGFwZUZsYWcgJiAxNikge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBtb3ZlKFxuICAgICAgICAgIGNoaWxkcmVuW2ldLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBwYXJlbnRBbmNob3IsXG4gICAgICAgICAgMlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaXNSZW9yZGVyKSB7XG4gICAgaW5zZXJ0KGFuY2hvciwgY29udGFpbmVyLCBwYXJlbnRBbmNob3IpO1xuICB9XG59XG5mdW5jdGlvbiBoeWRyYXRlVGVsZXBvcnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCB7XG4gIG86IHsgbmV4dFNpYmxpbmcsIHBhcmVudE5vZGUsIHF1ZXJ5U2VsZWN0b3IsIGluc2VydCwgY3JlYXRlVGV4dCB9XG59LCBoeWRyYXRlQ2hpbGRyZW4pIHtcbiAgY29uc3QgdGFyZ2V0ID0gdm5vZGUudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldChcbiAgICB2bm9kZS5wcm9wcyxcbiAgICBxdWVyeVNlbGVjdG9yXG4gICk7XG4gIGlmICh0YXJnZXQpIHtcbiAgICBjb25zdCBkaXNhYmxlZCA9IGlzVGVsZXBvcnREaXNhYmxlZCh2bm9kZS5wcm9wcyk7XG4gICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRhcmdldC5fbHBhIHx8IHRhcmdldC5maXJzdENoaWxkO1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxNikge1xuICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgIHZub2RlLmFuY2hvciA9IGh5ZHJhdGVDaGlsZHJlbihcbiAgICAgICAgICBuZXh0U2libGluZyhub2RlKSxcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBwYXJlbnROb2RlKG5vZGUpLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIHZub2RlLnRhcmdldFN0YXJ0ID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgdm5vZGUudGFyZ2V0QW5jaG9yID0gdGFyZ2V0Tm9kZSAmJiBuZXh0U2libGluZyh0YXJnZXROb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmFuY2hvciA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICBsZXQgdGFyZ2V0QW5jaG9yID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgd2hpbGUgKHRhcmdldEFuY2hvcikge1xuICAgICAgICAgIGlmICh0YXJnZXRBbmNob3IgJiYgdGFyZ2V0QW5jaG9yLm5vZGVUeXBlID09PSA4KSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0QW5jaG9yLmRhdGEgPT09IFwidGVsZXBvcnQgc3RhcnQgYW5jaG9yXCIpIHtcbiAgICAgICAgICAgICAgdm5vZGUudGFyZ2V0U3RhcnQgPSB0YXJnZXRBbmNob3I7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhcmdldEFuY2hvci5kYXRhID09PSBcInRlbGVwb3J0IGFuY2hvclwiKSB7XG4gICAgICAgICAgICAgIHZub2RlLnRhcmdldEFuY2hvciA9IHRhcmdldEFuY2hvcjtcbiAgICAgICAgICAgICAgdGFyZ2V0Ll9scGEgPSB2bm9kZS50YXJnZXRBbmNob3IgJiYgbmV4dFNpYmxpbmcodm5vZGUudGFyZ2V0QW5jaG9yKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRhcmdldEFuY2hvciA9IG5leHRTaWJsaW5nKHRhcmdldEFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2bm9kZS50YXJnZXRBbmNob3IpIHtcbiAgICAgICAgICBwcmVwYXJlQW5jaG9yKHRhcmdldCwgdm5vZGUsIGNyZWF0ZVRleHQsIGluc2VydCk7XG4gICAgICAgIH1cbiAgICAgICAgaHlkcmF0ZUNoaWxkcmVuKFxuICAgICAgICAgIHRhcmdldE5vZGUgJiYgbmV4dFNpYmxpbmcodGFyZ2V0Tm9kZSksXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUNzc1ZhcnModm5vZGUsIGRpc2FibGVkKTtcbiAgfVxuICByZXR1cm4gdm5vZGUuYW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLmFuY2hvcik7XG59XG5jb25zdCBUZWxlcG9ydCA9IFRlbGVwb3J0SW1wbDtcbmZ1bmN0aW9uIHVwZGF0ZUNzc1ZhcnModm5vZGUsIGlzRGlzYWJsZWQpIHtcbiAgY29uc3QgY3R4ID0gdm5vZGUuY3R4O1xuICBpZiAoY3R4ICYmIGN0eC51dCkge1xuICAgIGxldCBub2RlLCBhbmNob3I7XG4gICAgaWYgKGlzRGlzYWJsZWQpIHtcbiAgICAgIG5vZGUgPSB2bm9kZS5lbDtcbiAgICAgIGFuY2hvciA9IHZub2RlLmFuY2hvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZSA9IHZub2RlLnRhcmdldFN0YXJ0O1xuICAgICAgYW5jaG9yID0gdm5vZGUudGFyZ2V0QW5jaG9yO1xuICAgIH1cbiAgICB3aGlsZSAobm9kZSAmJiBub2RlICE9PSBhbmNob3IpIHtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSBub2RlLnNldEF0dHJpYnV0ZShcImRhdGEtdi1vd25lclwiLCBjdHgudWlkKTtcbiAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIH1cbiAgICBjdHgudXQoKTtcbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZUFuY2hvcih0YXJnZXQsIHZub2RlLCBjcmVhdGVUZXh0LCBpbnNlcnQpIHtcbiAgY29uc3QgdGFyZ2V0U3RhcnQgPSB2bm9kZS50YXJnZXRTdGFydCA9IGNyZWF0ZVRleHQoXCJcIik7XG4gIGNvbnN0IHRhcmdldEFuY2hvciA9IHZub2RlLnRhcmdldEFuY2hvciA9IGNyZWF0ZVRleHQoXCJcIik7XG4gIHRhcmdldFN0YXJ0W1RlbGVwb3J0RW5kS2V5XSA9IHRhcmdldEFuY2hvcjtcbiAgaWYgKHRhcmdldCkge1xuICAgIGluc2VydCh0YXJnZXRTdGFydCwgdGFyZ2V0KTtcbiAgICBpbnNlcnQodGFyZ2V0QW5jaG9yLCB0YXJnZXQpO1xuICB9XG4gIHJldHVybiB0YXJnZXRBbmNob3I7XG59XG5cbmNvbnN0IGxlYXZlQ2JLZXkgPSBTeW1ib2woXCJfbGVhdmVDYlwiKTtcbmNvbnN0IGVudGVyQ2JLZXkkMSA9IFN5bWJvbChcIl9lbnRlckNiXCIpO1xuZnVuY3Rpb24gdXNlVHJhbnNpdGlvblN0YXRlKCkge1xuICBjb25zdCBzdGF0ZSA9IHtcbiAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgIGlzTGVhdmluZzogZmFsc2UsXG4gICAgaXNVbm1vdW50aW5nOiBmYWxzZSxcbiAgICBsZWF2aW5nVk5vZGVzOiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpXG4gIH07XG4gIG9uTW91bnRlZCgoKSA9PiB7XG4gICAgc3RhdGUuaXNNb3VudGVkID0gdHJ1ZTtcbiAgfSk7XG4gIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XG4gICAgc3RhdGUuaXNVbm1vdW50aW5nID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiBzdGF0ZTtcbn1cbmNvbnN0IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yID0gW0Z1bmN0aW9uLCBBcnJheV07XG5jb25zdCBCYXNlVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyA9IHtcbiAgbW9kZTogU3RyaW5nLFxuICBhcHBlYXI6IEJvb2xlYW4sXG4gIHBlcnNpc3RlZDogQm9vbGVhbixcbiAgLy8gZW50ZXJcbiAgb25CZWZvcmVFbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkFmdGVyRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkVudGVyQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgLy8gbGVhdmVcbiAgb25CZWZvcmVMZWF2ZTogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXG4gIG9uTGVhdmU6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkFmdGVyTGVhdmU6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkxlYXZlQ2FuY2VsbGVkOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgLy8gYXBwZWFyXG4gIG9uQmVmb3JlQXBwZWFyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25BcHBlYXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxuICBvbkFmdGVyQXBwZWFyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcbiAgb25BcHBlYXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yXG59O1xuY29uc3QgcmVjdXJzaXZlR2V0U3VidHJlZSA9IChpbnN0YW5jZSkgPT4ge1xuICBjb25zdCBzdWJUcmVlID0gaW5zdGFuY2Uuc3ViVHJlZTtcbiAgcmV0dXJuIHN1YlRyZWUuY29tcG9uZW50ID8gcmVjdXJzaXZlR2V0U3VidHJlZShzdWJUcmVlLmNvbXBvbmVudCkgOiBzdWJUcmVlO1xufTtcbmNvbnN0IEJhc2VUcmFuc2l0aW9uSW1wbCA9IHtcbiAgbmFtZTogYEJhc2VUcmFuc2l0aW9uYCxcbiAgcHJvcHM6IEJhc2VUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzdGF0ZSA9IHVzZVRyYW5zaXRpb25TdGF0ZSgpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQgJiYgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuKHNsb3RzLmRlZmF1bHQoKSwgdHJ1ZSk7XG4gICAgICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hpbGQgPSBmaW5kTm9uQ29tbWVudENoaWxkKGNoaWxkcmVuKTtcbiAgICAgIGNvbnN0IHJhd1Byb3BzID0gdG9SYXcocHJvcHMpO1xuICAgICAgY29uc3QgeyBtb2RlIH0gPSByYXdQcm9wcztcbiAgICAgIGlmIChtb2RlICYmIG1vZGUgIT09IFwiaW4tb3V0XCIgJiYgbW9kZSAhPT0gXCJvdXQtaW5cIiAmJiBtb2RlICE9PSBcImRlZmF1bHRcIikge1xuICAgICAgICB3YXJuJDEoYGludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICR7bW9kZX1gKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5pc0xlYXZpbmcpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgfVxuICAgICAgY29uc3QgaW5uZXJDaGlsZCA9IGdldElubmVyQ2hpbGQkMShjaGlsZCk7XG4gICAgICBpZiAoIWlubmVyQ2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xuICAgICAgfVxuICAgICAgbGV0IGVudGVySG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKFxuICAgICAgICBpbm5lckNoaWxkLFxuICAgICAgICByYXdQcm9wcyxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGluc3RhbmNlLFxuICAgICAgICAvLyAjMTEwNjEsIGVuc3VyZSBlbnRlckhvb2tzIGlzIGZyZXNoIGFmdGVyIGNsb25lXG4gICAgICAgIChob29rcykgPT4gZW50ZXJIb29rcyA9IGhvb2tzXG4gICAgICApO1xuICAgICAgaWYgKGlubmVyQ2hpbGQudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoaW5uZXJDaGlsZCwgZW50ZXJIb29rcyk7XG4gICAgICB9XG4gICAgICBsZXQgb2xkSW5uZXJDaGlsZCA9IGluc3RhbmNlLnN1YlRyZWUgJiYgZ2V0SW5uZXJDaGlsZCQxKGluc3RhbmNlLnN1YlRyZWUpO1xuICAgICAgaWYgKG9sZElubmVyQ2hpbGQgJiYgb2xkSW5uZXJDaGlsZC50eXBlICE9PSBDb21tZW50ICYmICFpc1NhbWVWTm9kZVR5cGUoaW5uZXJDaGlsZCwgb2xkSW5uZXJDaGlsZCkgJiYgcmVjdXJzaXZlR2V0U3VidHJlZShpbnN0YW5jZSkudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICBsZXQgbGVhdmluZ0hvb2tzID0gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyhcbiAgICAgICAgICBvbGRJbm5lckNoaWxkLFxuICAgICAgICAgIHJhd1Byb3BzLFxuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIGluc3RhbmNlXG4gICAgICAgICk7XG4gICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCBsZWF2aW5nSG9va3MpO1xuICAgICAgICBpZiAobW9kZSA9PT0gXCJvdXQtaW5cIiAmJiBpbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSB0cnVlO1xuICAgICAgICAgIGxlYXZpbmdIb29rcy5hZnRlckxlYXZlID0gKCkgPT4ge1xuICAgICAgICAgICAgc3RhdGUuaXNMZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIShpbnN0YW5jZS5qb2IuZmxhZ3MgJiA4KSkge1xuICAgICAgICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSBsZWF2aW5nSG9va3MuYWZ0ZXJMZWF2ZTtcbiAgICAgICAgICAgIG9sZElubmVyQ2hpbGQgPSB2b2lkIDA7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gZW1wdHlQbGFjZWhvbGRlcihjaGlsZCk7XG4gICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJpbi1vdXRcIiAmJiBpbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcbiAgICAgICAgICBsZWF2aW5nSG9va3MuZGVsYXlMZWF2ZSA9IChlbCwgZWFybHlSZW1vdmUsIGRlbGF5ZWRMZWF2ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gZ2V0TGVhdmluZ05vZGVzRm9yVHlwZShcbiAgICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICAgIG9sZElubmVyQ2hpbGRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVbU3RyaW5nKG9sZElubmVyQ2hpbGQua2V5KV0gPSBvbGRJbm5lckNoaWxkO1xuICAgICAgICAgICAgZWxbbGVhdmVDYktleV0gPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGVhcmx5UmVtb3ZlKCk7XG4gICAgICAgICAgICAgIGVsW2xlYXZlQ2JLZXldID0gdm9pZCAwO1xuICAgICAgICAgICAgICBkZWxldGUgZW50ZXJIb29rcy5kZWxheWVkTGVhdmU7XG4gICAgICAgICAgICAgIG9sZElubmVyQ2hpbGQgPSB2b2lkIDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZW50ZXJIb29rcy5kZWxheWVkTGVhdmUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGRlbGF5ZWRMZWF2ZSgpO1xuICAgICAgICAgICAgICBkZWxldGUgZW50ZXJIb29rcy5kZWxheWVkTGVhdmU7XG4gICAgICAgICAgICAgIG9sZElubmVyQ2hpbGQgPSB2b2lkIDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2xkSW5uZXJDaGlsZCA9IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvbGRJbm5lckNoaWxkKSB7XG4gICAgICAgIG9sZElubmVyQ2hpbGQgPSB2b2lkIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hpbGQ7XG4gICAgfTtcbiAgfVxufTtcbmZ1bmN0aW9uIGZpbmROb25Db21tZW50Q2hpbGQoY2hpbGRyZW4pIHtcbiAgbGV0IGNoaWxkID0gY2hpbGRyZW5bMF07XG4gIGlmIChjaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgbGV0IGhhc0ZvdW5kID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBjIG9mIGNoaWxkcmVuKSB7XG4gICAgICBpZiAoYy50eXBlICE9PSBDb21tZW50KSB7XG4gICAgICAgIGlmIChoYXNGb3VuZCkge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIFwiPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudCBvciBjb21wb25lbnQuIFVzZSA8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjaGlsZCA9IGM7XG4gICAgICAgIGhhc0ZvdW5kID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkO1xufVxuY29uc3QgQmFzZVRyYW5zaXRpb24gPSBCYXNlVHJhbnNpdGlvbkltcGw7XG5mdW5jdGlvbiBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSkge1xuICBjb25zdCB7IGxlYXZpbmdWTm9kZXMgfSA9IHN0YXRlO1xuICBsZXQgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gbGVhdmluZ1ZOb2Rlcy5nZXQodm5vZGUudHlwZSk7XG4gIGlmICghbGVhdmluZ1ZOb2Rlc0NhY2hlKSB7XG4gICAgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgbGVhdmluZ1ZOb2Rlcy5zZXQodm5vZGUudHlwZSwgbGVhdmluZ1ZOb2Rlc0NhY2hlKTtcbiAgfVxuICByZXR1cm4gbGVhdmluZ1ZOb2Rlc0NhY2hlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyh2bm9kZSwgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZSwgcG9zdENsb25lKSB7XG4gIGNvbnN0IHtcbiAgICBhcHBlYXIsXG4gICAgbW9kZSxcbiAgICBwZXJzaXN0ZWQgPSBmYWxzZSxcbiAgICBvbkJlZm9yZUVudGVyLFxuICAgIG9uRW50ZXIsXG4gICAgb25BZnRlckVudGVyLFxuICAgIG9uRW50ZXJDYW5jZWxsZWQsXG4gICAgb25CZWZvcmVMZWF2ZSxcbiAgICBvbkxlYXZlLFxuICAgIG9uQWZ0ZXJMZWF2ZSxcbiAgICBvbkxlYXZlQ2FuY2VsbGVkLFxuICAgIG9uQmVmb3JlQXBwZWFyLFxuICAgIG9uQXBwZWFyLFxuICAgIG9uQWZ0ZXJBcHBlYXIsXG4gICAgb25BcHBlYXJDYW5jZWxsZWRcbiAgfSA9IHByb3BzO1xuICBjb25zdCBrZXkgPSBTdHJpbmcodm5vZGUua2V5KTtcbiAgY29uc3QgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gZ2V0TGVhdmluZ05vZGVzRm9yVHlwZShzdGF0ZSwgdm5vZGUpO1xuICBjb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzKSA9PiB7XG4gICAgaG9vayAmJiBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhcbiAgICAgIGhvb2ssXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDksXG4gICAgICBhcmdzXG4gICAgKTtcbiAgfTtcbiAgY29uc3QgY2FsbEFzeW5jSG9vayA9IChob29rLCBhcmdzKSA9PiB7XG4gICAgY29uc3QgZG9uZSA9IGFyZ3NbMV07XG4gICAgY2FsbEhvb2soaG9vaywgYXJncyk7XG4gICAgaWYgKGlzQXJyYXkoaG9vaykpIHtcbiAgICAgIGlmIChob29rLmV2ZXJ5KChob29rMikgPT4gaG9vazIubGVuZ3RoIDw9IDEpKSBkb25lKCk7XG4gICAgfSBlbHNlIGlmIChob29rLmxlbmd0aCA8PSAxKSB7XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBob29rcyA9IHtcbiAgICBtb2RlLFxuICAgIHBlcnNpc3RlZCxcbiAgICBiZWZvcmVFbnRlcihlbCkge1xuICAgICAgbGV0IGhvb2sgPSBvbkJlZm9yZUVudGVyO1xuICAgICAgaWYgKCFzdGF0ZS5pc01vdW50ZWQpIHtcbiAgICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICAgIGhvb2sgPSBvbkJlZm9yZUFwcGVhciB8fCBvbkJlZm9yZUVudGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVsW2xlYXZlQ2JLZXldKSB7XG4gICAgICAgIGVsW2xlYXZlQ2JLZXldKFxuICAgICAgICAgIHRydWVcbiAgICAgICAgICAvKiBjYW5jZWxsZWQgKi9cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxlYXZpbmdWTm9kZSA9IGxlYXZpbmdWTm9kZXNDYWNoZVtrZXldO1xuICAgICAgaWYgKGxlYXZpbmdWTm9kZSAmJiBpc1NhbWVWTm9kZVR5cGUodm5vZGUsIGxlYXZpbmdWTm9kZSkgJiYgbGVhdmluZ1ZOb2RlLmVsW2xlYXZlQ2JLZXldKSB7XG4gICAgICAgIGxlYXZpbmdWTm9kZS5lbFtsZWF2ZUNiS2V5XSgpO1xuICAgICAgfVxuICAgICAgY2FsbEhvb2soaG9vaywgW2VsXSk7XG4gICAgfSxcbiAgICBlbnRlcihlbCkge1xuICAgICAgbGV0IGhvb2sgPSBvbkVudGVyO1xuICAgICAgbGV0IGFmdGVySG9vayA9IG9uQWZ0ZXJFbnRlcjtcbiAgICAgIGxldCBjYW5jZWxIb29rID0gb25FbnRlckNhbmNlbGxlZDtcbiAgICAgIGlmICghc3RhdGUuaXNNb3VudGVkKSB7XG4gICAgICAgIGlmIChhcHBlYXIpIHtcbiAgICAgICAgICBob29rID0gb25BcHBlYXIgfHwgb25FbnRlcjtcbiAgICAgICAgICBhZnRlckhvb2sgPSBvbkFmdGVyQXBwZWFyIHx8IG9uQWZ0ZXJFbnRlcjtcbiAgICAgICAgICBjYW5jZWxIb29rID0gb25BcHBlYXJDYW5jZWxsZWQgfHwgb25FbnRlckNhbmNlbGxlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBjYWxsZWQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGRvbmUgPSBlbFtlbnRlckNiS2V5JDFdID0gKGNhbmNlbGxlZCkgPT4ge1xuICAgICAgICBpZiAoY2FsbGVkKSByZXR1cm47XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICBjYWxsSG9vayhjYW5jZWxIb29rLCBbZWxdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsSG9vayhhZnRlckhvb2ssIFtlbF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChob29rcy5kZWxheWVkTGVhdmUpIHtcbiAgICAgICAgICBob29rcy5kZWxheWVkTGVhdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbFtlbnRlckNiS2V5JDFdID0gdm9pZCAwO1xuICAgICAgfTtcbiAgICAgIGlmIChob29rKSB7XG4gICAgICAgIGNhbGxBc3luY0hvb2soaG9vaywgW2VsLCBkb25lXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25lKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBsZWF2ZShlbCwgcmVtb3ZlKSB7XG4gICAgICBjb25zdCBrZXkyID0gU3RyaW5nKHZub2RlLmtleSk7XG4gICAgICBpZiAoZWxbZW50ZXJDYktleSQxXSkge1xuICAgICAgICBlbFtlbnRlckNiS2V5JDFdKFxuICAgICAgICAgIHRydWVcbiAgICAgICAgICAvKiBjYW5jZWxsZWQgKi9cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGF0ZS5pc1VubW91bnRpbmcpIHtcbiAgICAgICAgcmV0dXJuIHJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgY2FsbEhvb2sob25CZWZvcmVMZWF2ZSwgW2VsXSk7XG4gICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XG4gICAgICBjb25zdCBkb25lID0gZWxbbGVhdmVDYktleV0gPSAoY2FuY2VsbGVkKSA9PiB7XG4gICAgICAgIGlmIChjYWxsZWQpIHJldHVybjtcbiAgICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgcmVtb3ZlKCk7XG4gICAgICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICBjYWxsSG9vayhvbkxlYXZlQ2FuY2VsbGVkLCBbZWxdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsSG9vayhvbkFmdGVyTGVhdmUsIFtlbF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsW2xlYXZlQ2JLZXldID0gdm9pZCAwO1xuICAgICAgICBpZiAobGVhdmluZ1ZOb2Rlc0NhY2hlW2tleTJdID09PSB2bm9kZSkge1xuICAgICAgICAgIGRlbGV0ZSBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5Ml07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5Ml0gPSB2bm9kZTtcbiAgICAgIGlmIChvbkxlYXZlKSB7XG4gICAgICAgIGNhbGxBc3luY0hvb2sob25MZWF2ZSwgW2VsLCBkb25lXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb25lKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjbG9uZSh2bm9kZTIpIHtcbiAgICAgIGNvbnN0IGhvb2tzMiA9IHJlc29sdmVUcmFuc2l0aW9uSG9va3MoXG4gICAgICAgIHZub2RlMixcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgcG9zdENsb25lXG4gICAgICApO1xuICAgICAgaWYgKHBvc3RDbG9uZSkgcG9zdENsb25lKGhvb2tzMik7XG4gICAgICByZXR1cm4gaG9va3MyO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhvb2tzO1xufVxuZnVuY3Rpb24gZW1wdHlQbGFjZWhvbGRlcih2bm9kZSkge1xuICBpZiAoaXNLZWVwQWxpdmUodm5vZGUpKSB7XG4gICAgdm5vZGUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB2bm9kZS5jaGlsZHJlbiA9IG51bGw7XG4gICAgcmV0dXJuIHZub2RlO1xuICB9XG59XG5mdW5jdGlvbiBnZXRJbm5lckNoaWxkJDEodm5vZGUpIHtcbiAgaWYgKCFpc0tlZXBBbGl2ZSh2bm9kZSkpIHtcbiAgICBpZiAoaXNUZWxlcG9ydCh2bm9kZS50eXBlKSAmJiB2bm9kZS5jaGlsZHJlbikge1xuICAgICAgcmV0dXJuIGZpbmROb25Db21tZW50Q2hpbGQodm5vZGUuY2hpbGRyZW4pO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGU7XG4gIH1cbiAgaWYgKHZub2RlLmNvbXBvbmVudCkge1xuICAgIHJldHVybiB2bm9kZS5jb21wb25lbnQuc3ViVHJlZTtcbiAgfVxuICBjb25zdCB7IHNoYXBlRmxhZywgY2hpbGRyZW4gfSA9IHZub2RlO1xuICBpZiAoY2hpbGRyZW4pIHtcbiAgICBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlblswXTtcbiAgICB9XG4gICAgaWYgKHNoYXBlRmxhZyAmIDMyICYmIGlzRnVuY3Rpb24oY2hpbGRyZW4uZGVmYXVsdCkpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbi5kZWZhdWx0KCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUsIGhvb2tzKSB7XG4gIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2ICYmIHZub2RlLmNvbXBvbmVudCkge1xuICAgIHZub2RlLnRyYW5zaXRpb24gPSBob29rcztcbiAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGhvb2tzKTtcbiAgfSBlbHNlIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxMjgpIHtcbiAgICB2bm9kZS5zc0NvbnRlbnQudHJhbnNpdGlvbiA9IGhvb2tzLmNsb25lKHZub2RlLnNzQ29udGVudCk7XG4gICAgdm5vZGUuc3NGYWxsYmFjay50cmFuc2l0aW9uID0gaG9va3MuY2xvbmUodm5vZGUuc3NGYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgdm5vZGUudHJhbnNpdGlvbiA9IGhvb2tzO1xuICB9XG59XG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGRyZW4sIGtlZXBDb21tZW50ID0gZmFsc2UsIHBhcmVudEtleSkge1xuICBsZXQgcmV0ID0gW107XG4gIGxldCBrZXllZEZyYWdtZW50Q291bnQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgY29uc3Qga2V5ID0gcGFyZW50S2V5ID09IG51bGwgPyBjaGlsZC5rZXkgOiBTdHJpbmcocGFyZW50S2V5KSArIFN0cmluZyhjaGlsZC5rZXkgIT0gbnVsbCA/IGNoaWxkLmtleSA6IGkpO1xuICAgIGlmIChjaGlsZC50eXBlID09PSBGcmFnbWVudCkge1xuICAgICAgaWYgKGNoaWxkLnBhdGNoRmxhZyAmIDEyOCkga2V5ZWRGcmFnbWVudENvdW50Kys7XG4gICAgICByZXQgPSByZXQuY29uY2F0KFxuICAgICAgICBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGQuY2hpbGRyZW4sIGtlZXBDb21tZW50LCBrZXkpXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoa2VlcENvbW1lbnQgfHwgY2hpbGQudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgcmV0LnB1c2goa2V5ICE9IG51bGwgPyBjbG9uZVZOb2RlKGNoaWxkLCB7IGtleSB9KSA6IGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgaWYgKGtleWVkRnJhZ21lbnRDb3VudCA+IDEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJldC5sZW5ndGg7IGkrKykge1xuICAgICAgcmV0W2ldLnBhdGNoRmxhZyA9IC0yO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG4vKiEgI19fTk9fU0lERV9FRkZFQ1RTX18gKi9cbi8vIEBfX05PX1NJREVfRUZGRUNUU19fXG5mdW5jdGlvbiBkZWZpbmVDb21wb25lbnQob3B0aW9ucywgZXh0cmFPcHRpb25zKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKG9wdGlvbnMpID8gKFxuICAgIC8vICM4MjM2OiBleHRlbmQgY2FsbCBhbmQgb3B0aW9ucy5uYW1lIGFjY2VzcyBhcmUgY29uc2lkZXJlZCBzaWRlLWVmZmVjdHNcbiAgICAvLyBieSBSb2xsdXAsIHNvIHdlIGhhdmUgdG8gd3JhcCBpdCBpbiBhIHB1cmUtYW5ub3RhdGVkIElJRkUuXG4gICAgLyogQF9fUFVSRV9fICovICgoKSA9PiBleHRlbmQoeyBuYW1lOiBvcHRpb25zLm5hbWUgfSwgZXh0cmFPcHRpb25zLCB7IHNldHVwOiBvcHRpb25zIH0pKSgpXG4gICkgOiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiB1c2VJZCgpIHtcbiAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoaSkge1xuICAgIHJldHVybiAoaS5hcHBDb250ZXh0LmNvbmZpZy5pZFByZWZpeCB8fCBcInZcIikgKyBcIi1cIiArIGkuaWRzWzBdICsgaS5pZHNbMV0rKztcbiAgfSBlbHNlIHtcbiAgICB3YXJuJDEoXG4gICAgICBgdXNlSWQoKSBpcyBjYWxsZWQgd2hlbiB0aGVyZSBpcyBubyBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlIHRvIGJlIGFzc29jaWF0ZWQgd2l0aC5gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gXCJcIjtcbn1cbmZ1bmN0aW9uIG1hcmtBc3luY0JvdW5kYXJ5KGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLmlkcyA9IFtpbnN0YW5jZS5pZHNbMF0gKyBpbnN0YW5jZS5pZHNbMl0rKyArIFwiLVwiLCAwLCAwXTtcbn1cblxuY29uc3Qga25vd25UZW1wbGF0ZVJlZnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbmZ1bmN0aW9uIHVzZVRlbXBsYXRlUmVmKGtleSkge1xuICBjb25zdCBpID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIGNvbnN0IHIgPSBzaGFsbG93UmVmKG51bGwpO1xuICBpZiAoaSkge1xuICAgIGNvbnN0IHJlZnMgPSBpLnJlZnMgPT09IEVNUFRZX09CSiA/IGkucmVmcyA9IHt9IDogaS5yZWZzO1xuICAgIGxldCBkZXNjO1xuICAgIGlmICgoZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocmVmcywga2V5KSkgJiYgIWRlc2MuY29uZmlndXJhYmxlKSB7XG4gICAgICB3YXJuJDEoYHVzZVRlbXBsYXRlUmVmKCcke2tleX0nKSBhbHJlYWR5IGV4aXN0cy5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlZnMsIGtleSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IHIudmFsdWUsXG4gICAgICAgIHNldDogKHZhbCkgPT4gci52YWx1ZSA9IHZhbFxuICAgICAgfSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHdhcm4kMShcbiAgICAgIGB1c2VUZW1wbGF0ZVJlZigpIGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UgdG8gYmUgYXNzb2NpYXRlZCB3aXRoLmBcbiAgICApO1xuICB9XG4gIGNvbnN0IHJldCA9IHJlYWRvbmx5KHIpIDtcbiAge1xuICAgIGtub3duVGVtcGxhdGVSZWZzLmFkZChyZXQpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHNldFJlZihyYXdSZWYsIG9sZFJhd1JlZiwgcGFyZW50U3VzcGVuc2UsIHZub2RlLCBpc1VubW91bnQgPSBmYWxzZSkge1xuICBpZiAoaXNBcnJheShyYXdSZWYpKSB7XG4gICAgcmF3UmVmLmZvckVhY2goXG4gICAgICAociwgaSkgPT4gc2V0UmVmKFxuICAgICAgICByLFxuICAgICAgICBvbGRSYXdSZWYgJiYgKGlzQXJyYXkob2xkUmF3UmVmKSA/IG9sZFJhd1JlZltpXSA6IG9sZFJhd1JlZiksXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgaXNVbm1vdW50XG4gICAgICApXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGlzQXN5bmNXcmFwcGVyKHZub2RlKSAmJiAhaXNVbm1vdW50KSB7XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDUxMiAmJiB2bm9kZS50eXBlLl9fYXN5bmNSZXNvbHZlZCAmJiB2bm9kZS5jb21wb25lbnQuc3ViVHJlZS5jb21wb25lbnQpIHtcbiAgICAgIHNldFJlZihyYXdSZWYsIG9sZFJhd1JlZiwgcGFyZW50U3VzcGVuc2UsIHZub2RlLmNvbXBvbmVudC5zdWJUcmVlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHJlZlZhbHVlID0gdm5vZGUuc2hhcGVGbGFnICYgNCA/IGdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlKHZub2RlLmNvbXBvbmVudCkgOiB2bm9kZS5lbDtcbiAgY29uc3QgdmFsdWUgPSBpc1VubW91bnQgPyBudWxsIDogcmVmVmFsdWU7XG4gIGNvbnN0IHsgaTogb3duZXIsIHI6IHJlZiB9ID0gcmF3UmVmO1xuICBpZiAoIW93bmVyKSB7XG4gICAgd2FybiQxKFxuICAgICAgYE1pc3NpbmcgcmVmIG93bmVyIGNvbnRleHQuIHJlZiBjYW5ub3QgYmUgdXNlZCBvbiBob2lzdGVkIHZub2Rlcy4gQSB2bm9kZSB3aXRoIHJlZiBtdXN0IGJlIGNyZWF0ZWQgaW5zaWRlIHRoZSByZW5kZXIgZnVuY3Rpb24uYFxuICAgICk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG9sZFJlZiA9IG9sZFJhd1JlZiAmJiBvbGRSYXdSZWYucjtcbiAgY29uc3QgcmVmcyA9IG93bmVyLnJlZnMgPT09IEVNUFRZX09CSiA/IG93bmVyLnJlZnMgPSB7fSA6IG93bmVyLnJlZnM7XG4gIGNvbnN0IHNldHVwU3RhdGUgPSBvd25lci5zZXR1cFN0YXRlO1xuICBjb25zdCByYXdTZXR1cFN0YXRlID0gdG9SYXcoc2V0dXBTdGF0ZSk7XG4gIGNvbnN0IGNhblNldFNldHVwUmVmID0gc2V0dXBTdGF0ZSA9PT0gRU1QVFlfT0JKID8gKCkgPT4gZmFsc2UgOiAoa2V5KSA9PiB7XG4gICAge1xuICAgICAgaWYgKGhhc093bihyYXdTZXR1cFN0YXRlLCBrZXkpICYmICFpc1JlZihyYXdTZXR1cFN0YXRlW2tleV0pKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgVGVtcGxhdGUgcmVmIFwiJHtrZXl9XCIgdXNlZCBvbiBhIG5vbi1yZWYgdmFsdWUuIEl0IHdpbGwgbm90IHdvcmsgaW4gdGhlIHByb2R1Y3Rpb24gYnVpbGQuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGtub3duVGVtcGxhdGVSZWZzLmhhcyhyYXdTZXR1cFN0YXRlW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhc093bihyYXdTZXR1cFN0YXRlLCBrZXkpO1xuICB9O1xuICBpZiAob2xkUmVmICE9IG51bGwgJiYgb2xkUmVmICE9PSByZWYpIHtcbiAgICBpZiAoaXNTdHJpbmcob2xkUmVmKSkge1xuICAgICAgcmVmc1tvbGRSZWZdID0gbnVsbDtcbiAgICAgIGlmIChjYW5TZXRTZXR1cFJlZihvbGRSZWYpKSB7XG4gICAgICAgIHNldHVwU3RhdGVbb2xkUmVmXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1JlZihvbGRSZWYpKSB7XG4gICAgICBvbGRSZWYudmFsdWUgPSBudWxsO1xuICAgIH1cbiAgfVxuICBpZiAoaXNGdW5jdGlvbihyZWYpKSB7XG4gICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKHJlZiwgb3duZXIsIDEyLCBbdmFsdWUsIHJlZnNdKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBfaXNTdHJpbmcgPSBpc1N0cmluZyhyZWYpO1xuICAgIGNvbnN0IF9pc1JlZiA9IGlzUmVmKHJlZik7XG4gICAgaWYgKF9pc1N0cmluZyB8fCBfaXNSZWYpIHtcbiAgICAgIGNvbnN0IGRvU2V0ID0gKCkgPT4ge1xuICAgICAgICBpZiAocmF3UmVmLmYpIHtcbiAgICAgICAgICBjb25zdCBleGlzdGluZyA9IF9pc1N0cmluZyA/IGNhblNldFNldHVwUmVmKHJlZikgPyBzZXR1cFN0YXRlW3JlZl0gOiByZWZzW3JlZl0gOiByZWYudmFsdWU7XG4gICAgICAgICAgaWYgKGlzVW5tb3VudCkge1xuICAgICAgICAgICAgaXNBcnJheShleGlzdGluZykgJiYgcmVtb3ZlKGV4aXN0aW5nLCByZWZWYWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaXNBcnJheShleGlzdGluZykpIHtcbiAgICAgICAgICAgICAgaWYgKF9pc1N0cmluZykge1xuICAgICAgICAgICAgICAgIHJlZnNbcmVmXSA9IFtyZWZWYWx1ZV07XG4gICAgICAgICAgICAgICAgaWYgKGNhblNldFNldHVwUmVmKHJlZikpIHtcbiAgICAgICAgICAgICAgICAgIHNldHVwU3RhdGVbcmVmXSA9IHJlZnNbcmVmXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVmLnZhbHVlID0gW3JlZlZhbHVlXTtcbiAgICAgICAgICAgICAgICBpZiAocmF3UmVmLmspIHJlZnNbcmF3UmVmLmtdID0gcmVmLnZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFleGlzdGluZy5pbmNsdWRlcyhyZWZWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgZXhpc3RpbmcucHVzaChyZWZWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF9pc1N0cmluZykge1xuICAgICAgICAgIHJlZnNbcmVmXSA9IHZhbHVlO1xuICAgICAgICAgIGlmIChjYW5TZXRTZXR1cFJlZihyZWYpKSB7XG4gICAgICAgICAgICBzZXR1cFN0YXRlW3JlZl0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoX2lzUmVmKSB7XG4gICAgICAgICAgcmVmLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgaWYgKHJhd1JlZi5rKSByZWZzW3Jhd1JlZi5rXSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4kMShcIkludmFsaWQgdGVtcGxhdGUgcmVmIHR5cGU6XCIsIHJlZiwgYCgke3R5cGVvZiByZWZ9KWApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRvU2V0LmlkID0gLTE7XG4gICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkb1NldCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9TZXQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2FybiQxKFwiSW52YWxpZCB0ZW1wbGF0ZSByZWYgdHlwZTpcIiwgcmVmLCBgKCR7dHlwZW9mIHJlZn0pYCk7XG4gICAgfVxuICB9XG59XG5cbmxldCBoYXNMb2dnZWRNaXNtYXRjaEVycm9yID0gZmFsc2U7XG5jb25zdCBsb2dNaXNtYXRjaEVycm9yID0gKCkgPT4ge1xuICBpZiAoaGFzTG9nZ2VkTWlzbWF0Y2hFcnJvcikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zb2xlLmVycm9yKFwiSHlkcmF0aW9uIGNvbXBsZXRlZCBidXQgY29udGFpbnMgbWlzbWF0Y2hlcy5cIik7XG4gIGhhc0xvZ2dlZE1pc21hdGNoRXJyb3IgPSB0cnVlO1xufTtcbmNvbnN0IGlzU1ZHQ29udGFpbmVyID0gKGNvbnRhaW5lcikgPT4gY29udGFpbmVyLm5hbWVzcGFjZVVSSS5pbmNsdWRlcyhcInN2Z1wiKSAmJiBjb250YWluZXIudGFnTmFtZSAhPT0gXCJmb3JlaWduT2JqZWN0XCI7XG5jb25zdCBpc01hdGhNTENvbnRhaW5lciA9IChjb250YWluZXIpID0+IGNvbnRhaW5lci5uYW1lc3BhY2VVUkkuaW5jbHVkZXMoXCJNYXRoTUxcIik7XG5jb25zdCBnZXRDb250YWluZXJUeXBlID0gKGNvbnRhaW5lcikgPT4ge1xuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlICE9PSAxKSByZXR1cm4gdm9pZCAwO1xuICBpZiAoaXNTVkdDb250YWluZXIoY29udGFpbmVyKSkgcmV0dXJuIFwic3ZnXCI7XG4gIGlmIChpc01hdGhNTENvbnRhaW5lcihjb250YWluZXIpKSByZXR1cm4gXCJtYXRobWxcIjtcbiAgcmV0dXJuIHZvaWQgMDtcbn07XG5jb25zdCBpc0NvbW1lbnQgPSAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gODtcbmZ1bmN0aW9uIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyhyZW5kZXJlckludGVybmFscykge1xuICBjb25zdCB7XG4gICAgbXQ6IG1vdW50Q29tcG9uZW50LFxuICAgIHA6IHBhdGNoLFxuICAgIG86IHtcbiAgICAgIHBhdGNoUHJvcCxcbiAgICAgIGNyZWF0ZVRleHQsXG4gICAgICBuZXh0U2libGluZyxcbiAgICAgIHBhcmVudE5vZGUsXG4gICAgICByZW1vdmUsXG4gICAgICBpbnNlcnQsXG4gICAgICBjcmVhdGVDb21tZW50XG4gICAgfVxuICB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XG4gIGNvbnN0IGh5ZHJhdGUgPSAodm5vZGUsIGNvbnRhaW5lcikgPT4ge1xuICAgIGlmICghY29udGFpbmVyLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgQXR0ZW1wdGluZyB0byBoeWRyYXRlIGV4aXN0aW5nIG1hcmt1cCBidXQgY29udGFpbmVyIGlzIGVtcHR5LiBQZXJmb3JtaW5nIGZ1bGwgbW91bnQgaW5zdGVhZC5gXG4gICAgICApO1xuICAgICAgcGF0Y2gobnVsbCwgdm5vZGUsIGNvbnRhaW5lcik7XG4gICAgICBmbHVzaFBvc3RGbHVzaENicygpO1xuICAgICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBoeWRyYXRlTm9kZShjb250YWluZXIuZmlyc3RDaGlsZCwgdm5vZGUsIG51bGwsIG51bGwsIG51bGwpO1xuICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XG4gICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xuICB9O1xuICBjb25zdCBoeWRyYXRlTm9kZSA9IChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xuICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXZub2RlLmR5bmFtaWNDaGlsZHJlbjtcbiAgICBjb25zdCBpc0ZyYWdtZW50U3RhcnQgPSBpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSBcIltcIjtcbiAgICBjb25zdCBvbk1pc21hdGNoID0gKCkgPT4gaGFuZGxlTWlzbWF0Y2goXG4gICAgICBub2RlLFxuICAgICAgdm5vZGUsXG4gICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgIGlzRnJhZ21lbnRTdGFydFxuICAgICk7XG4gICAgY29uc3QgeyB0eXBlLCByZWYsIHNoYXBlRmxhZywgcGF0Y2hGbGFnIH0gPSB2bm9kZTtcbiAgICBsZXQgZG9tVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgdm5vZGUuZWwgPSBub2RlO1xuICAgIHtcbiAgICAgIGRlZihub2RlLCBcIl9fdm5vZGVcIiwgdm5vZGUsIHRydWUpO1xuICAgICAgZGVmKG5vZGUsIFwiX192dWVQYXJlbnRDb21wb25lbnRcIiwgcGFyZW50Q29tcG9uZW50LCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKHBhdGNoRmxhZyA9PT0gLTIpIHtcbiAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xuICAgICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcbiAgICB9XG4gICAgbGV0IG5leHROb2RlID0gbnVsbDtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgVGV4dDpcbiAgICAgICAgaWYgKGRvbVR5cGUgIT09IDMpIHtcbiAgICAgICAgICBpZiAodm5vZGUuY2hpbGRyZW4gPT09IFwiXCIpIHtcbiAgICAgICAgICAgIGluc2VydCh2bm9kZS5lbCA9IGNyZWF0ZVRleHQoXCJcIiksIHBhcmVudE5vZGUobm9kZSksIG5vZGUpO1xuICAgICAgICAgICAgbmV4dE5vZGUgPSBub2RlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG5vZGUuZGF0YSAhPT0gdm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYEh5ZHJhdGlvbiB0ZXh0IG1pc21hdGNoIGluYCxcbiAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICBgXG4gIC0gcmVuZGVyZWQgb24gc2VydmVyOiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgIG5vZGUuZGF0YVxuICAgICAgICAgICAgICApfVxuICAtIGV4cGVjdGVkIG9uIGNsaWVudDogJHtKU09OLnN0cmluZ2lmeSh2bm9kZS5jaGlsZHJlbil9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgICAgIG5vZGUuZGF0YSA9IHZub2RlLmNoaWxkcmVuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDb21tZW50OlxuICAgICAgICBpZiAoaXNUZW1wbGF0ZU5vZGUobm9kZSkpIHtcbiAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgIHJlcGxhY2VOb2RlKFxuICAgICAgICAgICAgdm5vZGUuZWwgPSBub2RlLmNvbnRlbnQuZmlyc3RDaGlsZCxcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKGRvbVR5cGUgIT09IDggfHwgaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBuZXh0U2libGluZyhub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU3RhdGljOlxuICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgbm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgIGRvbVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkb21UeXBlID09PSAxIHx8IGRvbVR5cGUgPT09IDMpIHtcbiAgICAgICAgICBuZXh0Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgY29uc3QgbmVlZFRvQWRvcHRDb250ZW50ID0gIXZub2RlLmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZub2RlLnN0YXRpY0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChuZWVkVG9BZG9wdENvbnRlbnQpXG4gICAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuICs9IG5leHROb2RlLm5vZGVUeXBlID09PSAxID8gbmV4dE5vZGUub3V0ZXJIVE1MIDogbmV4dE5vZGUuZGF0YTtcbiAgICAgICAgICAgIGlmIChpID09PSB2bm9kZS5zdGF0aWNDb3VudCAtIDEpIHtcbiAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gbmV4dE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5leHROb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGlzRnJhZ21lbnRTdGFydCA/IG5leHRTaWJsaW5nKG5leHROb2RlKSA6IG5leHROb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uTWlzbWF0Y2goKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgICAgIGlmICghaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSBoeWRyYXRlRnJhZ21lbnQoXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSkge1xuICAgICAgICAgIGlmICgoZG9tVHlwZSAhPT0gMSB8fCB2bm9kZS50eXBlLnRvTG93ZXJDYXNlKCkgIT09IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSAmJiAhaXNUZW1wbGF0ZU5vZGUobm9kZSkpIHtcbiAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IGh5ZHJhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDYpIHtcbiAgICAgICAgICB2bm9kZS5zbG90U2NvcGVJZHMgPSBzbG90U2NvcGVJZHM7XG4gICAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcbiAgICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IGxvY2F0ZUNsb3NpbmdBbmNob3Iobm9kZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSBcInRlbGVwb3J0IHN0YXJ0XCIpIHtcbiAgICAgICAgICAgIG5leHROb2RlID0gbG9jYXRlQ2xvc2luZ0FuY2hvcihub2RlLCBub2RlLmRhdGEsIFwidGVsZXBvcnQgZW5kXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtb3VudENvbXBvbmVudChcbiAgICAgICAgICAgIHZub2RlLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgZ2V0Q29udGFpbmVyVHlwZShjb250YWluZXIpLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoaXNBc3luY1dyYXBwZXIodm5vZGUpICYmICF2bm9kZS50eXBlLl9fYXN5bmNSZXNvbHZlZCkge1xuICAgICAgICAgICAgbGV0IHN1YlRyZWU7XG4gICAgICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XG4gICAgICAgICAgICAgIHN1YlRyZWUgPSBjcmVhdGVWTm9kZShGcmFnbWVudCk7XG4gICAgICAgICAgICAgIHN1YlRyZWUuYW5jaG9yID0gbmV4dE5vZGUgPyBuZXh0Tm9kZS5wcmV2aW91c1NpYmxpbmcgOiBjb250YWluZXIubGFzdENoaWxkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3ViVHJlZSA9IG5vZGUubm9kZVR5cGUgPT09IDMgPyBjcmVhdGVUZXh0Vk5vZGUoXCJcIikgOiBjcmVhdGVWTm9kZShcImRpdlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YlRyZWUuZWwgPSBub2RlO1xuICAgICAgICAgICAgdm5vZGUuY29tcG9uZW50LnN1YlRyZWUgPSBzdWJUcmVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCkge1xuICAgICAgICAgIGlmIChkb21UeXBlICE9PSA4KSB7XG4gICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dE5vZGUgPSB2bm9kZS50eXBlLmh5ZHJhdGUoXG4gICAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICAgIHZub2RlLFxuICAgICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICAgIG9wdGltaXplZCxcbiAgICAgICAgICAgICAgcmVuZGVyZXJJbnRlcm5hbHMsXG4gICAgICAgICAgICAgIGh5ZHJhdGVDaGlsZHJlblxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICAgICAgbmV4dE5vZGUgPSB2bm9kZS50eXBlLmh5ZHJhdGUoXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIGdldENvbnRhaW5lclR5cGUocGFyZW50Tm9kZShub2RlKSksXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWQsXG4gICAgICAgICAgICByZW5kZXJlckludGVybmFscyxcbiAgICAgICAgICAgIGh5ZHJhdGVOb2RlXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuJDEoXCJJbnZhbGlkIEhvc3RWTm9kZSB0eXBlOlwiLCB0eXBlLCBgKCR7dHlwZW9mIHR5cGV9KWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgc2V0UmVmKHJlZiwgbnVsbCwgcGFyZW50U3VzcGVuc2UsIHZub2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHROb2RlO1xuICB9O1xuICBjb25zdCBoeWRyYXRlRWxlbWVudCA9IChlbCwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgb3B0aW1pemVkID0gb3B0aW1pemVkIHx8ICEhdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xuICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHBhdGNoRmxhZywgc2hhcGVGbGFnLCBkaXJzLCB0cmFuc2l0aW9uIH0gPSB2bm9kZTtcbiAgICBjb25zdCBmb3JjZVBhdGNoID0gdHlwZSA9PT0gXCJpbnB1dFwiIHx8IHR5cGUgPT09IFwib3B0aW9uXCI7XG4gICAge1xuICAgICAgaWYgKGRpcnMpIHtcbiAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcImNyZWF0ZWRcIik7XG4gICAgICB9XG4gICAgICBsZXQgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSBmYWxzZTtcbiAgICAgIGlmIChpc1RlbXBsYXRlTm9kZShlbCkpIHtcbiAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgPSBuZWVkVHJhbnNpdGlvbihcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIC8vIG5vIG5lZWQgY2hlY2sgcGFyZW50U3VzcGVuc2UgaW4gaHlkcmF0aW9uXG4gICAgICAgICAgdHJhbnNpdGlvblxuICAgICAgICApICYmIHBhcmVudENvbXBvbmVudCAmJiBwYXJlbnRDb21wb25lbnQudm5vZGUucHJvcHMgJiYgcGFyZW50Q29tcG9uZW50LnZub2RlLnByb3BzLmFwcGVhcjtcbiAgICAgICAgY29uc3QgY29udGVudCA9IGVsLmNvbnRlbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzKSB7XG4gICAgICAgICAgY29uc3QgY2xzID0gY29udGVudC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKTtcbiAgICAgICAgICBpZiAoY2xzKSBjb250ZW50LiRjbHMgPSBjbHM7XG4gICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXBsYWNlTm9kZShjb250ZW50LCBlbCwgcGFyZW50Q29tcG9uZW50KTtcbiAgICAgICAgdm5vZGUuZWwgPSBlbCA9IGNvbnRlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoc2hhcGVGbGFnICYgMTYgJiYgLy8gc2tpcCBpZiBlbGVtZW50IGhhcyBpbm5lckhUTUwgLyB0ZXh0Q29udGVudFxuICAgICAgIShwcm9wcyAmJiAocHJvcHMuaW5uZXJIVE1MIHx8IHByb3BzLnRleHRDb250ZW50KSkpIHtcbiAgICAgICAgbGV0IG5leHQgPSBoeWRyYXRlQ2hpbGRyZW4oXG4gICAgICAgICAgZWwuZmlyc3RDaGlsZCxcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBlbCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgICBsZXQgaGFzV2FybmVkID0gZmFsc2U7XG4gICAgICAgIHdoaWxlIChuZXh0KSB7XG4gICAgICAgICAgaWYgKCFpc01pc21hdGNoQWxsb3dlZChlbCwgMSAvKiBDSElMRFJFTiAqLykpIHtcbiAgICAgICAgICAgIGlmICghaGFzV2FybmVkKSB7XG4gICAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgICBgSHlkcmF0aW9uIGNoaWxkcmVuIG1pc21hdGNoIG9uYCxcbiAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICBgXG5TZXJ2ZXIgcmVuZGVyZWQgZWxlbWVudCBjb250YWlucyBtb3JlIGNoaWxkIG5vZGVzIHRoYW4gY2xpZW50IHZkb20uYFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBoYXNXYXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9nTWlzbWF0Y2hFcnJvcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBjdXIgPSBuZXh0O1xuICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHRTaWJsaW5nO1xuICAgICAgICAgIHJlbW92ZShjdXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDgpIHtcbiAgICAgICAgbGV0IGNsaWVudFRleHQgPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgICAgaWYgKGNsaWVudFRleHRbMF0gPT09IFwiXFxuXCIgJiYgKGVsLnRhZ05hbWUgPT09IFwiUFJFXCIgfHwgZWwudGFnTmFtZSA9PT0gXCJURVhUQVJFQVwiKSkge1xuICAgICAgICAgIGNsaWVudFRleHQgPSBjbGllbnRUZXh0LnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbC50ZXh0Q29udGVudCAhPT0gY2xpZW50VGV4dCkge1xuICAgICAgICAgIGlmICghaXNNaXNtYXRjaEFsbG93ZWQoZWwsIDAgLyogVEVYVCAqLykpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYEh5ZHJhdGlvbiB0ZXh0IGNvbnRlbnQgbWlzbWF0Y2ggb25gLFxuICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgYFxuICAtIHJlbmRlcmVkIG9uIHNlcnZlcjogJHtlbC50ZXh0Q29udGVudH1cbiAgLSBleHBlY3RlZCBvbiBjbGllbnQ6ICR7dm5vZGUuY2hpbGRyZW59YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWwudGV4dENvbnRlbnQgPSB2bm9kZS5jaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBpc0N1c3RvbUVsZW1lbnQgPSBlbC50YWdOYW1lLmluY2x1ZGVzKFwiLVwiKTtcbiAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wcykge1xuICAgICAgICAgICAgaWYgKC8vICMxMTE4OSBza2lwIGlmIHRoaXMgbm9kZSBoYXMgZGlyZWN0aXZlcyB0aGF0IGhhdmUgY3JlYXRlZCBob29rc1xuICAgICAgICAgICAgLy8gYXMgaXQgY291bGQgaGF2ZSBtdXRhdGVkIHRoZSBET00gaW4gYW55IHBvc3NpYmxlIHdheVxuICAgICAgICAgICAgIShkaXJzICYmIGRpcnMuc29tZSgoZCkgPT4gZC5kaXIuY3JlYXRlZCkpICYmIHByb3BIYXNNaXNtYXRjaChlbCwga2V5LCBwcm9wc1trZXldLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50KSkge1xuICAgICAgICAgICAgICBsb2dNaXNtYXRjaEVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZm9yY2VQYXRjaCAmJiAoa2V5LmVuZHNXaXRoKFwidmFsdWVcIikgfHwga2V5ID09PSBcImluZGV0ZXJtaW5hdGVcIikgfHwgaXNPbihrZXkpICYmICFpc1Jlc2VydmVkUHJvcChrZXkpIHx8IC8vIGZvcmNlIGh5ZHJhdGUgdi1iaW5kIHdpdGggLnByb3AgbW9kaWZpZXJzXG4gICAgICAgICAgICBrZXlbMF0gPT09IFwiLlwiIHx8IGlzQ3VzdG9tRWxlbWVudCkge1xuICAgICAgICAgICAgICBwYXRjaFByb3AoZWwsIGtleSwgbnVsbCwgcHJvcHNba2V5XSwgdm9pZCAwLCBwYXJlbnRDb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IHZub2RlSG9va3M7XG4gICAgICBpZiAodm5vZGVIb29rcyA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVCZWZvcmVNb3VudCkge1xuICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rcywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICB9XG4gICAgICBpZiAoZGlycykge1xuICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIFwiYmVmb3JlTW91bnRcIik7XG4gICAgICB9XG4gICAgICBpZiAoKHZub2RlSG9va3MgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkgfHwgZGlycyB8fCBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcykge1xuICAgICAgICBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSgoKSA9PiB7XG4gICAgICAgICAgdm5vZGVIb29rcyAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rcywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgJiYgdHJhbnNpdGlvbi5lbnRlcihlbCk7XG4gICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIFwibW91bnRlZFwiKTtcbiAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWwubmV4dFNpYmxpbmc7XG4gIH07XG4gIGNvbnN0IGh5ZHJhdGVDaGlsZHJlbiA9IChub2RlLCBwYXJlbnRWTm9kZSwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXBhcmVudFZOb2RlLmR5bmFtaWNDaGlsZHJlbjtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHBhcmVudFZOb2RlLmNoaWxkcmVuO1xuICAgIGNvbnN0IGwgPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgbGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCB2bm9kZSA9IG9wdGltaXplZCA/IGNoaWxkcmVuW2ldIDogY2hpbGRyZW5baV0gPSBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpXSk7XG4gICAgICBjb25zdCBpc1RleHQgPSB2bm9kZS50eXBlID09PSBUZXh0O1xuICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgaWYgKGlzVGV4dCAmJiAhb3B0aW1pemVkKSB7XG4gICAgICAgICAgaWYgKGkgKyAxIDwgbCAmJiBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpICsgMV0pLnR5cGUgPT09IFRleHQpIHtcbiAgICAgICAgICAgIGluc2VydChcbiAgICAgICAgICAgICAgY3JlYXRlVGV4dChcbiAgICAgICAgICAgICAgICBub2RlLmRhdGEuc2xpY2Uodm5vZGUuY2hpbGRyZW4ubGVuZ3RoKVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICAgIG5leHRTaWJsaW5nKG5vZGUpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbm9kZS5kYXRhID0gdm5vZGUuY2hpbGRyZW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBoeWRyYXRlTm9kZShcbiAgICAgICAgICBub2RlLFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGlzVGV4dCAmJiAhdm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgaW5zZXJ0KHZub2RlLmVsID0gY3JlYXRlVGV4dChcIlwiKSwgY29udGFpbmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaXNNaXNtYXRjaEFsbG93ZWQoY29udGFpbmVyLCAxIC8qIENISUxEUkVOICovKSkge1xuICAgICAgICAgIGlmICghaGFzV2FybmVkKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIGBIeWRyYXRpb24gY2hpbGRyZW4gbWlzbWF0Y2ggb25gLFxuICAgICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICAgIGBcblNlcnZlciByZW5kZXJlZCBlbGVtZW50IGNvbnRhaW5zIGZld2VyIGNoaWxkIG5vZGVzIHRoYW4gY2xpZW50IHZkb20uYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxvZ01pc21hdGNoRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBwYXRjaChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBnZXRDb250YWluZXJUeXBlKGNvbnRhaW5lciksXG4gICAgICAgICAgc2xvdFNjb3BlSWRzXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9O1xuICBjb25zdCBoeWRyYXRlRnJhZ21lbnQgPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgY29uc3QgeyBzbG90U2NvcGVJZHM6IGZyYWdtZW50U2xvdFNjb3BlSWRzIH0gPSB2bm9kZTtcbiAgICBpZiAoZnJhZ21lbnRTbG90U2NvcGVJZHMpIHtcbiAgICAgIHNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkcyA/IHNsb3RTY29wZUlkcy5jb25jYXQoZnJhZ21lbnRTbG90U2NvcGVJZHMpIDogZnJhZ21lbnRTbG90U2NvcGVJZHM7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XG4gICAgY29uc3QgbmV4dCA9IGh5ZHJhdGVDaGlsZHJlbihcbiAgICAgIG5leHRTaWJsaW5nKG5vZGUpLFxuICAgICAgdm5vZGUsXG4gICAgICBjb250YWluZXIsXG4gICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgIG9wdGltaXplZFxuICAgICk7XG4gICAgaWYgKG5leHQgJiYgaXNDb21tZW50KG5leHQpICYmIG5leHQuZGF0YSA9PT0gXCJdXCIpIHtcbiAgICAgIHJldHVybiBuZXh0U2libGluZyh2bm9kZS5hbmNob3IgPSBuZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nTWlzbWF0Y2hFcnJvcigpO1xuICAgICAgaW5zZXJ0KHZub2RlLmFuY2hvciA9IGNyZWF0ZUNvbW1lbnQoYF1gKSwgY29udGFpbmVyLCBuZXh0KTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaGFuZGxlTWlzbWF0Y2ggPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgaXNGcmFnbWVudCkgPT4ge1xuICAgIGlmICghaXNNaXNtYXRjaEFsbG93ZWQobm9kZS5wYXJlbnRFbGVtZW50LCAxIC8qIENISUxEUkVOICovKSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgSHlkcmF0aW9uIG5vZGUgbWlzbWF0Y2g6XG4tIHJlbmRlcmVkIG9uIHNlcnZlcjpgLFxuICAgICAgICBub2RlLFxuICAgICAgICBub2RlLm5vZGVUeXBlID09PSAzID8gYCh0ZXh0KWAgOiBpc0NvbW1lbnQobm9kZSkgJiYgbm9kZS5kYXRhID09PSBcIltcIiA/IGAoc3RhcnQgb2YgZnJhZ21lbnQpYCA6IGBgLFxuICAgICAgICBgXG4tIGV4cGVjdGVkIG9uIGNsaWVudDpgLFxuICAgICAgICB2bm9kZS50eXBlXG4gICAgICApO1xuICAgICAgbG9nTWlzbWF0Y2hFcnJvcigpO1xuICAgIH1cbiAgICB2bm9kZS5lbCA9IG51bGw7XG4gICAgaWYgKGlzRnJhZ21lbnQpIHtcbiAgICAgIGNvbnN0IGVuZCA9IGxvY2F0ZUNsb3NpbmdBbmNob3Iobm9kZSk7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCBuZXh0MiA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICBpZiAobmV4dDIgJiYgbmV4dDIgIT09IGVuZCkge1xuICAgICAgICAgIHJlbW92ZShuZXh0Mik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbmV4dCA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XG4gICAgcmVtb3ZlKG5vZGUpO1xuICAgIHBhdGNoKFxuICAgICAgbnVsbCxcbiAgICAgIHZub2RlLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgbmV4dCxcbiAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgZ2V0Q29udGFpbmVyVHlwZShjb250YWluZXIpLFxuICAgICAgc2xvdFNjb3BlSWRzXG4gICAgKTtcbiAgICBpZiAocGFyZW50Q29tcG9uZW50KSB7XG4gICAgICBwYXJlbnRDb21wb25lbnQudm5vZGUuZWwgPSB2bm9kZS5lbDtcbiAgICAgIHVwZGF0ZUhPQ0hvc3RFbChwYXJlbnRDb21wb25lbnQsIHZub2RlLmVsKTtcbiAgICB9XG4gICAgcmV0dXJuIG5leHQ7XG4gIH07XG4gIGNvbnN0IGxvY2F0ZUNsb3NpbmdBbmNob3IgPSAobm9kZSwgb3BlbiA9IFwiW1wiLCBjbG9zZSA9IFwiXVwiKSA9PiB7XG4gICAgbGV0IG1hdGNoID0gMDtcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgbm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgaWYgKG5vZGUgJiYgaXNDb21tZW50KG5vZGUpKSB7XG4gICAgICAgIGlmIChub2RlLmRhdGEgPT09IG9wZW4pIG1hdGNoKys7XG4gICAgICAgIGlmIChub2RlLmRhdGEgPT09IGNsb3NlKSB7XG4gICAgICAgICAgaWYgKG1hdGNoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dFNpYmxpbmcobm9kZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1hdGNoLS07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9O1xuICBjb25zdCByZXBsYWNlTm9kZSA9IChuZXdOb2RlLCBvbGROb2RlLCBwYXJlbnRDb21wb25lbnQpID0+IHtcbiAgICBjb25zdCBwYXJlbnROb2RlMiA9IG9sZE5vZGUucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50Tm9kZTIpIHtcbiAgICAgIHBhcmVudE5vZGUyLnJlcGxhY2VDaGlsZChuZXdOb2RlLCBvbGROb2RlKTtcbiAgICB9XG4gICAgbGV0IHBhcmVudCA9IHBhcmVudENvbXBvbmVudDtcbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LnZub2RlLmVsID09PSBvbGROb2RlKSB7XG4gICAgICAgIHBhcmVudC52bm9kZS5lbCA9IHBhcmVudC5zdWJUcmVlLmVsID0gbmV3Tm9kZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICB9O1xuICBjb25zdCBpc1RlbXBsYXRlTm9kZSA9IChub2RlKSA9PiB7XG4gICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgbm9kZS50YWdOYW1lID09PSBcIlRFTVBMQVRFXCI7XG4gIH07XG4gIHJldHVybiBbaHlkcmF0ZSwgaHlkcmF0ZU5vZGVdO1xufVxuZnVuY3Rpb24gcHJvcEhhc01pc21hdGNoKGVsLCBrZXksIGNsaWVudFZhbHVlLCB2bm9kZSwgaW5zdGFuY2UpIHtcbiAgbGV0IG1pc21hdGNoVHlwZTtcbiAgbGV0IG1pc21hdGNoS2V5O1xuICBsZXQgYWN0dWFsO1xuICBsZXQgZXhwZWN0ZWQ7XG4gIGlmIChrZXkgPT09IFwiY2xhc3NcIikge1xuICAgIGlmIChlbC4kY2xzKSB7XG4gICAgICBhY3R1YWwgPSBlbC4kY2xzO1xuICAgICAgZGVsZXRlIGVsLiRjbHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdHVhbCA9IGVsLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpO1xuICAgIH1cbiAgICBleHBlY3RlZCA9IG5vcm1hbGl6ZUNsYXNzKGNsaWVudFZhbHVlKTtcbiAgICBpZiAoIWlzU2V0RXF1YWwodG9DbGFzc1NldChhY3R1YWwgfHwgXCJcIiksIHRvQ2xhc3NTZXQoZXhwZWN0ZWQpKSkge1xuICAgICAgbWlzbWF0Y2hUeXBlID0gMiAvKiBDTEFTUyAqLztcbiAgICAgIG1pc21hdGNoS2V5ID0gYGNsYXNzYDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoa2V5ID09PSBcInN0eWxlXCIpIHtcbiAgICBhY3R1YWwgPSBlbC5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKSB8fCBcIlwiO1xuICAgIGV4cGVjdGVkID0gaXNTdHJpbmcoY2xpZW50VmFsdWUpID8gY2xpZW50VmFsdWUgOiBzdHJpbmdpZnlTdHlsZShub3JtYWxpemVTdHlsZShjbGllbnRWYWx1ZSkpO1xuICAgIGNvbnN0IGFjdHVhbE1hcCA9IHRvU3R5bGVNYXAoYWN0dWFsKTtcbiAgICBjb25zdCBleHBlY3RlZE1hcCA9IHRvU3R5bGVNYXAoZXhwZWN0ZWQpO1xuICAgIGlmICh2bm9kZS5kaXJzKSB7XG4gICAgICBmb3IgKGNvbnN0IHsgZGlyLCB2YWx1ZSB9IG9mIHZub2RlLmRpcnMpIHtcbiAgICAgICAgaWYgKGRpci5uYW1lID09PSBcInNob3dcIiAmJiAhdmFsdWUpIHtcbiAgICAgICAgICBleHBlY3RlZE1hcC5zZXQoXCJkaXNwbGF5XCIsIFwibm9uZVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIHJlc29sdmVDc3NWYXJzKGluc3RhbmNlLCB2bm9kZSwgZXhwZWN0ZWRNYXApO1xuICAgIH1cbiAgICBpZiAoIWlzTWFwRXF1YWwoYWN0dWFsTWFwLCBleHBlY3RlZE1hcCkpIHtcbiAgICAgIG1pc21hdGNoVHlwZSA9IDMgLyogU1RZTEUgKi87XG4gICAgICBtaXNtYXRjaEtleSA9IFwic3R5bGVcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZWwgaW5zdGFuY2VvZiBTVkdFbGVtZW50ICYmIGlzS25vd25TdmdBdHRyKGtleSkgfHwgZWwgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiAoaXNCb29sZWFuQXR0cihrZXkpIHx8IGlzS25vd25IdG1sQXR0cihrZXkpKSkge1xuICAgIGlmIChpc0Jvb2xlYW5BdHRyKGtleSkpIHtcbiAgICAgIGFjdHVhbCA9IGVsLmhhc0F0dHJpYnV0ZShrZXkpO1xuICAgICAgZXhwZWN0ZWQgPSBpbmNsdWRlQm9vbGVhbkF0dHIoY2xpZW50VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoY2xpZW50VmFsdWUgPT0gbnVsbCkge1xuICAgICAgYWN0dWFsID0gZWwuaGFzQXR0cmlidXRlKGtleSk7XG4gICAgICBleHBlY3RlZCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZWwuaGFzQXR0cmlidXRlKGtleSkpIHtcbiAgICAgICAgYWN0dWFsID0gZWwuZ2V0QXR0cmlidXRlKGtleSk7XG4gICAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJ2YWx1ZVwiICYmIGVsLnRhZ05hbWUgPT09IFwiVEVYVEFSRUFcIikge1xuICAgICAgICBhY3R1YWwgPSBlbC52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdHVhbCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZXhwZWN0ZWQgPSBpc1JlbmRlcmFibGVBdHRyVmFsdWUoY2xpZW50VmFsdWUpID8gU3RyaW5nKGNsaWVudFZhbHVlKSA6IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZCkge1xuICAgICAgbWlzbWF0Y2hUeXBlID0gNCAvKiBBVFRSSUJVVEUgKi87XG4gICAgICBtaXNtYXRjaEtleSA9IGtleTtcbiAgICB9XG4gIH1cbiAgaWYgKG1pc21hdGNoVHlwZSAhPSBudWxsICYmICFpc01pc21hdGNoQWxsb3dlZChlbCwgbWlzbWF0Y2hUeXBlKSkge1xuICAgIGNvbnN0IGZvcm1hdCA9ICh2KSA9PiB2ID09PSBmYWxzZSA/IGAobm90IHJlbmRlcmVkKWAgOiBgJHttaXNtYXRjaEtleX09XCIke3Z9XCJgO1xuICAgIGNvbnN0IHByZVNlZ21lbnQgPSBgSHlkcmF0aW9uICR7TWlzbWF0Y2hUeXBlU3RyaW5nW21pc21hdGNoVHlwZV19IG1pc21hdGNoIG9uYDtcbiAgICBjb25zdCBwb3N0U2VnbWVudCA9IGBcbiAgLSByZW5kZXJlZCBvbiBzZXJ2ZXI6ICR7Zm9ybWF0KGFjdHVhbCl9XG4gIC0gZXhwZWN0ZWQgb24gY2xpZW50OiAke2Zvcm1hdChleHBlY3RlZCl9XG4gIE5vdGU6IHRoaXMgbWlzbWF0Y2ggaXMgY2hlY2stb25seS4gVGhlIERPTSB3aWxsIG5vdCBiZSByZWN0aWZpZWQgaW4gcHJvZHVjdGlvbiBkdWUgdG8gcGVyZm9ybWFuY2Ugb3ZlcmhlYWQuXG4gIFlvdSBzaG91bGQgZml4IHRoZSBzb3VyY2Ugb2YgdGhlIG1pc21hdGNoLmA7XG4gICAge1xuICAgICAgd2FybiQxKHByZVNlZ21lbnQsIGVsLCBwb3N0U2VnbWVudCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHRvQ2xhc3NTZXQoc3RyKSB7XG4gIHJldHVybiBuZXcgU2V0KHN0ci50cmltKCkuc3BsaXQoL1xccysvKSk7XG59XG5mdW5jdGlvbiBpc1NldEVxdWFsKGEsIGIpIHtcbiAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoY29uc3QgcyBvZiBhKSB7XG4gICAgaWYgKCFiLmhhcyhzKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHRvU3R5bGVNYXAoc3RyKSB7XG4gIGNvbnN0IHN0eWxlTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIHN0ci5zcGxpdChcIjtcIikpIHtcbiAgICBsZXQgW2tleSwgdmFsdWVdID0gaXRlbS5zcGxpdChcIjpcIik7XG4gICAga2V5ID0ga2V5LnRyaW0oKTtcbiAgICB2YWx1ZSA9IHZhbHVlICYmIHZhbHVlLnRyaW0oKTtcbiAgICBpZiAoa2V5ICYmIHZhbHVlKSB7XG4gICAgICBzdHlsZU1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZU1hcDtcbn1cbmZ1bmN0aW9uIGlzTWFwRXF1YWwoYSwgYikge1xuICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgYSkge1xuICAgIGlmICh2YWx1ZSAhPT0gYi5nZXQoa2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDc3NWYXJzKGluc3RhbmNlLCB2bm9kZSwgZXhwZWN0ZWRNYXApIHtcbiAgY29uc3Qgcm9vdCA9IGluc3RhbmNlLnN1YlRyZWU7XG4gIGlmIChpbnN0YW5jZS5nZXRDc3NWYXJzICYmICh2bm9kZSA9PT0gcm9vdCB8fCByb290ICYmIHJvb3QudHlwZSA9PT0gRnJhZ21lbnQgJiYgcm9vdC5jaGlsZHJlbi5pbmNsdWRlcyh2bm9kZSkpKSB7XG4gICAgY29uc3QgY3NzVmFycyA9IGluc3RhbmNlLmdldENzc1ZhcnMoKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjc3NWYXJzKSB7XG4gICAgICBleHBlY3RlZE1hcC5zZXQoXG4gICAgICAgIGAtLSR7Z2V0RXNjYXBlZENzc1Zhck5hbWUoa2V5KX1gLFxuICAgICAgICBTdHJpbmcoY3NzVmFyc1trZXldKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZub2RlID09PSByb290ICYmIGluc3RhbmNlLnBhcmVudCkge1xuICAgIHJlc29sdmVDc3NWYXJzKGluc3RhbmNlLnBhcmVudCwgaW5zdGFuY2Uudm5vZGUsIGV4cGVjdGVkTWFwKTtcbiAgfVxufVxuY29uc3QgYWxsb3dNaXNtYXRjaEF0dHIgPSBcImRhdGEtYWxsb3ctbWlzbWF0Y2hcIjtcbmNvbnN0IE1pc21hdGNoVHlwZVN0cmluZyA9IHtcbiAgWzAgLyogVEVYVCAqL106IFwidGV4dFwiLFxuICBbMSAvKiBDSElMRFJFTiAqL106IFwiY2hpbGRyZW5cIixcbiAgWzIgLyogQ0xBU1MgKi9dOiBcImNsYXNzXCIsXG4gIFszIC8qIFNUWUxFICovXTogXCJzdHlsZVwiLFxuICBbNCAvKiBBVFRSSUJVVEUgKi9dOiBcImF0dHJpYnV0ZVwiXG59O1xuZnVuY3Rpb24gaXNNaXNtYXRjaEFsbG93ZWQoZWwsIGFsbG93ZWRUeXBlKSB7XG4gIGlmIChhbGxvd2VkVHlwZSA9PT0gMCAvKiBURVhUICovIHx8IGFsbG93ZWRUeXBlID09PSAxIC8qIENISUxEUkVOICovKSB7XG4gICAgd2hpbGUgKGVsICYmICFlbC5oYXNBdHRyaWJ1dGUoYWxsb3dNaXNtYXRjaEF0dHIpKSB7XG4gICAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICB9XG4gIGNvbnN0IGFsbG93ZWRBdHRyID0gZWwgJiYgZWwuZ2V0QXR0cmlidXRlKGFsbG93TWlzbWF0Y2hBdHRyKTtcbiAgaWYgKGFsbG93ZWRBdHRyID09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSBpZiAoYWxsb3dlZEF0dHIgPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBsaXN0ID0gYWxsb3dlZEF0dHIuc3BsaXQoXCIsXCIpO1xuICAgIGlmIChhbGxvd2VkVHlwZSA9PT0gMCAvKiBURVhUICovICYmIGxpc3QuaW5jbHVkZXMoXCJjaGlsZHJlblwiKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBhbGxvd2VkQXR0ci5zcGxpdChcIixcIikuaW5jbHVkZXMoTWlzbWF0Y2hUeXBlU3RyaW5nW2FsbG93ZWRUeXBlXSk7XG4gIH1cbn1cblxuY29uc3QgcmVxdWVzdElkbGVDYWxsYmFjayA9IGdldEdsb2JhbFRoaXMoKS5yZXF1ZXN0SWRsZUNhbGxiYWNrIHx8ICgoY2IpID0+IHNldFRpbWVvdXQoY2IsIDEpKTtcbmNvbnN0IGNhbmNlbElkbGVDYWxsYmFjayA9IGdldEdsb2JhbFRoaXMoKS5jYW5jZWxJZGxlQ2FsbGJhY2sgfHwgKChpZCkgPT4gY2xlYXJUaW1lb3V0KGlkKSk7XG5jb25zdCBoeWRyYXRlT25JZGxlID0gKHRpbWVvdXQgPSAxZTQpID0+IChoeWRyYXRlKSA9PiB7XG4gIGNvbnN0IGlkID0gcmVxdWVzdElkbGVDYWxsYmFjayhoeWRyYXRlLCB7IHRpbWVvdXQgfSk7XG4gIHJldHVybiAoKSA9PiBjYW5jZWxJZGxlQ2FsbGJhY2soaWQpO1xufTtcbmZ1bmN0aW9uIGVsZW1lbnRJc1Zpc2libGVJblZpZXdwb3J0KGVsKSB7XG4gIGNvbnN0IHsgdG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0IH0gPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgeyBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCB9ID0gd2luZG93O1xuICByZXR1cm4gKHRvcCA+IDAgJiYgdG9wIDwgaW5uZXJIZWlnaHQgfHwgYm90dG9tID4gMCAmJiBib3R0b20gPCBpbm5lckhlaWdodCkgJiYgKGxlZnQgPiAwICYmIGxlZnQgPCBpbm5lcldpZHRoIHx8IHJpZ2h0ID4gMCAmJiByaWdodCA8IGlubmVyV2lkdGgpO1xufVxuY29uc3QgaHlkcmF0ZU9uVmlzaWJsZSA9IChvcHRzKSA9PiAoaHlkcmF0ZSwgZm9yRWFjaCkgPT4ge1xuICBjb25zdCBvYiA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgIGZvciAoY29uc3QgZSBvZiBlbnRyaWVzKSB7XG4gICAgICBpZiAoIWUuaXNJbnRlcnNlY3RpbmcpIGNvbnRpbnVlO1xuICAgICAgb2IuZGlzY29ubmVjdCgpO1xuICAgICAgaHlkcmF0ZSgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9LCBvcHRzKTtcbiAgZm9yRWFjaCgoZWwpID0+IHtcbiAgICBpZiAoIShlbCBpbnN0YW5jZW9mIEVsZW1lbnQpKSByZXR1cm47XG4gICAgaWYgKGVsZW1lbnRJc1Zpc2libGVJblZpZXdwb3J0KGVsKSkge1xuICAgICAgaHlkcmF0ZSgpO1xuICAgICAgb2IuZGlzY29ubmVjdCgpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYi5vYnNlcnZlKGVsKTtcbiAgfSk7XG4gIHJldHVybiAoKSA9PiBvYi5kaXNjb25uZWN0KCk7XG59O1xuY29uc3QgaHlkcmF0ZU9uTWVkaWFRdWVyeSA9IChxdWVyeSkgPT4gKGh5ZHJhdGUpID0+IHtcbiAgaWYgKHF1ZXJ5KSB7XG4gICAgY29uc3QgbXFsID0gbWF0Y2hNZWRpYShxdWVyeSk7XG4gICAgaWYgKG1xbC5tYXRjaGVzKSB7XG4gICAgICBoeWRyYXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1xbC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGh5ZHJhdGUsIHsgb25jZTogdHJ1ZSB9KTtcbiAgICAgIHJldHVybiAoKSA9PiBtcWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBoeWRyYXRlKTtcbiAgICB9XG4gIH1cbn07XG5jb25zdCBoeWRyYXRlT25JbnRlcmFjdGlvbiA9IChpbnRlcmFjdGlvbnMgPSBbXSkgPT4gKGh5ZHJhdGUsIGZvckVhY2gpID0+IHtcbiAgaWYgKGlzU3RyaW5nKGludGVyYWN0aW9ucykpIGludGVyYWN0aW9ucyA9IFtpbnRlcmFjdGlvbnNdO1xuICBsZXQgaGFzSHlkcmF0ZWQgPSBmYWxzZTtcbiAgY29uc3QgZG9IeWRyYXRlID0gKGUpID0+IHtcbiAgICBpZiAoIWhhc0h5ZHJhdGVkKSB7XG4gICAgICBoYXNIeWRyYXRlZCA9IHRydWU7XG4gICAgICB0ZWFyZG93bigpO1xuICAgICAgaHlkcmF0ZSgpO1xuICAgICAgZS50YXJnZXQuZGlzcGF0Y2hFdmVudChuZXcgZS5jb25zdHJ1Y3RvcihlLnR5cGUsIGUpKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHRlYXJkb3duID0gKCkgPT4ge1xuICAgIGZvckVhY2goKGVsKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGkgb2YgaW50ZXJhY3Rpb25zKSB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoaSwgZG9IeWRyYXRlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yRWFjaCgoZWwpID0+IHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgaW50ZXJhY3Rpb25zKSB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGksIGRvSHlkcmF0ZSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0ZWFyZG93bjtcbn07XG5mdW5jdGlvbiBmb3JFYWNoRWxlbWVudChub2RlLCBjYikge1xuICBpZiAoaXNDb21tZW50KG5vZGUpICYmIG5vZGUuZGF0YSA9PT0gXCJbXCIpIHtcbiAgICBsZXQgZGVwdGggPSAxO1xuICAgIGxldCBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICB3aGlsZSAobmV4dCkge1xuICAgICAgaWYgKG5leHQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY2IobmV4dCk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNDb21tZW50KG5leHQpKSB7XG4gICAgICAgIGlmIChuZXh0LmRhdGEgPT09IFwiXVwiKSB7XG4gICAgICAgICAgaWYgKC0tZGVwdGggPT09IDApIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKG5leHQuZGF0YSA9PT0gXCJbXCIpIHtcbiAgICAgICAgICBkZXB0aCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY2Iobm9kZSk7XG4gIH1cbn1cblxuY29uc3QgaXNBc3luY1dyYXBwZXIgPSAoaSkgPT4gISFpLnR5cGUuX19hc3luY0xvYWRlcjtcbi8qISAjX19OT19TSURFX0VGRkVDVFNfXyAqL1xuLy8gQF9fTk9fU0lERV9FRkZFQ1RTX19cbmZ1bmN0aW9uIGRlZmluZUFzeW5jQ29tcG9uZW50KHNvdXJjZSkge1xuICBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XG4gICAgc291cmNlID0geyBsb2FkZXI6IHNvdXJjZSB9O1xuICB9XG4gIGNvbnN0IHtcbiAgICBsb2FkZXIsXG4gICAgbG9hZGluZ0NvbXBvbmVudCxcbiAgICBlcnJvckNvbXBvbmVudCxcbiAgICBkZWxheSA9IDIwMCxcbiAgICBoeWRyYXRlOiBoeWRyYXRlU3RyYXRlZ3ksXG4gICAgdGltZW91dCxcbiAgICAvLyB1bmRlZmluZWQgPSBuZXZlciB0aW1lcyBvdXRcbiAgICBzdXNwZW5zaWJsZSA9IHRydWUsXG4gICAgb25FcnJvcjogdXNlck9uRXJyb3JcbiAgfSA9IHNvdXJjZTtcbiAgbGV0IHBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcbiAgbGV0IHJlc29sdmVkQ29tcDtcbiAgbGV0IHJldHJpZXMgPSAwO1xuICBjb25zdCByZXRyeSA9ICgpID0+IHtcbiAgICByZXRyaWVzKys7XG4gICAgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xuICAgIHJldHVybiBsb2FkKCk7XG4gIH07XG4gIGNvbnN0IGxvYWQgPSAoKSA9PiB7XG4gICAgbGV0IHRoaXNSZXF1ZXN0O1xuICAgIHJldHVybiBwZW5kaW5nUmVxdWVzdCB8fCAodGhpc1JlcXVlc3QgPSBwZW5kaW5nUmVxdWVzdCA9IGxvYWRlcigpLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGVyciA9IGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyIDogbmV3IEVycm9yKFN0cmluZyhlcnIpKTtcbiAgICAgIGlmICh1c2VyT25FcnJvcikge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHVzZXJSZXRyeSA9ICgpID0+IHJlc29sdmUocmV0cnkoKSk7XG4gICAgICAgICAgY29uc3QgdXNlckZhaWwgPSAoKSA9PiByZWplY3QoZXJyKTtcbiAgICAgICAgICB1c2VyT25FcnJvcihlcnIsIHVzZXJSZXRyeSwgdXNlckZhaWwsIHJldHJpZXMgKyAxKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfSkudGhlbigoY29tcCkgPT4ge1xuICAgICAgaWYgKHRoaXNSZXF1ZXN0ICE9PSBwZW5kaW5nUmVxdWVzdCAmJiBwZW5kaW5nUmVxdWVzdCkge1xuICAgICAgICByZXR1cm4gcGVuZGluZ1JlcXVlc3Q7XG4gICAgICB9XG4gICAgICBpZiAoIWNvbXApIHtcbiAgICAgICAgd2FybiQxKFxuICAgICAgICAgIGBBc3luYyBjb21wb25lbnQgbG9hZGVyIHJlc29sdmVkIHRvIHVuZGVmaW5lZC4gSWYgeW91IGFyZSB1c2luZyByZXRyeSgpLCBtYWtlIHN1cmUgdG8gcmV0dXJuIGl0cyByZXR1cm4gdmFsdWUuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXAgJiYgKGNvbXAuX19lc01vZHVsZSB8fCBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09IFwiTW9kdWxlXCIpKSB7XG4gICAgICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoY29tcCAmJiAhaXNPYmplY3QoY29tcCkgJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFzeW5jIGNvbXBvbmVudCBsb2FkIHJlc3VsdDogJHtjb21wfWApO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZWRDb21wID0gY29tcDtcbiAgICAgIHJldHVybiBjb21wO1xuICAgIH0pKTtcbiAgfTtcbiAgcmV0dXJuIGRlZmluZUNvbXBvbmVudCh7XG4gICAgbmFtZTogXCJBc3luY0NvbXBvbmVudFdyYXBwZXJcIixcbiAgICBfX2FzeW5jTG9hZGVyOiBsb2FkLFxuICAgIF9fYXN5bmNIeWRyYXRlKGVsLCBpbnN0YW5jZSwgaHlkcmF0ZSkge1xuICAgICAgbGV0IHBhdGNoZWQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IGRvSHlkcmF0ZSA9IGh5ZHJhdGVTdHJhdGVneSA/ICgpID0+IHtcbiAgICAgICAgY29uc3QgcGVyZm9ybUh5ZHJhdGUgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKHBhdGNoZWQpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYFNraXBwaW5nIGxhenkgaHlkcmF0aW9uIGZvciBjb21wb25lbnQgJyR7Z2V0Q29tcG9uZW50TmFtZShyZXNvbHZlZENvbXApfSc6IGl0IHdhcyB1cGRhdGVkIGJlZm9yZSBsYXp5IGh5ZHJhdGlvbiBwZXJmb3JtZWQuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaHlkcmF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0ZWFyZG93biA9IGh5ZHJhdGVTdHJhdGVneShcbiAgICAgICAgICBwZXJmb3JtSHlkcmF0ZSxcbiAgICAgICAgICAoY2IpID0+IGZvckVhY2hFbGVtZW50KGVsLCBjYilcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRlYXJkb3duKSB7XG4gICAgICAgICAgKGluc3RhbmNlLmJ1bSB8fCAoaW5zdGFuY2UuYnVtID0gW10pKS5wdXNoKHRlYXJkb3duKTtcbiAgICAgICAgfVxuICAgICAgICAoaW5zdGFuY2UudSB8fCAoaW5zdGFuY2UudSA9IFtdKSkucHVzaCgoKSA9PiBwYXRjaGVkID0gdHJ1ZSk7XG4gICAgICB9IDogaHlkcmF0ZTtcbiAgICAgIGlmIChyZXNvbHZlZENvbXApIHtcbiAgICAgICAgZG9IeWRyYXRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkKCkudGhlbigoKSA9PiAhaW5zdGFuY2UuaXNVbm1vdW50ZWQgJiYgZG9IeWRyYXRlKCkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0IF9fYXN5bmNSZXNvbHZlZCgpIHtcbiAgICAgIHJldHVybiByZXNvbHZlZENvbXA7XG4gICAgfSxcbiAgICBzZXR1cCgpIHtcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlO1xuICAgICAgbWFya0FzeW5jQm91bmRhcnkoaW5zdGFuY2UpO1xuICAgICAgaWYgKHJlc29sdmVkQ29tcCkge1xuICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb25FcnJvciA9IChlcnIpID0+IHtcbiAgICAgICAgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xuICAgICAgICBoYW5kbGVFcnJvcihcbiAgICAgICAgICBlcnIsXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgMTMsXG4gICAgICAgICAgIWVycm9yQ29tcG9uZW50XG4gICAgICAgICk7XG4gICAgICB9O1xuICAgICAgaWYgKHN1c3BlbnNpYmxlICYmIGluc3RhbmNlLnN1c3BlbnNlIHx8IGlzSW5TU1JDb21wb25lbnRTZXR1cCkge1xuICAgICAgICByZXR1cm4gbG9hZCgpLnRoZW4oKGNvbXApID0+IHtcbiAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKGNvbXAsIGluc3RhbmNlKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICByZXR1cm4gKCkgPT4gZXJyb3JDb21wb25lbnQgPyBjcmVhdGVWTm9kZShlcnJvckNvbXBvbmVudCwge1xuICAgICAgICAgICAgZXJyb3I6IGVyclxuICAgICAgICAgIH0pIDogbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBsb2FkZWQgPSByZWYoZmFsc2UpO1xuICAgICAgY29uc3QgZXJyb3IgPSByZWYoKTtcbiAgICAgIGNvbnN0IGRlbGF5ZWQgPSByZWYoISFkZWxheSk7XG4gICAgICBpZiAoZGVsYXkpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZGVsYXllZC52YWx1ZSA9IGZhbHNlO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICB9XG4gICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlmICghbG9hZGVkLnZhbHVlICYmICFlcnJvci52YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgQXN5bmMgY29tcG9uZW50IHRpbWVkIG91dCBhZnRlciAke3RpbWVvdXR9bXMuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICB9XG4gICAgICBsb2FkKCkudGhlbigoKSA9PiB7XG4gICAgICAgIGxvYWRlZC52YWx1ZSA9IHRydWU7XG4gICAgICAgIGlmIChpbnN0YW5jZS5wYXJlbnQgJiYgaXNLZWVwQWxpdmUoaW5zdGFuY2UucGFyZW50LnZub2RlKSkge1xuICAgICAgICAgIGluc3RhbmNlLnBhcmVudC51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAobG9hZGVkLnZhbHVlICYmIHJlc29sdmVkQ29tcCkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVJbm5lckNvbXAocmVzb2x2ZWRDb21wLCBpbnN0YW5jZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZXJyb3IudmFsdWUgJiYgZXJyb3JDb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoZXJyb3JDb21wb25lbnQsIHtcbiAgICAgICAgICAgIGVycm9yOiBlcnJvci52YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxvYWRpbmdDb21wb25lbnQgJiYgIWRlbGF5ZWQudmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUobG9hZGluZ0NvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUlubmVyQ29tcChjb21wLCBwYXJlbnQpIHtcbiAgY29uc3QgeyByZWY6IHJlZjIsIHByb3BzLCBjaGlsZHJlbiwgY2UgfSA9IHBhcmVudC52bm9kZTtcbiAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShjb21wLCBwcm9wcywgY2hpbGRyZW4pO1xuICB2bm9kZS5yZWYgPSByZWYyO1xuICB2bm9kZS5jZSA9IGNlO1xuICBkZWxldGUgcGFyZW50LnZub2RlLmNlO1xuICByZXR1cm4gdm5vZGU7XG59XG5cbmNvbnN0IGlzS2VlcEFsaXZlID0gKHZub2RlKSA9PiB2bm9kZS50eXBlLl9faXNLZWVwQWxpdmU7XG5jb25zdCBLZWVwQWxpdmVJbXBsID0ge1xuICBuYW1lOiBgS2VlcEFsaXZlYCxcbiAgLy8gTWFya2VyIGZvciBzcGVjaWFsIGhhbmRsaW5nIGluc2lkZSB0aGUgcmVuZGVyZXIuIFdlIGFyZSBub3QgdXNpbmcgYSA9PT1cbiAgLy8gY2hlY2sgZGlyZWN0bHkgb24gS2VlcEFsaXZlIGluIHRoZSByZW5kZXJlciwgYmVjYXVzZSBpbXBvcnRpbmcgaXQgZGlyZWN0bHlcbiAgLy8gd291bGQgcHJldmVudCBpdCBmcm9tIGJlaW5nIHRyZWUtc2hha2VuLlxuICBfX2lzS2VlcEFsaXZlOiB0cnVlLFxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxuICAgIGV4Y2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuICBzZXR1cChwcm9wcywgeyBzbG90cyB9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzaGFyZWRDb250ZXh0ID0gaW5zdGFuY2UuY3R4O1xuICAgIGlmICghc2hhcmVkQ29udGV4dC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBjYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgY29uc3Qga2V5cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgbGV0IGN1cnJlbnQgPSBudWxsO1xuICAgIHtcbiAgICAgIGluc3RhbmNlLl9fdl9jYWNoZSA9IGNhY2hlO1xuICAgIH1cbiAgICBjb25zdCBwYXJlbnRTdXNwZW5zZSA9IGluc3RhbmNlLnN1c3BlbnNlO1xuICAgIGNvbnN0IHtcbiAgICAgIHJlbmRlcmVyOiB7XG4gICAgICAgIHA6IHBhdGNoLFxuICAgICAgICBtOiBtb3ZlLFxuICAgICAgICB1bTogX3VubW91bnQsXG4gICAgICAgIG86IHsgY3JlYXRlRWxlbWVudCB9XG4gICAgICB9XG4gICAgfSA9IHNoYXJlZENvbnRleHQ7XG4gICAgY29uc3Qgc3RvcmFnZUNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgc2hhcmVkQ29udGV4dC5hY3RpdmF0ZSA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIG5hbWVzcGFjZSwgb3B0aW1pemVkKSA9PiB7XG4gICAgICBjb25zdCBpbnN0YW5jZTIgPSB2bm9kZS5jb21wb25lbnQ7XG4gICAgICBtb3ZlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgMCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgcGF0Y2goXG4gICAgICAgIGluc3RhbmNlMi52bm9kZSxcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBpbnN0YW5jZTIsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHZub2RlLnNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaW5zdGFuY2UyLmlzRGVhY3RpdmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGluc3RhbmNlMi5hKSB7XG4gICAgICAgICAgaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UyLmEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZub2RlSG9vayA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLm9uVm5vZGVNb3VudGVkO1xuICAgICAgICBpZiAodm5vZGVIb29rKSB7XG4gICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgaW5zdGFuY2UyLnBhcmVudCwgdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICB7XG4gICAgICAgIGRldnRvb2xzQ29tcG9uZW50QWRkZWQoaW5zdGFuY2UyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHNoYXJlZENvbnRleHQuZGVhY3RpdmF0ZSA9ICh2bm9kZSkgPT4ge1xuICAgICAgY29uc3QgaW5zdGFuY2UyID0gdm5vZGUuY29tcG9uZW50O1xuICAgICAgaW52YWxpZGF0ZU1vdW50KGluc3RhbmNlMi5tKTtcbiAgICAgIGludmFsaWRhdGVNb3VudChpbnN0YW5jZTIuYSk7XG4gICAgICBtb3ZlKHZub2RlLCBzdG9yYWdlQ29udGFpbmVyLCBudWxsLCAxLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoaW5zdGFuY2UyLmRhKSB7XG4gICAgICAgICAgaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UyLmRhKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2bm9kZUhvb2sgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy5vblZub2RlVW5tb3VudGVkO1xuICAgICAgICBpZiAodm5vZGVIb29rKSB7XG4gICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgaW5zdGFuY2UyLnBhcmVudCwgdm5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlMi5pc0RlYWN0aXZhdGVkID0gdHJ1ZTtcbiAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIHtcbiAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZTIpO1xuICAgICAgfVxuICAgICAge1xuICAgICAgICBpbnN0YW5jZTIuX19rZWVwQWxpdmVTdG9yYWdlQ29udGFpbmVyID0gc3RvcmFnZUNvbnRhaW5lcjtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIHVubW91bnQodm5vZGUpIHtcbiAgICAgIHJlc2V0U2hhcGVGbGFnKHZub2RlKTtcbiAgICAgIF91bm1vdW50KHZub2RlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcnVuZUNhY2hlKGZpbHRlcikge1xuICAgICAgY2FjaGUuZm9yRWFjaCgodm5vZGUsIGtleSkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZSh2bm9kZS50eXBlKTtcbiAgICAgICAgaWYgKG5hbWUgJiYgIWZpbHRlcihuYW1lKSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShrZXkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5KGtleSkge1xuICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleSk7XG4gICAgICBpZiAoY2FjaGVkICYmICghY3VycmVudCB8fCAhaXNTYW1lVk5vZGVUeXBlKGNhY2hlZCwgY3VycmVudCkpKSB7XG4gICAgICAgIHVubW91bnQoY2FjaGVkKTtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudCkge1xuICAgICAgICByZXNldFNoYXBlRmxhZyhjdXJyZW50KTtcbiAgICAgIH1cbiAgICAgIGNhY2hlLmRlbGV0ZShrZXkpO1xuICAgICAga2V5cy5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgd2F0Y2goXG4gICAgICAoKSA9PiBbcHJvcHMuaW5jbHVkZSwgcHJvcHMuZXhjbHVkZV0sXG4gICAgICAoW2luY2x1ZGUsIGV4Y2x1ZGVdKSA9PiB7XG4gICAgICAgIGluY2x1ZGUgJiYgcHJ1bmVDYWNoZSgobmFtZSkgPT4gbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSk7XG4gICAgICAgIGV4Y2x1ZGUgJiYgcHJ1bmVDYWNoZSgobmFtZSkgPT4gIW1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpO1xuICAgICAgfSxcbiAgICAgIC8vIHBydW5lIHBvc3QtcmVuZGVyIGFmdGVyIGBjdXJyZW50YCBoYXMgYmVlbiB1cGRhdGVkXG4gICAgICB7IGZsdXNoOiBcInBvc3RcIiwgZGVlcDogdHJ1ZSB9XG4gICAgKTtcbiAgICBsZXQgcGVuZGluZ0NhY2hlS2V5ID0gbnVsbDtcbiAgICBjb25zdCBjYWNoZVN1YnRyZWUgPSAoKSA9PiB7XG4gICAgICBpZiAocGVuZGluZ0NhY2hlS2V5ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzU3VzcGVuc2UoaW5zdGFuY2Uuc3ViVHJlZS50eXBlKSkge1xuICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgICAgICBjYWNoZS5zZXQocGVuZGluZ0NhY2hlS2V5LCBnZXRJbm5lckNoaWxkKGluc3RhbmNlLnN1YlRyZWUpKTtcbiAgICAgICAgICB9LCBpbnN0YW5jZS5zdWJUcmVlLnN1c3BlbnNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWNoZS5zZXQocGVuZGluZ0NhY2hlS2V5LCBnZXRJbm5lckNoaWxkKGluc3RhbmNlLnN1YlRyZWUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgb25Nb3VudGVkKGNhY2hlU3VidHJlZSk7XG4gICAgb25VcGRhdGVkKGNhY2hlU3VidHJlZSk7XG4gICAgb25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICAgIGNhY2hlLmZvckVhY2goKGNhY2hlZCkgPT4ge1xuICAgICAgICBjb25zdCB7IHN1YlRyZWUsIHN1c3BlbnNlIH0gPSBpbnN0YW5jZTtcbiAgICAgICAgY29uc3Qgdm5vZGUgPSBnZXRJbm5lckNoaWxkKHN1YlRyZWUpO1xuICAgICAgICBpZiAoY2FjaGVkLnR5cGUgPT09IHZub2RlLnR5cGUgJiYgY2FjaGVkLmtleSA9PT0gdm5vZGUua2V5KSB7XG4gICAgICAgICAgcmVzZXRTaGFwZUZsYWcodm5vZGUpO1xuICAgICAgICAgIGNvbnN0IGRhID0gdm5vZGUuY29tcG9uZW50LmRhO1xuICAgICAgICAgIGRhICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkYSwgc3VzcGVuc2UpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB1bm1vdW50KGNhY2hlZCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgcGVuZGluZ0NhY2hlS2V5ID0gbnVsbDtcbiAgICAgIGlmICghc2xvdHMuZGVmYXVsdCkge1xuICAgICAgICByZXR1cm4gY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQoKTtcbiAgICAgIGNvbnN0IHJhd1ZOb2RlID0gY2hpbGRyZW5bMF07XG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICB7XG4gICAgICAgICAgd2FybiQxKGBLZWVwQWxpdmUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgY29tcG9uZW50IGNoaWxkLmApO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICB9IGVsc2UgaWYgKCFpc1ZOb2RlKHJhd1ZOb2RlKSB8fCAhKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDQpICYmICEocmF3Vk5vZGUuc2hhcGVGbGFnICYgMTI4KSkge1xuICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHJhd1ZOb2RlO1xuICAgICAgfVxuICAgICAgbGV0IHZub2RlID0gZ2V0SW5uZXJDaGlsZChyYXdWTm9kZSk7XG4gICAgICBpZiAodm5vZGUudHlwZSA9PT0gQ29tbWVudCkge1xuICAgICAgICBjdXJyZW50ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHZub2RlO1xuICAgICAgfVxuICAgICAgY29uc3QgY29tcCA9IHZub2RlLnR5cGU7XG4gICAgICBjb25zdCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShcbiAgICAgICAgaXNBc3luY1dyYXBwZXIodm5vZGUpID8gdm5vZGUudHlwZS5fX2FzeW5jUmVzb2x2ZWQgfHwge30gOiBjb21wXG4gICAgICApO1xuICAgICAgY29uc3QgeyBpbmNsdWRlLCBleGNsdWRlLCBtYXggfSA9IHByb3BzO1xuICAgICAgaWYgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSB8fCBleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSkge1xuICAgICAgICB2bm9kZS5zaGFwZUZsYWcgJj0gLTI1NztcbiAgICAgICAgY3VycmVudCA9IHZub2RlO1xuICAgICAgICByZXR1cm4gcmF3Vk5vZGU7XG4gICAgICB9XG4gICAgICBjb25zdCBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbCA/IGNvbXAgOiB2bm9kZS5rZXk7XG4gICAgICBjb25zdCBjYWNoZWRWTm9kZSA9IGNhY2hlLmdldChrZXkpO1xuICAgICAgaWYgKHZub2RlLmVsKSB7XG4gICAgICAgIHZub2RlID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgICAgIGlmIChyYXdWTm9kZS5zaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgICAgICByYXdWTm9kZS5zc0NvbnRlbnQgPSB2bm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcGVuZGluZ0NhY2hlS2V5ID0ga2V5O1xuICAgICAgaWYgKGNhY2hlZFZOb2RlKSB7XG4gICAgICAgIHZub2RlLmVsID0gY2FjaGVkVk5vZGUuZWw7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudCA9IGNhY2hlZFZOb2RlLmNvbXBvbmVudDtcbiAgICAgICAgaWYgKHZub2RlLnRyYW5zaXRpb24pIHtcbiAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUsIHZub2RlLnRyYW5zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSA1MTI7XG4gICAgICAgIGtleXMuZGVsZXRlKGtleSk7XG4gICAgICAgIGtleXMuYWRkKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgICAgICBpZiAobWF4ICYmIGtleXMuc2l6ZSA+IHBhcnNlSW50KG1heCwgMTApKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGtleXMudmFsdWVzKCkubmV4dCgpLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdm5vZGUuc2hhcGVGbGFnIHw9IDI1NjtcbiAgICAgIGN1cnJlbnQgPSB2bm9kZTtcbiAgICAgIHJldHVybiBpc1N1c3BlbnNlKHJhd1ZOb2RlLnR5cGUpID8gcmF3Vk5vZGUgOiB2bm9kZTtcbiAgICB9O1xuICB9XG59O1xuY29uc3QgS2VlcEFsaXZlID0gS2VlcEFsaXZlSW1wbDtcbmZ1bmN0aW9uIG1hdGNoZXMocGF0dGVybiwgbmFtZSkge1xuICBpZiAoaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnNvbWUoKHApID0+IG1hdGNoZXMocCwgbmFtZSkpO1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoXCIsXCIpLmluY2x1ZGVzKG5hbWUpO1xuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHBhdHRlcm4pKSB7XG4gICAgcGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gb25BY3RpdmF0ZWQoaG9vaywgdGFyZ2V0KSB7XG4gIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCBcImFcIiwgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIG9uRGVhY3RpdmF0ZWQoaG9vaywgdGFyZ2V0KSB7XG4gIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCBcImRhXCIsIHRhcmdldCk7XG59XG5mdW5jdGlvbiByZWdpc3RlcktlZXBBbGl2ZUhvb2soaG9vaywgdHlwZSwgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSB7XG4gIGNvbnN0IHdyYXBwZWRIb29rID0gaG9vay5fX3dkYyB8fCAoaG9vay5fX3dkYyA9ICgpID0+IHtcbiAgICBsZXQgY3VycmVudCA9IHRhcmdldDtcbiAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgaWYgKGN1cnJlbnQuaXNEZWFjdGl2YXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBob29rKCk7XG4gIH0pO1xuICBpbmplY3RIb29rKHR5cGUsIHdyYXBwZWRIb29rLCB0YXJnZXQpO1xuICBpZiAodGFyZ2V0KSB7XG4gICAgbGV0IGN1cnJlbnQgPSB0YXJnZXQucGFyZW50O1xuICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQucGFyZW50KSB7XG4gICAgICBpZiAoaXNLZWVwQWxpdmUoY3VycmVudC5wYXJlbnQudm5vZGUpKSB7XG4gICAgICAgIGluamVjdFRvS2VlcEFsaXZlUm9vdCh3cmFwcGVkSG9vaywgdHlwZSwgdGFyZ2V0LCBjdXJyZW50KTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGluamVjdFRvS2VlcEFsaXZlUm9vdChob29rLCB0eXBlLCB0YXJnZXQsIGtlZXBBbGl2ZVJvb3QpIHtcbiAgY29uc3QgaW5qZWN0ZWQgPSBpbmplY3RIb29rKFxuICAgIHR5cGUsXG4gICAgaG9vayxcbiAgICBrZWVwQWxpdmVSb290LFxuICAgIHRydWVcbiAgICAvKiBwcmVwZW5kICovXG4gICk7XG4gIG9uVW5tb3VudGVkKCgpID0+IHtcbiAgICByZW1vdmUoa2VlcEFsaXZlUm9vdFt0eXBlXSwgaW5qZWN0ZWQpO1xuICB9LCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gcmVzZXRTaGFwZUZsYWcodm5vZGUpIHtcbiAgdm5vZGUuc2hhcGVGbGFnICY9IC0yNTc7XG4gIHZub2RlLnNoYXBlRmxhZyAmPSAtNTEzO1xufVxuZnVuY3Rpb24gZ2V0SW5uZXJDaGlsZCh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuc2hhcGVGbGFnICYgMTI4ID8gdm5vZGUuc3NDb250ZW50IDogdm5vZGU7XG59XG5cbmZ1bmN0aW9uIGluamVjdEhvb2sodHlwZSwgaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlLCBwcmVwZW5kID0gZmFsc2UpIHtcbiAgaWYgKHRhcmdldCkge1xuICAgIGNvbnN0IGhvb2tzID0gdGFyZ2V0W3R5cGVdIHx8ICh0YXJnZXRbdHlwZV0gPSBbXSk7XG4gICAgY29uc3Qgd3JhcHBlZEhvb2sgPSBob29rLl9fd2VoIHx8IChob29rLl9fd2VoID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgIGNvbnN0IHJlc2V0ID0gc2V0Q3VycmVudEluc3RhbmNlKHRhcmdldCk7XG4gICAgICBjb25zdCByZXMgPSBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCB0YXJnZXQsIHR5cGUsIGFyZ3MpO1xuICAgICAgcmVzZXQoKTtcbiAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSk7XG4gICAgaWYgKHByZXBlbmQpIHtcbiAgICAgIGhvb2tzLnVuc2hpZnQod3JhcHBlZEhvb2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBob29rcy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyYXBwZWRIb29rO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGFwaU5hbWUgPSB0b0hhbmRsZXJLZXkoRXJyb3JUeXBlU3RyaW5ncyQxW3R5cGVdLnJlcGxhY2UoLyBob29rJC8sIFwiXCIpKTtcbiAgICB3YXJuJDEoXG4gICAgICBgJHthcGlOYW1lfSBpcyBjYWxsZWQgd2hlbiB0aGVyZSBpcyBubyBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlIHRvIGJlIGFzc29jaWF0ZWQgd2l0aC4gTGlmZWN5Y2xlIGluamVjdGlvbiBBUElzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGV4ZWN1dGlvbiBvZiBzZXR1cCgpLmAgKyAoYCBJZiB5b3UgYXJlIHVzaW5nIGFzeW5jIHNldHVwKCksIG1ha2Ugc3VyZSB0byByZWdpc3RlciBsaWZlY3ljbGUgaG9va3MgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdCBzdGF0ZW1lbnQuYCApXG4gICAgKTtcbiAgfVxufVxuY29uc3QgY3JlYXRlSG9vayA9IChsaWZlY3ljbGUpID0+IChob29rLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UpID0+IHtcbiAgaWYgKCFpc0luU1NSQ29tcG9uZW50U2V0dXAgfHwgbGlmZWN5Y2xlID09PSBcInNwXCIpIHtcbiAgICBpbmplY3RIb29rKGxpZmVjeWNsZSwgKC4uLmFyZ3MpID0+IGhvb2soLi4uYXJncyksIHRhcmdldCk7XG4gIH1cbn07XG5jb25zdCBvbkJlZm9yZU1vdW50ID0gY3JlYXRlSG9vayhcImJtXCIpO1xuY29uc3Qgb25Nb3VudGVkID0gY3JlYXRlSG9vayhcIm1cIik7XG5jb25zdCBvbkJlZm9yZVVwZGF0ZSA9IGNyZWF0ZUhvb2soXG4gIFwiYnVcIlxuKTtcbmNvbnN0IG9uVXBkYXRlZCA9IGNyZWF0ZUhvb2soXCJ1XCIpO1xuY29uc3Qgb25CZWZvcmVVbm1vdW50ID0gY3JlYXRlSG9vayhcbiAgXCJidW1cIlxuKTtcbmNvbnN0IG9uVW5tb3VudGVkID0gY3JlYXRlSG9vayhcInVtXCIpO1xuY29uc3Qgb25TZXJ2ZXJQcmVmZXRjaCA9IGNyZWF0ZUhvb2soXG4gIFwic3BcIlxuKTtcbmNvbnN0IG9uUmVuZGVyVHJpZ2dlcmVkID0gY3JlYXRlSG9vayhcInJ0Z1wiKTtcbmNvbnN0IG9uUmVuZGVyVHJhY2tlZCA9IGNyZWF0ZUhvb2soXCJydGNcIik7XG5mdW5jdGlvbiBvbkVycm9yQ2FwdHVyZWQoaG9vaywgdGFyZ2V0ID0gY3VycmVudEluc3RhbmNlKSB7XG4gIGluamVjdEhvb2soXCJlY1wiLCBob29rLCB0YXJnZXQpO1xufVxuXG5jb25zdCBDT01QT05FTlRTID0gXCJjb21wb25lbnRzXCI7XG5jb25zdCBESVJFQ1RJVkVTID0gXCJkaXJlY3RpdmVzXCI7XG5mdW5jdGlvbiByZXNvbHZlQ29tcG9uZW50KG5hbWUsIG1heWJlU2VsZlJlZmVyZW5jZSkge1xuICByZXR1cm4gcmVzb2x2ZUFzc2V0KENPTVBPTkVOVFMsIG5hbWUsIHRydWUsIG1heWJlU2VsZlJlZmVyZW5jZSkgfHwgbmFtZTtcbn1cbmNvbnN0IE5VTExfRFlOQU1JQ19DT01QT05FTlQgPSBTeW1ib2wuZm9yKFwidi1uZGNcIik7XG5mdW5jdGlvbiByZXNvbHZlRHluYW1pY0NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgaWYgKGlzU3RyaW5nKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gcmVzb2x2ZUFzc2V0KENPTVBPTkVOVFMsIGNvbXBvbmVudCwgZmFsc2UpIHx8IGNvbXBvbmVudDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29tcG9uZW50IHx8IE5VTExfRFlOQU1JQ19DT01QT05FTlQ7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlc29sdmVEaXJlY3RpdmUobmFtZSkge1xuICByZXR1cm4gcmVzb2x2ZUFzc2V0KERJUkVDVElWRVMsIG5hbWUpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0KHR5cGUsIG5hbWUsIHdhcm5NaXNzaW5nID0gdHJ1ZSwgbWF5YmVTZWxmUmVmZXJlbmNlID0gZmFsc2UpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgfHwgY3VycmVudEluc3RhbmNlO1xuICBpZiAoaW5zdGFuY2UpIHtcbiAgICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xuICAgIGlmICh0eXBlID09PSBDT01QT05FTlRTKSB7XG4gICAgICBjb25zdCBzZWxmTmFtZSA9IGdldENvbXBvbmVudE5hbWUoXG4gICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgZmFsc2VcbiAgICAgICk7XG4gICAgICBpZiAoc2VsZk5hbWUgJiYgKHNlbGZOYW1lID09PSBuYW1lIHx8IHNlbGZOYW1lID09PSBjYW1lbGl6ZShuYW1lKSB8fCBzZWxmTmFtZSA9PT0gY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lKSkpKSB7XG4gICAgICAgIHJldHVybiBDb21wb25lbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IChcbiAgICAgIC8vIGxvY2FsIHJlZ2lzdHJhdGlvblxuICAgICAgLy8gY2hlY2sgaW5zdGFuY2VbdHlwZV0gZmlyc3Qgd2hpY2ggaXMgcmVzb2x2ZWQgZm9yIG9wdGlvbnMgQVBJXG4gICAgICByZXNvbHZlKGluc3RhbmNlW3R5cGVdIHx8IENvbXBvbmVudFt0eXBlXSwgbmFtZSkgfHwgLy8gZ2xvYmFsIHJlZ2lzdHJhdGlvblxuICAgICAgcmVzb2x2ZShpbnN0YW5jZS5hcHBDb250ZXh0W3R5cGVdLCBuYW1lKVxuICAgICk7XG4gICAgaWYgKCFyZXMgJiYgbWF5YmVTZWxmUmVmZXJlbmNlKSB7XG4gICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgIH1cbiAgICBpZiAod2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgICAgY29uc3QgZXh0cmEgPSB0eXBlID09PSBDT01QT05FTlRTID8gYFxuSWYgdGhpcyBpcyBhIG5hdGl2ZSBjdXN0b20gZWxlbWVudCwgbWFrZSBzdXJlIHRvIGV4Y2x1ZGUgaXQgZnJvbSBjb21wb25lbnQgcmVzb2x1dGlvbiB2aWEgY29tcGlsZXJPcHRpb25zLmlzQ3VzdG9tRWxlbWVudC5gIDogYGA7XG4gICAgICB3YXJuJDEoYEZhaWxlZCB0byByZXNvbHZlICR7dHlwZS5zbGljZSgwLCAtMSl9OiAke25hbWV9JHtleHRyYX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfSBlbHNlIHtcbiAgICB3YXJuJDEoXG4gICAgICBgcmVzb2x2ZSR7Y2FwaXRhbGl6ZSh0eXBlLnNsaWNlKDAsIC0xKSl9IGNhbiBvbmx5IGJlIHVzZWQgaW4gcmVuZGVyKCkgb3Igc2V0dXAoKS5gXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVzb2x2ZShyZWdpc3RyeSwgbmFtZSkge1xuICByZXR1cm4gcmVnaXN0cnkgJiYgKHJlZ2lzdHJ5W25hbWVdIHx8IHJlZ2lzdHJ5W2NhbWVsaXplKG5hbWUpXSB8fCByZWdpc3RyeVtjYXBpdGFsaXplKGNhbWVsaXplKG5hbWUpKV0pO1xufVxuXG5mdW5jdGlvbiByZW5kZXJMaXN0KHNvdXJjZSwgcmVuZGVySXRlbSwgY2FjaGUsIGluZGV4KSB7XG4gIGxldCByZXQ7XG4gIGNvbnN0IGNhY2hlZCA9IGNhY2hlICYmIGNhY2hlW2luZGV4XTtcbiAgY29uc3Qgc291cmNlSXNBcnJheSA9IGlzQXJyYXkoc291cmNlKTtcbiAgaWYgKHNvdXJjZUlzQXJyYXkgfHwgaXNTdHJpbmcoc291cmNlKSkge1xuICAgIGNvbnN0IHNvdXJjZUlzUmVhY3RpdmVBcnJheSA9IHNvdXJjZUlzQXJyYXkgJiYgaXNSZWFjdGl2ZShzb3VyY2UpO1xuICAgIGxldCBuZWVkc1dyYXAgPSBmYWxzZTtcbiAgICBsZXQgaXNSZWFkb25seVNvdXJjZSA9IGZhbHNlO1xuICAgIGlmIChzb3VyY2VJc1JlYWN0aXZlQXJyYXkpIHtcbiAgICAgIG5lZWRzV3JhcCA9ICFpc1NoYWxsb3coc291cmNlKTtcbiAgICAgIGlzUmVhZG9ubHlTb3VyY2UgPSBpc1JlYWRvbmx5KHNvdXJjZSk7XG4gICAgICBzb3VyY2UgPSBzaGFsbG93UmVhZEFycmF5KHNvdXJjZSk7XG4gICAgfVxuICAgIHJldCA9IG5ldyBBcnJheShzb3VyY2UubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHNvdXJjZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oXG4gICAgICAgIG5lZWRzV3JhcCA/IGlzUmVhZG9ubHlTb3VyY2UgPyB0b1JlYWRvbmx5KHRvUmVhY3RpdmUoc291cmNlW2ldKSkgOiB0b1JlYWN0aXZlKHNvdXJjZVtpXSkgOiBzb3VyY2VbaV0sXG4gICAgICAgIGksXG4gICAgICAgIHZvaWQgMCxcbiAgICAgICAgY2FjaGVkICYmIGNhY2hlZFtpXVxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNvdXJjZSA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihzb3VyY2UpKSB7XG4gICAgICB3YXJuJDEoYFRoZSB2LWZvciByYW5nZSBleHBlY3QgYW4gaW50ZWdlciB2YWx1ZSBidXQgZ290ICR7c291cmNlfS5gKTtcbiAgICB9XG4gICAgcmV0ID0gbmV3IEFycmF5KHNvdXJjZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2U7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVySXRlbShpICsgMSwgaSwgdm9pZCAwLCBjYWNoZWQgJiYgY2FjaGVkW2ldKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgIGlmIChzb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gQXJyYXkuZnJvbShcbiAgICAgICAgc291cmNlLFxuICAgICAgICAoaXRlbSwgaSkgPT4gcmVuZGVySXRlbShpdGVtLCBpLCB2b2lkIDAsIGNhY2hlZCAmJiBjYWNoZWRbaV0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgIHJldFtpXSA9IHJlbmRlckl0ZW0oc291cmNlW2tleV0sIGtleSwgaSwgY2FjaGVkICYmIGNhY2hlZFtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIGlmIChjYWNoZSkge1xuICAgIGNhY2hlW2luZGV4XSA9IHJldDtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTbG90cyhzbG90cywgZHluYW1pY1Nsb3RzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Nsb3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2xvdCA9IGR5bmFtaWNTbG90c1tpXTtcbiAgICBpZiAoaXNBcnJheShzbG90KSkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzbG90Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHNsb3RzW3Nsb3Rbal0ubmFtZV0gPSBzbG90W2pdLmZuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2xvdCkge1xuICAgICAgc2xvdHNbc2xvdC5uYW1lXSA9IHNsb3Qua2V5ID8gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgcmVzID0gc2xvdC5mbiguLi5hcmdzKTtcbiAgICAgICAgaWYgKHJlcykgcmVzLmtleSA9IHNsb3Qua2V5O1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSA6IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90cztcbn1cblxuZnVuY3Rpb24gcmVuZGVyU2xvdChzbG90cywgbmFtZSwgcHJvcHMgPSB7fSwgZmFsbGJhY2ssIG5vU2xvdHRlZCkge1xuICBpZiAoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZS5wYXJlbnQgJiYgaXNBc3luY1dyYXBwZXIoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnBhcmVudCkgJiYgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLnBhcmVudC5jZSkge1xuICAgIGlmIChuYW1lICE9PSBcImRlZmF1bHRcIikgcHJvcHMubmFtZSA9IG5hbWU7XG4gICAgcmV0dXJuIG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhcbiAgICAgIEZyYWdtZW50LFxuICAgICAgbnVsbCxcbiAgICAgIFtjcmVhdGVWTm9kZShcInNsb3RcIiwgcHJvcHMsIGZhbGxiYWNrICYmIGZhbGxiYWNrKCkpXSxcbiAgICAgIDY0XG4gICAgKTtcbiAgfVxuICBsZXQgc2xvdCA9IHNsb3RzW25hbWVdO1xuICBpZiAoc2xvdCAmJiBzbG90Lmxlbmd0aCA+IDEpIHtcbiAgICB3YXJuJDEoXG4gICAgICBgU1NSLW9wdGltaXplZCBzbG90IGZ1bmN0aW9uIGRldGVjdGVkIGluIGEgbm9uLVNTUi1vcHRpbWl6ZWQgcmVuZGVyIGZ1bmN0aW9uLiBZb3UgbmVlZCB0byBtYXJrIHRoaXMgY29tcG9uZW50IHdpdGggJGR5bmFtaWMtc2xvdHMgaW4gdGhlIHBhcmVudCB0ZW1wbGF0ZS5gXG4gICAgKTtcbiAgICBzbG90ID0gKCkgPT4gW107XG4gIH1cbiAgaWYgKHNsb3QgJiYgc2xvdC5fYykge1xuICAgIHNsb3QuX2QgPSBmYWxzZTtcbiAgfVxuICBvcGVuQmxvY2soKTtcbiAgY29uc3QgdmFsaWRTbG90Q29udGVudCA9IHNsb3QgJiYgZW5zdXJlVmFsaWRWTm9kZShzbG90KHByb3BzKSk7XG4gIGNvbnN0IHNsb3RLZXkgPSBwcm9wcy5rZXkgfHwgLy8gc2xvdCBjb250ZW50IGFycmF5IG9mIGEgZHluYW1pYyBjb25kaXRpb25hbCBzbG90IG1heSBoYXZlIGEgYnJhbmNoXG4gIC8vIGtleSBhdHRhY2hlZCBpbiB0aGUgYGNyZWF0ZVNsb3RzYCBoZWxwZXIsIHJlc3BlY3QgdGhhdFxuICB2YWxpZFNsb3RDb250ZW50ICYmIHZhbGlkU2xvdENvbnRlbnQua2V5O1xuICBjb25zdCByZW5kZXJlZCA9IGNyZWF0ZUJsb2NrKFxuICAgIEZyYWdtZW50LFxuICAgIHtcbiAgICAgIGtleTogKHNsb3RLZXkgJiYgIWlzU3ltYm9sKHNsb3RLZXkpID8gc2xvdEtleSA6IGBfJHtuYW1lfWApICsgLy8gIzcyNTYgZm9yY2UgZGlmZmVyZW50aWF0ZSBmYWxsYmFjayBjb250ZW50IGZyb20gYWN0dWFsIGNvbnRlbnRcbiAgICAgICghdmFsaWRTbG90Q29udGVudCAmJiBmYWxsYmFjayA/IFwiX2ZiXCIgOiBcIlwiKVxuICAgIH0sXG4gICAgdmFsaWRTbG90Q29udGVudCB8fCAoZmFsbGJhY2sgPyBmYWxsYmFjaygpIDogW10pLFxuICAgIHZhbGlkU2xvdENvbnRlbnQgJiYgc2xvdHMuXyA9PT0gMSA/IDY0IDogLTJcbiAgKTtcbiAgaWYgKCFub1Nsb3R0ZWQgJiYgcmVuZGVyZWQuc2NvcGVJZCkge1xuICAgIHJlbmRlcmVkLnNsb3RTY29wZUlkcyA9IFtyZW5kZXJlZC5zY29wZUlkICsgXCItc1wiXTtcbiAgfVxuICBpZiAoc2xvdCAmJiBzbG90Ll9jKSB7XG4gICAgc2xvdC5fZCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlbmRlcmVkO1xufVxuZnVuY3Rpb24gZW5zdXJlVmFsaWRWTm9kZSh2bm9kZXMpIHtcbiAgcmV0dXJuIHZub2Rlcy5zb21lKChjaGlsZCkgPT4ge1xuICAgIGlmICghaXNWTm9kZShjaGlsZCkpIHJldHVybiB0cnVlO1xuICAgIGlmIChjaGlsZC50eXBlID09PSBDb21tZW50KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGNoaWxkLnR5cGUgPT09IEZyYWdtZW50ICYmICFlbnN1cmVWYWxpZFZOb2RlKGNoaWxkLmNoaWxkcmVuKSlcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSkgPyB2bm9kZXMgOiBudWxsO1xufVxuXG5mdW5jdGlvbiB0b0hhbmRsZXJzKG9iaiwgcHJlc2VydmVDYXNlSWZOZWNlc3NhcnkpIHtcbiAgY29uc3QgcmV0ID0ge307XG4gIGlmICghaXNPYmplY3Qob2JqKSkge1xuICAgIHdhcm4kMShgdi1vbiB3aXRoIG5vIGFyZ3VtZW50IGV4cGVjdHMgYW4gb2JqZWN0IHZhbHVlLmApO1xuICAgIHJldHVybiByZXQ7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgcmV0W3ByZXNlcnZlQ2FzZUlmTmVjZXNzYXJ5ICYmIC9bQS1aXS8udGVzdChrZXkpID8gYG9uOiR7a2V5fWAgOiB0b0hhbmRsZXJLZXkoa2V5KV0gPSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5jb25zdCBnZXRQdWJsaWNJbnN0YW5jZSA9IChpKSA9PiB7XG4gIGlmICghaSkgcmV0dXJuIG51bGw7XG4gIGlmIChpc1N0YXRlZnVsQ29tcG9uZW50KGkpKSByZXR1cm4gZ2V0Q29tcG9uZW50UHVibGljSW5zdGFuY2UoaSk7XG4gIHJldHVybiBnZXRQdWJsaWNJbnN0YW5jZShpLnBhcmVudCk7XG59O1xuY29uc3QgcHVibGljUHJvcGVydGllc01hcCA9IChcbiAgLy8gTW92ZSBQVVJFIG1hcmtlciB0byBuZXcgbGluZSB0byB3b3JrYXJvdW5kIGNvbXBpbGVyIGRpc2NhcmRpbmcgaXRcbiAgLy8gZHVlIHRvIHR5cGUgYW5ub3RhdGlvblxuICAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpLCB7XG4gICAgJDogKGkpID0+IGksXG4gICAgJGVsOiAoaSkgPT4gaS52bm9kZS5lbCxcbiAgICAkZGF0YTogKGkpID0+IGkuZGF0YSxcbiAgICAkcHJvcHM6IChpKSA9PiBzaGFsbG93UmVhZG9ubHkoaS5wcm9wcykgLFxuICAgICRhdHRyczogKGkpID0+IHNoYWxsb3dSZWFkb25seShpLmF0dHJzKSAsXG4gICAgJHNsb3RzOiAoaSkgPT4gc2hhbGxvd1JlYWRvbmx5KGkuc2xvdHMpICxcbiAgICAkcmVmczogKGkpID0+IHNoYWxsb3dSZWFkb25seShpLnJlZnMpICxcbiAgICAkcGFyZW50OiAoaSkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5wYXJlbnQpLFxuICAgICRyb290OiAoaSkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5yb290KSxcbiAgICAkaG9zdDogKGkpID0+IGkuY2UsXG4gICAgJGVtaXQ6IChpKSA9PiBpLmVtaXQsXG4gICAgJG9wdGlvbnM6IChpKSA9PiByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpKSAsXG4gICAgJGZvcmNlVXBkYXRlOiAoaSkgPT4gaS5mIHx8IChpLmYgPSAoKSA9PiB7XG4gICAgICBxdWV1ZUpvYihpLnVwZGF0ZSk7XG4gICAgfSksXG4gICAgJG5leHRUaWNrOiAoaSkgPT4gaS5uIHx8IChpLm4gPSBuZXh0VGljay5iaW5kKGkucHJveHkpKSxcbiAgICAkd2F0Y2g6IChpKSA9PiBpbnN0YW5jZVdhdGNoLmJpbmQoaSkgXG4gIH0pXG4pO1xuY29uc3QgaXNSZXNlcnZlZFByZWZpeCA9IChrZXkpID0+IGtleSA9PT0gXCJfXCIgfHwga2V5ID09PSBcIiRcIjtcbmNvbnN0IGhhc1NldHVwQmluZGluZyA9IChzdGF0ZSwga2V5KSA9PiBzdGF0ZSAhPT0gRU1QVFlfT0JKICYmICFzdGF0ZS5fX2lzU2NyaXB0U2V0dXAgJiYgaGFzT3duKHN0YXRlLCBrZXkpO1xuY29uc3QgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzID0ge1xuICBnZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXkpIHtcbiAgICBpZiAoa2V5ID09PSBcIl9fdl9za2lwXCIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCB7IGN0eCwgc2V0dXBTdGF0ZSwgZGF0YSwgcHJvcHMsIGFjY2Vzc0NhY2hlLCB0eXBlLCBhcHBDb250ZXh0IH0gPSBpbnN0YW5jZTtcbiAgICBpZiAoa2V5ID09PSBcIl9faXNWdWVcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGxldCBub3JtYWxpemVkUHJvcHM7XG4gICAgaWYgKGtleVswXSAhPT0gXCIkXCIpIHtcbiAgICAgIGNvbnN0IG4gPSBhY2Nlc3NDYWNoZVtrZXldO1xuICAgICAgaWYgKG4gIT09IHZvaWQgMCkge1xuICAgICAgICBzd2l0Y2ggKG4pIHtcbiAgICAgICAgICBjYXNlIDEgLyogU0VUVVAgKi86XG4gICAgICAgICAgICByZXR1cm4gc2V0dXBTdGF0ZVtrZXldO1xuICAgICAgICAgIGNhc2UgMiAvKiBEQVRBICovOlxuICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgICAgICBjYXNlIDQgLyogQ09OVEVYVCAqLzpcbiAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcbiAgICAgICAgICBjYXNlIDMgLyogUFJPUFMgKi86XG4gICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChoYXNTZXR1cEJpbmRpbmcoc2V0dXBTdGF0ZSwga2V5KSkge1xuICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMSAvKiBTRVRVUCAqLztcbiAgICAgICAgcmV0dXJuIHNldHVwU3RhdGVba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB7XG4gICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAyIC8qIERBVEEgKi87XG4gICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAvLyBvbmx5IGNhY2hlIG90aGVyIHByb3BlcnRpZXMgd2hlbiBpbnN0YW5jZSBoYXMgZGVjbGFyZWQgKHRodXMgc3RhYmxlKVxuICAgICAgICAvLyBwcm9wc1xuICAgICAgICAobm9ybWFsaXplZFByb3BzID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdKSAmJiBoYXNPd24obm9ybWFsaXplZFByb3BzLCBrZXkpXG4gICAgICApIHtcbiAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDMgLyogUFJPUFMgKi87XG4gICAgICAgIHJldHVybiBwcm9wc1trZXldO1xuICAgICAgfSBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XG4gICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSA0IC8qIENPTlRFWFQgKi87XG4gICAgICAgIHJldHVybiBjdHhba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkQ2FjaGVBY2Nlc3MpIHtcbiAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDAgLyogT1RIRVIgKi87XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHB1YmxpY0dldHRlciA9IHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XTtcbiAgICBsZXQgY3NzTW9kdWxlLCBnbG9iYWxQcm9wZXJ0aWVzO1xuICAgIGlmIChwdWJsaWNHZXR0ZXIpIHtcbiAgICAgIGlmIChrZXkgPT09IFwiJGF0dHJzXCIpIHtcbiAgICAgICAgdHJhY2soaW5zdGFuY2UuYXR0cnMsIFwiZ2V0XCIsIFwiXCIpO1xuICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT09IFwiJHNsb3RzXCIpIHtcbiAgICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIsIGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHVibGljR2V0dGVyKGluc3RhbmNlKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gY3NzIG1vZHVsZSAoaW5qZWN0ZWQgYnkgdnVlLWxvYWRlcilcbiAgICAgIChjc3NNb2R1bGUgPSB0eXBlLl9fY3NzTW9kdWxlcykgJiYgKGNzc01vZHVsZSA9IGNzc01vZHVsZVtrZXldKVxuICAgICkge1xuICAgICAgcmV0dXJuIGNzc01vZHVsZTtcbiAgICB9IGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcbiAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSA0IC8qIENPTlRFWFQgKi87XG4gICAgICByZXR1cm4gY3R4W2tleV07XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIC8vIGdsb2JhbCBwcm9wZXJ0aWVzXG4gICAgICBnbG9iYWxQcm9wZXJ0aWVzID0gYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywgaGFzT3duKGdsb2JhbFByb3BlcnRpZXMsIGtleSlcbiAgICApIHtcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbFByb3BlcnRpZXNba2V5XTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSAmJiAoIWlzU3RyaW5nKGtleSkgfHwgLy8gIzEwOTEgYXZvaWQgaW50ZXJuYWwgaXNSZWYvaXNWTm9kZSBjaGVja3Mgb24gY29tcG9uZW50IGluc3RhbmNlIGxlYWRpbmdcbiAgICAvLyB0byBpbmZpbml0ZSB3YXJuaW5nIGxvb3BcbiAgICBrZXkuaW5kZXhPZihcIl9fdlwiKSAhPT0gMCkpIHtcbiAgICAgIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaXNSZXNlcnZlZFByZWZpeChrZXlbMF0pICYmIGhhc093bihkYXRhLCBrZXkpKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgIGtleVxuICAgICAgICAgICl9IG11c3QgYmUgYWNjZXNzZWQgdmlhICRkYXRhIGJlY2F1c2UgaXQgc3RhcnRzIHdpdGggYSByZXNlcnZlZCBjaGFyYWN0ZXIgKFwiJFwiIG9yIFwiX1wiKSBhbmQgaXMgbm90IHByb3hpZWQgb24gdGhlIHJlbmRlciBjb250ZXh0LmBcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UgPT09IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSkge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gd2FzIGFjY2Vzc2VkIGR1cmluZyByZW5kZXIgYnV0IGlzIG5vdCBkZWZpbmVkIG9uIGluc3RhbmNlLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNldCh7IF86IGluc3RhbmNlIH0sIGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCB7IGRhdGEsIHNldHVwU3RhdGUsIGN0eCB9ID0gaW5zdGFuY2U7XG4gICAgaWYgKGhhc1NldHVwQmluZGluZyhzZXR1cFN0YXRlLCBrZXkpKSB7XG4gICAgICBzZXR1cFN0YXRlW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc2V0dXBTdGF0ZS5fX2lzU2NyaXB0U2V0dXAgJiYgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcbiAgICAgIHdhcm4kMShgQ2Fubm90IG11dGF0ZSA8c2NyaXB0IHNldHVwPiBiaW5kaW5nIFwiJHtrZXl9XCIgZnJvbSBPcHRpb25zIEFQSS5gKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xuICAgICAgZGF0YVtrZXldID0gdmFsdWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGhhc093bihpbnN0YW5jZS5wcm9wcywga2V5KSkge1xuICAgICAgd2FybiQxKGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwcm9wIFwiJHtrZXl9XCIuIFByb3BzIGFyZSByZWFkb25seS5gKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGtleVswXSA9PT0gXCIkXCIgJiYga2V5LnNsaWNlKDEpIGluIGluc3RhbmNlKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwdWJsaWMgcHJvcGVydHkgXCIke2tleX1cIi4gUHJvcGVydGllcyBzdGFydGluZyB3aXRoICQgYXJlIHJlc2VydmVkIGFuZCByZWFkb25seS5gXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoa2V5IGluIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHhba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgaGFzKHtcbiAgICBfOiB7IGRhdGEsIHNldHVwU3RhdGUsIGFjY2Vzc0NhY2hlLCBjdHgsIGFwcENvbnRleHQsIHByb3BzT3B0aW9ucyB9XG4gIH0sIGtleSkge1xuICAgIGxldCBub3JtYWxpemVkUHJvcHM7XG4gICAgcmV0dXJuICEhYWNjZXNzQ2FjaGVba2V5XSB8fCBkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkgfHwgaGFzU2V0dXBCaW5kaW5nKHNldHVwU3RhdGUsIGtleSkgfHwgKG5vcm1hbGl6ZWRQcm9wcyA9IHByb3BzT3B0aW9uc1swXSkgJiYgaGFzT3duKG5vcm1hbGl6ZWRQcm9wcywga2V5KSB8fCBoYXNPd24oY3R4LCBrZXkpIHx8IGhhc093bihwdWJsaWNQcm9wZXJ0aWVzTWFwLCBrZXkpIHx8IGhhc093bihhcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLCBrZXkpO1xuICB9LFxuICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcikge1xuICAgIGlmIChkZXNjcmlwdG9yLmdldCAhPSBudWxsKSB7XG4gICAgICB0YXJnZXQuXy5hY2Nlc3NDYWNoZVtrZXldID0gMDtcbiAgICB9IGVsc2UgaWYgKGhhc093bihkZXNjcmlwdG9yLCBcInZhbHVlXCIpKSB7XG4gICAgICB0aGlzLnNldCh0YXJnZXQsIGtleSwgZGVzY3JpcHRvci52YWx1ZSwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufTtcbntcbiAgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLm93bktleXMgPSAodGFyZ2V0KSA9PiB7XG4gICAgd2FybiQxKFxuICAgICAgYEF2b2lkIGFwcCBsb2dpYyB0aGF0IHJlbGllcyBvbiBlbnVtZXJhdGluZyBrZXlzIG9uIGEgY29tcG9uZW50IGluc3RhbmNlLiBUaGUga2V5cyB3aWxsIGJlIGVtcHR5IGluIHByb2R1Y3Rpb24gbW9kZSB0byBhdm9pZCBwZXJmb3JtYW5jZSBvdmVyaGVhZC5gXG4gICAgKTtcbiAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XG4gIH07XG59XG5jb25zdCBSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKHt9LCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMsIHtcbiAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgaWYgKGtleSA9PT0gU3ltYm9sLnVuc2NvcGFibGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMuZ2V0KHRhcmdldCwga2V5LCB0YXJnZXQpO1xuICB9LFxuICBoYXMoXywga2V5KSB7XG4gICAgY29uc3QgaGFzID0ga2V5WzBdICE9PSBcIl9cIiAmJiAhaXNHbG9iYWxseUFsbG93ZWQoa2V5KTtcbiAgICBpZiAoIWhhcyAmJiBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMuaGFzKF8sIGtleSkpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAga2V5XG4gICAgICAgICl9IHNob3VsZCBub3Qgc3RhcnQgd2l0aCBfIHdoaWNoIGlzIGEgcmVzZXJ2ZWQgcHJlZml4IGZvciBWdWUgaW50ZXJuYWxzLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBoYXM7XG4gIH1cbn0pO1xuZnVuY3Rpb24gY3JlYXRlRGV2UmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xuICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgYF9gLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGdldDogKCkgPT4gaW5zdGFuY2VcbiAgfSk7XG4gIE9iamVjdC5rZXlzKHB1YmxpY1Byb3BlcnRpZXNNYXApLmZvckVhY2goKGtleSkgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBnZXQ6ICgpID0+IHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XShpbnN0YW5jZSksXG4gICAgICAvLyBpbnRlcmNlcHRlZCBieSB0aGUgcHJveHkgc28gbm8gbmVlZCBmb3IgaW1wbGVtZW50YXRpb24sXG4gICAgICAvLyBidXQgbmVlZGVkIHRvIHByZXZlbnQgc2V0IGVycm9yc1xuICAgICAgc2V0OiBOT09QXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gZXhwb3NlUHJvcHNPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpIHtcbiAgY29uc3Qge1xuICAgIGN0eCxcbiAgICBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdXG4gIH0gPSBpbnN0YW5jZTtcbiAgaWYgKHByb3BzT3B0aW9ucykge1xuICAgIE9iamVjdC5rZXlzKHByb3BzT3B0aW9ucykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IGluc3RhbmNlLnByb3BzW2tleV0sXG4gICAgICAgIHNldDogTk9PUFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGV4cG9zZVNldHVwU3RhdGVPblJlbmRlckNvbnRleHQoaW5zdGFuY2UpIHtcbiAgY29uc3QgeyBjdHgsIHNldHVwU3RhdGUgfSA9IGluc3RhbmNlO1xuICBPYmplY3Qua2V5cyh0b1JhdyhzZXR1cFN0YXRlKSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKCFzZXR1cFN0YXRlLl9faXNTY3JpcHRTZXR1cCkge1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRQcmVmaXgoa2V5WzBdKSkge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgYHNldHVwKCkgcmV0dXJuIHByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICBrZXlcbiAgICAgICAgICApfSBzaG91bGQgbm90IHN0YXJ0IHdpdGggXCIkXCIgb3IgXCJfXCIgd2hpY2ggYXJlIHJlc2VydmVkIHByZWZpeGVzIGZvciBWdWUgaW50ZXJuYWxzLmBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiBzZXR1cFN0YXRlW2tleV0sXG4gICAgICAgIHNldDogTk9PUFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3Qgd2FyblJ1bnRpbWVVc2FnZSA9IChtZXRob2QpID0+IHdhcm4kMShcbiAgYCR7bWV0aG9kfSgpIGlzIGEgY29tcGlsZXItaGludCBoZWxwZXIgdGhhdCBpcyBvbmx5IHVzYWJsZSBpbnNpZGUgPHNjcmlwdCBzZXR1cD4gb2YgYSBzaW5nbGUgZmlsZSBjb21wb25lbnQuIEl0cyBhcmd1bWVudHMgc2hvdWxkIGJlIGNvbXBpbGVkIGF3YXkgYW5kIHBhc3NpbmcgaXQgYXQgcnVudGltZSBoYXMgbm8gZWZmZWN0LmBcbik7XG5mdW5jdGlvbiBkZWZpbmVQcm9wcygpIHtcbiAge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZVByb3BzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBkZWZpbmVFbWl0cygpIHtcbiAge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZUVtaXRzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBkZWZpbmVFeHBvc2UoZXhwb3NlZCkge1xuICB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShgZGVmaW5lRXhwb3NlYCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRlZmluZU9wdGlvbnMob3B0aW9ucykge1xuICB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShgZGVmaW5lT3B0aW9uc2ApO1xuICB9XG59XG5mdW5jdGlvbiBkZWZpbmVTbG90cygpIHtcbiAge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZVNsb3RzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBkZWZpbmVNb2RlbCgpIHtcbiAge1xuICAgIHdhcm5SdW50aW1lVXNhZ2UoXCJkZWZpbmVNb2RlbFwiKTtcbiAgfVxufVxuZnVuY3Rpb24gd2l0aERlZmF1bHRzKHByb3BzLCBkZWZhdWx0cykge1xuICB7XG4gICAgd2FyblJ1bnRpbWVVc2FnZShgd2l0aERlZmF1bHRzYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiB1c2VTbG90cygpIHtcbiAgcmV0dXJuIGdldENvbnRleHQoKS5zbG90cztcbn1cbmZ1bmN0aW9uIHVzZUF0dHJzKCkge1xuICByZXR1cm4gZ2V0Q29udGV4dCgpLmF0dHJzO1xufVxuZnVuY3Rpb24gZ2V0Q29udGV4dCgpIHtcbiAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoIWkpIHtcbiAgICB3YXJuJDEoYHVzZUNvbnRleHQoKSBjYWxsZWQgd2l0aG91dCBhY3RpdmUgaW5zdGFuY2UuYCk7XG4gIH1cbiAgcmV0dXJuIGkuc2V0dXBDb250ZXh0IHx8IChpLnNldHVwQ29udGV4dCA9IGNyZWF0ZVNldHVwQ29udGV4dChpKSk7XG59XG5mdW5jdGlvbiBub3JtYWxpemVQcm9wc09yRW1pdHMocHJvcHMpIHtcbiAgcmV0dXJuIGlzQXJyYXkocHJvcHMpID8gcHJvcHMucmVkdWNlKFxuICAgIChub3JtYWxpemVkLCBwKSA9PiAobm9ybWFsaXplZFtwXSA9IG51bGwsIG5vcm1hbGl6ZWQpLFxuICAgIHt9XG4gICkgOiBwcm9wcztcbn1cbmZ1bmN0aW9uIG1lcmdlRGVmYXVsdHMocmF3LCBkZWZhdWx0cykge1xuICBjb25zdCBwcm9wcyA9IG5vcm1hbGl6ZVByb3BzT3JFbWl0cyhyYXcpO1xuICBmb3IgKGNvbnN0IGtleSBpbiBkZWZhdWx0cykge1xuICAgIGlmIChrZXkuc3RhcnRzV2l0aChcIl9fc2tpcFwiKSkgY29udGludWU7XG4gICAgbGV0IG9wdCA9IHByb3BzW2tleV07XG4gICAgaWYgKG9wdCkge1xuICAgICAgaWYgKGlzQXJyYXkob3B0KSB8fCBpc0Z1bmN0aW9uKG9wdCkpIHtcbiAgICAgICAgb3B0ID0gcHJvcHNba2V5XSA9IHsgdHlwZTogb3B0LCBkZWZhdWx0OiBkZWZhdWx0c1trZXldIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHQuZGVmYXVsdCA9IGRlZmF1bHRzW2tleV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcHQgPT09IG51bGwpIHtcbiAgICAgIG9wdCA9IHByb3BzW2tleV0gPSB7IGRlZmF1bHQ6IGRlZmF1bHRzW2tleV0gfTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybiQxKGBwcm9wcyBkZWZhdWx0IGtleSBcIiR7a2V5fVwiIGhhcyBubyBjb3JyZXNwb25kaW5nIGRlY2xhcmF0aW9uLmApO1xuICAgIH1cbiAgICBpZiAob3B0ICYmIGRlZmF1bHRzW2BfX3NraXBfJHtrZXl9YF0pIHtcbiAgICAgIG9wdC5za2lwRmFjdG9yeSA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wcztcbn1cbmZ1bmN0aW9uIG1lcmdlTW9kZWxzKGEsIGIpIHtcbiAgaWYgKCFhIHx8ICFiKSByZXR1cm4gYSB8fCBiO1xuICBpZiAoaXNBcnJheShhKSAmJiBpc0FycmF5KGIpKSByZXR1cm4gYS5jb25jYXQoYik7XG4gIHJldHVybiBleHRlbmQoe30sIG5vcm1hbGl6ZVByb3BzT3JFbWl0cyhhKSwgbm9ybWFsaXplUHJvcHNPckVtaXRzKGIpKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVByb3BzUmVzdFByb3h5KHByb3BzLCBleGNsdWRlZEtleXMpIHtcbiAgY29uc3QgcmV0ID0ge307XG4gIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKCFleGNsdWRlZEtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJldCwga2V5LCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogKCkgPT4gcHJvcHNba2V5XVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiB3aXRoQXN5bmNDb250ZXh0KGdldEF3YWl0YWJsZSkge1xuICBjb25zdCBjdHggPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgaWYgKCFjdHgpIHtcbiAgICB3YXJuJDEoXG4gICAgICBgd2l0aEFzeW5jQ29udGV4dCBjYWxsZWQgd2l0aG91dCBhY3RpdmUgY3VycmVudCBpbnN0YW5jZS4gVGhpcyBpcyBsaWtlbHkgYSBidWcuYFxuICAgICk7XG4gIH1cbiAgbGV0IGF3YWl0YWJsZSA9IGdldEF3YWl0YWJsZSgpO1xuICB1bnNldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoaXNQcm9taXNlKGF3YWl0YWJsZSkpIHtcbiAgICBhd2FpdGFibGUgPSBhd2FpdGFibGUuY2F0Y2goKGUpID0+IHtcbiAgICAgIHNldEN1cnJlbnRJbnN0YW5jZShjdHgpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gW2F3YWl0YWJsZSwgKCkgPT4gc2V0Q3VycmVudEluc3RhbmNlKGN0eCldO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEdXBsaWNhdGVDaGVja2VyKCkge1xuICBjb25zdCBjYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gKHR5cGUsIGtleSkgPT4ge1xuICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICB3YXJuJDEoYCR7dHlwZX0gcHJvcGVydHkgXCIke2tleX1cIiBpcyBhbHJlYWR5IGRlZmluZWQgaW4gJHtjYWNoZVtrZXldfS5gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FjaGVba2V5XSA9IHR5cGU7XG4gICAgfVxuICB9O1xufVxubGV0IHNob3VsZENhY2hlQWNjZXNzID0gdHJ1ZTtcbmZ1bmN0aW9uIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSkge1xuICBjb25zdCBvcHRpb25zID0gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpO1xuICBjb25zdCBwdWJsaWNUaGlzID0gaW5zdGFuY2UucHJveHk7XG4gIGNvbnN0IGN0eCA9IGluc3RhbmNlLmN0eDtcbiAgc2hvdWxkQ2FjaGVBY2Nlc3MgPSBmYWxzZTtcbiAgaWYgKG9wdGlvbnMuYmVmb3JlQ3JlYXRlKSB7XG4gICAgY2FsbEhvb2skMShvcHRpb25zLmJlZm9yZUNyZWF0ZSwgaW5zdGFuY2UsIFwiYmNcIik7XG4gIH1cbiAgY29uc3Qge1xuICAgIC8vIHN0YXRlXG4gICAgZGF0YTogZGF0YU9wdGlvbnMsXG4gICAgY29tcHV0ZWQ6IGNvbXB1dGVkT3B0aW9ucyxcbiAgICBtZXRob2RzLFxuICAgIHdhdGNoOiB3YXRjaE9wdGlvbnMsXG4gICAgcHJvdmlkZTogcHJvdmlkZU9wdGlvbnMsXG4gICAgaW5qZWN0OiBpbmplY3RPcHRpb25zLFxuICAgIC8vIGxpZmVjeWNsZVxuICAgIGNyZWF0ZWQsXG4gICAgYmVmb3JlTW91bnQsXG4gICAgbW91bnRlZCxcbiAgICBiZWZvcmVVcGRhdGUsXG4gICAgdXBkYXRlZCxcbiAgICBhY3RpdmF0ZWQsXG4gICAgZGVhY3RpdmF0ZWQsXG4gICAgYmVmb3JlRGVzdHJveSxcbiAgICBiZWZvcmVVbm1vdW50LFxuICAgIGRlc3Ryb3llZCxcbiAgICB1bm1vdW50ZWQsXG4gICAgcmVuZGVyLFxuICAgIHJlbmRlclRyYWNrZWQsXG4gICAgcmVuZGVyVHJpZ2dlcmVkLFxuICAgIGVycm9yQ2FwdHVyZWQsXG4gICAgc2VydmVyUHJlZmV0Y2gsXG4gICAgLy8gcHVibGljIEFQSVxuICAgIGV4cG9zZSxcbiAgICBpbmhlcml0QXR0cnMsXG4gICAgLy8gYXNzZXRzXG4gICAgY29tcG9uZW50cyxcbiAgICBkaXJlY3RpdmVzLFxuICAgIGZpbHRlcnNcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSA7XG4gIHtcbiAgICBjb25zdCBbcHJvcHNPcHRpb25zXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcbiAgICBpZiAocHJvcHNPcHRpb25zKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wc09wdGlvbnMpIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiUHJvcHNcIiAvKiBQUk9QUyAqLywga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGluamVjdE9wdGlvbnMpIHtcbiAgICByZXNvbHZlSW5qZWN0aW9ucyhpbmplY3RPcHRpb25zLCBjdHgsIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyk7XG4gIH1cbiAgaWYgKG1ldGhvZHMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBjb25zdCBtZXRob2RIYW5kbGVyID0gbWV0aG9kc1trZXldO1xuICAgICAgaWYgKGlzRnVuY3Rpb24obWV0aG9kSGFuZGxlcikpIHtcbiAgICAgICAge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IG1ldGhvZEhhbmRsZXIuYmluZChwdWJsaWNUaGlzKSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJNZXRob2RzXCIgLyogTUVUSE9EUyAqLywga2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybiQxKFxuICAgICAgICAgIGBNZXRob2QgXCIke2tleX1cIiBoYXMgdHlwZSBcIiR7dHlwZW9mIG1ldGhvZEhhbmRsZXJ9XCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P2BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGRhdGFPcHRpb25zKSB7XG4gICAgaWYgKCFpc0Z1bmN0aW9uKGRhdGFPcHRpb25zKSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgVGhlIGRhdGEgb3B0aW9uIG11c3QgYmUgYSBmdW5jdGlvbi4gUGxhaW4gb2JqZWN0IHVzYWdlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IGRhdGFPcHRpb25zLmNhbGwocHVibGljVGhpcywgcHVibGljVGhpcyk7XG4gICAgaWYgKGlzUHJvbWlzZShkYXRhKSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgZGF0YSgpIHJldHVybmVkIGEgUHJvbWlzZSAtIG5vdGUgZGF0YSgpIGNhbm5vdCBiZSBhc3luYzsgSWYgeW91IGludGVuZCB0byBwZXJmb3JtIGRhdGEgZmV0Y2hpbmcgYmVmb3JlIGNvbXBvbmVudCByZW5kZXJzLCB1c2UgYXN5bmMgc2V0dXAoKSArIDxTdXNwZW5zZT4uYFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgd2FybiQxKGBkYXRhKCkgc2hvdWxkIHJldHVybiBhbiBvYmplY3QuYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLmRhdGEgPSByZWFjdGl2ZShkYXRhKTtcbiAgICAgIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkRhdGFcIiAvKiBEQVRBICovLCBrZXkpO1xuICAgICAgICAgIGlmICghaXNSZXNlcnZlZFByZWZpeChrZXlbMF0pKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICBnZXQ6ICgpID0+IGRhdGFba2V5XSxcbiAgICAgICAgICAgICAgc2V0OiBOT09QXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc2hvdWxkQ2FjaGVBY2Nlc3MgPSB0cnVlO1xuICBpZiAoY29tcHV0ZWRPcHRpb25zKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gY29tcHV0ZWRPcHRpb25zKSB7XG4gICAgICBjb25zdCBvcHQgPSBjb21wdXRlZE9wdGlvbnNba2V5XTtcbiAgICAgIGNvbnN0IGdldCA9IGlzRnVuY3Rpb24ob3B0KSA/IG9wdC5iaW5kKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpIDogaXNGdW5jdGlvbihvcHQuZ2V0KSA/IG9wdC5nZXQuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKSA6IE5PT1A7XG4gICAgICBpZiAoZ2V0ID09PSBOT09QKSB7XG4gICAgICAgIHdhcm4kMShgQ29tcHV0ZWQgcHJvcGVydHkgXCIke2tleX1cIiBoYXMgbm8gZ2V0dGVyLmApO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2V0ID0gIWlzRnVuY3Rpb24ob3B0KSAmJiBpc0Z1bmN0aW9uKG9wdC5zZXQpID8gb3B0LnNldC5iaW5kKHB1YmxpY1RoaXMpIDogKCkgPT4ge1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgYFdyaXRlIG9wZXJhdGlvbiBmYWlsZWQ6IGNvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgcmVhZG9ubHkuYFxuICAgICAgICApO1xuICAgICAgfSA7XG4gICAgICBjb25zdCBjID0gY29tcHV0ZWQoe1xuICAgICAgICBnZXQsXG4gICAgICAgIHNldFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IGMudmFsdWUsXG4gICAgICAgIHNldDogKHYpID0+IGMudmFsdWUgPSB2XG4gICAgICB9KTtcbiAgICAgIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiQ29tcHV0ZWRcIiAvKiBDT01QVVRFRCAqLywga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHdhdGNoT3B0aW9ucykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHdhdGNoT3B0aW9ucykge1xuICAgICAgY3JlYXRlV2F0Y2hlcih3YXRjaE9wdGlvbnNba2V5XSwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpO1xuICAgIH1cbiAgfVxuICBpZiAocHJvdmlkZU9wdGlvbnMpIHtcbiAgICBjb25zdCBwcm92aWRlcyA9IGlzRnVuY3Rpb24ocHJvdmlkZU9wdGlvbnMpID8gcHJvdmlkZU9wdGlvbnMuY2FsbChwdWJsaWNUaGlzKSA6IHByb3ZpZGVPcHRpb25zO1xuICAgIFJlZmxlY3Qub3duS2V5cyhwcm92aWRlcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBwcm92aWRlKGtleSwgcHJvdmlkZXNba2V5XSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKGNyZWF0ZWQpIHtcbiAgICBjYWxsSG9vayQxKGNyZWF0ZWQsIGluc3RhbmNlLCBcImNcIik7XG4gIH1cbiAgZnVuY3Rpb24gcmVnaXN0ZXJMaWZlY3ljbGVIb29rKHJlZ2lzdGVyLCBob29rKSB7XG4gICAgaWYgKGlzQXJyYXkoaG9vaykpIHtcbiAgICAgIGhvb2suZm9yRWFjaCgoX2hvb2spID0+IHJlZ2lzdGVyKF9ob29rLmJpbmQocHVibGljVGhpcykpKTtcbiAgICB9IGVsc2UgaWYgKGhvb2spIHtcbiAgICAgIHJlZ2lzdGVyKGhvb2suYmluZChwdWJsaWNUaGlzKSk7XG4gICAgfVxuICB9XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkJlZm9yZU1vdW50LCBiZWZvcmVNb3VudCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbk1vdW50ZWQsIG1vdW50ZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVVcGRhdGUsIGJlZm9yZVVwZGF0ZSk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblVwZGF0ZWQsIHVwZGF0ZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25BY3RpdmF0ZWQsIGFjdGl2YXRlZCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkRlYWN0aXZhdGVkLCBkZWFjdGl2YXRlZCk7XG4gIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkVycm9yQ2FwdHVyZWQsIGVycm9yQ2FwdHVyZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25SZW5kZXJUcmFja2VkLCByZW5kZXJUcmFja2VkKTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uUmVuZGVyVHJpZ2dlcmVkLCByZW5kZXJUcmlnZ2VyZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVVbm1vdW50LCBiZWZvcmVVbm1vdW50KTtcbiAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uVW5tb3VudGVkLCB1bm1vdW50ZWQpO1xuICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25TZXJ2ZXJQcmVmZXRjaCwgc2VydmVyUHJlZmV0Y2gpO1xuICBpZiAoaXNBcnJheShleHBvc2UpKSB7XG4gICAgaWYgKGV4cG9zZS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGV4cG9zZWQgPSBpbnN0YW5jZS5leHBvc2VkIHx8IChpbnN0YW5jZS5leHBvc2VkID0ge30pO1xuICAgICAgZXhwb3NlLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3NlZCwga2V5LCB7XG4gICAgICAgICAgZ2V0OiAoKSA9PiBwdWJsaWNUaGlzW2tleV0sXG4gICAgICAgICAgc2V0OiAodmFsKSA9PiBwdWJsaWNUaGlzW2tleV0gPSB2YWxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFpbnN0YW5jZS5leHBvc2VkKSB7XG4gICAgICBpbnN0YW5jZS5leHBvc2VkID0ge307XG4gICAgfVxuICB9XG4gIGlmIChyZW5kZXIgJiYgaW5zdGFuY2UucmVuZGVyID09PSBOT09QKSB7XG4gICAgaW5zdGFuY2UucmVuZGVyID0gcmVuZGVyO1xuICB9XG4gIGlmIChpbmhlcml0QXR0cnMgIT0gbnVsbCkge1xuICAgIGluc3RhbmNlLmluaGVyaXRBdHRycyA9IGluaGVyaXRBdHRycztcbiAgfVxuICBpZiAoY29tcG9uZW50cykgaW5zdGFuY2UuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gIGlmIChkaXJlY3RpdmVzKSBpbnN0YW5jZS5kaXJlY3RpdmVzID0gZGlyZWN0aXZlcztcbiAgaWYgKHNlcnZlclByZWZldGNoKSB7XG4gICAgbWFya0FzeW5jQm91bmRhcnkoaW5zdGFuY2UpO1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0aW9ucyhpbmplY3RPcHRpb25zLCBjdHgsIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IE5PT1ApIHtcbiAgaWYgKGlzQXJyYXkoaW5qZWN0T3B0aW9ucykpIHtcbiAgICBpbmplY3RPcHRpb25zID0gbm9ybWFsaXplSW5qZWN0KGluamVjdE9wdGlvbnMpO1xuICB9XG4gIGZvciAoY29uc3Qga2V5IGluIGluamVjdE9wdGlvbnMpIHtcbiAgICBjb25zdCBvcHQgPSBpbmplY3RPcHRpb25zW2tleV07XG4gICAgbGV0IGluamVjdGVkO1xuICAgIGlmIChpc09iamVjdChvcHQpKSB7XG4gICAgICBpZiAoXCJkZWZhdWx0XCIgaW4gb3B0KSB7XG4gICAgICAgIGluamVjdGVkID0gaW5qZWN0KFxuICAgICAgICAgIG9wdC5mcm9tIHx8IGtleSxcbiAgICAgICAgICBvcHQuZGVmYXVsdCxcbiAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmplY3RlZCA9IGluamVjdChvcHQuZnJvbSB8fCBrZXkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmplY3RlZCA9IGluamVjdChvcHQpO1xuICAgIH1cbiAgICBpZiAoaXNSZWYoaW5qZWN0ZWQpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6ICgpID0+IGluamVjdGVkLnZhbHVlLFxuICAgICAgICBzZXQ6ICh2KSA9PiBpbmplY3RlZC52YWx1ZSA9IHZcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHhba2V5XSA9IGluamVjdGVkO1xuICAgIH1cbiAgICB7XG4gICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJJbmplY3RcIiAvKiBJTkpFQ1QgKi8sIGtleSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBjYWxsSG9vayQxKGhvb2ssIGluc3RhbmNlLCB0eXBlKSB7XG4gIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKFxuICAgIGlzQXJyYXkoaG9vaykgPyBob29rLm1hcCgoaCkgPT4gaC5iaW5kKGluc3RhbmNlLnByb3h5KSkgOiBob29rLmJpbmQoaW5zdGFuY2UucHJveHkpLFxuICAgIGluc3RhbmNlLFxuICAgIHR5cGVcbiAgKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIocmF3LCBjdHgsIHB1YmxpY1RoaXMsIGtleSkge1xuICBsZXQgZ2V0dGVyID0ga2V5LmluY2x1ZGVzKFwiLlwiKSA/IGNyZWF0ZVBhdGhHZXR0ZXIocHVibGljVGhpcywga2V5KSA6ICgpID0+IHB1YmxpY1RoaXNba2V5XTtcbiAgaWYgKGlzU3RyaW5nKHJhdykpIHtcbiAgICBjb25zdCBoYW5kbGVyID0gY3R4W3Jhd107XG4gICAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICAgIHtcbiAgICAgICAgd2F0Y2goZ2V0dGVyLCBoYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2FybiQxKGBJbnZhbGlkIHdhdGNoIGhhbmRsZXIgc3BlY2lmaWVkIGJ5IGtleSBcIiR7cmF3fVwiYCwgaGFuZGxlcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24ocmF3KSkge1xuICAgIHtcbiAgICAgIHdhdGNoKGdldHRlciwgcmF3LmJpbmQocHVibGljVGhpcykpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChyYXcpKSB7XG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgICAgcmF3LmZvckVhY2goKHIpID0+IGNyZWF0ZVdhdGNoZXIociwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaGFuZGxlciA9IGlzRnVuY3Rpb24ocmF3LmhhbmRsZXIpID8gcmF3LmhhbmRsZXIuYmluZChwdWJsaWNUaGlzKSA6IGN0eFtyYXcuaGFuZGxlcl07XG4gICAgICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgICAgICB3YXRjaChnZXR0ZXIsIGhhbmRsZXIsIHJhdyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuJDEoYEludmFsaWQgd2F0Y2ggaGFuZGxlciBzcGVjaWZpZWQgYnkga2V5IFwiJHtyYXcuaGFuZGxlcn1cImAsIGhhbmRsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3YXJuJDEoYEludmFsaWQgd2F0Y2ggb3B0aW9uOiBcIiR7a2V5fVwiYCwgcmF3KTtcbiAgfVxufVxuZnVuY3Rpb24gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpIHtcbiAgY29uc3QgYmFzZSA9IGluc3RhbmNlLnR5cGU7XG4gIGNvbnN0IHsgbWl4aW5zLCBleHRlbmRzOiBleHRlbmRzT3B0aW9ucyB9ID0gYmFzZTtcbiAgY29uc3Qge1xuICAgIG1peGluczogZ2xvYmFsTWl4aW5zLFxuICAgIG9wdGlvbnNDYWNoZTogY2FjaGUsXG4gICAgY29uZmlnOiB7IG9wdGlvbk1lcmdlU3RyYXRlZ2llcyB9XG4gIH0gPSBpbnN0YW5jZS5hcHBDb250ZXh0O1xuICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoYmFzZSk7XG4gIGxldCByZXNvbHZlZDtcbiAgaWYgKGNhY2hlZCkge1xuICAgIHJlc29sdmVkID0gY2FjaGVkO1xuICB9IGVsc2UgaWYgKCFnbG9iYWxNaXhpbnMubGVuZ3RoICYmICFtaXhpbnMgJiYgIWV4dGVuZHNPcHRpb25zKSB7XG4gICAge1xuICAgICAgcmVzb2x2ZWQgPSBiYXNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXNvbHZlZCA9IHt9O1xuICAgIGlmIChnbG9iYWxNaXhpbnMubGVuZ3RoKSB7XG4gICAgICBnbG9iYWxNaXhpbnMuZm9yRWFjaChcbiAgICAgICAgKG0pID0+IG1lcmdlT3B0aW9ucyhyZXNvbHZlZCwgbSwgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzLCB0cnVlKVxuICAgICAgKTtcbiAgICB9XG4gICAgbWVyZ2VPcHRpb25zKHJlc29sdmVkLCBiYXNlLCBvcHRpb25NZXJnZVN0cmF0ZWdpZXMpO1xuICB9XG4gIGlmIChpc09iamVjdChiYXNlKSkge1xuICAgIGNhY2hlLnNldChiYXNlLCByZXNvbHZlZCk7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVkO1xufVxuZnVuY3Rpb24gbWVyZ2VPcHRpb25zKHRvLCBmcm9tLCBzdHJhdHMsIGFzTWl4aW4gPSBmYWxzZSkge1xuICBjb25zdCB7IG1peGlucywgZXh0ZW5kczogZXh0ZW5kc09wdGlvbnMgfSA9IGZyb207XG4gIGlmIChleHRlbmRzT3B0aW9ucykge1xuICAgIG1lcmdlT3B0aW9ucyh0bywgZXh0ZW5kc09wdGlvbnMsIHN0cmF0cywgdHJ1ZSk7XG4gIH1cbiAgaWYgKG1peGlucykge1xuICAgIG1peGlucy5mb3JFYWNoKFxuICAgICAgKG0pID0+IG1lcmdlT3B0aW9ucyh0bywgbSwgc3RyYXRzLCB0cnVlKVxuICAgICk7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gZnJvbSkge1xuICAgIGlmIChhc01peGluICYmIGtleSA9PT0gXCJleHBvc2VcIikge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgXCJleHBvc2VcIiBvcHRpb24gaXMgaWdub3JlZCB3aGVuIGRlY2xhcmVkIGluIG1peGlucyBvciBleHRlbmRzLiBJdCBzaG91bGQgb25seSBiZSBkZWNsYXJlZCBpbiB0aGUgYmFzZSBjb21wb25lbnQgaXRzZWxmLmBcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHN0cmF0ID0gaW50ZXJuYWxPcHRpb25NZXJnZVN0cmF0c1trZXldIHx8IHN0cmF0cyAmJiBzdHJhdHNba2V5XTtcbiAgICAgIHRvW2tleV0gPSBzdHJhdCA/IHN0cmF0KHRvW2tleV0sIGZyb21ba2V5XSkgOiBmcm9tW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0bztcbn1cbmNvbnN0IGludGVybmFsT3B0aW9uTWVyZ2VTdHJhdHMgPSB7XG4gIGRhdGE6IG1lcmdlRGF0YUZuLFxuICBwcm9wczogbWVyZ2VFbWl0c09yUHJvcHNPcHRpb25zLFxuICBlbWl0czogbWVyZ2VFbWl0c09yUHJvcHNPcHRpb25zLFxuICAvLyBvYmplY3RzXG4gIG1ldGhvZHM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgY29tcHV0ZWQ6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgLy8gbGlmZWN5Y2xlXG4gIGJlZm9yZUNyZWF0ZTogbWVyZ2VBc0FycmF5JDEsXG4gIGNyZWF0ZWQ6IG1lcmdlQXNBcnJheSQxLFxuICBiZWZvcmVNb3VudDogbWVyZ2VBc0FycmF5JDEsXG4gIG1vdW50ZWQ6IG1lcmdlQXNBcnJheSQxLFxuICBiZWZvcmVVcGRhdGU6IG1lcmdlQXNBcnJheSQxLFxuICB1cGRhdGVkOiBtZXJnZUFzQXJyYXkkMSxcbiAgYmVmb3JlRGVzdHJveTogbWVyZ2VBc0FycmF5JDEsXG4gIGJlZm9yZVVubW91bnQ6IG1lcmdlQXNBcnJheSQxLFxuICBkZXN0cm95ZWQ6IG1lcmdlQXNBcnJheSQxLFxuICB1bm1vdW50ZWQ6IG1lcmdlQXNBcnJheSQxLFxuICBhY3RpdmF0ZWQ6IG1lcmdlQXNBcnJheSQxLFxuICBkZWFjdGl2YXRlZDogbWVyZ2VBc0FycmF5JDEsXG4gIGVycm9yQ2FwdHVyZWQ6IG1lcmdlQXNBcnJheSQxLFxuICBzZXJ2ZXJQcmVmZXRjaDogbWVyZ2VBc0FycmF5JDEsXG4gIC8vIGFzc2V0c1xuICBjb21wb25lbnRzOiBtZXJnZU9iamVjdE9wdGlvbnMsXG4gIGRpcmVjdGl2ZXM6IG1lcmdlT2JqZWN0T3B0aW9ucyxcbiAgLy8gd2F0Y2hcbiAgd2F0Y2g6IG1lcmdlV2F0Y2hPcHRpb25zLFxuICAvLyBwcm92aWRlIC8gaW5qZWN0XG4gIHByb3ZpZGU6IG1lcmdlRGF0YUZuLFxuICBpbmplY3Q6IG1lcmdlSW5qZWN0XG59O1xuZnVuY3Rpb24gbWVyZ2VEYXRhRm4odG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7XG4gICAgcmV0dXJuIHRvO1xuICB9XG4gIGlmICghdG8pIHtcbiAgICByZXR1cm4gZnJvbTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuKCkge1xuICAgIHJldHVybiAoZXh0ZW5kKShcbiAgICAgIGlzRnVuY3Rpb24odG8pID8gdG8uY2FsbCh0aGlzLCB0aGlzKSA6IHRvLFxuICAgICAgaXNGdW5jdGlvbihmcm9tKSA/IGZyb20uY2FsbCh0aGlzLCB0aGlzKSA6IGZyb21cbiAgICApO1xuICB9O1xufVxuZnVuY3Rpb24gbWVyZ2VJbmplY3QodG8sIGZyb20pIHtcbiAgcmV0dXJuIG1lcmdlT2JqZWN0T3B0aW9ucyhub3JtYWxpemVJbmplY3QodG8pLCBub3JtYWxpemVJbmplY3QoZnJvbSkpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0KHJhdykge1xuICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tyYXdbaV1dID0gcmF3W2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIHJldHVybiByYXc7XG59XG5mdW5jdGlvbiBtZXJnZUFzQXJyYXkkMSh0bywgZnJvbSkge1xuICByZXR1cm4gdG8gPyBbLi4ubmV3IFNldChbXS5jb25jYXQodG8sIGZyb20pKV0gOiBmcm9tO1xufVxuZnVuY3Rpb24gbWVyZ2VPYmplY3RPcHRpb25zKHRvLCBmcm9tKSB7XG4gIHJldHVybiB0byA/IGV4dGVuZCgvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSwgdG8sIGZyb20pIDogZnJvbTtcbn1cbmZ1bmN0aW9uIG1lcmdlRW1pdHNPclByb3BzT3B0aW9ucyh0bywgZnJvbSkge1xuICBpZiAodG8pIHtcbiAgICBpZiAoaXNBcnJheSh0bykgJiYgaXNBcnJheShmcm9tKSkge1xuICAgICAgcmV0dXJuIFsuLi4vKiBAX19QVVJFX18gKi8gbmV3IFNldChbLi4udG8sIC4uLmZyb21dKV07XG4gICAgfVxuICAgIHJldHVybiBleHRlbmQoXG4gICAgICAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIG5vcm1hbGl6ZVByb3BzT3JFbWl0cyh0byksXG4gICAgICBub3JtYWxpemVQcm9wc09yRW1pdHMoZnJvbSAhPSBudWxsID8gZnJvbSA6IHt9KVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZyb207XG4gIH1cbn1cbmZ1bmN0aW9uIG1lcmdlV2F0Y2hPcHRpb25zKHRvLCBmcm9tKSB7XG4gIGlmICghdG8pIHJldHVybiBmcm9tO1xuICBpZiAoIWZyb20pIHJldHVybiB0bztcbiAgY29uc3QgbWVyZ2VkID0gZXh0ZW5kKC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpLCB0byk7XG4gIGZvciAoY29uc3Qga2V5IGluIGZyb20pIHtcbiAgICBtZXJnZWRba2V5XSA9IG1lcmdlQXNBcnJheSQxKHRvW2tleV0sIGZyb21ba2V5XSk7XG4gIH1cbiAgcmV0dXJuIG1lcmdlZDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXBwQ29udGV4dCgpIHtcbiAgcmV0dXJuIHtcbiAgICBhcHA6IG51bGwsXG4gICAgY29uZmlnOiB7XG4gICAgICBpc05hdGl2ZVRhZzogTk8sXG4gICAgICBwZXJmb3JtYW5jZTogZmFsc2UsXG4gICAgICBnbG9iYWxQcm9wZXJ0aWVzOiB7fSxcbiAgICAgIG9wdGlvbk1lcmdlU3RyYXRlZ2llczoge30sXG4gICAgICBlcnJvckhhbmRsZXI6IHZvaWQgMCxcbiAgICAgIHdhcm5IYW5kbGVyOiB2b2lkIDAsXG4gICAgICBjb21waWxlck9wdGlvbnM6IHt9XG4gICAgfSxcbiAgICBtaXhpbnM6IFtdLFxuICAgIGNvbXBvbmVudHM6IHt9LFxuICAgIGRpcmVjdGl2ZXM6IHt9LFxuICAgIHByb3ZpZGVzOiAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICBvcHRpb25zQ2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLFxuICAgIHByb3BzQ2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpLFxuICAgIGVtaXRzQ2FjaGU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpXG4gIH07XG59XG5sZXQgdWlkJDEgPSAwO1xuZnVuY3Rpb24gY3JlYXRlQXBwQVBJKHJlbmRlciwgaHlkcmF0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQXBwKHJvb3RDb21wb25lbnQsIHJvb3RQcm9wcyA9IG51bGwpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24ocm9vdENvbXBvbmVudCkpIHtcbiAgICAgIHJvb3RDb21wb25lbnQgPSBleHRlbmQoe30sIHJvb3RDb21wb25lbnQpO1xuICAgIH1cbiAgICBpZiAocm9vdFByb3BzICE9IG51bGwgJiYgIWlzT2JqZWN0KHJvb3RQcm9wcykpIHtcbiAgICAgIHdhcm4kMShgcm9vdCBwcm9wcyBwYXNzZWQgdG8gYXBwLm1vdW50KCkgbXVzdCBiZSBhbiBvYmplY3QuYCk7XG4gICAgICByb290UHJvcHMgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xuICAgIGNvbnN0IGluc3RhbGxlZFBsdWdpbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbiAgICBjb25zdCBwbHVnaW5DbGVhbnVwRm5zID0gW107XG4gICAgbGV0IGlzTW91bnRlZCA9IGZhbHNlO1xuICAgIGNvbnN0IGFwcCA9IGNvbnRleHQuYXBwID0ge1xuICAgICAgX3VpZDogdWlkJDErKyxcbiAgICAgIF9jb21wb25lbnQ6IHJvb3RDb21wb25lbnQsXG4gICAgICBfcHJvcHM6IHJvb3RQcm9wcyxcbiAgICAgIF9jb250YWluZXI6IG51bGwsXG4gICAgICBfY29udGV4dDogY29udGV4dCxcbiAgICAgIF9pbnN0YW5jZTogbnVsbCxcbiAgICAgIHZlcnNpb24sXG4gICAgICBnZXQgY29uZmlnKCkge1xuICAgICAgICByZXR1cm4gY29udGV4dC5jb25maWc7XG4gICAgICB9LFxuICAgICAgc2V0IGNvbmZpZyh2KSB7XG4gICAgICAgIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgYXBwLmNvbmZpZyBjYW5ub3QgYmUgcmVwbGFjZWQuIE1vZGlmeSBpbmRpdmlkdWFsIG9wdGlvbnMgaW5zdGVhZC5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHVzZShwbHVnaW4sIC4uLm9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaGFzKHBsdWdpbikpIHtcbiAgICAgICAgICB3YXJuJDEoYFBsdWdpbiBoYXMgYWxyZWFkeSBiZWVuIGFwcGxpZWQgdG8gdGFyZ2V0IGFwcC5gKTtcbiAgICAgICAgfSBlbHNlIGlmIChwbHVnaW4gJiYgaXNGdW5jdGlvbihwbHVnaW4uaW5zdGFsbCkpIHtcbiAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xuICAgICAgICAgIHBsdWdpbi5pbnN0YWxsKGFwcCwgLi4ub3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihwbHVnaW4pKSB7XG4gICAgICAgICAgaW5zdGFsbGVkUGx1Z2lucy5hZGQocGx1Z2luKTtcbiAgICAgICAgICBwbHVnaW4oYXBwLCAuLi5vcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgQSBwbHVnaW4gbXVzdCBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgd2l0aCBhbiBcImluc3RhbGxcIiBmdW5jdGlvbi5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgfSxcbiAgICAgIG1peGluKG1peGluKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIWNvbnRleHQubWl4aW5zLmluY2x1ZGVzKG1peGluKSkge1xuICAgICAgICAgICAgY29udGV4dC5taXhpbnMucHVzaChtaXhpbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgXCJNaXhpbiBoYXMgYWxyZWFkeSBiZWVuIGFwcGxpZWQgdG8gdGFyZ2V0IGFwcFwiICsgKG1peGluLm5hbWUgPyBgOiAke21peGluLm5hbWV9YCA6IFwiXCIpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgfSxcbiAgICAgIGNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpIHtcbiAgICAgICAge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lLCBjb250ZXh0LmNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4gY29udGV4dC5jb21wb25lbnRzW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0LmNvbXBvbmVudHNbbmFtZV0pIHtcbiAgICAgICAgICB3YXJuJDEoYENvbXBvbmVudCBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV0gPSBjb21wb25lbnQ7XG4gICAgICAgIHJldHVybiBhcHA7XG4gICAgICB9LFxuICAgICAgZGlyZWN0aXZlKG5hbWUsIGRpcmVjdGl2ZSkge1xuICAgICAgICB7XG4gICAgICAgICAgdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGlyZWN0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGV4dC5kaXJlY3RpdmVzW25hbWVdKSB7XG4gICAgICAgICAgd2FybiQxKGBEaXJlY3RpdmUgXCIke25hbWV9XCIgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIGluIHRhcmdldCBhcHAuYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5kaXJlY3RpdmVzW25hbWVdID0gZGlyZWN0aXZlO1xuICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgfSxcbiAgICAgIG1vdW50KHJvb3RDb250YWluZXIsIGlzSHlkcmF0ZSwgbmFtZXNwYWNlKSB7XG4gICAgICAgIGlmICghaXNNb3VudGVkKSB7XG4gICAgICAgICAgaWYgKHJvb3RDb250YWluZXIuX192dWVfYXBwX18pIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYFRoZXJlIGlzIGFscmVhZHkgYW4gYXBwIGluc3RhbmNlIG1vdW50ZWQgb24gdGhlIGhvc3QgY29udGFpbmVyLlxuIElmIHlvdSB3YW50IHRvIG1vdW50IGFub3RoZXIgYXBwIG9uIHRoZSBzYW1lIGhvc3QgY29udGFpbmVyLCB5b3UgbmVlZCB0byB1bm1vdW50IHRoZSBwcmV2aW91cyBhcHAgYnkgY2FsbGluZyBcXGBhcHAudW5tb3VudCgpXFxgIGZpcnN0LmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHZub2RlID0gYXBwLl9jZVZOb2RlIHx8IGNyZWF0ZVZOb2RlKHJvb3RDb21wb25lbnQsIHJvb3RQcm9wcyk7XG4gICAgICAgICAgdm5vZGUuYXBwQ29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgICAgaWYgKG5hbWVzcGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbmFtZXNwYWNlID0gXCJzdmdcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKG5hbWVzcGFjZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZSA9IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29udGV4dC5yZWxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGNsb25lZCA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgICAgICAgICAgICBjbG9uZWQuZWwgPSBudWxsO1xuICAgICAgICAgICAgICByZW5kZXIoY2xvbmVkLCByb290Q29udGFpbmVyLCBuYW1lc3BhY2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzSHlkcmF0ZSAmJiBoeWRyYXRlKSB7XG4gICAgICAgICAgICBoeWRyYXRlKHZub2RlLCByb290Q29udGFpbmVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVuZGVyKHZub2RlLCByb290Q29udGFpbmVyLCBuYW1lc3BhY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICAgIGFwcC5fY29udGFpbmVyID0gcm9vdENvbnRhaW5lcjtcbiAgICAgICAgICByb290Q29udGFpbmVyLl9fdnVlX2FwcF9fID0gYXBwO1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFwcC5faW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnQ7XG4gICAgICAgICAgICBkZXZ0b29sc0luaXRBcHAoYXBwLCB2ZXJzaW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlKHZub2RlLmNvbXBvbmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYEFwcCBoYXMgYWxyZWFkeSBiZWVuIG1vdW50ZWQuXG5JZiB5b3Ugd2FudCB0byByZW1vdW50IHRoZSBzYW1lIGFwcCwgbW92ZSB5b3VyIGFwcCBjcmVhdGlvbiBsb2dpYyBpbnRvIGEgZmFjdG9yeSBmdW5jdGlvbiBhbmQgY3JlYXRlIGZyZXNoIGFwcCBpbnN0YW5jZXMgZm9yIGVhY2ggbW91bnQgLSBlLmcuIFxcYGNvbnN0IGNyZWF0ZU15QXBwID0gKCkgPT4gY3JlYXRlQXBwKEFwcClcXGBgXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudChjbGVhbnVwRm4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhbnVwRm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIGBFeHBlY3RlZCBmdW5jdGlvbiBhcyBmaXJzdCBhcmd1bWVudCB0byBhcHAub25Vbm1vdW50KCksIGJ1dCBnb3QgJHt0eXBlb2YgY2xlYW51cEZufWBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHBsdWdpbkNsZWFudXBGbnMucHVzaChjbGVhbnVwRm4pO1xuICAgICAgfSxcbiAgICAgIHVubW91bnQoKSB7XG4gICAgICAgIGlmIChpc01vdW50ZWQpIHtcbiAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhcbiAgICAgICAgICAgIHBsdWdpbkNsZWFudXBGbnMsXG4gICAgICAgICAgICBhcHAuX2luc3RhbmNlLFxuICAgICAgICAgICAgMTZcbiAgICAgICAgICApO1xuICAgICAgICAgIHJlbmRlcihudWxsLCBhcHAuX2NvbnRhaW5lcik7XG4gICAgICAgICAge1xuICAgICAgICAgICAgYXBwLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgICBkZXZ0b29sc1VubW91bnRBcHAoYXBwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIGFwcC5fY29udGFpbmVyLl9fdnVlX2FwcF9fO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4kMShgQ2Fubm90IHVubW91bnQgYW4gYXBwIHRoYXQgaXMgbm90IG1vdW50ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm92aWRlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGtleSBpbiBjb250ZXh0LnByb3ZpZGVzKSB7XG4gICAgICAgICAgaWYgKGhhc093bihjb250ZXh0LnByb3ZpZGVzLCBrZXkpKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIGBBcHAgYWxyZWFkeSBwcm92aWRlcyBwcm9wZXJ0eSB3aXRoIGtleSBcIiR7U3RyaW5nKGtleSl9XCIuIEl0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gd2l0aCB0aGUgbmV3IHZhbHVlLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYEFwcCBhbHJlYWR5IHByb3ZpZGVzIHByb3BlcnR5IHdpdGgga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBpbmhlcml0ZWQgZnJvbSBpdHMgcGFyZW50IGVsZW1lbnQuIEl0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gd2l0aCB0aGUgbmV3IHZhbHVlLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnRleHQucHJvdmlkZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gYXBwO1xuICAgICAgfSxcbiAgICAgIHJ1bldpdGhDb250ZXh0KGZuKSB7XG4gICAgICAgIGNvbnN0IGxhc3RBcHAgPSBjdXJyZW50QXBwO1xuICAgICAgICBjdXJyZW50QXBwID0gYXBwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBmbigpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGN1cnJlbnRBcHAgPSBsYXN0QXBwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXBwO1xuICB9O1xufVxubGV0IGN1cnJlbnRBcHAgPSBudWxsO1xuXG5mdW5jdGlvbiBwcm92aWRlKGtleSwgdmFsdWUpIHtcbiAgaWYgKCFjdXJyZW50SW5zdGFuY2UpIHtcbiAgICB7XG4gICAgICB3YXJuJDEoYHByb3ZpZGUoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpLmApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgcHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucHJvdmlkZXM7XG4gICAgY29uc3QgcGFyZW50UHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucGFyZW50ICYmIGN1cnJlbnRJbnN0YW5jZS5wYXJlbnQucHJvdmlkZXM7XG4gICAgaWYgKHBhcmVudFByb3ZpZGVzID09PSBwcm92aWRlcykge1xuICAgICAgcHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucHJvdmlkZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFByb3ZpZGVzKTtcbiAgICB9XG4gICAgcHJvdmlkZXNba2V5XSA9IHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBpbmplY3Qoa2V5LCBkZWZhdWx0VmFsdWUsIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSA9IGZhbHNlKSB7XG4gIGNvbnN0IGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgaWYgKGluc3RhbmNlIHx8IGN1cnJlbnRBcHApIHtcbiAgICBsZXQgcHJvdmlkZXMgPSBjdXJyZW50QXBwID8gY3VycmVudEFwcC5fY29udGV4dC5wcm92aWRlcyA6IGluc3RhbmNlID8gaW5zdGFuY2UucGFyZW50ID09IG51bGwgfHwgaW5zdGFuY2UuY2UgPyBpbnN0YW5jZS52bm9kZS5hcHBDb250ZXh0ICYmIGluc3RhbmNlLnZub2RlLmFwcENvbnRleHQucHJvdmlkZXMgOiBpbnN0YW5jZS5wYXJlbnQucHJvdmlkZXMgOiB2b2lkIDA7XG4gICAgaWYgKHByb3ZpZGVzICYmIGtleSBpbiBwcm92aWRlcykge1xuICAgICAgcmV0dXJuIHByb3ZpZGVzW2tleV07XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSAmJiBpc0Z1bmN0aW9uKGRlZmF1bHRWYWx1ZSkgPyBkZWZhdWx0VmFsdWUuY2FsbChpbnN0YW5jZSAmJiBpbnN0YW5jZS5wcm94eSkgOiBkZWZhdWx0VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm4kMShgaW5qZWN0aW9uIFwiJHtTdHJpbmcoa2V5KX1cIiBub3QgZm91bmQuYCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHdhcm4kMShgaW5qZWN0KCkgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgc2V0dXAoKSBvciBmdW5jdGlvbmFsIGNvbXBvbmVudHMuYCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhc0luamVjdGlvbkNvbnRleHQoKSB7XG4gIHJldHVybiAhIShjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIHx8IGN1cnJlbnRBcHApO1xufVxuXG5jb25zdCBpbnRlcm5hbE9iamVjdFByb3RvID0ge307XG5jb25zdCBjcmVhdGVJbnRlcm5hbE9iamVjdCA9ICgpID0+IE9iamVjdC5jcmVhdGUoaW50ZXJuYWxPYmplY3RQcm90byk7XG5jb25zdCBpc0ludGVybmFsT2JqZWN0ID0gKG9iaikgPT4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IGludGVybmFsT2JqZWN0UHJvdG87XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIGlzU3RhdGVmdWwsIGlzU1NSID0gZmFsc2UpIHtcbiAgY29uc3QgcHJvcHMgPSB7fTtcbiAgY29uc3QgYXR0cnMgPSBjcmVhdGVJbnRlcm5hbE9iamVjdCgpO1xuICBpbnN0YW5jZS5wcm9wc0RlZmF1bHRzID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycyk7XG4gIGZvciAoY29uc3Qga2V5IGluIGluc3RhbmNlLnByb3BzT3B0aW9uc1swXSkge1xuICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2b2lkIDA7XG4gICAgfVxuICB9XG4gIHtcbiAgICB2YWxpZGF0ZVByb3BzKHJhd1Byb3BzIHx8IHt9LCBwcm9wcywgaW5zdGFuY2UpO1xuICB9XG4gIGlmIChpc1N0YXRlZnVsKSB7XG4gICAgaW5zdGFuY2UucHJvcHMgPSBpc1NTUiA/IHByb3BzIDogc2hhbGxvd1JlYWN0aXZlKHByb3BzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWluc3RhbmNlLnR5cGUucHJvcHMpIHtcbiAgICAgIGluc3RhbmNlLnByb3BzID0gYXR0cnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc3RhbmNlLnByb3BzID0gcHJvcHM7XG4gICAgfVxuICB9XG4gIGluc3RhbmNlLmF0dHJzID0gYXR0cnM7XG59XG5mdW5jdGlvbiBpc0luSG1yQ29udGV4dChpbnN0YW5jZSkge1xuICB3aGlsZSAoaW5zdGFuY2UpIHtcbiAgICBpZiAoaW5zdGFuY2UudHlwZS5fX2htcklkKSByZXR1cm4gdHJ1ZTtcbiAgICBpbnN0YW5jZSA9IGluc3RhbmNlLnBhcmVudDtcbiAgfVxufVxuZnVuY3Rpb24gdXBkYXRlUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCByYXdQcmV2UHJvcHMsIG9wdGltaXplZCkge1xuICBjb25zdCB7XG4gICAgcHJvcHMsXG4gICAgYXR0cnMsXG4gICAgdm5vZGU6IHsgcGF0Y2hGbGFnIH1cbiAgfSA9IGluc3RhbmNlO1xuICBjb25zdCByYXdDdXJyZW50UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XG4gIGNvbnN0IFtvcHRpb25zXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcbiAgbGV0IGhhc0F0dHJzQ2hhbmdlZCA9IGZhbHNlO1xuICBpZiAoXG4gICAgLy8gYWx3YXlzIGZvcmNlIGZ1bGwgZGlmZiBpbiBkZXZcbiAgICAvLyAtICMxOTQyIGlmIGhtciBpcyBlbmFibGVkIHdpdGggc2ZjIGNvbXBvbmVudFxuICAgIC8vIC0gdml0ZSM4NzIgbm9uLXNmYyBjb21wb25lbnQgdXNlZCBieSBzZmMgY29tcG9uZW50XG4gICAgIWlzSW5IbXJDb250ZXh0KGluc3RhbmNlKSAmJiAob3B0aW1pemVkIHx8IHBhdGNoRmxhZyA+IDApICYmICEocGF0Y2hGbGFnICYgMTYpXG4gICkge1xuICAgIGlmIChwYXRjaEZsYWcgJiA4KSB7XG4gICAgICBjb25zdCBwcm9wc1RvVXBkYXRlID0gaW5zdGFuY2Uudm5vZGUuZHluYW1pY1Byb3BzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xuICAgICAgICBpZiAoaXNFbWl0TGlzdGVuZXIoaW5zdGFuY2UuZW1pdHNPcHRpb25zLCBrZXkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSByYXdQcm9wc1trZXldO1xuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgIGlmIChoYXNPd24oYXR0cnMsIGtleSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgICAgICBhdHRyc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgICAgICBwcm9wc1tjYW1lbGl6ZWRLZXldID0gcmVzb2x2ZVByb3BWYWx1ZShcbiAgICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgICAgcmF3Q3VycmVudFByb3BzLFxuICAgICAgICAgICAgICBjYW1lbGl6ZWRLZXksXG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycykpIHtcbiAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XG4gICAgfVxuICAgIGxldCBrZWJhYktleTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdDdXJyZW50UHJvcHMpIHtcbiAgICAgIGlmICghcmF3UHJvcHMgfHwgLy8gZm9yIGNhbWVsQ2FzZVxuICAgICAgIWhhc093bihyYXdQcm9wcywga2V5KSAmJiAvLyBpdCdzIHBvc3NpYmxlIHRoZSBvcmlnaW5hbCBwcm9wcyB3YXMgcGFzc2VkIGluIGFzIGtlYmFiLWNhc2VcbiAgICAgIC8vIGFuZCBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlICgjOTU1KVxuICAgICAgKChrZWJhYktleSA9IGh5cGhlbmF0ZShrZXkpKSA9PT0ga2V5IHx8ICFoYXNPd24ocmF3UHJvcHMsIGtlYmFiS2V5KSkpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAocmF3UHJldlByb3BzICYmIC8vIGZvciBjYW1lbENhc2VcbiAgICAgICAgICAocmF3UHJldlByb3BzW2tleV0gIT09IHZvaWQgMCB8fCAvLyBmb3Iga2ViYWItY2FzZVxuICAgICAgICAgIHJhd1ByZXZQcm9wc1trZWJhYktleV0gIT09IHZvaWQgMCkpIHtcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSByZXNvbHZlUHJvcFZhbHVlKFxuICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICByYXdDdXJyZW50UHJvcHMsXG4gICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHByb3BzW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGF0dHJzICE9PSByYXdDdXJyZW50UHJvcHMpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGlmICghcmF3UHJvcHMgfHwgIWhhc093bihyYXdQcm9wcywga2V5KSAmJiB0cnVlKSB7XG4gICAgICAgICAgZGVsZXRlIGF0dHJzW2tleV07XG4gICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoaGFzQXR0cnNDaGFuZ2VkKSB7XG4gICAgdHJpZ2dlcihpbnN0YW5jZS5hdHRycywgXCJzZXRcIiwgXCJcIik7XG4gIH1cbiAge1xuICAgIHZhbGlkYXRlUHJvcHMocmF3UHJvcHMgfHwge30sIHByb3BzLCBpbnN0YW5jZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldEZ1bGxQcm9wcyhpbnN0YW5jZSwgcmF3UHJvcHMsIHByb3BzLCBhdHRycykge1xuICBjb25zdCBbb3B0aW9ucywgbmVlZENhc3RLZXlzXSA9IGluc3RhbmNlLnByb3BzT3B0aW9ucztcbiAgbGV0IGhhc0F0dHJzQ2hhbmdlZCA9IGZhbHNlO1xuICBsZXQgcmF3Q2FzdFZhbHVlcztcbiAgaWYgKHJhd1Byb3BzKSB7XG4gICAgZm9yIChsZXQga2V5IGluIHJhd1Byb3BzKSB7XG4gICAgICBpZiAoaXNSZXNlcnZlZFByb3Aoa2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhbHVlID0gcmF3UHJvcHNba2V5XTtcbiAgICAgIGxldCBjYW1lbEtleTtcbiAgICAgIGlmIChvcHRpb25zICYmIGhhc093bihvcHRpb25zLCBjYW1lbEtleSA9IGNhbWVsaXplKGtleSkpKSB7XG4gICAgICAgIGlmICghbmVlZENhc3RLZXlzIHx8ICFuZWVkQ2FzdEtleXMuaW5jbHVkZXMoY2FtZWxLZXkpKSB7XG4gICAgICAgICAgcHJvcHNbY2FtZWxLZXldID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKHJhd0Nhc3RWYWx1ZXMgfHwgKHJhd0Nhc3RWYWx1ZXMgPSB7fSkpW2NhbWVsS2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFpc0VtaXRMaXN0ZW5lcihpbnN0YW5jZS5lbWl0c09wdGlvbnMsIGtleSkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIGF0dHJzKSB8fCB2YWx1ZSAhPT0gYXR0cnNba2V5XSkge1xuICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICBoYXNBdHRyc0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChuZWVkQ2FzdEtleXMpIHtcbiAgICBjb25zdCByYXdDdXJyZW50UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XG4gICAgY29uc3QgY2FzdFZhbHVlcyA9IHJhd0Nhc3RWYWx1ZXMgfHwgRU1QVFlfT0JKO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVlZENhc3RLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBuZWVkQ2FzdEtleXNbaV07XG4gICAgICBwcm9wc1trZXldID0gcmVzb2x2ZVByb3BWYWx1ZShcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgcmF3Q3VycmVudFByb3BzLFxuICAgICAgICBrZXksXG4gICAgICAgIGNhc3RWYWx1ZXNba2V5XSxcbiAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICFoYXNPd24oY2FzdFZhbHVlcywga2V5KVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGhhc0F0dHJzQ2hhbmdlZDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQcm9wVmFsdWUob3B0aW9ucywgcHJvcHMsIGtleSwgdmFsdWUsIGluc3RhbmNlLCBpc0Fic2VudCkge1xuICBjb25zdCBvcHQgPSBvcHRpb25zW2tleV07XG4gIGlmIChvcHQgIT0gbnVsbCkge1xuICAgIGNvbnN0IGhhc0RlZmF1bHQgPSBoYXNPd24ob3B0LCBcImRlZmF1bHRcIik7XG4gICAgaWYgKGhhc0RlZmF1bHQgJiYgdmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gb3B0LmRlZmF1bHQ7XG4gICAgICBpZiAob3B0LnR5cGUgIT09IEZ1bmN0aW9uICYmICFvcHQuc2tpcEZhY3RvcnkgJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHsgcHJvcHNEZWZhdWx0cyB9ID0gaW5zdGFuY2U7XG4gICAgICAgIGlmIChrZXkgaW4gcHJvcHNEZWZhdWx0cykge1xuICAgICAgICAgIHZhbHVlID0gcHJvcHNEZWZhdWx0c1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHJlc2V0ID0gc2V0Q3VycmVudEluc3RhbmNlKGluc3RhbmNlKTtcbiAgICAgICAgICB2YWx1ZSA9IHByb3BzRGVmYXVsdHNba2V5XSA9IGRlZmF1bHRWYWx1ZS5jYWxsKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHByb3BzXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXNldCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpbnN0YW5jZS5jZSkge1xuICAgICAgICBpbnN0YW5jZS5jZS5fc2V0UHJvcChrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdFswIC8qIHNob3VsZENhc3QgKi9dKSB7XG4gICAgICBpZiAoaXNBYnNlbnQgJiYgIWhhc0RlZmF1bHQpIHtcbiAgICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAob3B0WzEgLyogc2hvdWxkQ2FzdFRydWUgKi9dICYmICh2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpKSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuY29uc3QgbWl4aW5Qcm9wc0NhY2hlID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBub3JtYWxpemVQcm9wc09wdGlvbnMoY29tcCwgYXBwQ29udGV4dCwgYXNNaXhpbiA9IGZhbHNlKSB7XG4gIGNvbnN0IGNhY2hlID0gYXNNaXhpbiA/IG1peGluUHJvcHNDYWNoZSA6IGFwcENvbnRleHQucHJvcHNDYWNoZTtcbiAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGNvbXApO1xuICBpZiAoY2FjaGVkKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuICBjb25zdCByYXcgPSBjb21wLnByb3BzO1xuICBjb25zdCBub3JtYWxpemVkID0ge307XG4gIGNvbnN0IG5lZWRDYXN0S2V5cyA9IFtdO1xuICBsZXQgaGFzRXh0ZW5kcyA9IGZhbHNlO1xuICBpZiAoIWlzRnVuY3Rpb24oY29tcCkpIHtcbiAgICBjb25zdCBleHRlbmRQcm9wcyA9IChyYXcyKSA9PiB7XG4gICAgICBoYXNFeHRlbmRzID0gdHJ1ZTtcbiAgICAgIGNvbnN0IFtwcm9wcywga2V5c10gPSBub3JtYWxpemVQcm9wc09wdGlvbnMocmF3MiwgYXBwQ29udGV4dCwgdHJ1ZSk7XG4gICAgICBleHRlbmQobm9ybWFsaXplZCwgcHJvcHMpO1xuICAgICAgaWYgKGtleXMpIG5lZWRDYXN0S2V5cy5wdXNoKC4uLmtleXMpO1xuICAgIH07XG4gICAgaWYgKCFhc01peGluICYmIGFwcENvbnRleHQubWl4aW5zLmxlbmd0aCkge1xuICAgICAgYXBwQ29udGV4dC5taXhpbnMuZm9yRWFjaChleHRlbmRQcm9wcyk7XG4gICAgfVxuICAgIGlmIChjb21wLmV4dGVuZHMpIHtcbiAgICAgIGV4dGVuZFByb3BzKGNvbXAuZXh0ZW5kcyk7XG4gICAgfVxuICAgIGlmIChjb21wLm1peGlucykge1xuICAgICAgY29tcC5taXhpbnMuZm9yRWFjaChleHRlbmRQcm9wcyk7XG4gICAgfVxuICB9XG4gIGlmICghcmF3ICYmICFoYXNFeHRlbmRzKSB7XG4gICAgaWYgKGlzT2JqZWN0KGNvbXApKSB7XG4gICAgICBjYWNoZS5zZXQoY29tcCwgRU1QVFlfQVJSKTtcbiAgICB9XG4gICAgcmV0dXJuIEVNUFRZX0FSUjtcbiAgfVxuICBpZiAoaXNBcnJheShyYXcpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghaXNTdHJpbmcocmF3W2ldKSkge1xuICAgICAgICB3YXJuJDEoYHByb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC5gLCByYXdbaV0pO1xuICAgICAgfVxuICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGNhbWVsaXplKHJhd1tpXSk7XG4gICAgICBpZiAodmFsaWRhdGVQcm9wTmFtZShub3JtYWxpemVkS2V5KSkge1xuICAgICAgICBub3JtYWxpemVkW25vcm1hbGl6ZWRLZXldID0gRU1QVFlfT0JKO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChyYXcpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHJhdykpIHtcbiAgICAgIHdhcm4kMShgaW52YWxpZCBwcm9wcyBvcHRpb25zYCwgcmF3KTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcmF3KSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgIGlmICh2YWxpZGF0ZVByb3BOYW1lKG5vcm1hbGl6ZWRLZXkpKSB7XG4gICAgICAgIGNvbnN0IG9wdCA9IHJhd1trZXldO1xuICAgICAgICBjb25zdCBwcm9wID0gbm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9IGlzQXJyYXkob3B0KSB8fCBpc0Z1bmN0aW9uKG9wdCkgPyB7IHR5cGU6IG9wdCB9IDogZXh0ZW5kKHt9LCBvcHQpO1xuICAgICAgICBjb25zdCBwcm9wVHlwZSA9IHByb3AudHlwZTtcbiAgICAgICAgbGV0IHNob3VsZENhc3QgPSBmYWxzZTtcbiAgICAgICAgbGV0IHNob3VsZENhc3RUcnVlID0gdHJ1ZTtcbiAgICAgICAgaWYgKGlzQXJyYXkocHJvcFR5cGUpKSB7XG4gICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHByb3BUeXBlLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHByb3BUeXBlW2luZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVOYW1lID0gaXNGdW5jdGlvbih0eXBlKSAmJiB0eXBlLm5hbWU7XG4gICAgICAgICAgICBpZiAodHlwZU5hbWUgPT09IFwiQm9vbGVhblwiKSB7XG4gICAgICAgICAgICAgIHNob3VsZENhc3QgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZU5hbWUgPT09IFwiU3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgc2hvdWxkQ2FzdFRydWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hvdWxkQ2FzdCA9IGlzRnVuY3Rpb24ocHJvcFR5cGUpICYmIHByb3BUeXBlLm5hbWUgPT09IFwiQm9vbGVhblwiO1xuICAgICAgICB9XG4gICAgICAgIHByb3BbMCAvKiBzaG91bGRDYXN0ICovXSA9IHNob3VsZENhc3Q7XG4gICAgICAgIHByb3BbMSAvKiBzaG91bGRDYXN0VHJ1ZSAqL10gPSBzaG91bGRDYXN0VHJ1ZTtcbiAgICAgICAgaWYgKHNob3VsZENhc3QgfHwgaGFzT3duKHByb3AsIFwiZGVmYXVsdFwiKSkge1xuICAgICAgICAgIG5lZWRDYXN0S2V5cy5wdXNoKG5vcm1hbGl6ZWRLZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IHJlcyA9IFtub3JtYWxpemVkLCBuZWVkQ2FzdEtleXNdO1xuICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICBjYWNoZS5zZXQoY29tcCwgcmVzKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wTmFtZShrZXkpIHtcbiAgaWYgKGtleVswXSAhPT0gXCIkXCIgJiYgIWlzUmVzZXJ2ZWRQcm9wKGtleSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB3YXJuJDEoYEludmFsaWQgcHJvcCBuYW1lOiBcIiR7a2V5fVwiIGlzIGEgcmVzZXJ2ZWQgcHJvcGVydHkuYCk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gZ2V0VHlwZShjdG9yKSB7XG4gIGlmIChjdG9yID09PSBudWxsKSB7XG4gICAgcmV0dXJuIFwibnVsbFwiO1xuICB9XG4gIGlmICh0eXBlb2YgY3RvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIGN0b3IubmFtZSB8fCBcIlwiO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjdG9yID09PSBcIm9iamVjdFwiKSB7XG4gICAgY29uc3QgbmFtZSA9IGN0b3IuY29uc3RydWN0b3IgJiYgY3Rvci5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIHJldHVybiBuYW1lIHx8IFwiXCI7XG4gIH1cbiAgcmV0dXJuIFwiXCI7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BzKHJhd1Byb3BzLCBwcm9wcywgaW5zdGFuY2UpIHtcbiAgY29uc3QgcmVzb2x2ZWRWYWx1ZXMgPSB0b1Jhdyhwcm9wcyk7XG4gIGNvbnN0IG9wdGlvbnMgPSBpbnN0YW5jZS5wcm9wc09wdGlvbnNbMF07XG4gIGNvbnN0IGNhbWVsaXplUHJvcHNLZXkgPSBPYmplY3Qua2V5cyhyYXdQcm9wcykubWFwKChrZXkpID0+IGNhbWVsaXplKGtleSkpO1xuICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zKSB7XG4gICAgbGV0IG9wdCA9IG9wdGlvbnNba2V5XTtcbiAgICBpZiAob3B0ID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhbGlkYXRlUHJvcChcbiAgICAgIGtleSxcbiAgICAgIHJlc29sdmVkVmFsdWVzW2tleV0sXG4gICAgICBvcHQsXG4gICAgICBzaGFsbG93UmVhZG9ubHkocmVzb2x2ZWRWYWx1ZXMpICxcbiAgICAgICFjYW1lbGl6ZVByb3BzS2V5LmluY2x1ZGVzKGtleSlcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AobmFtZSwgdmFsdWUsIHByb3AsIHByb3BzLCBpc0Fic2VudCkge1xuICBjb25zdCB7IHR5cGUsIHJlcXVpcmVkLCB2YWxpZGF0b3IsIHNraXBDaGVjayB9ID0gcHJvcDtcbiAgaWYgKHJlcXVpcmVkICYmIGlzQWJzZW50KSB7XG4gICAgd2FybiQxKCdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXJlcXVpcmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlICE9IG51bGwgJiYgdHlwZSAhPT0gdHJ1ZSAmJiAhc2tpcENoZWNrKSB7XG4gICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcbiAgICBjb25zdCB0eXBlcyA9IGlzQXJyYXkodHlwZSkgPyB0eXBlIDogW3R5cGVdO1xuICAgIGNvbnN0IGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aCAmJiAhaXNWYWxpZDsgaSsrKSB7XG4gICAgICBjb25zdCB7IHZhbGlkLCBleHBlY3RlZFR5cGUgfSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVzW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChleHBlY3RlZFR5cGUgfHwgXCJcIik7XG4gICAgICBpc1ZhbGlkID0gdmFsaWQ7XG4gICAgfVxuICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgd2FybiQxKGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAodmFsaWRhdG9yICYmICF2YWxpZGF0b3IodmFsdWUsIHByb3BzKSkge1xuICAgIHdhcm4kMSgnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicpO1xuICB9XG59XG5jb25zdCBpc1NpbXBsZVR5cGUgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcbiAgXCJTdHJpbmcsTnVtYmVyLEJvb2xlYW4sRnVuY3Rpb24sU3ltYm9sLEJpZ0ludFwiXG4pO1xuZnVuY3Rpb24gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZSkge1xuICBsZXQgdmFsaWQ7XG4gIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFwibnVsbFwiKSB7XG4gICAgdmFsaWQgPSB2YWx1ZSA9PT0gbnVsbDtcbiAgfSBlbHNlIGlmIChpc1NpbXBsZVR5cGUoZXhwZWN0ZWRUeXBlKSkge1xuICAgIGNvbnN0IHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IFwiT2JqZWN0XCIpIHtcbiAgICB2YWxpZCA9IGlzT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IFwiQXJyYXlcIikge1xuICAgIHZhbGlkID0gaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gYFByb3AgdHlwZSBbXSBmb3IgcHJvcCBcIiR7bmFtZX1cIiB3b24ndCBtYXRjaCBhbnl0aGluZy4gRGlkIHlvdSBtZWFuIHRvIHVzZSB0eXBlIEFycmF5IGluc3RlYWQ/YDtcbiAgfVxuICBsZXQgbWVzc2FnZSA9IGBJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJHtuYW1lfVwiLiBFeHBlY3RlZCAke2V4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oXCIgfCBcIil9YDtcbiAgY29uc3QgZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlc1swXTtcbiAgY29uc3QgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgY29uc3QgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIGNvbnN0IHJlY2VpdmVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpO1xuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiYgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiYgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IGAgd2l0aCB2YWx1ZSAke2V4cGVjdGVkVmFsdWV9YDtcbiAgfVxuICBtZXNzYWdlICs9IGAsIGdvdCAke3JlY2VpdmVkVHlwZX0gYDtcbiAgaWYgKGlzRXhwbGljYWJsZShyZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBgd2l0aCB2YWx1ZSAke3JlY2VpdmVkVmFsdWV9LmA7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2U7XG59XG5mdW5jdGlvbiBzdHlsZVZhbHVlKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSBcIlN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIGBcIiR7dmFsdWV9XCJgO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiTnVtYmVyXCIpIHtcbiAgICByZXR1cm4gYCR7TnVtYmVyKHZhbHVlKX1gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBgJHt2YWx1ZX1gO1xuICB9XG59XG5mdW5jdGlvbiBpc0V4cGxpY2FibGUodHlwZSkge1xuICBjb25zdCBleHBsaWNpdFR5cGVzID0gW1wic3RyaW5nXCIsIFwibnVtYmVyXCIsIFwiYm9vbGVhblwiXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZSgoZWxlbSkgPT4gdHlwZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtKTtcbn1cbmZ1bmN0aW9uIGlzQm9vbGVhbiguLi5hcmdzKSB7XG4gIHJldHVybiBhcmdzLnNvbWUoKGVsZW0pID0+IGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gXCJib29sZWFuXCIpO1xufVxuXG5jb25zdCBpc0ludGVybmFsS2V5ID0gKGtleSkgPT4ga2V5WzBdID09PSBcIl9cIiB8fCBrZXkgPT09IFwiJHN0YWJsZVwiO1xuY29uc3Qgbm9ybWFsaXplU2xvdFZhbHVlID0gKHZhbHVlKSA9PiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWTm9kZSkgOiBbbm9ybWFsaXplVk5vZGUodmFsdWUpXTtcbmNvbnN0IG5vcm1hbGl6ZVNsb3QgPSAoa2V5LCByYXdTbG90LCBjdHgpID0+IHtcbiAgaWYgKHJhd1Nsb3QuX24pIHtcbiAgICByZXR1cm4gcmF3U2xvdDtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkID0gd2l0aEN0eCgoLi4uYXJncykgPT4ge1xuICAgIGlmIChjdXJyZW50SW5zdGFuY2UgJiYgIShjdHggPT09IG51bGwgJiYgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKSAmJiAhKGN0eCAmJiBjdHgucm9vdCAhPT0gY3VycmVudEluc3RhbmNlLnJvb3QpKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGBTbG90IFwiJHtrZXl9XCIgaW52b2tlZCBvdXRzaWRlIG9mIHRoZSByZW5kZXIgZnVuY3Rpb246IHRoaXMgd2lsbCBub3QgdHJhY2sgZGVwZW5kZW5jaWVzIHVzZWQgaW4gdGhlIHNsb3QuIEludm9rZSB0aGUgc2xvdCBmdW5jdGlvbiBpbnNpZGUgdGhlIHJlbmRlciBmdW5jdGlvbiBpbnN0ZWFkLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVTbG90VmFsdWUocmF3U2xvdCguLi5hcmdzKSk7XG4gIH0sIGN0eCk7XG4gIG5vcm1hbGl6ZWQuX2MgPSBmYWxzZTtcbiAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59O1xuY29uc3Qgbm9ybWFsaXplT2JqZWN0U2xvdHMgPSAocmF3U2xvdHMsIHNsb3RzLCBpbnN0YW5jZSkgPT4ge1xuICBjb25zdCBjdHggPSByYXdTbG90cy5fY3R4O1xuICBmb3IgKGNvbnN0IGtleSBpbiByYXdTbG90cykge1xuICAgIGlmIChpc0ludGVybmFsS2V5KGtleSkpIGNvbnRpbnVlO1xuICAgIGNvbnN0IHZhbHVlID0gcmF3U2xvdHNba2V5XTtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHNsb3RzW2tleV0gPSBub3JtYWxpemVTbG90KGtleSwgdmFsdWUsIGN0eCk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBzbG90IFwiJHtrZXl9XCIuIFByZWZlciBmdW5jdGlvbiBzbG90cyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVTbG90VmFsdWUodmFsdWUpO1xuICAgICAgc2xvdHNba2V5XSA9ICgpID0+IG5vcm1hbGl6ZWQ7XG4gICAgfVxuICB9XG59O1xuY29uc3Qgbm9ybWFsaXplVk5vZGVTbG90cyA9IChpbnN0YW5jZSwgY2hpbGRyZW4pID0+IHtcbiAgaWYgKCFpc0tlZXBBbGl2ZShpbnN0YW5jZS52bm9kZSkgJiYgdHJ1ZSkge1xuICAgIHdhcm4kMShcbiAgICAgIGBOb24tZnVuY3Rpb24gdmFsdWUgZW5jb3VudGVyZWQgZm9yIGRlZmF1bHQgc2xvdC4gUHJlZmVyIGZ1bmN0aW9uIHNsb3RzIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuYFxuICAgICk7XG4gIH1cbiAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZVNsb3RWYWx1ZShjaGlsZHJlbik7XG4gIGluc3RhbmNlLnNsb3RzLmRlZmF1bHQgPSAoKSA9PiBub3JtYWxpemVkO1xufTtcbmNvbnN0IGFzc2lnblNsb3RzID0gKHNsb3RzLCBjaGlsZHJlbiwgb3B0aW1pemVkKSA9PiB7XG4gIGZvciAoY29uc3Qga2V5IGluIGNoaWxkcmVuKSB7XG4gICAgaWYgKG9wdGltaXplZCB8fCAhaXNJbnRlcm5hbEtleShrZXkpKSB7XG4gICAgICBzbG90c1trZXldID0gY2hpbGRyZW5ba2V5XTtcbiAgICB9XG4gIH1cbn07XG5jb25zdCBpbml0U2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpID0+IHtcbiAgY29uc3Qgc2xvdHMgPSBpbnN0YW5jZS5zbG90cyA9IGNyZWF0ZUludGVybmFsT2JqZWN0KCk7XG4gIGlmIChpbnN0YW5jZS52bm9kZS5zaGFwZUZsYWcgJiAzMikge1xuICAgIGNvbnN0IHR5cGUgPSBjaGlsZHJlbi5fO1xuICAgIGlmICh0eXBlKSB7XG4gICAgICBhc3NpZ25TbG90cyhzbG90cywgY2hpbGRyZW4sIG9wdGltaXplZCk7XG4gICAgICBpZiAob3B0aW1pemVkKSB7XG4gICAgICAgIGRlZihzbG90cywgXCJfXCIsIHR5cGUsIHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBub3JtYWxpemVPYmplY3RTbG90cyhjaGlsZHJlbiwgc2xvdHMpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChjaGlsZHJlbikge1xuICAgIG5vcm1hbGl6ZVZOb2RlU2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcbiAgfVxufTtcbmNvbnN0IHVwZGF0ZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbiwgb3B0aW1pemVkKSA9PiB7XG4gIGNvbnN0IHsgdm5vZGUsIHNsb3RzIH0gPSBpbnN0YW5jZTtcbiAgbGV0IG5lZWREZWxldGlvbkNoZWNrID0gdHJ1ZTtcbiAgbGV0IGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IEVNUFRZX09CSjtcbiAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDMyKSB7XG4gICAgY29uc3QgdHlwZSA9IGNoaWxkcmVuLl87XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIGlmIChpc0htclVwZGF0aW5nKSB7XG4gICAgICAgIGFzc2lnblNsb3RzKHNsb3RzLCBjaGlsZHJlbiwgb3B0aW1pemVkKTtcbiAgICAgICAgdHJpZ2dlcihpbnN0YW5jZSwgXCJzZXRcIiwgXCIkc2xvdHNcIik7XG4gICAgICB9IGVsc2UgaWYgKG9wdGltaXplZCAmJiB0eXBlID09PSAxKSB7XG4gICAgICAgIG5lZWREZWxldGlvbkNoZWNrID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhc3NpZ25TbG90cyhzbG90cywgY2hpbGRyZW4sIG9wdGltaXplZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5lZWREZWxldGlvbkNoZWNrID0gIWNoaWxkcmVuLiRzdGFibGU7XG4gICAgICBub3JtYWxpemVPYmplY3RTbG90cyhjaGlsZHJlbiwgc2xvdHMpO1xuICAgIH1cbiAgICBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQgPSBjaGlsZHJlbjtcbiAgfSBlbHNlIGlmIChjaGlsZHJlbikge1xuICAgIG5vcm1hbGl6ZVZOb2RlU2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcbiAgICBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQgPSB7IGRlZmF1bHQ6IDEgfTtcbiAgfVxuICBpZiAobmVlZERlbGV0aW9uQ2hlY2spIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzbG90cykge1xuICAgICAgaWYgKCFpc0ludGVybmFsS2V5KGtleSkgJiYgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0W2tleV0gPT0gbnVsbCkge1xuICAgICAgICBkZWxldGUgc2xvdHNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmxldCBzdXBwb3J0ZWQ7XG5sZXQgcGVyZjtcbmZ1bmN0aW9uIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgdHlwZSkge1xuICBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcucGVyZm9ybWFuY2UgJiYgaXNTdXBwb3J0ZWQoKSkge1xuICAgIHBlcmYubWFyayhgdnVlLSR7dHlwZX0tJHtpbnN0YW5jZS51aWR9YCk7XG4gIH1cbiAge1xuICAgIGRldnRvb2xzUGVyZlN0YXJ0KGluc3RhbmNlLCB0eXBlLCBpc1N1cHBvcnRlZCgpID8gcGVyZi5ub3coKSA6IERhdGUubm93KCkpO1xuICB9XG59XG5mdW5jdGlvbiBlbmRNZWFzdXJlKGluc3RhbmNlLCB0eXBlKSB7XG4gIGlmIChpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5wZXJmb3JtYW5jZSAmJiBpc1N1cHBvcnRlZCgpKSB7XG4gICAgY29uc3Qgc3RhcnRUYWcgPSBgdnVlLSR7dHlwZX0tJHtpbnN0YW5jZS51aWR9YDtcbiAgICBjb25zdCBlbmRUYWcgPSBzdGFydFRhZyArIGA6ZW5kYDtcbiAgICBwZXJmLm1hcmsoZW5kVGFnKTtcbiAgICBwZXJmLm1lYXN1cmUoXG4gICAgICBgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgaW5zdGFuY2UudHlwZSl9PiAke3R5cGV9YCxcbiAgICAgIHN0YXJ0VGFnLFxuICAgICAgZW5kVGFnXG4gICAgKTtcbiAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICB9XG4gIHtcbiAgICBkZXZ0b29sc1BlcmZFbmQoaW5zdGFuY2UsIHR5cGUsIGlzU3VwcG9ydGVkKCkgPyBwZXJmLm5vdygpIDogRGF0ZS5ub3coKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzU3VwcG9ydGVkKCkge1xuICBpZiAoc3VwcG9ydGVkICE9PSB2b2lkIDApIHtcbiAgICByZXR1cm4gc3VwcG9ydGVkO1xuICB9XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5wZXJmb3JtYW5jZSkge1xuICAgIHN1cHBvcnRlZCA9IHRydWU7XG4gICAgcGVyZiA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgfSBlbHNlIHtcbiAgICBzdXBwb3J0ZWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gc3VwcG9ydGVkO1xufVxuXG5jb25zdCBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QgPSBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSA7XG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJlcihvcHRpb25zKSB7XG4gIHJldHVybiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucyk7XG59XG5mdW5jdGlvbiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihvcHRpb25zKSB7XG4gIHJldHVybiBiYXNlQ3JlYXRlUmVuZGVyZXIob3B0aW9ucywgY3JlYXRlSHlkcmF0aW9uRnVuY3Rpb25zKTtcbn1cbmZ1bmN0aW9uIGJhc2VDcmVhdGVSZW5kZXJlcihvcHRpb25zLCBjcmVhdGVIeWRyYXRpb25GbnMpIHtcbiAgY29uc3QgdGFyZ2V0ID0gZ2V0R2xvYmFsVGhpcygpO1xuICB0YXJnZXQuX19WVUVfXyA9IHRydWU7XG4gIHtcbiAgICBzZXREZXZ0b29sc0hvb2skMSh0YXJnZXQuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXywgdGFyZ2V0KTtcbiAgfVxuICBjb25zdCB7XG4gICAgaW5zZXJ0OiBob3N0SW5zZXJ0LFxuICAgIHJlbW92ZTogaG9zdFJlbW92ZSxcbiAgICBwYXRjaFByb3A6IGhvc3RQYXRjaFByb3AsXG4gICAgY3JlYXRlRWxlbWVudDogaG9zdENyZWF0ZUVsZW1lbnQsXG4gICAgY3JlYXRlVGV4dDogaG9zdENyZWF0ZVRleHQsXG4gICAgY3JlYXRlQ29tbWVudDogaG9zdENyZWF0ZUNvbW1lbnQsXG4gICAgc2V0VGV4dDogaG9zdFNldFRleHQsXG4gICAgc2V0RWxlbWVudFRleHQ6IGhvc3RTZXRFbGVtZW50VGV4dCxcbiAgICBwYXJlbnROb2RlOiBob3N0UGFyZW50Tm9kZSxcbiAgICBuZXh0U2libGluZzogaG9zdE5leHRTaWJsaW5nLFxuICAgIHNldFNjb3BlSWQ6IGhvc3RTZXRTY29wZUlkID0gTk9PUCxcbiAgICBpbnNlcnRTdGF0aWNDb250ZW50OiBob3N0SW5zZXJ0U3RhdGljQ29udGVudFxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgcGF0Y2ggPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciA9IG51bGwsIHBhcmVudENvbXBvbmVudCA9IG51bGwsIHBhcmVudFN1c3BlbnNlID0gbnVsbCwgbmFtZXNwYWNlID0gdm9pZCAwLCBzbG90U2NvcGVJZHMgPSBudWxsLCBvcHRpbWl6ZWQgPSBpc0htclVwZGF0aW5nID8gZmFsc2UgOiAhIW4yLmR5bmFtaWNDaGlsZHJlbikgPT4ge1xuICAgIGlmIChuMSA9PT0gbjIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG4xICYmICFpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xuICAgICAgYW5jaG9yID0gZ2V0TmV4dEhvc3ROb2RlKG4xKTtcbiAgICAgIHVubW91bnQobjEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgbjEgPSBudWxsO1xuICAgIH1cbiAgICBpZiAobjIucGF0Y2hGbGFnID09PSAtMikge1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICBuMi5keW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnIH0gPSBuMjtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgVGV4dDpcbiAgICAgICAgcHJvY2Vzc1RleHQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDb21tZW50OlxuICAgICAgICBwcm9jZXNzQ29tbWVudE5vZGUobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTdGF0aWM6XG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICAgICAgbW91bnRTdGF0aWNOb2RlKG4yLCBjb250YWluZXIsIGFuY2hvciwgbmFtZXNwYWNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXRjaFN0YXRpY05vZGUobjEsIG4yLCBjb250YWluZXIsIG5hbWVzcGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEZyYWdtZW50OlxuICAgICAgICBwcm9jZXNzRnJhZ21lbnQoXG4gICAgICAgICAgbjEsXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMSkge1xuICAgICAgICAgIHByb2Nlc3NFbGVtZW50KFxuICAgICAgICAgICAgbjEsXG4gICAgICAgICAgICBuMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZUZsYWcgJiA2KSB7XG4gICAgICAgICAgcHJvY2Vzc0NvbXBvbmVudChcbiAgICAgICAgICAgIG4xLFxuICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVGbGFnICYgNjQpIHtcbiAgICAgICAgICB0eXBlLnByb2Nlc3MoXG4gICAgICAgICAgICBuMSxcbiAgICAgICAgICAgIG4yLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWQsXG4gICAgICAgICAgICBpbnRlcm5hbHNcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlRmxhZyAmIDEyOCkge1xuICAgICAgICAgIHR5cGUucHJvY2VzcyhcbiAgICAgICAgICAgIG4xLFxuICAgICAgICAgICAgbjIsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZCxcbiAgICAgICAgICAgIGludGVybmFsc1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybiQxKFwiSW52YWxpZCBWTm9kZSB0eXBlOlwiLCB0eXBlLCBgKCR7dHlwZW9mIHR5cGV9KWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyZWYgIT0gbnVsbCAmJiBwYXJlbnRDb21wb25lbnQpIHtcbiAgICAgIHNldFJlZihyZWYsIG4xICYmIG4xLnJlZiwgcGFyZW50U3VzcGVuc2UsIG4yIHx8IG4xLCAhbjIpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcHJvY2Vzc1RleHQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcikgPT4ge1xuICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICBob3N0SW5zZXJ0KFxuICAgICAgICBuMi5lbCA9IGhvc3RDcmVhdGVUZXh0KG4yLmNoaWxkcmVuKSxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3JcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGVsID0gbjIuZWwgPSBuMS5lbDtcbiAgICAgIGlmIChuMi5jaGlsZHJlbiAhPT0gbjEuY2hpbGRyZW4pIHtcbiAgICAgICAgaG9zdFNldFRleHQoZWwsIG4yLmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHByb2Nlc3NDb21tZW50Tm9kZSA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XG4gICAgaWYgKG4xID09IG51bGwpIHtcbiAgICAgIGhvc3RJbnNlcnQoXG4gICAgICAgIG4yLmVsID0gaG9zdENyZWF0ZUNvbW1lbnQobjIuY2hpbGRyZW4gfHwgXCJcIiksXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBuMi5lbCA9IG4xLmVsO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbW91bnRTdGF0aWNOb2RlID0gKG4yLCBjb250YWluZXIsIGFuY2hvciwgbmFtZXNwYWNlKSA9PiB7XG4gICAgW24yLmVsLCBuMi5hbmNob3JdID0gaG9zdEluc2VydFN0YXRpY0NvbnRlbnQoXG4gICAgICBuMi5jaGlsZHJlbixcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGFuY2hvcixcbiAgICAgIG5hbWVzcGFjZSxcbiAgICAgIG4yLmVsLFxuICAgICAgbjIuYW5jaG9yXG4gICAgKTtcbiAgfTtcbiAgY29uc3QgcGF0Y2hTdGF0aWNOb2RlID0gKG4xLCBuMiwgY29udGFpbmVyLCBuYW1lc3BhY2UpID0+IHtcbiAgICBpZiAobjIuY2hpbGRyZW4gIT09IG4xLmNoaWxkcmVuKSB7XG4gICAgICBjb25zdCBhbmNob3IgPSBob3N0TmV4dFNpYmxpbmcobjEuYW5jaG9yKTtcbiAgICAgIHJlbW92ZVN0YXRpY05vZGUobjEpO1xuICAgICAgW24yLmVsLCBuMi5hbmNob3JdID0gaG9zdEluc2VydFN0YXRpY0NvbnRlbnQoXG4gICAgICAgIG4yLmNoaWxkcmVuLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgbmFtZXNwYWNlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBuMi5lbCA9IG4xLmVsO1xuICAgICAgbjIuYW5jaG9yID0gbjEuYW5jaG9yO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbW92ZVN0YXRpY05vZGUgPSAoeyBlbCwgYW5jaG9yIH0sIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpID0+IHtcbiAgICBsZXQgbmV4dDtcbiAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xuICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhlbCk7XG4gICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIG5leHRTaWJsaW5nKTtcbiAgICAgIGVsID0gbmV4dDtcbiAgICB9XG4gICAgaG9zdEluc2VydChhbmNob3IsIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpO1xuICB9O1xuICBjb25zdCByZW1vdmVTdGF0aWNOb2RlID0gKHsgZWwsIGFuY2hvciB9KSA9PiB7XG4gICAgbGV0IG5leHQ7XG4gICAgd2hpbGUgKGVsICYmIGVsICE9PSBhbmNob3IpIHtcbiAgICAgIG5leHQgPSBob3N0TmV4dFNpYmxpbmcoZWwpO1xuICAgICAgaG9zdFJlbW92ZShlbCk7XG4gICAgICBlbCA9IG5leHQ7XG4gICAgfVxuICAgIGhvc3RSZW1vdmUoYW5jaG9yKTtcbiAgfTtcbiAgY29uc3QgcHJvY2Vzc0VsZW1lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIGlmIChuMi50eXBlID09PSBcInN2Z1wiKSB7XG4gICAgICBuYW1lc3BhY2UgPSBcInN2Z1wiO1xuICAgIH0gZWxzZSBpZiAobjIudHlwZSA9PT0gXCJtYXRoXCIpIHtcbiAgICAgIG5hbWVzcGFjZSA9IFwibWF0aG1sXCI7XG4gICAgfVxuICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICBtb3VudEVsZW1lbnQoXG4gICAgICAgIG4yLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGF0Y2hFbGVtZW50KFxuICAgICAgICBuMSxcbiAgICAgICAgbjIsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3VudEVsZW1lbnQgPSAodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgbGV0IGVsO1xuICAgIGxldCB2bm9kZUhvb2s7XG4gICAgY29uc3QgeyBwcm9wcywgc2hhcGVGbGFnLCB0cmFuc2l0aW9uLCBkaXJzIH0gPSB2bm9kZTtcbiAgICBlbCA9IHZub2RlLmVsID0gaG9zdENyZWF0ZUVsZW1lbnQoXG4gICAgICB2bm9kZS50eXBlLFxuICAgICAgbmFtZXNwYWNlLFxuICAgICAgcHJvcHMgJiYgcHJvcHMuaXMsXG4gICAgICBwcm9wc1xuICAgICk7XG4gICAgaWYgKHNoYXBlRmxhZyAmIDgpIHtcbiAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChlbCwgdm5vZGUuY2hpbGRyZW4pO1xuICAgIH0gZWxzZSBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgIG1vdW50Q2hpbGRyZW4oXG4gICAgICAgIHZub2RlLmNoaWxkcmVuLFxuICAgICAgICBlbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgcmVzb2x2ZUNoaWxkcmVuTmFtZXNwYWNlKHZub2RlLCBuYW1lc3BhY2UpLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGRpcnMpIHtcbiAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgXCJjcmVhdGVkXCIpO1xuICAgIH1cbiAgICBzZXRTY29wZUlkKGVsLCB2bm9kZSwgdm5vZGUuc2NvcGVJZCwgc2xvdFNjb3BlSWRzLCBwYXJlbnRDb21wb25lbnQpO1xuICAgIGlmIChwcm9wcykge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKGtleSAhPT0gXCJ2YWx1ZVwiICYmICFpc1Jlc2VydmVkUHJvcChrZXkpKSB7XG4gICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwga2V5LCBudWxsLCBwcm9wc1trZXldLCBuYW1lc3BhY2UsIHBhcmVudENvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChcInZhbHVlXCIgaW4gcHJvcHMpIHtcbiAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgXCJ2YWx1ZVwiLCBudWxsLCBwcm9wcy52YWx1ZSwgbmFtZXNwYWNlKTtcbiAgICAgIH1cbiAgICAgIGlmICh2bm9kZUhvb2sgPSBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpIHtcbiAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHtcbiAgICAgIGRlZihlbCwgXCJfX3Zub2RlXCIsIHZub2RlLCB0cnVlKTtcbiAgICAgIGRlZihlbCwgXCJfX3Z1ZVBhcmVudENvbXBvbmVudFwiLCBwYXJlbnRDb21wb25lbnQsIHRydWUpO1xuICAgIH1cbiAgICBpZiAoZGlycykge1xuICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcImJlZm9yZU1vdW50XCIpO1xuICAgIH1cbiAgICBjb25zdCBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyA9IG5lZWRUcmFuc2l0aW9uKHBhcmVudFN1c3BlbnNlLCB0cmFuc2l0aW9uKTtcbiAgICBpZiAobmVlZENhbGxUcmFuc2l0aW9uSG9va3MpIHtcbiAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgIH1cbiAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgaWYgKCh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkgfHwgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgfHwgZGlycykge1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcbiAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgICAgICBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyAmJiB0cmFuc2l0aW9uLmVudGVyKGVsKTtcbiAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIFwibW91bnRlZFwiKTtcbiAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldFNjb3BlSWQgPSAoZWwsIHZub2RlLCBzY29wZUlkLCBzbG90U2NvcGVJZHMsIHBhcmVudENvbXBvbmVudCkgPT4ge1xuICAgIGlmIChzY29wZUlkKSB7XG4gICAgICBob3N0U2V0U2NvcGVJZChlbCwgc2NvcGVJZCk7XG4gICAgfVxuICAgIGlmIChzbG90U2NvcGVJZHMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xvdFNjb3BlSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGhvc3RTZXRTY29wZUlkKGVsLCBzbG90U2NvcGVJZHNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyZW50Q29tcG9uZW50KSB7XG4gICAgICBsZXQgc3ViVHJlZSA9IHBhcmVudENvbXBvbmVudC5zdWJUcmVlO1xuICAgICAgaWYgKHN1YlRyZWUucGF0Y2hGbGFnID4gMCAmJiBzdWJUcmVlLnBhdGNoRmxhZyAmIDIwNDgpIHtcbiAgICAgICAgc3ViVHJlZSA9IGZpbHRlclNpbmdsZVJvb3Qoc3ViVHJlZS5jaGlsZHJlbikgfHwgc3ViVHJlZTtcbiAgICAgIH1cbiAgICAgIGlmICh2bm9kZSA9PT0gc3ViVHJlZSB8fCBpc1N1c3BlbnNlKHN1YlRyZWUudHlwZSkgJiYgKHN1YlRyZWUuc3NDb250ZW50ID09PSB2bm9kZSB8fCBzdWJUcmVlLnNzRmFsbGJhY2sgPT09IHZub2RlKSkge1xuICAgICAgICBjb25zdCBwYXJlbnRWTm9kZSA9IHBhcmVudENvbXBvbmVudC52bm9kZTtcbiAgICAgICAgc2V0U2NvcGVJZChcbiAgICAgICAgICBlbCxcbiAgICAgICAgICBwYXJlbnRWTm9kZSxcbiAgICAgICAgICBwYXJlbnRWTm9kZS5zY29wZUlkLFxuICAgICAgICAgIHBhcmVudFZOb2RlLnNsb3RTY29wZUlkcyxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQucGFyZW50XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3VudENoaWxkcmVuID0gKGNoaWxkcmVuLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgc3RhcnQgPSAwKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV0gPSBvcHRpbWl6ZWQgPyBjbG9uZUlmTW91bnRlZChjaGlsZHJlbltpXSkgOiBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpXSk7XG4gICAgICBwYXRjaChcbiAgICAgICAgbnVsbCxcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcGF0Y2hFbGVtZW50ID0gKG4xLCBuMiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIGNvbnN0IGVsID0gbjIuZWwgPSBuMS5lbDtcbiAgICB7XG4gICAgICBlbC5fX3Zub2RlID0gbjI7XG4gICAgfVxuICAgIGxldCB7IHBhdGNoRmxhZywgZHluYW1pY0NoaWxkcmVuLCBkaXJzIH0gPSBuMjtcbiAgICBwYXRjaEZsYWcgfD0gbjEucGF0Y2hGbGFnICYgMTY7XG4gICAgY29uc3Qgb2xkUHJvcHMgPSBuMS5wcm9wcyB8fCBFTVBUWV9PQko7XG4gICAgY29uc3QgbmV3UHJvcHMgPSBuMi5wcm9wcyB8fCBFTVBUWV9PQko7XG4gICAgbGV0IHZub2RlSG9vaztcbiAgICBwYXJlbnRDb21wb25lbnQgJiYgdG9nZ2xlUmVjdXJzZShwYXJlbnRDb21wb25lbnQsIGZhbHNlKTtcbiAgICBpZiAodm5vZGVIb29rID0gbmV3UHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkge1xuICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCBuMiwgbjEpO1xuICAgIH1cbiAgICBpZiAoZGlycykge1xuICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayhuMiwgbjEsIHBhcmVudENvbXBvbmVudCwgXCJiZWZvcmVVcGRhdGVcIik7XG4gICAgfVxuICAgIHBhcmVudENvbXBvbmVudCAmJiB0b2dnbGVSZWN1cnNlKHBhcmVudENvbXBvbmVudCwgdHJ1ZSk7XG4gICAgaWYgKGlzSG1yVXBkYXRpbmcpIHtcbiAgICAgIHBhdGNoRmxhZyA9IDA7XG4gICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcbiAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XG4gICAgfVxuICAgIGlmIChvbGRQcm9wcy5pbm5lckhUTUwgJiYgbmV3UHJvcHMuaW5uZXJIVE1MID09IG51bGwgfHwgb2xkUHJvcHMudGV4dENvbnRlbnQgJiYgbmV3UHJvcHMudGV4dENvbnRlbnQgPT0gbnVsbCkge1xuICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCBcIlwiKTtcbiAgICB9XG4gICAgaWYgKGR5bmFtaWNDaGlsZHJlbikge1xuICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKFxuICAgICAgICBuMS5keW5hbWljQ2hpbGRyZW4sXG4gICAgICAgIGR5bmFtaWNDaGlsZHJlbixcbiAgICAgICAgZWwsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIHJlc29sdmVDaGlsZHJlbk5hbWVzcGFjZShuMiwgbmFtZXNwYWNlKSxcbiAgICAgICAgc2xvdFNjb3BlSWRzXG4gICAgICApO1xuICAgICAge1xuICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghb3B0aW1pemVkKSB7XG4gICAgICBwYXRjaENoaWxkcmVuKFxuICAgICAgICBuMSxcbiAgICAgICAgbjIsXG4gICAgICAgIGVsLFxuICAgICAgICBudWxsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICByZXNvbHZlQ2hpbGRyZW5OYW1lc3BhY2UobjIsIG5hbWVzcGFjZSksXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgZmFsc2VcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChwYXRjaEZsYWcgPiAwKSB7XG4gICAgICBpZiAocGF0Y2hGbGFnICYgMTYpIHtcbiAgICAgICAgcGF0Y2hQcm9wcyhlbCwgb2xkUHJvcHMsIG5ld1Byb3BzLCBwYXJlbnRDb21wb25lbnQsIG5hbWVzcGFjZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocGF0Y2hGbGFnICYgMikge1xuICAgICAgICAgIGlmIChvbGRQcm9wcy5jbGFzcyAhPT0gbmV3UHJvcHMuY2xhc3MpIHtcbiAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIFwiY2xhc3NcIiwgbnVsbCwgbmV3UHJvcHMuY2xhc3MsIG5hbWVzcGFjZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiA0KSB7XG4gICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgXCJzdHlsZVwiLCBvbGRQcm9wcy5zdHlsZSwgbmV3UHJvcHMuc3R5bGUsIG5hbWVzcGFjZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDgpIHtcbiAgICAgICAgICBjb25zdCBwcm9wc1RvVXBkYXRlID0gbjIuZHluYW1pY1Byb3BzO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHNUb1VwZGF0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gcHJvcHNUb1VwZGF0ZVtpXTtcbiAgICAgICAgICAgIGNvbnN0IHByZXYgPSBvbGRQcm9wc1trZXldO1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5ld1Byb3BzW2tleV07XG4gICAgICAgICAgICBpZiAobmV4dCAhPT0gcHJldiB8fCBrZXkgPT09IFwidmFsdWVcIikge1xuICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIHByZXYsIG5leHQsIG5hbWVzcGFjZSwgcGFyZW50Q29tcG9uZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXRjaEZsYWcgJiAxKSB7XG4gICAgICAgIGlmIChuMS5jaGlsZHJlbiAhPT0gbjIuY2hpbGRyZW4pIHtcbiAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoZWwsIG4yLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIW9wdGltaXplZCAmJiBkeW5hbWljQ2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgcGF0Y2hQcm9wcyhlbCwgb2xkUHJvcHMsIG5ld1Byb3BzLCBwYXJlbnRDb21wb25lbnQsIG5hbWVzcGFjZSk7XG4gICAgfVxuICAgIGlmICgodm5vZGVIb29rID0gbmV3UHJvcHMub25Wbm9kZVVwZGF0ZWQpIHx8IGRpcnMpIHtcbiAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICAgIHZub2RlSG9vayAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnRDb21wb25lbnQsIG4yLCBuMSk7XG4gICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayhuMiwgbjEsIHBhcmVudENvbXBvbmVudCwgXCJ1cGRhdGVkXCIpO1xuICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcGF0Y2hCbG9ja0NoaWxkcmVuID0gKG9sZENoaWxkcmVuLCBuZXdDaGlsZHJlbiwgZmFsbGJhY2tDb250YWluZXIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzKSA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qgb2xkVk5vZGUgPSBvbGRDaGlsZHJlbltpXTtcbiAgICAgIGNvbnN0IG5ld1ZOb2RlID0gbmV3Q2hpbGRyZW5baV07XG4gICAgICBjb25zdCBjb250YWluZXIgPSAoXG4gICAgICAgIC8vIG9sZFZOb2RlIG1heSBiZSBhbiBlcnJvcmVkIGFzeW5jIHNldHVwKCkgY29tcG9uZW50IGluc2lkZSBTdXNwZW5zZVxuICAgICAgICAvLyB3aGljaCB3aWxsIG5vdCBoYXZlIGEgbW91bnRlZCBlbGVtZW50XG4gICAgICAgIG9sZFZOb2RlLmVsICYmIC8vIC0gSW4gdGhlIGNhc2Ugb2YgYSBGcmFnbWVudCwgd2UgbmVlZCB0byBwcm92aWRlIHRoZSBhY3R1YWwgcGFyZW50XG4gICAgICAgIC8vIG9mIHRoZSBGcmFnbWVudCBpdHNlbGYgc28gaXQgY2FuIG1vdmUgaXRzIGNoaWxkcmVuLlxuICAgICAgICAob2xkVk5vZGUudHlwZSA9PT0gRnJhZ21lbnQgfHwgLy8gLSBJbiB0aGUgY2FzZSBvZiBkaWZmZXJlbnQgbm9kZXMsIHRoZXJlIGlzIGdvaW5nIHRvIGJlIGEgcmVwbGFjZW1lbnRcbiAgICAgICAgLy8gd2hpY2ggYWxzbyByZXF1aXJlcyB0aGUgY29ycmVjdCBwYXJlbnQgY29udGFpbmVyXG4gICAgICAgICFpc1NhbWVWTm9kZVR5cGUob2xkVk5vZGUsIG5ld1ZOb2RlKSB8fCAvLyAtIEluIHRoZSBjYXNlIG9mIGEgY29tcG9uZW50LCBpdCBjb3VsZCBjb250YWluIGFueXRoaW5nLlxuICAgICAgICBvbGRWTm9kZS5zaGFwZUZsYWcgJiAoNiB8IDY0IHwgMTI4KSkgPyBob3N0UGFyZW50Tm9kZShvbGRWTm9kZS5lbCkgOiAoXG4gICAgICAgICAgLy8gSW4gb3RoZXIgY2FzZXMsIHRoZSBwYXJlbnQgY29udGFpbmVyIGlzIG5vdCBhY3R1YWxseSB1c2VkIHNvIHdlXG4gICAgICAgICAgLy8ganVzdCBwYXNzIHRoZSBibG9jayBlbGVtZW50IGhlcmUgdG8gYXZvaWQgYSBET00gcGFyZW50Tm9kZSBjYWxsLlxuICAgICAgICAgIGZhbGxiYWNrQ29udGFpbmVyXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICBwYXRjaChcbiAgICAgICAgb2xkVk5vZGUsXG4gICAgICAgIG5ld1ZOb2RlLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcGF0Y2hQcm9wcyA9IChlbCwgb2xkUHJvcHMsIG5ld1Byb3BzLCBwYXJlbnRDb21wb25lbnQsIG5hbWVzcGFjZSkgPT4ge1xuICAgIGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMpIHtcbiAgICAgIGlmIChvbGRQcm9wcyAhPT0gRU1QVFlfT0JKKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9sZFByb3BzKSB7XG4gICAgICAgICAgaWYgKCFpc1Jlc2VydmVkUHJvcChrZXkpICYmICEoa2V5IGluIG5ld1Byb3BzKSkge1xuICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChcbiAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgb2xkUHJvcHNba2V5XSxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgICBwYXJlbnRDb21wb25lbnRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBuZXdQcm9wcykge1xuICAgICAgICBpZiAoaXNSZXNlcnZlZFByb3Aoa2V5KSkgY29udGludWU7XG4gICAgICAgIGNvbnN0IG5leHQgPSBuZXdQcm9wc1trZXldO1xuICAgICAgICBjb25zdCBwcmV2ID0gb2xkUHJvcHNba2V5XTtcbiAgICAgICAgaWYgKG5leHQgIT09IHByZXYgJiYga2V5ICE9PSBcInZhbHVlXCIpIHtcbiAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIHByZXYsIG5leHQsIG5hbWVzcGFjZSwgcGFyZW50Q29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFwidmFsdWVcIiBpbiBuZXdQcm9wcykge1xuICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBcInZhbHVlXCIsIG9sZFByb3BzLnZhbHVlLCBuZXdQcm9wcy52YWx1ZSwgbmFtZXNwYWNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHByb2Nlc3NGcmFnbWVudCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XG4gICAgY29uc3QgZnJhZ21lbnRTdGFydEFuY2hvciA9IG4yLmVsID0gbjEgPyBuMS5lbCA6IGhvc3RDcmVhdGVUZXh0KFwiXCIpO1xuICAgIGNvbnN0IGZyYWdtZW50RW5kQW5jaG9yID0gbjIuYW5jaG9yID0gbjEgPyBuMS5hbmNob3IgOiBob3N0Q3JlYXRlVGV4dChcIlwiKTtcbiAgICBsZXQgeyBwYXRjaEZsYWcsIGR5bmFtaWNDaGlsZHJlbiwgc2xvdFNjb3BlSWRzOiBmcmFnbWVudFNsb3RTY29wZUlkcyB9ID0gbjI7XG4gICAgaWYgKFxuICAgICAgLy8gIzU1MjMgZGV2IHJvb3QgZnJhZ21lbnQgbWF5IGluaGVyaXQgZGlyZWN0aXZlc1xuICAgICAgaXNIbXJVcGRhdGluZyB8fCBwYXRjaEZsYWcgJiAyMDQ4XG4gICAgKSB7XG4gICAgICBwYXRjaEZsYWcgPSAwO1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgICBkeW5hbWljQ2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZnJhZ21lbnRTbG90U2NvcGVJZHMpIHtcbiAgICAgIHNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkcyA/IHNsb3RTY29wZUlkcy5jb25jYXQoZnJhZ21lbnRTbG90U2NvcGVJZHMpIDogZnJhZ21lbnRTbG90U2NvcGVJZHM7XG4gICAgfVxuICAgIGlmIChuMSA9PSBudWxsKSB7XG4gICAgICBob3N0SW5zZXJ0KGZyYWdtZW50U3RhcnRBbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIGhvc3RJbnNlcnQoZnJhZ21lbnRFbmRBbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICAgIG1vdW50Q2hpbGRyZW4oXG4gICAgICAgIC8vICMxMDAwN1xuICAgICAgICAvLyBzdWNoIGZyYWdtZW50IGxpa2UgYDw+PC8+YCB3aWxsIGJlIGNvbXBpbGVkIGludG9cbiAgICAgICAgLy8gYSBmcmFnbWVudCB3aGljaCBkb2Vzbid0IGhhdmUgYSBjaGlsZHJlbi5cbiAgICAgICAgLy8gSW4gdGhpcyBjYXNlIGZhbGxiYWNrIHRvIGFuIGVtcHR5IGFycmF5XG4gICAgICAgIG4yLmNoaWxkcmVuIHx8IFtdLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGZyYWdtZW50RW5kQW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGF0Y2hGbGFnID4gMCAmJiBwYXRjaEZsYWcgJiA2NCAmJiBkeW5hbWljQ2hpbGRyZW4gJiYgLy8gIzI3MTUgdGhlIHByZXZpb3VzIGZyYWdtZW50IGNvdWxkJ3ZlIGJlZW4gYSBCQUlMZWQgb25lIGFzIGEgcmVzdWx0XG4gICAgICAvLyBvZiByZW5kZXJTbG90KCkgd2l0aCBubyB2YWxpZCBjaGlsZHJlblxuICAgICAgbjEuZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihcbiAgICAgICAgICBuMS5keW5hbWljQ2hpbGRyZW4sXG4gICAgICAgICAgZHluYW1pY0NoaWxkcmVuLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkc1xuICAgICAgICApO1xuICAgICAgICB7XG4gICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRjaENoaWxkcmVuKFxuICAgICAgICAgIG4xLFxuICAgICAgICAgIG4yLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBmcmFnbWVudEVuZEFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHByb2Nlc3NDb21wb25lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIG4yLnNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkcztcbiAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgaWYgKG4yLnNoYXBlRmxhZyAmIDUxMikge1xuICAgICAgICBwYXJlbnRDb21wb25lbnQuY3R4LmFjdGl2YXRlKFxuICAgICAgICAgIG4yLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbW91bnRDb21wb25lbnQoXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGVDb21wb25lbnQobjEsIG4yLCBvcHRpbWl6ZWQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgbW91bnRDb21wb25lbnQgPSAoaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IChpbml0aWFsVk5vZGUuY29tcG9uZW50ID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UoXG4gICAgICBpbml0aWFsVk5vZGUsXG4gICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICBwYXJlbnRTdXNwZW5zZVxuICAgICkpO1xuICAgIGlmIChpbnN0YW5jZS50eXBlLl9faG1ySWQpIHtcbiAgICAgIHJlZ2lzdGVySE1SKGluc3RhbmNlKTtcbiAgICB9XG4gICAge1xuICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KGluaXRpYWxWTm9kZSk7XG4gICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBtb3VudGApO1xuICAgIH1cbiAgICBpZiAoaXNLZWVwQWxpdmUoaW5pdGlhbFZOb2RlKSkge1xuICAgICAgaW5zdGFuY2UuY3R4LnJlbmRlcmVyID0gaW50ZXJuYWxzO1xuICAgIH1cbiAgICB7XG4gICAgICB7XG4gICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGluaXRgKTtcbiAgICAgIH1cbiAgICAgIHNldHVwQ29tcG9uZW50KGluc3RhbmNlLCBmYWxzZSwgb3B0aW1pemVkKTtcbiAgICAgIHtcbiAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYGluaXRgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzSG1yVXBkYXRpbmcpIGluaXRpYWxWTm9kZS5lbCA9IG51bGw7XG4gICAgaWYgKGluc3RhbmNlLmFzeW5jRGVwKSB7XG4gICAgICBwYXJlbnRTdXNwZW5zZSAmJiBwYXJlbnRTdXNwZW5zZS5yZWdpc3RlckRlcChpbnN0YW5jZSwgc2V0dXBSZW5kZXJFZmZlY3QsIG9wdGltaXplZCk7XG4gICAgICBpZiAoIWluaXRpYWxWTm9kZS5lbCkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IGluc3RhbmNlLnN1YlRyZWUgPSBjcmVhdGVWTm9kZShDb21tZW50KTtcbiAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG51bGwsIHBsYWNlaG9sZGVyLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldHVwUmVuZGVyRWZmZWN0KFxuICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgaW5pdGlhbFZOb2RlLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgIH1cbiAgICB7XG4gICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XG4gICAgfVxuICB9O1xuICBjb25zdCB1cGRhdGVDb21wb25lbnQgPSAobjEsIG4yLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IG4yLmNvbXBvbmVudCA9IG4xLmNvbXBvbmVudDtcbiAgICBpZiAoc2hvdWxkVXBkYXRlQ29tcG9uZW50KG4xLCBuMiwgb3B0aW1pemVkKSkge1xuICAgICAgaWYgKGluc3RhbmNlLmFzeW5jRGVwICYmICFpbnN0YW5jZS5hc3luY1Jlc29sdmVkKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQobjIpO1xuICAgICAgICB9XG4gICAgICAgIHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlcihpbnN0YW5jZSwgbjIsIG9wdGltaXplZCk7XG4gICAgICAgIHtcbiAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3RhbmNlLm5leHQgPSBuMjtcbiAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG4yLmVsID0gbjEuZWw7XG4gICAgICBpbnN0YW5jZS52bm9kZSA9IG4yO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2V0dXBSZW5kZXJFZmZlY3QgPSAoaW5zdGFuY2UsIGluaXRpYWxWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIG9wdGltaXplZCkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudFVwZGF0ZUZuID0gKCkgPT4ge1xuICAgICAgaWYgKCFpbnN0YW5jZS5pc01vdW50ZWQpIHtcbiAgICAgICAgbGV0IHZub2RlSG9vaztcbiAgICAgICAgY29uc3QgeyBlbCwgcHJvcHMgfSA9IGluaXRpYWxWTm9kZTtcbiAgICAgICAgY29uc3QgeyBibSwgbSwgcGFyZW50LCByb290LCB0eXBlIH0gPSBpbnN0YW5jZTtcbiAgICAgICAgY29uc3QgaXNBc3luY1dyYXBwZXJWTm9kZSA9IGlzQXN5bmNXcmFwcGVyKGluaXRpYWxWTm9kZSk7XG4gICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIGZhbHNlKTtcbiAgICAgICAgaWYgKGJtKSB7XG4gICAgICAgICAgaW52b2tlQXJyYXlGbnMoYm0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBc3luY1dyYXBwZXJWTm9kZSAmJiAodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZUJlZm9yZU1vdW50KSkge1xuICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgaW5pdGlhbFZOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCB0cnVlKTtcbiAgICAgICAgaWYgKGVsICYmIGh5ZHJhdGVOb2RlKSB7XG4gICAgICAgICAgY29uc3QgaHlkcmF0ZVN1YlRyZWUgPSAoKSA9PiB7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5zdGFuY2Uuc3ViVHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGh5ZHJhdGVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGh5ZHJhdGVOb2RlKFxuICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgaW5zdGFuY2Uuc3ViVHJlZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaHlkcmF0ZWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKGlzQXN5bmNXcmFwcGVyVk5vZGUgJiYgdHlwZS5fX2FzeW5jSHlkcmF0ZSkge1xuICAgICAgICAgICAgdHlwZS5fX2FzeW5jSHlkcmF0ZShcbiAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgICBoeWRyYXRlU3ViVHJlZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaHlkcmF0ZVN1YlRyZWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHJvb3QuY2UpIHtcbiAgICAgICAgICAgIHJvb3QuY2UuX2luamVjdENoaWxkU3R5bGUodHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBzdWJUcmVlID0gaW5zdGFuY2Uuc3ViVHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcGF0Y2hgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGF0Y2goXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgc3ViVHJlZSxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2VcbiAgICAgICAgICApO1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbml0aWFsVk5vZGUuZWwgPSBzdWJUcmVlLmVsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KG0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXN5bmNXcmFwcGVyVk5vZGUgJiYgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSkge1xuICAgICAgICAgIGNvbnN0IHNjb3BlZEluaXRpYWxWTm9kZSA9IGluaXRpYWxWTm9kZTtcbiAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoXG4gICAgICAgICAgICAoKSA9PiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIHNjb3BlZEluaXRpYWxWTm9kZSksXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluaXRpYWxWTm9kZS5zaGFwZUZsYWcgJiAyNTYgfHwgcGFyZW50ICYmIGlzQXN5bmNXcmFwcGVyKHBhcmVudC52bm9kZSkgJiYgcGFyZW50LnZub2RlLnNoYXBlRmxhZyAmIDI1Nikge1xuICAgICAgICAgIGluc3RhbmNlLmEgJiYgcXVldWVQb3N0UmVuZGVyRWZmZWN0KGluc3RhbmNlLmEsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnN0YW5jZS5pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICB7XG4gICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5pdGlhbFZOb2RlID0gY29udGFpbmVyID0gYW5jaG9yID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCB7IG5leHQsIGJ1LCB1LCBwYXJlbnQsIHZub2RlIH0gPSBpbnN0YW5jZTtcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IG5vbkh5ZHJhdGVkQXN5bmNSb290ID0gbG9jYXRlTm9uSHlkcmF0ZWRBc3luY1Jvb3QoaW5zdGFuY2UpO1xuICAgICAgICAgIGlmIChub25IeWRyYXRlZEFzeW5jUm9vdCkge1xuICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgbmV4dC5lbCA9IHZub2RlLmVsO1xuICAgICAgICAgICAgICB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIoaW5zdGFuY2UsIG5leHQsIG9wdGltaXplZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub25IeWRyYXRlZEFzeW5jUm9vdC5hc3luY0RlcC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKCFpbnN0YW5jZS5pc1VubW91bnRlZCkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudFVwZGF0ZUZuKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgb3JpZ2luTmV4dCA9IG5leHQ7XG4gICAgICAgIGxldCB2bm9kZUhvb2s7XG4gICAgICAgIHtcbiAgICAgICAgICBwdXNoV2FybmluZ0NvbnRleHQobmV4dCB8fCBpbnN0YW5jZS52bm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgZmFsc2UpO1xuICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgIG5leHQuZWwgPSB2bm9kZS5lbDtcbiAgICAgICAgICB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIoaW5zdGFuY2UsIG5leHQsIG9wdGltaXplZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dCA9IHZub2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChidSkge1xuICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJ1KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodm5vZGVIb29rID0gbmV4dC5wcm9wcyAmJiBuZXh0LnByb3BzLm9uVm5vZGVCZWZvcmVVcGRhdGUpIHtcbiAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIG5leHQsIHZub2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCB0cnVlKTtcbiAgICAgICAge1xuICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5leHRUcmVlID0gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSk7XG4gICAgICAgIHtcbiAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldlRyZWUgPSBpbnN0YW5jZS5zdWJUcmVlO1xuICAgICAgICBpbnN0YW5jZS5zdWJUcmVlID0gbmV4dFRyZWU7XG4gICAgICAgIHtcbiAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xuICAgICAgICB9XG4gICAgICAgIHBhdGNoKFxuICAgICAgICAgIHByZXZUcmVlLFxuICAgICAgICAgIG5leHRUcmVlLFxuICAgICAgICAgIC8vIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGlmIGl0J3MgaW4gYSB0ZWxlcG9ydFxuICAgICAgICAgIGhvc3RQYXJlbnROb2RlKHByZXZUcmVlLmVsKSxcbiAgICAgICAgICAvLyBhbmNob3IgbWF5IGhhdmUgY2hhbmdlZCBpZiBpdCdzIGluIGEgZnJhZ21lbnRcbiAgICAgICAgICBnZXROZXh0SG9zdE5vZGUocHJldlRyZWUpLFxuICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZVxuICAgICAgICApO1xuICAgICAgICB7XG4gICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dC5lbCA9IG5leHRUcmVlLmVsO1xuICAgICAgICBpZiAob3JpZ2luTmV4dCA9PT0gbnVsbCkge1xuICAgICAgICAgIHVwZGF0ZUhPQ0hvc3RFbChpbnN0YW5jZSwgbmV4dFRyZWUuZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1KSB7XG4gICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KHUsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodm5vZGVIb29rID0gbmV4dC5wcm9wcyAmJiBuZXh0LnByb3BzLm9uVm5vZGVVcGRhdGVkKSB7XG4gICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KFxuICAgICAgICAgICAgKCkgPT4gaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBuZXh0LCB2bm9kZSksXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAge1xuICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZChpbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAge1xuICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGluc3RhbmNlLnNjb3BlLm9uKCk7XG4gICAgY29uc3QgZWZmZWN0ID0gaW5zdGFuY2UuZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGNvbXBvbmVudFVwZGF0ZUZuKTtcbiAgICBpbnN0YW5jZS5zY29wZS5vZmYoKTtcbiAgICBjb25zdCB1cGRhdGUgPSBpbnN0YW5jZS51cGRhdGUgPSBlZmZlY3QucnVuLmJpbmQoZWZmZWN0KTtcbiAgICBjb25zdCBqb2IgPSBpbnN0YW5jZS5qb2IgPSBlZmZlY3QucnVuSWZEaXJ0eS5iaW5kKGVmZmVjdCk7XG4gICAgam9iLmkgPSBpbnN0YW5jZTtcbiAgICBqb2IuaWQgPSBpbnN0YW5jZS51aWQ7XG4gICAgZWZmZWN0LnNjaGVkdWxlciA9ICgpID0+IHF1ZXVlSm9iKGpvYik7XG4gICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgdHJ1ZSk7XG4gICAge1xuICAgICAgZWZmZWN0Lm9uVHJhY2sgPSBpbnN0YW5jZS5ydGMgPyAoZSkgPT4gaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UucnRjLCBlKSA6IHZvaWQgMDtcbiAgICAgIGVmZmVjdC5vblRyaWdnZXIgPSBpbnN0YW5jZS5ydGcgPyAoZSkgPT4gaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UucnRnLCBlKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgdXBkYXRlKCk7XG4gIH07XG4gIGNvbnN0IHVwZGF0ZUNvbXBvbmVudFByZVJlbmRlciA9IChpbnN0YW5jZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBuZXh0Vk5vZGUuY29tcG9uZW50ID0gaW5zdGFuY2U7XG4gICAgY29uc3QgcHJldlByb3BzID0gaW5zdGFuY2Uudm5vZGUucHJvcHM7XG4gICAgaW5zdGFuY2Uudm5vZGUgPSBuZXh0Vk5vZGU7XG4gICAgaW5zdGFuY2UubmV4dCA9IG51bGw7XG4gICAgdXBkYXRlUHJvcHMoaW5zdGFuY2UsIG5leHRWTm9kZS5wcm9wcywgcHJldlByb3BzLCBvcHRpbWl6ZWQpO1xuICAgIHVwZGF0ZVNsb3RzKGluc3RhbmNlLCBuZXh0Vk5vZGUuY2hpbGRyZW4sIG9wdGltaXplZCk7XG4gICAgcGF1c2VUcmFja2luZygpO1xuICAgIGZsdXNoUHJlRmx1c2hDYnMoaW5zdGFuY2UpO1xuICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgfTtcbiAgY29uc3QgcGF0Y2hDaGlsZHJlbiA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCBjMSA9IG4xICYmIG4xLmNoaWxkcmVuO1xuICAgIGNvbnN0IHByZXZTaGFwZUZsYWcgPSBuMSA/IG4xLnNoYXBlRmxhZyA6IDA7XG4gICAgY29uc3QgYzIgPSBuMi5jaGlsZHJlbjtcbiAgICBjb25zdCB7IHBhdGNoRmxhZywgc2hhcGVGbGFnIH0gPSBuMjtcbiAgICBpZiAocGF0Y2hGbGFnID4gMCkge1xuICAgICAgaWYgKHBhdGNoRmxhZyAmIDEyOCkge1xuICAgICAgICBwYXRjaEtleWVkQ2hpbGRyZW4oXG4gICAgICAgICAgYzEsXG4gICAgICAgICAgYzIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChwYXRjaEZsYWcgJiAyNTYpIHtcbiAgICAgICAgcGF0Y2hVbmtleWVkQ2hpbGRyZW4oXG4gICAgICAgICAgYzEsXG4gICAgICAgICAgYzIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgOCkge1xuICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiAxNikge1xuICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgfVxuICAgICAgaWYgKGMyICE9PSBjMSkge1xuICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoY29udGFpbmVyLCBjMik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgMTYpIHtcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2KSB7XG4gICAgICAgICAgcGF0Y2hLZXllZENoaWxkcmVuKFxuICAgICAgICAgICAgYzEsXG4gICAgICAgICAgICBjMixcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDgpIHtcbiAgICAgICAgICBob3N0U2V0RWxlbWVudFRleHQoY29udGFpbmVyLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgICAgICBtb3VudENoaWxkcmVuKFxuICAgICAgICAgICAgYzIsXG4gICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHBhdGNoVW5rZXllZENoaWxkcmVuID0gKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcbiAgICBjMSA9IGMxIHx8IEVNUFRZX0FSUjtcbiAgICBjMiA9IGMyIHx8IEVNUFRZX0FSUjtcbiAgICBjb25zdCBvbGRMZW5ndGggPSBjMS5sZW5ndGg7XG4gICAgY29uc3QgbmV3TGVuZ3RoID0gYzIubGVuZ3RoO1xuICAgIGNvbnN0IGNvbW1vbkxlbmd0aCA9IE1hdGgubWluKG9sZExlbmd0aCwgbmV3TGVuZ3RoKTtcbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgY29tbW9uTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG5leHRDaGlsZCA9IGMyW2ldID0gb3B0aW1pemVkID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pO1xuICAgICAgcGF0Y2goXG4gICAgICAgIGMxW2ldLFxuICAgICAgICBuZXh0Q2hpbGQsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgIG9wdGltaXplZFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG9sZExlbmd0aCA+IG5ld0xlbmd0aCkge1xuICAgICAgdW5tb3VudENoaWxkcmVuKFxuICAgICAgICBjMSxcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgZmFsc2UsXG4gICAgICAgIGNvbW1vbkxlbmd0aFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbW91bnRDaGlsZHJlbihcbiAgICAgICAgYzIsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICBjb21tb25MZW5ndGhcbiAgICAgICk7XG4gICAgfVxuICB9O1xuICBjb25zdCBwYXRjaEtleWVkQ2hpbGRyZW4gPSAoYzEsIGMyLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBsMiA9IGMyLmxlbmd0aDtcbiAgICBsZXQgZTEgPSBjMS5sZW5ndGggLSAxO1xuICAgIGxldCBlMiA9IGwyIC0gMTtcbiAgICB3aGlsZSAoaSA8PSBlMSAmJiBpIDw9IGUyKSB7XG4gICAgICBjb25zdCBuMSA9IGMxW2ldO1xuICAgICAgY29uc3QgbjIgPSBjMltpXSA9IG9wdGltaXplZCA/IGNsb25lSWZNb3VudGVkKGMyW2ldKSA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKTtcbiAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xuICAgICAgICBwYXRjaChcbiAgICAgICAgICBuMSxcbiAgICAgICAgICBuMixcbiAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgIH1cbiAgICB3aGlsZSAoaSA8PSBlMSAmJiBpIDw9IGUyKSB7XG4gICAgICBjb25zdCBuMSA9IGMxW2UxXTtcbiAgICAgIGNvbnN0IG4yID0gYzJbZTJdID0gb3B0aW1pemVkID8gY2xvbmVJZk1vdW50ZWQoYzJbZTJdKSA6IG5vcm1hbGl6ZVZOb2RlKGMyW2UyXSk7XG4gICAgICBpZiAoaXNTYW1lVk5vZGVUeXBlKG4xLCBuMikpIHtcbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbjEsXG4gICAgICAgICAgbjIsXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGUxLS07XG4gICAgICBlMi0tO1xuICAgIH1cbiAgICBpZiAoaSA+IGUxKSB7XG4gICAgICBpZiAoaSA8PSBlMikge1xuICAgICAgICBjb25zdCBuZXh0UG9zID0gZTIgKyAxO1xuICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0UG9zIDwgbDIgPyBjMltuZXh0UG9zXS5lbCA6IHBhcmVudEFuY2hvcjtcbiAgICAgICAgd2hpbGUgKGkgPD0gZTIpIHtcbiAgICAgICAgICBwYXRjaChcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBjMltpXSA9IG9wdGltaXplZCA/IGNsb25lSWZNb3VudGVkKGMyW2ldKSA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGkgPiBlMikge1xuICAgICAgd2hpbGUgKGkgPD0gZTEpIHtcbiAgICAgICAgdW5tb3VudChjMVtpXSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgczEgPSBpO1xuICAgICAgY29uc3QgczIgPSBpO1xuICAgICAgY29uc3Qga2V5VG9OZXdJbmRleE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICBmb3IgKGkgPSBzMjsgaSA8PSBlMjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IGMyW2ldID0gb3B0aW1pemVkID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pIDogbm9ybWFsaXplVk5vZGUoYzJbaV0pO1xuICAgICAgICBpZiAobmV4dENoaWxkLmtleSAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKGtleVRvTmV3SW5kZXhNYXAuaGFzKG5leHRDaGlsZC5rZXkpKSB7XG4gICAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICAgIGBEdXBsaWNhdGUga2V5cyBmb3VuZCBkdXJpbmcgdXBkYXRlOmAsXG4gICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KG5leHRDaGlsZC5rZXkpLFxuICAgICAgICAgICAgICBgTWFrZSBzdXJlIGtleXMgYXJlIHVuaXF1ZS5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrZXlUb05ld0luZGV4TWFwLnNldChuZXh0Q2hpbGQua2V5LCBpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGo7XG4gICAgICBsZXQgcGF0Y2hlZCA9IDA7XG4gICAgICBjb25zdCB0b0JlUGF0Y2hlZCA9IGUyIC0gczIgKyAxO1xuICAgICAgbGV0IG1vdmVkID0gZmFsc2U7XG4gICAgICBsZXQgbWF4TmV3SW5kZXhTb0ZhciA9IDA7XG4gICAgICBjb25zdCBuZXdJbmRleFRvT2xkSW5kZXhNYXAgPSBuZXcgQXJyYXkodG9CZVBhdGNoZWQpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRvQmVQYXRjaGVkOyBpKyspIG5ld0luZGV4VG9PbGRJbmRleE1hcFtpXSA9IDA7XG4gICAgICBmb3IgKGkgPSBzMTsgaSA8PSBlMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHByZXZDaGlsZCA9IGMxW2ldO1xuICAgICAgICBpZiAocGF0Y2hlZCA+PSB0b0JlUGF0Y2hlZCkge1xuICAgICAgICAgIHVubW91bnQocHJldkNoaWxkLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmV3SW5kZXg7XG4gICAgICAgIGlmIChwcmV2Q2hpbGQua2V5ICE9IG51bGwpIHtcbiAgICAgICAgICBuZXdJbmRleCA9IGtleVRvTmV3SW5kZXhNYXAuZ2V0KHByZXZDaGlsZC5rZXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAoaiA9IHMyOyBqIDw9IGUyOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChuZXdJbmRleFRvT2xkSW5kZXhNYXBbaiAtIHMyXSA9PT0gMCAmJiBpc1NhbWVWTm9kZVR5cGUocHJldkNoaWxkLCBjMltqXSkpIHtcbiAgICAgICAgICAgICAgbmV3SW5kZXggPSBqO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld0luZGV4ID09PSB2b2lkIDApIHtcbiAgICAgICAgICB1bm1vdW50KHByZXZDaGlsZCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3SW5kZXhUb09sZEluZGV4TWFwW25ld0luZGV4IC0gczJdID0gaSArIDE7XG4gICAgICAgICAgaWYgKG5ld0luZGV4ID49IG1heE5ld0luZGV4U29GYXIpIHtcbiAgICAgICAgICAgIG1heE5ld0luZGV4U29GYXIgPSBuZXdJbmRleDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXRjaChcbiAgICAgICAgICAgIHByZXZDaGlsZCxcbiAgICAgICAgICAgIGMyW25ld0luZGV4XSxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICAgIG9wdGltaXplZFxuICAgICAgICAgICk7XG4gICAgICAgICAgcGF0Y2hlZCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZSA9IG1vdmVkID8gZ2V0U2VxdWVuY2UobmV3SW5kZXhUb09sZEluZGV4TWFwKSA6IEVNUFRZX0FSUjtcbiAgICAgIGogPSBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZS5sZW5ndGggLSAxO1xuICAgICAgZm9yIChpID0gdG9CZVBhdGNoZWQgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCBuZXh0SW5kZXggPSBzMiArIGk7XG4gICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IGMyW25leHRJbmRleF07XG4gICAgICAgIGNvbnN0IGFuY2hvciA9IG5leHRJbmRleCArIDEgPCBsMiA/IGMyW25leHRJbmRleCArIDFdLmVsIDogcGFyZW50QW5jaG9yO1xuICAgICAgICBpZiAobmV3SW5kZXhUb09sZEluZGV4TWFwW2ldID09PSAwKSB7XG4gICAgICAgICAgcGF0Y2goXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgbmV4dENoaWxkLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKG1vdmVkKSB7XG4gICAgICAgICAgaWYgKGogPCAwIHx8IGkgIT09IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlW2pdKSB7XG4gICAgICAgICAgICBtb3ZlKG5leHRDaGlsZCwgY29udGFpbmVyLCBhbmNob3IsIDIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqLS07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBtb3ZlID0gKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUsIHBhcmVudFN1c3BlbnNlID0gbnVsbCkgPT4ge1xuICAgIGNvbnN0IHsgZWwsIHR5cGUsIHRyYW5zaXRpb24sIGNoaWxkcmVuLCBzaGFwZUZsYWcgfSA9IHZub2RlO1xuICAgIGlmIChzaGFwZUZsYWcgJiA2KSB7XG4gICAgICBtb3ZlKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICB2bm9kZS5zdXNwZW5zZS5tb3ZlKGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzaGFwZUZsYWcgJiA2NCkge1xuICAgICAgdHlwZS5tb3ZlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgaW50ZXJuYWxzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG1vdmUoY2hpbGRyZW5baV0sIGNvbnRhaW5lciwgYW5jaG9yLCBtb3ZlVHlwZSk7XG4gICAgICB9XG4gICAgICBob3N0SW5zZXJ0KHZub2RlLmFuY2hvciwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gU3RhdGljKSB7XG4gICAgICBtb3ZlU3RhdGljTm9kZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBuZWVkVHJhbnNpdGlvbjIgPSBtb3ZlVHlwZSAhPT0gMiAmJiBzaGFwZUZsYWcgJiAxICYmIHRyYW5zaXRpb247XG4gICAgaWYgKG5lZWRUcmFuc2l0aW9uMikge1xuICAgICAgaWYgKG1vdmVUeXBlID09PSAwKSB7XG4gICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xuICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XG4gICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB0cmFuc2l0aW9uLmVudGVyKGVsKSwgcGFyZW50U3VzcGVuc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgeyBsZWF2ZSwgZGVsYXlMZWF2ZSwgYWZ0ZXJMZWF2ZSB9ID0gdHJhbnNpdGlvbjtcbiAgICAgICAgY29uc3QgcmVtb3ZlMiA9ICgpID0+IHtcbiAgICAgICAgICBpZiAodm5vZGUuY3R4LmlzVW5tb3VudGVkKSB7XG4gICAgICAgICAgICBob3N0UmVtb3ZlKGVsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcGVyZm9ybUxlYXZlID0gKCkgPT4ge1xuICAgICAgICAgIGxlYXZlKGVsLCAoKSA9PiB7XG4gICAgICAgICAgICByZW1vdmUyKCk7XG4gICAgICAgICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICAgICAgICBkZWxheUxlYXZlKGVsLCByZW1vdmUyLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHVubW91bnQgPSAodm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdHlwZSxcbiAgICAgIHByb3BzLFxuICAgICAgcmVmLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBkeW5hbWljQ2hpbGRyZW4sXG4gICAgICBzaGFwZUZsYWcsXG4gICAgICBwYXRjaEZsYWcsXG4gICAgICBkaXJzLFxuICAgICAgY2FjaGVJbmRleFxuICAgIH0gPSB2bm9kZTtcbiAgICBpZiAocGF0Y2hGbGFnID09PSAtMikge1xuICAgICAgb3B0aW1pemVkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgc2V0UmVmKHJlZiwgbnVsbCwgcGFyZW50U3VzcGVuc2UsIHZub2RlLCB0cnVlKTtcbiAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICB9XG4gICAgaWYgKGNhY2hlSW5kZXggIT0gbnVsbCkge1xuICAgICAgcGFyZW50Q29tcG9uZW50LnJlbmRlckNhY2hlW2NhY2hlSW5kZXhdID0gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgMjU2KSB7XG4gICAgICBwYXJlbnRDb21wb25lbnQuY3R4LmRlYWN0aXZhdGUodm5vZGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzaG91bGRJbnZva2VEaXJzID0gc2hhcGVGbGFnICYgMSAmJiBkaXJzO1xuICAgIGNvbnN0IHNob3VsZEludm9rZVZub2RlSG9vayA9ICFpc0FzeW5jV3JhcHBlcih2bm9kZSk7XG4gICAgbGV0IHZub2RlSG9vaztcbiAgICBpZiAoc2hvdWxkSW52b2tlVm5vZGVIb29rICYmICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlQmVmb3JlVW5tb3VudCkpIHtcbiAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xuICAgIH1cbiAgICBpZiAoc2hhcGVGbGFnICYgNikge1xuICAgICAgdW5tb3VudENvbXBvbmVudCh2bm9kZS5jb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzaGFwZUZsYWcgJiAxMjgpIHtcbiAgICAgICAgdm5vZGUuc3VzcGVuc2UudW5tb3VudChwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkSW52b2tlRGlycykge1xuICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIFwiYmVmb3JlVW5tb3VudFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChzaGFwZUZsYWcgJiA2NCkge1xuICAgICAgICB2bm9kZS50eXBlLnJlbW92ZShcbiAgICAgICAgICB2bm9kZSxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UsXG4gICAgICAgICAgaW50ZXJuYWxzLFxuICAgICAgICAgIGRvUmVtb3ZlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKGR5bmFtaWNDaGlsZHJlbiAmJiAvLyAjNTE1NFxuICAgICAgLy8gd2hlbiB2LW9uY2UgaXMgdXNlZCBpbnNpZGUgYSBibG9jaywgc2V0QmxvY2tUcmFja2luZygtMSkgbWFya3MgdGhlXG4gICAgICAvLyBwYXJlbnQgYmxvY2sgd2l0aCBoYXNPbmNlOiB0cnVlXG4gICAgICAvLyBzbyB0aGF0IGl0IGRvZXNuJ3QgdGFrZSB0aGUgZmFzdCBwYXRoIGR1cmluZyB1bm1vdW50IC0gb3RoZXJ3aXNlXG4gICAgICAvLyBjb21wb25lbnRzIG5lc3RlZCBpbiB2LW9uY2UgYXJlIG5ldmVyIHVubW91bnRlZC5cbiAgICAgICFkeW5hbWljQ2hpbGRyZW4uaGFzT25jZSAmJiAvLyAjMTE1MzogZmFzdCBwYXRoIHNob3VsZCBub3QgYmUgdGFrZW4gZm9yIG5vbi1zdGFibGUgKHYtZm9yKSBmcmFnbWVudHNcbiAgICAgICh0eXBlICE9PSBGcmFnbWVudCB8fCBwYXRjaEZsYWcgPiAwICYmIHBhdGNoRmxhZyAmIDY0KSkge1xuICAgICAgICB1bm1vdW50Q2hpbGRyZW4oXG4gICAgICAgICAgZHluYW1pY0NoaWxkcmVuLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEZyYWdtZW50ICYmIHBhdGNoRmxhZyAmICgxMjggfCAyNTYpIHx8ICFvcHRpbWl6ZWQgJiYgc2hhcGVGbGFnICYgMTYpIHtcbiAgICAgICAgdW5tb3VudENoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkb1JlbW92ZSkge1xuICAgICAgICByZW1vdmUodm5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2hvdWxkSW52b2tlVm5vZGVIb29rICYmICh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlVW5tb3VudGVkKSB8fCBzaG91bGRJbnZva2VEaXJzKSB7XG4gICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xuICAgICAgICB2bm9kZUhvb2sgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XG4gICAgICAgIHNob3VsZEludm9rZURpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBcInVubW91bnRlZFwiKTtcbiAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHJlbW92ZSA9ICh2bm9kZSkgPT4ge1xuICAgIGNvbnN0IHsgdHlwZSwgZWwsIGFuY2hvciwgdHJhbnNpdGlvbiB9ID0gdm5vZGU7XG4gICAgaWYgKHR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgICBpZiAodm5vZGUucGF0Y2hGbGFnID4gMCAmJiB2bm9kZS5wYXRjaEZsYWcgJiAyMDQ4ICYmIHRyYW5zaXRpb24gJiYgIXRyYW5zaXRpb24ucGVyc2lzdGVkKSB7XG4gICAgICAgIHZub2RlLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IENvbW1lbnQpIHtcbiAgICAgICAgICAgIGhvc3RSZW1vdmUoY2hpbGQuZWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW1vdmUoY2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW1vdmVGcmFnbWVudChlbCwgYW5jaG9yKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IFN0YXRpYykge1xuICAgICAgcmVtb3ZlU3RhdGljTm9kZSh2bm9kZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBlcmZvcm1SZW1vdmUgPSAoKSA9PiB7XG4gICAgICBob3N0UmVtb3ZlKGVsKTtcbiAgICAgIGlmICh0cmFuc2l0aW9uICYmICF0cmFuc2l0aW9uLnBlcnNpc3RlZCAmJiB0cmFuc2l0aW9uLmFmdGVyTGVhdmUpIHtcbiAgICAgICAgdHJhbnNpdGlvbi5hZnRlckxlYXZlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMSAmJiB0cmFuc2l0aW9uICYmICF0cmFuc2l0aW9uLnBlcnNpc3RlZCkge1xuICAgICAgY29uc3QgeyBsZWF2ZSwgZGVsYXlMZWF2ZSB9ID0gdHJhbnNpdGlvbjtcbiAgICAgIGNvbnN0IHBlcmZvcm1MZWF2ZSA9ICgpID0+IGxlYXZlKGVsLCBwZXJmb3JtUmVtb3ZlKTtcbiAgICAgIGlmIChkZWxheUxlYXZlKSB7XG4gICAgICAgIGRlbGF5TGVhdmUodm5vZGUuZWwsIHBlcmZvcm1SZW1vdmUsIHBlcmZvcm1MZWF2ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZXJmb3JtTGVhdmUoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVyZm9ybVJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcmVtb3ZlRnJhZ21lbnQgPSAoY3VyLCBlbmQpID0+IHtcbiAgICBsZXQgbmV4dDtcbiAgICB3aGlsZSAoY3VyICE9PSBlbmQpIHtcbiAgICAgIG5leHQgPSBob3N0TmV4dFNpYmxpbmcoY3VyKTtcbiAgICAgIGhvc3RSZW1vdmUoY3VyKTtcbiAgICAgIGN1ciA9IG5leHQ7XG4gICAgfVxuICAgIGhvc3RSZW1vdmUoZW5kKTtcbiAgfTtcbiAgY29uc3QgdW5tb3VudENvbXBvbmVudCA9IChpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKSA9PiB7XG4gICAgaWYgKGluc3RhbmNlLnR5cGUuX19obXJJZCkge1xuICAgICAgdW5yZWdpc3RlckhNUihpbnN0YW5jZSk7XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIGJ1bSxcbiAgICAgIHNjb3BlLFxuICAgICAgam9iLFxuICAgICAgc3ViVHJlZSxcbiAgICAgIHVtLFxuICAgICAgbSxcbiAgICAgIGEsXG4gICAgICBwYXJlbnQsXG4gICAgICBzbG90czogeyBfXzogc2xvdENhY2hlS2V5cyB9XG4gICAgfSA9IGluc3RhbmNlO1xuICAgIGludmFsaWRhdGVNb3VudChtKTtcbiAgICBpbnZhbGlkYXRlTW91bnQoYSk7XG4gICAgaWYgKGJ1bSkge1xuICAgICAgaW52b2tlQXJyYXlGbnMoYnVtKTtcbiAgICB9XG4gICAgaWYgKHBhcmVudCAmJiBpc0FycmF5KHNsb3RDYWNoZUtleXMpKSB7XG4gICAgICBzbG90Q2FjaGVLZXlzLmZvckVhY2goKHYpID0+IHtcbiAgICAgICAgcGFyZW50LnJlbmRlckNhY2hlW3ZdID0gdm9pZCAwO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHNjb3BlLnN0b3AoKTtcbiAgICBpZiAoam9iKSB7XG4gICAgICBqb2IuZmxhZ3MgfD0gODtcbiAgICAgIHVubW91bnQoc3ViVHJlZSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XG4gICAgfVxuICAgIGlmICh1bSkge1xuICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KHVtLCBwYXJlbnRTdXNwZW5zZSk7XG4gICAgfVxuICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XG4gICAgICBpbnN0YW5jZS5pc1VubW91bnRlZCA9IHRydWU7XG4gICAgfSwgcGFyZW50U3VzcGVuc2UpO1xuICAgIGlmIChwYXJlbnRTdXNwZW5zZSAmJiBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nQnJhbmNoICYmICFwYXJlbnRTdXNwZW5zZS5pc1VubW91bnRlZCAmJiBpbnN0YW5jZS5hc3luY0RlcCAmJiAhaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCAmJiBpbnN0YW5jZS5zdXNwZW5zZUlkID09PSBwYXJlbnRTdXNwZW5zZS5wZW5kaW5nSWQpIHtcbiAgICAgIHBhcmVudFN1c3BlbnNlLmRlcHMtLTtcbiAgICAgIGlmIChwYXJlbnRTdXNwZW5zZS5kZXBzID09PSAwKSB7XG4gICAgICAgIHBhcmVudFN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAge1xuICAgICAgZGV2dG9vbHNDb21wb25lbnRSZW1vdmVkKGluc3RhbmNlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHVubW91bnRDaGlsZHJlbiA9IChjaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUgPSBmYWxzZSwgb3B0aW1pemVkID0gZmFsc2UsIHN0YXJ0ID0gMCkgPT4ge1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB1bm1vdW50KGNoaWxkcmVuW2ldLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSwgb3B0aW1pemVkKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGdldE5leHRIb3N0Tm9kZSA9ICh2bm9kZSkgPT4ge1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2KSB7XG4gICAgICByZXR1cm4gZ2V0TmV4dEhvc3ROb2RlKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlKTtcbiAgICB9XG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEyOCkge1xuICAgICAgcmV0dXJuIHZub2RlLnN1c3BlbnNlLm5leHQoKTtcbiAgICB9XG4gICAgY29uc3QgZWwgPSBob3N0TmV4dFNpYmxpbmcodm5vZGUuYW5jaG9yIHx8IHZub2RlLmVsKTtcbiAgICBjb25zdCB0ZWxlcG9ydEVuZCA9IGVsICYmIGVsW1RlbGVwb3J0RW5kS2V5XTtcbiAgICByZXR1cm4gdGVsZXBvcnRFbmQgPyBob3N0TmV4dFNpYmxpbmcodGVsZXBvcnRFbmQpIDogZWw7XG4gIH07XG4gIGxldCBpc0ZsdXNoaW5nID0gZmFsc2U7XG4gIGNvbnN0IHJlbmRlciA9ICh2bm9kZSwgY29udGFpbmVyLCBuYW1lc3BhY2UpID0+IHtcbiAgICBpZiAodm5vZGUgPT0gbnVsbCkge1xuICAgICAgaWYgKGNvbnRhaW5lci5fdm5vZGUpIHtcbiAgICAgICAgdW5tb3VudChjb250YWluZXIuX3Zub2RlLCBudWxsLCBudWxsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGF0Y2goXG4gICAgICAgIGNvbnRhaW5lci5fdm5vZGUgfHwgbnVsbCxcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbmFtZXNwYWNlXG4gICAgICApO1xuICAgIH1cbiAgICBjb250YWluZXIuX3Zub2RlID0gdm5vZGU7XG4gICAgaWYgKCFpc0ZsdXNoaW5nKSB7XG4gICAgICBpc0ZsdXNoaW5nID0gdHJ1ZTtcbiAgICAgIGZsdXNoUHJlRmx1c2hDYnMoKTtcbiAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XG4gICAgICBpc0ZsdXNoaW5nID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBjb25zdCBpbnRlcm5hbHMgPSB7XG4gICAgcDogcGF0Y2gsXG4gICAgdW06IHVubW91bnQsXG4gICAgbTogbW92ZSxcbiAgICByOiByZW1vdmUsXG4gICAgbXQ6IG1vdW50Q29tcG9uZW50LFxuICAgIG1jOiBtb3VudENoaWxkcmVuLFxuICAgIHBjOiBwYXRjaENoaWxkcmVuLFxuICAgIHBiYzogcGF0Y2hCbG9ja0NoaWxkcmVuLFxuICAgIG46IGdldE5leHRIb3N0Tm9kZSxcbiAgICBvOiBvcHRpb25zXG4gIH07XG4gIGxldCBoeWRyYXRlO1xuICBsZXQgaHlkcmF0ZU5vZGU7XG4gIGlmIChjcmVhdGVIeWRyYXRpb25GbnMpIHtcbiAgICBbaHlkcmF0ZSwgaHlkcmF0ZU5vZGVdID0gY3JlYXRlSHlkcmF0aW9uRm5zKFxuICAgICAgaW50ZXJuYWxzXG4gICAgKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHJlbmRlcixcbiAgICBoeWRyYXRlLFxuICAgIGNyZWF0ZUFwcDogY3JlYXRlQXBwQVBJKHJlbmRlciwgaHlkcmF0ZSlcbiAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDaGlsZHJlbk5hbWVzcGFjZSh7IHR5cGUsIHByb3BzIH0sIGN1cnJlbnROYW1lc3BhY2UpIHtcbiAgcmV0dXJuIGN1cnJlbnROYW1lc3BhY2UgPT09IFwic3ZnXCIgJiYgdHlwZSA9PT0gXCJmb3JlaWduT2JqZWN0XCIgfHwgY3VycmVudE5hbWVzcGFjZSA9PT0gXCJtYXRobWxcIiAmJiB0eXBlID09PSBcImFubm90YXRpb24teG1sXCIgJiYgcHJvcHMgJiYgcHJvcHMuZW5jb2RpbmcgJiYgcHJvcHMuZW5jb2RpbmcuaW5jbHVkZXMoXCJodG1sXCIpID8gdm9pZCAwIDogY3VycmVudE5hbWVzcGFjZTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZVJlY3Vyc2UoeyBlZmZlY3QsIGpvYiB9LCBhbGxvd2VkKSB7XG4gIGlmIChhbGxvd2VkKSB7XG4gICAgZWZmZWN0LmZsYWdzIHw9IDMyO1xuICAgIGpvYi5mbGFncyB8PSA0O1xuICB9IGVsc2Uge1xuICAgIGVmZmVjdC5mbGFncyAmPSAtMzM7XG4gICAgam9iLmZsYWdzICY9IC01O1xuICB9XG59XG5mdW5jdGlvbiBuZWVkVHJhbnNpdGlvbihwYXJlbnRTdXNwZW5zZSwgdHJhbnNpdGlvbikge1xuICByZXR1cm4gKCFwYXJlbnRTdXNwZW5zZSB8fCBwYXJlbnRTdXNwZW5zZSAmJiAhcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCkgJiYgdHJhbnNpdGlvbiAmJiAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQ7XG59XG5mdW5jdGlvbiB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgc2hhbGxvdyA9IGZhbHNlKSB7XG4gIGNvbnN0IGNoMSA9IG4xLmNoaWxkcmVuO1xuICBjb25zdCBjaDIgPSBuMi5jaGlsZHJlbjtcbiAgaWYgKGlzQXJyYXkoY2gxKSAmJiBpc0FycmF5KGNoMikpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoMS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYzEgPSBjaDFbaV07XG4gICAgICBsZXQgYzIgPSBjaDJbaV07XG4gICAgICBpZiAoYzIuc2hhcGVGbGFnICYgMSAmJiAhYzIuZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICAgIGlmIChjMi5wYXRjaEZsYWcgPD0gMCB8fCBjMi5wYXRjaEZsYWcgPT09IDMyKSB7XG4gICAgICAgICAgYzIgPSBjaDJbaV0gPSBjbG9uZUlmTW91bnRlZChjaDJbaV0pO1xuICAgICAgICAgIGMyLmVsID0gYzEuZWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzaGFsbG93ICYmIGMyLnBhdGNoRmxhZyAhPT0gLTIpXG4gICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihjMSwgYzIpO1xuICAgICAgfVxuICAgICAgaWYgKGMyLnR5cGUgPT09IFRleHQpIHtcbiAgICAgICAgYzIuZWwgPSBjMS5lbDtcbiAgICAgIH1cbiAgICAgIGlmIChjMi50eXBlID09PSBDb21tZW50ICYmICFjMi5lbCkge1xuICAgICAgICBjMi5lbCA9IGMxLmVsO1xuICAgICAgfVxuICAgICAge1xuICAgICAgICBjMi5lbCAmJiAoYzIuZWwuX192bm9kZSA9IGMyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFNlcXVlbmNlKGFycikge1xuICBjb25zdCBwID0gYXJyLnNsaWNlKCk7XG4gIGNvbnN0IHJlc3VsdCA9IFswXTtcbiAgbGV0IGksIGosIHUsIHYsIGM7XG4gIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGNvbnN0IGFyckkgPSBhcnJbaV07XG4gICAgaWYgKGFyckkgIT09IDApIHtcbiAgICAgIGogPSByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGFycltqXSA8IGFyckkpIHtcbiAgICAgICAgcFtpXSA9IGo7XG4gICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHUgPSAwO1xuICAgICAgdiA9IHJlc3VsdC5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKHUgPCB2KSB7XG4gICAgICAgIGMgPSB1ICsgdiA+PiAxO1xuICAgICAgICBpZiAoYXJyW3Jlc3VsdFtjXV0gPCBhcnJJKSB7XG4gICAgICAgICAgdSA9IGMgKyAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHYgPSBjO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYXJySSA8IGFycltyZXN1bHRbdV1dKSB7XG4gICAgICAgIGlmICh1ID4gMCkge1xuICAgICAgICAgIHBbaV0gPSByZXN1bHRbdSAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFt1XSA9IGk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHUgPSByZXN1bHQubGVuZ3RoO1xuICB2ID0gcmVzdWx0W3UgLSAxXTtcbiAgd2hpbGUgKHUtLSA+IDApIHtcbiAgICByZXN1bHRbdV0gPSB2O1xuICAgIHYgPSBwW3ZdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBsb2NhdGVOb25IeWRyYXRlZEFzeW5jUm9vdChpbnN0YW5jZSkge1xuICBjb25zdCBzdWJDb21wb25lbnQgPSBpbnN0YW5jZS5zdWJUcmVlLmNvbXBvbmVudDtcbiAgaWYgKHN1YkNvbXBvbmVudCkge1xuICAgIGlmIChzdWJDb21wb25lbnQuYXN5bmNEZXAgJiYgIXN1YkNvbXBvbmVudC5hc3luY1Jlc29sdmVkKSB7XG4gICAgICByZXR1cm4gc3ViQ29tcG9uZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbG9jYXRlTm9uSHlkcmF0ZWRBc3luY1Jvb3Qoc3ViQ29tcG9uZW50KTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGludmFsaWRhdGVNb3VudChob29rcykge1xuICBpZiAoaG9va3MpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKVxuICAgICAgaG9va3NbaV0uZmxhZ3MgfD0gODtcbiAgfVxufVxuXG5jb25zdCBzc3JDb250ZXh0S2V5ID0gU3ltYm9sLmZvcihcInYtc2N4XCIpO1xuY29uc3QgdXNlU1NSQ29udGV4dCA9ICgpID0+IHtcbiAge1xuICAgIGNvbnN0IGN0eCA9IGluamVjdChzc3JDb250ZXh0S2V5KTtcbiAgICBpZiAoIWN0eCkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgU2VydmVyIHJlbmRlcmluZyBjb250ZXh0IG5vdCBwcm92aWRlZC4gTWFrZSBzdXJlIHRvIG9ubHkgY2FsbCB1c2VTU1JDb250ZXh0KCkgY29uZGl0aW9uYWxseSBpbiB0aGUgc2VydmVyIGJ1aWxkLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjdHg7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHdhdGNoRWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xuICByZXR1cm4gZG9XYXRjaChlZmZlY3QsIG51bGwsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gd2F0Y2hQb3N0RWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xuICByZXR1cm4gZG9XYXRjaChcbiAgICBlZmZlY3QsXG4gICAgbnVsbCxcbiAgICBleHRlbmQoe30sIG9wdGlvbnMsIHsgZmx1c2g6IFwicG9zdFwiIH0pIFxuICApO1xufVxuZnVuY3Rpb24gd2F0Y2hTeW5jRWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xuICByZXR1cm4gZG9XYXRjaChcbiAgICBlZmZlY3QsXG4gICAgbnVsbCxcbiAgICBleHRlbmQoe30sIG9wdGlvbnMsIHsgZmx1c2g6IFwic3luY1wiIH0pIFxuICApO1xufVxuZnVuY3Rpb24gd2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucykge1xuICBpZiAoIWlzRnVuY3Rpb24oY2IpKSB7XG4gICAgd2FybiQxKFxuICAgICAgYFxcYHdhdGNoKGZuLCBvcHRpb25zPylcXGAgc2lnbmF0dXJlIGhhcyBiZWVuIG1vdmVkIHRvIGEgc2VwYXJhdGUgQVBJLiBVc2UgXFxgd2F0Y2hFZmZlY3QoZm4sIG9wdGlvbnM/KVxcYCBpbnN0ZWFkLiBcXGB3YXRjaFxcYCBub3cgb25seSBzdXBwb3J0cyBcXGB3YXRjaChzb3VyY2UsIGNiLCBvcHRpb25zPykgc2lnbmF0dXJlLmBcbiAgICApO1xuICB9XG4gIHJldHVybiBkb1dhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZG9XYXRjaChzb3VyY2UsIGNiLCBvcHRpb25zID0gRU1QVFlfT0JKKSB7XG4gIGNvbnN0IHsgaW1tZWRpYXRlLCBkZWVwLCBmbHVzaCwgb25jZSB9ID0gb3B0aW9ucztcbiAgaWYgKCFjYikge1xuICAgIGlmIChpbW1lZGlhdGUgIT09IHZvaWQgMCkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgd2F0Y2goKSBcImltbWVkaWF0ZVwiIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIHRoZSB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmBcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChkZWVwICE9PSB2b2lkIDApIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYHdhdGNoKCkgXCJkZWVwXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG9uY2UgIT09IHZvaWQgMCkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgd2F0Y2goKSBcIm9uY2VcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgd2F0Y2goc291cmNlLCBjYWxsYmFjaywgb3B0aW9ucz8pIHNpZ25hdHVyZS5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb25zdCBiYXNlV2F0Y2hPcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgYmFzZVdhdGNoT3B0aW9ucy5vbldhcm4gPSB3YXJuJDE7XG4gIGNvbnN0IHJ1bnNJbW1lZGlhdGVseSA9IGNiICYmIGltbWVkaWF0ZSB8fCAhY2IgJiYgZmx1c2ggIT09IFwicG9zdFwiO1xuICBsZXQgc3NyQ2xlYW51cDtcbiAgaWYgKGlzSW5TU1JDb21wb25lbnRTZXR1cCkge1xuICAgIGlmIChmbHVzaCA9PT0gXCJzeW5jXCIpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHVzZVNTUkNvbnRleHQoKTtcbiAgICAgIHNzckNsZWFudXAgPSBjdHguX193YXRjaGVySGFuZGxlcyB8fCAoY3R4Ll9fd2F0Y2hlckhhbmRsZXMgPSBbXSk7XG4gICAgfSBlbHNlIGlmICghcnVuc0ltbWVkaWF0ZWx5KSB7XG4gICAgICBjb25zdCB3YXRjaFN0b3BIYW5kbGUgPSAoKSA9PiB7XG4gICAgICB9O1xuICAgICAgd2F0Y2hTdG9wSGFuZGxlLnN0b3AgPSBOT09QO1xuICAgICAgd2F0Y2hTdG9wSGFuZGxlLnJlc3VtZSA9IE5PT1A7XG4gICAgICB3YXRjaFN0b3BIYW5kbGUucGF1c2UgPSBOT09QO1xuICAgICAgcmV0dXJuIHdhdGNoU3RvcEhhbmRsZTtcbiAgICB9XG4gIH1cbiAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2U7XG4gIGJhc2VXYXRjaE9wdGlvbnMuY2FsbCA9IChmbiwgdHlwZSwgYXJncykgPT4gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKTtcbiAgbGV0IGlzUHJlID0gZmFsc2U7XG4gIGlmIChmbHVzaCA9PT0gXCJwb3N0XCIpIHtcbiAgICBiYXNlV2F0Y2hPcHRpb25zLnNjaGVkdWxlciA9IChqb2IpID0+IHtcbiAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChqb2IsIGluc3RhbmNlICYmIGluc3RhbmNlLnN1c3BlbnNlKTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKGZsdXNoICE9PSBcInN5bmNcIikge1xuICAgIGlzUHJlID0gdHJ1ZTtcbiAgICBiYXNlV2F0Y2hPcHRpb25zLnNjaGVkdWxlciA9IChqb2IsIGlzRmlyc3RSdW4pID0+IHtcbiAgICAgIGlmIChpc0ZpcnN0UnVuKSB7XG4gICAgICAgIGpvYigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVKb2Ioam9iKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGJhc2VXYXRjaE9wdGlvbnMuYXVnbWVudEpvYiA9IChqb2IpID0+IHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGpvYi5mbGFncyB8PSA0O1xuICAgIH1cbiAgICBpZiAoaXNQcmUpIHtcbiAgICAgIGpvYi5mbGFncyB8PSAyO1xuICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgIGpvYi5pZCA9IGluc3RhbmNlLnVpZDtcbiAgICAgICAgam9iLmkgPSBpbnN0YW5jZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHdhdGNoSGFuZGxlID0gd2F0Y2gkMShzb3VyY2UsIGNiLCBiYXNlV2F0Y2hPcHRpb25zKTtcbiAgaWYgKGlzSW5TU1JDb21wb25lbnRTZXR1cCkge1xuICAgIGlmIChzc3JDbGVhbnVwKSB7XG4gICAgICBzc3JDbGVhbnVwLnB1c2god2F0Y2hIYW5kbGUpO1xuICAgIH0gZWxzZSBpZiAocnVuc0ltbWVkaWF0ZWx5KSB7XG4gICAgICB3YXRjaEhhbmRsZSgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gd2F0Y2hIYW5kbGU7XG59XG5mdW5jdGlvbiBpbnN0YW5jZVdhdGNoKHNvdXJjZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgY29uc3QgcHVibGljVGhpcyA9IHRoaXMucHJveHk7XG4gIGNvbnN0IGdldHRlciA9IGlzU3RyaW5nKHNvdXJjZSkgPyBzb3VyY2UuaW5jbHVkZXMoXCIuXCIpID8gY3JlYXRlUGF0aEdldHRlcihwdWJsaWNUaGlzLCBzb3VyY2UpIDogKCkgPT4gcHVibGljVGhpc1tzb3VyY2VdIDogc291cmNlLmJpbmQocHVibGljVGhpcywgcHVibGljVGhpcyk7XG4gIGxldCBjYjtcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgY2IgPSB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICBjYiA9IHZhbHVlLmhhbmRsZXI7XG4gICAgb3B0aW9ucyA9IHZhbHVlO1xuICB9XG4gIGNvbnN0IHJlc2V0ID0gc2V0Q3VycmVudEluc3RhbmNlKHRoaXMpO1xuICBjb25zdCByZXMgPSBkb1dhdGNoKGdldHRlciwgY2IuYmluZChwdWJsaWNUaGlzKSwgb3B0aW9ucyk7XG4gIHJlc2V0KCk7XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoR2V0dGVyKGN0eCwgcGF0aCkge1xuICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIuXCIpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGxldCBjdXIgPSBjdHg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGggJiYgY3VyOyBpKyspIHtcbiAgICAgIGN1ciA9IGN1cltzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBjdXI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVzZU1vZGVsKHByb3BzLCBuYW1lLCBvcHRpb25zID0gRU1QVFlfT0JKKSB7XG4gIGNvbnN0IGkgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgaWYgKCFpKSB7XG4gICAgd2FybiQxKGB1c2VNb2RlbCgpIGNhbGxlZCB3aXRob3V0IGFjdGl2ZSBpbnN0YW5jZS5gKTtcbiAgICByZXR1cm4gcmVmKCk7XG4gIH1cbiAgY29uc3QgY2FtZWxpemVkTmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICBpZiAoIWkucHJvcHNPcHRpb25zWzBdW2NhbWVsaXplZE5hbWVdKSB7XG4gICAgd2FybiQxKGB1c2VNb2RlbCgpIGNhbGxlZCB3aXRoIHByb3AgXCIke25hbWV9XCIgd2hpY2ggaXMgbm90IGRlY2xhcmVkLmApO1xuICAgIHJldHVybiByZWYoKTtcbiAgfVxuICBjb25zdCBoeXBoZW5hdGVkTmFtZSA9IGh5cGhlbmF0ZShuYW1lKTtcbiAgY29uc3QgbW9kaWZpZXJzID0gZ2V0TW9kZWxNb2RpZmllcnMocHJvcHMsIGNhbWVsaXplZE5hbWUpO1xuICBjb25zdCByZXMgPSBjdXN0b21SZWYoKHRyYWNrLCB0cmlnZ2VyKSA9PiB7XG4gICAgbGV0IGxvY2FsVmFsdWU7XG4gICAgbGV0IHByZXZTZXRWYWx1ZSA9IEVNUFRZX09CSjtcbiAgICBsZXQgcHJldkVtaXR0ZWRWYWx1ZTtcbiAgICB3YXRjaFN5bmNFZmZlY3QoKCkgPT4ge1xuICAgICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbY2FtZWxpemVkTmFtZV07XG4gICAgICBpZiAoaGFzQ2hhbmdlZChsb2NhbFZhbHVlLCBwcm9wVmFsdWUpKSB7XG4gICAgICAgIGxvY2FsVmFsdWUgPSBwcm9wVmFsdWU7XG4gICAgICAgIHRyaWdnZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0KCkge1xuICAgICAgICB0cmFjaygpO1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5nZXQgPyBvcHRpb25zLmdldChsb2NhbFZhbHVlKSA6IGxvY2FsVmFsdWU7XG4gICAgICB9LFxuICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGVtaXR0ZWRWYWx1ZSA9IG9wdGlvbnMuc2V0ID8gb3B0aW9ucy5zZXQodmFsdWUpIDogdmFsdWU7XG4gICAgICAgIGlmICghaGFzQ2hhbmdlZChlbWl0dGVkVmFsdWUsIGxvY2FsVmFsdWUpICYmICEocHJldlNldFZhbHVlICE9PSBFTVBUWV9PQkogJiYgaGFzQ2hhbmdlZCh2YWx1ZSwgcHJldlNldFZhbHVlKSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmF3UHJvcHMgPSBpLnZub2RlLnByb3BzO1xuICAgICAgICBpZiAoIShyYXdQcm9wcyAmJiAvLyBjaGVjayBpZiBwYXJlbnQgaGFzIHBhc3NlZCB2LW1vZGVsXG4gICAgICAgIChuYW1lIGluIHJhd1Byb3BzIHx8IGNhbWVsaXplZE5hbWUgaW4gcmF3UHJvcHMgfHwgaHlwaGVuYXRlZE5hbWUgaW4gcmF3UHJvcHMpICYmIChgb25VcGRhdGU6JHtuYW1lfWAgaW4gcmF3UHJvcHMgfHwgYG9uVXBkYXRlOiR7Y2FtZWxpemVkTmFtZX1gIGluIHJhd1Byb3BzIHx8IGBvblVwZGF0ZToke2h5cGhlbmF0ZWROYW1lfWAgaW4gcmF3UHJvcHMpKSkge1xuICAgICAgICAgIGxvY2FsVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICB0cmlnZ2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaS5lbWl0KGB1cGRhdGU6JHtuYW1lfWAsIGVtaXR0ZWRWYWx1ZSk7XG4gICAgICAgIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBlbWl0dGVkVmFsdWUpICYmIGhhc0NoYW5nZWQodmFsdWUsIHByZXZTZXRWYWx1ZSkgJiYgIWhhc0NoYW5nZWQoZW1pdHRlZFZhbHVlLCBwcmV2RW1pdHRlZFZhbHVlKSkge1xuICAgICAgICAgIHRyaWdnZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2U2V0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcHJldkVtaXR0ZWRWYWx1ZSA9IGVtaXR0ZWRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgcmVzW1N5bWJvbC5pdGVyYXRvcl0gPSAoKSA9PiB7XG4gICAgbGV0IGkyID0gMDtcbiAgICByZXR1cm4ge1xuICAgICAgbmV4dCgpIHtcbiAgICAgICAgaWYgKGkyIDwgMikge1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBpMisrID8gbW9kaWZpZXJzIHx8IEVNUFRZX09CSiA6IHJlcywgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICByZXR1cm4gcmVzO1xufVxuY29uc3QgZ2V0TW9kZWxNb2RpZmllcnMgPSAocHJvcHMsIG1vZGVsTmFtZSkgPT4ge1xuICByZXR1cm4gbW9kZWxOYW1lID09PSBcIm1vZGVsVmFsdWVcIiB8fCBtb2RlbE5hbWUgPT09IFwibW9kZWwtdmFsdWVcIiA/IHByb3BzLm1vZGVsTW9kaWZpZXJzIDogcHJvcHNbYCR7bW9kZWxOYW1lfU1vZGlmaWVyc2BdIHx8IHByb3BzW2Ake2NhbWVsaXplKG1vZGVsTmFtZSl9TW9kaWZpZXJzYF0gfHwgcHJvcHNbYCR7aHlwaGVuYXRlKG1vZGVsTmFtZSl9TW9kaWZpZXJzYF07XG59O1xuXG5mdW5jdGlvbiBlbWl0KGluc3RhbmNlLCBldmVudCwgLi4ucmF3QXJncykge1xuICBpZiAoaW5zdGFuY2UuaXNVbm1vdW50ZWQpIHJldHVybjtcbiAgY29uc3QgcHJvcHMgPSBpbnN0YW5jZS52bm9kZS5wcm9wcyB8fCBFTVBUWV9PQko7XG4gIHtcbiAgICBjb25zdCB7XG4gICAgICBlbWl0c09wdGlvbnMsXG4gICAgICBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdXG4gICAgfSA9IGluc3RhbmNlO1xuICAgIGlmIChlbWl0c09wdGlvbnMpIHtcbiAgICAgIGlmICghKGV2ZW50IGluIGVtaXRzT3B0aW9ucykgJiYgdHJ1ZSkge1xuICAgICAgICBpZiAoIXByb3BzT3B0aW9ucyB8fCAhKHRvSGFuZGxlcktleShjYW1lbGl6ZShldmVudCkpIGluIHByb3BzT3B0aW9ucykpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgQ29tcG9uZW50IGVtaXR0ZWQgZXZlbnQgXCIke2V2ZW50fVwiIGJ1dCBpdCBpcyBuZWl0aGVyIGRlY2xhcmVkIGluIHRoZSBlbWl0cyBvcHRpb24gbm9yIGFzIGFuIFwiJHt0b0hhbmRsZXJLZXkoY2FtZWxpemUoZXZlbnQpKX1cIiBwcm9wLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBlbWl0c09wdGlvbnNbZXZlbnRdO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWxpZGF0b3IpKSB7XG4gICAgICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRvciguLi5yYXdBcmdzKTtcbiAgICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgICAgYEludmFsaWQgZXZlbnQgYXJndW1lbnRzOiBldmVudCB2YWxpZGF0aW9uIGZhaWxlZCBmb3IgZXZlbnQgXCIke2V2ZW50fVwiLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxldCBhcmdzID0gcmF3QXJncztcbiAgY29uc3QgaXNNb2RlbExpc3RlbmVyID0gZXZlbnQuc3RhcnRzV2l0aChcInVwZGF0ZTpcIik7XG4gIGNvbnN0IG1vZGlmaWVycyA9IGlzTW9kZWxMaXN0ZW5lciAmJiBnZXRNb2RlbE1vZGlmaWVycyhwcm9wcywgZXZlbnQuc2xpY2UoNykpO1xuICBpZiAobW9kaWZpZXJzKSB7XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICBhcmdzID0gcmF3QXJncy5tYXAoKGEpID0+IGlzU3RyaW5nKGEpID8gYS50cmltKCkgOiBhKTtcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIGFyZ3MgPSByYXdBcmdzLm1hcChsb29zZVRvTnVtYmVyKTtcbiAgICB9XG4gIH1cbiAge1xuICAgIGRldnRvb2xzQ29tcG9uZW50RW1pdChpbnN0YW5jZSwgZXZlbnQsIGFyZ3MpO1xuICB9XG4gIHtcbiAgICBjb25zdCBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiBwcm9wc1t0b0hhbmRsZXJLZXkobG93ZXJDYXNlRXZlbnQpXSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgRXZlbnQgXCIke2xvd2VyQ2FzZUV2ZW50fVwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50ICR7Zm9ybWF0Q29tcG9uZW50TmFtZShcbiAgICAgICAgICBpbnN0YW5jZSxcbiAgICAgICAgICBpbnN0YW5jZS50eXBlXG4gICAgICAgICl9IGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcIiR7ZXZlbnR9XCIuIE5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIHYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcIiR7aHlwaGVuYXRlKFxuICAgICAgICAgIGV2ZW50XG4gICAgICAgICl9XCIgaW5zdGVhZCBvZiBcIiR7ZXZlbnR9XCIuYFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgbGV0IGhhbmRsZXJOYW1lO1xuICBsZXQgaGFuZGxlciA9IHByb3BzW2hhbmRsZXJOYW1lID0gdG9IYW5kbGVyS2V5KGV2ZW50KV0gfHwgLy8gYWxzbyB0cnkgY2FtZWxDYXNlIGV2ZW50IGhhbmRsZXIgKCMyMjQ5KVxuICBwcm9wc1toYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShjYW1lbGl6ZShldmVudCkpXTtcbiAgaWYgKCFoYW5kbGVyICYmIGlzTW9kZWxMaXN0ZW5lcikge1xuICAgIGhhbmRsZXIgPSBwcm9wc1toYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShoeXBoZW5hdGUoZXZlbnQpKV07XG4gIH1cbiAgaWYgKGhhbmRsZXIpIHtcbiAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhcbiAgICAgIGhhbmRsZXIsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDYsXG4gICAgICBhcmdzXG4gICAgKTtcbiAgfVxuICBjb25zdCBvbmNlSGFuZGxlciA9IHByb3BzW2hhbmRsZXJOYW1lICsgYE9uY2VgXTtcbiAgaWYgKG9uY2VIYW5kbGVyKSB7XG4gICAgaWYgKCFpbnN0YW5jZS5lbWl0dGVkKSB7XG4gICAgICBpbnN0YW5jZS5lbWl0dGVkID0ge307XG4gICAgfSBlbHNlIGlmIChpbnN0YW5jZS5lbWl0dGVkW2hhbmRsZXJOYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnN0YW5jZS5lbWl0dGVkW2hhbmRsZXJOYW1lXSA9IHRydWU7XG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoXG4gICAgICBvbmNlSGFuZGxlcixcbiAgICAgIGluc3RhbmNlLFxuICAgICAgNixcbiAgICAgIGFyZ3NcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBub3JtYWxpemVFbWl0c09wdGlvbnMoY29tcCwgYXBwQ29udGV4dCwgYXNNaXhpbiA9IGZhbHNlKSB7XG4gIGNvbnN0IGNhY2hlID0gYXBwQ29udGV4dC5lbWl0c0NhY2hlO1xuICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoY29tcCk7XG4gIGlmIChjYWNoZWQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiBjYWNoZWQ7XG4gIH1cbiAgY29uc3QgcmF3ID0gY29tcC5lbWl0cztcbiAgbGV0IG5vcm1hbGl6ZWQgPSB7fTtcbiAgbGV0IGhhc0V4dGVuZHMgPSBmYWxzZTtcbiAgaWYgKCFpc0Z1bmN0aW9uKGNvbXApKSB7XG4gICAgY29uc3QgZXh0ZW5kRW1pdHMgPSAocmF3MikgPT4ge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEZyb21FeHRlbmQgPSBub3JtYWxpemVFbWl0c09wdGlvbnMocmF3MiwgYXBwQ29udGV4dCwgdHJ1ZSk7XG4gICAgICBpZiAobm9ybWFsaXplZEZyb21FeHRlbmQpIHtcbiAgICAgICAgaGFzRXh0ZW5kcyA9IHRydWU7XG4gICAgICAgIGV4dGVuZChub3JtYWxpemVkLCBub3JtYWxpemVkRnJvbUV4dGVuZCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoIWFzTWl4aW4gJiYgYXBwQ29udGV4dC5taXhpbnMubGVuZ3RoKSB7XG4gICAgICBhcHBDb250ZXh0Lm1peGlucy5mb3JFYWNoKGV4dGVuZEVtaXRzKTtcbiAgICB9XG4gICAgaWYgKGNvbXAuZXh0ZW5kcykge1xuICAgICAgZXh0ZW5kRW1pdHMoY29tcC5leHRlbmRzKTtcbiAgICB9XG4gICAgaWYgKGNvbXAubWl4aW5zKSB7XG4gICAgICBjb21wLm1peGlucy5mb3JFYWNoKGV4dGVuZEVtaXRzKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFyYXcgJiYgIWhhc0V4dGVuZHMpIHtcbiAgICBpZiAoaXNPYmplY3QoY29tcCkpIHtcbiAgICAgIGNhY2hlLnNldChjb21wLCBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGlzQXJyYXkocmF3KSkge1xuICAgIHJhdy5mb3JFYWNoKChrZXkpID0+IG5vcm1hbGl6ZWRba2V5XSA9IG51bGwpO1xuICB9IGVsc2Uge1xuICAgIGV4dGVuZChub3JtYWxpemVkLCByYXcpO1xuICB9XG4gIGlmIChpc09iamVjdChjb21wKSkge1xuICAgIGNhY2hlLnNldChjb21wLCBub3JtYWxpemVkKTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZDtcbn1cbmZ1bmN0aW9uIGlzRW1pdExpc3RlbmVyKG9wdGlvbnMsIGtleSkge1xuICBpZiAoIW9wdGlvbnMgfHwgIWlzT24oa2V5KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBrZXkgPSBrZXkuc2xpY2UoMikucmVwbGFjZSgvT25jZSQvLCBcIlwiKTtcbiAgcmV0dXJuIGhhc093bihvcHRpb25zLCBrZXlbMF0udG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgxKSkgfHwgaGFzT3duKG9wdGlvbnMsIGh5cGhlbmF0ZShrZXkpKSB8fCBoYXNPd24ob3B0aW9ucywga2V5KTtcbn1cblxubGV0IGFjY2Vzc2VkQXR0cnMgPSBmYWxzZTtcbmZ1bmN0aW9uIG1hcmtBdHRyc0FjY2Vzc2VkKCkge1xuICBhY2Nlc3NlZEF0dHJzID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpIHtcbiAgY29uc3Qge1xuICAgIHR5cGU6IENvbXBvbmVudCxcbiAgICB2bm9kZSxcbiAgICBwcm94eSxcbiAgICB3aXRoUHJveHksXG4gICAgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSxcbiAgICBzbG90cyxcbiAgICBhdHRycyxcbiAgICBlbWl0LFxuICAgIHJlbmRlcixcbiAgICByZW5kZXJDYWNoZSxcbiAgICBwcm9wcyxcbiAgICBkYXRhLFxuICAgIHNldHVwU3RhdGUsXG4gICAgY3R4LFxuICAgIGluaGVyaXRBdHRyc1xuICB9ID0gaW5zdGFuY2U7XG4gIGNvbnN0IHByZXYgPSBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpO1xuICBsZXQgcmVzdWx0O1xuICBsZXQgZmFsbHRocm91Z2hBdHRycztcbiAge1xuICAgIGFjY2Vzc2VkQXR0cnMgPSBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA0KSB7XG4gICAgICBjb25zdCBwcm94eVRvVXNlID0gd2l0aFByb3h5IHx8IHByb3h5O1xuICAgICAgY29uc3QgdGhpc1Byb3h5ID0gc2V0dXBTdGF0ZS5fX2lzU2NyaXB0U2V0dXAgPyBuZXcgUHJveHkocHJveHlUb1VzZSwge1xuICAgICAgICBnZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYFByb3BlcnR5ICcke1N0cmluZyhcbiAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICApfScgd2FzIGFjY2Vzc2VkIHZpYSAndGhpcycuIEF2b2lkIHVzaW5nICd0aGlzJyBpbiB0ZW1wbGF0ZXMuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcik7XG4gICAgICAgIH1cbiAgICAgIH0pIDogcHJveHlUb1VzZTtcbiAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKFxuICAgICAgICByZW5kZXIuY2FsbChcbiAgICAgICAgICB0aGlzUHJveHksXG4gICAgICAgICAgcHJveHlUb1VzZSxcbiAgICAgICAgICByZW5kZXJDYWNoZSxcbiAgICAgICAgICB0cnVlID8gc2hhbGxvd1JlYWRvbmx5KHByb3BzKSA6IHByb3BzLFxuICAgICAgICAgIHNldHVwU3RhdGUsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBjdHhcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBhdHRycztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVuZGVyMiA9IENvbXBvbmVudDtcbiAgICAgIGlmIChhdHRycyA9PT0gcHJvcHMpIHtcbiAgICAgICAgbWFya0F0dHJzQWNjZXNzZWQoKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKFxuICAgICAgICByZW5kZXIyLmxlbmd0aCA+IDEgPyByZW5kZXIyKFxuICAgICAgICAgIHRydWUgPyBzaGFsbG93UmVhZG9ubHkocHJvcHMpIDogcHJvcHMsXG4gICAgICAgICAgdHJ1ZSA/IHtcbiAgICAgICAgICAgIGdldCBhdHRycygpIHtcbiAgICAgICAgICAgICAgbWFya0F0dHJzQWNjZXNzZWQoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHNoYWxsb3dSZWFkb25seShhdHRycyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2xvdHMsXG4gICAgICAgICAgICBlbWl0XG4gICAgICAgICAgfSA6IHsgYXR0cnMsIHNsb3RzLCBlbWl0IH1cbiAgICAgICAgKSA6IHJlbmRlcjIoXG4gICAgICAgICAgdHJ1ZSA/IHNoYWxsb3dSZWFkb25seShwcm9wcykgOiBwcm9wcyxcbiAgICAgICAgICBudWxsXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICBmYWxsdGhyb3VnaEF0dHJzID0gQ29tcG9uZW50LnByb3BzID8gYXR0cnMgOiBnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2goYXR0cnMpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgYmxvY2tTdGFjay5sZW5ndGggPSAwO1xuICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIDEpO1xuICAgIHJlc3VsdCA9IGNyZWF0ZVZOb2RlKENvbW1lbnQpO1xuICB9XG4gIGxldCByb290ID0gcmVzdWx0O1xuICBsZXQgc2V0Um9vdCA9IHZvaWQgMDtcbiAgaWYgKHJlc3VsdC5wYXRjaEZsYWcgPiAwICYmIHJlc3VsdC5wYXRjaEZsYWcgJiAyMDQ4KSB7XG4gICAgW3Jvb3QsIHNldFJvb3RdID0gZ2V0Q2hpbGRSb290KHJlc3VsdCk7XG4gIH1cbiAgaWYgKGZhbGx0aHJvdWdoQXR0cnMgJiYgaW5oZXJpdEF0dHJzICE9PSBmYWxzZSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhmYWxsdGhyb3VnaEF0dHJzKTtcbiAgICBjb25zdCB7IHNoYXBlRmxhZyB9ID0gcm9vdDtcbiAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzaGFwZUZsYWcgJiAoMSB8IDYpKSB7XG4gICAgICAgIGlmIChwcm9wc09wdGlvbnMgJiYga2V5cy5zb21lKGlzTW9kZWxMaXN0ZW5lcikpIHtcbiAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzID0gZmlsdGVyTW9kZWxMaXN0ZW5lcnMoXG4gICAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzLFxuICAgICAgICAgICAgcHJvcHNPcHRpb25zXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByb290ID0gY2xvbmVWTm9kZShyb290LCBmYWxsdGhyb3VnaEF0dHJzLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKCFhY2Nlc3NlZEF0dHJzICYmIHJvb3QudHlwZSAhPT0gQ29tbWVudCkge1xuICAgICAgICBjb25zdCBhbGxBdHRycyA9IE9iamVjdC5rZXlzKGF0dHJzKTtcbiAgICAgICAgY29uc3QgZXZlbnRBdHRycyA9IFtdO1xuICAgICAgICBjb25zdCBleHRyYUF0dHJzID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYWxsQXR0cnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gYWxsQXR0cnNbaV07XG4gICAgICAgICAgaWYgKGlzT24oa2V5KSkge1xuICAgICAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSkge1xuICAgICAgICAgICAgICBldmVudEF0dHJzLnB1c2goa2V5WzJdLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleHRyYUF0dHJzLnB1c2goa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4dHJhQXR0cnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYEV4dHJhbmVvdXMgbm9uLXByb3BzIGF0dHJpYnV0ZXMgKCR7ZXh0cmFBdHRycy5qb2luKFwiLCBcIil9KSB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBiZWNhdXNlIGNvbXBvbmVudCByZW5kZXJzIGZyYWdtZW50IG9yIHRleHQgb3IgdGVsZXBvcnQgcm9vdCBub2Rlcy5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnRBdHRycy5sZW5ndGgpIHtcbiAgICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgICBgRXh0cmFuZW91cyBub24tZW1pdHMgZXZlbnQgbGlzdGVuZXJzICgke2V2ZW50QXR0cnMuam9pbihcIiwgXCIpfSkgd2VyZSBwYXNzZWQgdG8gY29tcG9uZW50IGJ1dCBjb3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBpbmhlcml0ZWQgYmVjYXVzZSBjb21wb25lbnQgcmVuZGVycyBmcmFnbWVudCBvciB0ZXh0IHJvb3Qgbm9kZXMuIElmIHRoZSBsaXN0ZW5lciBpcyBpbnRlbmRlZCB0byBiZSBhIGNvbXBvbmVudCBjdXN0b20gZXZlbnQgbGlzdGVuZXIgb25seSwgZGVjbGFyZSBpdCB1c2luZyB0aGUgXCJlbWl0c1wiIG9wdGlvbi5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodm5vZGUuZGlycykge1xuICAgIGlmICghaXNFbGVtZW50Um9vdChyb290KSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgUnVudGltZSBkaXJlY3RpdmUgdXNlZCBvbiBjb21wb25lbnQgd2l0aCBub24tZWxlbWVudCByb290IG5vZGUuIFRoZSBkaXJlY3RpdmVzIHdpbGwgbm90IGZ1bmN0aW9uIGFzIGludGVuZGVkLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHJvb3QgPSBjbG9uZVZOb2RlKHJvb3QsIG51bGwsIGZhbHNlLCB0cnVlKTtcbiAgICByb290LmRpcnMgPSByb290LmRpcnMgPyByb290LmRpcnMuY29uY2F0KHZub2RlLmRpcnMpIDogdm5vZGUuZGlycztcbiAgfVxuICBpZiAodm5vZGUudHJhbnNpdGlvbikge1xuICAgIGlmICghaXNFbGVtZW50Um9vdChyb290KSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgQ29tcG9uZW50IGluc2lkZSA8VHJhbnNpdGlvbj4gcmVuZGVycyBub24tZWxlbWVudCByb290IG5vZGUgdGhhdCBjYW5ub3QgYmUgYW5pbWF0ZWQuYFxuICAgICAgKTtcbiAgICB9XG4gICAgc2V0VHJhbnNpdGlvbkhvb2tzKHJvb3QsIHZub2RlLnRyYW5zaXRpb24pO1xuICB9XG4gIGlmIChzZXRSb290KSB7XG4gICAgc2V0Um9vdChyb290KTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSByb290O1xuICB9XG4gIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmNvbnN0IGdldENoaWxkUm9vdCA9ICh2bm9kZSkgPT4ge1xuICBjb25zdCByYXdDaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICBjb25zdCBkeW5hbWljQ2hpbGRyZW4gPSB2bm9kZS5keW5hbWljQ2hpbGRyZW47XG4gIGNvbnN0IGNoaWxkUm9vdCA9IGZpbHRlclNpbmdsZVJvb3QocmF3Q2hpbGRyZW4sIGZhbHNlKTtcbiAgaWYgKCFjaGlsZFJvb3QpIHtcbiAgICByZXR1cm4gW3Zub2RlLCB2b2lkIDBdO1xuICB9IGVsc2UgaWYgKGNoaWxkUm9vdC5wYXRjaEZsYWcgPiAwICYmIGNoaWxkUm9vdC5wYXRjaEZsYWcgJiAyMDQ4KSB7XG4gICAgcmV0dXJuIGdldENoaWxkUm9vdChjaGlsZFJvb3QpO1xuICB9XG4gIGNvbnN0IGluZGV4ID0gcmF3Q2hpbGRyZW4uaW5kZXhPZihjaGlsZFJvb3QpO1xuICBjb25zdCBkeW5hbWljSW5kZXggPSBkeW5hbWljQ2hpbGRyZW4gPyBkeW5hbWljQ2hpbGRyZW4uaW5kZXhPZihjaGlsZFJvb3QpIDogLTE7XG4gIGNvbnN0IHNldFJvb3QgPSAodXBkYXRlZFJvb3QpID0+IHtcbiAgICByYXdDaGlsZHJlbltpbmRleF0gPSB1cGRhdGVkUm9vdDtcbiAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XG4gICAgICBpZiAoZHluYW1pY0luZGV4ID4gLTEpIHtcbiAgICAgICAgZHluYW1pY0NoaWxkcmVuW2R5bmFtaWNJbmRleF0gPSB1cGRhdGVkUm9vdDtcbiAgICAgIH0gZWxzZSBpZiAodXBkYXRlZFJvb3QucGF0Y2hGbGFnID4gMCkge1xuICAgICAgICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBbLi4uZHluYW1pY0NoaWxkcmVuLCB1cGRhdGVkUm9vdF07XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gW25vcm1hbGl6ZVZOb2RlKGNoaWxkUm9vdCksIHNldFJvb3RdO1xufTtcbmZ1bmN0aW9uIGZpbHRlclNpbmdsZVJvb3QoY2hpbGRyZW4sIHJlY3Vyc2UgPSB0cnVlKSB7XG4gIGxldCBzaW5nbGVSb290O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoaXNWTm9kZShjaGlsZCkpIHtcbiAgICAgIGlmIChjaGlsZC50eXBlICE9PSBDb21tZW50IHx8IGNoaWxkLmNoaWxkcmVuID09PSBcInYtaWZcIikge1xuICAgICAgICBpZiAoc2luZ2xlUm9vdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaW5nbGVSb290ID0gY2hpbGQ7XG4gICAgICAgICAgaWYgKHJlY3Vyc2UgJiYgc2luZ2xlUm9vdC5wYXRjaEZsYWcgPiAwICYmIHNpbmdsZVJvb3QucGF0Y2hGbGFnICYgMjA0OCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpbHRlclNpbmdsZVJvb3Qoc2luZ2xlUm9vdC5jaGlsZHJlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNpbmdsZVJvb3Q7XG59XG5jb25zdCBnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2ggPSAoYXR0cnMpID0+IHtcbiAgbGV0IHJlcztcbiAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICBpZiAoa2V5ID09PSBcImNsYXNzXCIgfHwga2V5ID09PSBcInN0eWxlXCIgfHwgaXNPbihrZXkpKSB7XG4gICAgICAocmVzIHx8IChyZXMgPSB7fSkpW2tleV0gPSBhdHRyc1trZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufTtcbmNvbnN0IGZpbHRlck1vZGVsTGlzdGVuZXJzID0gKGF0dHJzLCBwcm9wcykgPT4ge1xuICBjb25zdCByZXMgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcbiAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpIHx8ICEoa2V5LnNsaWNlKDkpIGluIHByb3BzKSkge1xuICAgICAgcmVzW2tleV0gPSBhdHRyc1trZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzO1xufTtcbmNvbnN0IGlzRWxlbWVudFJvb3QgPSAodm5vZGUpID0+IHtcbiAgcmV0dXJuIHZub2RlLnNoYXBlRmxhZyAmICg2IHwgMSkgfHwgdm5vZGUudHlwZSA9PT0gQ29tbWVudDtcbn07XG5mdW5jdGlvbiBzaG91bGRVcGRhdGVDb21wb25lbnQocHJldlZOb2RlLCBuZXh0Vk5vZGUsIG9wdGltaXplZCkge1xuICBjb25zdCB7IHByb3BzOiBwcmV2UHJvcHMsIGNoaWxkcmVuOiBwcmV2Q2hpbGRyZW4sIGNvbXBvbmVudCB9ID0gcHJldlZOb2RlO1xuICBjb25zdCB7IHByb3BzOiBuZXh0UHJvcHMsIGNoaWxkcmVuOiBuZXh0Q2hpbGRyZW4sIHBhdGNoRmxhZyB9ID0gbmV4dFZOb2RlO1xuICBjb25zdCBlbWl0cyA9IGNvbXBvbmVudC5lbWl0c09wdGlvbnM7XG4gIGlmICgocHJldkNoaWxkcmVuIHx8IG5leHRDaGlsZHJlbikgJiYgaXNIbXJVcGRhdGluZykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChuZXh0Vk5vZGUuZGlycyB8fCBuZXh0Vk5vZGUudHJhbnNpdGlvbikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChvcHRpbWl6ZWQgJiYgcGF0Y2hGbGFnID49IDApIHtcbiAgICBpZiAocGF0Y2hGbGFnICYgMTAyNCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChwYXRjaEZsYWcgJiAxNikge1xuICAgICAgaWYgKCFwcmV2UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuICEhbmV4dFByb3BzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHMpO1xuICAgIH0gZWxzZSBpZiAocGF0Y2hGbGFnICYgOCkge1xuICAgICAgY29uc3QgZHluYW1pY1Byb3BzID0gbmV4dFZOb2RlLmR5bmFtaWNQcm9wcztcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Byb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGR5bmFtaWNQcm9wc1tpXTtcbiAgICAgICAgaWYgKG5leHRQcm9wc1trZXldICE9PSBwcmV2UHJvcHNba2V5XSAmJiAhaXNFbWl0TGlzdGVuZXIoZW1pdHMsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAocHJldkNoaWxkcmVuIHx8IG5leHRDaGlsZHJlbikge1xuICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4gfHwgIW5leHRDaGlsZHJlbi4kc3RhYmxlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJldlByb3BzID09PSBuZXh0UHJvcHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFwcmV2UHJvcHMpIHtcbiAgICAgIHJldHVybiAhIW5leHRQcm9wcztcbiAgICB9XG4gICAgaWYgKCFuZXh0UHJvcHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0cyk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaGFzUHJvcHNDaGFuZ2VkKHByZXZQcm9wcywgbmV4dFByb3BzLCBlbWl0c09wdGlvbnMpIHtcbiAgY29uc3QgbmV4dEtleXMgPSBPYmplY3Qua2V5cyhuZXh0UHJvcHMpO1xuICBpZiAobmV4dEtleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhwcmV2UHJvcHMpLmxlbmd0aCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbmV4dEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSBuZXh0S2V5c1tpXTtcbiAgICBpZiAobmV4dFByb3BzW2tleV0gIT09IHByZXZQcm9wc1trZXldICYmICFpc0VtaXRMaXN0ZW5lcihlbWl0c09wdGlvbnMsIGtleSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiB1cGRhdGVIT0NIb3N0RWwoeyB2bm9kZSwgcGFyZW50IH0sIGVsKSB7XG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBjb25zdCByb290ID0gcGFyZW50LnN1YlRyZWU7XG4gICAgaWYgKHJvb3Quc3VzcGVuc2UgJiYgcm9vdC5zdXNwZW5zZS5hY3RpdmVCcmFuY2ggPT09IHZub2RlKSB7XG4gICAgICByb290LmVsID0gdm5vZGUuZWw7XG4gICAgfVxuICAgIGlmIChyb290ID09PSB2bm9kZSkge1xuICAgICAgKHZub2RlID0gcGFyZW50LnZub2RlKS5lbCA9IGVsO1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IGlzU3VzcGVuc2UgPSAodHlwZSkgPT4gdHlwZS5fX2lzU3VzcGVuc2U7XG5sZXQgc3VzcGVuc2VJZCA9IDA7XG5jb25zdCBTdXNwZW5zZUltcGwgPSB7XG4gIG5hbWU6IFwiU3VzcGVuc2VcIixcbiAgLy8gSW4gb3JkZXIgdG8gbWFrZSBTdXNwZW5zZSB0cmVlLXNoYWthYmxlLCB3ZSBuZWVkIHRvIGF2b2lkIGltcG9ydGluZyBpdFxuICAvLyBkaXJlY3RseSBpbiB0aGUgcmVuZGVyZXIuIFRoZSByZW5kZXJlciBjaGVja3MgZm9yIHRoZSBfX2lzU3VzcGVuc2UgZmxhZ1xuICAvLyBvbiBhIHZub2RlJ3MgdHlwZSBhbmQgY2FsbHMgdGhlIGBwcm9jZXNzYCBtZXRob2QsIHBhc3NpbmcgaW4gcmVuZGVyZXJcbiAgLy8gaW50ZXJuYWxzLlxuICBfX2lzU3VzcGVuc2U6IHRydWUsXG4gIHByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpIHtcbiAgICBpZiAobjEgPT0gbnVsbCkge1xuICAgICAgbW91bnRTdXNwZW5zZShcbiAgICAgICAgbjIsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHBhcmVudFN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICByZW5kZXJlckludGVybmFsc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLmRlcHMgPiAwICYmICFuMS5zdXNwZW5zZS5pc0luRmFsbGJhY2spIHtcbiAgICAgICAgbjIuc3VzcGVuc2UgPSBuMS5zdXNwZW5zZTtcbiAgICAgICAgbjIuc3VzcGVuc2Uudm5vZGUgPSBuMjtcbiAgICAgICAgbjIuZWwgPSBuMS5lbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcGF0Y2hTdXNwZW5zZShcbiAgICAgICAgbjEsXG4gICAgICAgIG4yLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkLFxuICAgICAgICByZW5kZXJlckludGVybmFsc1xuICAgICAgKTtcbiAgICB9XG4gIH0sXG4gIGh5ZHJhdGU6IGh5ZHJhdGVTdXNwZW5zZSxcbiAgbm9ybWFsaXplOiBub3JtYWxpemVTdXNwZW5zZUNoaWxkcmVuXG59O1xuY29uc3QgU3VzcGVuc2UgPSBTdXNwZW5zZUltcGwgO1xuZnVuY3Rpb24gdHJpZ2dlckV2ZW50KHZub2RlLCBuYW1lKSB7XG4gIGNvbnN0IGV2ZW50TGlzdGVuZXIgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wc1tuYW1lXTtcbiAgaWYgKGlzRnVuY3Rpb24oZXZlbnRMaXN0ZW5lcikpIHtcbiAgICBldmVudExpc3RlbmVyKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIG1vdW50U3VzcGVuc2Uodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscykge1xuICBjb25zdCB7XG4gICAgcDogcGF0Y2gsXG4gICAgbzogeyBjcmVhdGVFbGVtZW50IH1cbiAgfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xuICBjb25zdCBoaWRkZW5Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb25zdCBzdXNwZW5zZSA9IHZub2RlLnN1c3BlbnNlID0gY3JlYXRlU3VzcGVuc2VCb3VuZGFyeShcbiAgICB2bm9kZSxcbiAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgY29udGFpbmVyLFxuICAgIGhpZGRlbkNvbnRhaW5lcixcbiAgICBhbmNob3IsXG4gICAgbmFtZXNwYWNlLFxuICAgIHNsb3RTY29wZUlkcyxcbiAgICBvcHRpbWl6ZWQsXG4gICAgcmVuZGVyZXJJbnRlcm5hbHNcbiAgKTtcbiAgcGF0Y2goXG4gICAgbnVsbCxcbiAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gdm5vZGUuc3NDb250ZW50LFxuICAgIGhpZGRlbkNvbnRhaW5lcixcbiAgICBudWxsLFxuICAgIHBhcmVudENvbXBvbmVudCxcbiAgICBzdXNwZW5zZSxcbiAgICBuYW1lc3BhY2UsXG4gICAgc2xvdFNjb3BlSWRzXG4gICk7XG4gIGlmIChzdXNwZW5zZS5kZXBzID4gMCkge1xuICAgIHRyaWdnZXJFdmVudCh2bm9kZSwgXCJvblBlbmRpbmdcIik7XG4gICAgdHJpZ2dlckV2ZW50KHZub2RlLCBcIm9uRmFsbGJhY2tcIik7XG4gICAgcGF0Y2goXG4gICAgICBudWxsLFxuICAgICAgdm5vZGUuc3NGYWxsYmFjayxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGFuY2hvcixcbiAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgIG51bGwsXG4gICAgICAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgbmFtZXNwYWNlLFxuICAgICAgc2xvdFNjb3BlSWRzXG4gICAgKTtcbiAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIHZub2RlLnNzRmFsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIHN1c3BlbnNlLnJlc29sdmUoZmFsc2UsIHRydWUpO1xuICB9XG59XG5mdW5jdGlvbiBwYXRjaFN1c3BlbnNlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbmFtZXNwYWNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgeyBwOiBwYXRjaCwgdW06IHVubW91bnQsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0pIHtcbiAgY29uc3Qgc3VzcGVuc2UgPSBuMi5zdXNwZW5zZSA9IG4xLnN1c3BlbnNlO1xuICBzdXNwZW5zZS52bm9kZSA9IG4yO1xuICBuMi5lbCA9IG4xLmVsO1xuICBjb25zdCBuZXdCcmFuY2ggPSBuMi5zc0NvbnRlbnQ7XG4gIGNvbnN0IG5ld0ZhbGxiYWNrID0gbjIuc3NGYWxsYmFjaztcbiAgY29uc3QgeyBhY3RpdmVCcmFuY2gsIHBlbmRpbmdCcmFuY2gsIGlzSW5GYWxsYmFjaywgaXNIeWRyYXRpbmcgfSA9IHN1c3BlbnNlO1xuICBpZiAocGVuZGluZ0JyYW5jaCkge1xuICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSBuZXdCcmFuY2g7XG4gICAgaWYgKGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIHBlbmRpbmdCcmFuY2gpKSB7XG4gICAgICBwYXRjaChcbiAgICAgICAgcGVuZGluZ0JyYW5jaCxcbiAgICAgICAgbmV3QnJhbmNoLFxuICAgICAgICBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNJbkZhbGxiYWNrKSB7XG4gICAgICAgIGlmICghaXNIeWRyYXRpbmcpIHtcbiAgICAgICAgICBwYXRjaChcbiAgICAgICAgICAgIGFjdGl2ZUJyYW5jaCxcbiAgICAgICAgICAgIG5ld0ZhbGxiYWNrLFxuICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgYW5jaG9yLFxuICAgICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XG4gICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgICApO1xuICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3RmFsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1c3BlbnNlLnBlbmRpbmdJZCA9IHN1c3BlbnNlSWQrKztcbiAgICAgIGlmIChpc0h5ZHJhdGluZykge1xuICAgICAgICBzdXNwZW5zZS5pc0h5ZHJhdGluZyA9IGZhbHNlO1xuICAgICAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggPSBwZW5kaW5nQnJhbmNoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW5tb3VudChwZW5kaW5nQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlKTtcbiAgICAgIH1cbiAgICAgIHN1c3BlbnNlLmRlcHMgPSAwO1xuICAgICAgc3VzcGVuc2UuZWZmZWN0cy5sZW5ndGggPSAwO1xuICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGlmIChpc0luRmFsbGJhY2spIHtcbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBuZXdCcmFuY2gsXG4gICAgICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcbiAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0Y2goXG4gICAgICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgICAgICBuZXdGYWxsYmFjayxcbiAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAvLyBmYWxsYmFjayB0cmVlIHdpbGwgbm90IGhhdmUgc3VzcGVuc2UgY29udGV4dFxuICAgICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICAgKTtcbiAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0ZhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhY3RpdmVCcmFuY2ggJiYgaXNTYW1lVk5vZGVUeXBlKG5ld0JyYW5jaCwgYWN0aXZlQnJhbmNoKSkge1xuICAgICAgICBwYXRjaChcbiAgICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgICAgbmV3QnJhbmNoLFxuICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICBhbmNob3IsXG4gICAgICAgICAgcGFyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBzbG90U2NvcGVJZHMsXG4gICAgICAgICAgb3B0aW1pemVkXG4gICAgICAgICk7XG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRjaChcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG5ld0JyYW5jaCxcbiAgICAgICAgICBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgICAgbmFtZXNwYWNlLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYWN0aXZlQnJhbmNoICYmIGlzU2FtZVZOb2RlVHlwZShuZXdCcmFuY2gsIGFjdGl2ZUJyYW5jaCkpIHtcbiAgICAgIHBhdGNoKFxuICAgICAgICBhY3RpdmVCcmFuY2gsXG4gICAgICAgIG5ld0JyYW5jaCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBhbmNob3IsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgc3VzcGVuc2UsXG4gICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgc2xvdFNjb3BlSWRzLFxuICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICk7XG4gICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0JyYW5jaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyaWdnZXJFdmVudChuMiwgXCJvblBlbmRpbmdcIik7XG4gICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xuICAgICAgaWYgKG5ld0JyYW5jaC5zaGFwZUZsYWcgJiA1MTIpIHtcbiAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkID0gbmV3QnJhbmNoLmNvbXBvbmVudC5zdXNwZW5zZUlkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3VzcGVuc2UucGVuZGluZ0lkID0gc3VzcGVuc2VJZCsrO1xuICAgICAgfVxuICAgICAgcGF0Y2goXG4gICAgICAgIG51bGwsXG4gICAgICAgIG5ld0JyYW5jaCxcbiAgICAgICAgc3VzcGVuc2UuaGlkZGVuQ29udGFpbmVyLFxuICAgICAgICBudWxsLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIHN1c3BlbnNlLFxuICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgb3B0aW1pemVkXG4gICAgICApO1xuICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xuICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7IHRpbWVvdXQsIHBlbmRpbmdJZCB9ID0gc3VzcGVuc2U7XG4gICAgICAgIGlmICh0aW1lb3V0ID4gMCkge1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdJZCA9PT0gcGVuZGluZ0lkKSB7XG4gICAgICAgICAgICAgIHN1c3BlbnNlLmZhbGxiYWNrKG5ld0ZhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aW1lb3V0ID09PSAwKSB7XG4gICAgICAgICAgc3VzcGVuc2UuZmFsbGJhY2sobmV3RmFsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5sZXQgaGFzV2FybmVkID0gZmFsc2U7XG5mdW5jdGlvbiBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGhpZGRlbkNvbnRhaW5lciwgYW5jaG9yLCBuYW1lc3BhY2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaXNIeWRyYXRpbmcgPSBmYWxzZSkge1xuICBpZiAoIWhhc1dhcm5lZCkge1xuICAgIGhhc1dhcm5lZCA9IHRydWU7XG4gICAgY29uc29sZVtjb25zb2xlLmluZm8gPyBcImluZm9cIiA6IFwibG9nXCJdKFxuICAgICAgYDxTdXNwZW5zZT4gaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUgYW5kIGl0cyBBUEkgd2lsbCBsaWtlbHkgY2hhbmdlLmBcbiAgICApO1xuICB9XG4gIGNvbnN0IHtcbiAgICBwOiBwYXRjaCxcbiAgICBtOiBtb3ZlLFxuICAgIHVtOiB1bm1vdW50LFxuICAgIG46IG5leHQsXG4gICAgbzogeyBwYXJlbnROb2RlLCByZW1vdmUgfVxuICB9ID0gcmVuZGVyZXJJbnRlcm5hbHM7XG4gIGxldCBwYXJlbnRTdXNwZW5zZUlkO1xuICBjb25zdCBpc1N1c3BlbnNpYmxlID0gaXNWTm9kZVN1c3BlbnNpYmxlKHZub2RlKTtcbiAgaWYgKGlzU3VzcGVuc2libGUpIHtcbiAgICBpZiAocGFyZW50U3VzcGVuc2UgJiYgcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgcGFyZW50U3VzcGVuc2VJZCA9IHBhcmVudFN1c3BlbnNlLnBlbmRpbmdJZDtcbiAgICAgIHBhcmVudFN1c3BlbnNlLmRlcHMrKztcbiAgICB9XG4gIH1cbiAgY29uc3QgdGltZW91dCA9IHZub2RlLnByb3BzID8gdG9OdW1iZXIodm5vZGUucHJvcHMudGltZW91dCkgOiB2b2lkIDA7XG4gIHtcbiAgICBhc3NlcnROdW1iZXIodGltZW91dCwgYFN1c3BlbnNlIHRpbWVvdXRgKTtcbiAgfVxuICBjb25zdCBpbml0aWFsQW5jaG9yID0gYW5jaG9yO1xuICBjb25zdCBzdXNwZW5zZSA9IHtcbiAgICB2bm9kZSxcbiAgICBwYXJlbnQ6IHBhcmVudFN1c3BlbnNlLFxuICAgIHBhcmVudENvbXBvbmVudCxcbiAgICBuYW1lc3BhY2UsXG4gICAgY29udGFpbmVyLFxuICAgIGhpZGRlbkNvbnRhaW5lcixcbiAgICBkZXBzOiAwLFxuICAgIHBlbmRpbmdJZDogc3VzcGVuc2VJZCsrLFxuICAgIHRpbWVvdXQ6IHR5cGVvZiB0aW1lb3V0ID09PSBcIm51bWJlclwiID8gdGltZW91dCA6IC0xLFxuICAgIGFjdGl2ZUJyYW5jaDogbnVsbCxcbiAgICBwZW5kaW5nQnJhbmNoOiBudWxsLFxuICAgIGlzSW5GYWxsYmFjazogIWlzSHlkcmF0aW5nLFxuICAgIGlzSHlkcmF0aW5nLFxuICAgIGlzVW5tb3VudGVkOiBmYWxzZSxcbiAgICBlZmZlY3RzOiBbXSxcbiAgICByZXNvbHZlKHJlc3VtZSA9IGZhbHNlLCBzeW5jID0gZmFsc2UpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKCFyZXN1bWUgJiYgIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCB3aXRob3V0IGEgcGVuZGluZyBicmFuY2guYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1c3BlbnNlLmlzVW5tb3VudGVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYHN1c3BlbnNlLnJlc29sdmUoKSBpcyBjYWxsZWQgb24gYW4gYWxyZWFkeSB1bm1vdW50ZWQgc3VzcGVuc2UgYm91bmRhcnkuYFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgdm5vZGU6IHZub2RlMixcbiAgICAgICAgYWN0aXZlQnJhbmNoLFxuICAgICAgICBwZW5kaW5nQnJhbmNoLFxuICAgICAgICBwZW5kaW5nSWQsXG4gICAgICAgIGVmZmVjdHMsXG4gICAgICAgIHBhcmVudENvbXBvbmVudDogcGFyZW50Q29tcG9uZW50MixcbiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIyXG4gICAgICB9ID0gc3VzcGVuc2U7XG4gICAgICBsZXQgZGVsYXlFbnRlciA9IGZhbHNlO1xuICAgICAgaWYgKHN1c3BlbnNlLmlzSHlkcmF0aW5nKSB7XG4gICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKCFyZXN1bWUpIHtcbiAgICAgICAgZGVsYXlFbnRlciA9IGFjdGl2ZUJyYW5jaCAmJiBwZW5kaW5nQnJhbmNoLnRyYW5zaXRpb24gJiYgcGVuZGluZ0JyYW5jaC50cmFuc2l0aW9uLm1vZGUgPT09IFwib3V0LWluXCI7XG4gICAgICAgIGlmIChkZWxheUVudGVyKSB7XG4gICAgICAgICAgYWN0aXZlQnJhbmNoLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nSWQgPT09IHN1c3BlbnNlLnBlbmRpbmdJZCkge1xuICAgICAgICAgICAgICBtb3ZlKFxuICAgICAgICAgICAgICAgIHBlbmRpbmdCcmFuY2gsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyMixcbiAgICAgICAgICAgICAgICBhbmNob3IgPT09IGluaXRpYWxBbmNob3IgPyBuZXh0KGFjdGl2ZUJyYW5jaCkgOiBhbmNob3IsXG4gICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGVmZmVjdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGl2ZUJyYW5jaCkge1xuICAgICAgICAgIGlmIChwYXJlbnROb2RlKGFjdGl2ZUJyYW5jaC5lbCkgPT09IGNvbnRhaW5lcjIpIHtcbiAgICAgICAgICAgIGFuY2hvciA9IG5leHQoYWN0aXZlQnJhbmNoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdW5tb3VudChhY3RpdmVCcmFuY2gsIHBhcmVudENvbXBvbmVudDIsIHN1c3BlbnNlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlbGF5RW50ZXIpIHtcbiAgICAgICAgICBtb3ZlKHBlbmRpbmdCcmFuY2gsIGNvbnRhaW5lcjIsIGFuY2hvciwgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgcGVuZGluZ0JyYW5jaCk7XG4gICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbnVsbDtcbiAgICAgIHN1c3BlbnNlLmlzSW5GYWxsYmFjayA9IGZhbHNlO1xuICAgICAgbGV0IHBhcmVudCA9IHN1c3BlbnNlLnBhcmVudDtcbiAgICAgIGxldCBoYXNVbnJlc29sdmVkQW5jZXN0b3IgPSBmYWxzZTtcbiAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgICAgcGFyZW50LmVmZmVjdHMucHVzaCguLi5lZmZlY3RzKTtcbiAgICAgICAgICBoYXNVbnJlc29sdmVkQW5jZXN0b3IgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIWhhc1VucmVzb2x2ZWRBbmNlc3RvciAmJiAhZGVsYXlFbnRlcikge1xuICAgICAgICBxdWV1ZVBvc3RGbHVzaENiKGVmZmVjdHMpO1xuICAgICAgfVxuICAgICAgc3VzcGVuc2UuZWZmZWN0cyA9IFtdO1xuICAgICAgaWYgKGlzU3VzcGVuc2libGUpIHtcbiAgICAgICAgaWYgKHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggJiYgcGFyZW50U3VzcGVuc2VJZCA9PT0gcGFyZW50U3VzcGVuc2UucGVuZGluZ0lkKSB7XG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UuZGVwcy0tO1xuICAgICAgICAgIGlmIChwYXJlbnRTdXNwZW5zZS5kZXBzID09PSAwICYmICFzeW5jKSB7XG4gICAgICAgICAgICBwYXJlbnRTdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0cmlnZ2VyRXZlbnQodm5vZGUyLCBcIm9uUmVzb2x2ZVwiKTtcbiAgICB9LFxuICAgIGZhbGxiYWNrKGZhbGxiYWNrVk5vZGUpIHtcbiAgICAgIGlmICghc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB7IHZub2RlOiB2bm9kZTIsIGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50OiBwYXJlbnRDb21wb25lbnQyLCBjb250YWluZXI6IGNvbnRhaW5lcjIsIG5hbWVzcGFjZTogbmFtZXNwYWNlMiB9ID0gc3VzcGVuc2U7XG4gICAgICB0cmlnZ2VyRXZlbnQodm5vZGUyLCBcIm9uRmFsbGJhY2tcIik7XG4gICAgICBjb25zdCBhbmNob3IyID0gbmV4dChhY3RpdmVCcmFuY2gpO1xuICAgICAgY29uc3QgbW91bnRGYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFzdXNwZW5zZS5pc0luRmFsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcGF0Y2goXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBmYWxsYmFja1ZOb2RlLFxuICAgICAgICAgIGNvbnRhaW5lcjIsXG4gICAgICAgICAgYW5jaG9yMixcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQyLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcbiAgICAgICAgICBuYW1lc3BhY2UyLFxuICAgICAgICAgIHNsb3RTY29wZUlkcyxcbiAgICAgICAgICBvcHRpbWl6ZWRcbiAgICAgICAgKTtcbiAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBmYWxsYmFja1ZOb2RlKTtcbiAgICAgIH07XG4gICAgICBjb25zdCBkZWxheUVudGVyID0gZmFsbGJhY2tWTm9kZS50cmFuc2l0aW9uICYmIGZhbGxiYWNrVk5vZGUudHJhbnNpdGlvbi5tb2RlID09PSBcIm91dC1pblwiO1xuICAgICAgaWYgKGRlbGF5RW50ZXIpIHtcbiAgICAgICAgYWN0aXZlQnJhbmNoLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSA9IG1vdW50RmFsbGJhY2s7XG4gICAgICB9XG4gICAgICBzdXNwZW5zZS5pc0luRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgdW5tb3VudChcbiAgICAgICAgYWN0aXZlQnJhbmNoLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQyLFxuICAgICAgICBudWxsLFxuICAgICAgICAvLyBubyBzdXNwZW5zZSBzbyB1bm1vdW50IGhvb2tzIGZpcmUgbm93XG4gICAgICAgIHRydWVcbiAgICAgICAgLy8gc2hvdWxkUmVtb3ZlXG4gICAgICApO1xuICAgICAgaWYgKCFkZWxheUVudGVyKSB7XG4gICAgICAgIG1vdW50RmFsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG1vdmUoY29udGFpbmVyMiwgYW5jaG9yMiwgdHlwZSkge1xuICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoICYmIG1vdmUoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCBjb250YWluZXIyLCBhbmNob3IyLCB0eXBlKTtcbiAgICAgIHN1c3BlbnNlLmNvbnRhaW5lciA9IGNvbnRhaW5lcjI7XG4gICAgfSxcbiAgICBuZXh0KCkge1xuICAgICAgcmV0dXJuIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCAmJiBuZXh0KHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCk7XG4gICAgfSxcbiAgICByZWdpc3RlckRlcChpbnN0YW5jZSwgc2V0dXBSZW5kZXJFZmZlY3QsIG9wdGltaXplZDIpIHtcbiAgICAgIGNvbnN0IGlzSW5QZW5kaW5nU3VzcGVuc2UgPSAhIXN1c3BlbnNlLnBlbmRpbmdCcmFuY2g7XG4gICAgICBpZiAoaXNJblBlbmRpbmdTdXNwZW5zZSkge1xuICAgICAgICBzdXNwZW5zZS5kZXBzKys7XG4gICAgICB9XG4gICAgICBjb25zdCBoeWRyYXRlZEVsID0gaW5zdGFuY2Uudm5vZGUuZWw7XG4gICAgICBpbnN0YW5jZS5hc3luY0RlcC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIDApO1xuICAgICAgfSkudGhlbigoYXN5bmNTZXR1cFJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoaW5zdGFuY2UuaXNVbm1vdW50ZWQgfHwgc3VzcGVuc2UuaXNVbm1vdW50ZWQgfHwgc3VzcGVuc2UucGVuZGluZ0lkICE9PSBpbnN0YW5jZS5zdXNwZW5zZUlkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlLmFzeW5jUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICBjb25zdCB7IHZub2RlOiB2bm9kZTIgfSA9IGluc3RhbmNlO1xuICAgICAgICB7XG4gICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KHZub2RlMik7XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIGFzeW5jU2V0dXBSZXN1bHQsIGZhbHNlKTtcbiAgICAgICAgaWYgKGh5ZHJhdGVkRWwpIHtcbiAgICAgICAgICB2bm9kZTIuZWwgPSBoeWRyYXRlZEVsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gIWh5ZHJhdGVkRWwgJiYgaW5zdGFuY2Uuc3ViVHJlZS5lbDtcbiAgICAgICAgc2V0dXBSZW5kZXJFZmZlY3QoXG4gICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgdm5vZGUyLFxuICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgaGF2ZSBiZWVuIG1vdmVkIGJlZm9yZSByZXNvbHZlLlxuICAgICAgICAgIC8vIGlmIHRoaXMgaXMgbm90IGEgaHlkcmF0aW9uLCBpbnN0YW5jZS5zdWJUcmVlIHdpbGwgYmUgdGhlIGNvbW1lbnRcbiAgICAgICAgICAvLyBwbGFjZWhvbGRlci5cbiAgICAgICAgICBwYXJlbnROb2RlKGh5ZHJhdGVkRWwgfHwgaW5zdGFuY2Uuc3ViVHJlZS5lbCksXG4gICAgICAgICAgLy8gYW5jaG9yIHdpbGwgbm90IGJlIHVzZWQgaWYgdGhpcyBpcyBoeWRyYXRpb24sIHNvIG9ubHkgbmVlZCB0b1xuICAgICAgICAgIC8vIGNvbnNpZGVyIHRoZSBjb21tZW50IHBsYWNlaG9sZGVyIGNhc2UuXG4gICAgICAgICAgaHlkcmF0ZWRFbCA/IG51bGwgOiBuZXh0KGluc3RhbmNlLnN1YlRyZWUpLFxuICAgICAgICAgIHN1c3BlbnNlLFxuICAgICAgICAgIG5hbWVzcGFjZSxcbiAgICAgICAgICBvcHRpbWl6ZWQyXG4gICAgICAgICk7XG4gICAgICAgIGlmIChwbGFjZWhvbGRlcikge1xuICAgICAgICAgIHJlbW92ZShwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCB2bm9kZTIuZWwpO1xuICAgICAgICB7XG4gICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJblBlbmRpbmdTdXNwZW5zZSAmJiAtLXN1c3BlbnNlLmRlcHMgPT09IDApIHtcbiAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdW5tb3VudChwYXJlbnRTdXNwZW5zZTIsIGRvUmVtb3ZlKSB7XG4gICAgICBzdXNwZW5zZS5pc1VubW91bnRlZCA9IHRydWU7XG4gICAgICBpZiAoc3VzcGVuc2UuYWN0aXZlQnJhbmNoKSB7XG4gICAgICAgIHVubW91bnQoXG4gICAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoLFxuICAgICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgICBwYXJlbnRTdXNwZW5zZTIsXG4gICAgICAgICAgZG9SZW1vdmVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XG4gICAgICAgIHVubW91bnQoXG4gICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCxcbiAgICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcGFyZW50U3VzcGVuc2UyLFxuICAgICAgICAgIGRvUmVtb3ZlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gc3VzcGVuc2U7XG59XG5mdW5jdGlvbiBoeWRyYXRlU3VzcGVuc2Uobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIG5hbWVzcGFjZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBoeWRyYXRlTm9kZSkge1xuICBjb25zdCBzdXNwZW5zZSA9IHZub2RlLnN1c3BlbnNlID0gY3JlYXRlU3VzcGVuc2VCb3VuZGFyeShcbiAgICB2bm9kZSxcbiAgICBwYXJlbnRTdXNwZW5zZSxcbiAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgbm9kZS5wYXJlbnROb2RlLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgIG51bGwsXG4gICAgbmFtZXNwYWNlLFxuICAgIHNsb3RTY29wZUlkcyxcbiAgICBvcHRpbWl6ZWQsXG4gICAgcmVuZGVyZXJJbnRlcm5hbHMsXG4gICAgdHJ1ZVxuICApO1xuICBjb25zdCByZXN1bHQgPSBoeWRyYXRlTm9kZShcbiAgICBub2RlLFxuICAgIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSB2bm9kZS5zc0NvbnRlbnQsXG4gICAgcGFyZW50Q29tcG9uZW50LFxuICAgIHN1c3BlbnNlLFxuICAgIHNsb3RTY29wZUlkcyxcbiAgICBvcHRpbWl6ZWRcbiAgKTtcbiAgaWYgKHN1c3BlbnNlLmRlcHMgPT09IDApIHtcbiAgICBzdXNwZW5zZS5yZXNvbHZlKGZhbHNlLCB0cnVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplU3VzcGVuc2VDaGlsZHJlbih2bm9kZSkge1xuICBjb25zdCB7IHNoYXBlRmxhZywgY2hpbGRyZW4gfSA9IHZub2RlO1xuICBjb25zdCBpc1Nsb3RDaGlsZHJlbiA9IHNoYXBlRmxhZyAmIDMyO1xuICB2bm9kZS5zc0NvbnRlbnQgPSBub3JtYWxpemVTdXNwZW5zZVNsb3QoXG4gICAgaXNTbG90Q2hpbGRyZW4gPyBjaGlsZHJlbi5kZWZhdWx0IDogY2hpbGRyZW5cbiAgKTtcbiAgdm5vZGUuc3NGYWxsYmFjayA9IGlzU2xvdENoaWxkcmVuID8gbm9ybWFsaXplU3VzcGVuc2VTbG90KGNoaWxkcmVuLmZhbGxiYWNrKSA6IGNyZWF0ZVZOb2RlKENvbW1lbnQpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplU3VzcGVuc2VTbG90KHMpIHtcbiAgbGV0IGJsb2NrO1xuICBpZiAoaXNGdW5jdGlvbihzKSkge1xuICAgIGNvbnN0IHRyYWNrQmxvY2sgPSBpc0Jsb2NrVHJlZUVuYWJsZWQgJiYgcy5fYztcbiAgICBpZiAodHJhY2tCbG9jaykge1xuICAgICAgcy5fZCA9IGZhbHNlO1xuICAgICAgb3BlbkJsb2NrKCk7XG4gICAgfVxuICAgIHMgPSBzKCk7XG4gICAgaWYgKHRyYWNrQmxvY2spIHtcbiAgICAgIHMuX2QgPSB0cnVlO1xuICAgICAgYmxvY2sgPSBjdXJyZW50QmxvY2s7XG4gICAgICBjbG9zZUJsb2NrKCk7XG4gICAgfVxuICB9XG4gIGlmIChpc0FycmF5KHMpKSB7XG4gICAgY29uc3Qgc2luZ2xlQ2hpbGQgPSBmaWx0ZXJTaW5nbGVSb290KHMpO1xuICAgIGlmICghc2luZ2xlQ2hpbGQgJiYgcy5maWx0ZXIoKGNoaWxkKSA9PiBjaGlsZCAhPT0gTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCkubGVuZ3RoID4gMCkge1xuICAgICAgd2FybiQxKGA8U3VzcGVuc2U+IHNsb3RzIGV4cGVjdCBhIHNpbmdsZSByb290IG5vZGUuYCk7XG4gICAgfVxuICAgIHMgPSBzaW5nbGVDaGlsZDtcbiAgfVxuICBzID0gbm9ybWFsaXplVk5vZGUocyk7XG4gIGlmIChibG9jayAmJiAhcy5keW5hbWljQ2hpbGRyZW4pIHtcbiAgICBzLmR5bmFtaWNDaGlsZHJlbiA9IGJsb2NrLmZpbHRlcigoYykgPT4gYyAhPT0gcyk7XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5mdW5jdGlvbiBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZShmbiwgc3VzcGVuc2UpIHtcbiAgaWYgKHN1c3BlbnNlICYmIHN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcbiAgICBpZiAoaXNBcnJheShmbikpIHtcbiAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCguLi5mbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaChmbik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZm4pO1xuICB9XG59XG5mdW5jdGlvbiBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIGJyYW5jaCkge1xuICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggPSBicmFuY2g7XG4gIGNvbnN0IHsgdm5vZGUsIHBhcmVudENvbXBvbmVudCB9ID0gc3VzcGVuc2U7XG4gIGxldCBlbCA9IGJyYW5jaC5lbDtcbiAgd2hpbGUgKCFlbCAmJiBicmFuY2guY29tcG9uZW50KSB7XG4gICAgYnJhbmNoID0gYnJhbmNoLmNvbXBvbmVudC5zdWJUcmVlO1xuICAgIGVsID0gYnJhbmNoLmVsO1xuICB9XG4gIHZub2RlLmVsID0gZWw7XG4gIGlmIChwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnN1YlRyZWUgPT09IHZub2RlKSB7XG4gICAgcGFyZW50Q29tcG9uZW50LnZub2RlLmVsID0gZWw7XG4gICAgdXBkYXRlSE9DSG9zdEVsKHBhcmVudENvbXBvbmVudCwgZWwpO1xuICB9XG59XG5mdW5jdGlvbiBpc1ZOb2RlU3VzcGVuc2libGUodm5vZGUpIHtcbiAgY29uc3Qgc3VzcGVuc2libGUgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy5zdXNwZW5zaWJsZTtcbiAgcmV0dXJuIHN1c3BlbnNpYmxlICE9IG51bGwgJiYgc3VzcGVuc2libGUgIT09IGZhbHNlO1xufVxuXG5jb25zdCBGcmFnbWVudCA9IFN5bWJvbC5mb3IoXCJ2LWZndFwiKTtcbmNvbnN0IFRleHQgPSBTeW1ib2wuZm9yKFwidi10eHRcIik7XG5jb25zdCBDb21tZW50ID0gU3ltYm9sLmZvcihcInYtY210XCIpO1xuY29uc3QgU3RhdGljID0gU3ltYm9sLmZvcihcInYtc3RjXCIpO1xuY29uc3QgYmxvY2tTdGFjayA9IFtdO1xubGV0IGN1cnJlbnRCbG9jayA9IG51bGw7XG5mdW5jdGlvbiBvcGVuQmxvY2soZGlzYWJsZVRyYWNraW5nID0gZmFsc2UpIHtcbiAgYmxvY2tTdGFjay5wdXNoKGN1cnJlbnRCbG9jayA9IGRpc2FibGVUcmFja2luZyA/IG51bGwgOiBbXSk7XG59XG5mdW5jdGlvbiBjbG9zZUJsb2NrKCkge1xuICBibG9ja1N0YWNrLnBvcCgpO1xuICBjdXJyZW50QmxvY2sgPSBibG9ja1N0YWNrW2Jsb2NrU3RhY2subGVuZ3RoIC0gMV0gfHwgbnVsbDtcbn1cbmxldCBpc0Jsb2NrVHJlZUVuYWJsZWQgPSAxO1xuZnVuY3Rpb24gc2V0QmxvY2tUcmFja2luZyh2YWx1ZSwgaW5WT25jZSA9IGZhbHNlKSB7XG4gIGlzQmxvY2tUcmVlRW5hYmxlZCArPSB2YWx1ZTtcbiAgaWYgKHZhbHVlIDwgMCAmJiBjdXJyZW50QmxvY2sgJiYgaW5WT25jZSkge1xuICAgIGN1cnJlbnRCbG9jay5oYXNPbmNlID0gdHJ1ZTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0dXBCbG9jayh2bm9kZSkge1xuICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwID8gY3VycmVudEJsb2NrIHx8IEVNUFRZX0FSUiA6IG51bGw7XG4gIGNsb3NlQmxvY2soKTtcbiAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgY3VycmVudEJsb2NrKSB7XG4gICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xuICB9XG4gIHJldHVybiB2bm9kZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRCbG9jayh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzLCBzaGFwZUZsYWcpIHtcbiAgcmV0dXJuIHNldHVwQmxvY2soXG4gICAgY3JlYXRlQmFzZVZOb2RlKFxuICAgICAgdHlwZSxcbiAgICAgIHByb3BzLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBwYXRjaEZsYWcsXG4gICAgICBkeW5hbWljUHJvcHMsXG4gICAgICBzaGFwZUZsYWcsXG4gICAgICB0cnVlXG4gICAgKVxuICApO1xufVxuZnVuY3Rpb24gY3JlYXRlQmxvY2sodHlwZSwgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcykge1xuICByZXR1cm4gc2V0dXBCbG9jayhcbiAgICBjcmVhdGVWTm9kZShcbiAgICAgIHR5cGUsXG4gICAgICBwcm9wcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgcGF0Y2hGbGFnLFxuICAgICAgZHluYW1pY1Byb3BzLFxuICAgICAgdHJ1ZVxuICAgIClcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzVk5vZGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID8gdmFsdWUuX192X2lzVk5vZGUgPT09IHRydWUgOiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzU2FtZVZOb2RlVHlwZShuMSwgbjIpIHtcbiAgaWYgKG4yLnNoYXBlRmxhZyAmIDYgJiYgbjEuY29tcG9uZW50KSB7XG4gICAgY29uc3QgZGlydHlJbnN0YW5jZXMgPSBobXJEaXJ0eUNvbXBvbmVudHMuZ2V0KG4yLnR5cGUpO1xuICAgIGlmIChkaXJ0eUluc3RhbmNlcyAmJiBkaXJ0eUluc3RhbmNlcy5oYXMobjEuY29tcG9uZW50KSkge1xuICAgICAgbjEuc2hhcGVGbGFnICY9IC0yNTc7XG4gICAgICBuMi5zaGFwZUZsYWcgJj0gLTUxMztcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG4xLnR5cGUgPT09IG4yLnR5cGUgJiYgbjEua2V5ID09PSBuMi5rZXk7XG59XG5sZXQgdm5vZGVBcmdzVHJhbnNmb3JtZXI7XG5mdW5jdGlvbiB0cmFuc2Zvcm1WTm9kZUFyZ3ModHJhbnNmb3JtZXIpIHtcbiAgdm5vZGVBcmdzVHJhbnNmb3JtZXIgPSB0cmFuc2Zvcm1lcjtcbn1cbmNvbnN0IGNyZWF0ZVZOb2RlV2l0aEFyZ3NUcmFuc2Zvcm0gPSAoLi4uYXJncykgPT4ge1xuICByZXR1cm4gX2NyZWF0ZVZOb2RlKFxuICAgIC4uLnZub2RlQXJnc1RyYW5zZm9ybWVyID8gdm5vZGVBcmdzVHJhbnNmb3JtZXIoYXJncywgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKSA6IGFyZ3NcbiAgKTtcbn07XG5jb25zdCBub3JtYWxpemVLZXkgPSAoeyBrZXkgfSkgPT4ga2V5ICE9IG51bGwgPyBrZXkgOiBudWxsO1xuY29uc3Qgbm9ybWFsaXplUmVmID0gKHtcbiAgcmVmLFxuICByZWZfa2V5LFxuICByZWZfZm9yXG59KSA9PiB7XG4gIGlmICh0eXBlb2YgcmVmID09PSBcIm51bWJlclwiKSB7XG4gICAgcmVmID0gXCJcIiArIHJlZjtcbiAgfVxuICByZXR1cm4gcmVmICE9IG51bGwgPyBpc1N0cmluZyhyZWYpIHx8IGlzUmVmKHJlZikgfHwgaXNGdW5jdGlvbihyZWYpID8geyBpOiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UsIHI6IHJlZiwgazogcmVmX2tleSwgZjogISFyZWZfZm9yIH0gOiByZWYgOiBudWxsO1xufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VWTm9kZSh0eXBlLCBwcm9wcyA9IG51bGwsIGNoaWxkcmVuID0gbnVsbCwgcGF0Y2hGbGFnID0gMCwgZHluYW1pY1Byb3BzID0gbnVsbCwgc2hhcGVGbGFnID0gdHlwZSA9PT0gRnJhZ21lbnQgPyAwIDogMSwgaXNCbG9ja05vZGUgPSBmYWxzZSwgbmVlZEZ1bGxDaGlsZHJlbk5vcm1hbGl6YXRpb24gPSBmYWxzZSkge1xuICBjb25zdCB2bm9kZSA9IHtcbiAgICBfX3ZfaXNWTm9kZTogdHJ1ZSxcbiAgICBfX3Zfc2tpcDogdHJ1ZSxcbiAgICB0eXBlLFxuICAgIHByb3BzLFxuICAgIGtleTogcHJvcHMgJiYgbm9ybWFsaXplS2V5KHByb3BzKSxcbiAgICByZWY6IHByb3BzICYmIG5vcm1hbGl6ZVJlZihwcm9wcyksXG4gICAgc2NvcGVJZDogY3VycmVudFNjb3BlSWQsXG4gICAgc2xvdFNjb3BlSWRzOiBudWxsLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbXBvbmVudDogbnVsbCxcbiAgICBzdXNwZW5zZTogbnVsbCxcbiAgICBzc0NvbnRlbnQ6IG51bGwsXG4gICAgc3NGYWxsYmFjazogbnVsbCxcbiAgICBkaXJzOiBudWxsLFxuICAgIHRyYW5zaXRpb246IG51bGwsXG4gICAgZWw6IG51bGwsXG4gICAgYW5jaG9yOiBudWxsLFxuICAgIHRhcmdldDogbnVsbCxcbiAgICB0YXJnZXRTdGFydDogbnVsbCxcbiAgICB0YXJnZXRBbmNob3I6IG51bGwsXG4gICAgc3RhdGljQ291bnQ6IDAsXG4gICAgc2hhcGVGbGFnLFxuICAgIHBhdGNoRmxhZyxcbiAgICBkeW5hbWljUHJvcHMsXG4gICAgZHluYW1pY0NoaWxkcmVuOiBudWxsLFxuICAgIGFwcENvbnRleHQ6IG51bGwsXG4gICAgY3R4OiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2VcbiAgfTtcbiAgaWYgKG5lZWRGdWxsQ2hpbGRyZW5Ob3JtYWxpemF0aW9uKSB7XG4gICAgbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuKTtcbiAgICBpZiAoc2hhcGVGbGFnICYgMTI4KSB7XG4gICAgICB0eXBlLm5vcm1hbGl6ZSh2bm9kZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNoaWxkcmVuKSB7XG4gICAgdm5vZGUuc2hhcGVGbGFnIHw9IGlzU3RyaW5nKGNoaWxkcmVuKSA/IDggOiAxNjtcbiAgfVxuICBpZiAodm5vZGUua2V5ICE9PSB2bm9kZS5rZXkpIHtcbiAgICB3YXJuJDEoYFZOb2RlIGNyZWF0ZWQgd2l0aCBpbnZhbGlkIGtleSAoTmFOKS4gVk5vZGUgdHlwZTpgLCB2bm9kZS50eXBlKTtcbiAgfVxuICBpZiAoaXNCbG9ja1RyZWVFbmFibGVkID4gMCAmJiAvLyBhdm9pZCBhIGJsb2NrIG5vZGUgZnJvbSB0cmFja2luZyBpdHNlbGZcbiAgIWlzQmxvY2tOb2RlICYmIC8vIGhhcyBjdXJyZW50IHBhcmVudCBibG9ja1xuICBjdXJyZW50QmxvY2sgJiYgLy8gcHJlc2VuY2Ugb2YgYSBwYXRjaCBmbGFnIGluZGljYXRlcyB0aGlzIG5vZGUgbmVlZHMgcGF0Y2hpbmcgb24gdXBkYXRlcy5cbiAgLy8gY29tcG9uZW50IG5vZGVzIGFsc28gc2hvdWxkIGFsd2F5cyBiZSBwYXRjaGVkLCBiZWNhdXNlIGV2ZW4gaWYgdGhlXG4gIC8vIGNvbXBvbmVudCBkb2Vzbid0IG5lZWQgdG8gdXBkYXRlLCBpdCBuZWVkcyB0byBwZXJzaXN0IHRoZSBpbnN0YW5jZSBvbiB0b1xuICAvLyB0aGUgbmV4dCB2bm9kZSBzbyB0aGF0IGl0IGNhbiBiZSBwcm9wZXJseSB1bm1vdW50ZWQgbGF0ZXIuXG4gICh2bm9kZS5wYXRjaEZsYWcgPiAwIHx8IHNoYXBlRmxhZyAmIDYpICYmIC8vIHRoZSBFVkVOVFMgZmxhZyBpcyBvbmx5IGZvciBoeWRyYXRpb24gYW5kIGlmIGl0IGlzIHRoZSBvbmx5IGZsYWcsIHRoZVxuICAvLyB2bm9kZSBzaG91bGQgbm90IGJlIGNvbnNpZGVyZWQgZHluYW1pYyBkdWUgdG8gaGFuZGxlciBjYWNoaW5nLlxuICB2bm9kZS5wYXRjaEZsYWcgIT09IDMyKSB7XG4gICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xuICB9XG4gIHJldHVybiB2bm9kZTtcbn1cbmNvbnN0IGNyZWF0ZVZOb2RlID0gY3JlYXRlVk5vZGVXaXRoQXJnc1RyYW5zZm9ybSA7XG5mdW5jdGlvbiBfY3JlYXRlVk5vZGUodHlwZSwgcHJvcHMgPSBudWxsLCBjaGlsZHJlbiA9IG51bGwsIHBhdGNoRmxhZyA9IDAsIGR5bmFtaWNQcm9wcyA9IG51bGwsIGlzQmxvY2tOb2RlID0gZmFsc2UpIHtcbiAgaWYgKCF0eXBlIHx8IHR5cGUgPT09IE5VTExfRFlOQU1JQ19DT01QT05FTlQpIHtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHdhcm4kMShgSW52YWxpZCB2bm9kZSB0eXBlIHdoZW4gY3JlYXRpbmcgdm5vZGU6ICR7dHlwZX0uYCk7XG4gICAgfVxuICAgIHR5cGUgPSBDb21tZW50O1xuICB9XG4gIGlmIChpc1ZOb2RlKHR5cGUpKSB7XG4gICAgY29uc3QgY2xvbmVkID0gY2xvbmVWTm9kZShcbiAgICAgIHR5cGUsXG4gICAgICBwcm9wcyxcbiAgICAgIHRydWVcbiAgICAgIC8qIG1lcmdlUmVmOiB0cnVlICovXG4gICAgKTtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKGNsb25lZCwgY2hpbGRyZW4pO1xuICAgIH1cbiAgICBpZiAoaXNCbG9ja1RyZWVFbmFibGVkID4gMCAmJiAhaXNCbG9ja05vZGUgJiYgY3VycmVudEJsb2NrKSB7XG4gICAgICBpZiAoY2xvbmVkLnNoYXBlRmxhZyAmIDYpIHtcbiAgICAgICAgY3VycmVudEJsb2NrW2N1cnJlbnRCbG9jay5pbmRleE9mKHR5cGUpXSA9IGNsb25lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRCbG9jay5wdXNoKGNsb25lZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNsb25lZC5wYXRjaEZsYWcgPSAtMjtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG4gIGlmIChpc0NsYXNzQ29tcG9uZW50KHR5cGUpKSB7XG4gICAgdHlwZSA9IHR5cGUuX192Y2NPcHRzO1xuICB9XG4gIGlmIChwcm9wcykge1xuICAgIHByb3BzID0gZ3VhcmRSZWFjdGl2ZVByb3BzKHByb3BzKTtcbiAgICBsZXQgeyBjbGFzczoga2xhc3MsIHN0eWxlIH0gPSBwcm9wcztcbiAgICBpZiAoa2xhc3MgJiYgIWlzU3RyaW5nKGtsYXNzKSkge1xuICAgICAgcHJvcHMuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhrbGFzcyk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChzdHlsZSkpIHtcbiAgICAgIGlmIChpc1Byb3h5KHN0eWxlKSAmJiAhaXNBcnJheShzdHlsZSkpIHtcbiAgICAgICAgc3R5bGUgPSBleHRlbmQoe30sIHN0eWxlKTtcbiAgICAgIH1cbiAgICAgIHByb3BzLnN0eWxlID0gbm9ybWFsaXplU3R5bGUoc3R5bGUpO1xuICAgIH1cbiAgfVxuICBjb25zdCBzaGFwZUZsYWcgPSBpc1N0cmluZyh0eXBlKSA/IDEgOiBpc1N1c3BlbnNlKHR5cGUpID8gMTI4IDogaXNUZWxlcG9ydCh0eXBlKSA/IDY0IDogaXNPYmplY3QodHlwZSkgPyA0IDogaXNGdW5jdGlvbih0eXBlKSA/IDIgOiAwO1xuICBpZiAoc2hhcGVGbGFnICYgNCAmJiBpc1Byb3h5KHR5cGUpKSB7XG4gICAgdHlwZSA9IHRvUmF3KHR5cGUpO1xuICAgIHdhcm4kMShcbiAgICAgIGBWdWUgcmVjZWl2ZWQgYSBDb21wb25lbnQgdGhhdCB3YXMgbWFkZSBhIHJlYWN0aXZlIG9iamVjdC4gVGhpcyBjYW4gbGVhZCB0byB1bm5lY2Vzc2FyeSBwZXJmb3JtYW5jZSBvdmVyaGVhZCBhbmQgc2hvdWxkIGJlIGF2b2lkZWQgYnkgbWFya2luZyB0aGUgY29tcG9uZW50IHdpdGggXFxgbWFya1Jhd1xcYCBvciB1c2luZyBcXGBzaGFsbG93UmVmXFxgIGluc3RlYWQgb2YgXFxgcmVmXFxgLmAsXG4gICAgICBgXG5Db21wb25lbnQgdGhhdCB3YXMgbWFkZSByZWFjdGl2ZTogYCxcbiAgICAgIHR5cGVcbiAgICApO1xuICB9XG4gIHJldHVybiBjcmVhdGVCYXNlVk5vZGUoXG4gICAgdHlwZSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBwYXRjaEZsYWcsXG4gICAgZHluYW1pY1Byb3BzLFxuICAgIHNoYXBlRmxhZyxcbiAgICBpc0Jsb2NrTm9kZSxcbiAgICB0cnVlXG4gICk7XG59XG5mdW5jdGlvbiBndWFyZFJlYWN0aXZlUHJvcHMocHJvcHMpIHtcbiAgaWYgKCFwcm9wcykgcmV0dXJuIG51bGw7XG4gIHJldHVybiBpc1Byb3h5KHByb3BzKSB8fCBpc0ludGVybmFsT2JqZWN0KHByb3BzKSA/IGV4dGVuZCh7fSwgcHJvcHMpIDogcHJvcHM7XG59XG5mdW5jdGlvbiBjbG9uZVZOb2RlKHZub2RlLCBleHRyYVByb3BzLCBtZXJnZVJlZiA9IGZhbHNlLCBjbG9uZVRyYW5zaXRpb24gPSBmYWxzZSkge1xuICBjb25zdCB7IHByb3BzLCByZWYsIHBhdGNoRmxhZywgY2hpbGRyZW4sIHRyYW5zaXRpb24gfSA9IHZub2RlO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IGV4dHJhUHJvcHMgPyBtZXJnZVByb3BzKHByb3BzIHx8IHt9LCBleHRyYVByb3BzKSA6IHByb3BzO1xuICBjb25zdCBjbG9uZWQgPSB7XG4gICAgX192X2lzVk5vZGU6IHRydWUsXG4gICAgX192X3NraXA6IHRydWUsXG4gICAgdHlwZTogdm5vZGUudHlwZSxcbiAgICBwcm9wczogbWVyZ2VkUHJvcHMsXG4gICAga2V5OiBtZXJnZWRQcm9wcyAmJiBub3JtYWxpemVLZXkobWVyZ2VkUHJvcHMpLFxuICAgIHJlZjogZXh0cmFQcm9wcyAmJiBleHRyYVByb3BzLnJlZiA/IChcbiAgICAgIC8vICMyMDc4IGluIHRoZSBjYXNlIG9mIDxjb21wb25lbnQgOmlzPVwidm5vZGVcIiByZWY9XCJleHRyYVwiLz5cbiAgICAgIC8vIGlmIHRoZSB2bm9kZSBpdHNlbGYgYWxyZWFkeSBoYXMgYSByZWYsIGNsb25lVk5vZGUgd2lsbCBuZWVkIHRvIG1lcmdlXG4gICAgICAvLyB0aGUgcmVmcyBzbyB0aGUgc2luZ2xlIHZub2RlIGNhbiBiZSBzZXQgb24gbXVsdGlwbGUgcmVmc1xuICAgICAgbWVyZ2VSZWYgJiYgcmVmID8gaXNBcnJheShyZWYpID8gcmVmLmNvbmNhdChub3JtYWxpemVSZWYoZXh0cmFQcm9wcykpIDogW3JlZiwgbm9ybWFsaXplUmVmKGV4dHJhUHJvcHMpXSA6IG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKVxuICAgICkgOiByZWYsXG4gICAgc2NvcGVJZDogdm5vZGUuc2NvcGVJZCxcbiAgICBzbG90U2NvcGVJZHM6IHZub2RlLnNsb3RTY29wZUlkcyxcbiAgICBjaGlsZHJlbjogcGF0Y2hGbGFnID09PSAtMSAmJiBpc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuLm1hcChkZWVwQ2xvbmVWTm9kZSkgOiBjaGlsZHJlbixcbiAgICB0YXJnZXQ6IHZub2RlLnRhcmdldCxcbiAgICB0YXJnZXRTdGFydDogdm5vZGUudGFyZ2V0U3RhcnQsXG4gICAgdGFyZ2V0QW5jaG9yOiB2bm9kZS50YXJnZXRBbmNob3IsXG4gICAgc3RhdGljQ291bnQ6IHZub2RlLnN0YXRpY0NvdW50LFxuICAgIHNoYXBlRmxhZzogdm5vZGUuc2hhcGVGbGFnLFxuICAgIC8vIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgd2l0aCBleHRyYSBwcm9wcywgd2UgY2FuIG5vIGxvbmdlciBhc3N1bWUgaXRzXG4gICAgLy8gZXhpc3RpbmcgcGF0Y2ggZmxhZyB0byBiZSByZWxpYWJsZSBhbmQgbmVlZCB0byBhZGQgdGhlIEZVTExfUFJPUFMgZmxhZy5cbiAgICAvLyBub3RlOiBwcmVzZXJ2ZSBmbGFnIGZvciBmcmFnbWVudHMgc2luY2UgdGhleSB1c2UgdGhlIGZsYWcgZm9yIGNoaWxkcmVuXG4gICAgLy8gZmFzdCBwYXRocyBvbmx5LlxuICAgIHBhdGNoRmxhZzogZXh0cmFQcm9wcyAmJiB2bm9kZS50eXBlICE9PSBGcmFnbWVudCA/IHBhdGNoRmxhZyA9PT0gLTEgPyAxNiA6IHBhdGNoRmxhZyB8IDE2IDogcGF0Y2hGbGFnLFxuICAgIGR5bmFtaWNQcm9wczogdm5vZGUuZHluYW1pY1Byb3BzLFxuICAgIGR5bmFtaWNDaGlsZHJlbjogdm5vZGUuZHluYW1pY0NoaWxkcmVuLFxuICAgIGFwcENvbnRleHQ6IHZub2RlLmFwcENvbnRleHQsXG4gICAgZGlyczogdm5vZGUuZGlycyxcbiAgICB0cmFuc2l0aW9uLFxuICAgIC8vIFRoZXNlIHNob3VsZCB0ZWNobmljYWxseSBvbmx5IGJlIG5vbi1udWxsIG9uIG1vdW50ZWQgVk5vZGVzLiBIb3dldmVyLFxuICAgIC8vIHRoZXkgKnNob3VsZCogYmUgY29waWVkIGZvciBrZXB0LWFsaXZlIHZub2Rlcy4gU28gd2UganVzdCBhbHdheXMgY29weVxuICAgIC8vIHRoZW0gc2luY2UgdGhlbSBiZWluZyBub24tbnVsbCBkdXJpbmcgYSBtb3VudCBkb2Vzbid0IGFmZmVjdCB0aGUgbG9naWMgYXNcbiAgICAvLyB0aGV5IHdpbGwgc2ltcGx5IGJlIG92ZXJ3cml0dGVuLlxuICAgIGNvbXBvbmVudDogdm5vZGUuY29tcG9uZW50LFxuICAgIHN1c3BlbnNlOiB2bm9kZS5zdXNwZW5zZSxcbiAgICBzc0NvbnRlbnQ6IHZub2RlLnNzQ29udGVudCAmJiBjbG9uZVZOb2RlKHZub2RlLnNzQ29udGVudCksXG4gICAgc3NGYWxsYmFjazogdm5vZGUuc3NGYWxsYmFjayAmJiBjbG9uZVZOb2RlKHZub2RlLnNzRmFsbGJhY2spLFxuICAgIGVsOiB2bm9kZS5lbCxcbiAgICBhbmNob3I6IHZub2RlLmFuY2hvcixcbiAgICBjdHg6IHZub2RlLmN0eCxcbiAgICBjZTogdm5vZGUuY2VcbiAgfTtcbiAgaWYgKHRyYW5zaXRpb24gJiYgY2xvbmVUcmFuc2l0aW9uKSB7XG4gICAgc2V0VHJhbnNpdGlvbkhvb2tzKFxuICAgICAgY2xvbmVkLFxuICAgICAgdHJhbnNpdGlvbi5jbG9uZShjbG9uZWQpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY2xvbmVkO1xufVxuZnVuY3Rpb24gZGVlcENsb25lVk5vZGUodm5vZGUpIHtcbiAgY29uc3QgY2xvbmVkID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGlmIChpc0FycmF5KHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGNsb25lZC5jaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuLm1hcChkZWVwQ2xvbmVWTm9kZSk7XG4gIH1cbiAgcmV0dXJuIGNsb25lZDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSh0ZXh0ID0gXCIgXCIsIGZsYWcgPSAwKSB7XG4gIHJldHVybiBjcmVhdGVWTm9kZShUZXh0LCBudWxsLCB0ZXh0LCBmbGFnKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY1ZOb2RlKGNvbnRlbnQsIG51bWJlck9mTm9kZXMpIHtcbiAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShTdGF0aWMsIG51bGwsIGNvbnRlbnQpO1xuICB2bm9kZS5zdGF0aWNDb3VudCA9IG51bWJlck9mTm9kZXM7XG4gIHJldHVybiB2bm9kZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnRWTm9kZSh0ZXh0ID0gXCJcIiwgYXNCbG9jayA9IGZhbHNlKSB7XG4gIHJldHVybiBhc0Jsb2NrID8gKG9wZW5CbG9jaygpLCBjcmVhdGVCbG9jayhDb21tZW50LCBudWxsLCB0ZXh0KSkgOiBjcmVhdGVWTm9kZShDb21tZW50LCBudWxsLCB0ZXh0KTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZOb2RlKGNoaWxkKSB7XG4gIGlmIChjaGlsZCA9PSBudWxsIHx8IHR5cGVvZiBjaGlsZCA9PT0gXCJib29sZWFuXCIpIHtcbiAgICByZXR1cm4gY3JlYXRlVk5vZGUoQ29tbWVudCk7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShjaGlsZCkpIHtcbiAgICByZXR1cm4gY3JlYXRlVk5vZGUoXG4gICAgICBGcmFnbWVudCxcbiAgICAgIG51bGwsXG4gICAgICAvLyAjMzY2NiwgYXZvaWQgcmVmZXJlbmNlIHBvbGx1dGlvbiB3aGVuIHJldXNpbmcgdm5vZGVcbiAgICAgIGNoaWxkLnNsaWNlKClcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzVk5vZGUoY2hpbGQpKSB7XG4gICAgcmV0dXJuIGNsb25lSWZNb3VudGVkKGNoaWxkKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlVk5vZGUoVGV4dCwgbnVsbCwgU3RyaW5nKGNoaWxkKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNsb25lSWZNb3VudGVkKGNoaWxkKSB7XG4gIHJldHVybiBjaGlsZC5lbCA9PT0gbnVsbCAmJiBjaGlsZC5wYXRjaEZsYWcgIT09IC0xIHx8IGNoaWxkLm1lbW8gPyBjaGlsZCA6IGNsb25lVk5vZGUoY2hpbGQpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuKSB7XG4gIGxldCB0eXBlID0gMDtcbiAgY29uc3QgeyBzaGFwZUZsYWcgfSA9IHZub2RlO1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgfSBlbHNlIGlmIChpc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIHR5cGUgPSAxNjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09IFwib2JqZWN0XCIpIHtcbiAgICBpZiAoc2hhcGVGbGFnICYgKDEgfCA2NCkpIHtcbiAgICAgIGNvbnN0IHNsb3QgPSBjaGlsZHJlbi5kZWZhdWx0O1xuICAgICAgaWYgKHNsb3QpIHtcbiAgICAgICAgc2xvdC5fYyAmJiAoc2xvdC5fZCA9IGZhbHNlKTtcbiAgICAgICAgbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIHNsb3QoKSk7XG4gICAgICAgIHNsb3QuX2MgJiYgKHNsb3QuX2QgPSB0cnVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZSA9IDMyO1xuICAgICAgY29uc3Qgc2xvdEZsYWcgPSBjaGlsZHJlbi5fO1xuICAgICAgaWYgKCFzbG90RmxhZyAmJiAhaXNJbnRlcm5hbE9iamVjdChjaGlsZHJlbikpIHtcbiAgICAgICAgY2hpbGRyZW4uX2N0eCA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgICAgIH0gZWxzZSBpZiAoc2xvdEZsYWcgPT09IDMgJiYgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKSB7XG4gICAgICAgIGlmIChjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2Uuc2xvdHMuXyA9PT0gMSkge1xuICAgICAgICAgIGNoaWxkcmVuLl8gPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoaWxkcmVuLl8gPSAyO1xuICAgICAgICAgIHZub2RlLnBhdGNoRmxhZyB8PSAxMDI0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24oY2hpbGRyZW4pKSB7XG4gICAgY2hpbGRyZW4gPSB7IGRlZmF1bHQ6IGNoaWxkcmVuLCBfY3R4OiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgfTtcbiAgICB0eXBlID0gMzI7XG4gIH0gZWxzZSB7XG4gICAgY2hpbGRyZW4gPSBTdHJpbmcoY2hpbGRyZW4pO1xuICAgIGlmIChzaGFwZUZsYWcgJiA2NCkge1xuICAgICAgdHlwZSA9IDE2O1xuICAgICAgY2hpbGRyZW4gPSBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSA4O1xuICAgIH1cbiAgfVxuICB2bm9kZS5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB2bm9kZS5zaGFwZUZsYWcgfD0gdHlwZTtcbn1cbmZ1bmN0aW9uIG1lcmdlUHJvcHMoLi4uYXJncykge1xuICBjb25zdCByZXQgPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdG9NZXJnZSA9IGFyZ3NbaV07XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdG9NZXJnZSkge1xuICAgICAgaWYgKGtleSA9PT0gXCJjbGFzc1wiKSB7XG4gICAgICAgIGlmIChyZXQuY2xhc3MgIT09IHRvTWVyZ2UuY2xhc3MpIHtcbiAgICAgICAgICByZXQuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhbcmV0LmNsYXNzLCB0b01lcmdlLmNsYXNzXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcInN0eWxlXCIpIHtcbiAgICAgICAgcmV0LnN0eWxlID0gbm9ybWFsaXplU3R5bGUoW3JldC5zdHlsZSwgdG9NZXJnZS5zdHlsZV0pO1xuICAgICAgfSBlbHNlIGlmIChpc09uKGtleSkpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSByZXRba2V5XTtcbiAgICAgICAgY29uc3QgaW5jb21pbmcgPSB0b01lcmdlW2tleV07XG4gICAgICAgIGlmIChpbmNvbWluZyAmJiBleGlzdGluZyAhPT0gaW5jb21pbmcgJiYgIShpc0FycmF5KGV4aXN0aW5nKSAmJiBleGlzdGluZy5pbmNsdWRlcyhpbmNvbWluZykpKSB7XG4gICAgICAgICAgcmV0W2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgaW5jb21pbmcpIDogaW5jb21pbmc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoa2V5ICE9PSBcIlwiKSB7XG4gICAgICAgIHJldFtrZXldID0gdG9NZXJnZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gaW52b2tlVk5vZGVIb29rKGhvb2ssIGluc3RhbmNlLCB2bm9kZSwgcHJldlZOb2RlID0gbnVsbCkge1xuICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgNywgW1xuICAgIHZub2RlLFxuICAgIHByZXZWTm9kZVxuICBdKTtcbn1cblxuY29uc3QgZW1wdHlBcHBDb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xubGV0IHVpZCA9IDA7XG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSh2bm9kZSwgcGFyZW50LCBzdXNwZW5zZSkge1xuICBjb25zdCB0eXBlID0gdm5vZGUudHlwZTtcbiAgY29uc3QgYXBwQ29udGV4dCA9IChwYXJlbnQgPyBwYXJlbnQuYXBwQ29udGV4dCA6IHZub2RlLmFwcENvbnRleHQpIHx8IGVtcHR5QXBwQ29udGV4dDtcbiAgY29uc3QgaW5zdGFuY2UgPSB7XG4gICAgdWlkOiB1aWQrKyxcbiAgICB2bm9kZSxcbiAgICB0eXBlLFxuICAgIHBhcmVudCxcbiAgICBhcHBDb250ZXh0LFxuICAgIHJvb3Q6IG51bGwsXG4gICAgLy8gdG8gYmUgaW1tZWRpYXRlbHkgc2V0XG4gICAgbmV4dDogbnVsbCxcbiAgICBzdWJUcmVlOiBudWxsLFxuICAgIC8vIHdpbGwgYmUgc2V0IHN5bmNocm9ub3VzbHkgcmlnaHQgYWZ0ZXIgY3JlYXRpb25cbiAgICBlZmZlY3Q6IG51bGwsXG4gICAgdXBkYXRlOiBudWxsLFxuICAgIC8vIHdpbGwgYmUgc2V0IHN5bmNocm9ub3VzbHkgcmlnaHQgYWZ0ZXIgY3JlYXRpb25cbiAgICBqb2I6IG51bGwsXG4gICAgc2NvcGU6IG5ldyBFZmZlY3RTY29wZShcbiAgICAgIHRydWVcbiAgICAgIC8qIGRldGFjaGVkICovXG4gICAgKSxcbiAgICByZW5kZXI6IG51bGwsXG4gICAgcHJveHk6IG51bGwsXG4gICAgZXhwb3NlZDogbnVsbCxcbiAgICBleHBvc2VQcm94eTogbnVsbCxcbiAgICB3aXRoUHJveHk6IG51bGwsXG4gICAgcHJvdmlkZXM6IHBhcmVudCA/IHBhcmVudC5wcm92aWRlcyA6IE9iamVjdC5jcmVhdGUoYXBwQ29udGV4dC5wcm92aWRlcyksXG4gICAgaWRzOiBwYXJlbnQgPyBwYXJlbnQuaWRzIDogW1wiXCIsIDAsIDBdLFxuICAgIGFjY2Vzc0NhY2hlOiBudWxsLFxuICAgIHJlbmRlckNhY2hlOiBbXSxcbiAgICAvLyBsb2NhbCByZXNvbHZlZCBhc3NldHNcbiAgICBjb21wb25lbnRzOiBudWxsLFxuICAgIGRpcmVjdGl2ZXM6IG51bGwsXG4gICAgLy8gcmVzb2x2ZWQgcHJvcHMgYW5kIGVtaXRzIG9wdGlvbnNcbiAgICBwcm9wc09wdGlvbnM6IG5vcm1hbGl6ZVByb3BzT3B0aW9ucyh0eXBlLCBhcHBDb250ZXh0KSxcbiAgICBlbWl0c09wdGlvbnM6IG5vcm1hbGl6ZUVtaXRzT3B0aW9ucyh0eXBlLCBhcHBDb250ZXh0KSxcbiAgICAvLyBlbWl0XG4gICAgZW1pdDogbnVsbCxcbiAgICAvLyB0byBiZSBzZXQgaW1tZWRpYXRlbHlcbiAgICBlbWl0dGVkOiBudWxsLFxuICAgIC8vIHByb3BzIGRlZmF1bHQgdmFsdWVcbiAgICBwcm9wc0RlZmF1bHRzOiBFTVBUWV9PQkosXG4gICAgLy8gaW5oZXJpdEF0dHJzXG4gICAgaW5oZXJpdEF0dHJzOiB0eXBlLmluaGVyaXRBdHRycyxcbiAgICAvLyBzdGF0ZVxuICAgIGN0eDogRU1QVFlfT0JKLFxuICAgIGRhdGE6IEVNUFRZX09CSixcbiAgICBwcm9wczogRU1QVFlfT0JKLFxuICAgIGF0dHJzOiBFTVBUWV9PQkosXG4gICAgc2xvdHM6IEVNUFRZX09CSixcbiAgICByZWZzOiBFTVBUWV9PQkosXG4gICAgc2V0dXBTdGF0ZTogRU1QVFlfT0JKLFxuICAgIHNldHVwQ29udGV4dDogbnVsbCxcbiAgICAvLyBzdXNwZW5zZSByZWxhdGVkXG4gICAgc3VzcGVuc2UsXG4gICAgc3VzcGVuc2VJZDogc3VzcGVuc2UgPyBzdXNwZW5zZS5wZW5kaW5nSWQgOiAwLFxuICAgIGFzeW5jRGVwOiBudWxsLFxuICAgIGFzeW5jUmVzb2x2ZWQ6IGZhbHNlLFxuICAgIC8vIGxpZmVjeWNsZSBob29rc1xuICAgIC8vIG5vdCB1c2luZyBlbnVtcyBoZXJlIGJlY2F1c2UgaXQgcmVzdWx0cyBpbiBjb21wdXRlZCBwcm9wZXJ0aWVzXG4gICAgaXNNb3VudGVkOiBmYWxzZSxcbiAgICBpc1VubW91bnRlZDogZmFsc2UsXG4gICAgaXNEZWFjdGl2YXRlZDogZmFsc2UsXG4gICAgYmM6IG51bGwsXG4gICAgYzogbnVsbCxcbiAgICBibTogbnVsbCxcbiAgICBtOiBudWxsLFxuICAgIGJ1OiBudWxsLFxuICAgIHU6IG51bGwsXG4gICAgdW06IG51bGwsXG4gICAgYnVtOiBudWxsLFxuICAgIGRhOiBudWxsLFxuICAgIGE6IG51bGwsXG4gICAgcnRnOiBudWxsLFxuICAgIHJ0YzogbnVsbCxcbiAgICBlYzogbnVsbCxcbiAgICBzcDogbnVsbFxuICB9O1xuICB7XG4gICAgaW5zdGFuY2UuY3R4ID0gY3JlYXRlRGV2UmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XG4gIH1cbiAgaW5zdGFuY2Uucm9vdCA9IHBhcmVudCA/IHBhcmVudC5yb290IDogaW5zdGFuY2U7XG4gIGluc3RhbmNlLmVtaXQgPSBlbWl0LmJpbmQobnVsbCwgaW5zdGFuY2UpO1xuICBpZiAodm5vZGUuY2UpIHtcbiAgICB2bm9kZS5jZShpbnN0YW5jZSk7XG4gIH1cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxubGV0IGN1cnJlbnRJbnN0YW5jZSA9IG51bGw7XG5jb25zdCBnZXRDdXJyZW50SW5zdGFuY2UgPSAoKSA9PiBjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xubGV0IGludGVybmFsU2V0Q3VycmVudEluc3RhbmNlO1xubGV0IHNldEluU1NSU2V0dXBTdGF0ZTtcbntcbiAgY29uc3QgZyA9IGdldEdsb2JhbFRoaXMoKTtcbiAgY29uc3QgcmVnaXN0ZXJHbG9iYWxTZXR0ZXIgPSAoa2V5LCBzZXR0ZXIpID0+IHtcbiAgICBsZXQgc2V0dGVycztcbiAgICBpZiAoIShzZXR0ZXJzID0gZ1trZXldKSkgc2V0dGVycyA9IGdba2V5XSA9IFtdO1xuICAgIHNldHRlcnMucHVzaChzZXR0ZXIpO1xuICAgIHJldHVybiAodikgPT4ge1xuICAgICAgaWYgKHNldHRlcnMubGVuZ3RoID4gMSkgc2V0dGVycy5mb3JFYWNoKChzZXQpID0+IHNldCh2KSk7XG4gICAgICBlbHNlIHNldHRlcnNbMF0odik7XG4gICAgfTtcbiAgfTtcbiAgaW50ZXJuYWxTZXRDdXJyZW50SW5zdGFuY2UgPSByZWdpc3Rlckdsb2JhbFNldHRlcihcbiAgICBgX19WVUVfSU5TVEFOQ0VfU0VUVEVSU19fYCxcbiAgICAodikgPT4gY3VycmVudEluc3RhbmNlID0gdlxuICApO1xuICBzZXRJblNTUlNldHVwU3RhdGUgPSByZWdpc3Rlckdsb2JhbFNldHRlcihcbiAgICBgX19WVUVfU1NSX1NFVFRFUlNfX2AsXG4gICAgKHYpID0+IGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IHZcbiAgKTtcbn1cbmNvbnN0IHNldEN1cnJlbnRJbnN0YW5jZSA9IChpbnN0YW5jZSkgPT4ge1xuICBjb25zdCBwcmV2ID0gY3VycmVudEluc3RhbmNlO1xuICBpbnRlcm5hbFNldEN1cnJlbnRJbnN0YW5jZShpbnN0YW5jZSk7XG4gIGluc3RhbmNlLnNjb3BlLm9uKCk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgaW5zdGFuY2Uuc2NvcGUub2ZmKCk7XG4gICAgaW50ZXJuYWxTZXRDdXJyZW50SW5zdGFuY2UocHJldik7XG4gIH07XG59O1xuY29uc3QgdW5zZXRDdXJyZW50SW5zdGFuY2UgPSAoKSA9PiB7XG4gIGN1cnJlbnRJbnN0YW5jZSAmJiBjdXJyZW50SW5zdGFuY2Uuc2NvcGUub2ZmKCk7XG4gIGludGVybmFsU2V0Q3VycmVudEluc3RhbmNlKG51bGwpO1xufTtcbmNvbnN0IGlzQnVpbHRJblRhZyA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKFwic2xvdCxjb21wb25lbnRcIik7XG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSwgeyBpc05hdGl2ZVRhZyB9KSB7XG4gIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgaXNOYXRpdmVUYWcobmFtZSkpIHtcbiAgICB3YXJuJDEoXG4gICAgICBcIkRvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgaWQ6IFwiICsgbmFtZVxuICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UpIHtcbiAgcmV0dXJuIGluc3RhbmNlLnZub2RlLnNoYXBlRmxhZyAmIDQ7XG59XG5sZXQgaXNJblNTUkNvbXBvbmVudFNldHVwID0gZmFsc2U7XG5mdW5jdGlvbiBzZXR1cENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IgPSBmYWxzZSwgb3B0aW1pemVkID0gZmFsc2UpIHtcbiAgaXNTU1IgJiYgc2V0SW5TU1JTZXR1cFN0YXRlKGlzU1NSKTtcbiAgY29uc3QgeyBwcm9wcywgY2hpbGRyZW4gfSA9IGluc3RhbmNlLnZub2RlO1xuICBjb25zdCBpc1N0YXRlZnVsID0gaXNTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSk7XG4gIGluaXRQcm9wcyhpbnN0YW5jZSwgcHJvcHMsIGlzU3RhdGVmdWwsIGlzU1NSKTtcbiAgaW5pdFNsb3RzKGluc3RhbmNlLCBjaGlsZHJlbiwgb3B0aW1pemVkIHx8IGlzU1NSKTtcbiAgY29uc3Qgc2V0dXBSZXN1bHQgPSBpc1N0YXRlZnVsID8gc2V0dXBTdGF0ZWZ1bENvbXBvbmVudChpbnN0YW5jZSwgaXNTU1IpIDogdm9pZCAwO1xuICBpc1NTUiAmJiBzZXRJblNTUlNldHVwU3RhdGUoZmFsc2UpO1xuICByZXR1cm4gc2V0dXBSZXN1bHQ7XG59XG5mdW5jdGlvbiBzZXR1cFN0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlLCBpc1NTUikge1xuICB2YXIgX2E7XG4gIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XG4gIHtcbiAgICBpZiAoQ29tcG9uZW50Lm5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShDb21wb25lbnQubmFtZSwgaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcpO1xuICAgIH1cbiAgICBpZiAoQ29tcG9uZW50LmNvbXBvbmVudHMpIHtcbiAgICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoQ29tcG9uZW50LmNvbXBvbmVudHMpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZXNbaV0sIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKENvbXBvbmVudC5kaXJlY3RpdmVzKSB7XG4gICAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKENvbXBvbmVudC5kaXJlY3RpdmVzKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsaWRhdGVEaXJlY3RpdmVOYW1lKG5hbWVzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKENvbXBvbmVudC5jb21waWxlck9wdGlvbnMgJiYgaXNSdW50aW1lT25seSgpKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGBcImNvbXBpbGVyT3B0aW9uc1wiIGlzIG9ubHkgc3VwcG9ydGVkIHdoZW4gdXNpbmcgYSBidWlsZCBvZiBWdWUgdGhhdCBpbmNsdWRlcyB0aGUgcnVudGltZSBjb21waWxlci4gU2luY2UgeW91IGFyZSB1c2luZyBhIHJ1bnRpbWUtb25seSBidWlsZCwgdGhlIG9wdGlvbnMgc2hvdWxkIGJlIHBhc3NlZCB2aWEgeW91ciBidWlsZCB0b29sIGNvbmZpZyBpbnN0ZWFkLmBcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGluc3RhbmNlLmFjY2Vzc0NhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGluc3RhbmNlLnByb3h5ID0gbmV3IFByb3h5KGluc3RhbmNlLmN0eCwgUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzKTtcbiAge1xuICAgIGV4cG9zZVByb3BzT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcbiAgfVxuICBjb25zdCB7IHNldHVwIH0gPSBDb21wb25lbnQ7XG4gIGlmIChzZXR1cCkge1xuICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICBjb25zdCBzZXR1cENvbnRleHQgPSBpbnN0YW5jZS5zZXR1cENvbnRleHQgPSBzZXR1cC5sZW5ndGggPiAxID8gY3JlYXRlU2V0dXBDb250ZXh0KGluc3RhbmNlKSA6IG51bGw7XG4gICAgY29uc3QgcmVzZXQgPSBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgIGNvbnN0IHNldHVwUmVzdWx0ID0gY2FsbFdpdGhFcnJvckhhbmRsaW5nKFxuICAgICAgc2V0dXAsXG4gICAgICBpbnN0YW5jZSxcbiAgICAgIDAsXG4gICAgICBbXG4gICAgICAgIHNoYWxsb3dSZWFkb25seShpbnN0YW5jZS5wcm9wcykgLFxuICAgICAgICBzZXR1cENvbnRleHRcbiAgICAgIF1cbiAgICApO1xuICAgIGNvbnN0IGlzQXN5bmNTZXR1cCA9IGlzUHJvbWlzZShzZXR1cFJlc3VsdCk7XG4gICAgcmVzZXRUcmFja2luZygpO1xuICAgIHJlc2V0KCk7XG4gICAgaWYgKChpc0FzeW5jU2V0dXAgfHwgaW5zdGFuY2Uuc3ApICYmICFpc0FzeW5jV3JhcHBlcihpbnN0YW5jZSkpIHtcbiAgICAgIG1hcmtBc3luY0JvdW5kYXJ5KGluc3RhbmNlKTtcbiAgICB9XG4gICAgaWYgKGlzQXN5bmNTZXR1cCkge1xuICAgICAgc2V0dXBSZXN1bHQudGhlbih1bnNldEN1cnJlbnRJbnN0YW5jZSwgdW5zZXRDdXJyZW50SW5zdGFuY2UpO1xuICAgICAgaWYgKGlzU1NSKSB7XG4gICAgICAgIHJldHVybiBzZXR1cFJlc3VsdC50aGVuKChyZXNvbHZlZFJlc3VsdCkgPT4ge1xuICAgICAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCByZXNvbHZlZFJlc3VsdCwgaXNTU1IpO1xuICAgICAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIGluc3RhbmNlLCAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0YW5jZS5hc3luY0RlcCA9IHNldHVwUmVzdWx0O1xuICAgICAgICBpZiAoIWluc3RhbmNlLnN1c3BlbnNlKSB7XG4gICAgICAgICAgY29uc3QgbmFtZSA9IChfYSA9IENvbXBvbmVudC5uYW1lKSAhPSBudWxsID8gX2EgOiBcIkFub255bW91c1wiO1xuICAgICAgICAgIHdhcm4kMShcbiAgICAgICAgICAgIGBDb21wb25lbnQgPCR7bmFtZX0+OiBzZXR1cCBmdW5jdGlvbiByZXR1cm5lZCBhIHByb21pc2UsIGJ1dCBubyA8U3VzcGVuc2U+IGJvdW5kYXJ5IHdhcyBmb3VuZCBpbiB0aGUgcGFyZW50IGNvbXBvbmVudCB0cmVlLiBBIGNvbXBvbmVudCB3aXRoIGFzeW5jIHNldHVwKCkgbXVzdCBiZSBuZXN0ZWQgaW4gYSA8U3VzcGVuc2U+IGluIG9yZGVyIHRvIGJlIHJlbmRlcmVkLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCBzZXR1cFJlc3VsdCwgaXNTU1IpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSwgaXNTU1IpO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgc2V0dXBSZXN1bHQsIGlzU1NSKSB7XG4gIGlmIChpc0Z1bmN0aW9uKHNldHVwUmVzdWx0KSkge1xuICAgIGlmIChpbnN0YW5jZS50eXBlLl9fc3NySW5saW5lUmVuZGVyKSB7XG4gICAgICBpbnN0YW5jZS5zc3JSZW5kZXIgPSBzZXR1cFJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UucmVuZGVyID0gc2V0dXBSZXN1bHQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNldHVwUmVzdWx0KSkge1xuICAgIGlmIChpc1ZOb2RlKHNldHVwUmVzdWx0KSkge1xuICAgICAgd2FybiQxKFxuICAgICAgICBgc2V0dXAoKSBzaG91bGQgbm90IHJldHVybiBWTm9kZXMgZGlyZWN0bHkgLSByZXR1cm4gYSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5gXG4gICAgICApO1xuICAgIH1cbiAgICB7XG4gICAgICBpbnN0YW5jZS5kZXZ0b29sc1Jhd1NldHVwU3RhdGUgPSBzZXR1cFJlc3VsdDtcbiAgICB9XG4gICAgaW5zdGFuY2Uuc2V0dXBTdGF0ZSA9IHByb3h5UmVmcyhzZXR1cFJlc3VsdCk7XG4gICAge1xuICAgICAgZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHNldHVwUmVzdWx0ICE9PSB2b2lkIDApIHtcbiAgICB3YXJuJDEoXG4gICAgICBgc2V0dXAoKSBzaG91bGQgcmV0dXJuIGFuIG9iamVjdC4gUmVjZWl2ZWQ6ICR7c2V0dXBSZXN1bHQgPT09IG51bGwgPyBcIm51bGxcIiA6IHR5cGVvZiBzZXR1cFJlc3VsdH1gXG4gICAgKTtcbiAgfVxuICBmaW5pc2hDb21wb25lbnRTZXR1cChpbnN0YW5jZSwgaXNTU1IpO1xufVxubGV0IGNvbXBpbGUkMTtcbmxldCBpbnN0YWxsV2l0aFByb3h5O1xuZnVuY3Rpb24gcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIoX2NvbXBpbGUpIHtcbiAgY29tcGlsZSQxID0gX2NvbXBpbGU7XG4gIGluc3RhbGxXaXRoUHJveHkgPSAoaSkgPT4ge1xuICAgIGlmIChpLnJlbmRlci5fcmMpIHtcbiAgICAgIGkud2l0aFByb3h5ID0gbmV3IFByb3h5KGkuY3R4LCBSdW50aW1lQ29tcGlsZWRQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMpO1xuICAgIH1cbiAgfTtcbn1cbmNvbnN0IGlzUnVudGltZU9ubHkgPSAoKSA9PiAhY29tcGlsZSQxO1xuZnVuY3Rpb24gZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UsIGlzU1NSLCBza2lwT3B0aW9ucykge1xuICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xuICBpZiAoIWluc3RhbmNlLnJlbmRlcikge1xuICAgIGlmICghaXNTU1IgJiYgY29tcGlsZSQxICYmICFDb21wb25lbnQucmVuZGVyKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IENvbXBvbmVudC50ZW1wbGF0ZSB8fCByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSkudGVtcGxhdGU7XG4gICAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgICAge1xuICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYGNvbXBpbGVgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGlzQ3VzdG9tRWxlbWVudCwgY29tcGlsZXJPcHRpb25zIH0gPSBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZztcbiAgICAgICAgY29uc3QgeyBkZWxpbWl0ZXJzLCBjb21waWxlck9wdGlvbnM6IGNvbXBvbmVudENvbXBpbGVyT3B0aW9ucyB9ID0gQ29tcG9uZW50O1xuICAgICAgICBjb25zdCBmaW5hbENvbXBpbGVyT3B0aW9ucyA9IGV4dGVuZChcbiAgICAgICAgICBleHRlbmQoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlzQ3VzdG9tRWxlbWVudCxcbiAgICAgICAgICAgICAgZGVsaW1pdGVyc1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbXBpbGVyT3B0aW9uc1xuICAgICAgICAgICksXG4gICAgICAgICAgY29tcG9uZW50Q29tcGlsZXJPcHRpb25zXG4gICAgICAgICk7XG4gICAgICAgIENvbXBvbmVudC5yZW5kZXIgPSBjb21waWxlJDEodGVtcGxhdGUsIGZpbmFsQ29tcGlsZXJPcHRpb25zKTtcbiAgICAgICAge1xuICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBjb21waWxlYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaW5zdGFuY2UucmVuZGVyID0gQ29tcG9uZW50LnJlbmRlciB8fCBOT09QO1xuICAgIGlmIChpbnN0YWxsV2l0aFByb3h5KSB7XG4gICAgICBpbnN0YWxsV2l0aFByb3h5KGluc3RhbmNlKTtcbiAgICB9XG4gIH1cbiAge1xuICAgIGNvbnN0IHJlc2V0ID0gc2V0Q3VycmVudEluc3RhbmNlKGluc3RhbmNlKTtcbiAgICBwYXVzZVRyYWNraW5nKCk7XG4gICAgdHJ5IHtcbiAgICAgIGFwcGx5T3B0aW9ucyhpbnN0YW5jZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgIHJlc2V0KCk7XG4gICAgfVxuICB9XG4gIGlmICghQ29tcG9uZW50LnJlbmRlciAmJiBpbnN0YW5jZS5yZW5kZXIgPT09IE5PT1AgJiYgIWlzU1NSKSB7XG4gICAgaWYgKCFjb21waWxlJDEgJiYgQ29tcG9uZW50LnRlbXBsYXRlKSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGBDb21wb25lbnQgcHJvdmlkZWQgdGVtcGxhdGUgb3B0aW9uIGJ1dCBydW50aW1lIGNvbXBpbGF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBidWlsZCBvZiBWdWUuYCArIChgIFVzZSBcInZ1ZS5lc20tYnJvd3Nlci5qc1wiIGluc3RlYWQuYCApXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDEoYENvbXBvbmVudCBpcyBtaXNzaW5nIHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbjogYCwgQ29tcG9uZW50KTtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IGF0dHJzUHJveHlIYW5kbGVycyA9IHtcbiAgZ2V0KHRhcmdldCwga2V5KSB7XG4gICAgbWFya0F0dHJzQWNjZXNzZWQoKTtcbiAgICB0cmFjayh0YXJnZXQsIFwiZ2V0XCIsIFwiXCIpO1xuICAgIHJldHVybiB0YXJnZXRba2V5XTtcbiAgfSxcbiAgc2V0KCkge1xuICAgIHdhcm4kMShgc2V0dXBDb250ZXh0LmF0dHJzIGlzIHJlYWRvbmx5LmApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgZGVsZXRlUHJvcGVydHkoKSB7XG4gICAgd2FybiQxKGBzZXR1cENvbnRleHQuYXR0cnMgaXMgcmVhZG9ubHkuYCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59IDtcbmZ1bmN0aW9uIGdldFNsb3RzUHJveHkoaW5zdGFuY2UpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShpbnN0YW5jZS5zbG90cywge1xuICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIsIFwiJHNsb3RzXCIpO1xuICAgICAgcmV0dXJuIHRhcmdldFtrZXldO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVTZXR1cENvbnRleHQoaW5zdGFuY2UpIHtcbiAgY29uc3QgZXhwb3NlID0gKGV4cG9zZWQpID0+IHtcbiAgICB7XG4gICAgICBpZiAoaW5zdGFuY2UuZXhwb3NlZCkge1xuICAgICAgICB3YXJuJDEoYGV4cG9zZSgpIHNob3VsZCBiZSBjYWxsZWQgb25seSBvbmNlIHBlciBzZXR1cCgpLmApO1xuICAgICAgfVxuICAgICAgaWYgKGV4cG9zZWQgIT0gbnVsbCkge1xuICAgICAgICBsZXQgZXhwb3NlZFR5cGUgPSB0eXBlb2YgZXhwb3NlZDtcbiAgICAgICAgaWYgKGV4cG9zZWRUeXBlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkoZXhwb3NlZCkpIHtcbiAgICAgICAgICAgIGV4cG9zZWRUeXBlID0gXCJhcnJheVwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZWYoZXhwb3NlZCkpIHtcbiAgICAgICAgICAgIGV4cG9zZWRUeXBlID0gXCJyZWZcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cG9zZWRUeXBlICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgd2FybiQxKFxuICAgICAgICAgICAgYGV4cG9zZSgpIHNob3VsZCBiZSBwYXNzZWQgYSBwbGFpbiBvYmplY3QsIHJlY2VpdmVkICR7ZXhwb3NlZFR5cGV9LmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGluc3RhbmNlLmV4cG9zZWQgPSBleHBvc2VkIHx8IHt9O1xuICB9O1xuICB7XG4gICAgbGV0IGF0dHJzUHJveHk7XG4gICAgbGV0IHNsb3RzUHJveHk7XG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUoe1xuICAgICAgZ2V0IGF0dHJzKCkge1xuICAgICAgICByZXR1cm4gYXR0cnNQcm94eSB8fCAoYXR0cnNQcm94eSA9IG5ldyBQcm94eShpbnN0YW5jZS5hdHRycywgYXR0cnNQcm94eUhhbmRsZXJzKSk7XG4gICAgICB9LFxuICAgICAgZ2V0IHNsb3RzKCkge1xuICAgICAgICByZXR1cm4gc2xvdHNQcm94eSB8fCAoc2xvdHNQcm94eSA9IGdldFNsb3RzUHJveHkoaW5zdGFuY2UpKTtcbiAgICAgIH0sXG4gICAgICBnZXQgZW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIChldmVudCwgLi4uYXJncykgPT4gaW5zdGFuY2UuZW1pdChldmVudCwgLi4uYXJncyk7XG4gICAgICB9LFxuICAgICAgZXhwb3NlXG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlKGluc3RhbmNlKSB7XG4gIGlmIChpbnN0YW5jZS5leHBvc2VkKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlLmV4cG9zZVByb3h5IHx8IChpbnN0YW5jZS5leHBvc2VQcm94eSA9IG5ldyBQcm94eShwcm94eVJlZnMobWFya1JhdyhpbnN0YW5jZS5leHBvc2VkKSksIHtcbiAgICAgIGdldCh0YXJnZXQsIGtleSkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldCkge1xuICAgICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgaW4gcHVibGljUHJvcGVydGllc01hcCkge1xuICAgICAgICAgIHJldHVybiBwdWJsaWNQcm9wZXJ0aWVzTWFwW2tleV0oaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaGFzKHRhcmdldCwga2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgaW4gdGFyZ2V0IHx8IGtleSBpbiBwdWJsaWNQcm9wZXJ0aWVzTWFwO1xuICAgICAgfVxuICAgIH0pKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaW5zdGFuY2UucHJveHk7XG4gIH1cbn1cbmNvbnN0IGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG5jb25zdCBjbGFzc2lmeSA9IChzdHIpID0+IHN0ci5yZXBsYWNlKGNsYXNzaWZ5UkUsIChjKSA9PiBjLnRvVXBwZXJDYXNlKCkpLnJlcGxhY2UoL1stX10vZywgXCJcIik7XG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCwgaW5jbHVkZUluZmVycmVkID0gdHJ1ZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbihDb21wb25lbnQpID8gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIDogQ29tcG9uZW50Lm5hbWUgfHwgaW5jbHVkZUluZmVycmVkICYmIENvbXBvbmVudC5fX25hbWU7XG59XG5mdW5jdGlvbiBmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBDb21wb25lbnQsIGlzUm9vdCA9IGZhbHNlKSB7XG4gIGxldCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpO1xuICBpZiAoIW5hbWUgJiYgQ29tcG9uZW50Ll9fZmlsZSkge1xuICAgIGNvbnN0IG1hdGNoID0gQ29tcG9uZW50Ll9fZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC5cXHcrJC8pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgbmFtZSA9IG1hdGNoWzFdO1xuICAgIH1cbiAgfVxuICBpZiAoIW5hbWUgJiYgaW5zdGFuY2UgJiYgaW5zdGFuY2UucGFyZW50KSB7XG4gICAgY29uc3QgaW5mZXJGcm9tUmVnaXN0cnkgPSAocmVnaXN0cnkpID0+IHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHJlZ2lzdHJ5KSB7XG4gICAgICAgIGlmIChyZWdpc3RyeVtrZXldID09PSBDb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBuYW1lID0gaW5mZXJGcm9tUmVnaXN0cnkoXG4gICAgICBpbnN0YW5jZS5jb21wb25lbnRzIHx8IGluc3RhbmNlLnBhcmVudC50eXBlLmNvbXBvbmVudHNcbiAgICApIHx8IGluZmVyRnJvbVJlZ2lzdHJ5KGluc3RhbmNlLmFwcENvbnRleHQuY29tcG9uZW50cyk7XG4gIH1cbiAgcmV0dXJuIG5hbWUgPyBjbGFzc2lmeShuYW1lKSA6IGlzUm9vdCA/IGBBcHBgIDogYEFub255bW91c2A7XG59XG5mdW5jdGlvbiBpc0NsYXNzQ29tcG9uZW50KHZhbHVlKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKSAmJiBcIl9fdmNjT3B0c1wiIGluIHZhbHVlO1xufVxuXG5jb25zdCBjb21wdXRlZCA9IChnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucykgPT4ge1xuICBjb25zdCBjID0gY29tcHV0ZWQkMShnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucywgaXNJblNTUkNvbXBvbmVudFNldHVwKTtcbiAge1xuICAgIGNvbnN0IGkgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcbiAgICBpZiAoaSAmJiBpLmFwcENvbnRleHQuY29uZmlnLndhcm5SZWN1cnNpdmVDb21wdXRlZCkge1xuICAgICAgYy5fd2FyblJlY3Vyc2l2ZSA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBjO1xufTtcblxuZnVuY3Rpb24gaCh0eXBlLCBwcm9wc09yQ2hpbGRyZW4sIGNoaWxkcmVuKSB7XG4gIGNvbnN0IGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICBpZiAobCA9PT0gMikge1xuICAgIGlmIChpc09iamVjdChwcm9wc09yQ2hpbGRyZW4pICYmICFpc0FycmF5KHByb3BzT3JDaGlsZHJlbikpIHtcbiAgICAgIGlmIChpc1ZOb2RlKHByb3BzT3JDaGlsZHJlbikpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG51bGwsIFtwcm9wc09yQ2hpbGRyZW5dKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wc09yQ2hpbGRyZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgbnVsbCwgcHJvcHNPckNoaWxkcmVuKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGwgPiAzKSB7XG4gICAgICBjaGlsZHJlbiA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgfSBlbHNlIGlmIChsID09PSAzICYmIGlzVk5vZGUoY2hpbGRyZW4pKSB7XG4gICAgICBjaGlsZHJlbiA9IFtjaGlsZHJlbl07XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wc09yQ2hpbGRyZW4sIGNoaWxkcmVuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q3VzdG9tRm9ybWF0dGVyKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB2dWVTdHlsZSA9IHsgc3R5bGU6IFwiY29sb3I6IzNiYTc3NlwiIH07XG4gIGNvbnN0IG51bWJlclN0eWxlID0geyBzdHlsZTogXCJjb2xvcjojMTY3N2ZmXCIgfTtcbiAgY29uc3Qgc3RyaW5nU3R5bGUgPSB7IHN0eWxlOiBcImNvbG9yOiNmNTIyMmRcIiB9O1xuICBjb25zdCBrZXl3b3JkU3R5bGUgPSB7IHN0eWxlOiBcImNvbG9yOiNlYjJmOTZcIiB9O1xuICBjb25zdCBmb3JtYXR0ZXIgPSB7XG4gICAgX192dWVfY3VzdG9tX2Zvcm1hdHRlcjogdHJ1ZSxcbiAgICBoZWFkZXIob2JqKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAob2JqLl9faXNWdWUpIHtcbiAgICAgICAgcmV0dXJuIFtcImRpdlwiLCB2dWVTdHlsZSwgYFZ1ZUluc3RhbmNlYF07XG4gICAgICB9IGVsc2UgaWYgKGlzUmVmKG9iaikpIHtcbiAgICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG9iai52YWx1ZTtcbiAgICAgICAgcmVzZXRUcmFja2luZygpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge30sXG4gICAgICAgICAgW1wic3BhblwiLCB2dWVTdHlsZSwgZ2VuUmVmRmxhZyhvYmopXSxcbiAgICAgICAgICBcIjxcIixcbiAgICAgICAgICBmb3JtYXRWYWx1ZSh2YWx1ZSksXG4gICAgICAgICAgYD5gXG4gICAgICAgIF07XG4gICAgICB9IGVsc2UgaWYgKGlzUmVhY3RpdmUob2JqKSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge30sXG4gICAgICAgICAgW1wic3BhblwiLCB2dWVTdHlsZSwgaXNTaGFsbG93KG9iaikgPyBcIlNoYWxsb3dSZWFjdGl2ZVwiIDogXCJSZWFjdGl2ZVwiXSxcbiAgICAgICAgICBcIjxcIixcbiAgICAgICAgICBmb3JtYXRWYWx1ZShvYmopLFxuICAgICAgICAgIGA+JHtpc1JlYWRvbmx5KG9iaikgPyBgIChyZWFkb25seSlgIDogYGB9YFxuICAgICAgICBdO1xuICAgICAgfSBlbHNlIGlmIChpc1JlYWRvbmx5KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHt9LFxuICAgICAgICAgIFtcInNwYW5cIiwgdnVlU3R5bGUsIGlzU2hhbGxvdyhvYmopID8gXCJTaGFsbG93UmVhZG9ubHlcIiA6IFwiUmVhZG9ubHlcIl0sXG4gICAgICAgICAgXCI8XCIsXG4gICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcbiAgICAgICAgICBcIj5cIlxuICAgICAgICBdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBoYXNCb2R5KG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiBvYmouX19pc1Z1ZTtcbiAgICB9LFxuICAgIGJvZHkob2JqKSB7XG4gICAgICBpZiAob2JqICYmIG9iai5fX2lzVnVlKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7fSxcbiAgICAgICAgICAuLi5mb3JtYXRJbnN0YW5jZShvYmouJClcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGZvcm1hdEluc3RhbmNlKGluc3RhbmNlKSB7XG4gICAgY29uc3QgYmxvY2tzID0gW107XG4gICAgaWYgKGluc3RhbmNlLnR5cGUucHJvcHMgJiYgaW5zdGFuY2UucHJvcHMpIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJwcm9wc1wiLCB0b1JhdyhpbnN0YW5jZS5wcm9wcykpKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLnNldHVwU3RhdGUgIT09IEVNUFRZX09CSikge1xuICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jayhcInNldHVwXCIsIGluc3RhbmNlLnNldHVwU3RhdGUpKTtcbiAgICB9XG4gICAgaWYgKGluc3RhbmNlLmRhdGEgIT09IEVNUFRZX09CSikge1xuICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jayhcImRhdGFcIiwgdG9SYXcoaW5zdGFuY2UuZGF0YSkpKTtcbiAgICB9XG4gICAgY29uc3QgY29tcHV0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgXCJjb21wdXRlZFwiKTtcbiAgICBpZiAoY29tcHV0ZWQpIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJjb21wdXRlZFwiLCBjb21wdXRlZCkpO1xuICAgIH1cbiAgICBjb25zdCBpbmplY3RlZCA9IGV4dHJhY3RLZXlzKGluc3RhbmNlLCBcImluamVjdFwiKTtcbiAgICBpZiAoaW5qZWN0ZWQpIHtcbiAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soXCJpbmplY3RlZFwiLCBpbmplY3RlZCkpO1xuICAgIH1cbiAgICBibG9ja3MucHVzaChbXG4gICAgICBcImRpdlwiLFxuICAgICAge30sXG4gICAgICBbXG4gICAgICAgIFwic3BhblwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3R5bGU6IGtleXdvcmRTdHlsZS5zdHlsZSArIFwiO29wYWNpdHk6MC42NlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiJCAoaW50ZXJuYWwpOiBcIlxuICAgICAgXSxcbiAgICAgIFtcIm9iamVjdFwiLCB7IG9iamVjdDogaW5zdGFuY2UgfV1cbiAgICBdKTtcbiAgICByZXR1cm4gYmxvY2tzO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlQmxvY2sodHlwZSwgdGFyZ2V0KSB7XG4gICAgdGFyZ2V0ID0gZXh0ZW5kKHt9LCB0YXJnZXQpO1xuICAgIGlmICghT2JqZWN0LmtleXModGFyZ2V0KS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIHt9XTtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0eWxlOiBcImxpbmUtaGVpZ2h0OjEuMjVlbTttYXJnaW4tYm90dG9tOjAuNmVtXCIgfSxcbiAgICAgIFtcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAge1xuICAgICAgICAgIHN0eWxlOiBcImNvbG9yOiM0NzY1ODJcIlxuICAgICAgICB9LFxuICAgICAgICB0eXBlXG4gICAgICBdLFxuICAgICAgW1xuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3R5bGU6IFwicGFkZGluZy1sZWZ0OjEuMjVlbVwiXG4gICAgICAgIH0sXG4gICAgICAgIC4uLk9iamVjdC5rZXlzKHRhcmdldCkubWFwKChrZXkpID0+IHtcbiAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgW1wic3BhblwiLCBrZXl3b3JkU3R5bGUsIGtleSArIFwiOiBcIl0sXG4gICAgICAgICAgICBmb3JtYXRWYWx1ZSh0YXJnZXRba2V5XSwgZmFsc2UpXG4gICAgICAgICAgXTtcbiAgICAgICAgfSlcbiAgICAgIF1cbiAgICBdO1xuICB9XG4gIGZ1bmN0aW9uIGZvcm1hdFZhbHVlKHYsIGFzUmF3ID0gdHJ1ZSkge1xuICAgIGlmICh0eXBlb2YgdiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIFtcInNwYW5cIiwgbnVtYmVyU3R5bGUsIHZdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHYgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIHN0cmluZ1N0eWxlLCBKU09OLnN0cmluZ2lmeSh2KV07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdiA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIGtleXdvcmRTdHlsZSwgdl07XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2KSkge1xuICAgICAgcmV0dXJuIFtcIm9iamVjdFwiLCB7IG9iamVjdDogYXNSYXcgPyB0b1Jhdyh2KSA6IHYgfV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXCJzcGFuXCIsIHN0cmluZ1N0eWxlLCBTdHJpbmcodildO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBleHRyYWN0S2V5cyhpbnN0YW5jZSwgdHlwZSkge1xuICAgIGNvbnN0IENvbXAgPSBpbnN0YW5jZS50eXBlO1xuICAgIGlmIChpc0Z1bmN0aW9uKENvbXApKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGV4dHJhY3RlZCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGluc3RhbmNlLmN0eCkge1xuICAgICAgaWYgKGlzS2V5T2ZUeXBlKENvbXAsIGtleSwgdHlwZSkpIHtcbiAgICAgICAgZXh0cmFjdGVkW2tleV0gPSBpbnN0YW5jZS5jdHhba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV4dHJhY3RlZDtcbiAgfVxuICBmdW5jdGlvbiBpc0tleU9mVHlwZShDb21wLCBrZXksIHR5cGUpIHtcbiAgICBjb25zdCBvcHRzID0gQ29tcFt0eXBlXTtcbiAgICBpZiAoaXNBcnJheShvcHRzKSAmJiBvcHRzLmluY2x1ZGVzKGtleSkgfHwgaXNPYmplY3Qob3B0cykgJiYga2V5IGluIG9wdHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoQ29tcC5leHRlbmRzICYmIGlzS2V5T2ZUeXBlKENvbXAuZXh0ZW5kcywga2V5LCB0eXBlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChDb21wLm1peGlucyAmJiBDb21wLm1peGlucy5zb21lKChtKSA9PiBpc0tleU9mVHlwZShtLCBrZXksIHR5cGUpKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdlblJlZkZsYWcodikge1xuICAgIGlmIChpc1NoYWxsb3codikpIHtcbiAgICAgIHJldHVybiBgU2hhbGxvd1JlZmA7XG4gICAgfVxuICAgIGlmICh2LmVmZmVjdCkge1xuICAgICAgcmV0dXJuIGBDb21wdXRlZFJlZmA7XG4gICAgfVxuICAgIHJldHVybiBgUmVmYDtcbiAgfVxuICBpZiAod2luZG93LmRldnRvb2xzRm9ybWF0dGVycykge1xuICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMgPSBbZm9ybWF0dGVyXTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3aXRoTWVtbyhtZW1vLCByZW5kZXIsIGNhY2hlLCBpbmRleCkge1xuICBjb25zdCBjYWNoZWQgPSBjYWNoZVtpbmRleF07XG4gIGlmIChjYWNoZWQgJiYgaXNNZW1vU2FtZShjYWNoZWQsIG1lbW8pKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuICBjb25zdCByZXQgPSByZW5kZXIoKTtcbiAgcmV0Lm1lbW8gPSBtZW1vLnNsaWNlKCk7XG4gIHJldC5jYWNoZUluZGV4ID0gaW5kZXg7XG4gIHJldHVybiBjYWNoZVtpbmRleF0gPSByZXQ7XG59XG5mdW5jdGlvbiBpc01lbW9TYW1lKGNhY2hlZCwgbWVtbykge1xuICBjb25zdCBwcmV2ID0gY2FjaGVkLm1lbW87XG4gIGlmIChwcmV2Lmxlbmd0aCAhPSBtZW1vLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXYubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaGFzQ2hhbmdlZChwcmV2W2ldLCBtZW1vW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNCbG9ja1RyZWVFbmFibGVkID4gMCAmJiBjdXJyZW50QmxvY2spIHtcbiAgICBjdXJyZW50QmxvY2sucHVzaChjYWNoZWQpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5jb25zdCB2ZXJzaW9uID0gXCIzLjUuMTZcIjtcbmNvbnN0IHdhcm4gPSB3YXJuJDEgO1xuY29uc3QgRXJyb3JUeXBlU3RyaW5ncyA9IEVycm9yVHlwZVN0cmluZ3MkMSA7XG5jb25zdCBkZXZ0b29scyA9IGRldnRvb2xzJDEgO1xuY29uc3Qgc2V0RGV2dG9vbHNIb29rID0gc2V0RGV2dG9vbHNIb29rJDEgO1xuY29uc3QgX3NzclV0aWxzID0ge1xuICBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSxcbiAgc2V0dXBDb21wb25lbnQsXG4gIHJlbmRlckNvbXBvbmVudFJvb3QsXG4gIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSxcbiAgaXNWTm9kZTogaXNWTm9kZSxcbiAgbm9ybWFsaXplVk5vZGUsXG4gIGdldENvbXBvbmVudFB1YmxpY0luc3RhbmNlLFxuICBlbnN1cmVWYWxpZFZOb2RlLFxuICBwdXNoV2FybmluZ0NvbnRleHQsXG4gIHBvcFdhcm5pbmdDb250ZXh0XG59O1xuY29uc3Qgc3NyVXRpbHMgPSBfc3NyVXRpbHMgO1xuY29uc3QgcmVzb2x2ZUZpbHRlciA9IG51bGw7XG5jb25zdCBjb21wYXRVdGlscyA9IG51bGw7XG5jb25zdCBEZXByZWNhdGlvblR5cGVzID0gbnVsbDtcblxubGV0IHBvbGljeSA9IHZvaWQgMDtcbmNvbnN0IHR0ID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cudHJ1c3RlZFR5cGVzO1xuaWYgKHR0KSB7XG4gIHRyeSB7XG4gICAgcG9saWN5ID0gLyogQF9fUFVSRV9fICovIHR0LmNyZWF0ZVBvbGljeShcInZ1ZVwiLCB7XG4gICAgICBjcmVhdGVIVE1MOiAodmFsKSA9PiB2YWxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHdhcm4oYEVycm9yIGNyZWF0aW5nIHRydXN0ZWQgdHlwZXMgcG9saWN5OiAke2V9YCk7XG4gIH1cbn1cbmNvbnN0IHVuc2FmZVRvVHJ1c3RlZEhUTUwgPSBwb2xpY3kgPyAodmFsKSA9PiBwb2xpY3kuY3JlYXRlSFRNTCh2YWwpIDogKHZhbCkgPT4gdmFsO1xuY29uc3Qgc3ZnTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG5jb25zdCBtYXRobWxOUyA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO1xuY29uc3QgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiID8gZG9jdW1lbnQgOiBudWxsO1xuY29uc3QgdGVtcGxhdGVDb250YWluZXIgPSBkb2MgJiYgLyogQF9fUFVSRV9fICovIGRvYy5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG5jb25zdCBub2RlT3BzID0ge1xuICBpbnNlcnQ6IChjaGlsZCwgcGFyZW50LCBhbmNob3IpID0+IHtcbiAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBhbmNob3IgfHwgbnVsbCk7XG4gIH0sXG4gIHJlbW92ZTogKGNoaWxkKSA9PiB7XG4gICAgY29uc3QgcGFyZW50ID0gY2hpbGQucGFyZW50Tm9kZTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgIH1cbiAgfSxcbiAgY3JlYXRlRWxlbWVudDogKHRhZywgbmFtZXNwYWNlLCBpcywgcHJvcHMpID0+IHtcbiAgICBjb25zdCBlbCA9IG5hbWVzcGFjZSA9PT0gXCJzdmdcIiA/IGRvYy5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHRhZykgOiBuYW1lc3BhY2UgPT09IFwibWF0aG1sXCIgPyBkb2MuY3JlYXRlRWxlbWVudE5TKG1hdGhtbE5TLCB0YWcpIDogaXMgPyBkb2MuY3JlYXRlRWxlbWVudCh0YWcsIHsgaXMgfSkgOiBkb2MuY3JlYXRlRWxlbWVudCh0YWcpO1xuICAgIGlmICh0YWcgPT09IFwic2VsZWN0XCIgJiYgcHJvcHMgJiYgcHJvcHMubXVsdGlwbGUgIT0gbnVsbCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFwibXVsdGlwbGVcIiwgcHJvcHMubXVsdGlwbGUpO1xuICAgIH1cbiAgICByZXR1cm4gZWw7XG4gIH0sXG4gIGNyZWF0ZVRleHQ6ICh0ZXh0KSA9PiBkb2MuY3JlYXRlVGV4dE5vZGUodGV4dCksXG4gIGNyZWF0ZUNvbW1lbnQ6ICh0ZXh0KSA9PiBkb2MuY3JlYXRlQ29tbWVudCh0ZXh0KSxcbiAgc2V0VGV4dDogKG5vZGUsIHRleHQpID0+IHtcbiAgICBub2RlLm5vZGVWYWx1ZSA9IHRleHQ7XG4gIH0sXG4gIHNldEVsZW1lbnRUZXh0OiAoZWwsIHRleHQpID0+IHtcbiAgICBlbC50ZXh0Q29udGVudCA9IHRleHQ7XG4gIH0sXG4gIHBhcmVudE5vZGU6IChub2RlKSA9PiBub2RlLnBhcmVudE5vZGUsXG4gIG5leHRTaWJsaW5nOiAobm9kZSkgPT4gbm9kZS5uZXh0U2libGluZyxcbiAgcXVlcnlTZWxlY3RvcjogKHNlbGVjdG9yKSA9PiBkb2MucXVlcnlTZWxlY3RvcihzZWxlY3RvciksXG4gIHNldFNjb3BlSWQoZWwsIGlkKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGlkLCBcIlwiKTtcbiAgfSxcbiAgLy8gX19VTlNBRkVfX1xuICAvLyBSZWFzb246IGlubmVySFRNTC5cbiAgLy8gU3RhdGljIGNvbnRlbnQgaGVyZSBjYW4gb25seSBjb21lIGZyb20gY29tcGlsZWQgdGVtcGxhdGVzLlxuICAvLyBBcyBsb25nIGFzIHRoZSB1c2VyIG9ubHkgdXNlcyB0cnVzdGVkIHRlbXBsYXRlcywgdGhpcyBpcyBzYWZlLlxuICBpbnNlcnRTdGF0aWNDb250ZW50KGNvbnRlbnQsIHBhcmVudCwgYW5jaG9yLCBuYW1lc3BhY2UsIHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBiZWZvcmUgPSBhbmNob3IgPyBhbmNob3IucHJldmlvdXNTaWJsaW5nIDogcGFyZW50Lmxhc3RDaGlsZDtcbiAgICBpZiAoc3RhcnQgJiYgKHN0YXJ0ID09PSBlbmQgfHwgc3RhcnQubmV4dFNpYmxpbmcpKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHN0YXJ0LmNsb25lTm9kZSh0cnVlKSwgYW5jaG9yKTtcbiAgICAgICAgaWYgKHN0YXJ0ID09PSBlbmQgfHwgIShzdGFydCA9IHN0YXJ0Lm5leHRTaWJsaW5nKSkgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRlbXBsYXRlQ29udGFpbmVyLmlubmVySFRNTCA9IHVuc2FmZVRvVHJ1c3RlZEhUTUwoXG4gICAgICAgIG5hbWVzcGFjZSA9PT0gXCJzdmdcIiA/IGA8c3ZnPiR7Y29udGVudH08L3N2Zz5gIDogbmFtZXNwYWNlID09PSBcIm1hdGhtbFwiID8gYDxtYXRoPiR7Y29udGVudH08L21hdGg+YCA6IGNvbnRlbnRcbiAgICAgICk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ29udGFpbmVyLmNvbnRlbnQ7XG4gICAgICBpZiAobmFtZXNwYWNlID09PSBcInN2Z1wiIHx8IG5hbWVzcGFjZSA9PT0gXCJtYXRobWxcIikge1xuICAgICAgICBjb25zdCB3cmFwcGVyID0gdGVtcGxhdGUuZmlyc3RDaGlsZDtcbiAgICAgICAgd2hpbGUgKHdyYXBwZXIuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIHRlbXBsYXRlLmFwcGVuZENoaWxkKHdyYXBwZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGUucmVtb3ZlQ2hpbGQod3JhcHBlcik7XG4gICAgICB9XG4gICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRlbXBsYXRlLCBhbmNob3IpO1xuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgLy8gZmlyc3RcbiAgICAgIGJlZm9yZSA/IGJlZm9yZS5uZXh0U2libGluZyA6IHBhcmVudC5maXJzdENoaWxkLFxuICAgICAgLy8gbGFzdFxuICAgICAgYW5jaG9yID8gYW5jaG9yLnByZXZpb3VzU2libGluZyA6IHBhcmVudC5sYXN0Q2hpbGRcbiAgICBdO1xuICB9XG59O1xuXG5jb25zdCBUUkFOU0lUSU9OJDEgPSBcInRyYW5zaXRpb25cIjtcbmNvbnN0IEFOSU1BVElPTiA9IFwiYW5pbWF0aW9uXCI7XG5jb25zdCB2dGNLZXkgPSBTeW1ib2woXCJfdnRjXCIpO1xuY29uc3QgRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyA9IHtcbiAgbmFtZTogU3RyaW5nLFxuICB0eXBlOiBTdHJpbmcsXG4gIGNzczoge1xuICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBkdXJhdGlvbjogW1N0cmluZywgTnVtYmVyLCBPYmplY3RdLFxuICBlbnRlckZyb21DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBhcHBlYXJGcm9tQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZUZyb21DbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nXG59O1xuY29uc3QgVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyA9IC8qIEBfX1BVUkVfXyAqLyBleHRlbmQoXG4gIHt9LFxuICBCYXNlVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycyxcbiAgRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9yc1xuKTtcbmNvbnN0IGRlY29yYXRlJDEgPSAodCkgPT4ge1xuICB0LmRpc3BsYXlOYW1lID0gXCJUcmFuc2l0aW9uXCI7XG4gIHQucHJvcHMgPSBUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzO1xuICByZXR1cm4gdDtcbn07XG5jb25zdCBUcmFuc2l0aW9uID0gLyogQF9fUFVSRV9fICovIGRlY29yYXRlJDEoXG4gIChwcm9wcywgeyBzbG90cyB9KSA9PiBoKEJhc2VUcmFuc2l0aW9uLCByZXNvbHZlVHJhbnNpdGlvblByb3BzKHByb3BzKSwgc2xvdHMpXG4pO1xuY29uc3QgY2FsbEhvb2sgPSAoaG9vaywgYXJncyA9IFtdKSA9PiB7XG4gIGlmIChpc0FycmF5KGhvb2spKSB7XG4gICAgaG9vay5mb3JFYWNoKChoMikgPT4gaDIoLi4uYXJncykpO1xuICB9IGVsc2UgaWYgKGhvb2spIHtcbiAgICBob29rKC4uLmFyZ3MpO1xuICB9XG59O1xuY29uc3QgaGFzRXhwbGljaXRDYWxsYmFjayA9IChob29rKSA9PiB7XG4gIHJldHVybiBob29rID8gaXNBcnJheShob29rKSA/IGhvb2suc29tZSgoaDIpID0+IGgyLmxlbmd0aCA+IDEpIDogaG9vay5sZW5ndGggPiAxIDogZmFsc2U7XG59O1xuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhyYXdQcm9wcykge1xuICBjb25zdCBiYXNlUHJvcHMgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgaW4gcmF3UHJvcHMpIHtcbiAgICBpZiAoIShrZXkgaW4gRE9NVHJhbnNpdGlvblByb3BzVmFsaWRhdG9ycykpIHtcbiAgICAgIGJhc2VQcm9wc1trZXldID0gcmF3UHJvcHNba2V5XTtcbiAgICB9XG4gIH1cbiAgaWYgKHJhd1Byb3BzLmNzcyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gYmFzZVByb3BzO1xuICB9XG4gIGNvbnN0IHtcbiAgICBuYW1lID0gXCJ2XCIsXG4gICAgdHlwZSxcbiAgICBkdXJhdGlvbixcbiAgICBlbnRlckZyb21DbGFzcyA9IGAke25hbWV9LWVudGVyLWZyb21gLFxuICAgIGVudGVyQWN0aXZlQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci1hY3RpdmVgLFxuICAgIGVudGVyVG9DbGFzcyA9IGAke25hbWV9LWVudGVyLXRvYCxcbiAgICBhcHBlYXJGcm9tQ2xhc3MgPSBlbnRlckZyb21DbGFzcyxcbiAgICBhcHBlYXJBY3RpdmVDbGFzcyA9IGVudGVyQWN0aXZlQ2xhc3MsXG4gICAgYXBwZWFyVG9DbGFzcyA9IGVudGVyVG9DbGFzcyxcbiAgICBsZWF2ZUZyb21DbGFzcyA9IGAke25hbWV9LWxlYXZlLWZyb21gLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS1hY3RpdmVgLFxuICAgIGxlYXZlVG9DbGFzcyA9IGAke25hbWV9LWxlYXZlLXRvYFxuICB9ID0gcmF3UHJvcHM7XG4gIGNvbnN0IGR1cmF0aW9ucyA9IG5vcm1hbGl6ZUR1cmF0aW9uKGR1cmF0aW9uKTtcbiAgY29uc3QgZW50ZXJEdXJhdGlvbiA9IGR1cmF0aW9ucyAmJiBkdXJhdGlvbnNbMF07XG4gIGNvbnN0IGxlYXZlRHVyYXRpb24gPSBkdXJhdGlvbnMgJiYgZHVyYXRpb25zWzFdO1xuICBjb25zdCB7XG4gICAgb25CZWZvcmVFbnRlcixcbiAgICBvbkVudGVyLFxuICAgIG9uRW50ZXJDYW5jZWxsZWQsXG4gICAgb25MZWF2ZSxcbiAgICBvbkxlYXZlQ2FuY2VsbGVkLFxuICAgIG9uQmVmb3JlQXBwZWFyID0gb25CZWZvcmVFbnRlcixcbiAgICBvbkFwcGVhciA9IG9uRW50ZXIsXG4gICAgb25BcHBlYXJDYW5jZWxsZWQgPSBvbkVudGVyQ2FuY2VsbGVkXG4gIH0gPSBiYXNlUHJvcHM7XG4gIGNvbnN0IGZpbmlzaEVudGVyID0gKGVsLCBpc0FwcGVhciwgZG9uZSwgaXNDYW5jZWxsZWQpID0+IHtcbiAgICBlbC5fZW50ZXJDYW5jZWxsZWQgPSBpc0NhbmNlbGxlZDtcbiAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcyk7XG4gICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhckFjdGl2ZUNsYXNzIDogZW50ZXJBY3RpdmVDbGFzcyk7XG4gICAgZG9uZSAmJiBkb25lKCk7XG4gIH07XG4gIGNvbnN0IGZpbmlzaExlYXZlID0gKGVsLCBkb25lKSA9PiB7XG4gICAgZWwuX2lzTGVhdmluZyA9IGZhbHNlO1xuICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xuICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xuICAgIGRvbmUgJiYgZG9uZSgpO1xuICB9O1xuICBjb25zdCBtYWtlRW50ZXJIb29rID0gKGlzQXBwZWFyKSA9PiB7XG4gICAgcmV0dXJuIChlbCwgZG9uZSkgPT4ge1xuICAgICAgY29uc3QgaG9vayA9IGlzQXBwZWFyID8gb25BcHBlYXIgOiBvbkVudGVyO1xuICAgICAgY29uc3QgcmVzb2x2ZSA9ICgpID0+IGZpbmlzaEVudGVyKGVsLCBpc0FwcGVhciwgZG9uZSk7XG4gICAgICBjYWxsSG9vayhob29rLCBbZWwsIHJlc29sdmVdKTtcbiAgICAgIG5leHRGcmFtZSgoKSA9PiB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJGcm9tQ2xhc3MgOiBlbnRlckZyb21DbGFzcyk7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJUb0NsYXNzIDogZW50ZXJUb0NsYXNzKTtcbiAgICAgICAgaWYgKCFoYXNFeHBsaWNpdENhbGxiYWNrKGhvb2spKSB7XG4gICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBlbnRlckR1cmF0aW9uLCByZXNvbHZlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGV4dGVuZChiYXNlUHJvcHMsIHtcbiAgICBvbkJlZm9yZUVudGVyKGVsKSB7XG4gICAgICBjYWxsSG9vayhvbkJlZm9yZUVudGVyLCBbZWxdKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgZW50ZXJGcm9tQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBlbnRlckFjdGl2ZUNsYXNzKTtcbiAgICB9LFxuICAgIG9uQmVmb3JlQXBwZWFyKGVsKSB7XG4gICAgICBjYWxsSG9vayhvbkJlZm9yZUFwcGVhciwgW2VsXSk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFwcGVhckZyb21DbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFwcGVhckFjdGl2ZUNsYXNzKTtcbiAgICB9LFxuICAgIG9uRW50ZXI6IG1ha2VFbnRlckhvb2soZmFsc2UpLFxuICAgIG9uQXBwZWFyOiBtYWtlRW50ZXJIb29rKHRydWUpLFxuICAgIG9uTGVhdmUoZWwsIGRvbmUpIHtcbiAgICAgIGVsLl9pc0xlYXZpbmcgPSB0cnVlO1xuICAgICAgY29uc3QgcmVzb2x2ZSA9ICgpID0+IGZpbmlzaExlYXZlKGVsLCBkb25lKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xuICAgICAgaWYgKCFlbC5fZW50ZXJDYW5jZWxsZWQpIHtcbiAgICAgICAgZm9yY2VSZWZsb3coKTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICAgIGZvcmNlUmVmbG93KCk7XG4gICAgICB9XG4gICAgICBuZXh0RnJhbWUoKCkgPT4ge1xuICAgICAgICBpZiAoIWVsLl9pc0xlYXZpbmcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUZyb21DbGFzcyk7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgaWYgKCFoYXNFeHBsaWNpdENhbGxiYWNrKG9uTGVhdmUpKSB7XG4gICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBsZWF2ZUR1cmF0aW9uLCByZXNvbHZlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjYWxsSG9vayhvbkxlYXZlLCBbZWwsIHJlc29sdmVdKTtcbiAgICB9LFxuICAgIG9uRW50ZXJDYW5jZWxsZWQoZWwpIHtcbiAgICAgIGZpbmlzaEVudGVyKGVsLCBmYWxzZSwgdm9pZCAwLCB0cnVlKTtcbiAgICAgIGNhbGxIb29rKG9uRW50ZXJDYW5jZWxsZWQsIFtlbF0pO1xuICAgIH0sXG4gICAgb25BcHBlYXJDYW5jZWxsZWQoZWwpIHtcbiAgICAgIGZpbmlzaEVudGVyKGVsLCB0cnVlLCB2b2lkIDAsIHRydWUpO1xuICAgICAgY2FsbEhvb2sob25BcHBlYXJDYW5jZWxsZWQsIFtlbF0pO1xuICAgIH0sXG4gICAgb25MZWF2ZUNhbmNlbGxlZChlbCkge1xuICAgICAgZmluaXNoTGVhdmUoZWwpO1xuICAgICAgY2FsbEhvb2sob25MZWF2ZUNhbmNlbGxlZCwgW2VsXSk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUR1cmF0aW9uKGR1cmF0aW9uKSB7XG4gIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoZHVyYXRpb24pKSB7XG4gICAgcmV0dXJuIFtOdW1iZXJPZihkdXJhdGlvbi5lbnRlciksIE51bWJlck9mKGR1cmF0aW9uLmxlYXZlKV07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgbiA9IE51bWJlck9mKGR1cmF0aW9uKTtcbiAgICByZXR1cm4gW24sIG5dO1xuICB9XG59XG5mdW5jdGlvbiBOdW1iZXJPZih2YWwpIHtcbiAgY29uc3QgcmVzID0gdG9OdW1iZXIodmFsKTtcbiAge1xuICAgIGFzc2VydE51bWJlcihyZXMsIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IGR1cmF0aW9uXCIpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGNscykge1xuICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKChjKSA9PiBjICYmIGVsLmNsYXNzTGlzdC5hZGQoYykpO1xuICAoZWxbdnRjS2V5XSB8fCAoZWxbdnRjS2V5XSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpKS5hZGQoY2xzKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgY2xzKSB7XG4gIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goKGMpID0+IGMgJiYgZWwuY2xhc3NMaXN0LnJlbW92ZShjKSk7XG4gIGNvbnN0IF92dGMgPSBlbFt2dGNLZXldO1xuICBpZiAoX3Z0Yykge1xuICAgIF92dGMuZGVsZXRlKGNscyk7XG4gICAgaWYgKCFfdnRjLnNpemUpIHtcbiAgICAgIGVsW3Z0Y0tleV0gPSB2b2lkIDA7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBuZXh0RnJhbWUoY2IpIHtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpO1xuICB9KTtcbn1cbmxldCBlbmRJZCA9IDA7XG5mdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIGV4cGVjdGVkVHlwZSwgZXhwbGljaXRUaW1lb3V0LCByZXNvbHZlKSB7XG4gIGNvbnN0IGlkID0gZWwuX2VuZElkID0gKytlbmRJZDtcbiAgY29uc3QgcmVzb2x2ZUlmTm90U3RhbGUgPSAoKSA9PiB7XG4gICAgaWYgKGlkID09PSBlbC5fZW5kSWQpIHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9XG4gIH07XG4gIGlmIChleHBsaWNpdFRpbWVvdXQgIT0gbnVsbCkge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmVJZk5vdFN0YWxlLCBleHBsaWNpdFRpbWVvdXQpO1xuICB9XG4gIGNvbnN0IHsgdHlwZSwgdGltZW91dCwgcHJvcENvdW50IH0gPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKTtcbiAgaWYgKCF0eXBlKSB7XG4gICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgfVxuICBjb25zdCBlbmRFdmVudCA9IHR5cGUgKyBcImVuZFwiO1xuICBsZXQgZW5kZWQgPSAwO1xuICBjb25zdCBlbmQgPSAoKSA9PiB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgb25FbmQpO1xuICAgIHJlc29sdmVJZk5vdFN0YWxlKCk7XG4gIH07XG4gIGNvbnN0IG9uRW5kID0gKGUpID0+IHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGVsICYmICsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIG9uRW5kKTtcbn1cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgY29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICBjb25zdCBnZXRTdHlsZVByb3BlcnRpZXMgPSAoa2V5KSA9PiAoc3R5bGVzW2tleV0gfHwgXCJcIikuc3BsaXQoXCIsIFwiKTtcbiAgY29uc3QgdHJhbnNpdGlvbkRlbGF5cyA9IGdldFN0eWxlUHJvcGVydGllcyhgJHtUUkFOU0lUSU9OJDF9RGVsYXlgKTtcbiAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IGdldFN0eWxlUHJvcGVydGllcyhgJHtUUkFOU0lUSU9OJDF9RHVyYXRpb25gKTtcbiAgY29uc3QgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICBjb25zdCBhbmltYXRpb25EZWxheXMgPSBnZXRTdHlsZVByb3BlcnRpZXMoYCR7QU5JTUFUSU9OfURlbGF5YCk7XG4gIGNvbnN0IGFuaW1hdGlvbkR1cmF0aW9ucyA9IGdldFN0eWxlUHJvcGVydGllcyhgJHtBTklNQVRJT059RHVyYXRpb25gKTtcbiAgY29uc3QgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuICBsZXQgdHlwZSA9IG51bGw7XG4gIGxldCB0aW1lb3V0ID0gMDtcbiAgbGV0IHByb3BDb3VudCA9IDA7XG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04kMSkge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OJDE7XG4gICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcbiAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBBTklNQVRJT047XG4gICAgICB0aW1lb3V0ID0gYW5pbWF0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgdHlwZSA9IHRpbWVvdXQgPiAwID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0ID8gVFJBTlNJVElPTiQxIDogQU5JTUFUSU9OIDogbnVsbDtcbiAgICBwcm9wQ291bnQgPSB0eXBlID8gdHlwZSA9PT0gVFJBTlNJVElPTiQxID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGggOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoIDogMDtcbiAgfVxuICBjb25zdCBoYXNUcmFuc2Zvcm0gPSB0eXBlID09PSBUUkFOU0lUSU9OJDEgJiYgL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLy50ZXN0KFxuICAgIGdldFN0eWxlUHJvcGVydGllcyhgJHtUUkFOU0lUSU9OJDF9UHJvcGVydHlgKS50b1N0cmluZygpXG4gICk7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICB0aW1lb3V0LFxuICAgIHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFRpbWVvdXQoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG4gIHJldHVybiBNYXRoLm1heCguLi5kdXJhdGlvbnMubWFwKChkLCBpKSA9PiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pKSk7XG59XG5mdW5jdGlvbiB0b01zKHMpIHtcbiAgaWYgKHMgPT09IFwiYXV0b1wiKSByZXR1cm4gMDtcbiAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKFwiLFwiLCBcIi5cIikpICogMWUzO1xufVxuZnVuY3Rpb24gZm9yY2VSZWZsb3coKSB7XG4gIHJldHVybiBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcbn1cblxuZnVuY3Rpb24gcGF0Y2hDbGFzcyhlbCwgdmFsdWUsIGlzU1ZHKSB7XG4gIGNvbnN0IHRyYW5zaXRpb25DbGFzc2VzID0gZWxbdnRjS2V5XTtcbiAgaWYgKHRyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgdmFsdWUgPSAodmFsdWUgPyBbdmFsdWUsIC4uLnRyYW5zaXRpb25DbGFzc2VzXSA6IFsuLi50cmFuc2l0aW9uQ2xhc3Nlc10pLmpvaW4oXCIgXCIpO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgZWwucmVtb3ZlQXR0cmlidXRlKFwiY2xhc3NcIik7XG4gIH0gZWxzZSBpZiAoaXNTVkcpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZWwuY2xhc3NOYW1lID0gdmFsdWU7XG4gIH1cbn1cblxuY29uc3QgdlNob3dPcmlnaW5hbERpc3BsYXkgPSBTeW1ib2woXCJfdm9kXCIpO1xuY29uc3QgdlNob3dIaWRkZW4gPSBTeW1ib2woXCJfdnNoXCIpO1xuY29uc3QgdlNob3cgPSB7XG4gIGJlZm9yZU1vdW50KGVsLCB7IHZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XG4gICAgZWxbdlNob3dPcmlnaW5hbERpc3BsYXldID0gZWwuc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodHJhbnNpdGlvbiAmJiB2YWx1ZSkge1xuICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQoZWwsIHsgdmFsdWUgfSwgeyB0cmFuc2l0aW9uIH0pIHtcbiAgICBpZiAodHJhbnNpdGlvbiAmJiB2YWx1ZSkge1xuICAgICAgdHJhbnNpdGlvbi5lbnRlcihlbCk7XG4gICAgfVxuICB9LFxuICB1cGRhdGVkKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xuICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSkgcmV0dXJuO1xuICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XG4gICAgICAgIHNldERpc3BsYXkoZWwsIHRydWUpO1xuICAgICAgICB0cmFuc2l0aW9uLmVudGVyKGVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zaXRpb24ubGVhdmUoZWwsICgpID0+IHtcbiAgICAgICAgICBzZXREaXNwbGF5KGVsLCBmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XG4gICAgfVxuICB9LFxuICBiZWZvcmVVbm1vdW50KGVsLCB7IHZhbHVlIH0pIHtcbiAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XG4gIH1cbn07XG57XG4gIHZTaG93Lm5hbWUgPSBcInNob3dcIjtcbn1cbmZ1bmN0aW9uIHNldERpc3BsYXkoZWwsIHZhbHVlKSB7XG4gIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsW3ZTaG93T3JpZ2luYWxEaXNwbGF5XSA6IFwibm9uZVwiO1xuICBlbFt2U2hvd0hpZGRlbl0gPSAhdmFsdWU7XG59XG5mdW5jdGlvbiBpbml0VlNob3dGb3JTU1IoKSB7XG4gIHZTaG93LmdldFNTUlByb3BzID0gKHsgdmFsdWUgfSkgPT4ge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHJldHVybiB7IHN0eWxlOiB7IGRpc3BsYXk6IFwibm9uZVwiIH0gfTtcbiAgICB9XG4gIH07XG59XG5cbmNvbnN0IENTU19WQVJfVEVYVCA9IFN5bWJvbChcIkNTU19WQVJfVEVYVFwiICk7XG5mdW5jdGlvbiB1c2VDc3NWYXJzKGdldHRlcikge1xuICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICBpZiAoIWluc3RhbmNlKSB7XG4gICAgd2FybihgdXNlQ3NzVmFycyBpcyBjYWxsZWQgd2l0aG91dCBjdXJyZW50IGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UuYCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHVwZGF0ZVRlbGVwb3J0cyA9IGluc3RhbmNlLnV0ID0gKHZhcnMgPSBnZXR0ZXIoaW5zdGFuY2UucHJveHkpKSA9PiB7XG4gICAgQXJyYXkuZnJvbShcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYFtkYXRhLXYtb3duZXI9XCIke2luc3RhbmNlLnVpZH1cIl1gKVxuICAgICkuZm9yRWFjaCgobm9kZSkgPT4gc2V0VmFyc09uTm9kZShub2RlLCB2YXJzKSk7XG4gIH07XG4gIHtcbiAgICBpbnN0YW5jZS5nZXRDc3NWYXJzID0gKCkgPT4gZ2V0dGVyKGluc3RhbmNlLnByb3h5KTtcbiAgfVxuICBjb25zdCBzZXRWYXJzID0gKCkgPT4ge1xuICAgIGNvbnN0IHZhcnMgPSBnZXR0ZXIoaW5zdGFuY2UucHJveHkpO1xuICAgIGlmIChpbnN0YW5jZS5jZSkge1xuICAgICAgc2V0VmFyc09uTm9kZShpbnN0YW5jZS5jZSwgdmFycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFZhcnNPblZOb2RlKGluc3RhbmNlLnN1YlRyZWUsIHZhcnMpO1xuICAgIH1cbiAgICB1cGRhdGVUZWxlcG9ydHModmFycyk7XG4gIH07XG4gIG9uQmVmb3JlVXBkYXRlKCgpID0+IHtcbiAgICBxdWV1ZVBvc3RGbHVzaENiKHNldFZhcnMpO1xuICB9KTtcbiAgb25Nb3VudGVkKCgpID0+IHtcbiAgICB3YXRjaChzZXRWYXJzLCBOT09QLCB7IGZsdXNoOiBcInBvc3RcIiB9KTtcbiAgICBjb25zdCBvYiA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHNldFZhcnMpO1xuICAgIG9iLm9ic2VydmUoaW5zdGFuY2Uuc3ViVHJlZS5lbC5wYXJlbnROb2RlLCB7IGNoaWxkTGlzdDogdHJ1ZSB9KTtcbiAgICBvblVubW91bnRlZCgoKSA9PiBvYi5kaXNjb25uZWN0KCkpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHNldFZhcnNPblZOb2RlKHZub2RlLCB2YXJzKSB7XG4gIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxMjgpIHtcbiAgICBjb25zdCBzdXNwZW5zZSA9IHZub2RlLnN1c3BlbnNlO1xuICAgIHZub2RlID0gc3VzcGVuc2UuYWN0aXZlQnJhbmNoO1xuICAgIGlmIChzdXNwZW5zZS5wZW5kaW5nQnJhbmNoICYmICFzdXNwZW5zZS5pc0h5ZHJhdGluZykge1xuICAgICAgc3VzcGVuc2UuZWZmZWN0cy5wdXNoKCgpID0+IHtcbiAgICAgICAgc2V0VmFyc09uVk5vZGUoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCB2YXJzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICB3aGlsZSAodm5vZGUuY29tcG9uZW50KSB7XG4gICAgdm5vZGUgPSB2bm9kZS5jb21wb25lbnQuc3ViVHJlZTtcbiAgfVxuICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMSAmJiB2bm9kZS5lbCkge1xuICAgIHNldFZhcnNPbk5vZGUodm5vZGUuZWwsIHZhcnMpO1xuICB9IGVsc2UgaWYgKHZub2RlLnR5cGUgPT09IEZyYWdtZW50KSB7XG4gICAgdm5vZGUuY2hpbGRyZW4uZm9yRWFjaCgoYykgPT4gc2V0VmFyc09uVk5vZGUoYywgdmFycykpO1xuICB9IGVsc2UgaWYgKHZub2RlLnR5cGUgPT09IFN0YXRpYykge1xuICAgIGxldCB7IGVsLCBhbmNob3IgfSA9IHZub2RlO1xuICAgIHdoaWxlIChlbCkge1xuICAgICAgc2V0VmFyc09uTm9kZShlbCwgdmFycyk7XG4gICAgICBpZiAoZWwgPT09IGFuY2hvcikgYnJlYWs7XG4gICAgICBlbCA9IGVsLm5leHRTaWJsaW5nO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2V0VmFyc09uTm9kZShlbCwgdmFycykge1xuICBpZiAoZWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICBjb25zdCBzdHlsZSA9IGVsLnN0eWxlO1xuICAgIGxldCBjc3NUZXh0ID0gXCJcIjtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB2YXJzKSB7XG4gICAgICBzdHlsZS5zZXRQcm9wZXJ0eShgLS0ke2tleX1gLCB2YXJzW2tleV0pO1xuICAgICAgY3NzVGV4dCArPSBgLS0ke2tleX06ICR7dmFyc1trZXldfTtgO1xuICAgIH1cbiAgICBzdHlsZVtDU1NfVkFSX1RFWFRdID0gY3NzVGV4dDtcbiAgfVxufVxuXG5jb25zdCBkaXNwbGF5UkUgPSAvKF58OylcXHMqZGlzcGxheVxccyo6LztcbmZ1bmN0aW9uIHBhdGNoU3R5bGUoZWwsIHByZXYsIG5leHQpIHtcbiAgY29uc3Qgc3R5bGUgPSBlbC5zdHlsZTtcbiAgY29uc3QgaXNDc3NTdHJpbmcgPSBpc1N0cmluZyhuZXh0KTtcbiAgbGV0IGhhc0NvbnRyb2xsZWREaXNwbGF5ID0gZmFsc2U7XG4gIGlmIChuZXh0ICYmICFpc0Nzc1N0cmluZykge1xuICAgIGlmIChwcmV2KSB7XG4gICAgICBpZiAoIWlzU3RyaW5nKHByZXYpKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByZXYpIHtcbiAgICAgICAgICBpZiAobmV4dFtrZXldID09IG51bGwpIHtcbiAgICAgICAgICAgIHNldFN0eWxlKHN0eWxlLCBrZXksIFwiXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBwcmV2U3R5bGUgb2YgcHJldi5zcGxpdChcIjtcIikpIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBwcmV2U3R5bGUuc2xpY2UoMCwgcHJldlN0eWxlLmluZGV4T2YoXCI6XCIpKS50cmltKCk7XG4gICAgICAgICAgaWYgKG5leHRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBzZXRTdHlsZShzdHlsZSwga2V5LCBcIlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gbmV4dCkge1xuICAgICAgaWYgKGtleSA9PT0gXCJkaXNwbGF5XCIpIHtcbiAgICAgICAgaGFzQ29udHJvbGxlZERpc3BsYXkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgc2V0U3R5bGUoc3R5bGUsIGtleSwgbmV4dFtrZXldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzQ3NzU3RyaW5nKSB7XG4gICAgICBpZiAocHJldiAhPT0gbmV4dCkge1xuICAgICAgICBjb25zdCBjc3NWYXJUZXh0ID0gc3R5bGVbQ1NTX1ZBUl9URVhUXTtcbiAgICAgICAgaWYgKGNzc1ZhclRleHQpIHtcbiAgICAgICAgICBuZXh0ICs9IFwiO1wiICsgY3NzVmFyVGV4dDtcbiAgICAgICAgfVxuICAgICAgICBzdHlsZS5jc3NUZXh0ID0gbmV4dDtcbiAgICAgICAgaGFzQ29udHJvbGxlZERpc3BsYXkgPSBkaXNwbGF5UkUudGVzdChuZXh0KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByZXYpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpO1xuICAgIH1cbiAgfVxuICBpZiAodlNob3dPcmlnaW5hbERpc3BsYXkgaW4gZWwpIHtcbiAgICBlbFt2U2hvd09yaWdpbmFsRGlzcGxheV0gPSBoYXNDb250cm9sbGVkRGlzcGxheSA/IHN0eWxlLmRpc3BsYXkgOiBcIlwiO1xuICAgIGlmIChlbFt2U2hvd0hpZGRlbl0pIHtcbiAgICAgIHN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IHNlbWljb2xvblJFID0gL1teXFxcXF07XFxzKiQvO1xuY29uc3QgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbmZ1bmN0aW9uIHNldFN0eWxlKHN0eWxlLCBuYW1lLCB2YWwpIHtcbiAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgIHZhbC5mb3JFYWNoKCh2KSA9PiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdikpO1xuICB9IGVsc2Uge1xuICAgIGlmICh2YWwgPT0gbnVsbCkgdmFsID0gXCJcIjtcbiAgICB7XG4gICAgICBpZiAoc2VtaWNvbG9uUkUudGVzdCh2YWwpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgYFVuZXhwZWN0ZWQgc2VtaWNvbG9uIGF0IHRoZSBlbmQgb2YgJyR7bmFtZX0nIHN0eWxlIHZhbHVlOiAnJHt2YWx9J2BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5hbWUuc3RhcnRzV2l0aChcIi0tXCIpKSB7XG4gICAgICBzdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwcmVmaXhlZCA9IGF1dG9QcmVmaXgoc3R5bGUsIG5hbWUpO1xuICAgICAgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICBoeXBoZW5hdGUocHJlZml4ZWQpLFxuICAgICAgICAgIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCBcIlwiKSxcbiAgICAgICAgICBcImltcG9ydGFudFwiXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHlsZVtwcmVmaXhlZF0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5jb25zdCBwcmVmaXhlcyA9IFtcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCJdO1xuY29uc3QgcHJlZml4Q2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGF1dG9QcmVmaXgoc3R5bGUsIHJhd05hbWUpIHtcbiAgY29uc3QgY2FjaGVkID0gcHJlZml4Q2FjaGVbcmF3TmFtZV07XG4gIGlmIChjYWNoZWQpIHtcbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG4gIGxldCBuYW1lID0gY2FtZWxpemUocmF3TmFtZSk7XG4gIGlmIChuYW1lICE9PSBcImZpbHRlclwiICYmIG5hbWUgaW4gc3R5bGUpIHtcbiAgICByZXR1cm4gcHJlZml4Q2FjaGVbcmF3TmFtZV0gPSBuYW1lO1xuICB9XG4gIG5hbWUgPSBjYXBpdGFsaXplKG5hbWUpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWZpeGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcHJlZml4ZWQgPSBwcmVmaXhlc1tpXSArIG5hbWU7XG4gICAgaWYgKHByZWZpeGVkIGluIHN0eWxlKSB7XG4gICAgICByZXR1cm4gcHJlZml4Q2FjaGVbcmF3TmFtZV0gPSBwcmVmaXhlZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJhd05hbWU7XG59XG5cbmNvbnN0IHhsaW5rTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIjtcbmZ1bmN0aW9uIHBhdGNoQXR0cihlbCwga2V5LCB2YWx1ZSwgaXNTVkcsIGluc3RhbmNlLCBpc0Jvb2xlYW4gPSBpc1NwZWNpYWxCb29sZWFuQXR0cihrZXkpKSB7XG4gIGlmIChpc1NWRyAmJiBrZXkuc3RhcnRzV2l0aChcInhsaW5rOlwiKSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXkuc2xpY2UoNiwga2V5Lmxlbmd0aCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgaXNCb29sZWFuICYmICFpbmNsdWRlQm9vbGVhbkF0dHIodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFxuICAgICAgICBrZXksXG4gICAgICAgIGlzQm9vbGVhbiA/IFwiXCIgOiBpc1N5bWJvbCh2YWx1ZSkgPyBTdHJpbmcodmFsdWUpIDogdmFsdWVcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhdGNoRE9NUHJvcChlbCwga2V5LCB2YWx1ZSwgcGFyZW50Q29tcG9uZW50LCBhdHRyTmFtZSkge1xuICBpZiAoa2V5ID09PSBcImlubmVySFRNTFwiIHx8IGtleSA9PT0gXCJ0ZXh0Q29udGVudFwiKSB7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgIGVsW2tleV0gPSBrZXkgPT09IFwiaW5uZXJIVE1MXCIgPyB1bnNhZmVUb1RydXN0ZWRIVE1MKHZhbHVlKSA6IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdGFnID0gZWwudGFnTmFtZTtcbiAgaWYgKGtleSA9PT0gXCJ2YWx1ZVwiICYmIHRhZyAhPT0gXCJQUk9HUkVTU1wiICYmIC8vIGN1c3RvbSBlbGVtZW50cyBtYXkgdXNlIF92YWx1ZSBpbnRlcm5hbGx5XG4gICF0YWcuaW5jbHVkZXMoXCItXCIpKSB7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0YWcgPT09IFwiT1BUSU9OXCIgPyBlbC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSB8fCBcIlwiIDogZWwudmFsdWU7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gKFxuICAgICAgLy8gIzExNjQ3OiB2YWx1ZSBzaG91bGQgYmUgc2V0IGFzIGVtcHR5IHN0cmluZyBmb3IgbnVsbCBhbmQgdW5kZWZpbmVkLFxuICAgICAgLy8gYnV0IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIj4gc2hvdWxkIGJlIHNldCBhcyAnb24nLlxuICAgICAgZWwudHlwZSA9PT0gXCJjaGVja2JveFwiID8gXCJvblwiIDogXCJcIlxuICAgICkgOiBTdHJpbmcodmFsdWUpO1xuICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUgfHwgIShcIl92YWx1ZVwiIGluIGVsKSkge1xuICAgICAgZWwudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH1cbiAgICBlbC5fdmFsdWUgPSB2YWx1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IG5lZWRSZW1vdmUgPSBmYWxzZTtcbiAgaWYgKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIGVsW2tleV07XG4gICAgaWYgKHR5cGUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICB2YWx1ZSA9IGluY2x1ZGVCb29sZWFuQXR0cih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PSBudWxsICYmIHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIG5lZWRSZW1vdmUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgdmFsdWUgPSAwO1xuICAgICAgbmVlZFJlbW92ZSA9IHRydWU7XG4gICAgfVxuICB9XG4gIHRyeSB7XG4gICAgZWxba2V5XSA9IHZhbHVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKCFuZWVkUmVtb3ZlKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgRmFpbGVkIHNldHRpbmcgcHJvcCBcIiR7a2V5fVwiIG9uIDwke3RhZy50b0xvd2VyQ2FzZSgpfT46IHZhbHVlICR7dmFsdWV9IGlzIGludmFsaWQuYCxcbiAgICAgICAgZVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgbmVlZFJlbW92ZSAmJiBlbC5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUgfHwga2V5KTtcbn1cblxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKGVsLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmNvbnN0IHZlaUtleSA9IFN5bWJvbChcIl92ZWlcIik7XG5mdW5jdGlvbiBwYXRjaEV2ZW50KGVsLCByYXdOYW1lLCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgaW5zdGFuY2UgPSBudWxsKSB7XG4gIGNvbnN0IGludm9rZXJzID0gZWxbdmVpS2V5XSB8fCAoZWxbdmVpS2V5XSA9IHt9KTtcbiAgY29uc3QgZXhpc3RpbmdJbnZva2VyID0gaW52b2tlcnNbcmF3TmFtZV07XG4gIGlmIChuZXh0VmFsdWUgJiYgZXhpc3RpbmdJbnZva2VyKSB7XG4gICAgZXhpc3RpbmdJbnZva2VyLnZhbHVlID0gc2FuaXRpemVFdmVudFZhbHVlKG5leHRWYWx1ZSwgcmF3TmFtZSkgO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IFtuYW1lLCBvcHRpb25zXSA9IHBhcnNlTmFtZShyYXdOYW1lKTtcbiAgICBpZiAobmV4dFZhbHVlKSB7XG4gICAgICBjb25zdCBpbnZva2VyID0gaW52b2tlcnNbcmF3TmFtZV0gPSBjcmVhdGVJbnZva2VyKFxuICAgICAgICBzYW5pdGl6ZUV2ZW50VmFsdWUobmV4dFZhbHVlLCByYXdOYW1lKSAsXG4gICAgICAgIGluc3RhbmNlXG4gICAgICApO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgbmFtZSwgaW52b2tlciwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChleGlzdGluZ0ludm9rZXIpIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWwsIG5hbWUsIGV4aXN0aW5nSW52b2tlciwgb3B0aW9ucyk7XG4gICAgICBpbnZva2Vyc1tyYXdOYW1lXSA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cbmNvbnN0IG9wdGlvbnNNb2RpZmllclJFID0gLyg/Ok9uY2V8UGFzc2l2ZXxDYXB0dXJlKSQvO1xuZnVuY3Rpb24gcGFyc2VOYW1lKG5hbWUpIHtcbiAgbGV0IG9wdGlvbnM7XG4gIGlmIChvcHRpb25zTW9kaWZpZXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICAgIGxldCBtO1xuICAgIHdoaWxlIChtID0gbmFtZS5tYXRjaChvcHRpb25zTW9kaWZpZXJSRSkpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIG5hbWUubGVuZ3RoIC0gbVswXS5sZW5ndGgpO1xuICAgICAgb3B0aW9uc1ttWzBdLnRvTG93ZXJDYXNlKCldID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZXZlbnQgPSBuYW1lWzJdID09PSBcIjpcIiA/IG5hbWUuc2xpY2UoMykgOiBoeXBoZW5hdGUobmFtZS5zbGljZSgyKSk7XG4gIHJldHVybiBbZXZlbnQsIG9wdGlvbnNdO1xufVxubGV0IGNhY2hlZE5vdyA9IDA7XG5jb25zdCBwID0gLyogQF9fUFVSRV9fICovIFByb21pc2UucmVzb2x2ZSgpO1xuY29uc3QgZ2V0Tm93ID0gKCkgPT4gY2FjaGVkTm93IHx8IChwLnRoZW4oKCkgPT4gY2FjaGVkTm93ID0gMCksIGNhY2hlZE5vdyA9IERhdGUubm93KCkpO1xuZnVuY3Rpb24gY3JlYXRlSW52b2tlcihpbml0aWFsVmFsdWUsIGluc3RhbmNlKSB7XG4gIGNvbnN0IGludm9rZXIgPSAoZSkgPT4ge1xuICAgIGlmICghZS5fdnRzKSB7XG4gICAgICBlLl92dHMgPSBEYXRlLm5vdygpO1xuICAgIH0gZWxzZSBpZiAoZS5fdnRzIDw9IGludm9rZXIuYXR0YWNoZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoXG4gICAgICBwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbihlLCBpbnZva2VyLnZhbHVlKSxcbiAgICAgIGluc3RhbmNlLFxuICAgICAgNSxcbiAgICAgIFtlXVxuICAgICk7XG4gIH07XG4gIGludm9rZXIudmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gIGludm9rZXIuYXR0YWNoZWQgPSBnZXROb3coKTtcbiAgcmV0dXJuIGludm9rZXI7XG59XG5mdW5jdGlvbiBzYW5pdGl6ZUV2ZW50VmFsdWUodmFsdWUsIHByb3BOYW1lKSB7XG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSB8fCBpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB3YXJuKFxuICAgIGBXcm9uZyB0eXBlIHBhc3NlZCBhcyBldmVudCBoYW5kbGVyIHRvICR7cHJvcE5hbWV9IC0gZGlkIHlvdSBmb3JnZXQgQCBvciA6IGluIGZyb250IG9mIHlvdXIgcHJvcD9cbkV4cGVjdGVkIGZ1bmN0aW9uIG9yIGFycmF5IG9mIGZ1bmN0aW9ucywgcmVjZWl2ZWQgdHlwZSAke3R5cGVvZiB2YWx1ZX0uYFxuICApO1xuICByZXR1cm4gTk9PUDtcbn1cbmZ1bmN0aW9uIHBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKGUsIHZhbHVlKSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGNvbnN0IG9yaWdpbmFsU3RvcCA9IGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uO1xuICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uID0gKCkgPT4ge1xuICAgICAgb3JpZ2luYWxTdG9wLmNhbGwoZSk7XG4gICAgICBlLl9zdG9wcGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiB2YWx1ZS5tYXAoXG4gICAgICAoZm4pID0+IChlMikgPT4gIWUyLl9zdG9wcGVkICYmIGZuICYmIGZuKGUyKVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbmNvbnN0IGlzTmF0aXZlT24gPSAoa2V5KSA9PiBrZXkuY2hhckNvZGVBdCgwKSA9PT0gMTExICYmIGtleS5jaGFyQ29kZUF0KDEpID09PSAxMTAgJiYgLy8gbG93ZXJjYXNlIGxldHRlclxua2V5LmNoYXJDb2RlQXQoMikgPiA5NiAmJiBrZXkuY2hhckNvZGVBdCgyKSA8IDEyMztcbmNvbnN0IHBhdGNoUHJvcCA9IChlbCwga2V5LCBwcmV2VmFsdWUsIG5leHRWYWx1ZSwgbmFtZXNwYWNlLCBwYXJlbnRDb21wb25lbnQpID0+IHtcbiAgY29uc3QgaXNTVkcgPSBuYW1lc3BhY2UgPT09IFwic3ZnXCI7XG4gIGlmIChrZXkgPT09IFwiY2xhc3NcIikge1xuICAgIHBhdGNoQ2xhc3MoZWwsIG5leHRWYWx1ZSwgaXNTVkcpO1xuICB9IGVsc2UgaWYgKGtleSA9PT0gXCJzdHlsZVwiKSB7XG4gICAgcGF0Y2hTdHlsZShlbCwgcHJldlZhbHVlLCBuZXh0VmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzT24oa2V5KSkge1xuICAgIGlmICghaXNNb2RlbExpc3RlbmVyKGtleSkpIHtcbiAgICAgIHBhdGNoRXZlbnQoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIHBhcmVudENvbXBvbmVudCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGtleVswXSA9PT0gXCIuXCIgPyAoa2V5ID0ga2V5LnNsaWNlKDEpLCB0cnVlKSA6IGtleVswXSA9PT0gXCJeXCIgPyAoa2V5ID0ga2V5LnNsaWNlKDEpLCBmYWxzZSkgOiBzaG91bGRTZXRBc1Byb3AoZWwsIGtleSwgbmV4dFZhbHVlLCBpc1NWRykpIHtcbiAgICBwYXRjaERPTVByb3AoZWwsIGtleSwgbmV4dFZhbHVlKTtcbiAgICBpZiAoIWVsLnRhZ05hbWUuaW5jbHVkZXMoXCItXCIpICYmIChrZXkgPT09IFwidmFsdWVcIiB8fCBrZXkgPT09IFwiY2hlY2tlZFwiIHx8IGtleSA9PT0gXCJzZWxlY3RlZFwiKSkge1xuICAgICAgcGF0Y2hBdHRyKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcsIHBhcmVudENvbXBvbmVudCwga2V5ICE9PSBcInZhbHVlXCIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChcbiAgICAvLyAjMTEwODEgZm9yY2Ugc2V0IHByb3BzIGZvciBwb3NzaWJsZSBhc3luYyBjdXN0b20gZWxlbWVudFxuICAgIGVsLl9pc1Z1ZUNFICYmICgvW0EtWl0vLnRlc3Qoa2V5KSB8fCAhaXNTdHJpbmcobmV4dFZhbHVlKSlcbiAgKSB7XG4gICAgcGF0Y2hET01Qcm9wKGVsLCBjYW1lbGl6ZShrZXkpLCBuZXh0VmFsdWUsIHBhcmVudENvbXBvbmVudCwga2V5KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoa2V5ID09PSBcInRydWUtdmFsdWVcIikge1xuICAgICAgZWwuX3RydWVWYWx1ZSA9IG5leHRWYWx1ZTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJmYWxzZS12YWx1ZVwiKSB7XG4gICAgICBlbC5fZmFsc2VWYWx1ZSA9IG5leHRWYWx1ZTtcbiAgICB9XG4gICAgcGF0Y2hBdHRyKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpO1xuICB9XG59O1xuZnVuY3Rpb24gc2hvdWxkU2V0QXNQcm9wKGVsLCBrZXksIHZhbHVlLCBpc1NWRykge1xuICBpZiAoaXNTVkcpIHtcbiAgICBpZiAoa2V5ID09PSBcImlubmVySFRNTFwiIHx8IGtleSA9PT0gXCJ0ZXh0Q29udGVudFwiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGtleSBpbiBlbCAmJiBpc05hdGl2ZU9uKGtleSkgJiYgaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGtleSA9PT0gXCJzcGVsbGNoZWNrXCIgfHwga2V5ID09PSBcImRyYWdnYWJsZVwiIHx8IGtleSA9PT0gXCJ0cmFuc2xhdGVcIiB8fCBrZXkgPT09IFwiYXV0b2NvcnJlY3RcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoa2V5ID09PSBcImZvcm1cIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoa2V5ID09PSBcImxpc3RcIiAmJiBlbC50YWdOYW1lID09PSBcIklOUFVUXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGtleSA9PT0gXCJ0eXBlXCIgJiYgZWwudGFnTmFtZSA9PT0gXCJURVhUQVJFQVwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChrZXkgPT09IFwid2lkdGhcIiB8fCBrZXkgPT09IFwiaGVpZ2h0XCIpIHtcbiAgICBjb25zdCB0YWcgPSBlbC50YWdOYW1lO1xuICAgIGlmICh0YWcgPT09IFwiSU1HXCIgfHwgdGFnID09PSBcIlZJREVPXCIgfHwgdGFnID09PSBcIkNBTlZBU1wiIHx8IHRhZyA9PT0gXCJTT1VSQ0VcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNOYXRpdmVPbihrZXkpICYmIGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4ga2V5IGluIGVsO1xufVxuXG5jb25zdCBSRU1PVkFMID0ge307XG4vKiEgI19fTk9fU0lERV9FRkZFQ1RTX18gKi9cbi8vIEBfX05PX1NJREVfRUZGRUNUU19fXG5mdW5jdGlvbiBkZWZpbmVDdXN0b21FbGVtZW50KG9wdGlvbnMsIGV4dHJhT3B0aW9ucywgX2NyZWF0ZUFwcCkge1xuICBjb25zdCBDb21wID0gZGVmaW5lQ29tcG9uZW50KG9wdGlvbnMsIGV4dHJhT3B0aW9ucyk7XG4gIGlmIChpc1BsYWluT2JqZWN0KENvbXApKSBleHRlbmQoQ29tcCwgZXh0cmFPcHRpb25zKTtcbiAgY2xhc3MgVnVlQ3VzdG9tRWxlbWVudCBleHRlbmRzIFZ1ZUVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGluaXRpYWxQcm9wcykge1xuICAgICAgc3VwZXIoQ29tcCwgaW5pdGlhbFByb3BzLCBfY3JlYXRlQXBwKTtcbiAgICB9XG4gIH1cbiAgVnVlQ3VzdG9tRWxlbWVudC5kZWYgPSBDb21wO1xuICByZXR1cm4gVnVlQ3VzdG9tRWxlbWVudDtcbn1cbi8qISAjX19OT19TSURFX0VGRkVDVFNfXyAqL1xuY29uc3QgZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCA9IC8qIEBfX05PX1NJREVfRUZGRUNUU19fICovIChvcHRpb25zLCBleHRyYU9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBkZWZpbmVDdXN0b21FbGVtZW50KG9wdGlvbnMsIGV4dHJhT3B0aW9ucywgY3JlYXRlU1NSQXBwKTtcbn07XG5jb25zdCBCYXNlQ2xhc3MgPSB0eXBlb2YgSFRNTEVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCIgPyBIVE1MRWxlbWVudCA6IGNsYXNzIHtcbn07XG5jbGFzcyBWdWVFbGVtZW50IGV4dGVuZHMgQmFzZUNsYXNzIHtcbiAgY29uc3RydWN0b3IoX2RlZiwgX3Byb3BzID0ge30sIF9jcmVhdGVBcHAgPSBjcmVhdGVBcHApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2RlZiA9IF9kZWY7XG4gICAgdGhpcy5fcHJvcHMgPSBfcHJvcHM7XG4gICAgdGhpcy5fY3JlYXRlQXBwID0gX2NyZWF0ZUFwcDtcbiAgICB0aGlzLl9pc1Z1ZUNFID0gdHJ1ZTtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgLyoqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdGhpcy5fYXBwID0gbnVsbDtcbiAgICAvKipcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB0aGlzLl9ub25jZSA9IHRoaXMuX2RlZi5ub25jZTtcbiAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZXNvbHZlZCA9IGZhbHNlO1xuICAgIHRoaXMuX251bWJlclByb3BzID0gbnVsbDtcbiAgICB0aGlzLl9zdHlsZUNoaWxkcmVuID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrU2V0KCk7XG4gICAgdGhpcy5fb2IgPSBudWxsO1xuICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QgJiYgX2NyZWF0ZUFwcCAhPT0gY3JlYXRlQXBwKSB7XG4gICAgICB0aGlzLl9yb290ID0gdGhpcy5zaGFkb3dSb290O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5zaGFkb3dSb290KSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgYEN1c3RvbSBlbGVtZW50IGhhcyBwcmUtcmVuZGVyZWQgZGVjbGFyYXRpdmUgc2hhZG93IHJvb3QgYnV0IGlzIG5vdCBkZWZpbmVkIGFzIGh5ZHJhdGFibGUuIFVzZSBcXGBkZWZpbmVTU1JDdXN0b21FbGVtZW50XFxgLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChfZGVmLnNoYWRvd1Jvb3QgIT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogXCJvcGVuXCIgfSk7XG4gICAgICAgIHRoaXMuX3Jvb3QgPSB0aGlzLnNoYWRvd1Jvb3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9yb290ID0gdGhpcztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLnNoYWRvd1Jvb3QgJiYgIXRoaXMuX3Jlc29sdmVkKSB7XG4gICAgICB0aGlzLl9wYXJzZVNsb3RzKCk7XG4gICAgfVxuICAgIHRoaXMuX2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgbGV0IHBhcmVudCA9IHRoaXM7XG4gICAgd2hpbGUgKHBhcmVudCA9IHBhcmVudCAmJiAocGFyZW50LnBhcmVudE5vZGUgfHwgcGFyZW50Lmhvc3QpKSB7XG4gICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgVnVlRWxlbWVudCkge1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XG4gICAgICBpZiAodGhpcy5fcmVzb2x2ZWQpIHtcbiAgICAgICAgdGhpcy5fbW91bnQodGhpcy5fZGVmKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nUmVzb2x2ZSkge1xuICAgICAgICAgIHRoaXMuX3BlbmRpbmdSZXNvbHZlID0gcGFyZW50Ll9wZW5kaW5nUmVzb2x2ZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdSZXNvbHZlID0gdm9pZCAwO1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZURlZigpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3Jlc29sdmVEZWYoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBfc2V0UGFyZW50KHBhcmVudCA9IHRoaXMuX3BhcmVudCkge1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHRoaXMuX2luc3RhbmNlLnBhcmVudCA9IHBhcmVudC5faW5zdGFuY2U7XG4gICAgICB0aGlzLl9pbmhlcml0UGFyZW50Q29udGV4dChwYXJlbnQpO1xuICAgIH1cbiAgfVxuICBfaW5oZXJpdFBhcmVudENvbnRleHQocGFyZW50ID0gdGhpcy5fcGFyZW50KSB7XG4gICAgaWYgKHBhcmVudCAmJiB0aGlzLl9hcHApIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihcbiAgICAgICAgdGhpcy5fYXBwLl9jb250ZXh0LnByb3ZpZGVzLFxuICAgICAgICBwYXJlbnQuX2luc3RhbmNlLnByb3ZpZGVzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLl9jb25uZWN0ZWQgPSBmYWxzZTtcbiAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xuICAgICAgICBpZiAodGhpcy5fb2IpIHtcbiAgICAgICAgICB0aGlzLl9vYi5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgdGhpcy5fb2IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FwcCAmJiB0aGlzLl9hcHAudW5tb3VudCgpO1xuICAgICAgICBpZiAodGhpcy5faW5zdGFuY2UpIHRoaXMuX2luc3RhbmNlLmNlID0gdm9pZCAwO1xuICAgICAgICB0aGlzLl9hcHAgPSB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIHJlc29sdmUgaW5uZXIgY29tcG9uZW50IGRlZmluaXRpb24gKGhhbmRsZSBwb3NzaWJsZSBhc3luYyBjb21wb25lbnQpXG4gICAqL1xuICBfcmVzb2x2ZURlZigpIHtcbiAgICBpZiAodGhpcy5fcGVuZGluZ1Jlc29sdmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuX3NldEF0dHIodGhpcy5hdHRyaWJ1dGVzW2ldLm5hbWUpO1xuICAgIH1cbiAgICB0aGlzLl9vYiA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnMpID0+IHtcbiAgICAgIGZvciAoY29uc3QgbSBvZiBtdXRhdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fc2V0QXR0cihtLmF0dHJpYnV0ZU5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX29iLm9ic2VydmUodGhpcywgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuICAgIGNvbnN0IHJlc29sdmUgPSAoZGVmLCBpc0FzeW5jID0gZmFsc2UpID0+IHtcbiAgICAgIHRoaXMuX3Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuX3BlbmRpbmdSZXNvbHZlID0gdm9pZCAwO1xuICAgICAgY29uc3QgeyBwcm9wcywgc3R5bGVzIH0gPSBkZWY7XG4gICAgICBsZXQgbnVtYmVyUHJvcHM7XG4gICAgICBpZiAocHJvcHMgJiYgIWlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgY29uc3Qgb3B0ID0gcHJvcHNba2V5XTtcbiAgICAgICAgICBpZiAob3B0ID09PSBOdW1iZXIgfHwgb3B0ICYmIG9wdC50eXBlID09PSBOdW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChrZXkgaW4gdGhpcy5fcHJvcHMpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcHJvcHNba2V5XSA9IHRvTnVtYmVyKHRoaXMuX3Byb3BzW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKG51bWJlclByb3BzIHx8IChudW1iZXJQcm9wcyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpKSlbY2FtZWxpemUoa2V5KV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fbnVtYmVyUHJvcHMgPSBudW1iZXJQcm9wcztcbiAgICAgIHRoaXMuX3Jlc29sdmVQcm9wcyhkZWYpO1xuICAgICAgaWYgKHRoaXMuc2hhZG93Um9vdCkge1xuICAgICAgICB0aGlzLl9hcHBseVN0eWxlcyhzdHlsZXMpO1xuICAgICAgfSBlbHNlIGlmIChzdHlsZXMpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIkN1c3RvbSBlbGVtZW50IHN0eWxlIGluamVjdGlvbiBpcyBub3Qgc3VwcG9ydGVkIHdoZW4gdXNpbmcgc2hhZG93Um9vdDogZmFsc2VcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhpcy5fbW91bnQoZGVmKTtcbiAgICB9O1xuICAgIGNvbnN0IGFzeW5jRGVmID0gdGhpcy5fZGVmLl9fYXN5bmNMb2FkZXI7XG4gICAgaWYgKGFzeW5jRGVmKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nUmVzb2x2ZSA9IGFzeW5jRGVmKCkudGhlbihcbiAgICAgICAgKGRlZikgPT4gcmVzb2x2ZSh0aGlzLl9kZWYgPSBkZWYsIHRydWUpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlKHRoaXMuX2RlZik7XG4gICAgfVxuICB9XG4gIF9tb3VudChkZWYpIHtcbiAgICBpZiAoIWRlZi5uYW1lKSB7XG4gICAgICBkZWYubmFtZSA9IFwiVnVlRWxlbWVudFwiO1xuICAgIH1cbiAgICB0aGlzLl9hcHAgPSB0aGlzLl9jcmVhdGVBcHAoZGVmKTtcbiAgICB0aGlzLl9pbmhlcml0UGFyZW50Q29udGV4dCgpO1xuICAgIGlmIChkZWYuY29uZmlndXJlQXBwKSB7XG4gICAgICBkZWYuY29uZmlndXJlQXBwKHRoaXMuX2FwcCk7XG4gICAgfVxuICAgIHRoaXMuX2FwcC5fY2VWTm9kZSA9IHRoaXMuX2NyZWF0ZVZOb2RlKCk7XG4gICAgdGhpcy5fYXBwLm1vdW50KHRoaXMuX3Jvb3QpO1xuICAgIGNvbnN0IGV4cG9zZWQgPSB0aGlzLl9pbnN0YW5jZSAmJiB0aGlzLl9pbnN0YW5jZS5leHBvc2VkO1xuICAgIGlmICghZXhwb3NlZCkgcmV0dXJuO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGV4cG9zZWQpIHtcbiAgICAgIGlmICghaGFzT3duKHRoaXMsIGtleSkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGtleSwge1xuICAgICAgICAgIC8vIHVud3JhcCByZWYgdG8gYmUgY29uc2lzdGVudCB3aXRoIHB1YmxpYyBpbnN0YW5jZSBiZWhhdmlvclxuICAgICAgICAgIGdldDogKCkgPT4gdW5yZWYoZXhwb3NlZFtrZXldKVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oYEV4cG9zZWQgcHJvcGVydHkgXCIke2tleX1cIiBhbHJlYWR5IGV4aXN0cyBvbiBjdXN0b20gZWxlbWVudC5gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX3Jlc29sdmVQcm9wcyhkZWYpIHtcbiAgICBjb25zdCB7IHByb3BzIH0gPSBkZWY7XG4gICAgY29uc3QgZGVjbGFyZWRQcm9wS2V5cyA9IGlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBPYmplY3Qua2V5cyhwcm9wcyB8fCB7fSk7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcykpIHtcbiAgICAgIGlmIChrZXlbMF0gIT09IFwiX1wiICYmIGRlY2xhcmVkUHJvcEtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICB0aGlzLl9zZXRQcm9wKGtleSwgdGhpc1trZXldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgb2YgZGVjbGFyZWRQcm9wS2V5cy5tYXAoY2FtZWxpemUpKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJvcChrZXkpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgdGhpcy5fc2V0UHJvcChrZXksIHZhbCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBfc2V0QXR0cihrZXkpIHtcbiAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJkYXRhLXYtXCIpKSByZXR1cm47XG4gICAgY29uc3QgaGFzID0gdGhpcy5oYXNBdHRyaWJ1dGUoa2V5KTtcbiAgICBsZXQgdmFsdWUgPSBoYXMgPyB0aGlzLmdldEF0dHJpYnV0ZShrZXkpIDogUkVNT1ZBTDtcbiAgICBjb25zdCBjYW1lbEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgaWYgKGhhcyAmJiB0aGlzLl9udW1iZXJQcm9wcyAmJiB0aGlzLl9udW1iZXJQcm9wc1tjYW1lbEtleV0pIHtcbiAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgIH1cbiAgICB0aGlzLl9zZXRQcm9wKGNhbWVsS2V5LCB2YWx1ZSwgZmFsc2UsIHRydWUpO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9nZXRQcm9wKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9wcm9wc1trZXldO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9zZXRQcm9wKGtleSwgdmFsLCBzaG91bGRSZWZsZWN0ID0gdHJ1ZSwgc2hvdWxkVXBkYXRlID0gZmFsc2UpIHtcbiAgICBpZiAodmFsICE9PSB0aGlzLl9wcm9wc1trZXldKSB7XG4gICAgICBpZiAodmFsID09PSBSRU1PVkFMKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9wcm9wc1trZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcHJvcHNba2V5XSA9IHZhbDtcbiAgICAgICAgaWYgKGtleSA9PT0gXCJrZXlcIiAmJiB0aGlzLl9hcHApIHtcbiAgICAgICAgICB0aGlzLl9hcHAuX2NlVk5vZGUua2V5ID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlICYmIHRoaXMuX2luc3RhbmNlKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHNob3VsZFJlZmxlY3QpIHtcbiAgICAgICAgY29uc3Qgb2IgPSB0aGlzLl9vYjtcbiAgICAgICAgb2IgJiYgb2IuZGlzY29ubmVjdCgpO1xuICAgICAgICBpZiAodmFsID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSksIFwiXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGh5cGhlbmF0ZShrZXkpLCB2YWwgKyBcIlwiKTtcbiAgICAgICAgfSBlbHNlIGlmICghdmFsKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSkpO1xuICAgICAgICB9XG4gICAgICAgIG9iICYmIG9iLm9ic2VydmUodGhpcywgeyBhdHRyaWJ1dGVzOiB0cnVlIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBfdXBkYXRlKCkge1xuICAgIGNvbnN0IHZub2RlID0gdGhpcy5fY3JlYXRlVk5vZGUoKTtcbiAgICBpZiAodGhpcy5fYXBwKSB2bm9kZS5hcHBDb250ZXh0ID0gdGhpcy5fYXBwLl9jb250ZXh0O1xuICAgIHJlbmRlcih2bm9kZSwgdGhpcy5fcm9vdCk7XG4gIH1cbiAgX2NyZWF0ZVZOb2RlKCkge1xuICAgIGNvbnN0IGJhc2VQcm9wcyA9IHt9O1xuICAgIGlmICghdGhpcy5zaGFkb3dSb290KSB7XG4gICAgICBiYXNlUHJvcHMub25Wbm9kZU1vdW50ZWQgPSBiYXNlUHJvcHMub25Wbm9kZVVwZGF0ZWQgPSB0aGlzLl9yZW5kZXJTbG90cy5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKHRoaXMuX2RlZiwgZXh0ZW5kKGJhc2VQcm9wcywgdGhpcy5fcHJvcHMpKTtcbiAgICBpZiAoIXRoaXMuX2luc3RhbmNlKSB7XG4gICAgICB2bm9kZS5jZSA9IChpbnN0YW5jZSkgPT4ge1xuICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IGluc3RhbmNlO1xuICAgICAgICBpbnN0YW5jZS5jZSA9IHRoaXM7XG4gICAgICAgIGluc3RhbmNlLmlzQ0UgPSB0cnVlO1xuICAgICAgICB7XG4gICAgICAgICAgaW5zdGFuY2UuY2VSZWxvYWQgPSAobmV3U3R5bGVzKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3R5bGVzKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3N0eWxlcy5mb3JFYWNoKChzKSA9PiB0aGlzLl9yb290LnJlbW92ZUNoaWxkKHMpKTtcbiAgICAgICAgICAgICAgdGhpcy5fc3R5bGVzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hcHBseVN0eWxlcyhuZXdTdHlsZXMpO1xuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXNwYXRjaCA9IChldmVudCwgYXJncykgPT4ge1xuICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgIG5ldyBDdXN0b21FdmVudChcbiAgICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICAgIGlzUGxhaW5PYmplY3QoYXJnc1swXSkgPyBleHRlbmQoeyBkZXRhaWw6IGFyZ3MgfSwgYXJnc1swXSkgOiB7IGRldGFpbDogYXJncyB9XG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW5zdGFuY2UuZW1pdCA9IChldmVudCwgLi4uYXJncykgPT4ge1xuICAgICAgICAgIGRpc3BhdGNoKGV2ZW50LCBhcmdzKTtcbiAgICAgICAgICBpZiAoaHlwaGVuYXRlKGV2ZW50KSAhPT0gZXZlbnQpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKGh5cGhlbmF0ZShldmVudCksIGFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fc2V0UGFyZW50KCk7XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGU7XG4gIH1cbiAgX2FwcGx5U3R5bGVzKHN0eWxlcywgb3duZXIpIHtcbiAgICBpZiAoIXN0eWxlcykgcmV0dXJuO1xuICAgIGlmIChvd25lcikge1xuICAgICAgaWYgKG93bmVyID09PSB0aGlzLl9kZWYgfHwgdGhpcy5fc3R5bGVDaGlsZHJlbi5oYXMob3duZXIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N0eWxlQ2hpbGRyZW4uYWRkKG93bmVyKTtcbiAgICB9XG4gICAgY29uc3Qgbm9uY2UgPSB0aGlzLl9ub25jZTtcbiAgICBmb3IgKGxldCBpID0gc3R5bGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgaWYgKG5vbmNlKSBzLnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgICAgIHMudGV4dENvbnRlbnQgPSBzdHlsZXNbaV07XG4gICAgICB0aGlzLnNoYWRvd1Jvb3QucHJlcGVuZChzKTtcbiAgICAgIHtcbiAgICAgICAgaWYgKG93bmVyKSB7XG4gICAgICAgICAgaWYgKG93bmVyLl9faG1ySWQpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fY2hpbGRTdHlsZXMpIHRoaXMuX2NoaWxkU3R5bGVzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGxldCBlbnRyeSA9IHRoaXMuX2NoaWxkU3R5bGVzLmdldChvd25lci5fX2htcklkKTtcbiAgICAgICAgICAgIGlmICghZW50cnkpIHtcbiAgICAgICAgICAgICAgdGhpcy5fY2hpbGRTdHlsZXMuc2V0KG93bmVyLl9faG1ySWQsIGVudHJ5ID0gW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW50cnkucHVzaChzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKHRoaXMuX3N0eWxlcyB8fCAodGhpcy5fc3R5bGVzID0gW10pKS5wdXNoKHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBPbmx5IGNhbGxlZCB3aGVuIHNoYWRvd1Jvb3QgaXMgZmFsc2VcbiAgICovXG4gIF9wYXJzZVNsb3RzKCkge1xuICAgIGNvbnN0IHNsb3RzID0gdGhpcy5fc2xvdHMgPSB7fTtcbiAgICBsZXQgbjtcbiAgICB3aGlsZSAobiA9IHRoaXMuZmlyc3RDaGlsZCkge1xuICAgICAgY29uc3Qgc2xvdE5hbWUgPSBuLm5vZGVUeXBlID09PSAxICYmIG4uZ2V0QXR0cmlidXRlKFwic2xvdFwiKSB8fCBcImRlZmF1bHRcIjtcbiAgICAgIChzbG90c1tzbG90TmFtZV0gfHwgKHNsb3RzW3Nsb3ROYW1lXSA9IFtdKSkucHVzaChuKTtcbiAgICAgIHRoaXMucmVtb3ZlQ2hpbGQobik7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBPbmx5IGNhbGxlZCB3aGVuIHNoYWRvd1Jvb3QgaXMgZmFsc2VcbiAgICovXG4gIF9yZW5kZXJTbG90cygpIHtcbiAgICBjb25zdCBvdXRsZXRzID0gKHRoaXMuX3RlbGVwb3J0VGFyZ2V0IHx8IHRoaXMpLnF1ZXJ5U2VsZWN0b3JBbGwoXCJzbG90XCIpO1xuICAgIGNvbnN0IHNjb3BlSWQgPSB0aGlzLl9pbnN0YW5jZS50eXBlLl9fc2NvcGVJZDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dGxldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IG8gPSBvdXRsZXRzW2ldO1xuICAgICAgY29uc3Qgc2xvdE5hbWUgPSBvLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgfHwgXCJkZWZhdWx0XCI7XG4gICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5fc2xvdHNbc2xvdE5hbWVdO1xuICAgICAgY29uc3QgcGFyZW50ID0gby5wYXJlbnROb2RlO1xuICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgZm9yIChjb25zdCBuIG9mIGNvbnRlbnQpIHtcbiAgICAgICAgICBpZiAoc2NvcGVJZCAmJiBuLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICBjb25zdCBpZCA9IHNjb3BlSWQgKyBcIi1zXCI7XG4gICAgICAgICAgICBjb25zdCB3YWxrZXIgPSBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKG4sIDEpO1xuICAgICAgICAgICAgbi5zZXRBdHRyaWJ1dGUoaWQsIFwiXCIpO1xuICAgICAgICAgICAgbGV0IGNoaWxkO1xuICAgICAgICAgICAgd2hpbGUgKGNoaWxkID0gd2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICAgICAgICAgICAgY2hpbGQuc2V0QXR0cmlidXRlKGlkLCBcIlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShuLCBvKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2hpbGUgKG8uZmlyc3RDaGlsZCkgcGFyZW50Lmluc2VydEJlZm9yZShvLmZpcnN0Q2hpbGQsIG8pO1xuICAgICAgfVxuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKG8pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBfaW5qZWN0Q2hpbGRTdHlsZShjb21wKSB7XG4gICAgdGhpcy5fYXBwbHlTdHlsZXMoY29tcC5zdHlsZXMsIGNvbXApO1xuICB9XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF9yZW1vdmVDaGlsZFN0eWxlKGNvbXApIHtcbiAgICB7XG4gICAgICB0aGlzLl9zdHlsZUNoaWxkcmVuLmRlbGV0ZShjb21wKTtcbiAgICAgIGlmICh0aGlzLl9jaGlsZFN0eWxlcyAmJiBjb21wLl9faG1ySWQpIHtcbiAgICAgICAgY29uc3Qgb2xkU3R5bGVzID0gdGhpcy5fY2hpbGRTdHlsZXMuZ2V0KGNvbXAuX19obXJJZCk7XG4gICAgICAgIGlmIChvbGRTdHlsZXMpIHtcbiAgICAgICAgICBvbGRTdHlsZXMuZm9yRWFjaCgocykgPT4gdGhpcy5fcm9vdC5yZW1vdmVDaGlsZChzKSk7XG4gICAgICAgICAgb2xkU3R5bGVzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHVzZUhvc3QoY2FsbGVyKSB7XG4gIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG4gIGNvbnN0IGVsID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuY2U7XG4gIGlmIChlbCkge1xuICAgIHJldHVybiBlbDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgJHtjYWxsZXIgfHwgXCJ1c2VIb3N0XCJ9IGNhbGxlZCB3aXRob3V0IGFuIGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UuYFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybihcbiAgICAgICAgYCR7Y2FsbGVyIHx8IFwidXNlSG9zdFwifSBjYW4gb25seSBiZSB1c2VkIGluIGNvbXBvbmVudHMgZGVmaW5lZCB2aWEgZGVmaW5lQ3VzdG9tRWxlbWVudC5gXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHVzZVNoYWRvd1Jvb3QoKSB7XG4gIGNvbnN0IGVsID0gdXNlSG9zdChcInVzZVNoYWRvd1Jvb3RcIikgO1xuICByZXR1cm4gZWwgJiYgZWwuc2hhZG93Um9vdDtcbn1cblxuZnVuY3Rpb24gdXNlQ3NzTW9kdWxlKG5hbWUgPSBcIiRzdHlsZVwiKSB7XG4gIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgIHdhcm4oYHVzZUNzc01vZHVsZSBtdXN0IGJlIGNhbGxlZCBpbnNpZGUgc2V0dXAoKWApO1xuICAgICAgcmV0dXJuIEVNUFRZX09CSjtcbiAgICB9XG4gICAgY29uc3QgbW9kdWxlcyA9IGluc3RhbmNlLnR5cGUuX19jc3NNb2R1bGVzO1xuICAgIGlmICghbW9kdWxlcykge1xuICAgICAgd2FybihgQ3VycmVudCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIENTUyBtb2R1bGVzIGluamVjdGVkLmApO1xuICAgICAgcmV0dXJuIEVNUFRZX09CSjtcbiAgICB9XG4gICAgY29uc3QgbW9kID0gbW9kdWxlc1tuYW1lXTtcbiAgICBpZiAoIW1vZCkge1xuICAgICAgd2FybihgQ3VycmVudCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIENTUyBtb2R1bGUgbmFtZWQgXCIke25hbWV9XCIuYCk7XG4gICAgICByZXR1cm4gRU1QVFlfT0JKO1xuICAgIH1cbiAgICByZXR1cm4gbW9kO1xuICB9XG59XG5cbmNvbnN0IHBvc2l0aW9uTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jb25zdCBuZXdQb3NpdGlvbk1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuY29uc3QgbW92ZUNiS2V5ID0gU3ltYm9sKFwiX21vdmVDYlwiKTtcbmNvbnN0IGVudGVyQ2JLZXkgPSBTeW1ib2woXCJfZW50ZXJDYlwiKTtcbmNvbnN0IGRlY29yYXRlID0gKHQpID0+IHtcbiAgZGVsZXRlIHQucHJvcHMubW9kZTtcbiAgcmV0dXJuIHQ7XG59O1xuY29uc3QgVHJhbnNpdGlvbkdyb3VwSW1wbCA9IC8qIEBfX1BVUkVfXyAqLyBkZWNvcmF0ZSh7XG4gIG5hbWU6IFwiVHJhbnNpdGlvbkdyb3VwXCIsXG4gIHByb3BzOiAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKHt9LCBUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLCB7XG4gICAgdGFnOiBTdHJpbmcsXG4gICAgbW92ZUNsYXNzOiBTdHJpbmdcbiAgfSksXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHN0YXRlID0gdXNlVHJhbnNpdGlvblN0YXRlKCk7XG4gICAgbGV0IHByZXZDaGlsZHJlbjtcbiAgICBsZXQgY2hpbGRyZW47XG4gICAgb25VcGRhdGVkKCgpID0+IHtcbiAgICAgIGlmICghcHJldkNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBtb3ZlQ2xhc3MgPSBwcm9wcy5tb3ZlQ2xhc3MgfHwgYCR7cHJvcHMubmFtZSB8fCBcInZcIn0tbW92ZWA7XG4gICAgICBpZiAoIWhhc0NTU1RyYW5zZm9ybShcbiAgICAgICAgcHJldkNoaWxkcmVuWzBdLmVsLFxuICAgICAgICBpbnN0YW5jZS52bm9kZS5lbCxcbiAgICAgICAgbW92ZUNsYXNzXG4gICAgICApKSB7XG4gICAgICAgIHByZXZDaGlsZHJlbiA9IFtdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwcmV2Q2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgICBwcmV2Q2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgICBjb25zdCBtb3ZlZENoaWxkcmVuID0gcHJldkNoaWxkcmVuLmZpbHRlcihhcHBseVRyYW5zbGF0aW9uKTtcbiAgICAgIGZvcmNlUmVmbG93KCk7XG4gICAgICBtb3ZlZENoaWxkcmVuLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgY29uc3QgZWwgPSBjLmVsO1xuICAgICAgICBjb25zdCBzdHlsZSA9IGVsLnN0eWxlO1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IFwiXCI7XG4gICAgICAgIGNvbnN0IGNiID0gZWxbbW92ZUNiS2V5XSA9IChlKSA9PiB7XG4gICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIGNiKTtcbiAgICAgICAgICAgIGVsW21vdmVDYktleV0gPSBudWxsO1xuICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgY2IpO1xuICAgICAgfSk7XG4gICAgICBwcmV2Q2hpbGRyZW4gPSBbXTtcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgcmF3UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XG4gICAgICBjb25zdCBjc3NUcmFuc2l0aW9uUHJvcHMgPSByZXNvbHZlVHJhbnNpdGlvblByb3BzKHJhd1Byb3BzKTtcbiAgICAgIGxldCB0YWcgPSByYXdQcm9wcy50YWcgfHwgRnJhZ21lbnQ7XG4gICAgICBwcmV2Q2hpbGRyZW4gPSBbXTtcbiAgICAgIGlmIChjaGlsZHJlbikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICBpZiAoY2hpbGQuZWwgJiYgY2hpbGQuZWwgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgICAgICBwcmV2Q2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoXG4gICAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgICByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKFxuICAgICAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgICAgIGNzc1RyYW5zaXRpb25Qcm9wcyxcbiAgICAgICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcG9zaXRpb25NYXAuc2V0KFxuICAgICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgICAgY2hpbGQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQgPyBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oc2xvdHMuZGVmYXVsdCgpKSA6IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICBpZiAoY2hpbGQua2V5ICE9IG51bGwpIHtcbiAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoXG4gICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgIHJlc29sdmVUcmFuc2l0aW9uSG9va3MoY2hpbGQsIGNzc1RyYW5zaXRpb25Qcm9wcywgc3RhdGUsIGluc3RhbmNlKVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hpbGQudHlwZSAhPT0gVGV4dCkge1xuICAgICAgICAgIHdhcm4oYDxUcmFuc2l0aW9uR3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0YWcsIG51bGwsIGNoaWxkcmVuKTtcbiAgICB9O1xuICB9XG59KTtcbmNvbnN0IFRyYW5zaXRpb25Hcm91cCA9IFRyYW5zaXRpb25Hcm91cEltcGw7XG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyhjKSB7XG4gIGNvbnN0IGVsID0gYy5lbDtcbiAgaWYgKGVsW21vdmVDYktleV0pIHtcbiAgICBlbFttb3ZlQ2JLZXldKCk7XG4gIH1cbiAgaWYgKGVsW2VudGVyQ2JLZXldKSB7XG4gICAgZWxbZW50ZXJDYktleV0oKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24oYykge1xuICBuZXdQb3NpdGlvbk1hcC5zZXQoYywgYy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG59XG5mdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uKGMpIHtcbiAgY29uc3Qgb2xkUG9zID0gcG9zaXRpb25NYXAuZ2V0KGMpO1xuICBjb25zdCBuZXdQb3MgPSBuZXdQb3NpdGlvbk1hcC5nZXQoYyk7XG4gIGNvbnN0IGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgY29uc3QgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgY29uc3QgcyA9IGMuZWwuc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLndlYmtpdFRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHtkeH1weCwke2R5fXB4KWA7XG4gICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSBcIjBzXCI7XG4gICAgcmV0dXJuIGM7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhc0NTU1RyYW5zZm9ybShlbCwgcm9vdCwgbW92ZUNsYXNzKSB7XG4gIGNvbnN0IGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gIGNvbnN0IF92dGMgPSBlbFt2dGNLZXldO1xuICBpZiAoX3Z0Yykge1xuICAgIF92dGMuZm9yRWFjaCgoY2xzKSA9PiB7XG4gICAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKChjKSA9PiBjICYmIGNsb25lLmNsYXNzTGlzdC5yZW1vdmUoYykpO1xuICAgIH0pO1xuICB9XG4gIG1vdmVDbGFzcy5zcGxpdCgvXFxzKy8pLmZvckVhY2goKGMpID0+IGMgJiYgY2xvbmUuY2xhc3NMaXN0LmFkZChjKSk7XG4gIGNsb25lLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgY29uc3QgY29udGFpbmVyID0gcm9vdC5ub2RlVHlwZSA9PT0gMSA/IHJvb3QgOiByb290LnBhcmVudE5vZGU7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9uZSk7XG4gIGNvbnN0IHsgaGFzVHJhbnNmb3JtIH0gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjbG9uZSk7XG4gIHJldHVybiBoYXNUcmFuc2Zvcm07XG59XG5cbmNvbnN0IGdldE1vZGVsQXNzaWduZXIgPSAodm5vZGUpID0+IHtcbiAgY29uc3QgZm4gPSB2bm9kZS5wcm9wc1tcIm9uVXBkYXRlOm1vZGVsVmFsdWVcIl0gfHwgZmFsc2U7XG4gIHJldHVybiBpc0FycmF5KGZuKSA/ICh2YWx1ZSkgPT4gaW52b2tlQXJyYXlGbnMoZm4sIHZhbHVlKSA6IGZuO1xufTtcbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydChlKSB7XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XG59XG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kKGUpIHtcbiAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gIGlmICh0YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgdGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIpKTtcbiAgfVxufVxuY29uc3QgYXNzaWduS2V5ID0gU3ltYm9sKFwiX2Fzc2lnblwiKTtcbmNvbnN0IHZNb2RlbFRleHQgPSB7XG4gIGNyZWF0ZWQoZWwsIHsgbW9kaWZpZXJzOiB7IGxhenksIHRyaW0sIG51bWJlciB9IH0sIHZub2RlKSB7XG4gICAgZWxbYXNzaWduS2V5XSA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgIGNvbnN0IGNhc3RUb051bWJlciA9IG51bWJlciB8fCB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50eXBlID09PSBcIm51bWJlclwiO1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIGxhenkgPyBcImNoYW5nZVwiIDogXCJpbnB1dFwiLCAoZSkgPT4ge1xuICAgICAgaWYgKGUudGFyZ2V0LmNvbXBvc2luZykgcmV0dXJuO1xuICAgICAgbGV0IGRvbVZhbHVlID0gZWwudmFsdWU7XG4gICAgICBpZiAodHJpbSkge1xuICAgICAgICBkb21WYWx1ZSA9IGRvbVZhbHVlLnRyaW0oKTtcbiAgICAgIH1cbiAgICAgIGlmIChjYXN0VG9OdW1iZXIpIHtcbiAgICAgICAgZG9tVmFsdWUgPSBsb29zZVRvTnVtYmVyKGRvbVZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsW2Fzc2lnbktleV0oZG9tVmFsdWUpO1xuICAgIH0pO1xuICAgIGlmICh0cmltKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBcImNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICAgIGVsLnZhbHVlID0gZWwudmFsdWUudHJpbSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICghbGF6eSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgXCJjb21wb3NpdGlvbnN0YXJ0XCIsIG9uQ29tcG9zaXRpb25TdGFydCk7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBcImNvbXBvc2l0aW9uZW5kXCIsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgXCJjaGFuZ2VcIiwgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgfVxuICB9LFxuICAvLyBzZXQgdmFsdWUgb24gbW91bnRlZCBzbyBpdCdzIGFmdGVyIG1pbi9tYXggZm9yIHR5cGU9XCJyYW5nZVwiXG4gIG1vdW50ZWQoZWwsIHsgdmFsdWUgfSkge1xuICAgIGVsLnZhbHVlID0gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTtcbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSwgbW9kaWZpZXJzOiB7IGxhenksIHRyaW0sIG51bWJlciB9IH0sIHZub2RlKSB7XG4gICAgZWxbYXNzaWduS2V5XSA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgIGlmIChlbC5jb21wb3NpbmcpIHJldHVybjtcbiAgICBjb25zdCBlbFZhbHVlID0gKG51bWJlciB8fCBlbC50eXBlID09PSBcIm51bWJlclwiKSAmJiAhL14wXFxkLy50ZXN0KGVsLnZhbHVlKSA/IGxvb3NlVG9OdW1iZXIoZWwudmFsdWUpIDogZWwudmFsdWU7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlO1xuICAgIGlmIChlbFZhbHVlID09PSBuZXdWYWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZWwgJiYgZWwudHlwZSAhPT0gXCJyYW5nZVwiKSB7XG4gICAgICBpZiAobGF6eSAmJiB2YWx1ZSA9PT0gb2xkVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRyaW0gJiYgZWwudmFsdWUudHJpbSgpID09PSBuZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XG4gIH1cbn07XG5jb25zdCB2TW9kZWxDaGVja2JveCA9IHtcbiAgLy8gIzQwOTYgYXJyYXkgY2hlY2tib3hlcyBuZWVkIHRvIGJlIGRlZXAgdHJhdmVyc2VkXG4gIGRlZXA6IHRydWUsXG4gIGNyZWF0ZWQoZWwsIF8sIHZub2RlKSB7XG4gICAgZWxbYXNzaWduS2V5XSA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsIFwiY2hhbmdlXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vZGVsVmFsdWUgPSBlbC5fbW9kZWxWYWx1ZTtcbiAgICAgIGNvbnN0IGVsZW1lbnRWYWx1ZSA9IGdldFZhbHVlKGVsKTtcbiAgICAgIGNvbnN0IGNoZWNrZWQgPSBlbC5jaGVja2VkO1xuICAgICAgY29uc3QgYXNzaWduID0gZWxbYXNzaWduS2V5XTtcbiAgICAgIGlmIChpc0FycmF5KG1vZGVsVmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gbG9vc2VJbmRleE9mKG1vZGVsVmFsdWUsIGVsZW1lbnRWYWx1ZSk7XG4gICAgICAgIGNvbnN0IGZvdW5kID0gaW5kZXggIT09IC0xO1xuICAgICAgICBpZiAoY2hlY2tlZCAmJiAhZm91bmQpIHtcbiAgICAgICAgICBhc3NpZ24obW9kZWxWYWx1ZS5jb25jYXQoZWxlbWVudFZhbHVlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWNoZWNrZWQgJiYgZm91bmQpIHtcbiAgICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IFsuLi5tb2RlbFZhbHVlXTtcbiAgICAgICAgICBmaWx0ZXJlZC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIGFzc2lnbihmaWx0ZXJlZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNTZXQobW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgY29uc3QgY2xvbmVkID0gbmV3IFNldChtb2RlbFZhbHVlKTtcbiAgICAgICAgaWYgKGNoZWNrZWQpIHtcbiAgICAgICAgICBjbG9uZWQuYWRkKGVsZW1lbnRWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvbmVkLmRlbGV0ZShlbGVtZW50VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGFzc2lnbihjbG9uZWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXNzaWduKGdldENoZWNrYm94VmFsdWUoZWwsIGNoZWNrZWQpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgLy8gc2V0IGluaXRpYWwgY2hlY2tlZCBvbiBtb3VudCB0byB3YWl0IGZvciB0cnVlLXZhbHVlL2ZhbHNlLXZhbHVlXG4gIG1vdW50ZWQ6IHNldENoZWNrZWQsXG4gIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBlbFthc3NpZ25LZXldID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgc2V0Q2hlY2tlZChlbCwgYmluZGluZywgdm5vZGUpO1xuICB9XG59O1xuZnVuY3Rpb24gc2V0Q2hlY2tlZChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgdm5vZGUpIHtcbiAgZWwuX21vZGVsVmFsdWUgPSB2YWx1ZTtcbiAgbGV0IGNoZWNrZWQ7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGNoZWNrZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKSA+IC0xO1xuICB9IGVsc2UgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIGNoZWNrZWQgPSB2YWx1ZS5oYXModm5vZGUucHJvcHMudmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGlmICh2YWx1ZSA9PT0gb2xkVmFsdWUpIHJldHVybjtcbiAgICBjaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgZ2V0Q2hlY2tib3hWYWx1ZShlbCwgdHJ1ZSkpO1xuICB9XG4gIGlmIChlbC5jaGVja2VkICE9PSBjaGVja2VkKSB7XG4gICAgZWwuY2hlY2tlZCA9IGNoZWNrZWQ7XG4gIH1cbn1cbmNvbnN0IHZNb2RlbFJhZGlvID0ge1xuICBjcmVhdGVkKGVsLCB7IHZhbHVlIH0sIHZub2RlKSB7XG4gICAgZWwuY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKTtcbiAgICBlbFthc3NpZ25LZXldID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgZWxbYXNzaWduS2V5XShnZXRWYWx1ZShlbCkpO1xuICAgIH0pO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoZWwsIHsgdmFsdWUsIG9sZFZhbHVlIH0sIHZub2RlKSB7XG4gICAgZWxbYXNzaWduS2V5XSA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICAgIGlmICh2YWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSk7XG4gICAgfVxuICB9XG59O1xuY29uc3Qgdk1vZGVsU2VsZWN0ID0ge1xuICAvLyA8c2VsZWN0IG11bHRpcGxlPiB2YWx1ZSBuZWVkIHRvIGJlIGRlZXAgdHJhdmVyc2VkXG4gIGRlZXA6IHRydWUsXG4gIGNyZWF0ZWQoZWwsIHsgdmFsdWUsIG1vZGlmaWVyczogeyBudW1iZXIgfSB9LCB2bm9kZSkge1xuICAgIGNvbnN0IGlzU2V0TW9kZWwgPSBpc1NldCh2YWx1ZSk7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgXCJjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZWwub3B0aW9ucywgKG8pID0+IG8uc2VsZWN0ZWQpLm1hcChcbiAgICAgICAgKG8pID0+IG51bWJlciA/IGxvb3NlVG9OdW1iZXIoZ2V0VmFsdWUobykpIDogZ2V0VmFsdWUobylcbiAgICAgICk7XG4gICAgICBlbFthc3NpZ25LZXldKFxuICAgICAgICBlbC5tdWx0aXBsZSA/IGlzU2V0TW9kZWwgPyBuZXcgU2V0KHNlbGVjdGVkVmFsKSA6IHNlbGVjdGVkVmFsIDogc2VsZWN0ZWRWYWxbMF1cbiAgICAgICk7XG4gICAgICBlbC5fYXNzaWduaW5nID0gdHJ1ZTtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgZWwuX2Fzc2lnbmluZyA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZWxbYXNzaWduS2V5XSA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xuICB9LFxuICAvLyBzZXQgdmFsdWUgaW4gbW91bnRlZCAmIHVwZGF0ZWQgYmVjYXVzZSA8c2VsZWN0PiByZWxpZXMgb24gaXRzIGNoaWxkcmVuXG4gIC8vIDxvcHRpb24+cy5cbiAgbW91bnRlZChlbCwgeyB2YWx1ZSB9KSB7XG4gICAgc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKTtcbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGVsLCBfYmluZGluZywgdm5vZGUpIHtcbiAgICBlbFthc3NpZ25LZXldID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZWQoZWwsIHsgdmFsdWUgfSkge1xuICAgIGlmICghZWwuX2Fzc2lnbmluZykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKTtcbiAgICB9XG4gIH1cbn07XG5mdW5jdGlvbiBzZXRTZWxlY3RlZChlbCwgdmFsdWUpIHtcbiAgY29uc3QgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBjb25zdCBpc0FycmF5VmFsdWUgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzTXVsdGlwbGUgJiYgIWlzQXJyYXlWYWx1ZSAmJiAhaXNTZXQodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIGA8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw+IGV4cGVjdHMgYW4gQXJyYXkgb3IgU2V0IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCAke09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpfS5gXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGNvbnN0IG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgY29uc3Qgb3B0aW9uVmFsdWUgPSBnZXRWYWx1ZShvcHRpb24pO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBpZiAoaXNBcnJheVZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvblR5cGUgPSB0eXBlb2Ygb3B0aW9uVmFsdWU7XG4gICAgICAgIGlmIChvcHRpb25UeXBlID09PSBcInN0cmluZ1wiIHx8IG9wdGlvblR5cGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB2YWx1ZS5zb21lKCh2KSA9PiBTdHJpbmcodikgPT09IFN0cmluZyhvcHRpb25WYWx1ZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgb3B0aW9uVmFsdWUpID4gLTE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlLmhhcyhvcHRpb25WYWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUgJiYgZWwuc2VsZWN0ZWRJbmRleCAhPT0gLTEpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFZhbHVlKGVsKSB7XG4gIHJldHVybiBcIl92YWx1ZVwiIGluIGVsID8gZWwuX3ZhbHVlIDogZWwudmFsdWU7XG59XG5mdW5jdGlvbiBnZXRDaGVja2JveFZhbHVlKGVsLCBjaGVja2VkKSB7XG4gIGNvbnN0IGtleSA9IGNoZWNrZWQgPyBcIl90cnVlVmFsdWVcIiA6IFwiX2ZhbHNlVmFsdWVcIjtcbiAgcmV0dXJuIGtleSBpbiBlbCA/IGVsW2tleV0gOiBjaGVja2VkO1xufVxuY29uc3Qgdk1vZGVsRHluYW1pYyA9IHtcbiAgY3JlYXRlZChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgbnVsbCwgXCJjcmVhdGVkXCIpO1xuICB9LFxuICBtb3VudGVkKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xuICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBudWxsLCBcIm1vdW50ZWRcIik7XG4gIH0sXG4gIGJlZm9yZVVwZGF0ZShlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSkge1xuICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsIFwiYmVmb3JlVXBkYXRlXCIpO1xuICB9LFxuICB1cGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKSB7XG4gICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSwgXCJ1cGRhdGVkXCIpO1xuICB9XG59O1xuZnVuY3Rpb24gcmVzb2x2ZUR5bmFtaWNNb2RlbCh0YWdOYW1lLCB0eXBlKSB7XG4gIHN3aXRjaCAodGFnTmFtZSkge1xuICAgIGNhc2UgXCJTRUxFQ1RcIjpcbiAgICAgIHJldHVybiB2TW9kZWxTZWxlY3Q7XG4gICAgY2FzZSBcIlRFWFRBUkVBXCI6XG4gICAgICByZXR1cm4gdk1vZGVsVGV4dDtcbiAgICBkZWZhdWx0OlxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxuICAgICAgICAgIHJldHVybiB2TW9kZWxDaGVja2JveDtcbiAgICAgICAgY2FzZSBcInJhZGlvXCI6XG4gICAgICAgICAgcmV0dXJuIHZNb2RlbFJhZGlvO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiB2TW9kZWxUZXh0O1xuICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCBob29rKSB7XG4gIGNvbnN0IG1vZGVsVG9Vc2UgPSByZXNvbHZlRHluYW1pY01vZGVsKFxuICAgIGVsLnRhZ05hbWUsXG4gICAgdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMudHlwZVxuICApO1xuICBjb25zdCBmbiA9IG1vZGVsVG9Vc2VbaG9va107XG4gIGZuICYmIGZuKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKTtcbn1cbmZ1bmN0aW9uIGluaXRWTW9kZWxGb3JTU1IoKSB7XG4gIHZNb2RlbFRleHQuZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9KSA9PiAoeyB2YWx1ZSB9KTtcbiAgdk1vZGVsUmFkaW8uZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9LCB2bm9kZSkgPT4ge1xuICAgIGlmICh2bm9kZS5wcm9wcyAmJiBsb29zZUVxdWFsKHZub2RlLnByb3BzLnZhbHVlLCB2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB7IGNoZWNrZWQ6IHRydWUgfTtcbiAgICB9XG4gIH07XG4gIHZNb2RlbENoZWNrYm94LmdldFNTUlByb3BzID0gKHsgdmFsdWUgfSwgdm5vZGUpID0+IHtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGlmICh2bm9kZS5wcm9wcyAmJiBsb29zZUluZGV4T2YodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiB7IGNoZWNrZWQ6IHRydWUgfTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgaWYgKHZub2RlLnByb3BzICYmIHZhbHVlLmhhcyh2bm9kZS5wcm9wcy52YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB7IGNoZWNrZWQ6IHRydWUgfTtcbiAgICB9XG4gIH07XG4gIHZNb2RlbER5bmFtaWMuZ2V0U1NSUHJvcHMgPSAoYmluZGluZywgdm5vZGUpID0+IHtcbiAgICBpZiAodHlwZW9mIHZub2RlLnR5cGUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbW9kZWxUb1VzZSA9IHJlc29sdmVEeW5hbWljTW9kZWwoXG4gICAgICAvLyByZXNvbHZlRHluYW1pY01vZGVsIGV4cGVjdHMgYW4gdXBwZXJjYXNlIHRhZyBuYW1lLCBidXQgdm5vZGUudHlwZSBpcyBsb3dlcmNhc2VcbiAgICAgIHZub2RlLnR5cGUudG9VcHBlckNhc2UoKSxcbiAgICAgIHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnR5cGVcbiAgICApO1xuICAgIGlmIChtb2RlbFRvVXNlLmdldFNTUlByb3BzKSB7XG4gICAgICByZXR1cm4gbW9kZWxUb1VzZS5nZXRTU1JQcm9wcyhiaW5kaW5nLCB2bm9kZSk7XG4gICAgfVxuICB9O1xufVxuXG5jb25zdCBzeXN0ZW1Nb2RpZmllcnMgPSBbXCJjdHJsXCIsIFwic2hpZnRcIiwgXCJhbHRcIiwgXCJtZXRhXCJdO1xuY29uc3QgbW9kaWZpZXJHdWFyZHMgPSB7XG4gIHN0b3A6IChlKSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpLFxuICBwcmV2ZW50OiAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpLFxuICBzZWxmOiAoZSkgPT4gZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCxcbiAgY3RybDogKGUpID0+ICFlLmN0cmxLZXksXG4gIHNoaWZ0OiAoZSkgPT4gIWUuc2hpZnRLZXksXG4gIGFsdDogKGUpID0+ICFlLmFsdEtleSxcbiAgbWV0YTogKGUpID0+ICFlLm1ldGFLZXksXG4gIGxlZnQ6IChlKSA9PiBcImJ1dHRvblwiIGluIGUgJiYgZS5idXR0b24gIT09IDAsXG4gIG1pZGRsZTogKGUpID0+IFwiYnV0dG9uXCIgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMSxcbiAgcmlnaHQ6IChlKSA9PiBcImJ1dHRvblwiIGluIGUgJiYgZS5idXR0b24gIT09IDIsXG4gIGV4YWN0OiAoZSwgbW9kaWZpZXJzKSA9PiBzeXN0ZW1Nb2RpZmllcnMuc29tZSgobSkgPT4gZVtgJHttfUtleWBdICYmICFtb2RpZmllcnMuaW5jbHVkZXMobSkpXG59O1xuY29uc3Qgd2l0aE1vZGlmaWVycyA9IChmbiwgbW9kaWZpZXJzKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gZm4uX3dpdGhNb2RzIHx8IChmbi5fd2l0aE1vZHMgPSB7fSk7XG4gIGNvbnN0IGNhY2hlS2V5ID0gbW9kaWZpZXJzLmpvaW4oXCIuXCIpO1xuICByZXR1cm4gY2FjaGVbY2FjaGVLZXldIHx8IChjYWNoZVtjYWNoZUtleV0gPSAoZXZlbnQsIC4uLmFyZ3MpID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZ3VhcmQgPSBtb2RpZmllckd1YXJkc1ttb2RpZmllcnNbaV1dO1xuICAgICAgaWYgKGd1YXJkICYmIGd1YXJkKGV2ZW50LCBtb2RpZmllcnMpKSByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBmbihldmVudCwgLi4uYXJncyk7XG4gIH0pO1xufTtcbmNvbnN0IGtleU5hbWVzID0ge1xuICBlc2M6IFwiZXNjYXBlXCIsXG4gIHNwYWNlOiBcIiBcIixcbiAgdXA6IFwiYXJyb3ctdXBcIixcbiAgbGVmdDogXCJhcnJvdy1sZWZ0XCIsXG4gIHJpZ2h0OiBcImFycm93LXJpZ2h0XCIsXG4gIGRvd246IFwiYXJyb3ctZG93blwiLFxuICBkZWxldGU6IFwiYmFja3NwYWNlXCJcbn07XG5jb25zdCB3aXRoS2V5cyA9IChmbiwgbW9kaWZpZXJzKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gZm4uX3dpdGhLZXlzIHx8IChmbi5fd2l0aEtleXMgPSB7fSk7XG4gIGNvbnN0IGNhY2hlS2V5ID0gbW9kaWZpZXJzLmpvaW4oXCIuXCIpO1xuICByZXR1cm4gY2FjaGVbY2FjaGVLZXldIHx8IChjYWNoZVtjYWNoZUtleV0gPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoIShcImtleVwiIGluIGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBldmVudEtleSA9IGh5cGhlbmF0ZShldmVudC5rZXkpO1xuICAgIGlmIChtb2RpZmllcnMuc29tZShcbiAgICAgIChrKSA9PiBrID09PSBldmVudEtleSB8fCBrZXlOYW1lc1trXSA9PT0gZXZlbnRLZXlcbiAgICApKSB7XG4gICAgICByZXR1cm4gZm4oZXZlbnQpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5jb25zdCByZW5kZXJlck9wdGlvbnMgPSAvKiBAX19QVVJFX18gKi8gZXh0ZW5kKHsgcGF0Y2hQcm9wIH0sIG5vZGVPcHMpO1xubGV0IHJlbmRlcmVyO1xubGV0IGVuYWJsZWRIeWRyYXRpb24gPSBmYWxzZTtcbmZ1bmN0aW9uIGVuc3VyZVJlbmRlcmVyKCkge1xuICByZXR1cm4gcmVuZGVyZXIgfHwgKHJlbmRlcmVyID0gY3JlYXRlUmVuZGVyZXIocmVuZGVyZXJPcHRpb25zKSk7XG59XG5mdW5jdGlvbiBlbnN1cmVIeWRyYXRpb25SZW5kZXJlcigpIHtcbiAgcmVuZGVyZXIgPSBlbmFibGVkSHlkcmF0aW9uID8gcmVuZGVyZXIgOiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihyZW5kZXJlck9wdGlvbnMpO1xuICBlbmFibGVkSHlkcmF0aW9uID0gdHJ1ZTtcbiAgcmV0dXJuIHJlbmRlcmVyO1xufVxuY29uc3QgcmVuZGVyID0gKC4uLmFyZ3MpID0+IHtcbiAgZW5zdXJlUmVuZGVyZXIoKS5yZW5kZXIoLi4uYXJncyk7XG59O1xuY29uc3QgaHlkcmF0ZSA9ICguLi5hcmdzKSA9PiB7XG4gIGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkuaHlkcmF0ZSguLi5hcmdzKTtcbn07XG5jb25zdCBjcmVhdGVBcHAgPSAoLi4uYXJncykgPT4ge1xuICBjb25zdCBhcHAgPSBlbnN1cmVSZW5kZXJlcigpLmNyZWF0ZUFwcCguLi5hcmdzKTtcbiAge1xuICAgIGluamVjdE5hdGl2ZVRhZ0NoZWNrKGFwcCk7XG4gICAgaW5qZWN0Q29tcGlsZXJPcHRpb25zQ2hlY2soYXBwKTtcbiAgfVxuICBjb25zdCB7IG1vdW50IH0gPSBhcHA7XG4gIGFwcC5tb3VudCA9IChjb250YWluZXJPclNlbGVjdG9yKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lck9yU2VsZWN0b3IpO1xuICAgIGlmICghY29udGFpbmVyKSByZXR1cm47XG4gICAgY29uc3QgY29tcG9uZW50ID0gYXBwLl9jb21wb25lbnQ7XG4gICAgaWYgKCFpc0Z1bmN0aW9uKGNvbXBvbmVudCkgJiYgIWNvbXBvbmVudC5yZW5kZXIgJiYgIWNvbXBvbmVudC50ZW1wbGF0ZSkge1xuICAgICAgY29tcG9uZW50LnRlbXBsYXRlID0gY29udGFpbmVyLmlubmVySFRNTDtcbiAgICB9XG4gICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgY29udGFpbmVyLnRleHRDb250ZW50ID0gXCJcIjtcbiAgICB9XG4gICAgY29uc3QgcHJveHkgPSBtb3VudChjb250YWluZXIsIGZhbHNlLCByZXNvbHZlUm9vdE5hbWVzcGFjZShjb250YWluZXIpKTtcbiAgICBpZiAoY29udGFpbmVyIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZShcInYtY2xvYWtcIik7XG4gICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKFwiZGF0YS12LWFwcFwiLCBcIlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xuICByZXR1cm4gYXBwO1xufTtcbmNvbnN0IGNyZWF0ZVNTUkFwcCA9ICguLi5hcmdzKSA9PiB7XG4gIGNvbnN0IGFwcCA9IGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkuY3JlYXRlQXBwKC4uLmFyZ3MpO1xuICB7XG4gICAgaW5qZWN0TmF0aXZlVGFnQ2hlY2soYXBwKTtcbiAgICBpbmplY3RDb21waWxlck9wdGlvbnNDaGVjayhhcHApO1xuICB9XG4gIGNvbnN0IHsgbW91bnQgfSA9IGFwcDtcbiAgYXBwLm1vdW50ID0gKGNvbnRhaW5lck9yU2VsZWN0b3IpID0+IHtcbiAgICBjb25zdCBjb250YWluZXIgPSBub3JtYWxpemVDb250YWluZXIoY29udGFpbmVyT3JTZWxlY3Rvcik7XG4gICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuIG1vdW50KGNvbnRhaW5lciwgdHJ1ZSwgcmVzb2x2ZVJvb3ROYW1lc3BhY2UoY29udGFpbmVyKSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gYXBwO1xufTtcbmZ1bmN0aW9uIHJlc29sdmVSb290TmFtZXNwYWNlKGNvbnRhaW5lcikge1xuICBpZiAoY29udGFpbmVyIGluc3RhbmNlb2YgU1ZHRWxlbWVudCkge1xuICAgIHJldHVybiBcInN2Z1wiO1xuICB9XG4gIGlmICh0eXBlb2YgTWF0aE1MRWxlbWVudCA9PT0gXCJmdW5jdGlvblwiICYmIGNvbnRhaW5lciBpbnN0YW5jZW9mIE1hdGhNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gXCJtYXRobWxcIjtcbiAgfVxufVxuZnVuY3Rpb24gaW5qZWN0TmF0aXZlVGFnQ2hlY2soYXBwKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLCBcImlzTmF0aXZlVGFnXCIsIHtcbiAgICB2YWx1ZTogKHRhZykgPT4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkdUYWcodGFnKSB8fCBpc01hdGhNTFRhZyh0YWcpLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbn1cbmZ1bmN0aW9uIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCkge1xuICBpZiAoaXNSdW50aW1lT25seSgpKSB7XG4gICAgY29uc3QgaXNDdXN0b21FbGVtZW50ID0gYXBwLmNvbmZpZy5pc0N1c3RvbUVsZW1lbnQ7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsIFwiaXNDdXN0b21FbGVtZW50XCIsIHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIGlzQ3VzdG9tRWxlbWVudDtcbiAgICAgIH0sXG4gICAgICBzZXQoKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgYFRoZSBcXGBpc0N1c3RvbUVsZW1lbnRcXGAgY29uZmlnIG9wdGlvbiBpcyBkZXByZWNhdGVkLiBVc2UgXFxgY29tcGlsZXJPcHRpb25zLmlzQ3VzdG9tRWxlbWVudFxcYCBpbnN0ZWFkLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBjb21waWxlck9wdGlvbnMgPSBhcHAuY29uZmlnLmNvbXBpbGVyT3B0aW9ucztcbiAgICBjb25zdCBtc2cgPSBgVGhlIFxcYGNvbXBpbGVyT3B0aW9uc1xcYCBjb25maWcgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgYSBidWlsZCBvZiBWdWUuanMgdGhhdCBpbmNsdWRlcyB0aGUgcnVudGltZSBjb21waWxlciAoYWthIFwiZnVsbCBidWlsZFwiKS4gU2luY2UgeW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkLCBcXGBjb21waWxlck9wdGlvbnNcXGAgbXVzdCBiZSBwYXNzZWQgdG8gXFxgQHZ1ZS9jb21waWxlci1kb21cXGAgaW4gdGhlIGJ1aWxkIHNldHVwIGluc3RlYWQuXG4tIEZvciB2dWUtbG9hZGVyOiBwYXNzIGl0IHZpYSB2dWUtbG9hZGVyJ3MgXFxgY29tcGlsZXJPcHRpb25zXFxgIGxvYWRlciBvcHRpb24uXG4tIEZvciB2dWUtY2xpOiBzZWUgaHR0cHM6Ly9jbGkudnVlanMub3JnL2d1aWRlL3dlYnBhY2suaHRtbCNtb2RpZnlpbmctb3B0aW9ucy1vZi1hLWxvYWRlclxuLSBGb3Igdml0ZTogcGFzcyBpdCB2aWEgQHZpdGVqcy9wbHVnaW4tdnVlIG9wdGlvbnMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdml0ZWpzL3ZpdGUtcGx1Z2luLXZ1ZS90cmVlL21haW4vcGFja2FnZXMvcGx1Z2luLXZ1ZSNleGFtcGxlLWZvci1wYXNzaW5nLW9wdGlvbnMtdG8tdnVlY29tcGlsZXItc2ZjYDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXBwLmNvbmZpZywgXCJjb21waWxlck9wdGlvbnNcIiwge1xuICAgICAgZ2V0KCkge1xuICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgIHJldHVybiBjb21waWxlck9wdGlvbnM7XG4gICAgICB9LFxuICAgICAgc2V0KCkge1xuICAgICAgICB3YXJuKG1zZyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXIpIHtcbiAgaWYgKGlzU3RyaW5nKGNvbnRhaW5lcikpIHtcbiAgICBjb25zdCByZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGBGYWlsZWQgdG8gbW91bnQgYXBwOiBtb3VudCB0YXJnZXQgc2VsZWN0b3IgXCIke2NvbnRhaW5lcn1cIiByZXR1cm5lZCBudWxsLmBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH1cbiAgaWYgKHdpbmRvdy5TaGFkb3dSb290ICYmIGNvbnRhaW5lciBpbnN0YW5jZW9mIHdpbmRvdy5TaGFkb3dSb290ICYmIGNvbnRhaW5lci5tb2RlID09PSBcImNsb3NlZFwiKSB7XG4gICAgd2FybihcbiAgICAgIGBtb3VudGluZyBvbiBhIFNoYWRvd1Jvb3Qgd2l0aCBcXGB7bW9kZTogXCJjbG9zZWRcIn1cXGAgbWF5IGxlYWQgdG8gdW5wcmVkaWN0YWJsZSBidWdzYFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cbmxldCBzc3JEaXJlY3RpdmVJbml0aWFsaXplZCA9IGZhbHNlO1xuY29uc3QgaW5pdERpcmVjdGl2ZXNGb3JTU1IgPSAoKSA9PiB7XG4gIGlmICghc3NyRGlyZWN0aXZlSW5pdGlhbGl6ZWQpIHtcbiAgICBzc3JEaXJlY3RpdmVJbml0aWFsaXplZCA9IHRydWU7XG4gICAgaW5pdFZNb2RlbEZvclNTUigpO1xuICAgIGluaXRWU2hvd0ZvclNTUigpO1xuICB9XG59IDtcblxudmFyIHJ1bnRpbWVEb20gPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgQmFzZVRyYW5zaXRpb246IEJhc2VUcmFuc2l0aW9uLFxuICBCYXNlVHJhbnNpdGlvblByb3BzVmFsaWRhdG9yczogQmFzZVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMsXG4gIENvbW1lbnQ6IENvbW1lbnQsXG4gIERlcHJlY2F0aW9uVHlwZXM6IERlcHJlY2F0aW9uVHlwZXMsXG4gIEVmZmVjdFNjb3BlOiBFZmZlY3RTY29wZSxcbiAgRXJyb3JDb2RlczogRXJyb3JDb2RlcyxcbiAgRXJyb3JUeXBlU3RyaW5nczogRXJyb3JUeXBlU3RyaW5ncyxcbiAgRnJhZ21lbnQ6IEZyYWdtZW50LFxuICBLZWVwQWxpdmU6IEtlZXBBbGl2ZSxcbiAgUmVhY3RpdmVFZmZlY3Q6IFJlYWN0aXZlRWZmZWN0LFxuICBTdGF0aWM6IFN0YXRpYyxcbiAgU3VzcGVuc2U6IFN1c3BlbnNlLFxuICBUZWxlcG9ydDogVGVsZXBvcnQsXG4gIFRleHQ6IFRleHQsXG4gIFRyYWNrT3BUeXBlczogVHJhY2tPcFR5cGVzLFxuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cCxcbiAgVHJpZ2dlck9wVHlwZXM6IFRyaWdnZXJPcFR5cGVzLFxuICBWdWVFbGVtZW50OiBWdWVFbGVtZW50LFxuICBhc3NlcnROdW1iZXI6IGFzc2VydE51bWJlcixcbiAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmc6IGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nLFxuICBjYWxsV2l0aEVycm9ySGFuZGxpbmc6IGNhbGxXaXRoRXJyb3JIYW5kbGluZyxcbiAgY2FtZWxpemU6IGNhbWVsaXplLFxuICBjYXBpdGFsaXplOiBjYXBpdGFsaXplLFxuICBjbG9uZVZOb2RlOiBjbG9uZVZOb2RlLFxuICBjb21wYXRVdGlsczogY29tcGF0VXRpbHMsXG4gIGNvbXB1dGVkOiBjb21wdXRlZCxcbiAgY3JlYXRlQXBwOiBjcmVhdGVBcHAsXG4gIGNyZWF0ZUJsb2NrOiBjcmVhdGVCbG9jayxcbiAgY3JlYXRlQ29tbWVudFZOb2RlOiBjcmVhdGVDb21tZW50Vk5vZGUsXG4gIGNyZWF0ZUVsZW1lbnRCbG9jazogY3JlYXRlRWxlbWVudEJsb2NrLFxuICBjcmVhdGVFbGVtZW50Vk5vZGU6IGNyZWF0ZUJhc2VWTm9kZSxcbiAgY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXI6IGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyLFxuICBjcmVhdGVQcm9wc1Jlc3RQcm94eTogY3JlYXRlUHJvcHNSZXN0UHJveHksXG4gIGNyZWF0ZVJlbmRlcmVyOiBjcmVhdGVSZW5kZXJlcixcbiAgY3JlYXRlU1NSQXBwOiBjcmVhdGVTU1JBcHAsXG4gIGNyZWF0ZVNsb3RzOiBjcmVhdGVTbG90cyxcbiAgY3JlYXRlU3RhdGljVk5vZGU6IGNyZWF0ZVN0YXRpY1ZOb2RlLFxuICBjcmVhdGVUZXh0Vk5vZGU6IGNyZWF0ZVRleHRWTm9kZSxcbiAgY3JlYXRlVk5vZGU6IGNyZWF0ZVZOb2RlLFxuICBjdXN0b21SZWY6IGN1c3RvbVJlZixcbiAgZGVmaW5lQXN5bmNDb21wb25lbnQ6IGRlZmluZUFzeW5jQ29tcG9uZW50LFxuICBkZWZpbmVDb21wb25lbnQ6IGRlZmluZUNvbXBvbmVudCxcbiAgZGVmaW5lQ3VzdG9tRWxlbWVudDogZGVmaW5lQ3VzdG9tRWxlbWVudCxcbiAgZGVmaW5lRW1pdHM6IGRlZmluZUVtaXRzLFxuICBkZWZpbmVFeHBvc2U6IGRlZmluZUV4cG9zZSxcbiAgZGVmaW5lTW9kZWw6IGRlZmluZU1vZGVsLFxuICBkZWZpbmVPcHRpb25zOiBkZWZpbmVPcHRpb25zLFxuICBkZWZpbmVQcm9wczogZGVmaW5lUHJvcHMsXG4gIGRlZmluZVNTUkN1c3RvbUVsZW1lbnQ6IGRlZmluZVNTUkN1c3RvbUVsZW1lbnQsXG4gIGRlZmluZVNsb3RzOiBkZWZpbmVTbG90cyxcbiAgZGV2dG9vbHM6IGRldnRvb2xzLFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgZWZmZWN0U2NvcGU6IGVmZmVjdFNjb3BlLFxuICBnZXRDdXJyZW50SW5zdGFuY2U6IGdldEN1cnJlbnRJbnN0YW5jZSxcbiAgZ2V0Q3VycmVudFNjb3BlOiBnZXRDdXJyZW50U2NvcGUsXG4gIGdldEN1cnJlbnRXYXRjaGVyOiBnZXRDdXJyZW50V2F0Y2hlcixcbiAgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuOiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4sXG4gIGd1YXJkUmVhY3RpdmVQcm9wczogZ3VhcmRSZWFjdGl2ZVByb3BzLFxuICBoOiBoLFxuICBoYW5kbGVFcnJvcjogaGFuZGxlRXJyb3IsXG4gIGhhc0luamVjdGlvbkNvbnRleHQ6IGhhc0luamVjdGlvbkNvbnRleHQsXG4gIGh5ZHJhdGU6IGh5ZHJhdGUsXG4gIGh5ZHJhdGVPbklkbGU6IGh5ZHJhdGVPbklkbGUsXG4gIGh5ZHJhdGVPbkludGVyYWN0aW9uOiBoeWRyYXRlT25JbnRlcmFjdGlvbixcbiAgaHlkcmF0ZU9uTWVkaWFRdWVyeTogaHlkcmF0ZU9uTWVkaWFRdWVyeSxcbiAgaHlkcmF0ZU9uVmlzaWJsZTogaHlkcmF0ZU9uVmlzaWJsZSxcbiAgaW5pdEN1c3RvbUZvcm1hdHRlcjogaW5pdEN1c3RvbUZvcm1hdHRlcixcbiAgaW5pdERpcmVjdGl2ZXNGb3JTU1I6IGluaXREaXJlY3RpdmVzRm9yU1NSLFxuICBpbmplY3Q6IGluamVjdCxcbiAgaXNNZW1vU2FtZTogaXNNZW1vU2FtZSxcbiAgaXNQcm94eTogaXNQcm94eSxcbiAgaXNSZWFjdGl2ZTogaXNSZWFjdGl2ZSxcbiAgaXNSZWFkb25seTogaXNSZWFkb25seSxcbiAgaXNSZWY6IGlzUmVmLFxuICBpc1J1bnRpbWVPbmx5OiBpc1J1bnRpbWVPbmx5LFxuICBpc1NoYWxsb3c6IGlzU2hhbGxvdyxcbiAgaXNWTm9kZTogaXNWTm9kZSxcbiAgbWFya1JhdzogbWFya1JhdyxcbiAgbWVyZ2VEZWZhdWx0czogbWVyZ2VEZWZhdWx0cyxcbiAgbWVyZ2VNb2RlbHM6IG1lcmdlTW9kZWxzLFxuICBtZXJnZVByb3BzOiBtZXJnZVByb3BzLFxuICBuZXh0VGljazogbmV4dFRpY2ssXG4gIG5vcm1hbGl6ZUNsYXNzOiBub3JtYWxpemVDbGFzcyxcbiAgbm9ybWFsaXplUHJvcHM6IG5vcm1hbGl6ZVByb3BzLFxuICBub3JtYWxpemVTdHlsZTogbm9ybWFsaXplU3R5bGUsXG4gIG9uQWN0aXZhdGVkOiBvbkFjdGl2YXRlZCxcbiAgb25CZWZvcmVNb3VudDogb25CZWZvcmVNb3VudCxcbiAgb25CZWZvcmVVbm1vdW50OiBvbkJlZm9yZVVubW91bnQsXG4gIG9uQmVmb3JlVXBkYXRlOiBvbkJlZm9yZVVwZGF0ZSxcbiAgb25EZWFjdGl2YXRlZDogb25EZWFjdGl2YXRlZCxcbiAgb25FcnJvckNhcHR1cmVkOiBvbkVycm9yQ2FwdHVyZWQsXG4gIG9uTW91bnRlZDogb25Nb3VudGVkLFxuICBvblJlbmRlclRyYWNrZWQ6IG9uUmVuZGVyVHJhY2tlZCxcbiAgb25SZW5kZXJUcmlnZ2VyZWQ6IG9uUmVuZGVyVHJpZ2dlcmVkLFxuICBvblNjb3BlRGlzcG9zZTogb25TY29wZURpc3Bvc2UsXG4gIG9uU2VydmVyUHJlZmV0Y2g6IG9uU2VydmVyUHJlZmV0Y2gsXG4gIG9uVW5tb3VudGVkOiBvblVubW91bnRlZCxcbiAgb25VcGRhdGVkOiBvblVwZGF0ZWQsXG4gIG9uV2F0Y2hlckNsZWFudXA6IG9uV2F0Y2hlckNsZWFudXAsXG4gIG9wZW5CbG9jazogb3BlbkJsb2NrLFxuICBwb3BTY29wZUlkOiBwb3BTY29wZUlkLFxuICBwcm92aWRlOiBwcm92aWRlLFxuICBwcm94eVJlZnM6IHByb3h5UmVmcyxcbiAgcHVzaFNjb3BlSWQ6IHB1c2hTY29wZUlkLFxuICBxdWV1ZVBvc3RGbHVzaENiOiBxdWV1ZVBvc3RGbHVzaENiLFxuICByZWFjdGl2ZTogcmVhY3RpdmUsXG4gIHJlYWRvbmx5OiByZWFkb25seSxcbiAgcmVmOiByZWYsXG4gIHJlZ2lzdGVyUnVudGltZUNvbXBpbGVyOiByZWdpc3RlclJ1bnRpbWVDb21waWxlcixcbiAgcmVuZGVyOiByZW5kZXIsXG4gIHJlbmRlckxpc3Q6IHJlbmRlckxpc3QsXG4gIHJlbmRlclNsb3Q6IHJlbmRlclNsb3QsXG4gIHJlc29sdmVDb21wb25lbnQ6IHJlc29sdmVDb21wb25lbnQsXG4gIHJlc29sdmVEaXJlY3RpdmU6IHJlc29sdmVEaXJlY3RpdmUsXG4gIHJlc29sdmVEeW5hbWljQ29tcG9uZW50OiByZXNvbHZlRHluYW1pY0NvbXBvbmVudCxcbiAgcmVzb2x2ZUZpbHRlcjogcmVzb2x2ZUZpbHRlcixcbiAgcmVzb2x2ZVRyYW5zaXRpb25Ib29rczogcmVzb2x2ZVRyYW5zaXRpb25Ib29rcyxcbiAgc2V0QmxvY2tUcmFja2luZzogc2V0QmxvY2tUcmFja2luZyxcbiAgc2V0RGV2dG9vbHNIb29rOiBzZXREZXZ0b29sc0hvb2ssXG4gIHNldFRyYW5zaXRpb25Ib29rczogc2V0VHJhbnNpdGlvbkhvb2tzLFxuICBzaGFsbG93UmVhY3RpdmU6IHNoYWxsb3dSZWFjdGl2ZSxcbiAgc2hhbGxvd1JlYWRvbmx5OiBzaGFsbG93UmVhZG9ubHksXG4gIHNoYWxsb3dSZWY6IHNoYWxsb3dSZWYsXG4gIHNzckNvbnRleHRLZXk6IHNzckNvbnRleHRLZXksXG4gIHNzclV0aWxzOiBzc3JVdGlscyxcbiAgc3RvcDogc3RvcCxcbiAgdG9EaXNwbGF5U3RyaW5nOiB0b0Rpc3BsYXlTdHJpbmcsXG4gIHRvSGFuZGxlcktleTogdG9IYW5kbGVyS2V5LFxuICB0b0hhbmRsZXJzOiB0b0hhbmRsZXJzLFxuICB0b1JhdzogdG9SYXcsXG4gIHRvUmVmOiB0b1JlZixcbiAgdG9SZWZzOiB0b1JlZnMsXG4gIHRvVmFsdWU6IHRvVmFsdWUsXG4gIHRyYW5zZm9ybVZOb2RlQXJnczogdHJhbnNmb3JtVk5vZGVBcmdzLFxuICB0cmlnZ2VyUmVmOiB0cmlnZ2VyUmVmLFxuICB1bnJlZjogdW5yZWYsXG4gIHVzZUF0dHJzOiB1c2VBdHRycyxcbiAgdXNlQ3NzTW9kdWxlOiB1c2VDc3NNb2R1bGUsXG4gIHVzZUNzc1ZhcnM6IHVzZUNzc1ZhcnMsXG4gIHVzZUhvc3Q6IHVzZUhvc3QsXG4gIHVzZUlkOiB1c2VJZCxcbiAgdXNlTW9kZWw6IHVzZU1vZGVsLFxuICB1c2VTU1JDb250ZXh0OiB1c2VTU1JDb250ZXh0LFxuICB1c2VTaGFkb3dSb290OiB1c2VTaGFkb3dSb290LFxuICB1c2VTbG90czogdXNlU2xvdHMsXG4gIHVzZVRlbXBsYXRlUmVmOiB1c2VUZW1wbGF0ZVJlZixcbiAgdXNlVHJhbnNpdGlvblN0YXRlOiB1c2VUcmFuc2l0aW9uU3RhdGUsXG4gIHZNb2RlbENoZWNrYm94OiB2TW9kZWxDaGVja2JveCxcbiAgdk1vZGVsRHluYW1pYzogdk1vZGVsRHluYW1pYyxcbiAgdk1vZGVsUmFkaW86IHZNb2RlbFJhZGlvLFxuICB2TW9kZWxTZWxlY3Q6IHZNb2RlbFNlbGVjdCxcbiAgdk1vZGVsVGV4dDogdk1vZGVsVGV4dCxcbiAgdlNob3c6IHZTaG93LFxuICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICB3YXJuOiB3YXJuLFxuICB3YXRjaDogd2F0Y2gsXG4gIHdhdGNoRWZmZWN0OiB3YXRjaEVmZmVjdCxcbiAgd2F0Y2hQb3N0RWZmZWN0OiB3YXRjaFBvc3RFZmZlY3QsXG4gIHdhdGNoU3luY0VmZmVjdDogd2F0Y2hTeW5jRWZmZWN0LFxuICB3aXRoQXN5bmNDb250ZXh0OiB3aXRoQXN5bmNDb250ZXh0LFxuICB3aXRoQ3R4OiB3aXRoQ3R4LFxuICB3aXRoRGVmYXVsdHM6IHdpdGhEZWZhdWx0cyxcbiAgd2l0aERpcmVjdGl2ZXM6IHdpdGhEaXJlY3RpdmVzLFxuICB3aXRoS2V5czogd2l0aEtleXMsXG4gIHdpdGhNZW1vOiB3aXRoTWVtbyxcbiAgd2l0aE1vZGlmaWVyczogd2l0aE1vZGlmaWVycyxcbiAgd2l0aFNjb3BlSWQ6IHdpdGhTY29wZUlkXG59KTtcblxuZnVuY3Rpb24gaW5pdERldigpIHtcbiAge1xuICAgIHtcbiAgICAgIGNvbnNvbGUuaW5mbyhcbiAgICAgICAgYFlvdSBhcmUgcnVubmluZyBhIGRldmVsb3BtZW50IGJ1aWxkIG9mIFZ1ZS5cbk1ha2Ugc3VyZSB0byB1c2UgdGhlIHByb2R1Y3Rpb24gYnVpbGQgKCoucHJvZC5qcykgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uYFxuICAgICAgKTtcbiAgICB9XG4gICAgaW5pdEN1c3RvbUZvcm1hdHRlcigpO1xuICB9XG59XG5cbmNvbnN0IEZSQUdNRU5UID0gU3ltYm9sKGBGcmFnbWVudGAgKTtcbmNvbnN0IFRFTEVQT1JUID0gU3ltYm9sKGBUZWxlcG9ydGAgKTtcbmNvbnN0IFNVU1BFTlNFID0gU3ltYm9sKGBTdXNwZW5zZWAgKTtcbmNvbnN0IEtFRVBfQUxJVkUgPSBTeW1ib2woYEtlZXBBbGl2ZWAgKTtcbmNvbnN0IEJBU0VfVFJBTlNJVElPTiA9IFN5bWJvbChcbiAgYEJhc2VUcmFuc2l0aW9uYCBcbik7XG5jb25zdCBPUEVOX0JMT0NLID0gU3ltYm9sKGBvcGVuQmxvY2tgICk7XG5jb25zdCBDUkVBVEVfQkxPQ0sgPSBTeW1ib2woYGNyZWF0ZUJsb2NrYCApO1xuY29uc3QgQ1JFQVRFX0VMRU1FTlRfQkxPQ0sgPSBTeW1ib2woXG4gIGBjcmVhdGVFbGVtZW50QmxvY2tgIFxuKTtcbmNvbnN0IENSRUFURV9WTk9ERSA9IFN5bWJvbChgY3JlYXRlVk5vZGVgICk7XG5jb25zdCBDUkVBVEVfRUxFTUVOVF9WTk9ERSA9IFN5bWJvbChcbiAgYGNyZWF0ZUVsZW1lbnRWTm9kZWAgXG4pO1xuY29uc3QgQ1JFQVRFX0NPTU1FTlQgPSBTeW1ib2woXG4gIGBjcmVhdGVDb21tZW50Vk5vZGVgIFxuKTtcbmNvbnN0IENSRUFURV9URVhUID0gU3ltYm9sKFxuICBgY3JlYXRlVGV4dFZOb2RlYCBcbik7XG5jb25zdCBDUkVBVEVfU1RBVElDID0gU3ltYm9sKFxuICBgY3JlYXRlU3RhdGljVk5vZGVgIFxuKTtcbmNvbnN0IFJFU09MVkVfQ09NUE9ORU5UID0gU3ltYm9sKFxuICBgcmVzb2x2ZUNvbXBvbmVudGAgXG4pO1xuY29uc3QgUkVTT0xWRV9EWU5BTUlDX0NPTVBPTkVOVCA9IFN5bWJvbChcbiAgYHJlc29sdmVEeW5hbWljQ29tcG9uZW50YCBcbik7XG5jb25zdCBSRVNPTFZFX0RJUkVDVElWRSA9IFN5bWJvbChcbiAgYHJlc29sdmVEaXJlY3RpdmVgIFxuKTtcbmNvbnN0IFJFU09MVkVfRklMVEVSID0gU3ltYm9sKFxuICBgcmVzb2x2ZUZpbHRlcmAgXG4pO1xuY29uc3QgV0lUSF9ESVJFQ1RJVkVTID0gU3ltYm9sKFxuICBgd2l0aERpcmVjdGl2ZXNgIFxuKTtcbmNvbnN0IFJFTkRFUl9MSVNUID0gU3ltYm9sKGByZW5kZXJMaXN0YCApO1xuY29uc3QgUkVOREVSX1NMT1QgPSBTeW1ib2woYHJlbmRlclNsb3RgICk7XG5jb25zdCBDUkVBVEVfU0xPVFMgPSBTeW1ib2woYGNyZWF0ZVNsb3RzYCApO1xuY29uc3QgVE9fRElTUExBWV9TVFJJTkcgPSBTeW1ib2woXG4gIGB0b0Rpc3BsYXlTdHJpbmdgIFxuKTtcbmNvbnN0IE1FUkdFX1BST1BTID0gU3ltYm9sKGBtZXJnZVByb3BzYCApO1xuY29uc3QgTk9STUFMSVpFX0NMQVNTID0gU3ltYm9sKFxuICBgbm9ybWFsaXplQ2xhc3NgIFxuKTtcbmNvbnN0IE5PUk1BTElaRV9TVFlMRSA9IFN5bWJvbChcbiAgYG5vcm1hbGl6ZVN0eWxlYCBcbik7XG5jb25zdCBOT1JNQUxJWkVfUFJPUFMgPSBTeW1ib2woXG4gIGBub3JtYWxpemVQcm9wc2AgXG4pO1xuY29uc3QgR1VBUkRfUkVBQ1RJVkVfUFJPUFMgPSBTeW1ib2woXG4gIGBndWFyZFJlYWN0aXZlUHJvcHNgIFxuKTtcbmNvbnN0IFRPX0hBTkRMRVJTID0gU3ltYm9sKGB0b0hhbmRsZXJzYCApO1xuY29uc3QgQ0FNRUxJWkUgPSBTeW1ib2woYGNhbWVsaXplYCApO1xuY29uc3QgQ0FQSVRBTElaRSA9IFN5bWJvbChgY2FwaXRhbGl6ZWAgKTtcbmNvbnN0IFRPX0hBTkRMRVJfS0VZID0gU3ltYm9sKFxuICBgdG9IYW5kbGVyS2V5YCBcbik7XG5jb25zdCBTRVRfQkxPQ0tfVFJBQ0tJTkcgPSBTeW1ib2woXG4gIGBzZXRCbG9ja1RyYWNraW5nYCBcbik7XG5jb25zdCBQVVNIX1NDT1BFX0lEID0gU3ltYm9sKGBwdXNoU2NvcGVJZGAgKTtcbmNvbnN0IFBPUF9TQ09QRV9JRCA9IFN5bWJvbChgcG9wU2NvcGVJZGAgKTtcbmNvbnN0IFdJVEhfQ1RYID0gU3ltYm9sKGB3aXRoQ3R4YCApO1xuY29uc3QgVU5SRUYgPSBTeW1ib2woYHVucmVmYCApO1xuY29uc3QgSVNfUkVGID0gU3ltYm9sKGBpc1JlZmAgKTtcbmNvbnN0IFdJVEhfTUVNTyA9IFN5bWJvbChgd2l0aE1lbW9gICk7XG5jb25zdCBJU19NRU1PX1NBTUUgPSBTeW1ib2woYGlzTWVtb1NhbWVgICk7XG5jb25zdCBoZWxwZXJOYW1lTWFwID0ge1xuICBbRlJBR01FTlRdOiBgRnJhZ21lbnRgLFxuICBbVEVMRVBPUlRdOiBgVGVsZXBvcnRgLFxuICBbU1VTUEVOU0VdOiBgU3VzcGVuc2VgLFxuICBbS0VFUF9BTElWRV06IGBLZWVwQWxpdmVgLFxuICBbQkFTRV9UUkFOU0lUSU9OXTogYEJhc2VUcmFuc2l0aW9uYCxcbiAgW09QRU5fQkxPQ0tdOiBgb3BlbkJsb2NrYCxcbiAgW0NSRUFURV9CTE9DS106IGBjcmVhdGVCbG9ja2AsXG4gIFtDUkVBVEVfRUxFTUVOVF9CTE9DS106IGBjcmVhdGVFbGVtZW50QmxvY2tgLFxuICBbQ1JFQVRFX1ZOT0RFXTogYGNyZWF0ZVZOb2RlYCxcbiAgW0NSRUFURV9FTEVNRU5UX1ZOT0RFXTogYGNyZWF0ZUVsZW1lbnRWTm9kZWAsXG4gIFtDUkVBVEVfQ09NTUVOVF06IGBjcmVhdGVDb21tZW50Vk5vZGVgLFxuICBbQ1JFQVRFX1RFWFRdOiBgY3JlYXRlVGV4dFZOb2RlYCxcbiAgW0NSRUFURV9TVEFUSUNdOiBgY3JlYXRlU3RhdGljVk5vZGVgLFxuICBbUkVTT0xWRV9DT01QT05FTlRdOiBgcmVzb2x2ZUNvbXBvbmVudGAsXG4gIFtSRVNPTFZFX0RZTkFNSUNfQ09NUE9ORU5UXTogYHJlc29sdmVEeW5hbWljQ29tcG9uZW50YCxcbiAgW1JFU09MVkVfRElSRUNUSVZFXTogYHJlc29sdmVEaXJlY3RpdmVgLFxuICBbUkVTT0xWRV9GSUxURVJdOiBgcmVzb2x2ZUZpbHRlcmAsXG4gIFtXSVRIX0RJUkVDVElWRVNdOiBgd2l0aERpcmVjdGl2ZXNgLFxuICBbUkVOREVSX0xJU1RdOiBgcmVuZGVyTGlzdGAsXG4gIFtSRU5ERVJfU0xPVF06IGByZW5kZXJTbG90YCxcbiAgW0NSRUFURV9TTE9UU106IGBjcmVhdGVTbG90c2AsXG4gIFtUT19ESVNQTEFZX1NUUklOR106IGB0b0Rpc3BsYXlTdHJpbmdgLFxuICBbTUVSR0VfUFJPUFNdOiBgbWVyZ2VQcm9wc2AsXG4gIFtOT1JNQUxJWkVfQ0xBU1NdOiBgbm9ybWFsaXplQ2xhc3NgLFxuICBbTk9STUFMSVpFX1NUWUxFXTogYG5vcm1hbGl6ZVN0eWxlYCxcbiAgW05PUk1BTElaRV9QUk9QU106IGBub3JtYWxpemVQcm9wc2AsXG4gIFtHVUFSRF9SRUFDVElWRV9QUk9QU106IGBndWFyZFJlYWN0aXZlUHJvcHNgLFxuICBbVE9fSEFORExFUlNdOiBgdG9IYW5kbGVyc2AsXG4gIFtDQU1FTElaRV06IGBjYW1lbGl6ZWAsXG4gIFtDQVBJVEFMSVpFXTogYGNhcGl0YWxpemVgLFxuICBbVE9fSEFORExFUl9LRVldOiBgdG9IYW5kbGVyS2V5YCxcbiAgW1NFVF9CTE9DS19UUkFDS0lOR106IGBzZXRCbG9ja1RyYWNraW5nYCxcbiAgW1BVU0hfU0NPUEVfSURdOiBgcHVzaFNjb3BlSWRgLFxuICBbUE9QX1NDT1BFX0lEXTogYHBvcFNjb3BlSWRgLFxuICBbV0lUSF9DVFhdOiBgd2l0aEN0eGAsXG4gIFtVTlJFRl06IGB1bnJlZmAsXG4gIFtJU19SRUZdOiBgaXNSZWZgLFxuICBbV0lUSF9NRU1PXTogYHdpdGhNZW1vYCxcbiAgW0lTX01FTU9fU0FNRV06IGBpc01lbW9TYW1lYFxufTtcbmZ1bmN0aW9uIHJlZ2lzdGVyUnVudGltZUhlbHBlcnMoaGVscGVycykge1xuICBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGhlbHBlcnMpLmZvckVhY2goKHMpID0+IHtcbiAgICBoZWxwZXJOYW1lTWFwW3NdID0gaGVscGVyc1tzXTtcbiAgfSk7XG59XG5cbmNvbnN0IGxvY1N0dWIgPSB7XG4gIHN0YXJ0OiB7IGxpbmU6IDEsIGNvbHVtbjogMSwgb2Zmc2V0OiAwIH0sXG4gIGVuZDogeyBsaW5lOiAxLCBjb2x1bW46IDEsIG9mZnNldDogMCB9LFxuICBzb3VyY2U6IFwiXCJcbn07XG5mdW5jdGlvbiBjcmVhdGVSb290KGNoaWxkcmVuLCBzb3VyY2UgPSBcIlwiKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogMCxcbiAgICBzb3VyY2UsXG4gICAgY2hpbGRyZW4sXG4gICAgaGVscGVyczogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICBjb21wb25lbnRzOiBbXSxcbiAgICBkaXJlY3RpdmVzOiBbXSxcbiAgICBob2lzdHM6IFtdLFxuICAgIGltcG9ydHM6IFtdLFxuICAgIGNhY2hlZDogW10sXG4gICAgdGVtcHM6IDAsXG4gICAgY29kZWdlbk5vZGU6IHZvaWQgMCxcbiAgICBsb2M6IGxvY1N0dWJcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVZOb2RlQ2FsbChjb250ZXh0LCB0YWcsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMsIGRpcmVjdGl2ZXMsIGlzQmxvY2sgPSBmYWxzZSwgZGlzYWJsZVRyYWNraW5nID0gZmFsc2UsIGlzQ29tcG9uZW50ID0gZmFsc2UsIGxvYyA9IGxvY1N0dWIpIHtcbiAgaWYgKGNvbnRleHQpIHtcbiAgICBpZiAoaXNCbG9jaykge1xuICAgICAgY29udGV4dC5oZWxwZXIoT1BFTl9CTE9DSyk7XG4gICAgICBjb250ZXh0LmhlbHBlcihnZXRWTm9kZUJsb2NrSGVscGVyKGNvbnRleHQuaW5TU1IsIGlzQ29tcG9uZW50KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQuaGVscGVyKGdldFZOb2RlSGVscGVyKGNvbnRleHQuaW5TU1IsIGlzQ29tcG9uZW50KSk7XG4gICAgfVxuICAgIGlmIChkaXJlY3RpdmVzKSB7XG4gICAgICBjb250ZXh0LmhlbHBlcihXSVRIX0RJUkVDVElWRVMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IDEzLFxuICAgIHRhZyxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBwYXRjaEZsYWcsXG4gICAgZHluYW1pY1Byb3BzLFxuICAgIGRpcmVjdGl2ZXMsXG4gICAgaXNCbG9jayxcbiAgICBkaXNhYmxlVHJhY2tpbmcsXG4gICAgaXNDb21wb25lbnQsXG4gICAgbG9jXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVBcnJheUV4cHJlc3Npb24oZWxlbWVudHMsIGxvYyA9IGxvY1N0dWIpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAxNyxcbiAgICBsb2MsXG4gICAgZWxlbWVudHNcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdEV4cHJlc3Npb24ocHJvcGVydGllcywgbG9jID0gbG9jU3R1Yikge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IDE1LFxuICAgIGxvYyxcbiAgICBwcm9wZXJ0aWVzXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVPYmplY3RQcm9wZXJ0eShrZXksIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogMTYsXG4gICAgbG9jOiBsb2NTdHViLFxuICAgIGtleTogaXNTdHJpbmcoa2V5KSA/IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oa2V5LCB0cnVlKSA6IGtleSxcbiAgICB2YWx1ZVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihjb250ZW50LCBpc1N0YXRpYyA9IGZhbHNlLCBsb2MgPSBsb2NTdHViLCBjb25zdFR5cGUgPSAwKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogNCxcbiAgICBsb2MsXG4gICAgY29udGVudCxcbiAgICBpc1N0YXRpYyxcbiAgICBjb25zdFR5cGU6IGlzU3RhdGljID8gMyA6IGNvbnN0VHlwZVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uKGNoaWxkcmVuLCBsb2MgPSBsb2NTdHViKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogOCxcbiAgICBsb2MsXG4gICAgY2hpbGRyZW5cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNhbGxlZSwgYXJncyA9IFtdLCBsb2MgPSBsb2NTdHViKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogMTQsXG4gICAgbG9jLFxuICAgIGNhbGxlZSxcbiAgICBhcmd1bWVudHM6IGFyZ3NcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbihwYXJhbXMsIHJldHVybnMgPSB2b2lkIDAsIG5ld2xpbmUgPSBmYWxzZSwgaXNTbG90ID0gZmFsc2UsIGxvYyA9IGxvY1N0dWIpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAxOCxcbiAgICBwYXJhbXMsXG4gICAgcmV0dXJucyxcbiAgICBuZXdsaW5lLFxuICAgIGlzU2xvdCxcbiAgICBsb2NcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbmRpdGlvbmFsRXhwcmVzc2lvbih0ZXN0LCBjb25zZXF1ZW50LCBhbHRlcm5hdGUsIG5ld2xpbmUgPSB0cnVlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogMTksXG4gICAgdGVzdCxcbiAgICBjb25zZXF1ZW50LFxuICAgIGFsdGVybmF0ZSxcbiAgICBuZXdsaW5lLFxuICAgIGxvYzogbG9jU3R1YlxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQ2FjaGVFeHByZXNzaW9uKGluZGV4LCB2YWx1ZSwgbmVlZFBhdXNlVHJhY2tpbmcgPSBmYWxzZSwgaW5WT25jZSA9IGZhbHNlKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogMjAsXG4gICAgaW5kZXgsXG4gICAgdmFsdWUsXG4gICAgbmVlZFBhdXNlVHJhY2tpbmcsXG4gICAgaW5WT25jZSxcbiAgICBuZWVkQXJyYXlTcHJlYWQ6IGZhbHNlLFxuICAgIGxvYzogbG9jU3R1YlxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQmxvY2tTdGF0ZW1lbnQoYm9keSkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IDIxLFxuICAgIGJvZHksXG4gICAgbG9jOiBsb2NTdHViXG4gIH07XG59XG5mdW5jdGlvbiBnZXRWTm9kZUhlbHBlcihzc3IsIGlzQ29tcG9uZW50KSB7XG4gIHJldHVybiBzc3IgfHwgaXNDb21wb25lbnQgPyBDUkVBVEVfVk5PREUgOiBDUkVBVEVfRUxFTUVOVF9WTk9ERTtcbn1cbmZ1bmN0aW9uIGdldFZOb2RlQmxvY2tIZWxwZXIoc3NyLCBpc0NvbXBvbmVudCkge1xuICByZXR1cm4gc3NyIHx8IGlzQ29tcG9uZW50ID8gQ1JFQVRFX0JMT0NLIDogQ1JFQVRFX0VMRU1FTlRfQkxPQ0s7XG59XG5mdW5jdGlvbiBjb252ZXJ0VG9CbG9jayhub2RlLCB7IGhlbHBlciwgcmVtb3ZlSGVscGVyLCBpblNTUiB9KSB7XG4gIGlmICghbm9kZS5pc0Jsb2NrKSB7XG4gICAgbm9kZS5pc0Jsb2NrID0gdHJ1ZTtcbiAgICByZW1vdmVIZWxwZXIoZ2V0Vk5vZGVIZWxwZXIoaW5TU1IsIG5vZGUuaXNDb21wb25lbnQpKTtcbiAgICBoZWxwZXIoT1BFTl9CTE9DSyk7XG4gICAgaGVscGVyKGdldFZOb2RlQmxvY2tIZWxwZXIoaW5TU1IsIG5vZGUuaXNDb21wb25lbnQpKTtcbiAgfVxufVxuXG5jb25zdCBkZWZhdWx0RGVsaW1pdGVyc09wZW4gPSBuZXcgVWludDhBcnJheShbMTIzLCAxMjNdKTtcbmNvbnN0IGRlZmF1bHREZWxpbWl0ZXJzQ2xvc2UgPSBuZXcgVWludDhBcnJheShbMTI1LCAxMjVdKTtcbmZ1bmN0aW9uIGlzVGFnU3RhcnRDaGFyKGMpIHtcbiAgcmV0dXJuIGMgPj0gOTcgJiYgYyA8PSAxMjIgfHwgYyA+PSA2NSAmJiBjIDw9IDkwO1xufVxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKGMpIHtcbiAgcmV0dXJuIGMgPT09IDMyIHx8IGMgPT09IDEwIHx8IGMgPT09IDkgfHwgYyA9PT0gMTIgfHwgYyA9PT0gMTM7XG59XG5mdW5jdGlvbiBpc0VuZE9mVGFnU2VjdGlvbihjKSB7XG4gIHJldHVybiBjID09PSA0NyB8fCBjID09PSA2MiB8fCBpc1doaXRlc3BhY2UoYyk7XG59XG5mdW5jdGlvbiB0b0NoYXJDb2RlcyhzdHIpIHtcbiAgY29uc3QgcmV0ID0gbmV3IFVpbnQ4QXJyYXkoc3RyLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgcmV0W2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmNvbnN0IFNlcXVlbmNlcyA9IHtcbiAgQ2RhdGE6IG5ldyBVaW50OEFycmF5KFs2NywgNjgsIDY1LCA4NCwgNjUsIDkxXSksXG4gIC8vIENEQVRBW1xuICBDZGF0YUVuZDogbmV3IFVpbnQ4QXJyYXkoWzkzLCA5MywgNjJdKSxcbiAgLy8gXV0+XG4gIENvbW1lbnRFbmQ6IG5ldyBVaW50OEFycmF5KFs0NSwgNDUsIDYyXSksXG4gIC8vIGAtLT5gXG4gIFNjcmlwdEVuZDogbmV3IFVpbnQ4QXJyYXkoWzYwLCA0NywgMTE1LCA5OSwgMTE0LCAxMDUsIDExMiwgMTE2XSksXG4gIC8vIGA8XFwvc2NyaXB0YFxuICBTdHlsZUVuZDogbmV3IFVpbnQ4QXJyYXkoWzYwLCA0NywgMTE1LCAxMTYsIDEyMSwgMTA4LCAxMDFdKSxcbiAgLy8gYDwvc3R5bGVgXG4gIFRpdGxlRW5kOiBuZXcgVWludDhBcnJheShbNjAsIDQ3LCAxMTYsIDEwNSwgMTE2LCAxMDgsIDEwMV0pLFxuICAvLyBgPC90aXRsZWBcbiAgVGV4dGFyZWFFbmQ6IG5ldyBVaW50OEFycmF5KFtcbiAgICA2MCxcbiAgICA0NyxcbiAgICAxMTYsXG4gICAgMTAxLFxuICAgIDEyMCxcbiAgICAxMTYsXG4gICAgOTcsXG4gICAgMTE0LFxuICAgIDEwMSxcbiAgICA5N1xuICBdKVxuICAvLyBgPC90ZXh0YXJlYVxufTtcbmNsYXNzIFRva2VuaXplciB7XG4gIGNvbnN0cnVjdG9yKHN0YWNrLCBjYnMpIHtcbiAgICB0aGlzLnN0YWNrID0gc3RhY2s7XG4gICAgdGhpcy5jYnMgPSBjYnM7XG4gICAgLyoqIFRoZSBjdXJyZW50IHN0YXRlIHRoZSB0b2tlbml6ZXIgaXMgaW4uICovXG4gICAgdGhpcy5zdGF0ZSA9IDE7XG4gICAgLyoqIFRoZSByZWFkIGJ1ZmZlci4gKi9cbiAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XG4gICAgLyoqIFRoZSBiZWdpbm5pbmcgb2YgdGhlIHNlY3Rpb24gdGhhdCBpcyBjdXJyZW50bHkgYmVpbmcgcmVhZC4gKi9cbiAgICB0aGlzLnNlY3Rpb25TdGFydCA9IDA7XG4gICAgLyoqIFRoZSBpbmRleCB3aXRoaW4gdGhlIGJ1ZmZlciB0aGF0IHdlIGFyZSBjdXJyZW50bHkgbG9va2luZyBhdC4gKi9cbiAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAvKiogVGhlIHN0YXJ0IG9mIHRoZSBsYXN0IGVudGl0eS4gKi9cbiAgICB0aGlzLmVudGl0eVN0YXJ0ID0gMDtcbiAgICAvKiogU29tZSBiZWhhdmlvciwgZWcuIHdoZW4gZGVjb2RpbmcgZW50aXRpZXMsIGlzIGRvbmUgd2hpbGUgd2UgYXJlIGluIGFub3RoZXIgc3RhdGUuIFRoaXMga2VlcHMgdHJhY2sgb2YgdGhlIG90aGVyIHN0YXRlIHR5cGUuICovXG4gICAgdGhpcy5iYXNlU3RhdGUgPSAxO1xuICAgIC8qKiBGb3Igc3BlY2lhbCBwYXJzaW5nIGJlaGF2aW9yIGluc2lkZSBvZiBzY3JpcHQgYW5kIHN0eWxlIHRhZ3MuICovXG4gICAgdGhpcy5pblJDREFUQSA9IGZhbHNlO1xuICAgIC8qKiBGb3IgZGlzYWJsaW5nIFJDREFUQSB0YWdzIGhhbmRsaW5nICovXG4gICAgdGhpcy5pblhNTCA9IGZhbHNlO1xuICAgIC8qKiBGb3IgZGlzYWJsaW5nIGludGVycG9sYXRpb24gcGFyc2luZyBpbiB2LXByZSAqL1xuICAgIHRoaXMuaW5WUHJlID0gZmFsc2U7XG4gICAgLyoqIFJlY29yZCBuZXdsaW5lIHBvc2l0aW9ucyBmb3IgZmFzdCBsaW5lIC8gY29sdW1uIGNhbGN1bGF0aW9uICovXG4gICAgdGhpcy5uZXdsaW5lcyA9IFtdO1xuICAgIHRoaXMubW9kZSA9IDA7XG4gICAgdGhpcy5kZWxpbWl0ZXJPcGVuID0gZGVmYXVsdERlbGltaXRlcnNPcGVuO1xuICAgIHRoaXMuZGVsaW1pdGVyQ2xvc2UgPSBkZWZhdWx0RGVsaW1pdGVyc0Nsb3NlO1xuICAgIHRoaXMuZGVsaW1pdGVySW5kZXggPSAtMTtcbiAgICB0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9IHZvaWQgMDtcbiAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAwO1xuICB9XG4gIGdldCBpblNGQ1Jvb3QoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kZSA9PT0gMiAmJiB0aGlzLnN0YWNrLmxlbmd0aCA9PT0gMDtcbiAgfVxuICByZXNldCgpIHtcbiAgICB0aGlzLnN0YXRlID0gMTtcbiAgICB0aGlzLm1vZGUgPSAwO1xuICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICB0aGlzLnNlY3Rpb25TdGFydCA9IDA7XG4gICAgdGhpcy5pbmRleCA9IDA7XG4gICAgdGhpcy5iYXNlU3RhdGUgPSAxO1xuICAgIHRoaXMuaW5SQ0RBVEEgPSBmYWxzZTtcbiAgICB0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9IHZvaWQgMDtcbiAgICB0aGlzLm5ld2xpbmVzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5kZWxpbWl0ZXJPcGVuID0gZGVmYXVsdERlbGltaXRlcnNPcGVuO1xuICAgIHRoaXMuZGVsaW1pdGVyQ2xvc2UgPSBkZWZhdWx0RGVsaW1pdGVyc0Nsb3NlO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBQb3NpdGlvbiBvYmplY3Qgd2l0aCBsaW5lIC8gY29sdW1uIGluZm9ybWF0aW9uIHVzaW5nIHJlY29yZGVkXG4gICAqIG5ld2xpbmUgcG9zaXRpb25zLiBXZSBrbm93IHRoZSBpbmRleCBpcyBhbHdheXMgZ29pbmcgdG8gYmUgYW4gYWxyZWFkeVxuICAgKiBwcm9jZXNzZWQgaW5kZXgsIHNvIGFsbCB0aGUgbmV3bGluZXMgdXAgdG8gdGhpcyBpbmRleCBzaG91bGQgaGF2ZSBiZWVuXG4gICAqIHJlY29yZGVkLlxuICAgKi9cbiAgZ2V0UG9zKGluZGV4KSB7XG4gICAgbGV0IGxpbmUgPSAxO1xuICAgIGxldCBjb2x1bW4gPSBpbmRleCArIDE7XG4gICAgZm9yIChsZXQgaSA9IHRoaXMubmV3bGluZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IG5ld2xpbmVJbmRleCA9IHRoaXMubmV3bGluZXNbaV07XG4gICAgICBpZiAoaW5kZXggPiBuZXdsaW5lSW5kZXgpIHtcbiAgICAgICAgbGluZSA9IGkgKyAyO1xuICAgICAgICBjb2x1bW4gPSBpbmRleCAtIG5ld2xpbmVJbmRleDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBjb2x1bW4sXG4gICAgICBsaW5lLFxuICAgICAgb2Zmc2V0OiBpbmRleFxuICAgIH07XG4gIH1cbiAgcGVlaygpIHtcbiAgICByZXR1cm4gdGhpcy5idWZmZXIuY2hhckNvZGVBdCh0aGlzLmluZGV4ICsgMSk7XG4gIH1cbiAgc3RhdGVUZXh0KGMpIHtcbiAgICBpZiAoYyA9PT0gNjApIHtcbiAgICAgIGlmICh0aGlzLmluZGV4ID4gdGhpcy5zZWN0aW9uU3RhcnQpIHtcbiAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhdGUgPSA1O1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuaW5WUHJlICYmIGMgPT09IHRoaXMuZGVsaW1pdGVyT3BlblswXSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IDI7XG4gICAgICB0aGlzLmRlbGltaXRlckluZGV4ID0gMDtcbiAgICAgIHRoaXMuc3RhdGVJbnRlcnBvbGF0aW9uT3BlbihjKTtcbiAgICB9XG4gIH1cbiAgc3RhdGVJbnRlcnBvbGF0aW9uT3BlbihjKSB7XG4gICAgaWYgKGMgPT09IHRoaXMuZGVsaW1pdGVyT3Blblt0aGlzLmRlbGltaXRlckluZGV4XSkge1xuICAgICAgaWYgKHRoaXMuZGVsaW1pdGVySW5kZXggPT09IHRoaXMuZGVsaW1pdGVyT3Blbi5sZW5ndGggLSAxKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5pbmRleCArIDEgLSB0aGlzLmRlbGltaXRlck9wZW4ubGVuZ3RoO1xuICAgICAgICBpZiAoc3RhcnQgPiB0aGlzLnNlY3Rpb25TdGFydCkge1xuICAgICAgICAgIHRoaXMuY2JzLm9udGV4dCh0aGlzLnNlY3Rpb25TdGFydCwgc3RhcnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSAzO1xuICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHN0YXJ0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZWxpbWl0ZXJJbmRleCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5pblJDREFUQSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IDMyO1xuICAgICAgdGhpcy5zdGF0ZUluUkNEQVRBKGMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXRlID0gMTtcbiAgICAgIHRoaXMuc3RhdGVUZXh0KGMpO1xuICAgIH1cbiAgfVxuICBzdGF0ZUludGVycG9sYXRpb24oYykge1xuICAgIGlmIChjID09PSB0aGlzLmRlbGltaXRlckNsb3NlWzBdKSB7XG4gICAgICB0aGlzLnN0YXRlID0gNDtcbiAgICAgIHRoaXMuZGVsaW1pdGVySW5kZXggPSAwO1xuICAgICAgdGhpcy5zdGF0ZUludGVycG9sYXRpb25DbG9zZShjKTtcbiAgICB9XG4gIH1cbiAgc3RhdGVJbnRlcnBvbGF0aW9uQ2xvc2UoYykge1xuICAgIGlmIChjID09PSB0aGlzLmRlbGltaXRlckNsb3NlW3RoaXMuZGVsaW1pdGVySW5kZXhdKSB7XG4gICAgICBpZiAodGhpcy5kZWxpbWl0ZXJJbmRleCA9PT0gdGhpcy5kZWxpbWl0ZXJDbG9zZS5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRoaXMuY2JzLm9uaW50ZXJwb2xhdGlvbih0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCArIDEpO1xuICAgICAgICBpZiAodGhpcy5pblJDREFUQSkge1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSAzMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZWxpbWl0ZXJJbmRleCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXRlID0gMztcbiAgICAgIHRoaXMuc3RhdGVJbnRlcnBvbGF0aW9uKGMpO1xuICAgIH1cbiAgfVxuICBzdGF0ZVNwZWNpYWxTdGFydFNlcXVlbmNlKGMpIHtcbiAgICBjb25zdCBpc0VuZCA9IHRoaXMuc2VxdWVuY2VJbmRleCA9PT0gdGhpcy5jdXJyZW50U2VxdWVuY2UubGVuZ3RoO1xuICAgIGNvbnN0IGlzTWF0Y2ggPSBpc0VuZCA/IChcbiAgICAgIC8vIElmIHdlIGFyZSBhdCB0aGUgZW5kIG9mIHRoZSBzZXF1ZW5jZSwgbWFrZSBzdXJlIHRoZSB0YWcgbmFtZSBoYXMgZW5kZWRcbiAgICAgIGlzRW5kT2ZUYWdTZWN0aW9uKGMpXG4gICAgKSA6IChcbiAgICAgIC8vIE90aGVyd2lzZSwgZG8gYSBjYXNlLWluc2Vuc2l0aXZlIGNvbXBhcmlzb25cbiAgICAgIChjIHwgMzIpID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZVt0aGlzLnNlcXVlbmNlSW5kZXhdXG4gICAgKTtcbiAgICBpZiAoIWlzTWF0Y2gpIHtcbiAgICAgIHRoaXMuaW5SQ0RBVEEgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCFpc0VuZCkge1xuICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4Kys7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDA7XG4gICAgdGhpcy5zdGF0ZSA9IDY7XG4gICAgdGhpcy5zdGF0ZUluVGFnTmFtZShjKTtcbiAgfVxuICAvKiogTG9vayBmb3IgYW4gZW5kIHRhZy4gRm9yIDx0aXRsZT4gYW5kIDx0ZXh0YXJlYT4sIGFsc28gZGVjb2RlIGVudGl0aWVzLiAqL1xuICBzdGF0ZUluUkNEQVRBKGMpIHtcbiAgICBpZiAodGhpcy5zZXF1ZW5jZUluZGV4ID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZS5sZW5ndGgpIHtcbiAgICAgIGlmIChjID09PSA2MiB8fCBpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgY29uc3QgZW5kT2ZUZXh0ID0gdGhpcy5pbmRleCAtIHRoaXMuY3VycmVudFNlcXVlbmNlLmxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMuc2VjdGlvblN0YXJ0IDwgZW5kT2ZUZXh0KSB7XG4gICAgICAgICAgY29uc3QgYWN0dWFsSW5kZXggPSB0aGlzLmluZGV4O1xuICAgICAgICAgIHRoaXMuaW5kZXggPSBlbmRPZlRleHQ7XG4gICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuc2VjdGlvblN0YXJ0LCBlbmRPZlRleHQpO1xuICAgICAgICAgIHRoaXMuaW5kZXggPSBhY3R1YWxJbmRleDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IGVuZE9mVGV4dCArIDI7XG4gICAgICAgIHRoaXMuc3RhdGVJbkNsb3NpbmdUYWdOYW1lKGMpO1xuICAgICAgICB0aGlzLmluUkNEQVRBID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDA7XG4gICAgfVxuICAgIGlmICgoYyB8IDMyKSA9PT0gdGhpcy5jdXJyZW50U2VxdWVuY2VbdGhpcy5zZXF1ZW5jZUluZGV4XSkge1xuICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ICs9IDE7XG4gICAgfSBlbHNlIGlmICh0aGlzLnNlcXVlbmNlSW5kZXggPT09IDApIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9PT0gU2VxdWVuY2VzLlRpdGxlRW5kIHx8IHRoaXMuY3VycmVudFNlcXVlbmNlID09PSBTZXF1ZW5jZXMuVGV4dGFyZWFFbmQgJiYgIXRoaXMuaW5TRkNSb290KSB7XG4gICAgICAgIGlmICghdGhpcy5pblZQcmUgJiYgYyA9PT0gdGhpcy5kZWxpbWl0ZXJPcGVuWzBdKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IDI7XG4gICAgICAgICAgdGhpcy5kZWxpbWl0ZXJJbmRleCA9IDA7XG4gICAgICAgICAgdGhpcy5zdGF0ZUludGVycG9sYXRpb25PcGVuKGMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZmFzdEZvcndhcmRUbyg2MCkpIHtcbiAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gTnVtYmVyKGMgPT09IDYwKTtcbiAgICB9XG4gIH1cbiAgc3RhdGVDREFUQVNlcXVlbmNlKGMpIHtcbiAgICBpZiAoYyA9PT0gU2VxdWVuY2VzLkNkYXRhW3RoaXMuc2VxdWVuY2VJbmRleF0pIHtcbiAgICAgIGlmICgrK3RoaXMuc2VxdWVuY2VJbmRleCA9PT0gU2VxdWVuY2VzLkNkYXRhLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gMjg7XG4gICAgICAgIHRoaXMuY3VycmVudFNlcXVlbmNlID0gU2VxdWVuY2VzLkNkYXRhRW5kO1xuICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAwO1xuICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAwO1xuICAgICAgdGhpcy5zdGF0ZSA9IDIzO1xuICAgICAgdGhpcy5zdGF0ZUluRGVjbGFyYXRpb24oYyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBXaGVuIHdlIHdhaXQgZm9yIG9uZSBzcGVjaWZpYyBjaGFyYWN0ZXIsIHdlIGNhbiBzcGVlZCB0aGluZ3MgdXBcbiAgICogYnkgc2tpcHBpbmcgdGhyb3VnaCB0aGUgYnVmZmVyIHVudGlsIHdlIGZpbmQgaXQuXG4gICAqXG4gICAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIGNoYXJhY3RlciB3YXMgZm91bmQuXG4gICAqL1xuICBmYXN0Rm9yd2FyZFRvKGMpIHtcbiAgICB3aGlsZSAoKyt0aGlzLmluZGV4IDwgdGhpcy5idWZmZXIubGVuZ3RoKSB7XG4gICAgICBjb25zdCBjYyA9IHRoaXMuYnVmZmVyLmNoYXJDb2RlQXQodGhpcy5pbmRleCk7XG4gICAgICBpZiAoY2MgPT09IDEwKSB7XG4gICAgICAgIHRoaXMubmV3bGluZXMucHVzaCh0aGlzLmluZGV4KTtcbiAgICAgIH1cbiAgICAgIGlmIChjYyA9PT0gYykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5pbmRleCA9IHRoaXMuYnVmZmVyLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBDb21tZW50cyBhbmQgQ0RBVEEgZW5kIHdpdGggYC0tPmAgYW5kIGBdXT5gLlxuICAgKlxuICAgKiBUaGVpciBjb21tb24gcXVhbGl0aWVzIGFyZTpcbiAgICogLSBUaGVpciBlbmQgc2VxdWVuY2VzIGhhdmUgYSBkaXN0aW5jdCBjaGFyYWN0ZXIgdGhleSBzdGFydCB3aXRoLlxuICAgKiAtIFRoYXQgY2hhcmFjdGVyIGlzIHRoZW4gcmVwZWF0ZWQsIHNvIHdlIGhhdmUgdG8gY2hlY2sgbXVsdGlwbGUgcmVwZWF0cy5cbiAgICogLSBBbGwgY2hhcmFjdGVycyBidXQgdGhlIHN0YXJ0IGNoYXJhY3RlciBvZiB0aGUgc2VxdWVuY2UgY2FuIGJlIHNraXBwZWQuXG4gICAqL1xuICBzdGF0ZUluQ29tbWVudExpa2UoYykge1xuICAgIGlmIChjID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZVt0aGlzLnNlcXVlbmNlSW5kZXhdKSB7XG4gICAgICBpZiAoKyt0aGlzLnNlcXVlbmNlSW5kZXggPT09IHRoaXMuY3VycmVudFNlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50U2VxdWVuY2UgPT09IFNlcXVlbmNlcy5DZGF0YUVuZCkge1xuICAgICAgICAgIHRoaXMuY2JzLm9uY2RhdGEodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXggLSAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNicy5vbmNvbW1lbnQodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXggLSAyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAwO1xuICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgICB0aGlzLnN0YXRlID0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuc2VxdWVuY2VJbmRleCA9PT0gMCkge1xuICAgICAgaWYgKHRoaXMuZmFzdEZvcndhcmRUbyh0aGlzLmN1cnJlbnRTZXF1ZW5jZVswXSkpIHtcbiAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGMgIT09IHRoaXMuY3VycmVudFNlcXVlbmNlW3RoaXMuc2VxdWVuY2VJbmRleCAtIDFdKSB7XG4gICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAwO1xuICAgIH1cbiAgfVxuICBzdGFydFNwZWNpYWwoc2VxdWVuY2UsIG9mZnNldCkge1xuICAgIHRoaXMuZW50ZXJSQ0RBVEEoc2VxdWVuY2UsIG9mZnNldCk7XG4gICAgdGhpcy5zdGF0ZSA9IDMxO1xuICB9XG4gIGVudGVyUkNEQVRBKHNlcXVlbmNlLCBvZmZzZXQpIHtcbiAgICB0aGlzLmluUkNEQVRBID0gdHJ1ZTtcbiAgICB0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9IHNlcXVlbmNlO1xuICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IG9mZnNldDtcbiAgfVxuICBzdGF0ZUJlZm9yZVRhZ05hbWUoYykge1xuICAgIGlmIChjID09PSAzMykge1xuICAgICAgdGhpcy5zdGF0ZSA9IDIyO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDYzKSB7XG4gICAgICB0aGlzLnN0YXRlID0gMjQ7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgIH0gZWxzZSBpZiAoaXNUYWdTdGFydENoYXIoYykpIHtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgIGlmICh0aGlzLm1vZGUgPT09IDApIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IDY7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaW5TRkNSb290KSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSAzNDtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaW5YTUwpIHtcbiAgICAgICAgaWYgKGMgPT09IDExNikge1xuICAgICAgICAgIHRoaXMuc3RhdGUgPSAzMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gYyA9PT0gMTE1ID8gMjkgOiA2O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXRlID0gNjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGMgPT09IDQ3KSB7XG4gICAgICB0aGlzLnN0YXRlID0gODtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZSA9IDE7XG4gICAgICB0aGlzLnN0YXRlVGV4dChjKTtcbiAgICB9XG4gIH1cbiAgc3RhdGVJblRhZ05hbWUoYykge1xuICAgIGlmIChpc0VuZE9mVGFnU2VjdGlvbihjKSkge1xuICAgICAgdGhpcy5oYW5kbGVUYWdOYW1lKGMpO1xuICAgIH1cbiAgfVxuICBzdGF0ZUluU0ZDUm9vdFRhZ05hbWUoYykge1xuICAgIGlmIChpc0VuZE9mVGFnU2VjdGlvbihjKSkge1xuICAgICAgY29uc3QgdGFnID0gdGhpcy5idWZmZXIuc2xpY2UodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgaWYgKHRhZyAhPT0gXCJ0ZW1wbGF0ZVwiKSB7XG4gICAgICAgIHRoaXMuZW50ZXJSQ0RBVEEodG9DaGFyQ29kZXMoYDwvYCArIHRhZyksIDApO1xuICAgICAgfVxuICAgICAgdGhpcy5oYW5kbGVUYWdOYW1lKGMpO1xuICAgIH1cbiAgfVxuICBoYW5kbGVUYWdOYW1lKGMpIHtcbiAgICB0aGlzLmNicy5vbm9wZW50YWduYW1lKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICB0aGlzLnNlY3Rpb25TdGFydCA9IC0xO1xuICAgIHRoaXMuc3RhdGUgPSAxMTtcbiAgICB0aGlzLnN0YXRlQmVmb3JlQXR0ck5hbWUoYyk7XG4gIH1cbiAgc3RhdGVCZWZvcmVDbG9zaW5nVGFnTmFtZShjKSB7XG4gICAgaWYgKGlzV2hpdGVzcGFjZShjKSkgOyBlbHNlIGlmIChjID09PSA2Mikge1xuICAgICAge1xuICAgICAgICB0aGlzLmNicy5vbmVycigxNCwgdGhpcy5pbmRleCk7XG4gICAgICB9XG4gICAgICB0aGlzLnN0YXRlID0gMTtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhdGUgPSBpc1RhZ1N0YXJ0Q2hhcihjKSA/IDkgOiAyNztcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICB9XG4gIH1cbiAgc3RhdGVJbkNsb3NpbmdUYWdOYW1lKGMpIHtcbiAgICBpZiAoYyA9PT0gNjIgfHwgaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICB0aGlzLmNicy5vbmNsb3NldGFnKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gLTE7XG4gICAgICB0aGlzLnN0YXRlID0gMTA7XG4gICAgICB0aGlzLnN0YXRlQWZ0ZXJDbG9zaW5nVGFnTmFtZShjKTtcbiAgICB9XG4gIH1cbiAgc3RhdGVBZnRlckNsb3NpbmdUYWdOYW1lKGMpIHtcbiAgICBpZiAoYyA9PT0gNjIpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAxO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9XG4gIH1cbiAgc3RhdGVCZWZvcmVBdHRyTmFtZShjKSB7XG4gICAgaWYgKGMgPT09IDYyKSB7XG4gICAgICB0aGlzLmNicy5vbm9wZW50YWdlbmQodGhpcy5pbmRleCk7XG4gICAgICBpZiAodGhpcy5pblJDREFUQSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gMzI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXRlID0gMTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgfSBlbHNlIGlmIChjID09PSA0Nykge1xuICAgICAgdGhpcy5zdGF0ZSA9IDc7XG4gICAgICBpZiAodGhpcy5wZWVrKCkgIT09IDYyKSB7XG4gICAgICAgIHRoaXMuY2JzLm9uZXJyKDIyLCB0aGlzLmluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGMgPT09IDYwICYmIHRoaXMucGVlaygpID09PSA0Nykge1xuICAgICAgdGhpcy5jYnMub25vcGVudGFnZW5kKHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5zdGF0ZSA9IDU7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgfSBlbHNlIGlmICghaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICBpZiAoYyA9PT0gNjEpIHtcbiAgICAgICAgdGhpcy5jYnMub25lcnIoXG4gICAgICAgICAgMTksXG4gICAgICAgICAgdGhpcy5pbmRleFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhpcy5oYW5kbGVBdHRyU3RhcnQoYyk7XG4gICAgfVxuICB9XG4gIGhhbmRsZUF0dHJTdGFydChjKSB7XG4gICAgaWYgKGMgPT09IDExOCAmJiB0aGlzLnBlZWsoKSA9PT0gNDUpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAxMztcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDQ2IHx8IGMgPT09IDU4IHx8IGMgPT09IDY0IHx8IGMgPT09IDM1KSB7XG4gICAgICB0aGlzLmNicy5vbmRpcm5hbWUodGhpcy5pbmRleCwgdGhpcy5pbmRleCArIDEpO1xuICAgICAgdGhpcy5zdGF0ZSA9IDE0O1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZSA9IDEyO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIH1cbiAgfVxuICBzdGF0ZUluU2VsZkNsb3NpbmdUYWcoYykge1xuICAgIGlmIChjID09PSA2Mikge1xuICAgICAgdGhpcy5jYnMub25zZWxmY2xvc2luZ3RhZyh0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMuc3RhdGUgPSAxO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICAgIHRoaXMuaW5SQ0RBVEEgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAxMTtcbiAgICAgIHRoaXMuc3RhdGVCZWZvcmVBdHRyTmFtZShjKTtcbiAgICB9XG4gIH1cbiAgc3RhdGVJbkF0dHJOYW1lKGMpIHtcbiAgICBpZiAoYyA9PT0gNjEgfHwgaXNFbmRPZlRhZ1NlY3Rpb24oYykpIHtcbiAgICAgIHRoaXMuY2JzLm9uYXR0cmlibmFtZSh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICB0aGlzLmhhbmRsZUF0dHJOYW1lRW5kKGMpO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gMzQgfHwgYyA9PT0gMzkgfHwgYyA9PT0gNjApIHtcbiAgICAgIHRoaXMuY2JzLm9uZXJyKFxuICAgICAgICAxNyxcbiAgICAgICAgdGhpcy5pbmRleFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgc3RhdGVJbkRpck5hbWUoYykge1xuICAgIGlmIChjID09PSA2MSB8fCBpc0VuZE9mVGFnU2VjdGlvbihjKSkge1xuICAgICAgdGhpcy5jYnMub25kaXJuYW1lKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMuaGFuZGxlQXR0ck5hbWVFbmQoYyk7XG4gICAgfSBlbHNlIGlmIChjID09PSA1OCkge1xuICAgICAgdGhpcy5jYnMub25kaXJuYW1lKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMuc3RhdGUgPSAxNDtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgfSBlbHNlIGlmIChjID09PSA0Nikge1xuICAgICAgdGhpcy5jYnMub25kaXJuYW1lKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMuc3RhdGUgPSAxNjtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgfVxuICB9XG4gIHN0YXRlSW5EaXJBcmcoYykge1xuICAgIGlmIChjID09PSA2MSB8fCBpc0VuZE9mVGFnU2VjdGlvbihjKSkge1xuICAgICAgdGhpcy5jYnMub25kaXJhcmcodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5oYW5kbGVBdHRyTmFtZUVuZChjKTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDkxKSB7XG4gICAgICB0aGlzLnN0YXRlID0gMTU7XG4gICAgfSBlbHNlIGlmIChjID09PSA0Nikge1xuICAgICAgdGhpcy5jYnMub25kaXJhcmcodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5zdGF0ZSA9IDE2O1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9XG4gIH1cbiAgc3RhdGVJbkR5bmFtaWNEaXJBcmcoYykge1xuICAgIGlmIChjID09PSA5Mykge1xuICAgICAgdGhpcy5zdGF0ZSA9IDE0O1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gNjEgfHwgaXNFbmRPZlRhZ1NlY3Rpb24oYykpIHtcbiAgICAgIHRoaXMuY2JzLm9uZGlyYXJnKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4ICsgMSk7XG4gICAgICB0aGlzLmhhbmRsZUF0dHJOYW1lRW5kKGMpO1xuICAgICAge1xuICAgICAgICB0aGlzLmNicy5vbmVycihcbiAgICAgICAgICAyNyxcbiAgICAgICAgICB0aGlzLmluZGV4XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN0YXRlSW5EaXJNb2RpZmllcihjKSB7XG4gICAgaWYgKGMgPT09IDYxIHx8IGlzRW5kT2ZUYWdTZWN0aW9uKGMpKSB7XG4gICAgICB0aGlzLmNicy5vbmRpcm1vZGlmaWVyKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMuaGFuZGxlQXR0ck5hbWVFbmQoYyk7XG4gICAgfSBlbHNlIGlmIChjID09PSA0Nikge1xuICAgICAgdGhpcy5jYnMub25kaXJtb2RpZmllcih0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgIH1cbiAgfVxuICBoYW5kbGVBdHRyTmFtZUVuZChjKSB7XG4gICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHRoaXMuc3RhdGUgPSAxNztcbiAgICB0aGlzLmNicy5vbmF0dHJpYm5hbWVlbmQodGhpcy5pbmRleCk7XG4gICAgdGhpcy5zdGF0ZUFmdGVyQXR0ck5hbWUoYyk7XG4gIH1cbiAgc3RhdGVBZnRlckF0dHJOYW1lKGMpIHtcbiAgICBpZiAoYyA9PT0gNjEpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAxODtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDQ3IHx8IGMgPT09IDYyKSB7XG4gICAgICB0aGlzLmNicy5vbmF0dHJpYmVuZCgwLCB0aGlzLnNlY3Rpb25TdGFydCk7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IC0xO1xuICAgICAgdGhpcy5zdGF0ZSA9IDExO1xuICAgICAgdGhpcy5zdGF0ZUJlZm9yZUF0dHJOYW1lKGMpO1xuICAgIH0gZWxzZSBpZiAoIWlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgdGhpcy5jYnMub25hdHRyaWJlbmQoMCwgdGhpcy5zZWN0aW9uU3RhcnQpO1xuICAgICAgdGhpcy5oYW5kbGVBdHRyU3RhcnQoYyk7XG4gICAgfVxuICB9XG4gIHN0YXRlQmVmb3JlQXR0clZhbHVlKGMpIHtcbiAgICBpZiAoYyA9PT0gMzQpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAxOTtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgfSBlbHNlIGlmIChjID09PSAzOSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IDIwO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9IGVsc2UgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgIHRoaXMuc3RhdGUgPSAyMTtcbiAgICAgIHRoaXMuc3RhdGVJbkF0dHJWYWx1ZU5vUXVvdGVzKGMpO1xuICAgIH1cbiAgfVxuICBoYW5kbGVJbkF0dHJWYWx1ZShjLCBxdW90ZSkge1xuICAgIGlmIChjID09PSBxdW90ZSB8fCB0aGlzLmZhc3RGb3J3YXJkVG8ocXVvdGUpKSB7XG4gICAgICB0aGlzLmNicy5vbmF0dHJpYmRhdGEodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAtMTtcbiAgICAgIHRoaXMuY2JzLm9uYXR0cmliZW5kKFxuICAgICAgICBxdW90ZSA9PT0gMzQgPyAzIDogMixcbiAgICAgICAgdGhpcy5pbmRleCArIDFcbiAgICAgICk7XG4gICAgICB0aGlzLnN0YXRlID0gMTE7XG4gICAgfVxuICB9XG4gIHN0YXRlSW5BdHRyVmFsdWVEb3VibGVRdW90ZXMoYykge1xuICAgIHRoaXMuaGFuZGxlSW5BdHRyVmFsdWUoYywgMzQpO1xuICB9XG4gIHN0YXRlSW5BdHRyVmFsdWVTaW5nbGVRdW90ZXMoYykge1xuICAgIHRoaXMuaGFuZGxlSW5BdHRyVmFsdWUoYywgMzkpO1xuICB9XG4gIHN0YXRlSW5BdHRyVmFsdWVOb1F1b3RlcyhjKSB7XG4gICAgaWYgKGlzV2hpdGVzcGFjZShjKSB8fCBjID09PSA2Mikge1xuICAgICAgdGhpcy5jYnMub25hdHRyaWJkYXRhKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gLTE7XG4gICAgICB0aGlzLmNicy5vbmF0dHJpYmVuZCgxLCB0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMuc3RhdGUgPSAxMTtcbiAgICAgIHRoaXMuc3RhdGVCZWZvcmVBdHRyTmFtZShjKTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IDM0IHx8IGMgPT09IDM5IHx8IGMgPT09IDYwIHx8IGMgPT09IDYxIHx8IGMgPT09IDk2KSB7XG4gICAgICB0aGlzLmNicy5vbmVycihcbiAgICAgICAgMTgsXG4gICAgICAgIHRoaXMuaW5kZXhcbiAgICAgICk7XG4gICAgfSBlbHNlIDtcbiAgfVxuICBzdGF0ZUJlZm9yZURlY2xhcmF0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gOTEpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAyNjtcbiAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhdGUgPSBjID09PSA0NSA/IDI1IDogMjM7XG4gICAgfVxuICB9XG4gIHN0YXRlSW5EZWNsYXJhdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IDYyIHx8IHRoaXMuZmFzdEZvcndhcmRUbyg2MikpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAxO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9XG4gIH1cbiAgc3RhdGVJblByb2Nlc3NpbmdJbnN0cnVjdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IDYyIHx8IHRoaXMuZmFzdEZvcndhcmRUbyg2MikpIHtcbiAgICAgIHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgIHRoaXMuc3RhdGUgPSAxO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9XG4gIH1cbiAgc3RhdGVCZWZvcmVDb21tZW50KGMpIHtcbiAgICBpZiAoYyA9PT0gNDUpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSAyODtcbiAgICAgIHRoaXMuY3VycmVudFNlcXVlbmNlID0gU2VxdWVuY2VzLkNvbW1lbnRFbmQ7XG4gICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAyO1xuICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZSA9IDIzO1xuICAgIH1cbiAgfVxuICBzdGF0ZUluU3BlY2lhbENvbW1lbnQoYykge1xuICAgIGlmIChjID09PSA2MiB8fCB0aGlzLmZhc3RGb3J3YXJkVG8oNjIpKSB7XG4gICAgICB0aGlzLmNicy5vbmNvbW1lbnQodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgdGhpcy5zdGF0ZSA9IDE7XG4gICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgIH1cbiAgfVxuICBzdGF0ZUJlZm9yZVNwZWNpYWxTKGMpIHtcbiAgICBpZiAoYyA9PT0gU2VxdWVuY2VzLlNjcmlwdEVuZFszXSkge1xuICAgICAgdGhpcy5zdGFydFNwZWNpYWwoU2VxdWVuY2VzLlNjcmlwdEVuZCwgNCk7XG4gICAgfSBlbHNlIGlmIChjID09PSBTZXF1ZW5jZXMuU3R5bGVFbmRbM10pIHtcbiAgICAgIHRoaXMuc3RhcnRTcGVjaWFsKFNlcXVlbmNlcy5TdHlsZUVuZCwgNCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhdGUgPSA2O1xuICAgICAgdGhpcy5zdGF0ZUluVGFnTmFtZShjKTtcbiAgICB9XG4gIH1cbiAgc3RhdGVCZWZvcmVTcGVjaWFsVChjKSB7XG4gICAgaWYgKGMgPT09IFNlcXVlbmNlcy5UaXRsZUVuZFszXSkge1xuICAgICAgdGhpcy5zdGFydFNwZWNpYWwoU2VxdWVuY2VzLlRpdGxlRW5kLCA0KTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFNlcXVlbmNlcy5UZXh0YXJlYUVuZFszXSkge1xuICAgICAgdGhpcy5zdGFydFNwZWNpYWwoU2VxdWVuY2VzLlRleHRhcmVhRW5kLCA0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGF0ZSA9IDY7XG4gICAgICB0aGlzLnN0YXRlSW5UYWdOYW1lKGMpO1xuICAgIH1cbiAgfVxuICBzdGFydEVudGl0eSgpIHtcbiAgfVxuICBzdGF0ZUluRW50aXR5KCkge1xuICB9XG4gIC8qKlxuICAgKiBJdGVyYXRlcyB0aHJvdWdoIHRoZSBidWZmZXIsIGNhbGxpbmcgdGhlIGZ1bmN0aW9uIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGN1cnJlbnQgc3RhdGUuXG4gICAqXG4gICAqIFN0YXRlcyB0aGF0IGFyZSBtb3JlIGxpa2VseSB0byBiZSBoaXQgYXJlIGhpZ2hlciB1cCwgYXMgYSBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudC5cbiAgICovXG4gIHBhcnNlKGlucHV0KSB7XG4gICAgdGhpcy5idWZmZXIgPSBpbnB1dDtcbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgY29uc3QgYyA9IHRoaXMuYnVmZmVyLmNoYXJDb2RlQXQodGhpcy5pbmRleCk7XG4gICAgICBpZiAoYyA9PT0gMTApIHtcbiAgICAgICAgdGhpcy5uZXdsaW5lcy5wdXNoKHRoaXMuaW5kZXgpO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICAgIGNhc2UgMToge1xuICAgICAgICAgIHRoaXMuc3RhdGVUZXh0KGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjoge1xuICAgICAgICAgIHRoaXMuc3RhdGVJbnRlcnBvbGF0aW9uT3BlbihjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDM6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlSW50ZXJwb2xhdGlvbihjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDQ6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlSW50ZXJwb2xhdGlvbkNsb3NlKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzE6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlU3BlY2lhbFN0YXJ0U2VxdWVuY2UoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjoge1xuICAgICAgICAgIHRoaXMuc3RhdGVJblJDREFUQShjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI2OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUNEQVRBU2VxdWVuY2UoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxOToge1xuICAgICAgICAgIHRoaXMuc3RhdGVJbkF0dHJWYWx1ZURvdWJsZVF1b3RlcyhjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDEyOiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluQXR0ck5hbWUoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxMzoge1xuICAgICAgICAgIHRoaXMuc3RhdGVJbkRpck5hbWUoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxNDoge1xuICAgICAgICAgIHRoaXMuc3RhdGVJbkRpckFyZyhjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE1OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluRHluYW1pY0RpckFyZyhjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE2OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluRGlyTW9kaWZpZXIoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAyODoge1xuICAgICAgICAgIHRoaXMuc3RhdGVJbkNvbW1lbnRMaWtlKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjc6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlSW5TcGVjaWFsQ29tbWVudChjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDExOiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZUF0dHJOYW1lKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgNjoge1xuICAgICAgICAgIHRoaXMuc3RhdGVJblRhZ05hbWUoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzNDoge1xuICAgICAgICAgIHRoaXMuc3RhdGVJblNGQ1Jvb3RUYWdOYW1lKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgOToge1xuICAgICAgICAgIHRoaXMuc3RhdGVJbkNsb3NpbmdUYWdOYW1lKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgNToge1xuICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVUYWdOYW1lKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTc6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlQWZ0ZXJBdHRyTmFtZShjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDIwOiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluQXR0clZhbHVlU2luZ2xlUXVvdGVzKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQXR0clZhbHVlKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgODoge1xuICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVDbG9zaW5nVGFnTmFtZShjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDEwOiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUFmdGVyQ2xvc2luZ1RhZ05hbWUoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAyOToge1xuICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVTcGVjaWFsUyhjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMwOiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZVNwZWNpYWxUKGMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjE6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlSW5BdHRyVmFsdWVOb1F1b3RlcyhjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDc6IHtcbiAgICAgICAgICB0aGlzLnN0YXRlSW5TZWxmQ2xvc2luZ1RhZyhjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDIzOiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluRGVjbGFyYXRpb24oYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAyMjoge1xuICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVEZWNsYXJhdGlvbihjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDI1OiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZUNvbW1lbnQoYyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAyNDoge1xuICAgICAgICAgIHRoaXMuc3RhdGVJblByb2Nlc3NpbmdJbnN0cnVjdGlvbihjKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDMzOiB7XG4gICAgICAgICAgdGhpcy5zdGF0ZUluRW50aXR5KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXgrKztcbiAgICB9XG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgdGhpcy5maW5pc2goKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGRhdGEgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGNvbnN1bWVkIGZyb20gdGhlIGJ1ZmZlci5cbiAgICovXG4gIGNsZWFudXAoKSB7XG4gICAgaWYgKHRoaXMuc2VjdGlvblN0YXJ0ICE9PSB0aGlzLmluZGV4KSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gMSB8fCB0aGlzLnN0YXRlID09PSAzMiAmJiB0aGlzLnNlcXVlbmNlSW5kZXggPT09IDApIHtcbiAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09PSAxOSB8fCB0aGlzLnN0YXRlID09PSAyMCB8fCB0aGlzLnN0YXRlID09PSAyMSkge1xuICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmRhdGEodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZpbmlzaCgpIHtcbiAgICB0aGlzLmhhbmRsZVRyYWlsaW5nRGF0YSgpO1xuICAgIHRoaXMuY2JzLm9uZW5kKCk7XG4gIH1cbiAgLyoqIEhhbmRsZSBhbnkgdHJhaWxpbmcgZGF0YS4gKi9cbiAgaGFuZGxlVHJhaWxpbmdEYXRhKCkge1xuICAgIGNvbnN0IGVuZEluZGV4ID0gdGhpcy5idWZmZXIubGVuZ3RoO1xuICAgIGlmICh0aGlzLnNlY3Rpb25TdGFydCA+PSBlbmRJbmRleCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gMjgpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9PT0gU2VxdWVuY2VzLkNkYXRhRW5kKSB7XG4gICAgICAgIHRoaXMuY2JzLm9uY2RhdGEodGhpcy5zZWN0aW9uU3RhcnQsIGVuZEluZGV4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2JzLm9uY29tbWVudCh0aGlzLnNlY3Rpb25TdGFydCwgZW5kSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gNiB8fCB0aGlzLnN0YXRlID09PSAxMSB8fCB0aGlzLnN0YXRlID09PSAxOCB8fCB0aGlzLnN0YXRlID09PSAxNyB8fCB0aGlzLnN0YXRlID09PSAxMiB8fCB0aGlzLnN0YXRlID09PSAxMyB8fCB0aGlzLnN0YXRlID09PSAxNCB8fCB0aGlzLnN0YXRlID09PSAxNSB8fCB0aGlzLnN0YXRlID09PSAxNiB8fCB0aGlzLnN0YXRlID09PSAyMCB8fCB0aGlzLnN0YXRlID09PSAxOSB8fCB0aGlzLnN0YXRlID09PSAyMSB8fCB0aGlzLnN0YXRlID09PSA5KSA7IGVsc2Uge1xuICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuc2VjdGlvblN0YXJ0LCBlbmRJbmRleCk7XG4gICAgfVxuICB9XG4gIGVtaXRDb2RlUG9pbnQoY3AsIGNvbnN1bWVkKSB7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdE9uRXJyb3IoZXJyb3IpIHtcbiAgdGhyb3cgZXJyb3I7XG59XG5mdW5jdGlvbiBkZWZhdWx0T25XYXJuKG1zZykge1xuICBjb25zb2xlLndhcm4oYFtWdWUgd2Fybl0gJHttc2cubWVzc2FnZX1gKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyRXJyb3IoY29kZSwgbG9jLCBtZXNzYWdlcywgYWRkaXRpb25hbE1lc3NhZ2UpIHtcbiAgY29uc3QgbXNnID0gKG1lc3NhZ2VzIHx8IGVycm9yTWVzc2FnZXMpW2NvZGVdICsgKGFkZGl0aW9uYWxNZXNzYWdlIHx8IGBgKSA7XG4gIGNvbnN0IGVycm9yID0gbmV3IFN5bnRheEVycm9yKFN0cmluZyhtc2cpKTtcbiAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIGVycm9yLmxvYyA9IGxvYztcbiAgcmV0dXJuIGVycm9yO1xufVxuY29uc3QgZXJyb3JNZXNzYWdlcyA9IHtcbiAgLy8gcGFyc2UgZXJyb3JzXG4gIFswXTogXCJJbGxlZ2FsIGNvbW1lbnQuXCIsXG4gIFsxXTogXCJDREFUQSBzZWN0aW9uIGlzIGFsbG93ZWQgb25seSBpbiBYTUwgY29udGV4dC5cIixcbiAgWzJdOiBcIkR1cGxpY2F0ZSBhdHRyaWJ1dGUuXCIsXG4gIFszXTogXCJFbmQgdGFnIGNhbm5vdCBoYXZlIGF0dHJpYnV0ZXMuXCIsXG4gIFs0XTogXCJJbGxlZ2FsICcvJyBpbiB0YWdzLlwiLFxuICBbNV06IFwiVW5leHBlY3RlZCBFT0YgaW4gdGFnLlwiLFxuICBbNl06IFwiVW5leHBlY3RlZCBFT0YgaW4gQ0RBVEEgc2VjdGlvbi5cIixcbiAgWzddOiBcIlVuZXhwZWN0ZWQgRU9GIGluIGNvbW1lbnQuXCIsXG4gIFs4XTogXCJVbmV4cGVjdGVkIEVPRiBpbiBzY3JpcHQuXCIsXG4gIFs5XTogXCJVbmV4cGVjdGVkIEVPRiBpbiB0YWcuXCIsXG4gIFsxMF06IFwiSW5jb3JyZWN0bHkgY2xvc2VkIGNvbW1lbnQuXCIsXG4gIFsxMV06IFwiSW5jb3JyZWN0bHkgb3BlbmVkIGNvbW1lbnQuXCIsXG4gIFsxMl06IFwiSWxsZWdhbCB0YWcgbmFtZS4gVXNlICcmbHQ7JyB0byBwcmludCAnPCcuXCIsXG4gIFsxM106IFwiQXR0cmlidXRlIHZhbHVlIHdhcyBleHBlY3RlZC5cIixcbiAgWzE0XTogXCJFbmQgdGFnIG5hbWUgd2FzIGV4cGVjdGVkLlwiLFxuICBbMTVdOiBcIldoaXRlc3BhY2Ugd2FzIGV4cGVjdGVkLlwiLFxuICBbMTZdOiBcIlVuZXhwZWN0ZWQgJzwhLS0nIGluIGNvbW1lbnQuXCIsXG4gIFsxN106IGBBdHRyaWJ1dGUgbmFtZSBjYW5ub3QgY29udGFpbiBVKzAwMjIgKFwiKSwgVSswMDI3ICgnKSwgYW5kIFUrMDAzQyAoPCkuYCxcbiAgWzE4XTogXCJVbnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUgY2Fubm90IGNvbnRhaW4gVSswMDIyIChcXFwiKSwgVSswMDI3ICgnKSwgVSswMDNDICg8KSwgVSswMDNEICg9KSwgYW5kIFUrMDA2MCAoYCkuXCIsXG4gIFsxOV06IFwiQXR0cmlidXRlIG5hbWUgY2Fubm90IHN0YXJ0IHdpdGggJz0nLlwiLFxuICBbMjFdOiBcIic8PycgaXMgYWxsb3dlZCBvbmx5IGluIFhNTCBjb250ZXh0LlwiLFxuICBbMjBdOiBgVW5leHBlY3RlZCBudWxsIGNoYXJhY3Rlci5gLFxuICBbMjJdOiBcIklsbGVnYWwgJy8nIGluIHRhZ3MuXCIsXG4gIC8vIFZ1ZS1zcGVjaWZpYyBwYXJzZSBlcnJvcnNcbiAgWzIzXTogXCJJbnZhbGlkIGVuZCB0YWcuXCIsXG4gIFsyNF06IFwiRWxlbWVudCBpcyBtaXNzaW5nIGVuZCB0YWcuXCIsXG4gIFsyNV06IFwiSW50ZXJwb2xhdGlvbiBlbmQgc2lnbiB3YXMgbm90IGZvdW5kLlwiLFxuICBbMjddOiBcIkVuZCBicmFja2V0IGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCB3YXMgbm90IGZvdW5kLiBOb3RlIHRoYXQgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgY2Fubm90IGNvbnRhaW4gc3BhY2VzLlwiLFxuICBbMjZdOiBcIkxlZ2FsIGRpcmVjdGl2ZSBuYW1lIHdhcyBleHBlY3RlZC5cIixcbiAgLy8gdHJhbnNmb3JtIGVycm9yc1xuICBbMjhdOiBgdi1pZi92LWVsc2UtaWYgaXMgbWlzc2luZyBleHByZXNzaW9uLmAsXG4gIFsyOV06IGB2LWlmL2Vsc2UgYnJhbmNoZXMgbXVzdCB1c2UgdW5pcXVlIGtleXMuYCxcbiAgWzMwXTogYHYtZWxzZS92LWVsc2UtaWYgaGFzIG5vIGFkamFjZW50IHYtaWYgb3Igdi1lbHNlLWlmLmAsXG4gIFszMV06IGB2LWZvciBpcyBtaXNzaW5nIGV4cHJlc3Npb24uYCxcbiAgWzMyXTogYHYtZm9yIGhhcyBpbnZhbGlkIGV4cHJlc3Npb24uYCxcbiAgWzMzXTogYDx0ZW1wbGF0ZSB2LWZvcj4ga2V5IHNob3VsZCBiZSBwbGFjZWQgb24gdGhlIDx0ZW1wbGF0ZT4gdGFnLmAsXG4gIFszNF06IGB2LWJpbmQgaXMgbWlzc2luZyBleHByZXNzaW9uLmAsXG4gIFs1Ml06IGB2LWJpbmQgd2l0aCBzYW1lLW5hbWUgc2hvcnRoYW5kIG9ubHkgYWxsb3dzIHN0YXRpYyBhcmd1bWVudC5gLFxuICBbMzVdOiBgdi1vbiBpcyBtaXNzaW5nIGV4cHJlc3Npb24uYCxcbiAgWzM2XTogYFVuZXhwZWN0ZWQgY3VzdG9tIGRpcmVjdGl2ZSBvbiA8c2xvdD4gb3V0bGV0LmAsXG4gIFszN106IGBNaXhlZCB2LXNsb3QgdXNhZ2Ugb24gYm90aCB0aGUgY29tcG9uZW50IGFuZCBuZXN0ZWQgPHRlbXBsYXRlPi4gV2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgbmFtZWQgc2xvdHMsIGFsbCBzbG90cyBzaG91bGQgdXNlIDx0ZW1wbGF0ZT4gc3ludGF4IHRvIGF2b2lkIHNjb3BlIGFtYmlndWl0eS5gLFxuICBbMzhdOiBgRHVwbGljYXRlIHNsb3QgbmFtZXMgZm91bmQuIGAsXG4gIFszOV06IGBFeHRyYW5lb3VzIGNoaWxkcmVuIGZvdW5kIHdoZW4gY29tcG9uZW50IGFscmVhZHkgaGFzIGV4cGxpY2l0bHkgbmFtZWQgZGVmYXVsdCBzbG90LiBUaGVzZSBjaGlsZHJlbiB3aWxsIGJlIGlnbm9yZWQuYCxcbiAgWzQwXTogYHYtc2xvdCBjYW4gb25seSBiZSB1c2VkIG9uIGNvbXBvbmVudHMgb3IgPHRlbXBsYXRlPiB0YWdzLmAsXG4gIFs0MV06IGB2LW1vZGVsIGlzIG1pc3NpbmcgZXhwcmVzc2lvbi5gLFxuICBbNDJdOiBgdi1tb2RlbCB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgSmF2YVNjcmlwdCBtZW1iZXIgZXhwcmVzc2lvbi5gLFxuICBbNDNdOiBgdi1tb2RlbCBjYW5ub3QgYmUgdXNlZCBvbiB2LWZvciBvciB2LXNsb3Qgc2NvcGUgdmFyaWFibGVzIGJlY2F1c2UgdGhleSBhcmUgbm90IHdyaXRhYmxlLmAsXG4gIFs0NF06IGB2LW1vZGVsIGNhbm5vdCBiZSB1c2VkIG9uIGEgcHJvcCwgYmVjYXVzZSBsb2NhbCBwcm9wIGJpbmRpbmdzIGFyZSBub3Qgd3JpdGFibGUuXG5Vc2UgYSB2LWJpbmQgYmluZGluZyBjb21iaW5lZCB3aXRoIGEgdi1vbiBsaXN0ZW5lciB0aGF0IGVtaXRzIHVwZGF0ZTp4IGV2ZW50IGluc3RlYWQuYCxcbiAgWzQ1XTogYEVycm9yIHBhcnNpbmcgSmF2YVNjcmlwdCBleHByZXNzaW9uOiBgLFxuICBbNDZdOiBgPEtlZXBBbGl2ZT4gZXhwZWN0cyBleGFjdGx5IG9uZSBjaGlsZCBjb21wb25lbnQuYCxcbiAgWzUxXTogYEB2bm9kZS0qIGhvb2tzIGluIHRlbXBsYXRlcyBhcmUgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gVXNlIHRoZSB2dWU6IHByZWZpeCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgQHZub2RlLW1vdW50ZWQgc2hvdWxkIGJlIGNoYW5nZWQgdG8gQHZ1ZTptb3VudGVkLiBAdm5vZGUtKiBob29rcyBzdXBwb3J0IGhhcyBiZWVuIHJlbW92ZWQgaW4gMy40LmAsXG4gIC8vIGdlbmVyaWMgZXJyb3JzXG4gIFs0N106IGBcInByZWZpeElkZW50aWZpZXJzXCIgb3B0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBidWlsZCBvZiBjb21waWxlci5gLFxuICBbNDhdOiBgRVMgbW9kdWxlIG1vZGUgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJ1aWxkIG9mIGNvbXBpbGVyLmAsXG4gIFs0OV06IGBcImNhY2hlSGFuZGxlcnNcIiBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgd2hlbiB0aGUgXCJwcmVmaXhJZGVudGlmaWVyc1wiIG9wdGlvbiBpcyBlbmFibGVkLmAsXG4gIFs1MF06IGBcInNjb3BlSWRcIiBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgaW4gbW9kdWxlIG1vZGUuYCxcbiAgLy8ganVzdCB0byBmdWxmaWxsIHR5cGVzXG4gIFs1M106IGBgXG59O1xuXG5jb25zdCBpc1N0YXRpY0V4cCA9IChwKSA9PiBwLnR5cGUgPT09IDQgJiYgcC5pc1N0YXRpYztcbmZ1bmN0aW9uIGlzQ29yZUNvbXBvbmVudCh0YWcpIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIFwiVGVsZXBvcnRcIjpcbiAgICBjYXNlIFwidGVsZXBvcnRcIjpcbiAgICAgIHJldHVybiBURUxFUE9SVDtcbiAgICBjYXNlIFwiU3VzcGVuc2VcIjpcbiAgICBjYXNlIFwic3VzcGVuc2VcIjpcbiAgICAgIHJldHVybiBTVVNQRU5TRTtcbiAgICBjYXNlIFwiS2VlcEFsaXZlXCI6XG4gICAgY2FzZSBcImtlZXAtYWxpdmVcIjpcbiAgICAgIHJldHVybiBLRUVQX0FMSVZFO1xuICAgIGNhc2UgXCJCYXNlVHJhbnNpdGlvblwiOlxuICAgIGNhc2UgXCJiYXNlLXRyYW5zaXRpb25cIjpcbiAgICAgIHJldHVybiBCQVNFX1RSQU5TSVRJT047XG4gIH1cbn1cbmNvbnN0IG5vbklkZW50aWZpZXJSRSA9IC9eXFxkfFteXFwkXFx3XFx4QTAtXFx1RkZGRl0vO1xuY29uc3QgaXNTaW1wbGVJZGVudGlmaWVyID0gKG5hbWUpID0+ICFub25JZGVudGlmaWVyUkUudGVzdChuYW1lKTtcbmNvbnN0IHZhbGlkRmlyc3RJZGVudENoYXJSRSA9IC9bQS1aYS16XyRcXHhBMC1cXHVGRkZGXS87XG5jb25zdCB2YWxpZElkZW50Q2hhclJFID0gL1tcXC5cXD9cXHckXFx4QTAtXFx1RkZGRl0vO1xuY29uc3Qgd2hpdGVzcGFjZVJFID0gL1xccytbLltdXFxzKnxcXHMqWy5bXVxccysvZztcbmNvbnN0IGdldEV4cFNvdXJjZSA9IChleHApID0+IGV4cC50eXBlID09PSA0ID8gZXhwLmNvbnRlbnQgOiBleHAubG9jLnNvdXJjZTtcbmNvbnN0IGlzTWVtYmVyRXhwcmVzc2lvbkJyb3dzZXIgPSAoZXhwKSA9PiB7XG4gIGNvbnN0IHBhdGggPSBnZXRFeHBTb3VyY2UoZXhwKS50cmltKCkucmVwbGFjZSh3aGl0ZXNwYWNlUkUsIChzKSA9PiBzLnRyaW0oKSk7XG4gIGxldCBzdGF0ZSA9IDAgLyogaW5NZW1iZXJFeHAgKi87XG4gIGxldCBzdGF0ZVN0YWNrID0gW107XG4gIGxldCBjdXJyZW50T3BlbkJyYWNrZXRDb3VudCA9IDA7XG4gIGxldCBjdXJyZW50T3BlblBhcmVuc0NvdW50ID0gMDtcbiAgbGV0IGN1cnJlbnRTdHJpbmdUeXBlID0gbnVsbDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hhciA9IHBhdGguY2hhckF0KGkpO1xuICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgIGNhc2UgMCAvKiBpbk1lbWJlckV4cCAqLzpcbiAgICAgICAgaWYgKGNoYXIgPT09IFwiW1wiKSB7XG4gICAgICAgICAgc3RhdGVTdGFjay5wdXNoKHN0YXRlKTtcbiAgICAgICAgICBzdGF0ZSA9IDEgLyogaW5CcmFja2V0cyAqLztcbiAgICAgICAgICBjdXJyZW50T3BlbkJyYWNrZXRDb3VudCsrO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT09IFwiKFwiKSB7XG4gICAgICAgICAgc3RhdGVTdGFjay5wdXNoKHN0YXRlKTtcbiAgICAgICAgICBzdGF0ZSA9IDIgLyogaW5QYXJlbnMgKi87XG4gICAgICAgICAgY3VycmVudE9wZW5QYXJlbnNDb3VudCsrO1xuICAgICAgICB9IGVsc2UgaWYgKCEoaSA9PT0gMCA/IHZhbGlkRmlyc3RJZGVudENoYXJSRSA6IHZhbGlkSWRlbnRDaGFyUkUpLnRlc3QoY2hhcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEgLyogaW5CcmFja2V0cyAqLzpcbiAgICAgICAgaWYgKGNoYXIgPT09IGAnYCB8fCBjaGFyID09PSBgXCJgIHx8IGNoYXIgPT09IFwiYFwiKSB7XG4gICAgICAgICAgc3RhdGVTdGFjay5wdXNoKHN0YXRlKTtcbiAgICAgICAgICBzdGF0ZSA9IDMgLyogaW5TdHJpbmcgKi87XG4gICAgICAgICAgY3VycmVudFN0cmluZ1R5cGUgPSBjaGFyO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT09IGBbYCkge1xuICAgICAgICAgIGN1cnJlbnRPcGVuQnJhY2tldENvdW50Kys7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gYF1gKSB7XG4gICAgICAgICAgaWYgKCEtLWN1cnJlbnRPcGVuQnJhY2tldENvdW50KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IHN0YXRlU3RhY2sucG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyIC8qIGluUGFyZW5zICovOlxuICAgICAgICBpZiAoY2hhciA9PT0gYCdgIHx8IGNoYXIgPT09IGBcImAgfHwgY2hhciA9PT0gXCJgXCIpIHtcbiAgICAgICAgICBzdGF0ZVN0YWNrLnB1c2goc3RhdGUpO1xuICAgICAgICAgIHN0YXRlID0gMyAvKiBpblN0cmluZyAqLztcbiAgICAgICAgICBjdXJyZW50U3RyaW5nVHlwZSA9IGNoYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhciA9PT0gYChgKSB7XG4gICAgICAgICAgY3VycmVudE9wZW5QYXJlbnNDb3VudCsrO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT09IGApYCkge1xuICAgICAgICAgIGlmIChpID09PSBwYXRoLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEtLWN1cnJlbnRPcGVuUGFyZW5zQ291bnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gc3RhdGVTdGFjay5wb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDMgLyogaW5TdHJpbmcgKi86XG4gICAgICAgIGlmIChjaGFyID09PSBjdXJyZW50U3RyaW5nVHlwZSkge1xuICAgICAgICAgIHN0YXRlID0gc3RhdGVTdGFjay5wb3AoKTtcbiAgICAgICAgICBjdXJyZW50U3RyaW5nVHlwZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiAhY3VycmVudE9wZW5CcmFja2V0Q291bnQgJiYgIWN1cnJlbnRPcGVuUGFyZW5zQ291bnQ7XG59O1xuY29uc3QgaXNNZW1iZXJFeHByZXNzaW9uID0gaXNNZW1iZXJFeHByZXNzaW9uQnJvd3NlciA7XG5jb25zdCBmbkV4cFJFID0gL15cXHMqKGFzeW5jXFxzKik/KFxcKFteKV0qP1xcKXxbXFx3JF9dKylcXHMqKDpbXj1dKyk/PT58XlxccyooYXN5bmNcXHMrKT9mdW5jdGlvbig/OlxccytbXFx3JF0rKT9cXHMqXFwoLztcbmNvbnN0IGlzRm5FeHByZXNzaW9uQnJvd3NlciA9IChleHApID0+IGZuRXhwUkUudGVzdChnZXRFeHBTb3VyY2UoZXhwKSk7XG5jb25zdCBpc0ZuRXhwcmVzc2lvbiA9IGlzRm5FeHByZXNzaW9uQnJvd3NlciA7XG5mdW5jdGlvbiBhc3NlcnQoY29uZGl0aW9uLCBtc2cpIHtcbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnIHx8IGB1bmV4cGVjdGVkIGNvbXBpbGVyIGNvbmRpdGlvbmApO1xuICB9XG59XG5mdW5jdGlvbiBmaW5kRGlyKG5vZGUsIG5hbWUsIGFsbG93RW1wdHkgPSBmYWxzZSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUucHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwID0gbm9kZS5wcm9wc1tpXTtcbiAgICBpZiAocC50eXBlID09PSA3ICYmIChhbGxvd0VtcHR5IHx8IHAuZXhwKSAmJiAoaXNTdHJpbmcobmFtZSkgPyBwLm5hbWUgPT09IG5hbWUgOiBuYW1lLnRlc3QocC5uYW1lKSkpIHtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZmluZFByb3Aobm9kZSwgbmFtZSwgZHluYW1pY09ubHkgPSBmYWxzZSwgYWxsb3dFbXB0eSA9IGZhbHNlKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5wcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHAgPSBub2RlLnByb3BzW2ldO1xuICAgIGlmIChwLnR5cGUgPT09IDYpIHtcbiAgICAgIGlmIChkeW5hbWljT25seSkgY29udGludWU7XG4gICAgICBpZiAocC5uYW1lID09PSBuYW1lICYmIChwLnZhbHVlIHx8IGFsbG93RW1wdHkpKSB7XG4gICAgICAgIHJldHVybiBwO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocC5uYW1lID09PSBcImJpbmRcIiAmJiAocC5leHAgfHwgYWxsb3dFbXB0eSkgJiYgaXNTdGF0aWNBcmdPZihwLmFyZywgbmFtZSkpIHtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gaXNTdGF0aWNBcmdPZihhcmcsIG5hbWUpIHtcbiAgcmV0dXJuICEhKGFyZyAmJiBpc1N0YXRpY0V4cChhcmcpICYmIGFyZy5jb250ZW50ID09PSBuYW1lKTtcbn1cbmZ1bmN0aW9uIGhhc0R5bmFtaWNLZXlWQmluZChub2RlKSB7XG4gIHJldHVybiBub2RlLnByb3BzLnNvbWUoXG4gICAgKHApID0+IHAudHlwZSA9PT0gNyAmJiBwLm5hbWUgPT09IFwiYmluZFwiICYmICghcC5hcmcgfHwgLy8gdi1iaW5kPVwib2JqXCJcbiAgICBwLmFyZy50eXBlICE9PSA0IHx8IC8vIHYtYmluZDpbX2N0eC5mb29dXG4gICAgIXAuYXJnLmlzU3RhdGljKVxuICAgIC8vIHYtYmluZDpbZm9vXVxuICApO1xufVxuZnVuY3Rpb24gaXNUZXh0JDEobm9kZSkge1xuICByZXR1cm4gbm9kZS50eXBlID09PSA1IHx8IG5vZGUudHlwZSA9PT0gMjtcbn1cbmZ1bmN0aW9uIGlzVlNsb3QocCkge1xuICByZXR1cm4gcC50eXBlID09PSA3ICYmIHAubmFtZSA9PT0gXCJzbG90XCI7XG59XG5mdW5jdGlvbiBpc1RlbXBsYXRlTm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlLnR5cGUgPT09IDEgJiYgbm9kZS50YWdUeXBlID09PSAzO1xufVxuZnVuY3Rpb24gaXNTbG90T3V0bGV0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudHlwZSA9PT0gMSAmJiBub2RlLnRhZ1R5cGUgPT09IDI7XG59XG5jb25zdCBwcm9wc0hlbHBlclNldCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtOT1JNQUxJWkVfUFJPUFMsIEdVQVJEX1JFQUNUSVZFX1BST1BTXSk7XG5mdW5jdGlvbiBnZXRVbm5vcm1hbGl6ZWRQcm9wcyhwcm9wcywgY2FsbFBhdGggPSBbXSkge1xuICBpZiAocHJvcHMgJiYgIWlzU3RyaW5nKHByb3BzKSAmJiBwcm9wcy50eXBlID09PSAxNCkge1xuICAgIGNvbnN0IGNhbGxlZSA9IHByb3BzLmNhbGxlZTtcbiAgICBpZiAoIWlzU3RyaW5nKGNhbGxlZSkgJiYgcHJvcHNIZWxwZXJTZXQuaGFzKGNhbGxlZSkpIHtcbiAgICAgIHJldHVybiBnZXRVbm5vcm1hbGl6ZWRQcm9wcyhcbiAgICAgICAgcHJvcHMuYXJndW1lbnRzWzBdLFxuICAgICAgICBjYWxsUGF0aC5jb25jYXQocHJvcHMpXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW3Byb3BzLCBjYWxsUGF0aF07XG59XG5mdW5jdGlvbiBpbmplY3RQcm9wKG5vZGUsIHByb3AsIGNvbnRleHQpIHtcbiAgbGV0IHByb3BzV2l0aEluamVjdGlvbjtcbiAgbGV0IHByb3BzID0gbm9kZS50eXBlID09PSAxMyA/IG5vZGUucHJvcHMgOiBub2RlLmFyZ3VtZW50c1syXTtcbiAgbGV0IGNhbGxQYXRoID0gW107XG4gIGxldCBwYXJlbnRDYWxsO1xuICBpZiAocHJvcHMgJiYgIWlzU3RyaW5nKHByb3BzKSAmJiBwcm9wcy50eXBlID09PSAxNCkge1xuICAgIGNvbnN0IHJldCA9IGdldFVubm9ybWFsaXplZFByb3BzKHByb3BzKTtcbiAgICBwcm9wcyA9IHJldFswXTtcbiAgICBjYWxsUGF0aCA9IHJldFsxXTtcbiAgICBwYXJlbnRDYWxsID0gY2FsbFBhdGhbY2FsbFBhdGgubGVuZ3RoIC0gMV07XG4gIH1cbiAgaWYgKHByb3BzID09IG51bGwgfHwgaXNTdHJpbmcocHJvcHMpKSB7XG4gICAgcHJvcHNXaXRoSW5qZWN0aW9uID0gY3JlYXRlT2JqZWN0RXhwcmVzc2lvbihbcHJvcF0pO1xuICB9IGVsc2UgaWYgKHByb3BzLnR5cGUgPT09IDE0KSB7XG4gICAgY29uc3QgZmlyc3QgPSBwcm9wcy5hcmd1bWVudHNbMF07XG4gICAgaWYgKCFpc1N0cmluZyhmaXJzdCkgJiYgZmlyc3QudHlwZSA9PT0gMTUpIHtcbiAgICAgIGlmICghaGFzUHJvcChwcm9wLCBmaXJzdCkpIHtcbiAgICAgICAgZmlyc3QucHJvcGVydGllcy51bnNoaWZ0KHByb3ApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMuY2FsbGVlID09PSBUT19IQU5ETEVSUykge1xuICAgICAgICBwcm9wc1dpdGhJbmplY3Rpb24gPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihjb250ZXh0LmhlbHBlcihNRVJHRV9QUk9QUyksIFtcbiAgICAgICAgICBjcmVhdGVPYmplY3RFeHByZXNzaW9uKFtwcm9wXSksXG4gICAgICAgICAgcHJvcHNcbiAgICAgICAgXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wcy5hcmd1bWVudHMudW5zaGlmdChjcmVhdGVPYmplY3RFeHByZXNzaW9uKFtwcm9wXSkpO1xuICAgICAgfVxuICAgIH1cbiAgICAhcHJvcHNXaXRoSW5qZWN0aW9uICYmIChwcm9wc1dpdGhJbmplY3Rpb24gPSBwcm9wcyk7XG4gIH0gZWxzZSBpZiAocHJvcHMudHlwZSA9PT0gMTUpIHtcbiAgICBpZiAoIWhhc1Byb3AocHJvcCwgcHJvcHMpKSB7XG4gICAgICBwcm9wcy5wcm9wZXJ0aWVzLnVuc2hpZnQocHJvcCk7XG4gICAgfVxuICAgIHByb3BzV2l0aEluamVjdGlvbiA9IHByb3BzO1xuICB9IGVsc2Uge1xuICAgIHByb3BzV2l0aEluamVjdGlvbiA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKE1FUkdFX1BST1BTKSwgW1xuICAgICAgY3JlYXRlT2JqZWN0RXhwcmVzc2lvbihbcHJvcF0pLFxuICAgICAgcHJvcHNcbiAgICBdKTtcbiAgICBpZiAocGFyZW50Q2FsbCAmJiBwYXJlbnRDYWxsLmNhbGxlZSA9PT0gR1VBUkRfUkVBQ1RJVkVfUFJPUFMpIHtcbiAgICAgIHBhcmVudENhbGwgPSBjYWxsUGF0aFtjYWxsUGF0aC5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH1cbiAgaWYgKG5vZGUudHlwZSA9PT0gMTMpIHtcbiAgICBpZiAocGFyZW50Q2FsbCkge1xuICAgICAgcGFyZW50Q2FsbC5hcmd1bWVudHNbMF0gPSBwcm9wc1dpdGhJbmplY3Rpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUucHJvcHMgPSBwcm9wc1dpdGhJbmplY3Rpb247XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChwYXJlbnRDYWxsKSB7XG4gICAgICBwYXJlbnRDYWxsLmFyZ3VtZW50c1swXSA9IHByb3BzV2l0aEluamVjdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5hcmd1bWVudHNbMl0gPSBwcm9wc1dpdGhJbmplY3Rpb247XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBoYXNQcm9wKHByb3AsIHByb3BzKSB7XG4gIGxldCByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHByb3Aua2V5LnR5cGUgPT09IDQpIHtcbiAgICBjb25zdCBwcm9wS2V5TmFtZSA9IHByb3Aua2V5LmNvbnRlbnQ7XG4gICAgcmVzdWx0ID0gcHJvcHMucHJvcGVydGllcy5zb21lKFxuICAgICAgKHApID0+IHAua2V5LnR5cGUgPT09IDQgJiYgcC5rZXkuY29udGVudCA9PT0gcHJvcEtleU5hbWVcbiAgICApO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiB0b1ZhbGlkQXNzZXRJZChuYW1lLCB0eXBlKSB7XG4gIHJldHVybiBgXyR7dHlwZX1fJHtuYW1lLnJlcGxhY2UoL1teXFx3XS9nLCAoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkgPT4ge1xuICAgIHJldHVybiBzZWFyY2hWYWx1ZSA9PT0gXCItXCIgPyBcIl9cIiA6IG5hbWUuY2hhckNvZGVBdChyZXBsYWNlVmFsdWUpLnRvU3RyaW5nKCk7XG4gIH0pfWA7XG59XG5mdW5jdGlvbiBnZXRNZW1vZWRWTm9kZUNhbGwobm9kZSkge1xuICBpZiAobm9kZS50eXBlID09PSAxNCAmJiBub2RlLmNhbGxlZSA9PT0gV0lUSF9NRU1PKSB7XG4gICAgcmV0dXJuIG5vZGUuYXJndW1lbnRzWzFdLnJldHVybnM7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn1cbmNvbnN0IGZvckFsaWFzUkUgPSAvKFtcXHNcXFNdKj8pXFxzKyg/OmlufG9mKVxccysoXFxTW1xcc1xcU10qKS87XG5cbmNvbnN0IGRlZmF1bHRQYXJzZXJPcHRpb25zID0ge1xuICBwYXJzZU1vZGU6IFwiYmFzZVwiLFxuICBuczogMCxcbiAgZGVsaW1pdGVyczogW2B7e2AsIGB9fWBdLFxuICBnZXROYW1lc3BhY2U6ICgpID0+IDAsXG4gIGlzVm9pZFRhZzogTk8sXG4gIGlzUHJlVGFnOiBOTyxcbiAgaXNJZ25vcmVOZXdsaW5lVGFnOiBOTyxcbiAgaXNDdXN0b21FbGVtZW50OiBOTyxcbiAgb25FcnJvcjogZGVmYXVsdE9uRXJyb3IsXG4gIG9uV2FybjogZGVmYXVsdE9uV2FybixcbiAgY29tbWVudHM6IHRydWUsXG4gIHByZWZpeElkZW50aWZpZXJzOiBmYWxzZVxufTtcbmxldCBjdXJyZW50T3B0aW9ucyA9IGRlZmF1bHRQYXJzZXJPcHRpb25zO1xubGV0IGN1cnJlbnRSb290ID0gbnVsbDtcbmxldCBjdXJyZW50SW5wdXQgPSBcIlwiO1xubGV0IGN1cnJlbnRPcGVuVGFnID0gbnVsbDtcbmxldCBjdXJyZW50UHJvcCA9IG51bGw7XG5sZXQgY3VycmVudEF0dHJWYWx1ZSA9IFwiXCI7XG5sZXQgY3VycmVudEF0dHJTdGFydEluZGV4ID0gLTE7XG5sZXQgY3VycmVudEF0dHJFbmRJbmRleCA9IC0xO1xubGV0IGluUHJlID0gMDtcbmxldCBpblZQcmUgPSBmYWxzZTtcbmxldCBjdXJyZW50VlByZUJvdW5kYXJ5ID0gbnVsbDtcbmNvbnN0IHN0YWNrID0gW107XG5jb25zdCB0b2tlbml6ZXIgPSBuZXcgVG9rZW5pemVyKHN0YWNrLCB7XG4gIG9uZXJyOiBlbWl0RXJyb3IsXG4gIG9udGV4dChzdGFydCwgZW5kKSB7XG4gICAgb25UZXh0KGdldFNsaWNlKHN0YXJ0LCBlbmQpLCBzdGFydCwgZW5kKTtcbiAgfSxcbiAgb250ZXh0ZW50aXR5KGNoYXIsIHN0YXJ0LCBlbmQpIHtcbiAgICBvblRleHQoY2hhciwgc3RhcnQsIGVuZCk7XG4gIH0sXG4gIG9uaW50ZXJwb2xhdGlvbihzdGFydCwgZW5kKSB7XG4gICAgaWYgKGluVlByZSkge1xuICAgICAgcmV0dXJuIG9uVGV4dChnZXRTbGljZShzdGFydCwgZW5kKSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuICAgIGxldCBpbm5lclN0YXJ0ID0gc3RhcnQgKyB0b2tlbml6ZXIuZGVsaW1pdGVyT3Blbi5sZW5ndGg7XG4gICAgbGV0IGlubmVyRW5kID0gZW5kIC0gdG9rZW5pemVyLmRlbGltaXRlckNsb3NlLmxlbmd0aDtcbiAgICB3aGlsZSAoaXNXaGl0ZXNwYWNlKGN1cnJlbnRJbnB1dC5jaGFyQ29kZUF0KGlubmVyU3RhcnQpKSkge1xuICAgICAgaW5uZXJTdGFydCsrO1xuICAgIH1cbiAgICB3aGlsZSAoaXNXaGl0ZXNwYWNlKGN1cnJlbnRJbnB1dC5jaGFyQ29kZUF0KGlubmVyRW5kIC0gMSkpKSB7XG4gICAgICBpbm5lckVuZC0tO1xuICAgIH1cbiAgICBsZXQgZXhwID0gZ2V0U2xpY2UoaW5uZXJTdGFydCwgaW5uZXJFbmQpO1xuICAgIGlmIChleHAuaW5jbHVkZXMoXCImXCIpKSB7XG4gICAgICB7XG4gICAgICAgIGV4cCA9IGN1cnJlbnRPcHRpb25zLmRlY29kZUVudGl0aWVzKGV4cCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBhZGROb2RlKHtcbiAgICAgIHR5cGU6IDUsXG4gICAgICBjb250ZW50OiBjcmVhdGVFeHAoZXhwLCBmYWxzZSwgZ2V0TG9jKGlubmVyU3RhcnQsIGlubmVyRW5kKSksXG4gICAgICBsb2M6IGdldExvYyhzdGFydCwgZW5kKVxuICAgIH0pO1xuICB9LFxuICBvbm9wZW50YWduYW1lKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBuYW1lID0gZ2V0U2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgY3VycmVudE9wZW5UYWcgPSB7XG4gICAgICB0eXBlOiAxLFxuICAgICAgdGFnOiBuYW1lLFxuICAgICAgbnM6IGN1cnJlbnRPcHRpb25zLmdldE5hbWVzcGFjZShuYW1lLCBzdGFja1swXSwgY3VycmVudE9wdGlvbnMubnMpLFxuICAgICAgdGFnVHlwZTogMCxcbiAgICAgIC8vIHdpbGwgYmUgcmVmaW5lZCBvbiB0YWcgY2xvc2VcbiAgICAgIHByb3BzOiBbXSxcbiAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgIGxvYzogZ2V0TG9jKHN0YXJ0IC0gMSwgZW5kKSxcbiAgICAgIGNvZGVnZW5Ob2RlOiB2b2lkIDBcbiAgICB9O1xuICB9LFxuICBvbm9wZW50YWdlbmQoZW5kKSB7XG4gICAgZW5kT3BlblRhZyhlbmQpO1xuICB9LFxuICBvbmNsb3NldGFnKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBuYW1lID0gZ2V0U2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgaWYgKCFjdXJyZW50T3B0aW9ucy5pc1ZvaWRUYWcobmFtZSkpIHtcbiAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBlID0gc3RhY2tbaV07XG4gICAgICAgIGlmIChlLnRhZy50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICBlbWl0RXJyb3IoMjQsIHN0YWNrWzBdLmxvYy5zdGFydC5vZmZzZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8PSBpOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gc3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgIG9uQ2xvc2VUYWcoZWwsIGVuZCwgaiA8IGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICBlbWl0RXJyb3IoMjMsIGJhY2tUcmFjayhzdGFydCwgNjApKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG9uc2VsZmNsb3Npbmd0YWcoZW5kKSB7XG4gICAgY29uc3QgbmFtZSA9IGN1cnJlbnRPcGVuVGFnLnRhZztcbiAgICBjdXJyZW50T3BlblRhZy5pc1NlbGZDbG9zaW5nID0gdHJ1ZTtcbiAgICBlbmRPcGVuVGFnKGVuZCk7XG4gICAgaWYgKHN0YWNrWzBdICYmIHN0YWNrWzBdLnRhZyA9PT0gbmFtZSkge1xuICAgICAgb25DbG9zZVRhZyhzdGFjay5zaGlmdCgpLCBlbmQpO1xuICAgIH1cbiAgfSxcbiAgb25hdHRyaWJuYW1lKHN0YXJ0LCBlbmQpIHtcbiAgICBjdXJyZW50UHJvcCA9IHtcbiAgICAgIHR5cGU6IDYsXG4gICAgICBuYW1lOiBnZXRTbGljZShzdGFydCwgZW5kKSxcbiAgICAgIG5hbWVMb2M6IGdldExvYyhzdGFydCwgZW5kKSxcbiAgICAgIHZhbHVlOiB2b2lkIDAsXG4gICAgICBsb2M6IGdldExvYyhzdGFydClcbiAgICB9O1xuICB9LFxuICBvbmRpcm5hbWUoc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IHJhdyA9IGdldFNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgIGNvbnN0IG5hbWUgPSByYXcgPT09IFwiLlwiIHx8IHJhdyA9PT0gXCI6XCIgPyBcImJpbmRcIiA6IHJhdyA9PT0gXCJAXCIgPyBcIm9uXCIgOiByYXcgPT09IFwiI1wiID8gXCJzbG90XCIgOiByYXcuc2xpY2UoMik7XG4gICAgaWYgKCFpblZQcmUgJiYgbmFtZSA9PT0gXCJcIikge1xuICAgICAgZW1pdEVycm9yKDI2LCBzdGFydCk7XG4gICAgfVxuICAgIGlmIChpblZQcmUgfHwgbmFtZSA9PT0gXCJcIikge1xuICAgICAgY3VycmVudFByb3AgPSB7XG4gICAgICAgIHR5cGU6IDYsXG4gICAgICAgIG5hbWU6IHJhdyxcbiAgICAgICAgbmFtZUxvYzogZ2V0TG9jKHN0YXJ0LCBlbmQpLFxuICAgICAgICB2YWx1ZTogdm9pZCAwLFxuICAgICAgICBsb2M6IGdldExvYyhzdGFydClcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRQcm9wID0ge1xuICAgICAgICB0eXBlOiA3LFxuICAgICAgICBuYW1lLFxuICAgICAgICByYXdOYW1lOiByYXcsXG4gICAgICAgIGV4cDogdm9pZCAwLFxuICAgICAgICBhcmc6IHZvaWQgMCxcbiAgICAgICAgbW9kaWZpZXJzOiByYXcgPT09IFwiLlwiID8gW2NyZWF0ZVNpbXBsZUV4cHJlc3Npb24oXCJwcm9wXCIpXSA6IFtdLFxuICAgICAgICBsb2M6IGdldExvYyhzdGFydClcbiAgICAgIH07XG4gICAgICBpZiAobmFtZSA9PT0gXCJwcmVcIikge1xuICAgICAgICBpblZQcmUgPSB0b2tlbml6ZXIuaW5WUHJlID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudFZQcmVCb3VuZGFyeSA9IGN1cnJlbnRPcGVuVGFnO1xuICAgICAgICBjb25zdCBwcm9wcyA9IGN1cnJlbnRPcGVuVGFnLnByb3BzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHByb3BzW2ldLnR5cGUgPT09IDcpIHtcbiAgICAgICAgICAgIHByb3BzW2ldID0gZGlyVG9BdHRyKHByb3BzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG9uZGlyYXJnKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoc3RhcnQgPT09IGVuZCkgcmV0dXJuO1xuICAgIGNvbnN0IGFyZyA9IGdldFNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgIGlmIChpblZQcmUpIHtcbiAgICAgIGN1cnJlbnRQcm9wLm5hbWUgKz0gYXJnO1xuICAgICAgc2V0TG9jRW5kKGN1cnJlbnRQcm9wLm5hbWVMb2MsIGVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGlzU3RhdGljID0gYXJnWzBdICE9PSBgW2A7XG4gICAgICBjdXJyZW50UHJvcC5hcmcgPSBjcmVhdGVFeHAoXG4gICAgICAgIGlzU3RhdGljID8gYXJnIDogYXJnLnNsaWNlKDEsIC0xKSxcbiAgICAgICAgaXNTdGF0aWMsXG4gICAgICAgIGdldExvYyhzdGFydCwgZW5kKSxcbiAgICAgICAgaXNTdGF0aWMgPyAzIDogMFxuICAgICAgKTtcbiAgICB9XG4gIH0sXG4gIG9uZGlybW9kaWZpZXIoc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IG1vZCA9IGdldFNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgIGlmIChpblZQcmUpIHtcbiAgICAgIGN1cnJlbnRQcm9wLm5hbWUgKz0gXCIuXCIgKyBtb2Q7XG4gICAgICBzZXRMb2NFbmQoY3VycmVudFByb3AubmFtZUxvYywgZW5kKTtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRQcm9wLm5hbWUgPT09IFwic2xvdFwiKSB7XG4gICAgICBjb25zdCBhcmcgPSBjdXJyZW50UHJvcC5hcmc7XG4gICAgICBpZiAoYXJnKSB7XG4gICAgICAgIGFyZy5jb250ZW50ICs9IFwiLlwiICsgbW9kO1xuICAgICAgICBzZXRMb2NFbmQoYXJnLmxvYywgZW5kKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZXhwID0gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihtb2QsIHRydWUsIGdldExvYyhzdGFydCwgZW5kKSk7XG4gICAgICBjdXJyZW50UHJvcC5tb2RpZmllcnMucHVzaChleHApO1xuICAgIH1cbiAgfSxcbiAgb25hdHRyaWJkYXRhKHN0YXJ0LCBlbmQpIHtcbiAgICBjdXJyZW50QXR0clZhbHVlICs9IGdldFNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgIGlmIChjdXJyZW50QXR0clN0YXJ0SW5kZXggPCAwKSBjdXJyZW50QXR0clN0YXJ0SW5kZXggPSBzdGFydDtcbiAgICBjdXJyZW50QXR0ckVuZEluZGV4ID0gZW5kO1xuICB9LFxuICBvbmF0dHJpYmVudGl0eShjaGFyLCBzdGFydCwgZW5kKSB7XG4gICAgY3VycmVudEF0dHJWYWx1ZSArPSBjaGFyO1xuICAgIGlmIChjdXJyZW50QXR0clN0YXJ0SW5kZXggPCAwKSBjdXJyZW50QXR0clN0YXJ0SW5kZXggPSBzdGFydDtcbiAgICBjdXJyZW50QXR0ckVuZEluZGV4ID0gZW5kO1xuICB9LFxuICBvbmF0dHJpYm5hbWVlbmQoZW5kKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBjdXJyZW50UHJvcC5sb2Muc3RhcnQub2Zmc2V0O1xuICAgIGNvbnN0IG5hbWUgPSBnZXRTbGljZShzdGFydCwgZW5kKTtcbiAgICBpZiAoY3VycmVudFByb3AudHlwZSA9PT0gNykge1xuICAgICAgY3VycmVudFByb3AucmF3TmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGlmIChjdXJyZW50T3BlblRhZy5wcm9wcy5zb21lKFxuICAgICAgKHApID0+IChwLnR5cGUgPT09IDcgPyBwLnJhd05hbWUgOiBwLm5hbWUpID09PSBuYW1lXG4gICAgKSkge1xuICAgICAgZW1pdEVycm9yKDIsIHN0YXJ0KTtcbiAgICB9XG4gIH0sXG4gIG9uYXR0cmliZW5kKHF1b3RlLCBlbmQpIHtcbiAgICBpZiAoY3VycmVudE9wZW5UYWcgJiYgY3VycmVudFByb3ApIHtcbiAgICAgIHNldExvY0VuZChjdXJyZW50UHJvcC5sb2MsIGVuZCk7XG4gICAgICBpZiAocXVvdGUgIT09IDApIHtcbiAgICAgICAgaWYgKGN1cnJlbnRBdHRyVmFsdWUuaW5jbHVkZXMoXCImXCIpKSB7XG4gICAgICAgICAgY3VycmVudEF0dHJWYWx1ZSA9IGN1cnJlbnRPcHRpb25zLmRlY29kZUVudGl0aWVzKFxuICAgICAgICAgICAgY3VycmVudEF0dHJWYWx1ZSxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50UHJvcC50eXBlID09PSA2KSB7XG4gICAgICAgICAgaWYgKGN1cnJlbnRQcm9wLm5hbWUgPT09IFwiY2xhc3NcIikge1xuICAgICAgICAgICAgY3VycmVudEF0dHJWYWx1ZSA9IGNvbmRlbnNlKGN1cnJlbnRBdHRyVmFsdWUpLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHF1b3RlID09PSAxICYmICFjdXJyZW50QXR0clZhbHVlKSB7XG4gICAgICAgICAgICBlbWl0RXJyb3IoMTMsIGVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRQcm9wLnZhbHVlID0ge1xuICAgICAgICAgICAgdHlwZTogMixcbiAgICAgICAgICAgIGNvbnRlbnQ6IGN1cnJlbnRBdHRyVmFsdWUsXG4gICAgICAgICAgICBsb2M6IHF1b3RlID09PSAxID8gZ2V0TG9jKGN1cnJlbnRBdHRyU3RhcnRJbmRleCwgY3VycmVudEF0dHJFbmRJbmRleCkgOiBnZXRMb2MoY3VycmVudEF0dHJTdGFydEluZGV4IC0gMSwgY3VycmVudEF0dHJFbmRJbmRleCArIDEpXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAodG9rZW5pemVyLmluU0ZDUm9vdCAmJiBjdXJyZW50T3BlblRhZy50YWcgPT09IFwidGVtcGxhdGVcIiAmJiBjdXJyZW50UHJvcC5uYW1lID09PSBcImxhbmdcIiAmJiBjdXJyZW50QXR0clZhbHVlICYmIGN1cnJlbnRBdHRyVmFsdWUgIT09IFwiaHRtbFwiKSB7XG4gICAgICAgICAgICB0b2tlbml6ZXIuZW50ZXJSQ0RBVEEodG9DaGFyQ29kZXMoYDwvdGVtcGxhdGVgKSwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBleHBQYXJzZU1vZGUgPSAwIC8qIE5vcm1hbCAqLztcbiAgICAgICAgICBjdXJyZW50UHJvcC5leHAgPSBjcmVhdGVFeHAoXG4gICAgICAgICAgICBjdXJyZW50QXR0clZhbHVlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBnZXRMb2MoY3VycmVudEF0dHJTdGFydEluZGV4LCBjdXJyZW50QXR0ckVuZEluZGV4KSxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBleHBQYXJzZU1vZGVcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChjdXJyZW50UHJvcC5uYW1lID09PSBcImZvclwiKSB7XG4gICAgICAgICAgICBjdXJyZW50UHJvcC5mb3JQYXJzZVJlc3VsdCA9IHBhcnNlRm9yRXhwcmVzc2lvbihjdXJyZW50UHJvcC5leHApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRQcm9wLnR5cGUgIT09IDcgfHwgY3VycmVudFByb3AubmFtZSAhPT0gXCJwcmVcIikge1xuICAgICAgICBjdXJyZW50T3BlblRhZy5wcm9wcy5wdXNoKGN1cnJlbnRQcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY3VycmVudEF0dHJWYWx1ZSA9IFwiXCI7XG4gICAgY3VycmVudEF0dHJTdGFydEluZGV4ID0gY3VycmVudEF0dHJFbmRJbmRleCA9IC0xO1xuICB9LFxuICBvbmNvbW1lbnQoc3RhcnQsIGVuZCkge1xuICAgIGlmIChjdXJyZW50T3B0aW9ucy5jb21tZW50cykge1xuICAgICAgYWRkTm9kZSh7XG4gICAgICAgIHR5cGU6IDMsXG4gICAgICAgIGNvbnRlbnQ6IGdldFNsaWNlKHN0YXJ0LCBlbmQpLFxuICAgICAgICBsb2M6IGdldExvYyhzdGFydCAtIDQsIGVuZCArIDMpXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIG9uZW5kKCkge1xuICAgIGNvbnN0IGVuZCA9IGN1cnJlbnRJbnB1dC5sZW5ndGg7XG4gICAgaWYgKHRva2VuaXplci5zdGF0ZSAhPT0gMSkge1xuICAgICAgc3dpdGNoICh0b2tlbml6ZXIuc3RhdGUpIHtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgZW1pdEVycm9yKDUsIGVuZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGVtaXRFcnJvcihcbiAgICAgICAgICAgIDI1LFxuICAgICAgICAgICAgdG9rZW5pemVyLnNlY3Rpb25TdGFydFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjg6XG4gICAgICAgICAgaWYgKHRva2VuaXplci5jdXJyZW50U2VxdWVuY2UgPT09IFNlcXVlbmNlcy5DZGF0YUVuZCkge1xuICAgICAgICAgICAgZW1pdEVycm9yKDYsIGVuZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVtaXRFcnJvcig3LCBlbmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2OlxuICAgICAgICBjYXNlIDc6XG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgY2FzZSAxODpcbiAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgLy8gXCJcbiAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgLy8gJ1xuICAgICAgICBjYXNlIDIxOlxuICAgICAgICAgIGVtaXRFcnJvcig5LCBlbmQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc3RhY2subGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBvbkNsb3NlVGFnKHN0YWNrW2luZGV4XSwgZW5kIC0gMSk7XG4gICAgICBlbWl0RXJyb3IoMjQsIHN0YWNrW2luZGV4XS5sb2Muc3RhcnQub2Zmc2V0KTtcbiAgICB9XG4gIH0sXG4gIG9uY2RhdGEoc3RhcnQsIGVuZCkge1xuICAgIGlmIChzdGFja1swXS5ucyAhPT0gMCkge1xuICAgICAgb25UZXh0KGdldFNsaWNlKHN0YXJ0LCBlbmQpLCBzdGFydCwgZW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdEVycm9yKDEsIHN0YXJ0IC0gOSk7XG4gICAgfVxuICB9LFxuICBvbnByb2Nlc3NpbmdpbnN0cnVjdGlvbihzdGFydCkge1xuICAgIGlmICgoc3RhY2tbMF0gPyBzdGFja1swXS5ucyA6IGN1cnJlbnRPcHRpb25zLm5zKSA9PT0gMCkge1xuICAgICAgZW1pdEVycm9yKFxuICAgICAgICAyMSxcbiAgICAgICAgc3RhcnQgLSAxXG4gICAgICApO1xuICAgIH1cbiAgfVxufSk7XG5jb25zdCBmb3JJdGVyYXRvclJFID0gLywoW14sXFx9XFxdXSopKD86LChbXixcXH1cXF1dKikpPyQvO1xuY29uc3Qgc3RyaXBQYXJlbnNSRSA9IC9eXFwofFxcKSQvZztcbmZ1bmN0aW9uIHBhcnNlRm9yRXhwcmVzc2lvbihpbnB1dCkge1xuICBjb25zdCBsb2MgPSBpbnB1dC5sb2M7XG4gIGNvbnN0IGV4cCA9IGlucHV0LmNvbnRlbnQ7XG4gIGNvbnN0IGluTWF0Y2ggPSBleHAubWF0Y2goZm9yQWxpYXNSRSk7XG4gIGlmICghaW5NYXRjaCkgcmV0dXJuO1xuICBjb25zdCBbLCBMSFMsIFJIU10gPSBpbk1hdGNoO1xuICBjb25zdCBjcmVhdGVBbGlhc0V4cHJlc3Npb24gPSAoY29udGVudCwgb2Zmc2V0LCBhc1BhcmFtID0gZmFsc2UpID0+IHtcbiAgICBjb25zdCBzdGFydCA9IGxvYy5zdGFydC5vZmZzZXQgKyBvZmZzZXQ7XG4gICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb250ZW50Lmxlbmd0aDtcbiAgICByZXR1cm4gY3JlYXRlRXhwKFxuICAgICAgY29udGVudCxcbiAgICAgIGZhbHNlLFxuICAgICAgZ2V0TG9jKHN0YXJ0LCBlbmQpLFxuICAgICAgMCxcbiAgICAgIGFzUGFyYW0gPyAxIC8qIFBhcmFtcyAqLyA6IDAgLyogTm9ybWFsICovXG4gICAgKTtcbiAgfTtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHNvdXJjZTogY3JlYXRlQWxpYXNFeHByZXNzaW9uKFJIUy50cmltKCksIGV4cC5pbmRleE9mKFJIUywgTEhTLmxlbmd0aCkpLFxuICAgIHZhbHVlOiB2b2lkIDAsXG4gICAga2V5OiB2b2lkIDAsXG4gICAgaW5kZXg6IHZvaWQgMCxcbiAgICBmaW5hbGl6ZWQ6IGZhbHNlXG4gIH07XG4gIGxldCB2YWx1ZUNvbnRlbnQgPSBMSFMudHJpbSgpLnJlcGxhY2Uoc3RyaXBQYXJlbnNSRSwgXCJcIikudHJpbSgpO1xuICBjb25zdCB0cmltbWVkT2Zmc2V0ID0gTEhTLmluZGV4T2YodmFsdWVDb250ZW50KTtcbiAgY29uc3QgaXRlcmF0b3JNYXRjaCA9IHZhbHVlQ29udGVudC5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgaWYgKGl0ZXJhdG9yTWF0Y2gpIHtcbiAgICB2YWx1ZUNvbnRlbnQgPSB2YWx1ZUNvbnRlbnQucmVwbGFjZShmb3JJdGVyYXRvclJFLCBcIlwiKS50cmltKCk7XG4gICAgY29uc3Qga2V5Q29udGVudCA9IGl0ZXJhdG9yTWF0Y2hbMV0udHJpbSgpO1xuICAgIGxldCBrZXlPZmZzZXQ7XG4gICAgaWYgKGtleUNvbnRlbnQpIHtcbiAgICAgIGtleU9mZnNldCA9IGV4cC5pbmRleE9mKGtleUNvbnRlbnQsIHRyaW1tZWRPZmZzZXQgKyB2YWx1ZUNvbnRlbnQubGVuZ3RoKTtcbiAgICAgIHJlc3VsdC5rZXkgPSBjcmVhdGVBbGlhc0V4cHJlc3Npb24oa2V5Q29udGVudCwga2V5T2Zmc2V0LCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGl0ZXJhdG9yTWF0Y2hbMl0pIHtcbiAgICAgIGNvbnN0IGluZGV4Q29udGVudCA9IGl0ZXJhdG9yTWF0Y2hbMl0udHJpbSgpO1xuICAgICAgaWYgKGluZGV4Q29udGVudCkge1xuICAgICAgICByZXN1bHQuaW5kZXggPSBjcmVhdGVBbGlhc0V4cHJlc3Npb24oXG4gICAgICAgICAgaW5kZXhDb250ZW50LFxuICAgICAgICAgIGV4cC5pbmRleE9mKFxuICAgICAgICAgICAgaW5kZXhDb250ZW50LFxuICAgICAgICAgICAgcmVzdWx0LmtleSA/IGtleU9mZnNldCArIGtleUNvbnRlbnQubGVuZ3RoIDogdHJpbW1lZE9mZnNldCArIHZhbHVlQ29udGVudC5sZW5ndGhcbiAgICAgICAgICApLFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHZhbHVlQ29udGVudCkge1xuICAgIHJlc3VsdC52YWx1ZSA9IGNyZWF0ZUFsaWFzRXhwcmVzc2lvbih2YWx1ZUNvbnRlbnQsIHRyaW1tZWRPZmZzZXQsIHRydWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRTbGljZShzdGFydCwgZW5kKSB7XG4gIHJldHVybiBjdXJyZW50SW5wdXQuc2xpY2Uoc3RhcnQsIGVuZCk7XG59XG5mdW5jdGlvbiBlbmRPcGVuVGFnKGVuZCkge1xuICBpZiAodG9rZW5pemVyLmluU0ZDUm9vdCkge1xuICAgIGN1cnJlbnRPcGVuVGFnLmlubmVyTG9jID0gZ2V0TG9jKGVuZCArIDEsIGVuZCArIDEpO1xuICB9XG4gIGFkZE5vZGUoY3VycmVudE9wZW5UYWcpO1xuICBjb25zdCB7IHRhZywgbnMgfSA9IGN1cnJlbnRPcGVuVGFnO1xuICBpZiAobnMgPT09IDAgJiYgY3VycmVudE9wdGlvbnMuaXNQcmVUYWcodGFnKSkge1xuICAgIGluUHJlKys7XG4gIH1cbiAgaWYgKGN1cnJlbnRPcHRpb25zLmlzVm9pZFRhZyh0YWcpKSB7XG4gICAgb25DbG9zZVRhZyhjdXJyZW50T3BlblRhZywgZW5kKTtcbiAgfSBlbHNlIHtcbiAgICBzdGFjay51bnNoaWZ0KGN1cnJlbnRPcGVuVGFnKTtcbiAgICBpZiAobnMgPT09IDEgfHwgbnMgPT09IDIpIHtcbiAgICAgIHRva2VuaXplci5pblhNTCA9IHRydWU7XG4gICAgfVxuICB9XG4gIGN1cnJlbnRPcGVuVGFnID0gbnVsbDtcbn1cbmZ1bmN0aW9uIG9uVGV4dChjb250ZW50LCBzdGFydCwgZW5kKSB7XG4gIHtcbiAgICBjb25zdCB0YWcgPSBzdGFja1swXSAmJiBzdGFja1swXS50YWc7XG4gICAgaWYgKHRhZyAhPT0gXCJzY3JpcHRcIiAmJiB0YWcgIT09IFwic3R5bGVcIiAmJiBjb250ZW50LmluY2x1ZGVzKFwiJlwiKSkge1xuICAgICAgY29udGVudCA9IGN1cnJlbnRPcHRpb25zLmRlY29kZUVudGl0aWVzKGNvbnRlbnQsIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcGFyZW50ID0gc3RhY2tbMF0gfHwgY3VycmVudFJvb3Q7XG4gIGNvbnN0IGxhc3ROb2RlID0gcGFyZW50LmNoaWxkcmVuW3BhcmVudC5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3ROb2RlICYmIGxhc3ROb2RlLnR5cGUgPT09IDIpIHtcbiAgICBsYXN0Tm9kZS5jb250ZW50ICs9IGNvbnRlbnQ7XG4gICAgc2V0TG9jRW5kKGxhc3ROb2RlLmxvYywgZW5kKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaCh7XG4gICAgICB0eXBlOiAyLFxuICAgICAgY29udGVudCxcbiAgICAgIGxvYzogZ2V0TG9jKHN0YXJ0LCBlbmQpXG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIG9uQ2xvc2VUYWcoZWwsIGVuZCwgaXNJbXBsaWVkID0gZmFsc2UpIHtcbiAgaWYgKGlzSW1wbGllZCkge1xuICAgIHNldExvY0VuZChlbC5sb2MsIGJhY2tUcmFjayhlbmQsIDYwKSk7XG4gIH0gZWxzZSB7XG4gICAgc2V0TG9jRW5kKGVsLmxvYywgbG9va0FoZWFkKGVuZCwgNjIpICsgMSk7XG4gIH1cbiAgaWYgKHRva2VuaXplci5pblNGQ1Jvb3QpIHtcbiAgICBpZiAoZWwuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICBlbC5pbm5lckxvYy5lbmQgPSBleHRlbmQoe30sIGVsLmNoaWxkcmVuW2VsLmNoaWxkcmVuLmxlbmd0aCAtIDFdLmxvYy5lbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5pbm5lckxvYy5lbmQgPSBleHRlbmQoe30sIGVsLmlubmVyTG9jLnN0YXJ0KTtcbiAgICB9XG4gICAgZWwuaW5uZXJMb2Muc291cmNlID0gZ2V0U2xpY2UoXG4gICAgICBlbC5pbm5lckxvYy5zdGFydC5vZmZzZXQsXG4gICAgICBlbC5pbm5lckxvYy5lbmQub2Zmc2V0XG4gICAgKTtcbiAgfVxuICBjb25zdCB7IHRhZywgbnMsIGNoaWxkcmVuIH0gPSBlbDtcbiAgaWYgKCFpblZQcmUpIHtcbiAgICBpZiAodGFnID09PSBcInNsb3RcIikge1xuICAgICAgZWwudGFnVHlwZSA9IDI7XG4gICAgfSBlbHNlIGlmIChpc0ZyYWdtZW50VGVtcGxhdGUoZWwpKSB7XG4gICAgICBlbC50YWdUeXBlID0gMztcbiAgICB9IGVsc2UgaWYgKGlzQ29tcG9uZW50KGVsKSkge1xuICAgICAgZWwudGFnVHlwZSA9IDE7XG4gICAgfVxuICB9XG4gIGlmICghdG9rZW5pemVyLmluUkNEQVRBKSB7XG4gICAgZWwuY2hpbGRyZW4gPSBjb25kZW5zZVdoaXRlc3BhY2UoY2hpbGRyZW4pO1xuICB9XG4gIGlmIChucyA9PT0gMCAmJiBjdXJyZW50T3B0aW9ucy5pc0lnbm9yZU5ld2xpbmVUYWcodGFnKSkge1xuICAgIGNvbnN0IGZpcnN0ID0gY2hpbGRyZW5bMF07XG4gICAgaWYgKGZpcnN0ICYmIGZpcnN0LnR5cGUgPT09IDIpIHtcbiAgICAgIGZpcnN0LmNvbnRlbnQgPSBmaXJzdC5jb250ZW50LnJlcGxhY2UoL15cXHI/XFxuLywgXCJcIik7XG4gICAgfVxuICB9XG4gIGlmIChucyA9PT0gMCAmJiBjdXJyZW50T3B0aW9ucy5pc1ByZVRhZyh0YWcpKSB7XG4gICAgaW5QcmUtLTtcbiAgfVxuICBpZiAoY3VycmVudFZQcmVCb3VuZGFyeSA9PT0gZWwpIHtcbiAgICBpblZQcmUgPSB0b2tlbml6ZXIuaW5WUHJlID0gZmFsc2U7XG4gICAgY3VycmVudFZQcmVCb3VuZGFyeSA9IG51bGw7XG4gIH1cbiAgaWYgKHRva2VuaXplci5pblhNTCAmJiAoc3RhY2tbMF0gPyBzdGFja1swXS5ucyA6IGN1cnJlbnRPcHRpb25zLm5zKSA9PT0gMCkge1xuICAgIHRva2VuaXplci5pblhNTCA9IGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBsb29rQWhlYWQoaW5kZXgsIGMpIHtcbiAgbGV0IGkgPSBpbmRleDtcbiAgd2hpbGUgKGN1cnJlbnRJbnB1dC5jaGFyQ29kZUF0KGkpICE9PSBjICYmIGkgPCBjdXJyZW50SW5wdXQubGVuZ3RoIC0gMSkgaSsrO1xuICByZXR1cm4gaTtcbn1cbmZ1bmN0aW9uIGJhY2tUcmFjayhpbmRleCwgYykge1xuICBsZXQgaSA9IGluZGV4O1xuICB3aGlsZSAoY3VycmVudElucHV0LmNoYXJDb2RlQXQoaSkgIT09IGMgJiYgaSA+PSAwKSBpLS07XG4gIHJldHVybiBpO1xufVxuY29uc3Qgc3BlY2lhbFRlbXBsYXRlRGlyID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wiaWZcIiwgXCJlbHNlXCIsIFwiZWxzZS1pZlwiLCBcImZvclwiLCBcInNsb3RcIl0pO1xuZnVuY3Rpb24gaXNGcmFnbWVudFRlbXBsYXRlKHsgdGFnLCBwcm9wcyB9KSB7XG4gIGlmICh0YWcgPT09IFwidGVtcGxhdGVcIikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwcm9wc1tpXS50eXBlID09PSA3ICYmIHNwZWNpYWxUZW1wbGF0ZURpci5oYXMocHJvcHNbaV0ubmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzQ29tcG9uZW50KHsgdGFnLCBwcm9wcyB9KSB7XG4gIGlmIChjdXJyZW50T3B0aW9ucy5pc0N1c3RvbUVsZW1lbnQodGFnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodGFnID09PSBcImNvbXBvbmVudFwiIHx8IGlzVXBwZXJDYXNlKHRhZy5jaGFyQ29kZUF0KDApKSB8fCBpc0NvcmVDb21wb25lbnQodGFnKSB8fCBjdXJyZW50T3B0aW9ucy5pc0J1aWx0SW5Db21wb25lbnQgJiYgY3VycmVudE9wdGlvbnMuaXNCdWlsdEluQ29tcG9uZW50KHRhZykgfHwgY3VycmVudE9wdGlvbnMuaXNOYXRpdmVUYWcgJiYgIWN1cnJlbnRPcHRpb25zLmlzTmF0aXZlVGFnKHRhZykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcCA9IHByb3BzW2ldO1xuICAgIGlmIChwLnR5cGUgPT09IDYpIHtcbiAgICAgIGlmIChwLm5hbWUgPT09IFwiaXNcIiAmJiBwLnZhbHVlKSB7XG4gICAgICAgIGlmIChwLnZhbHVlLmNvbnRlbnQuc3RhcnRzV2l0aChcInZ1ZTpcIikpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc1VwcGVyQ2FzZShjKSB7XG4gIHJldHVybiBjID4gNjQgJiYgYyA8IDkxO1xufVxuY29uc3Qgd2luZG93c05ld2xpbmVSRSA9IC9cXHJcXG4vZztcbmZ1bmN0aW9uIGNvbmRlbnNlV2hpdGVzcGFjZShub2RlcywgdGFnKSB7XG4gIGNvbnN0IHNob3VsZENvbmRlbnNlID0gY3VycmVudE9wdGlvbnMud2hpdGVzcGFjZSAhPT0gXCJwcmVzZXJ2ZVwiO1xuICBsZXQgcmVtb3ZlZFdoaXRlc3BhY2UgPSBmYWxzZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICBpZiAobm9kZS50eXBlID09PSAyKSB7XG4gICAgICBpZiAoIWluUHJlKSB7XG4gICAgICAgIGlmIChpc0FsbFdoaXRlc3BhY2Uobm9kZS5jb250ZW50KSkge1xuICAgICAgICAgIGNvbnN0IHByZXYgPSBub2Rlc1tpIC0gMV0gJiYgbm9kZXNbaSAtIDFdLnR5cGU7XG4gICAgICAgICAgY29uc3QgbmV4dCA9IG5vZGVzW2kgKyAxXSAmJiBub2Rlc1tpICsgMV0udHlwZTtcbiAgICAgICAgICBpZiAoIXByZXYgfHwgIW5leHQgfHwgc2hvdWxkQ29uZGVuc2UgJiYgKHByZXYgPT09IDMgJiYgKG5leHQgPT09IDMgfHwgbmV4dCA9PT0gMSkgfHwgcHJldiA9PT0gMSAmJiAobmV4dCA9PT0gMyB8fCBuZXh0ID09PSAxICYmIGhhc05ld2xpbmVDaGFyKG5vZGUuY29udGVudCkpKSkge1xuICAgICAgICAgICAgcmVtb3ZlZFdoaXRlc3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgbm9kZXNbaV0gPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlLmNvbnRlbnQgPSBcIiBcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2hvdWxkQ29uZGVuc2UpIHtcbiAgICAgICAgICBub2RlLmNvbnRlbnQgPSBjb25kZW5zZShub2RlLmNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLmNvbnRlbnQgPSBub2RlLmNvbnRlbnQucmVwbGFjZSh3aW5kb3dzTmV3bGluZVJFLCBcIlxcblwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbW92ZWRXaGl0ZXNwYWNlID8gbm9kZXMuZmlsdGVyKEJvb2xlYW4pIDogbm9kZXM7XG59XG5mdW5jdGlvbiBpc0FsbFdoaXRlc3BhY2Uoc3RyKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFpc1doaXRlc3BhY2Uoc3RyLmNoYXJDb2RlQXQoaSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gaGFzTmV3bGluZUNoYXIoc3RyKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChjID09PSAxMCB8fCBjID09PSAxMykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNvbmRlbnNlKHN0cikge1xuICBsZXQgcmV0ID0gXCJcIjtcbiAgbGV0IHByZXZDaGFySXNXaGl0ZXNwYWNlID0gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGlzV2hpdGVzcGFjZShzdHIuY2hhckNvZGVBdChpKSkpIHtcbiAgICAgIGlmICghcHJldkNoYXJJc1doaXRlc3BhY2UpIHtcbiAgICAgICAgcmV0ICs9IFwiIFwiO1xuICAgICAgICBwcmV2Q2hhcklzV2hpdGVzcGFjZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldCArPSBzdHJbaV07XG4gICAgICBwcmV2Q2hhcklzV2hpdGVzcGFjZSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gYWRkTm9kZShub2RlKSB7XG4gIChzdGFja1swXSB8fCBjdXJyZW50Um9vdCkuY2hpbGRyZW4ucHVzaChub2RlKTtcbn1cbmZ1bmN0aW9uIGdldExvYyhzdGFydCwgZW5kKSB7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHRva2VuaXplci5nZXRQb3Moc3RhcnQpLFxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYWxsb3cgbGF0ZSBhdHRhY2htZW50XG4gICAgZW5kOiBlbmQgPT0gbnVsbCA/IGVuZCA6IHRva2VuaXplci5nZXRQb3MoZW5kKSxcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGFsbG93IGxhdGUgYXR0YWNobWVudFxuICAgIHNvdXJjZTogZW5kID09IG51bGwgPyBlbmQgOiBnZXRTbGljZShzdGFydCwgZW5kKVxuICB9O1xufVxuZnVuY3Rpb24gY2xvbmVMb2MobG9jKSB7XG4gIHJldHVybiBnZXRMb2MobG9jLnN0YXJ0Lm9mZnNldCwgbG9jLmVuZC5vZmZzZXQpO1xufVxuZnVuY3Rpb24gc2V0TG9jRW5kKGxvYywgZW5kKSB7XG4gIGxvYy5lbmQgPSB0b2tlbml6ZXIuZ2V0UG9zKGVuZCk7XG4gIGxvYy5zb3VyY2UgPSBnZXRTbGljZShsb2Muc3RhcnQub2Zmc2V0LCBlbmQpO1xufVxuZnVuY3Rpb24gZGlyVG9BdHRyKGRpcikge1xuICBjb25zdCBhdHRyID0ge1xuICAgIHR5cGU6IDYsXG4gICAgbmFtZTogZGlyLnJhd05hbWUsXG4gICAgbmFtZUxvYzogZ2V0TG9jKFxuICAgICAgZGlyLmxvYy5zdGFydC5vZmZzZXQsXG4gICAgICBkaXIubG9jLnN0YXJ0Lm9mZnNldCArIGRpci5yYXdOYW1lLmxlbmd0aFxuICAgICksXG4gICAgdmFsdWU6IHZvaWQgMCxcbiAgICBsb2M6IGRpci5sb2NcbiAgfTtcbiAgaWYgKGRpci5leHApIHtcbiAgICBjb25zdCBsb2MgPSBkaXIuZXhwLmxvYztcbiAgICBpZiAobG9jLmVuZC5vZmZzZXQgPCBkaXIubG9jLmVuZC5vZmZzZXQpIHtcbiAgICAgIGxvYy5zdGFydC5vZmZzZXQtLTtcbiAgICAgIGxvYy5zdGFydC5jb2x1bW4tLTtcbiAgICAgIGxvYy5lbmQub2Zmc2V0Kys7XG4gICAgICBsb2MuZW5kLmNvbHVtbisrO1xuICAgIH1cbiAgICBhdHRyLnZhbHVlID0ge1xuICAgICAgdHlwZTogMixcbiAgICAgIGNvbnRlbnQ6IGRpci5leHAuY29udGVudCxcbiAgICAgIGxvY1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGF0dHI7XG59XG5mdW5jdGlvbiBjcmVhdGVFeHAoY29udGVudCwgaXNTdGF0aWMgPSBmYWxzZSwgbG9jLCBjb25zdFR5cGUgPSAwLCBwYXJzZU1vZGUgPSAwIC8qIE5vcm1hbCAqLykge1xuICBjb25zdCBleHAgPSBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGNvbnRlbnQsIGlzU3RhdGljLCBsb2MsIGNvbnN0VHlwZSk7XG4gIHJldHVybiBleHA7XG59XG5mdW5jdGlvbiBlbWl0RXJyb3IoY29kZSwgaW5kZXgsIG1lc3NhZ2UpIHtcbiAgY3VycmVudE9wdGlvbnMub25FcnJvcihcbiAgICBjcmVhdGVDb21waWxlckVycm9yKGNvZGUsIGdldExvYyhpbmRleCwgaW5kZXgpLCB2b2lkIDAsIG1lc3NhZ2UpXG4gICk7XG59XG5mdW5jdGlvbiByZXNldCgpIHtcbiAgdG9rZW5pemVyLnJlc2V0KCk7XG4gIGN1cnJlbnRPcGVuVGFnID0gbnVsbDtcbiAgY3VycmVudFByb3AgPSBudWxsO1xuICBjdXJyZW50QXR0clZhbHVlID0gXCJcIjtcbiAgY3VycmVudEF0dHJTdGFydEluZGV4ID0gLTE7XG4gIGN1cnJlbnRBdHRyRW5kSW5kZXggPSAtMTtcbiAgc3RhY2subGVuZ3RoID0gMDtcbn1cbmZ1bmN0aW9uIGJhc2VQYXJzZShpbnB1dCwgb3B0aW9ucykge1xuICByZXNldCgpO1xuICBjdXJyZW50SW5wdXQgPSBpbnB1dDtcbiAgY3VycmVudE9wdGlvbnMgPSBleHRlbmQoe30sIGRlZmF1bHRQYXJzZXJPcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBsZXQga2V5O1xuICAgIGZvciAoa2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zW2tleV0gIT0gbnVsbCkge1xuICAgICAgICBjdXJyZW50T3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB7XG4gICAgaWYgKCFjdXJyZW50T3B0aW9ucy5kZWNvZGVFbnRpdGllcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgW0B2dWUvY29tcGlsZXItY29yZV0gZGVjb2RlRW50aXRpZXMgb3B0aW9uIGlzIHJlcXVpcmVkIGluIGJyb3dzZXIgYnVpbGRzLmBcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRva2VuaXplci5tb2RlID0gY3VycmVudE9wdGlvbnMucGFyc2VNb2RlID09PSBcImh0bWxcIiA/IDEgOiBjdXJyZW50T3B0aW9ucy5wYXJzZU1vZGUgPT09IFwic2ZjXCIgPyAyIDogMDtcbiAgdG9rZW5pemVyLmluWE1MID0gY3VycmVudE9wdGlvbnMubnMgPT09IDEgfHwgY3VycmVudE9wdGlvbnMubnMgPT09IDI7XG4gIGNvbnN0IGRlbGltaXRlcnMgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVycztcbiAgaWYgKGRlbGltaXRlcnMpIHtcbiAgICB0b2tlbml6ZXIuZGVsaW1pdGVyT3BlbiA9IHRvQ2hhckNvZGVzKGRlbGltaXRlcnNbMF0pO1xuICAgIHRva2VuaXplci5kZWxpbWl0ZXJDbG9zZSA9IHRvQ2hhckNvZGVzKGRlbGltaXRlcnNbMV0pO1xuICB9XG4gIGNvbnN0IHJvb3QgPSBjdXJyZW50Um9vdCA9IGNyZWF0ZVJvb3QoW10sIGlucHV0KTtcbiAgdG9rZW5pemVyLnBhcnNlKGN1cnJlbnRJbnB1dCk7XG4gIHJvb3QubG9jID0gZ2V0TG9jKDAsIGlucHV0Lmxlbmd0aCk7XG4gIHJvb3QuY2hpbGRyZW4gPSBjb25kZW5zZVdoaXRlc3BhY2Uocm9vdC5jaGlsZHJlbik7XG4gIGN1cnJlbnRSb290ID0gbnVsbDtcbiAgcmV0dXJuIHJvb3Q7XG59XG5cbmZ1bmN0aW9uIGNhY2hlU3RhdGljKHJvb3QsIGNvbnRleHQpIHtcbiAgd2FsayhcbiAgICByb290LFxuICAgIHZvaWQgMCxcbiAgICBjb250ZXh0LFxuICAgIC8vIFJvb3Qgbm9kZSBpcyB1bmZvcnR1bmF0ZWx5IG5vbi1ob2lzdGFibGUgZHVlIHRvIHBvdGVudGlhbCBwYXJlbnRcbiAgICAvLyBmYWxsdGhyb3VnaCBhdHRyaWJ1dGVzLlxuICAgIGlzU2luZ2xlRWxlbWVudFJvb3Qocm9vdCwgcm9vdC5jaGlsZHJlblswXSlcbiAgKTtcbn1cbmZ1bmN0aW9uIGlzU2luZ2xlRWxlbWVudFJvb3Qocm9vdCwgY2hpbGQpIHtcbiAgY29uc3QgeyBjaGlsZHJlbiB9ID0gcm9vdDtcbiAgcmV0dXJuIGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBjaGlsZC50eXBlID09PSAxICYmICFpc1Nsb3RPdXRsZXQoY2hpbGQpO1xufVxuZnVuY3Rpb24gd2Fsayhub2RlLCBwYXJlbnQsIGNvbnRleHQsIGRvTm90SG9pc3ROb2RlID0gZmFsc2UsIGluRm9yID0gZmFsc2UpIHtcbiAgY29uc3QgeyBjaGlsZHJlbiB9ID0gbm9kZTtcbiAgY29uc3QgdG9DYWNoZSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoY2hpbGQudHlwZSA9PT0gMSAmJiBjaGlsZC50YWdUeXBlID09PSAwKSB7XG4gICAgICBjb25zdCBjb25zdGFudFR5cGUgPSBkb05vdEhvaXN0Tm9kZSA/IDAgOiBnZXRDb25zdGFudFR5cGUoY2hpbGQsIGNvbnRleHQpO1xuICAgICAgaWYgKGNvbnN0YW50VHlwZSA+IDApIHtcbiAgICAgICAgaWYgKGNvbnN0YW50VHlwZSA+PSAyKSB7XG4gICAgICAgICAgY2hpbGQuY29kZWdlbk5vZGUucGF0Y2hGbGFnID0gLTE7XG4gICAgICAgICAgdG9DYWNoZS5wdXNoKGNoaWxkKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgY29kZWdlbk5vZGUgPSBjaGlsZC5jb2RlZ2VuTm9kZTtcbiAgICAgICAgaWYgKGNvZGVnZW5Ob2RlLnR5cGUgPT09IDEzKSB7XG4gICAgICAgICAgY29uc3QgZmxhZyA9IGNvZGVnZW5Ob2RlLnBhdGNoRmxhZztcbiAgICAgICAgICBpZiAoKGZsYWcgPT09IHZvaWQgMCB8fCBmbGFnID09PSA1MTIgfHwgZmxhZyA9PT0gMSkgJiYgZ2V0R2VuZXJhdGVkUHJvcHNDb25zdGFudFR5cGUoY2hpbGQsIGNvbnRleHQpID49IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gZ2V0Tm9kZVByb3BzKGNoaWxkKTtcbiAgICAgICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgICAgICBjb2RlZ2VuTm9kZS5wcm9wcyA9IGNvbnRleHQuaG9pc3QocHJvcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29kZWdlbk5vZGUuZHluYW1pY1Byb3BzKSB7XG4gICAgICAgICAgICBjb2RlZ2VuTm9kZS5keW5hbWljUHJvcHMgPSBjb250ZXh0LmhvaXN0KGNvZGVnZW5Ob2RlLmR5bmFtaWNQcm9wcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGlsZC50eXBlID09PSAxMikge1xuICAgICAgY29uc3QgY29uc3RhbnRUeXBlID0gZG9Ob3RIb2lzdE5vZGUgPyAwIDogZ2V0Q29uc3RhbnRUeXBlKGNoaWxkLCBjb250ZXh0KTtcbiAgICAgIGlmIChjb25zdGFudFR5cGUgPj0gMikge1xuICAgICAgICB0b0NhY2hlLnB1c2goY2hpbGQpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNoaWxkLnR5cGUgPT09IDEpIHtcbiAgICAgIGNvbnN0IGlzQ29tcG9uZW50ID0gY2hpbGQudGFnVHlwZSA9PT0gMTtcbiAgICAgIGlmIChpc0NvbXBvbmVudCkge1xuICAgICAgICBjb250ZXh0LnNjb3Blcy52U2xvdCsrO1xuICAgICAgfVxuICAgICAgd2FsayhjaGlsZCwgbm9kZSwgY29udGV4dCwgZmFsc2UsIGluRm9yKTtcbiAgICAgIGlmIChpc0NvbXBvbmVudCkge1xuICAgICAgICBjb250ZXh0LnNjb3Blcy52U2xvdC0tO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2hpbGQudHlwZSA9PT0gMTEpIHtcbiAgICAgIHdhbGsoY2hpbGQsIG5vZGUsIGNvbnRleHQsIGNoaWxkLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChjaGlsZC50eXBlID09PSA5KSB7XG4gICAgICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgY2hpbGQuYnJhbmNoZXMubGVuZ3RoOyBpMisrKSB7XG4gICAgICAgIHdhbGsoXG4gICAgICAgICAgY2hpbGQuYnJhbmNoZXNbaTJdLFxuICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICBjaGlsZC5icmFuY2hlc1tpMl0uY2hpbGRyZW4ubGVuZ3RoID09PSAxLFxuICAgICAgICAgIGluRm9yXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxldCBjYWNoZWRBc0FycmF5ID0gZmFsc2U7XG4gIGNvbnN0IHNsb3RDYWNoZUtleXMgPSBbXTtcbiAgaWYgKHRvQ2FjaGUubGVuZ3RoID09PSBjaGlsZHJlbi5sZW5ndGggJiYgbm9kZS50eXBlID09PSAxKSB7XG4gICAgaWYgKG5vZGUudGFnVHlwZSA9PT0gMCAmJiBub2RlLmNvZGVnZW5Ob2RlICYmIG5vZGUuY29kZWdlbk5vZGUudHlwZSA9PT0gMTMgJiYgaXNBcnJheShub2RlLmNvZGVnZW5Ob2RlLmNoaWxkcmVuKSkge1xuICAgICAgbm9kZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbiA9IGdldENhY2hlRXhwcmVzc2lvbihcbiAgICAgICAgY3JlYXRlQXJyYXlFeHByZXNzaW9uKG5vZGUuY29kZWdlbk5vZGUuY2hpbGRyZW4pXG4gICAgICApO1xuICAgICAgY2FjaGVkQXNBcnJheSA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChub2RlLnRhZ1R5cGUgPT09IDEgJiYgbm9kZS5jb2RlZ2VuTm9kZSAmJiBub2RlLmNvZGVnZW5Ob2RlLnR5cGUgPT09IDEzICYmIG5vZGUuY29kZWdlbk5vZGUuY2hpbGRyZW4gJiYgIWlzQXJyYXkobm9kZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbikgJiYgbm9kZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbi50eXBlID09PSAxNSkge1xuICAgICAgY29uc3Qgc2xvdCA9IGdldFNsb3ROb2RlKG5vZGUuY29kZWdlbk5vZGUsIFwiZGVmYXVsdFwiKTtcbiAgICAgIGlmIChzbG90KSB7XG4gICAgICAgIHNsb3RDYWNoZUtleXMucHVzaChjb250ZXh0LmNhY2hlZC5sZW5ndGgpO1xuICAgICAgICBzbG90LnJldHVybnMgPSBnZXRDYWNoZUV4cHJlc3Npb24oXG4gICAgICAgICAgY3JlYXRlQXJyYXlFeHByZXNzaW9uKHNsb3QucmV0dXJucylcbiAgICAgICAgKTtcbiAgICAgICAgY2FjaGVkQXNBcnJheSA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlLnRhZ1R5cGUgPT09IDMgJiYgcGFyZW50ICYmIHBhcmVudC50eXBlID09PSAxICYmIHBhcmVudC50YWdUeXBlID09PSAxICYmIHBhcmVudC5jb2RlZ2VuTm9kZSAmJiBwYXJlbnQuY29kZWdlbk5vZGUudHlwZSA9PT0gMTMgJiYgcGFyZW50LmNvZGVnZW5Ob2RlLmNoaWxkcmVuICYmICFpc0FycmF5KHBhcmVudC5jb2RlZ2VuTm9kZS5jaGlsZHJlbikgJiYgcGFyZW50LmNvZGVnZW5Ob2RlLmNoaWxkcmVuLnR5cGUgPT09IDE1KSB7XG4gICAgICBjb25zdCBzbG90TmFtZSA9IGZpbmREaXIobm9kZSwgXCJzbG90XCIsIHRydWUpO1xuICAgICAgY29uc3Qgc2xvdCA9IHNsb3ROYW1lICYmIHNsb3ROYW1lLmFyZyAmJiBnZXRTbG90Tm9kZShwYXJlbnQuY29kZWdlbk5vZGUsIHNsb3ROYW1lLmFyZyk7XG4gICAgICBpZiAoc2xvdCkge1xuICAgICAgICBzbG90Q2FjaGVLZXlzLnB1c2goY29udGV4dC5jYWNoZWQubGVuZ3RoKTtcbiAgICAgICAgc2xvdC5yZXR1cm5zID0gZ2V0Q2FjaGVFeHByZXNzaW9uKFxuICAgICAgICAgIGNyZWF0ZUFycmF5RXhwcmVzc2lvbihzbG90LnJldHVybnMpXG4gICAgICAgICk7XG4gICAgICAgIGNhY2hlZEFzQXJyYXkgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWNhY2hlZEFzQXJyYXkpIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRvQ2FjaGUpIHtcbiAgICAgIHNsb3RDYWNoZUtleXMucHVzaChjb250ZXh0LmNhY2hlZC5sZW5ndGgpO1xuICAgICAgY2hpbGQuY29kZWdlbk5vZGUgPSBjb250ZXh0LmNhY2hlKGNoaWxkLmNvZGVnZW5Ob2RlKTtcbiAgICB9XG4gIH1cbiAgaWYgKHNsb3RDYWNoZUtleXMubGVuZ3RoICYmIG5vZGUudHlwZSA9PT0gMSAmJiBub2RlLnRhZ1R5cGUgPT09IDEgJiYgbm9kZS5jb2RlZ2VuTm9kZSAmJiBub2RlLmNvZGVnZW5Ob2RlLnR5cGUgPT09IDEzICYmIG5vZGUuY29kZWdlbk5vZGUuY2hpbGRyZW4gJiYgIWlzQXJyYXkobm9kZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbikgJiYgbm9kZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbi50eXBlID09PSAxNSkge1xuICAgIG5vZGUuY29kZWdlbk5vZGUuY2hpbGRyZW4ucHJvcGVydGllcy5wdXNoKFxuICAgICAgY3JlYXRlT2JqZWN0UHJvcGVydHkoXG4gICAgICAgIGBfX2AsXG4gICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oSlNPTi5zdHJpbmdpZnkoc2xvdENhY2hlS2V5cyksIGZhbHNlKVxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q2FjaGVFeHByZXNzaW9uKHZhbHVlKSB7XG4gICAgY29uc3QgZXhwID0gY29udGV4dC5jYWNoZSh2YWx1ZSk7XG4gICAgaWYgKGluRm9yICYmIGNvbnRleHQuaG1yKSB7XG4gICAgICBleHAubmVlZEFycmF5U3ByZWFkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cDtcbiAgfVxuICBmdW5jdGlvbiBnZXRTbG90Tm9kZShub2RlMiwgbmFtZSkge1xuICAgIGlmIChub2RlMi5jaGlsZHJlbiAmJiAhaXNBcnJheShub2RlMi5jaGlsZHJlbikgJiYgbm9kZTIuY2hpbGRyZW4udHlwZSA9PT0gMTUpIHtcbiAgICAgIGNvbnN0IHNsb3QgPSBub2RlMi5jaGlsZHJlbi5wcm9wZXJ0aWVzLmZpbmQoXG4gICAgICAgIChwKSA9PiBwLmtleSA9PT0gbmFtZSB8fCBwLmtleS5jb250ZW50ID09PSBuYW1lXG4gICAgICApO1xuICAgICAgcmV0dXJuIHNsb3QgJiYgc2xvdC52YWx1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHRvQ2FjaGUubGVuZ3RoICYmIGNvbnRleHQudHJhbnNmb3JtSG9pc3QpIHtcbiAgICBjb250ZXh0LnRyYW5zZm9ybUhvaXN0KGNoaWxkcmVuLCBjb250ZXh0LCBub2RlKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Q29uc3RhbnRUeXBlKG5vZGUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBjb25zdGFudENhY2hlIH0gPSBjb250ZXh0O1xuICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgMTpcbiAgICAgIGlmIChub2RlLnRhZ1R5cGUgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBjb25zdCBjYWNoZWQgPSBjb25zdGFudENhY2hlLmdldChub2RlKTtcbiAgICAgIGlmIChjYWNoZWQgIT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgfVxuICAgICAgY29uc3QgY29kZWdlbk5vZGUgPSBub2RlLmNvZGVnZW5Ob2RlO1xuICAgICAgaWYgKGNvZGVnZW5Ob2RlLnR5cGUgIT09IDEzKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGNvZGVnZW5Ob2RlLmlzQmxvY2sgJiYgbm9kZS50YWcgIT09IFwic3ZnXCIgJiYgbm9kZS50YWcgIT09IFwiZm9yZWlnbk9iamVjdFwiICYmIG5vZGUudGFnICE9PSBcIm1hdGhcIikge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChjb2RlZ2VuTm9kZS5wYXRjaEZsYWcgPT09IHZvaWQgMCkge1xuICAgICAgICBsZXQgcmV0dXJuVHlwZTIgPSAzO1xuICAgICAgICBjb25zdCBnZW5lcmF0ZWRQcm9wc1R5cGUgPSBnZXRHZW5lcmF0ZWRQcm9wc0NvbnN0YW50VHlwZShub2RlLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGdlbmVyYXRlZFByb3BzVHlwZSA9PT0gMCkge1xuICAgICAgICAgIGNvbnN0YW50Q2FjaGUuc2V0KG5vZGUsIDApO1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZW5lcmF0ZWRQcm9wc1R5cGUgPCByZXR1cm5UeXBlMikge1xuICAgICAgICAgIHJldHVyblR5cGUyID0gZ2VuZXJhdGVkUHJvcHNUeXBlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGNoaWxkVHlwZSA9IGdldENvbnN0YW50VHlwZShub2RlLmNoaWxkcmVuW2ldLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoY2hpbGRUeXBlID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdGFudENhY2hlLnNldChub2RlLCAwKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hpbGRUeXBlIDwgcmV0dXJuVHlwZTIpIHtcbiAgICAgICAgICAgIHJldHVyblR5cGUyID0gY2hpbGRUeXBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmV0dXJuVHlwZTIgPiAxKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLnByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gbm9kZS5wcm9wc1tpXTtcbiAgICAgICAgICAgIGlmIChwLnR5cGUgPT09IDcgJiYgcC5uYW1lID09PSBcImJpbmRcIiAmJiBwLmV4cCkge1xuICAgICAgICAgICAgICBjb25zdCBleHBUeXBlID0gZ2V0Q29uc3RhbnRUeXBlKHAuZXhwLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgaWYgKGV4cFR5cGUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdGFudENhY2hlLnNldChub2RlLCAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZXhwVHlwZSA8IHJldHVyblR5cGUyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuVHlwZTIgPSBleHBUeXBlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlZ2VuTm9kZS5pc0Jsb2NrKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLnByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gbm9kZS5wcm9wc1tpXTtcbiAgICAgICAgICAgIGlmIChwLnR5cGUgPT09IDcpIHtcbiAgICAgICAgICAgICAgY29uc3RhbnRDYWNoZS5zZXQobm9kZSwgMCk7XG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb250ZXh0LnJlbW92ZUhlbHBlcihPUEVOX0JMT0NLKTtcbiAgICAgICAgICBjb250ZXh0LnJlbW92ZUhlbHBlcihcbiAgICAgICAgICAgIGdldFZOb2RlQmxvY2tIZWxwZXIoY29udGV4dC5pblNTUiwgY29kZWdlbk5vZGUuaXNDb21wb25lbnQpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb2RlZ2VuTm9kZS5pc0Jsb2NrID0gZmFsc2U7XG4gICAgICAgICAgY29udGV4dC5oZWxwZXIoZ2V0Vk5vZGVIZWxwZXIoY29udGV4dC5pblNTUiwgY29kZWdlbk5vZGUuaXNDb21wb25lbnQpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdGFudENhY2hlLnNldChub2RlLCByZXR1cm5UeXBlMik7XG4gICAgICAgIHJldHVybiByZXR1cm5UeXBlMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0YW50Q2FjaGUuc2V0KG5vZGUsIDApO1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICBjYXNlIDI6XG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIDM7XG4gICAgY2FzZSA5OlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSAxMDpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgNTpcbiAgICBjYXNlIDEyOlxuICAgICAgcmV0dXJuIGdldENvbnN0YW50VHlwZShub2RlLmNvbnRlbnQsIGNvbnRleHQpO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBub2RlLmNvbnN0VHlwZTtcbiAgICBjYXNlIDg6XG4gICAgICBsZXQgcmV0dXJuVHlwZSA9IDM7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgICBpZiAoaXNTdHJpbmcoY2hpbGQpIHx8IGlzU3ltYm9sKGNoaWxkKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoaWxkVHlwZSA9IGdldENvbnN0YW50VHlwZShjaGlsZCwgY29udGV4dCk7XG4gICAgICAgIGlmIChjaGlsZFR5cGUgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZFR5cGUgPCByZXR1cm5UeXBlKSB7XG4gICAgICAgICAgcmV0dXJuVHlwZSA9IGNoaWxkVHlwZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJldHVyblR5cGU7XG4gICAgY2FzZSAyMDpcbiAgICAgIHJldHVybiAyO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gMDtcbiAgfVxufVxuY29uc3QgYWxsb3dIb2lzdGVkSGVscGVyU2V0ID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICBOT1JNQUxJWkVfQ0xBU1MsXG4gIE5PUk1BTElaRV9TVFlMRSxcbiAgTk9STUFMSVpFX1BST1BTLFxuICBHVUFSRF9SRUFDVElWRV9QUk9QU1xuXSk7XG5mdW5jdGlvbiBnZXRDb25zdGFudFR5cGVPZkhlbHBlckNhbGwodmFsdWUsIGNvbnRleHQpIHtcbiAgaWYgKHZhbHVlLnR5cGUgPT09IDE0ICYmICFpc1N0cmluZyh2YWx1ZS5jYWxsZWUpICYmIGFsbG93SG9pc3RlZEhlbHBlclNldC5oYXModmFsdWUuY2FsbGVlKSkge1xuICAgIGNvbnN0IGFyZyA9IHZhbHVlLmFyZ3VtZW50c1swXTtcbiAgICBpZiAoYXJnLnR5cGUgPT09IDQpIHtcbiAgICAgIHJldHVybiBnZXRDb25zdGFudFR5cGUoYXJnLCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKGFyZy50eXBlID09PSAxNCkge1xuICAgICAgcmV0dXJuIGdldENvbnN0YW50VHlwZU9mSGVscGVyQ2FsbChhcmcsIGNvbnRleHQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIGdldEdlbmVyYXRlZFByb3BzQ29uc3RhbnRUeXBlKG5vZGUsIGNvbnRleHQpIHtcbiAgbGV0IHJldHVyblR5cGUgPSAzO1xuICBjb25zdCBwcm9wcyA9IGdldE5vZGVQcm9wcyhub2RlKTtcbiAgaWYgKHByb3BzICYmIHByb3BzLnR5cGUgPT09IDE1KSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0aWVzIH0gPSBwcm9wcztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gcHJvcGVydGllc1tpXTtcbiAgICAgIGNvbnN0IGtleVR5cGUgPSBnZXRDb25zdGFudFR5cGUoa2V5LCBjb250ZXh0KTtcbiAgICAgIGlmIChrZXlUeXBlID09PSAwKSB7XG4gICAgICAgIHJldHVybiBrZXlUeXBlO1xuICAgICAgfVxuICAgICAgaWYgKGtleVR5cGUgPCByZXR1cm5UeXBlKSB7XG4gICAgICAgIHJldHVyblR5cGUgPSBrZXlUeXBlO1xuICAgICAgfVxuICAgICAgbGV0IHZhbHVlVHlwZTtcbiAgICAgIGlmICh2YWx1ZS50eXBlID09PSA0KSB7XG4gICAgICAgIHZhbHVlVHlwZSA9IGdldENvbnN0YW50VHlwZSh2YWx1ZSwgY29udGV4dCk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlLnR5cGUgPT09IDE0KSB7XG4gICAgICAgIHZhbHVlVHlwZSA9IGdldENvbnN0YW50VHlwZU9mSGVscGVyQ2FsbCh2YWx1ZSwgY29udGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZVR5cGUgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlVHlwZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdmFsdWVUeXBlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlVHlwZSA8IHJldHVyblR5cGUpIHtcbiAgICAgICAgcmV0dXJuVHlwZSA9IHZhbHVlVHlwZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldHVyblR5cGU7XG59XG5mdW5jdGlvbiBnZXROb2RlUHJvcHMobm9kZSkge1xuICBjb25zdCBjb2RlZ2VuTm9kZSA9IG5vZGUuY29kZWdlbk5vZGU7XG4gIGlmIChjb2RlZ2VuTm9kZS50eXBlID09PSAxMykge1xuICAgIHJldHVybiBjb2RlZ2VuTm9kZS5wcm9wcztcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2Zvcm1Db250ZXh0KHJvb3QsIHtcbiAgZmlsZW5hbWUgPSBcIlwiLFxuICBwcmVmaXhJZGVudGlmaWVycyA9IGZhbHNlLFxuICBob2lzdFN0YXRpYyA9IGZhbHNlLFxuICBobXIgPSBmYWxzZSxcbiAgY2FjaGVIYW5kbGVycyA9IGZhbHNlLFxuICBub2RlVHJhbnNmb3JtcyA9IFtdLFxuICBkaXJlY3RpdmVUcmFuc2Zvcm1zID0ge30sXG4gIHRyYW5zZm9ybUhvaXN0ID0gbnVsbCxcbiAgaXNCdWlsdEluQ29tcG9uZW50ID0gTk9PUCxcbiAgaXNDdXN0b21FbGVtZW50ID0gTk9PUCxcbiAgZXhwcmVzc2lvblBsdWdpbnMgPSBbXSxcbiAgc2NvcGVJZCA9IG51bGwsXG4gIHNsb3R0ZWQgPSB0cnVlLFxuICBzc3IgPSBmYWxzZSxcbiAgaW5TU1IgPSBmYWxzZSxcbiAgc3NyQ3NzVmFycyA9IGBgLFxuICBiaW5kaW5nTWV0YWRhdGEgPSBFTVBUWV9PQkosXG4gIGlubGluZSA9IGZhbHNlLFxuICBpc1RTID0gZmFsc2UsXG4gIG9uRXJyb3IgPSBkZWZhdWx0T25FcnJvcixcbiAgb25XYXJuID0gZGVmYXVsdE9uV2FybixcbiAgY29tcGF0Q29uZmlnXG59KSB7XG4gIGNvbnN0IG5hbWVNYXRjaCA9IGZpbGVuYW1lLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLm1hdGNoKC8oW14vXFxcXF0rKVxcLlxcdyskLyk7XG4gIGNvbnN0IGNvbnRleHQgPSB7XG4gICAgLy8gb3B0aW9uc1xuICAgIGZpbGVuYW1lLFxuICAgIHNlbGZOYW1lOiBuYW1lTWF0Y2ggJiYgY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lTWF0Y2hbMV0pKSxcbiAgICBwcmVmaXhJZGVudGlmaWVycyxcbiAgICBob2lzdFN0YXRpYyxcbiAgICBobXIsXG4gICAgY2FjaGVIYW5kbGVycyxcbiAgICBub2RlVHJhbnNmb3JtcyxcbiAgICBkaXJlY3RpdmVUcmFuc2Zvcm1zLFxuICAgIHRyYW5zZm9ybUhvaXN0LFxuICAgIGlzQnVpbHRJbkNvbXBvbmVudCxcbiAgICBpc0N1c3RvbUVsZW1lbnQsXG4gICAgZXhwcmVzc2lvblBsdWdpbnMsXG4gICAgc2NvcGVJZCxcbiAgICBzbG90dGVkLFxuICAgIHNzcixcbiAgICBpblNTUixcbiAgICBzc3JDc3NWYXJzLFxuICAgIGJpbmRpbmdNZXRhZGF0YSxcbiAgICBpbmxpbmUsXG4gICAgaXNUUyxcbiAgICBvbkVycm9yLFxuICAgIG9uV2FybixcbiAgICBjb21wYXRDb25maWcsXG4gICAgLy8gc3RhdGVcbiAgICByb290LFxuICAgIGhlbHBlcnM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksXG4gICAgY29tcG9uZW50czogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICBkaXJlY3RpdmVzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLFxuICAgIGhvaXN0czogW10sXG4gICAgaW1wb3J0czogW10sXG4gICAgY2FjaGVkOiBbXSxcbiAgICBjb25zdGFudENhY2hlOiAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKSxcbiAgICB0ZW1wczogMCxcbiAgICBpZGVudGlmaWVyczogLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgc2NvcGVzOiB7XG4gICAgICB2Rm9yOiAwLFxuICAgICAgdlNsb3Q6IDAsXG4gICAgICB2UHJlOiAwLFxuICAgICAgdk9uY2U6IDBcbiAgICB9LFxuICAgIHBhcmVudDogbnVsbCxcbiAgICBncmFuZFBhcmVudDogbnVsbCxcbiAgICBjdXJyZW50Tm9kZTogcm9vdCxcbiAgICBjaGlsZEluZGV4OiAwLFxuICAgIGluVk9uY2U6IGZhbHNlLFxuICAgIC8vIG1ldGhvZHNcbiAgICBoZWxwZXIobmFtZSkge1xuICAgICAgY29uc3QgY291bnQgPSBjb250ZXh0LmhlbHBlcnMuZ2V0KG5hbWUpIHx8IDA7XG4gICAgICBjb250ZXh0LmhlbHBlcnMuc2V0KG5hbWUsIGNvdW50ICsgMSk7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9LFxuICAgIHJlbW92ZUhlbHBlcihuYW1lKSB7XG4gICAgICBjb25zdCBjb3VudCA9IGNvbnRleHQuaGVscGVycy5nZXQobmFtZSk7XG4gICAgICBpZiAoY291bnQpIHtcbiAgICAgICAgY29uc3QgY3VycmVudENvdW50ID0gY291bnQgLSAxO1xuICAgICAgICBpZiAoIWN1cnJlbnRDb3VudCkge1xuICAgICAgICAgIGNvbnRleHQuaGVscGVycy5kZWxldGUobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5oZWxwZXJzLnNldChuYW1lLCBjdXJyZW50Q291bnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBoZWxwZXJTdHJpbmcobmFtZSkge1xuICAgICAgcmV0dXJuIGBfJHtoZWxwZXJOYW1lTWFwW2NvbnRleHQuaGVscGVyKG5hbWUpXX1gO1xuICAgIH0sXG4gICAgcmVwbGFjZU5vZGUobm9kZSkge1xuICAgICAge1xuICAgICAgICBpZiAoIWNvbnRleHQuY3VycmVudE5vZGUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vZGUgYmVpbmcgcmVwbGFjZWQgaXMgYWxyZWFkeSByZW1vdmVkLmApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29udGV4dC5wYXJlbnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZXBsYWNlIHJvb3Qgbm9kZS5gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29udGV4dC5wYXJlbnQuY2hpbGRyZW5bY29udGV4dC5jaGlsZEluZGV4XSA9IGNvbnRleHQuY3VycmVudE5vZGUgPSBub2RlO1xuICAgIH0sXG4gICAgcmVtb3ZlTm9kZShub2RlKSB7XG4gICAgICBpZiAoIWNvbnRleHQucGFyZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlbW92ZSByb290IG5vZGUuYCk7XG4gICAgICB9XG4gICAgICBjb25zdCBsaXN0ID0gY29udGV4dC5wYXJlbnQuY2hpbGRyZW47XG4gICAgICBjb25zdCByZW1vdmFsSW5kZXggPSBub2RlID8gbGlzdC5pbmRleE9mKG5vZGUpIDogY29udGV4dC5jdXJyZW50Tm9kZSA/IGNvbnRleHQuY2hpbGRJbmRleCA6IC0xO1xuICAgICAgaWYgKHJlbW92YWxJbmRleCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub2RlIGJlaW5nIHJlbW92ZWQgaXMgbm90IGEgY2hpbGQgb2YgY3VycmVudCBwYXJlbnRgKTtcbiAgICAgIH1cbiAgICAgIGlmICghbm9kZSB8fCBub2RlID09PSBjb250ZXh0LmN1cnJlbnROb2RlKSB7XG4gICAgICAgIGNvbnRleHQuY3VycmVudE5vZGUgPSBudWxsO1xuICAgICAgICBjb250ZXh0Lm9uTm9kZVJlbW92ZWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb250ZXh0LmNoaWxkSW5kZXggPiByZW1vdmFsSW5kZXgpIHtcbiAgICAgICAgICBjb250ZXh0LmNoaWxkSW5kZXgtLTtcbiAgICAgICAgICBjb250ZXh0Lm9uTm9kZVJlbW92ZWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29udGV4dC5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKHJlbW92YWxJbmRleCwgMSk7XG4gICAgfSxcbiAgICBvbk5vZGVSZW1vdmVkOiBOT09QLFxuICAgIGFkZElkZW50aWZpZXJzKGV4cCkge1xuICAgIH0sXG4gICAgcmVtb3ZlSWRlbnRpZmllcnMoZXhwKSB7XG4gICAgfSxcbiAgICBob2lzdChleHApIHtcbiAgICAgIGlmIChpc1N0cmluZyhleHApKSBleHAgPSBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGV4cCk7XG4gICAgICBjb250ZXh0LmhvaXN0cy5wdXNoKGV4cCk7XG4gICAgICBjb25zdCBpZGVudGlmaWVyID0gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihcbiAgICAgICAgYF9ob2lzdGVkXyR7Y29udGV4dC5ob2lzdHMubGVuZ3RofWAsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBleHAubG9jLFxuICAgICAgICAyXG4gICAgICApO1xuICAgICAgaWRlbnRpZmllci5ob2lzdGVkID0gZXhwO1xuICAgICAgcmV0dXJuIGlkZW50aWZpZXI7XG4gICAgfSxcbiAgICBjYWNoZShleHAsIGlzVk5vZGUgPSBmYWxzZSwgaW5WT25jZSA9IGZhbHNlKSB7XG4gICAgICBjb25zdCBjYWNoZUV4cCA9IGNyZWF0ZUNhY2hlRXhwcmVzc2lvbihcbiAgICAgICAgY29udGV4dC5jYWNoZWQubGVuZ3RoLFxuICAgICAgICBleHAsXG4gICAgICAgIGlzVk5vZGUsXG4gICAgICAgIGluVk9uY2VcbiAgICAgICk7XG4gICAgICBjb250ZXh0LmNhY2hlZC5wdXNoKGNhY2hlRXhwKTtcbiAgICAgIHJldHVybiBjYWNoZUV4cDtcbiAgICB9XG4gIH07XG4gIHJldHVybiBjb250ZXh0O1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtKHJvb3QsIG9wdGlvbnMpIHtcbiAgY29uc3QgY29udGV4dCA9IGNyZWF0ZVRyYW5zZm9ybUNvbnRleHQocm9vdCwgb3B0aW9ucyk7XG4gIHRyYXZlcnNlTm9kZShyb290LCBjb250ZXh0KTtcbiAgaWYgKG9wdGlvbnMuaG9pc3RTdGF0aWMpIHtcbiAgICBjYWNoZVN0YXRpYyhyb290LCBjb250ZXh0KTtcbiAgfVxuICBpZiAoIW9wdGlvbnMuc3NyKSB7XG4gICAgY3JlYXRlUm9vdENvZGVnZW4ocm9vdCwgY29udGV4dCk7XG4gIH1cbiAgcm9vdC5oZWxwZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoWy4uLmNvbnRleHQuaGVscGVycy5rZXlzKCldKTtcbiAgcm9vdC5jb21wb25lbnRzID0gWy4uLmNvbnRleHQuY29tcG9uZW50c107XG4gIHJvb3QuZGlyZWN0aXZlcyA9IFsuLi5jb250ZXh0LmRpcmVjdGl2ZXNdO1xuICByb290LmltcG9ydHMgPSBjb250ZXh0LmltcG9ydHM7XG4gIHJvb3QuaG9pc3RzID0gY29udGV4dC5ob2lzdHM7XG4gIHJvb3QudGVtcHMgPSBjb250ZXh0LnRlbXBzO1xuICByb290LmNhY2hlZCA9IGNvbnRleHQuY2FjaGVkO1xuICByb290LnRyYW5zZm9ybWVkID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJvb3RDb2RlZ2VuKHJvb3QsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBoZWxwZXIgfSA9IGNvbnRleHQ7XG4gIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHJvb3Q7XG4gIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuWzBdO1xuICAgIGlmIChpc1NpbmdsZUVsZW1lbnRSb290KHJvb3QsIGNoaWxkKSAmJiBjaGlsZC5jb2RlZ2VuTm9kZSkge1xuICAgICAgY29uc3QgY29kZWdlbk5vZGUgPSBjaGlsZC5jb2RlZ2VuTm9kZTtcbiAgICAgIGlmIChjb2RlZ2VuTm9kZS50eXBlID09PSAxMykge1xuICAgICAgICBjb252ZXJ0VG9CbG9jayhjb2RlZ2VuTm9kZSwgY29udGV4dCk7XG4gICAgICB9XG4gICAgICByb290LmNvZGVnZW5Ob2RlID0gY29kZWdlbk5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvb3QuY29kZWdlbk5vZGUgPSBjaGlsZDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgIGxldCBwYXRjaEZsYWcgPSA2NDtcbiAgICBpZiAoY2hpbGRyZW4uZmlsdGVyKChjKSA9PiBjLnR5cGUgIT09IDMpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcGF0Y2hGbGFnIHw9IDIwNDg7XG4gICAgfVxuICAgIHJvb3QuY29kZWdlbk5vZGUgPSBjcmVhdGVWTm9kZUNhbGwoXG4gICAgICBjb250ZXh0LFxuICAgICAgaGVscGVyKEZSQUdNRU5UKSxcbiAgICAgIHZvaWQgMCxcbiAgICAgIHJvb3QuY2hpbGRyZW4sXG4gICAgICBwYXRjaEZsYWcsXG4gICAgICB2b2lkIDAsXG4gICAgICB2b2lkIDAsXG4gICAgICB0cnVlLFxuICAgICAgdm9pZCAwLFxuICAgICAgZmFsc2VcbiAgICApO1xuICB9IGVsc2UgO1xufVxuZnVuY3Rpb24gdHJhdmVyc2VDaGlsZHJlbihwYXJlbnQsIGNvbnRleHQpIHtcbiAgbGV0IGkgPSAwO1xuICBjb25zdCBub2RlUmVtb3ZlZCA9ICgpID0+IHtcbiAgICBpLS07XG4gIH07XG4gIGZvciAoOyBpIDwgcGFyZW50LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hpbGQgPSBwYXJlbnQuY2hpbGRyZW5baV07XG4gICAgaWYgKGlzU3RyaW5nKGNoaWxkKSkgY29udGludWU7XG4gICAgY29udGV4dC5ncmFuZFBhcmVudCA9IGNvbnRleHQucGFyZW50O1xuICAgIGNvbnRleHQucGFyZW50ID0gcGFyZW50O1xuICAgIGNvbnRleHQuY2hpbGRJbmRleCA9IGk7XG4gICAgY29udGV4dC5vbk5vZGVSZW1vdmVkID0gbm9kZVJlbW92ZWQ7XG4gICAgdHJhdmVyc2VOb2RlKGNoaWxkLCBjb250ZXh0KTtcbiAgfVxufVxuZnVuY3Rpb24gdHJhdmVyc2VOb2RlKG5vZGUsIGNvbnRleHQpIHtcbiAgY29udGV4dC5jdXJyZW50Tm9kZSA9IG5vZGU7XG4gIGNvbnN0IHsgbm9kZVRyYW5zZm9ybXMgfSA9IGNvbnRleHQ7XG4gIGNvbnN0IGV4aXRGbnMgPSBbXTtcbiAgZm9yIChsZXQgaTIgPSAwOyBpMiA8IG5vZGVUcmFuc2Zvcm1zLmxlbmd0aDsgaTIrKykge1xuICAgIGNvbnN0IG9uRXhpdCA9IG5vZGVUcmFuc2Zvcm1zW2kyXShub2RlLCBjb250ZXh0KTtcbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBpZiAoaXNBcnJheShvbkV4aXQpKSB7XG4gICAgICAgIGV4aXRGbnMucHVzaCguLi5vbkV4aXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhpdEZucy5wdXNoKG9uRXhpdCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghY29udGV4dC5jdXJyZW50Tm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlID0gY29udGV4dC5jdXJyZW50Tm9kZTtcbiAgICB9XG4gIH1cbiAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICBjYXNlIDM6XG4gICAgICBpZiAoIWNvbnRleHQuc3NyKSB7XG4gICAgICAgIGNvbnRleHQuaGVscGVyKENSRUFURV9DT01NRU5UKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIGlmICghY29udGV4dC5zc3IpIHtcbiAgICAgICAgY29udGV4dC5oZWxwZXIoVE9fRElTUExBWV9TVFJJTkcpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgLy8gZm9yIGNvbnRhaW5lciB0eXBlcywgZnVydGhlciB0cmF2ZXJzZSBkb3dud2FyZHNcbiAgICBjYXNlIDk6XG4gICAgICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgbm9kZS5icmFuY2hlcy5sZW5ndGg7IGkyKyspIHtcbiAgICAgICAgdHJhdmVyc2VOb2RlKG5vZGUuYnJhbmNoZXNbaTJdLCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAwOlxuICAgICAgdHJhdmVyc2VDaGlsZHJlbihub2RlLCBjb250ZXh0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIGNvbnRleHQuY3VycmVudE5vZGUgPSBub2RlO1xuICBsZXQgaSA9IGV4aXRGbnMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgZXhpdEZuc1tpXSgpO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVTdHJ1Y3R1cmFsRGlyZWN0aXZlVHJhbnNmb3JtKG5hbWUsIGZuKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBpc1N0cmluZyhuYW1lKSA/IChuKSA9PiBuID09PSBuYW1lIDogKG4pID0+IG5hbWUudGVzdChuKTtcbiAgcmV0dXJuIChub2RlLCBjb250ZXh0KSA9PiB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgICAgY29uc3QgeyBwcm9wcyB9ID0gbm9kZTtcbiAgICAgIGlmIChub2RlLnRhZ1R5cGUgPT09IDMgJiYgcHJvcHMuc29tZShpc1ZTbG90KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBleGl0Rm5zID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHByb3AgPSBwcm9wc1tpXTtcbiAgICAgICAgaWYgKHByb3AudHlwZSA9PT0gNyAmJiBtYXRjaGVzKHByb3AubmFtZSkpIHtcbiAgICAgICAgICBwcm9wcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgaS0tO1xuICAgICAgICAgIGNvbnN0IG9uRXhpdCA9IGZuKG5vZGUsIHByb3AsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChvbkV4aXQpIGV4aXRGbnMucHVzaChvbkV4aXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZXhpdEZucztcbiAgICB9XG4gIH07XG59XG5cbmNvbnN0IFBVUkVfQU5OT1RBVElPTiA9IGAvKkBfX1BVUkVfXyovYDtcbmNvbnN0IGFsaWFzSGVscGVyID0gKHMpID0+IGAke2hlbHBlck5hbWVNYXBbc119OiBfJHtoZWxwZXJOYW1lTWFwW3NdfWA7XG5mdW5jdGlvbiBjcmVhdGVDb2RlZ2VuQ29udGV4dChhc3QsIHtcbiAgbW9kZSA9IFwiZnVuY3Rpb25cIixcbiAgcHJlZml4SWRlbnRpZmllcnMgPSBtb2RlID09PSBcIm1vZHVsZVwiLFxuICBzb3VyY2VNYXAgPSBmYWxzZSxcbiAgZmlsZW5hbWUgPSBgdGVtcGxhdGUudnVlLmh0bWxgLFxuICBzY29wZUlkID0gbnVsbCxcbiAgb3B0aW1pemVJbXBvcnRzID0gZmFsc2UsXG4gIHJ1bnRpbWVHbG9iYWxOYW1lID0gYFZ1ZWAsXG4gIHJ1bnRpbWVNb2R1bGVOYW1lID0gYHZ1ZWAsXG4gIHNzclJ1bnRpbWVNb2R1bGVOYW1lID0gXCJ2dWUvc2VydmVyLXJlbmRlcmVyXCIsXG4gIHNzciA9IGZhbHNlLFxuICBpc1RTID0gZmFsc2UsXG4gIGluU1NSID0gZmFsc2Vcbn0pIHtcbiAgY29uc3QgY29udGV4dCA9IHtcbiAgICBtb2RlLFxuICAgIHByZWZpeElkZW50aWZpZXJzLFxuICAgIHNvdXJjZU1hcCxcbiAgICBmaWxlbmFtZSxcbiAgICBzY29wZUlkLFxuICAgIG9wdGltaXplSW1wb3J0cyxcbiAgICBydW50aW1lR2xvYmFsTmFtZSxcbiAgICBydW50aW1lTW9kdWxlTmFtZSxcbiAgICBzc3JSdW50aW1lTW9kdWxlTmFtZSxcbiAgICBzc3IsXG4gICAgaXNUUyxcbiAgICBpblNTUixcbiAgICBzb3VyY2U6IGFzdC5zb3VyY2UsXG4gICAgY29kZTogYGAsXG4gICAgY29sdW1uOiAxLFxuICAgIGxpbmU6IDEsXG4gICAgb2Zmc2V0OiAwLFxuICAgIGluZGVudExldmVsOiAwLFxuICAgIHB1cmU6IGZhbHNlLFxuICAgIG1hcDogdm9pZCAwLFxuICAgIGhlbHBlcihrZXkpIHtcbiAgICAgIHJldHVybiBgXyR7aGVscGVyTmFtZU1hcFtrZXldfWA7XG4gICAgfSxcbiAgICBwdXNoKGNvZGUsIG5ld2xpbmVJbmRleCA9IC0yIC8qIE5vbmUgKi8sIG5vZGUpIHtcbiAgICAgIGNvbnRleHQuY29kZSArPSBjb2RlO1xuICAgIH0sXG4gICAgaW5kZW50KCkge1xuICAgICAgbmV3bGluZSgrK2NvbnRleHQuaW5kZW50TGV2ZWwpO1xuICAgIH0sXG4gICAgZGVpbmRlbnQod2l0aG91dE5ld0xpbmUgPSBmYWxzZSkge1xuICAgICAgaWYgKHdpdGhvdXROZXdMaW5lKSB7XG4gICAgICAgIC0tY29udGV4dC5pbmRlbnRMZXZlbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld2xpbmUoLS1jb250ZXh0LmluZGVudExldmVsKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG5ld2xpbmUoKSB7XG4gICAgICBuZXdsaW5lKGNvbnRleHQuaW5kZW50TGV2ZWwpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gbmV3bGluZShuKSB7XG4gICAgY29udGV4dC5wdXNoKFwiXFxuXCIgKyBgICBgLnJlcGVhdChuKSwgMCAvKiBTdGFydCAqLyk7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZShhc3QsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBjb250ZXh0ID0gY3JlYXRlQ29kZWdlbkNvbnRleHQoYXN0LCBvcHRpb25zKTtcbiAgaWYgKG9wdGlvbnMub25Db250ZXh0Q3JlYXRlZCkgb3B0aW9ucy5vbkNvbnRleHRDcmVhdGVkKGNvbnRleHQpO1xuICBjb25zdCB7XG4gICAgbW9kZSxcbiAgICBwdXNoLFxuICAgIHByZWZpeElkZW50aWZpZXJzLFxuICAgIGluZGVudCxcbiAgICBkZWluZGVudCxcbiAgICBuZXdsaW5lLFxuICAgIHNjb3BlSWQsXG4gICAgc3NyXG4gIH0gPSBjb250ZXh0O1xuICBjb25zdCBoZWxwZXJzID0gQXJyYXkuZnJvbShhc3QuaGVscGVycyk7XG4gIGNvbnN0IGhhc0hlbHBlcnMgPSBoZWxwZXJzLmxlbmd0aCA+IDA7XG4gIGNvbnN0IHVzZVdpdGhCbG9jayA9ICFwcmVmaXhJZGVudGlmaWVycyAmJiBtb2RlICE9PSBcIm1vZHVsZVwiO1xuICBjb25zdCBwcmVhbWJsZUNvbnRleHQgPSBjb250ZXh0O1xuICB7XG4gICAgZ2VuRnVuY3Rpb25QcmVhbWJsZShhc3QsIHByZWFtYmxlQ29udGV4dCk7XG4gIH1cbiAgY29uc3QgZnVuY3Rpb25OYW1lID0gc3NyID8gYHNzclJlbmRlcmAgOiBgcmVuZGVyYDtcbiAgY29uc3QgYXJncyA9IHNzciA/IFtcIl9jdHhcIiwgXCJfcHVzaFwiLCBcIl9wYXJlbnRcIiwgXCJfYXR0cnNcIl0gOiBbXCJfY3R4XCIsIFwiX2NhY2hlXCJdO1xuICBjb25zdCBzaWduYXR1cmUgPSBhcmdzLmpvaW4oXCIsIFwiKTtcbiAge1xuICAgIHB1c2goYGZ1bmN0aW9uICR7ZnVuY3Rpb25OYW1lfSgke3NpZ25hdHVyZX0pIHtgKTtcbiAgfVxuICBpbmRlbnQoKTtcbiAgaWYgKHVzZVdpdGhCbG9jaykge1xuICAgIHB1c2goYHdpdGggKF9jdHgpIHtgKTtcbiAgICBpbmRlbnQoKTtcbiAgICBpZiAoaGFzSGVscGVycykge1xuICAgICAgcHVzaChcbiAgICAgICAgYGNvbnN0IHsgJHtoZWxwZXJzLm1hcChhbGlhc0hlbHBlcikuam9pbihcIiwgXCIpfSB9ID0gX1Z1ZVxuYCxcbiAgICAgICAgLTEgLyogRW5kICovXG4gICAgICApO1xuICAgICAgbmV3bGluZSgpO1xuICAgIH1cbiAgfVxuICBpZiAoYXN0LmNvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgZ2VuQXNzZXRzKGFzdC5jb21wb25lbnRzLCBcImNvbXBvbmVudFwiLCBjb250ZXh0KTtcbiAgICBpZiAoYXN0LmRpcmVjdGl2ZXMubGVuZ3RoIHx8IGFzdC50ZW1wcyA+IDApIHtcbiAgICAgIG5ld2xpbmUoKTtcbiAgICB9XG4gIH1cbiAgaWYgKGFzdC5kaXJlY3RpdmVzLmxlbmd0aCkge1xuICAgIGdlbkFzc2V0cyhhc3QuZGlyZWN0aXZlcywgXCJkaXJlY3RpdmVcIiwgY29udGV4dCk7XG4gICAgaWYgKGFzdC50ZW1wcyA+IDApIHtcbiAgICAgIG5ld2xpbmUoKTtcbiAgICB9XG4gIH1cbiAgaWYgKGFzdC50ZW1wcyA+IDApIHtcbiAgICBwdXNoKGBsZXQgYCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc3QudGVtcHM7IGkrKykge1xuICAgICAgcHVzaChgJHtpID4gMCA/IGAsIGAgOiBgYH1fdGVtcCR7aX1gKTtcbiAgICB9XG4gIH1cbiAgaWYgKGFzdC5jb21wb25lbnRzLmxlbmd0aCB8fCBhc3QuZGlyZWN0aXZlcy5sZW5ndGggfHwgYXN0LnRlbXBzKSB7XG4gICAgcHVzaChgXG5gLCAwIC8qIFN0YXJ0ICovKTtcbiAgICBuZXdsaW5lKCk7XG4gIH1cbiAgaWYgKCFzc3IpIHtcbiAgICBwdXNoKGByZXR1cm4gYCk7XG4gIH1cbiAgaWYgKGFzdC5jb2RlZ2VuTm9kZSkge1xuICAgIGdlbk5vZGUoYXN0LmNvZGVnZW5Ob2RlLCBjb250ZXh0KTtcbiAgfSBlbHNlIHtcbiAgICBwdXNoKGBudWxsYCk7XG4gIH1cbiAgaWYgKHVzZVdpdGhCbG9jaykge1xuICAgIGRlaW5kZW50KCk7XG4gICAgcHVzaChgfWApO1xuICB9XG4gIGRlaW5kZW50KCk7XG4gIHB1c2goYH1gKTtcbiAgcmV0dXJuIHtcbiAgICBhc3QsXG4gICAgY29kZTogY29udGV4dC5jb2RlLFxuICAgIHByZWFtYmxlOiBgYCxcbiAgICBtYXA6IGNvbnRleHQubWFwID8gY29udGV4dC5tYXAudG9KU09OKCkgOiB2b2lkIDBcbiAgfTtcbn1cbmZ1bmN0aW9uIGdlbkZ1bmN0aW9uUHJlYW1ibGUoYXN0LCBjb250ZXh0KSB7XG4gIGNvbnN0IHtcbiAgICBzc3IsXG4gICAgcHJlZml4SWRlbnRpZmllcnMsXG4gICAgcHVzaCxcbiAgICBuZXdsaW5lLFxuICAgIHJ1bnRpbWVNb2R1bGVOYW1lLFxuICAgIHJ1bnRpbWVHbG9iYWxOYW1lLFxuICAgIHNzclJ1bnRpbWVNb2R1bGVOYW1lXG4gIH0gPSBjb250ZXh0O1xuICBjb25zdCBWdWVCaW5kaW5nID0gcnVudGltZUdsb2JhbE5hbWU7XG4gIGNvbnN0IGhlbHBlcnMgPSBBcnJheS5mcm9tKGFzdC5oZWxwZXJzKTtcbiAgaWYgKGhlbHBlcnMubGVuZ3RoID4gMCkge1xuICAgIHtcbiAgICAgIHB1c2goYGNvbnN0IF9WdWUgPSAke1Z1ZUJpbmRpbmd9XG5gLCAtMSAvKiBFbmQgKi8pO1xuICAgICAgaWYgKGFzdC5ob2lzdHMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHN0YXRpY0hlbHBlcnMgPSBbXG4gICAgICAgICAgQ1JFQVRFX1ZOT0RFLFxuICAgICAgICAgIENSRUFURV9FTEVNRU5UX1ZOT0RFLFxuICAgICAgICAgIENSRUFURV9DT01NRU5ULFxuICAgICAgICAgIENSRUFURV9URVhULFxuICAgICAgICAgIENSRUFURV9TVEFUSUNcbiAgICAgICAgXS5maWx0ZXIoKGhlbHBlcikgPT4gaGVscGVycy5pbmNsdWRlcyhoZWxwZXIpKS5tYXAoYWxpYXNIZWxwZXIpLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgcHVzaChgY29uc3QgeyAke3N0YXRpY0hlbHBlcnN9IH0gPSBfVnVlXG5gLCAtMSAvKiBFbmQgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBnZW5Ib2lzdHMoYXN0LmhvaXN0cywgY29udGV4dCk7XG4gIG5ld2xpbmUoKTtcbiAgcHVzaChgcmV0dXJuIGApO1xufVxuZnVuY3Rpb24gZ2VuQXNzZXRzKGFzc2V0cywgdHlwZSwgeyBoZWxwZXIsIHB1c2gsIG5ld2xpbmUsIGlzVFMgfSkge1xuICBjb25zdCByZXNvbHZlciA9IGhlbHBlcihcbiAgICB0eXBlID09PSBcImNvbXBvbmVudFwiID8gUkVTT0xWRV9DT01QT05FTlQgOiBSRVNPTFZFX0RJUkVDVElWRVxuICApO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFzc2V0cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpZCA9IGFzc2V0c1tpXTtcbiAgICBjb25zdCBtYXliZVNlbGZSZWZlcmVuY2UgPSBpZC5lbmRzV2l0aChcIl9fc2VsZlwiKTtcbiAgICBpZiAobWF5YmVTZWxmUmVmZXJlbmNlKSB7XG4gICAgICBpZCA9IGlkLnNsaWNlKDAsIC02KTtcbiAgICB9XG4gICAgcHVzaChcbiAgICAgIGBjb25zdCAke3RvVmFsaWRBc3NldElkKGlkLCB0eXBlKX0gPSAke3Jlc29sdmVyfSgke0pTT04uc3RyaW5naWZ5KGlkKX0ke21heWJlU2VsZlJlZmVyZW5jZSA/IGAsIHRydWVgIDogYGB9KSR7aXNUUyA/IGAhYCA6IGBgfWBcbiAgICApO1xuICAgIGlmIChpIDwgYXNzZXRzLmxlbmd0aCAtIDEpIHtcbiAgICAgIG5ld2xpbmUoKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdlbkhvaXN0cyhob2lzdHMsIGNvbnRleHQpIHtcbiAgaWYgKCFob2lzdHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnRleHQucHVyZSA9IHRydWU7XG4gIGNvbnN0IHsgcHVzaCwgbmV3bGluZSB9ID0gY29udGV4dDtcbiAgbmV3bGluZSgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGhvaXN0cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGV4cCA9IGhvaXN0c1tpXTtcbiAgICBpZiAoZXhwKSB7XG4gICAgICBwdXNoKGBjb25zdCBfaG9pc3RlZF8ke2kgKyAxfSA9IGApO1xuICAgICAgZ2VuTm9kZShleHAsIGNvbnRleHQpO1xuICAgICAgbmV3bGluZSgpO1xuICAgIH1cbiAgfVxuICBjb250ZXh0LnB1cmUgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzVGV4dChuKSB7XG4gIHJldHVybiBpc1N0cmluZyhuKSB8fCBuLnR5cGUgPT09IDQgfHwgbi50eXBlID09PSAyIHx8IG4udHlwZSA9PT0gNSB8fCBuLnR5cGUgPT09IDg7XG59XG5mdW5jdGlvbiBnZW5Ob2RlTGlzdEFzQXJyYXkobm9kZXMsIGNvbnRleHQpIHtcbiAgY29uc3QgbXVsdGlsaW5lcyA9IG5vZGVzLmxlbmd0aCA+IDMgfHwgbm9kZXMuc29tZSgobikgPT4gaXNBcnJheShuKSB8fCAhaXNUZXh0KG4pKTtcbiAgY29udGV4dC5wdXNoKGBbYCk7XG4gIG11bHRpbGluZXMgJiYgY29udGV4dC5pbmRlbnQoKTtcbiAgZ2VuTm9kZUxpc3Qobm9kZXMsIGNvbnRleHQsIG11bHRpbGluZXMpO1xuICBtdWx0aWxpbmVzICYmIGNvbnRleHQuZGVpbmRlbnQoKTtcbiAgY29udGV4dC5wdXNoKGBdYCk7XG59XG5mdW5jdGlvbiBnZW5Ob2RlTGlzdChub2RlcywgY29udGV4dCwgbXVsdGlsaW5lcyA9IGZhbHNlLCBjb21tYSA9IHRydWUpIHtcbiAgY29uc3QgeyBwdXNoLCBuZXdsaW5lIH0gPSBjb250ZXh0O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgIGlmIChpc1N0cmluZyhub2RlKSkge1xuICAgICAgcHVzaChub2RlLCAtMyAvKiBVbmtub3duICovKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkobm9kZSkpIHtcbiAgICAgIGdlbk5vZGVMaXN0QXNBcnJheShub2RlLCBjb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuTm9kZShub2RlLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKGkgPCBub2Rlcy5sZW5ndGggLSAxKSB7XG4gICAgICBpZiAobXVsdGlsaW5lcykge1xuICAgICAgICBjb21tYSAmJiBwdXNoKFwiLFwiKTtcbiAgICAgICAgbmV3bGluZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tbWEgJiYgcHVzaChcIiwgXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2VuTm9kZShub2RlLCBjb250ZXh0KSB7XG4gIGlmIChpc1N0cmluZyhub2RlKSkge1xuICAgIGNvbnRleHQucHVzaChub2RlLCAtMyAvKiBVbmtub3duICovKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGlzU3ltYm9sKG5vZGUpKSB7XG4gICAgY29udGV4dC5wdXNoKGNvbnRleHQuaGVscGVyKG5vZGUpKTtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSA5OlxuICAgIGNhc2UgMTE6XG4gICAgICBhc3NlcnQoXG4gICAgICAgIG5vZGUuY29kZWdlbk5vZGUgIT0gbnVsbCxcbiAgICAgICAgYENvZGVnZW4gbm9kZSBpcyBtaXNzaW5nIGZvciBlbGVtZW50L2lmL2ZvciBub2RlLiBBcHBseSBhcHByb3ByaWF0ZSB0cmFuc2Zvcm1zIGZpcnN0LmBcbiAgICAgICk7XG4gICAgICBnZW5Ob2RlKG5vZGUuY29kZWdlbk5vZGUsIGNvbnRleHQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgZ2VuVGV4dChub2RlLCBjb250ZXh0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIGdlbkV4cHJlc3Npb24obm9kZSwgY29udGV4dCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICBnZW5JbnRlcnBvbGF0aW9uKG5vZGUsIGNvbnRleHQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMjpcbiAgICAgIGdlbk5vZGUobm9kZS5jb2RlZ2VuTm9kZSwgY29udGV4dCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDg6XG4gICAgICBnZW5Db21wb3VuZEV4cHJlc3Npb24obm9kZSwgY29udGV4dCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICBnZW5Db21tZW50KG5vZGUsIGNvbnRleHQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIGdlblZOb2RlQ2FsbChub2RlLCBjb250ZXh0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTQ6XG4gICAgICBnZW5DYWxsRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTU6XG4gICAgICBnZW5PYmplY3RFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxNzpcbiAgICAgIGdlbkFycmF5RXhwcmVzc2lvbihub2RlLCBjb250ZXh0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTg6XG4gICAgICBnZW5GdW5jdGlvbkV4cHJlc3Npb24obm9kZSwgY29udGV4dCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE5OlxuICAgICAgZ2VuQ29uZGl0aW9uYWxFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMDpcbiAgICAgIGdlbkNhY2hlRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjE6XG4gICAgICBnZW5Ob2RlTGlzdChub2RlLmJvZHksIGNvbnRleHQsIHRydWUsIGZhbHNlKTtcbiAgICAgIGJyZWFrO1xuICAgIC8vIFNTUiBvbmx5IHR5cGVzXG4gICAgY2FzZSAyMjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjM6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI0OlxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyNTpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjY6XG4gICAgICBicmVhaztcbiAgICAvKiB2OCBpZ25vcmUgc3RhcnQgKi9cbiAgICBjYXNlIDEwOlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgYXNzZXJ0KGZhbHNlLCBgdW5oYW5kbGVkIGNvZGVnZW4gbm9kZSB0eXBlOiAke25vZGUudHlwZX1gKTtcbiAgICAgICAgY29uc3QgZXhoYXVzdGl2ZUNoZWNrID0gbm9kZTtcbiAgICAgICAgcmV0dXJuIGV4aGF1c3RpdmVDaGVjaztcbiAgICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2VuVGV4dChub2RlLCBjb250ZXh0KSB7XG4gIGNvbnRleHQucHVzaChKU09OLnN0cmluZ2lmeShub2RlLmNvbnRlbnQpLCAtMyAvKiBVbmtub3duICovLCBub2RlKTtcbn1cbmZ1bmN0aW9uIGdlbkV4cHJlc3Npb24obm9kZSwgY29udGV4dCkge1xuICBjb25zdCB7IGNvbnRlbnQsIGlzU3RhdGljIH0gPSBub2RlO1xuICBjb250ZXh0LnB1c2goXG4gICAgaXNTdGF0aWMgPyBKU09OLnN0cmluZ2lmeShjb250ZW50KSA6IGNvbnRlbnQsXG4gICAgLTMgLyogVW5rbm93biAqLyxcbiAgICBub2RlXG4gICk7XG59XG5mdW5jdGlvbiBnZW5JbnRlcnBvbGF0aW9uKG5vZGUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBwdXNoLCBoZWxwZXIsIHB1cmUgfSA9IGNvbnRleHQ7XG4gIGlmIChwdXJlKSBwdXNoKFBVUkVfQU5OT1RBVElPTik7XG4gIHB1c2goYCR7aGVscGVyKFRPX0RJU1BMQVlfU1RSSU5HKX0oYCk7XG4gIGdlbk5vZGUobm9kZS5jb250ZW50LCBjb250ZXh0KTtcbiAgcHVzaChgKWApO1xufVxuZnVuY3Rpb24gZ2VuQ29tcG91bmRFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1N0cmluZyhjaGlsZCkpIHtcbiAgICAgIGNvbnRleHQucHVzaChjaGlsZCwgLTMgLyogVW5rbm93biAqLyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbk5vZGUoY2hpbGQsIGNvbnRleHQpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2VuRXhwcmVzc2lvbkFzUHJvcGVydHlLZXkobm9kZSwgY29udGV4dCkge1xuICBjb25zdCB7IHB1c2ggfSA9IGNvbnRleHQ7XG4gIGlmIChub2RlLnR5cGUgPT09IDgpIHtcbiAgICBwdXNoKGBbYCk7XG4gICAgZ2VuQ29tcG91bmRFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpO1xuICAgIHB1c2goYF1gKTtcbiAgfSBlbHNlIGlmIChub2RlLmlzU3RhdGljKSB7XG4gICAgY29uc3QgdGV4dCA9IGlzU2ltcGxlSWRlbnRpZmllcihub2RlLmNvbnRlbnQpID8gbm9kZS5jb250ZW50IDogSlNPTi5zdHJpbmdpZnkobm9kZS5jb250ZW50KTtcbiAgICBwdXNoKHRleHQsIC0yIC8qIE5vbmUgKi8sIG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIHB1c2goYFske25vZGUuY29udGVudH1dYCwgLTMgLyogVW5rbm93biAqLywgbm9kZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdlbkNvbW1lbnQobm9kZSwgY29udGV4dCkge1xuICBjb25zdCB7IHB1c2gsIGhlbHBlciwgcHVyZSB9ID0gY29udGV4dDtcbiAgaWYgKHB1cmUpIHtcbiAgICBwdXNoKFBVUkVfQU5OT1RBVElPTik7XG4gIH1cbiAgcHVzaChcbiAgICBgJHtoZWxwZXIoQ1JFQVRFX0NPTU1FTlQpfSgke0pTT04uc3RyaW5naWZ5KG5vZGUuY29udGVudCl9KWAsXG4gICAgLTMgLyogVW5rbm93biAqLyxcbiAgICBub2RlXG4gICk7XG59XG5mdW5jdGlvbiBnZW5WTm9kZUNhbGwobm9kZSwgY29udGV4dCkge1xuICBjb25zdCB7IHB1c2gsIGhlbHBlciwgcHVyZSB9ID0gY29udGV4dDtcbiAgY29uc3Qge1xuICAgIHRhZyxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBwYXRjaEZsYWcsXG4gICAgZHluYW1pY1Byb3BzLFxuICAgIGRpcmVjdGl2ZXMsXG4gICAgaXNCbG9jayxcbiAgICBkaXNhYmxlVHJhY2tpbmcsXG4gICAgaXNDb21wb25lbnRcbiAgfSA9IG5vZGU7XG4gIGxldCBwYXRjaEZsYWdTdHJpbmc7XG4gIGlmIChwYXRjaEZsYWcpIHtcbiAgICB7XG4gICAgICBpZiAocGF0Y2hGbGFnIDwgMCkge1xuICAgICAgICBwYXRjaEZsYWdTdHJpbmcgPSBwYXRjaEZsYWcgKyBgIC8qICR7UGF0Y2hGbGFnTmFtZXNbcGF0Y2hGbGFnXX0gKi9gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZmxhZ05hbWVzID0gT2JqZWN0LmtleXMoUGF0Y2hGbGFnTmFtZXMpLm1hcChOdW1iZXIpLmZpbHRlcigobikgPT4gbiA+IDAgJiYgcGF0Y2hGbGFnICYgbikubWFwKChuKSA9PiBQYXRjaEZsYWdOYW1lc1tuXSkuam9pbihgLCBgKTtcbiAgICAgICAgcGF0Y2hGbGFnU3RyaW5nID0gcGF0Y2hGbGFnICsgYCAvKiAke2ZsYWdOYW1lc30gKi9gO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZGlyZWN0aXZlcykge1xuICAgIHB1c2goaGVscGVyKFdJVEhfRElSRUNUSVZFUykgKyBgKGApO1xuICB9XG4gIGlmIChpc0Jsb2NrKSB7XG4gICAgcHVzaChgKCR7aGVscGVyKE9QRU5fQkxPQ0spfSgke2Rpc2FibGVUcmFja2luZyA/IGB0cnVlYCA6IGBgfSksIGApO1xuICB9XG4gIGlmIChwdXJlKSB7XG4gICAgcHVzaChQVVJFX0FOTk9UQVRJT04pO1xuICB9XG4gIGNvbnN0IGNhbGxIZWxwZXIgPSBpc0Jsb2NrID8gZ2V0Vk5vZGVCbG9ja0hlbHBlcihjb250ZXh0LmluU1NSLCBpc0NvbXBvbmVudCkgOiBnZXRWTm9kZUhlbHBlcihjb250ZXh0LmluU1NSLCBpc0NvbXBvbmVudCk7XG4gIHB1c2goaGVscGVyKGNhbGxIZWxwZXIpICsgYChgLCAtMiAvKiBOb25lICovLCBub2RlKTtcbiAgZ2VuTm9kZUxpc3QoXG4gICAgZ2VuTnVsbGFibGVBcmdzKFt0YWcsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnU3RyaW5nLCBkeW5hbWljUHJvcHNdKSxcbiAgICBjb250ZXh0XG4gICk7XG4gIHB1c2goYClgKTtcbiAgaWYgKGlzQmxvY2spIHtcbiAgICBwdXNoKGApYCk7XG4gIH1cbiAgaWYgKGRpcmVjdGl2ZXMpIHtcbiAgICBwdXNoKGAsIGApO1xuICAgIGdlbk5vZGUoZGlyZWN0aXZlcywgY29udGV4dCk7XG4gICAgcHVzaChgKWApO1xuICB9XG59XG5mdW5jdGlvbiBnZW5OdWxsYWJsZUFyZ3MoYXJncykge1xuICBsZXQgaSA9IGFyZ3MubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKGFyZ3NbaV0gIT0gbnVsbCkgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIGFyZ3Muc2xpY2UoMCwgaSArIDEpLm1hcCgoYXJnKSA9PiBhcmcgfHwgYG51bGxgKTtcbn1cbmZ1bmN0aW9uIGdlbkNhbGxFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBwdXNoLCBoZWxwZXIsIHB1cmUgfSA9IGNvbnRleHQ7XG4gIGNvbnN0IGNhbGxlZSA9IGlzU3RyaW5nKG5vZGUuY2FsbGVlKSA/IG5vZGUuY2FsbGVlIDogaGVscGVyKG5vZGUuY2FsbGVlKTtcbiAgaWYgKHB1cmUpIHtcbiAgICBwdXNoKFBVUkVfQU5OT1RBVElPTik7XG4gIH1cbiAgcHVzaChjYWxsZWUgKyBgKGAsIC0yIC8qIE5vbmUgKi8sIG5vZGUpO1xuICBnZW5Ob2RlTGlzdChub2RlLmFyZ3VtZW50cywgY29udGV4dCk7XG4gIHB1c2goYClgKTtcbn1cbmZ1bmN0aW9uIGdlbk9iamVjdEV4cHJlc3Npb24obm9kZSwgY29udGV4dCkge1xuICBjb25zdCB7IHB1c2gsIGluZGVudCwgZGVpbmRlbnQsIG5ld2xpbmUgfSA9IGNvbnRleHQ7XG4gIGNvbnN0IHsgcHJvcGVydGllcyB9ID0gbm9kZTtcbiAgaWYgKCFwcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgIHB1c2goYHt9YCwgLTIgLyogTm9uZSAqLywgbm9kZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IG11bHRpbGluZXMgPSBwcm9wZXJ0aWVzLmxlbmd0aCA+IDEgfHwgcHJvcGVydGllcy5zb21lKChwKSA9PiBwLnZhbHVlLnR5cGUgIT09IDQpO1xuICBwdXNoKG11bHRpbGluZXMgPyBge2AgOiBgeyBgKTtcbiAgbXVsdGlsaW5lcyAmJiBpbmRlbnQoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgeyBrZXksIHZhbHVlIH0gPSBwcm9wZXJ0aWVzW2ldO1xuICAgIGdlbkV4cHJlc3Npb25Bc1Byb3BlcnR5S2V5KGtleSwgY29udGV4dCk7XG4gICAgcHVzaChgOiBgKTtcbiAgICBnZW5Ob2RlKHZhbHVlLCBjb250ZXh0KTtcbiAgICBpZiAoaSA8IHByb3BlcnRpZXMubGVuZ3RoIC0gMSkge1xuICAgICAgcHVzaChgLGApO1xuICAgICAgbmV3bGluZSgpO1xuICAgIH1cbiAgfVxuICBtdWx0aWxpbmVzICYmIGRlaW5kZW50KCk7XG4gIHB1c2gobXVsdGlsaW5lcyA/IGB9YCA6IGAgfWApO1xufVxuZnVuY3Rpb24gZ2VuQXJyYXlFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpIHtcbiAgZ2VuTm9kZUxpc3RBc0FycmF5KG5vZGUuZWxlbWVudHMsIGNvbnRleHQpO1xufVxuZnVuY3Rpb24gZ2VuRnVuY3Rpb25FeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBwdXNoLCBpbmRlbnQsIGRlaW5kZW50IH0gPSBjb250ZXh0O1xuICBjb25zdCB7IHBhcmFtcywgcmV0dXJucywgYm9keSwgbmV3bGluZSwgaXNTbG90IH0gPSBub2RlO1xuICBpZiAoaXNTbG90KSB7XG4gICAgcHVzaChgXyR7aGVscGVyTmFtZU1hcFtXSVRIX0NUWF19KGApO1xuICB9XG4gIHB1c2goYChgLCAtMiAvKiBOb25lICovLCBub2RlKTtcbiAgaWYgKGlzQXJyYXkocGFyYW1zKSkge1xuICAgIGdlbk5vZGVMaXN0KHBhcmFtcywgY29udGV4dCk7XG4gIH0gZWxzZSBpZiAocGFyYW1zKSB7XG4gICAgZ2VuTm9kZShwYXJhbXMsIGNvbnRleHQpO1xuICB9XG4gIHB1c2goYCkgPT4gYCk7XG4gIGlmIChuZXdsaW5lIHx8IGJvZHkpIHtcbiAgICBwdXNoKGB7YCk7XG4gICAgaW5kZW50KCk7XG4gIH1cbiAgaWYgKHJldHVybnMpIHtcbiAgICBpZiAobmV3bGluZSkge1xuICAgICAgcHVzaChgcmV0dXJuIGApO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheShyZXR1cm5zKSkge1xuICAgICAgZ2VuTm9kZUxpc3RBc0FycmF5KHJldHVybnMsIGNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5Ob2RlKHJldHVybnMsIGNvbnRleHQpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChib2R5KSB7XG4gICAgZ2VuTm9kZShib2R5LCBjb250ZXh0KTtcbiAgfVxuICBpZiAobmV3bGluZSB8fCBib2R5KSB7XG4gICAgZGVpbmRlbnQoKTtcbiAgICBwdXNoKGB9YCk7XG4gIH1cbiAgaWYgKGlzU2xvdCkge1xuICAgIHB1c2goYClgKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2VuQ29uZGl0aW9uYWxFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpIHtcbiAgY29uc3QgeyB0ZXN0LCBjb25zZXF1ZW50LCBhbHRlcm5hdGUsIG5ld2xpbmU6IG5lZWROZXdsaW5lIH0gPSBub2RlO1xuICBjb25zdCB7IHB1c2gsIGluZGVudCwgZGVpbmRlbnQsIG5ld2xpbmUgfSA9IGNvbnRleHQ7XG4gIGlmICh0ZXN0LnR5cGUgPT09IDQpIHtcbiAgICBjb25zdCBuZWVkc1BhcmVucyA9ICFpc1NpbXBsZUlkZW50aWZpZXIodGVzdC5jb250ZW50KTtcbiAgICBuZWVkc1BhcmVucyAmJiBwdXNoKGAoYCk7XG4gICAgZ2VuRXhwcmVzc2lvbih0ZXN0LCBjb250ZXh0KTtcbiAgICBuZWVkc1BhcmVucyAmJiBwdXNoKGApYCk7XG4gIH0gZWxzZSB7XG4gICAgcHVzaChgKGApO1xuICAgIGdlbk5vZGUodGVzdCwgY29udGV4dCk7XG4gICAgcHVzaChgKWApO1xuICB9XG4gIG5lZWROZXdsaW5lICYmIGluZGVudCgpO1xuICBjb250ZXh0LmluZGVudExldmVsKys7XG4gIG5lZWROZXdsaW5lIHx8IHB1c2goYCBgKTtcbiAgcHVzaChgPyBgKTtcbiAgZ2VuTm9kZShjb25zZXF1ZW50LCBjb250ZXh0KTtcbiAgY29udGV4dC5pbmRlbnRMZXZlbC0tO1xuICBuZWVkTmV3bGluZSAmJiBuZXdsaW5lKCk7XG4gIG5lZWROZXdsaW5lIHx8IHB1c2goYCBgKTtcbiAgcHVzaChgOiBgKTtcbiAgY29uc3QgaXNOZXN0ZWQgPSBhbHRlcm5hdGUudHlwZSA9PT0gMTk7XG4gIGlmICghaXNOZXN0ZWQpIHtcbiAgICBjb250ZXh0LmluZGVudExldmVsKys7XG4gIH1cbiAgZ2VuTm9kZShhbHRlcm5hdGUsIGNvbnRleHQpO1xuICBpZiAoIWlzTmVzdGVkKSB7XG4gICAgY29udGV4dC5pbmRlbnRMZXZlbC0tO1xuICB9XG4gIG5lZWROZXdsaW5lICYmIGRlaW5kZW50KFxuICAgIHRydWVcbiAgICAvKiB3aXRob3V0IG5ld2xpbmUgKi9cbiAgKTtcbn1cbmZ1bmN0aW9uIGdlbkNhY2hlRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KSB7XG4gIGNvbnN0IHsgcHVzaCwgaGVscGVyLCBpbmRlbnQsIGRlaW5kZW50LCBuZXdsaW5lIH0gPSBjb250ZXh0O1xuICBjb25zdCB7IG5lZWRQYXVzZVRyYWNraW5nLCBuZWVkQXJyYXlTcHJlYWQgfSA9IG5vZGU7XG4gIGlmIChuZWVkQXJyYXlTcHJlYWQpIHtcbiAgICBwdXNoKGBbLi4uKGApO1xuICB9XG4gIHB1c2goYF9jYWNoZVske25vZGUuaW5kZXh9XSB8fCAoYCk7XG4gIGlmIChuZWVkUGF1c2VUcmFja2luZykge1xuICAgIGluZGVudCgpO1xuICAgIHB1c2goYCR7aGVscGVyKFNFVF9CTE9DS19UUkFDS0lORyl9KC0xYCk7XG4gICAgaWYgKG5vZGUuaW5WT25jZSkgcHVzaChgLCB0cnVlYCk7XG4gICAgcHVzaChgKSxgKTtcbiAgICBuZXdsaW5lKCk7XG4gICAgcHVzaChgKGApO1xuICB9XG4gIHB1c2goYF9jYWNoZVske25vZGUuaW5kZXh9XSA9IGApO1xuICBnZW5Ob2RlKG5vZGUudmFsdWUsIGNvbnRleHQpO1xuICBpZiAobmVlZFBhdXNlVHJhY2tpbmcpIHtcbiAgICBwdXNoKGApLmNhY2hlSW5kZXggPSAke25vZGUuaW5kZXh9LGApO1xuICAgIG5ld2xpbmUoKTtcbiAgICBwdXNoKGAke2hlbHBlcihTRVRfQkxPQ0tfVFJBQ0tJTkcpfSgxKSxgKTtcbiAgICBuZXdsaW5lKCk7XG4gICAgcHVzaChgX2NhY2hlWyR7bm9kZS5pbmRleH1dYCk7XG4gICAgZGVpbmRlbnQoKTtcbiAgfVxuICBwdXNoKGApYCk7XG4gIGlmIChuZWVkQXJyYXlTcHJlYWQpIHtcbiAgICBwdXNoKGApXWApO1xuICB9XG59XG5cbmNvbnN0IHByb2hpYml0ZWRLZXl3b3JkUkUgPSBuZXcgUmVnRXhwKFxuICBcIlxcXFxiXCIgKyBcImFyZ3VtZW50cyxhd2FpdCxicmVhayxjYXNlLGNhdGNoLGNsYXNzLGNvbnN0LGNvbnRpbnVlLGRlYnVnZ2VyLGRlZmF1bHQsZGVsZXRlLGRvLGVsc2UsZXhwb3J0LGV4dGVuZHMsZmluYWxseSxmb3IsZnVuY3Rpb24saWYsaW1wb3J0LGxldCxuZXcscmV0dXJuLHN1cGVyLHN3aXRjaCx0aHJvdyx0cnksdmFyLHZvaWQsd2hpbGUsd2l0aCx5aWVsZFwiLnNwbGl0KFwiLFwiKS5qb2luKFwiXFxcXGJ8XFxcXGJcIikgKyBcIlxcXFxiXCJcbik7XG5jb25zdCBzdHJpcFN0cmluZ1JFID0gLycoPzpbXidcXFxcXXxcXFxcLikqJ3xcIig/OlteXCJcXFxcXXxcXFxcLikqXCJ8YCg/OlteYFxcXFxdfFxcXFwuKSpcXCRcXHt8XFx9KD86W15gXFxcXF18XFxcXC4pKmB8YCg/OlteYFxcXFxdfFxcXFwuKSpgL2c7XG5mdW5jdGlvbiB2YWxpZGF0ZUJyb3dzZXJFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQsIGFzUGFyYW1zID0gZmFsc2UsIGFzUmF3U3RhdGVtZW50cyA9IGZhbHNlKSB7XG4gIGNvbnN0IGV4cCA9IG5vZGUuY29udGVudDtcbiAgaWYgKCFleHAudHJpbSgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRyeSB7XG4gICAgbmV3IEZ1bmN0aW9uKFxuICAgICAgYXNSYXdTdGF0ZW1lbnRzID8gYCAke2V4cH0gYCA6IGByZXR1cm4gJHthc1BhcmFtcyA/IGAoJHtleHB9KSA9PiB7fWAgOiBgKCR7ZXhwfSlgfWBcbiAgICApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbGV0IG1lc3NhZ2UgPSBlLm1lc3NhZ2U7XG4gICAgY29uc3Qga2V5d29yZE1hdGNoID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgXCJcIikubWF0Y2gocHJvaGliaXRlZEtleXdvcmRSRSk7XG4gICAgaWYgKGtleXdvcmRNYXRjaCkge1xuICAgICAgbWVzc2FnZSA9IGBhdm9pZCB1c2luZyBKYXZhU2NyaXB0IGtleXdvcmQgYXMgcHJvcGVydHkgbmFtZTogXCIke2tleXdvcmRNYXRjaFswXX1cImA7XG4gICAgfVxuICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoXG4gICAgICAgIDQ1LFxuICAgICAgICBub2RlLmxvYyxcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICBtZXNzYWdlXG4gICAgICApXG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCB0cmFuc2Zvcm1FeHByZXNzaW9uID0gKG5vZGUsIGNvbnRleHQpID0+IHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gNSkge1xuICAgIG5vZGUuY29udGVudCA9IHByb2Nlc3NFeHByZXNzaW9uKFxuICAgICAgbm9kZS5jb250ZW50LFxuICAgICAgY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgY29uc3QgbWVtbyA9IGZpbmREaXIobm9kZSwgXCJtZW1vXCIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5wcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZGlyID0gbm9kZS5wcm9wc1tpXTtcbiAgICAgIGlmIChkaXIudHlwZSA9PT0gNyAmJiBkaXIubmFtZSAhPT0gXCJmb3JcIikge1xuICAgICAgICBjb25zdCBleHAgPSBkaXIuZXhwO1xuICAgICAgICBjb25zdCBhcmcgPSBkaXIuYXJnO1xuICAgICAgICBpZiAoZXhwICYmIGV4cC50eXBlID09PSA0ICYmICEoZGlyLm5hbWUgPT09IFwib25cIiAmJiBhcmcpICYmIC8vIGtleSBoYXMgYmVlbiBwcm9jZXNzZWQgaW4gdHJhbnNmb3JtRm9yKHZNZW1vICsgdkZvcilcbiAgICAgICAgIShtZW1vICYmIGFyZyAmJiBhcmcudHlwZSA9PT0gNCAmJiBhcmcuY29udGVudCA9PT0gXCJrZXlcIikpIHtcbiAgICAgICAgICBkaXIuZXhwID0gcHJvY2Vzc0V4cHJlc3Npb24oXG4gICAgICAgICAgICBleHAsXG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgLy8gc2xvdCBhcmdzIG11c3QgYmUgcHJvY2Vzc2VkIGFzIGZ1bmN0aW9uIHBhcmFtc1xuICAgICAgICAgICAgZGlyLm5hbWUgPT09IFwic2xvdFwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJnICYmIGFyZy50eXBlID09PSA0ICYmICFhcmcuaXNTdGF0aWMpIHtcbiAgICAgICAgICBkaXIuYXJnID0gcHJvY2Vzc0V4cHJlc3Npb24oYXJnLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIHByb2Nlc3NFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQsIGFzUGFyYW1zID0gZmFsc2UsIGFzUmF3U3RhdGVtZW50cyA9IGZhbHNlLCBsb2NhbFZhcnMgPSBPYmplY3QuY3JlYXRlKGNvbnRleHQuaWRlbnRpZmllcnMpKSB7XG4gIHtcbiAgICB7XG4gICAgICB2YWxpZGF0ZUJyb3dzZXJFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQsIGFzUGFyYW1zLCBhc1Jhd1N0YXRlbWVudHMpO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufVxuXG5jb25zdCB0cmFuc2Zvcm1JZiA9IGNyZWF0ZVN0cnVjdHVyYWxEaXJlY3RpdmVUcmFuc2Zvcm0oXG4gIC9eKGlmfGVsc2V8ZWxzZS1pZikkLyxcbiAgKG5vZGUsIGRpciwgY29udGV4dCkgPT4ge1xuICAgIHJldHVybiBwcm9jZXNzSWYobm9kZSwgZGlyLCBjb250ZXh0LCAoaWZOb2RlLCBicmFuY2gsIGlzUm9vdCkgPT4ge1xuICAgICAgY29uc3Qgc2libGluZ3MgPSBjb250ZXh0LnBhcmVudC5jaGlsZHJlbjtcbiAgICAgIGxldCBpID0gc2libGluZ3MuaW5kZXhPZihpZk5vZGUpO1xuICAgICAgbGV0IGtleSA9IDA7XG4gICAgICB3aGlsZSAoaS0tID49IDApIHtcbiAgICAgICAgY29uc3Qgc2libGluZyA9IHNpYmxpbmdzW2ldO1xuICAgICAgICBpZiAoc2libGluZyAmJiBzaWJsaW5nLnR5cGUgPT09IDkpIHtcbiAgICAgICAgICBrZXkgKz0gc2libGluZy5icmFuY2hlcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICBpZk5vZGUuY29kZWdlbk5vZGUgPSBjcmVhdGVDb2RlZ2VuTm9kZUZvckJyYW5jaChcbiAgICAgICAgICAgIGJyYW5jaCxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHBhcmVudENvbmRpdGlvbiA9IGdldFBhcmVudENvbmRpdGlvbihpZk5vZGUuY29kZWdlbk5vZGUpO1xuICAgICAgICAgIHBhcmVudENvbmRpdGlvbi5hbHRlcm5hdGUgPSBjcmVhdGVDb2RlZ2VuTm9kZUZvckJyYW5jaChcbiAgICAgICAgICAgIGJyYW5jaCxcbiAgICAgICAgICAgIGtleSArIGlmTm9kZS5icmFuY2hlcy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbik7XG5mdW5jdGlvbiBwcm9jZXNzSWYobm9kZSwgZGlyLCBjb250ZXh0LCBwcm9jZXNzQ29kZWdlbikge1xuICBpZiAoZGlyLm5hbWUgIT09IFwiZWxzZVwiICYmICghZGlyLmV4cCB8fCAhZGlyLmV4cC5jb250ZW50LnRyaW0oKSkpIHtcbiAgICBjb25zdCBsb2MgPSBkaXIuZXhwID8gZGlyLmV4cC5sb2MgOiBub2RlLmxvYztcbiAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICBjcmVhdGVDb21waWxlckVycm9yKDI4LCBkaXIubG9jKVxuICAgICk7XG4gICAgZGlyLmV4cCA9IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYHRydWVgLCBmYWxzZSwgbG9jKTtcbiAgfVxuICBpZiAoZGlyLmV4cCkge1xuICAgIHZhbGlkYXRlQnJvd3NlckV4cHJlc3Npb24oZGlyLmV4cCwgY29udGV4dCk7XG4gIH1cbiAgaWYgKGRpci5uYW1lID09PSBcImlmXCIpIHtcbiAgICBjb25zdCBicmFuY2ggPSBjcmVhdGVJZkJyYW5jaChub2RlLCBkaXIpO1xuICAgIGNvbnN0IGlmTm9kZSA9IHtcbiAgICAgIHR5cGU6IDksXG4gICAgICBsb2M6IGNsb25lTG9jKG5vZGUubG9jKSxcbiAgICAgIGJyYW5jaGVzOiBbYnJhbmNoXVxuICAgIH07XG4gICAgY29udGV4dC5yZXBsYWNlTm9kZShpZk5vZGUpO1xuICAgIGlmIChwcm9jZXNzQ29kZWdlbikge1xuICAgICAgcmV0dXJuIHByb2Nlc3NDb2RlZ2VuKGlmTm9kZSwgYnJhbmNoLCB0cnVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2libGluZ3MgPSBjb250ZXh0LnBhcmVudC5jaGlsZHJlbjtcbiAgICBjb25zdCBjb21tZW50cyA9IFtdO1xuICAgIGxldCBpID0gc2libGluZ3MuaW5kZXhPZihub2RlKTtcbiAgICB3aGlsZSAoaS0tID49IC0xKSB7XG4gICAgICBjb25zdCBzaWJsaW5nID0gc2libGluZ3NbaV07XG4gICAgICBpZiAoc2libGluZyAmJiBzaWJsaW5nLnR5cGUgPT09IDMpIHtcbiAgICAgICAgY29udGV4dC5yZW1vdmVOb2RlKHNpYmxpbmcpO1xuICAgICAgICBjb21tZW50cy51bnNoaWZ0KHNpYmxpbmcpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzaWJsaW5nICYmIHNpYmxpbmcudHlwZSA9PT0gMiAmJiAhc2libGluZy5jb250ZW50LnRyaW0oKS5sZW5ndGgpIHtcbiAgICAgICAgY29udGV4dC5yZW1vdmVOb2RlKHNpYmxpbmcpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzaWJsaW5nICYmIHNpYmxpbmcudHlwZSA9PT0gOSkge1xuICAgICAgICBpZiAoZGlyLm5hbWUgPT09IFwiZWxzZS1pZlwiICYmIHNpYmxpbmcuYnJhbmNoZXNbc2libGluZy5icmFuY2hlcy5sZW5ndGggLSAxXS5jb25kaXRpb24gPT09IHZvaWQgMCkge1xuICAgICAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzAsIG5vZGUubG9jKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dC5yZW1vdmVOb2RlKCk7XG4gICAgICAgIGNvbnN0IGJyYW5jaCA9IGNyZWF0ZUlmQnJhbmNoKG5vZGUsIGRpcik7XG4gICAgICAgIGlmIChjb21tZW50cy5sZW5ndGggJiYgLy8gIzM2MTkgaWdub3JlIGNvbW1lbnRzIGlmIHRoZSB2LWlmIGlzIGRpcmVjdCBjaGlsZCBvZiA8dHJhbnNpdGlvbj5cbiAgICAgICAgIShjb250ZXh0LnBhcmVudCAmJiBjb250ZXh0LnBhcmVudC50eXBlID09PSAxICYmIChjb250ZXh0LnBhcmVudC50YWcgPT09IFwidHJhbnNpdGlvblwiIHx8IGNvbnRleHQucGFyZW50LnRhZyA9PT0gXCJUcmFuc2l0aW9uXCIpKSkge1xuICAgICAgICAgIGJyYW5jaC5jaGlsZHJlbiA9IFsuLi5jb21tZW50cywgLi4uYnJhbmNoLmNoaWxkcmVuXTtcbiAgICAgICAgfVxuICAgICAgICB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gYnJhbmNoLnVzZXJLZXk7XG4gICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgc2libGluZy5icmFuY2hlcy5mb3JFYWNoKCh7IHVzZXJLZXkgfSkgPT4ge1xuICAgICAgICAgICAgICBpZiAoaXNTYW1lS2V5KHVzZXJLZXksIGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgICAgICAgICAgICBjcmVhdGVDb21waWxlckVycm9yKFxuICAgICAgICAgICAgICAgICAgICAyOSxcbiAgICAgICAgICAgICAgICAgICAgYnJhbmNoLnVzZXJLZXkubG9jXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNpYmxpbmcuYnJhbmNoZXMucHVzaChicmFuY2gpO1xuICAgICAgICBjb25zdCBvbkV4aXQgPSBwcm9jZXNzQ29kZWdlbiAmJiBwcm9jZXNzQ29kZWdlbihzaWJsaW5nLCBicmFuY2gsIGZhbHNlKTtcbiAgICAgICAgdHJhdmVyc2VOb2RlKGJyYW5jaCwgY29udGV4dCk7XG4gICAgICAgIGlmIChvbkV4aXQpIG9uRXhpdCgpO1xuICAgICAgICBjb250ZXh0LmN1cnJlbnROb2RlID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgICBjcmVhdGVDb21waWxlckVycm9yKDMwLCBub2RlLmxvYylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlSWZCcmFuY2gobm9kZSwgZGlyKSB7XG4gIGNvbnN0IGlzVGVtcGxhdGVJZiA9IG5vZGUudGFnVHlwZSA9PT0gMztcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAxMCxcbiAgICBsb2M6IG5vZGUubG9jLFxuICAgIGNvbmRpdGlvbjogZGlyLm5hbWUgPT09IFwiZWxzZVwiID8gdm9pZCAwIDogZGlyLmV4cCxcbiAgICBjaGlsZHJlbjogaXNUZW1wbGF0ZUlmICYmICFmaW5kRGlyKG5vZGUsIFwiZm9yXCIpID8gbm9kZS5jaGlsZHJlbiA6IFtub2RlXSxcbiAgICB1c2VyS2V5OiBmaW5kUHJvcChub2RlLCBga2V5YCksXG4gICAgaXNUZW1wbGF0ZUlmXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVDb2RlZ2VuTm9kZUZvckJyYW5jaChicmFuY2gsIGtleUluZGV4LCBjb250ZXh0KSB7XG4gIGlmIChicmFuY2guY29uZGl0aW9uKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvbmRpdGlvbmFsRXhwcmVzc2lvbihcbiAgICAgIGJyYW5jaC5jb25kaXRpb24sXG4gICAgICBjcmVhdGVDaGlsZHJlbkNvZGVnZW5Ob2RlKGJyYW5jaCwga2V5SW5kZXgsIGNvbnRleHQpLFxuICAgICAgLy8gbWFrZSBzdXJlIHRvIHBhc3MgaW4gYXNCbG9jazogdHJ1ZSBzbyB0aGF0IHRoZSBjb21tZW50IG5vZGUgY2FsbFxuICAgICAgLy8gY2xvc2VzIHRoZSBjdXJyZW50IGJsb2NrLlxuICAgICAgY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoQ1JFQVRFX0NPTU1FTlQpLCBbXG4gICAgICAgICdcInYtaWZcIicgLFxuICAgICAgICBcInRydWVcIlxuICAgICAgXSlcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVDaGlsZHJlbkNvZGVnZW5Ob2RlKGJyYW5jaCwga2V5SW5kZXgsIGNvbnRleHQpO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVDaGlsZHJlbkNvZGVnZW5Ob2RlKGJyYW5jaCwga2V5SW5kZXgsIGNvbnRleHQpIHtcbiAgY29uc3QgeyBoZWxwZXIgfSA9IGNvbnRleHQ7XG4gIGNvbnN0IGtleVByb3BlcnR5ID0gY3JlYXRlT2JqZWN0UHJvcGVydHkoXG4gICAgYGtleWAsXG4gICAgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihcbiAgICAgIGAke2tleUluZGV4fWAsXG4gICAgICBmYWxzZSxcbiAgICAgIGxvY1N0dWIsXG4gICAgICAyXG4gICAgKVxuICApO1xuICBjb25zdCB7IGNoaWxkcmVuIH0gPSBicmFuY2g7XG4gIGNvbnN0IGZpcnN0Q2hpbGQgPSBjaGlsZHJlblswXTtcbiAgY29uc3QgbmVlZEZyYWdtZW50V3JhcHBlciA9IGNoaWxkcmVuLmxlbmd0aCAhPT0gMSB8fCBmaXJzdENoaWxkLnR5cGUgIT09IDE7XG4gIGlmIChuZWVkRnJhZ21lbnRXcmFwcGVyKSB7XG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBmaXJzdENoaWxkLnR5cGUgPT09IDExKSB7XG4gICAgICBjb25zdCB2bm9kZUNhbGwgPSBmaXJzdENoaWxkLmNvZGVnZW5Ob2RlO1xuICAgICAgaW5qZWN0UHJvcCh2bm9kZUNhbGwsIGtleVByb3BlcnR5LCBjb250ZXh0KTtcbiAgICAgIHJldHVybiB2bm9kZUNhbGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRjaEZsYWcgPSA2NDtcbiAgICAgIGlmICghYnJhbmNoLmlzVGVtcGxhdGVJZiAmJiBjaGlsZHJlbi5maWx0ZXIoKGMpID0+IGMudHlwZSAhPT0gMykubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHBhdGNoRmxhZyB8PSAyMDQ4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlQ2FsbChcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgaGVscGVyKEZSQUdNRU5UKSxcbiAgICAgICAgY3JlYXRlT2JqZWN0RXhwcmVzc2lvbihba2V5UHJvcGVydHldKSxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHBhdGNoRmxhZyxcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIHRydWUsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYnJhbmNoLmxvY1xuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcmV0ID0gZmlyc3RDaGlsZC5jb2RlZ2VuTm9kZTtcbiAgICBjb25zdCB2bm9kZUNhbGwgPSBnZXRNZW1vZWRWTm9kZUNhbGwocmV0KTtcbiAgICBpZiAodm5vZGVDYWxsLnR5cGUgPT09IDEzKSB7XG4gICAgICBjb252ZXJ0VG9CbG9jayh2bm9kZUNhbGwsIGNvbnRleHQpO1xuICAgIH1cbiAgICBpbmplY3RQcm9wKHZub2RlQ2FsbCwga2V5UHJvcGVydHksIGNvbnRleHQpO1xuICAgIHJldHVybiByZXQ7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzU2FtZUtleShhLCBiKSB7XG4gIGlmICghYSB8fCBhLnR5cGUgIT09IGIudHlwZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYS50eXBlID09PSA2KSB7XG4gICAgaWYgKGEudmFsdWUuY29udGVudCAhPT0gYi52YWx1ZS5jb250ZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNvbnN0IGV4cCA9IGEuZXhwO1xuICAgIGNvbnN0IGJyYW5jaEV4cCA9IGIuZXhwO1xuICAgIGlmIChleHAudHlwZSAhPT0gYnJhbmNoRXhwLnR5cGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGV4cC50eXBlICE9PSA0IHx8IGV4cC5pc1N0YXRpYyAhPT0gYnJhbmNoRXhwLmlzU3RhdGljIHx8IGV4cC5jb250ZW50ICE9PSBicmFuY2hFeHAuY29udGVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGdldFBhcmVudENvbmRpdGlvbihub2RlKSB7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMTkpIHtcbiAgICAgIGlmIChub2RlLmFsdGVybmF0ZS50eXBlID09PSAxOSkge1xuICAgICAgICBub2RlID0gbm9kZS5hbHRlcm5hdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMjApIHtcbiAgICAgIG5vZGUgPSBub2RlLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCB0cmFuc2Zvcm1CaW5kID0gKGRpciwgX25vZGUsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgeyBtb2RpZmllcnMsIGxvYyB9ID0gZGlyO1xuICBjb25zdCBhcmcgPSBkaXIuYXJnO1xuICBsZXQgeyBleHAgfSA9IGRpcjtcbiAgaWYgKGV4cCAmJiBleHAudHlwZSA9PT0gNCAmJiAhZXhwLmNvbnRlbnQudHJpbSgpKSB7XG4gICAge1xuICAgICAgZXhwID0gdm9pZCAwO1xuICAgIH1cbiAgfVxuICBpZiAoIWV4cCkge1xuICAgIGlmIChhcmcudHlwZSAhPT0gNCB8fCAhYXJnLmlzU3RhdGljKSB7XG4gICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoXG4gICAgICAgICAgNTIsXG4gICAgICAgICAgYXJnLmxvY1xuICAgICAgICApXG4gICAgICApO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcHJvcHM6IFtcbiAgICAgICAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShhcmcsIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oXCJcIiwgdHJ1ZSwgbG9jKSlcbiAgICAgICAgXVxuICAgICAgfTtcbiAgICB9XG4gICAgdHJhbnNmb3JtQmluZFNob3J0aGFuZChkaXIpO1xuICAgIGV4cCA9IGRpci5leHA7XG4gIH1cbiAgaWYgKGFyZy50eXBlICE9PSA0KSB7XG4gICAgYXJnLmNoaWxkcmVuLnVuc2hpZnQoYChgKTtcbiAgICBhcmcuY2hpbGRyZW4ucHVzaChgKSB8fCBcIlwiYCk7XG4gIH0gZWxzZSBpZiAoIWFyZy5pc1N0YXRpYykge1xuICAgIGFyZy5jb250ZW50ID0gYCR7YXJnLmNvbnRlbnR9IHx8IFwiXCJgO1xuICB9XG4gIGlmIChtb2RpZmllcnMuc29tZSgobW9kKSA9PiBtb2QuY29udGVudCA9PT0gXCJjYW1lbFwiKSkge1xuICAgIGlmIChhcmcudHlwZSA9PT0gNCkge1xuICAgICAgaWYgKGFyZy5pc1N0YXRpYykge1xuICAgICAgICBhcmcuY29udGVudCA9IGNhbWVsaXplKGFyZy5jb250ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZy5jb250ZW50ID0gYCR7Y29udGV4dC5oZWxwZXJTdHJpbmcoQ0FNRUxJWkUpfSgke2FyZy5jb250ZW50fSlgO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhcmcuY2hpbGRyZW4udW5zaGlmdChgJHtjb250ZXh0LmhlbHBlclN0cmluZyhDQU1FTElaRSl9KGApO1xuICAgICAgYXJnLmNoaWxkcmVuLnB1c2goYClgKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFjb250ZXh0LmluU1NSKSB7XG4gICAgaWYgKG1vZGlmaWVycy5zb21lKChtb2QpID0+IG1vZC5jb250ZW50ID09PSBcInByb3BcIikpIHtcbiAgICAgIGluamVjdFByZWZpeChhcmcsIFwiLlwiKTtcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy5zb21lKChtb2QpID0+IG1vZC5jb250ZW50ID09PSBcImF0dHJcIikpIHtcbiAgICAgIGluamVjdFByZWZpeChhcmcsIFwiXlwiKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwcm9wczogW2NyZWF0ZU9iamVjdFByb3BlcnR5KGFyZywgZXhwKV1cbiAgfTtcbn07XG5jb25zdCB0cmFuc2Zvcm1CaW5kU2hvcnRoYW5kID0gKGRpciwgY29udGV4dCkgPT4ge1xuICBjb25zdCBhcmcgPSBkaXIuYXJnO1xuICBjb25zdCBwcm9wTmFtZSA9IGNhbWVsaXplKGFyZy5jb250ZW50KTtcbiAgZGlyLmV4cCA9IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24ocHJvcE5hbWUsIGZhbHNlLCBhcmcubG9jKTtcbn07XG5jb25zdCBpbmplY3RQcmVmaXggPSAoYXJnLCBwcmVmaXgpID0+IHtcbiAgaWYgKGFyZy50eXBlID09PSA0KSB7XG4gICAgaWYgKGFyZy5pc1N0YXRpYykge1xuICAgICAgYXJnLmNvbnRlbnQgPSBwcmVmaXggKyBhcmcuY29udGVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgYXJnLmNvbnRlbnQgPSBgXFxgJHtwcmVmaXh9XFwkeyR7YXJnLmNvbnRlbnR9fVxcYGA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFyZy5jaGlsZHJlbi51bnNoaWZ0KGAnJHtwcmVmaXh9JyArIChgKTtcbiAgICBhcmcuY2hpbGRyZW4ucHVzaChgKWApO1xuICB9XG59O1xuXG5jb25zdCB0cmFuc2Zvcm1Gb3IgPSBjcmVhdGVTdHJ1Y3R1cmFsRGlyZWN0aXZlVHJhbnNmb3JtKFxuICBcImZvclwiLFxuICAobm9kZSwgZGlyLCBjb250ZXh0KSA9PiB7XG4gICAgY29uc3QgeyBoZWxwZXIsIHJlbW92ZUhlbHBlciB9ID0gY29udGV4dDtcbiAgICByZXR1cm4gcHJvY2Vzc0Zvcihub2RlLCBkaXIsIGNvbnRleHQsIChmb3JOb2RlKSA9PiB7XG4gICAgICBjb25zdCByZW5kZXJFeHAgPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihoZWxwZXIoUkVOREVSX0xJU1QpLCBbXG4gICAgICAgIGZvck5vZGUuc291cmNlXG4gICAgICBdKTtcbiAgICAgIGNvbnN0IGlzVGVtcGxhdGUgPSBpc1RlbXBsYXRlTm9kZShub2RlKTtcbiAgICAgIGNvbnN0IG1lbW8gPSBmaW5kRGlyKG5vZGUsIFwibWVtb1wiKTtcbiAgICAgIGNvbnN0IGtleVByb3AgPSBmaW5kUHJvcChub2RlLCBga2V5YCwgZmFsc2UsIHRydWUpO1xuICAgICAgY29uc3QgaXNEaXJLZXkgPSBrZXlQcm9wICYmIGtleVByb3AudHlwZSA9PT0gNztcbiAgICAgIGlmIChpc0RpcktleSAmJiAha2V5UHJvcC5leHApIHtcbiAgICAgICAgdHJhbnNmb3JtQmluZFNob3J0aGFuZChrZXlQcm9wKTtcbiAgICAgIH1cbiAgICAgIGxldCBrZXlFeHAgPSBrZXlQcm9wICYmIChrZXlQcm9wLnR5cGUgPT09IDYgPyBrZXlQcm9wLnZhbHVlID8gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihrZXlQcm9wLnZhbHVlLmNvbnRlbnQsIHRydWUpIDogdm9pZCAwIDoga2V5UHJvcC5leHApO1xuICAgICAgY29uc3Qga2V5UHJvcGVydHkgPSBrZXlQcm9wICYmIGtleUV4cCA/IGNyZWF0ZU9iamVjdFByb3BlcnR5KGBrZXlgLCBrZXlFeHApIDogbnVsbDtcbiAgICAgIGNvbnN0IGlzU3RhYmxlRnJhZ21lbnQgPSBmb3JOb2RlLnNvdXJjZS50eXBlID09PSA0ICYmIGZvck5vZGUuc291cmNlLmNvbnN0VHlwZSA+IDA7XG4gICAgICBjb25zdCBmcmFnbWVudEZsYWcgPSBpc1N0YWJsZUZyYWdtZW50ID8gNjQgOiBrZXlQcm9wID8gMTI4IDogMjU2O1xuICAgICAgZm9yTm9kZS5jb2RlZ2VuTm9kZSA9IGNyZWF0ZVZOb2RlQ2FsbChcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgaGVscGVyKEZSQUdNRU5UKSxcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICByZW5kZXJFeHAsXG4gICAgICAgIGZyYWdtZW50RmxhZyxcbiAgICAgICAgdm9pZCAwLFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIHRydWUsXG4gICAgICAgICFpc1N0YWJsZUZyYWdtZW50LFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgbm9kZS5sb2NcbiAgICAgICk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsZXQgY2hpbGRCbG9jaztcbiAgICAgICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gZm9yTm9kZTtcbiAgICAgICAgaWYgKGlzVGVtcGxhdGUpIHtcbiAgICAgICAgICBub2RlLmNoaWxkcmVuLnNvbWUoKGMpID0+IHtcbiAgICAgICAgICAgIGlmIChjLnR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZmluZFByb3AoYywgXCJrZXlcIik7XG4gICAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgICAgICAgICAgICBjcmVhdGVDb21waWxlckVycm9yKFxuICAgICAgICAgICAgICAgICAgICAzMyxcbiAgICAgICAgICAgICAgICAgICAga2V5LmxvY1xuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZWVkRnJhZ21lbnRXcmFwcGVyID0gY2hpbGRyZW4ubGVuZ3RoICE9PSAxIHx8IGNoaWxkcmVuWzBdLnR5cGUgIT09IDE7XG4gICAgICAgIGNvbnN0IHNsb3RPdXRsZXQgPSBpc1Nsb3RPdXRsZXQobm9kZSkgPyBub2RlIDogaXNUZW1wbGF0ZSAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBpc1Nsb3RPdXRsZXQobm9kZS5jaGlsZHJlblswXSkgPyBub2RlLmNoaWxkcmVuWzBdIDogbnVsbDtcbiAgICAgICAgaWYgKHNsb3RPdXRsZXQpIHtcbiAgICAgICAgICBjaGlsZEJsb2NrID0gc2xvdE91dGxldC5jb2RlZ2VuTm9kZTtcbiAgICAgICAgICBpZiAoaXNUZW1wbGF0ZSAmJiBrZXlQcm9wZXJ0eSkge1xuICAgICAgICAgICAgaW5qZWN0UHJvcChjaGlsZEJsb2NrLCBrZXlQcm9wZXJ0eSwgY29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5lZWRGcmFnbWVudFdyYXBwZXIpIHtcbiAgICAgICAgICBjaGlsZEJsb2NrID0gY3JlYXRlVk5vZGVDYWxsKFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIGhlbHBlcihGUkFHTUVOVCksXG4gICAgICAgICAgICBrZXlQcm9wZXJ0eSA/IGNyZWF0ZU9iamVjdEV4cHJlc3Npb24oW2tleVByb3BlcnR5XSkgOiB2b2lkIDAsXG4gICAgICAgICAgICBub2RlLmNoaWxkcmVuLFxuICAgICAgICAgICAgNjQsXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICB2b2lkIDAsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgdm9pZCAwLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoaWxkQmxvY2sgPSBjaGlsZHJlblswXS5jb2RlZ2VuTm9kZTtcbiAgICAgICAgICBpZiAoaXNUZW1wbGF0ZSAmJiBrZXlQcm9wZXJ0eSkge1xuICAgICAgICAgICAgaW5qZWN0UHJvcChjaGlsZEJsb2NrLCBrZXlQcm9wZXJ0eSwgY29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaGlsZEJsb2NrLmlzQmxvY2sgIT09ICFpc1N0YWJsZUZyYWdtZW50KSB7XG4gICAgICAgICAgICBpZiAoY2hpbGRCbG9jay5pc0Jsb2NrKSB7XG4gICAgICAgICAgICAgIHJlbW92ZUhlbHBlcihPUEVOX0JMT0NLKTtcbiAgICAgICAgICAgICAgcmVtb3ZlSGVscGVyKFxuICAgICAgICAgICAgICAgIGdldFZOb2RlQmxvY2tIZWxwZXIoY29udGV4dC5pblNTUiwgY2hpbGRCbG9jay5pc0NvbXBvbmVudClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlbW92ZUhlbHBlcihcbiAgICAgICAgICAgICAgICBnZXRWTm9kZUhlbHBlcihjb250ZXh0LmluU1NSLCBjaGlsZEJsb2NrLmlzQ29tcG9uZW50KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjaGlsZEJsb2NrLmlzQmxvY2sgPSAhaXNTdGFibGVGcmFnbWVudDtcbiAgICAgICAgICBpZiAoY2hpbGRCbG9jay5pc0Jsb2NrKSB7XG4gICAgICAgICAgICBoZWxwZXIoT1BFTl9CTE9DSyk7XG4gICAgICAgICAgICBoZWxwZXIoZ2V0Vk5vZGVCbG9ja0hlbHBlcihjb250ZXh0LmluU1NSLCBjaGlsZEJsb2NrLmlzQ29tcG9uZW50KSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhlbHBlcihnZXRWTm9kZUhlbHBlcihjb250ZXh0LmluU1NSLCBjaGlsZEJsb2NrLmlzQ29tcG9uZW50KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtZW1vKSB7XG4gICAgICAgICAgY29uc3QgbG9vcCA9IGNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbihcbiAgICAgICAgICAgIGNyZWF0ZUZvckxvb3BQYXJhbXMoZm9yTm9kZS5wYXJzZVJlc3VsdCwgW1xuICAgICAgICAgICAgICBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGBfY2FjaGVkYClcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgKTtcbiAgICAgICAgICBsb29wLmJvZHkgPSBjcmVhdGVCbG9ja1N0YXRlbWVudChbXG4gICAgICAgICAgICBjcmVhdGVDb21wb3VuZEV4cHJlc3Npb24oW2Bjb25zdCBfbWVtbyA9IChgLCBtZW1vLmV4cCwgYClgXSksXG4gICAgICAgICAgICBjcmVhdGVDb21wb3VuZEV4cHJlc3Npb24oW1xuICAgICAgICAgICAgICBgaWYgKF9jYWNoZWRgLFxuICAgICAgICAgICAgICAuLi5rZXlFeHAgPyBbYCAmJiBfY2FjaGVkLmtleSA9PT0gYCwga2V5RXhwXSA6IFtdLFxuICAgICAgICAgICAgICBgICYmICR7Y29udGV4dC5oZWxwZXJTdHJpbmcoXG4gICAgICAgICAgICAgICAgSVNfTUVNT19TQU1FXG4gICAgICAgICAgICAgICl9KF9jYWNoZWQsIF9tZW1vKSkgcmV0dXJuIF9jYWNoZWRgXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbYGNvbnN0IF9pdGVtID0gYCwgY2hpbGRCbG9ja10pLFxuICAgICAgICAgICAgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihgX2l0ZW0ubWVtbyA9IF9tZW1vYCksXG4gICAgICAgICAgICBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGByZXR1cm4gX2l0ZW1gKVxuICAgICAgICAgIF0pO1xuICAgICAgICAgIHJlbmRlckV4cC5hcmd1bWVudHMucHVzaChcbiAgICAgICAgICAgIGxvb3AsXG4gICAgICAgICAgICBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGBfY2FjaGVgKSxcbiAgICAgICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oU3RyaW5nKGNvbnRleHQuY2FjaGVkLmxlbmd0aCkpXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb250ZXh0LmNhY2hlZC5wdXNoKG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbmRlckV4cC5hcmd1bWVudHMucHVzaChcbiAgICAgICAgICAgIGNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbihcbiAgICAgICAgICAgICAgY3JlYXRlRm9yTG9vcFBhcmFtcyhmb3JOb2RlLnBhcnNlUmVzdWx0KSxcbiAgICAgICAgICAgICAgY2hpbGRCbG9jayxcbiAgICAgICAgICAgICAgdHJ1ZVxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbik7XG5mdW5jdGlvbiBwcm9jZXNzRm9yKG5vZGUsIGRpciwgY29udGV4dCwgcHJvY2Vzc0NvZGVnZW4pIHtcbiAgaWYgKCFkaXIuZXhwKSB7XG4gICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcigzMSwgZGlyLmxvYylcbiAgICApO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBwYXJzZVJlc3VsdCA9IGRpci5mb3JQYXJzZVJlc3VsdDtcbiAgaWYgKCFwYXJzZVJlc3VsdCkge1xuICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzIsIGRpci5sb2MpXG4gICAgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgZmluYWxpemVGb3JQYXJzZVJlc3VsdChwYXJzZVJlc3VsdCwgY29udGV4dCk7XG4gIGNvbnN0IHsgYWRkSWRlbnRpZmllcnMsIHJlbW92ZUlkZW50aWZpZXJzLCBzY29wZXMgfSA9IGNvbnRleHQ7XG4gIGNvbnN0IHsgc291cmNlLCB2YWx1ZSwga2V5LCBpbmRleCB9ID0gcGFyc2VSZXN1bHQ7XG4gIGNvbnN0IGZvck5vZGUgPSB7XG4gICAgdHlwZTogMTEsXG4gICAgbG9jOiBkaXIubG9jLFxuICAgIHNvdXJjZSxcbiAgICB2YWx1ZUFsaWFzOiB2YWx1ZSxcbiAgICBrZXlBbGlhczoga2V5LFxuICAgIG9iamVjdEluZGV4QWxpYXM6IGluZGV4LFxuICAgIHBhcnNlUmVzdWx0LFxuICAgIGNoaWxkcmVuOiBpc1RlbXBsYXRlTm9kZShub2RlKSA/IG5vZGUuY2hpbGRyZW4gOiBbbm9kZV1cbiAgfTtcbiAgY29udGV4dC5yZXBsYWNlTm9kZShmb3JOb2RlKTtcbiAgc2NvcGVzLnZGb3IrKztcbiAgY29uc3Qgb25FeGl0ID0gcHJvY2Vzc0NvZGVnZW4gJiYgcHJvY2Vzc0NvZGVnZW4oZm9yTm9kZSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgc2NvcGVzLnZGb3ItLTtcbiAgICBpZiAob25FeGl0KSBvbkV4aXQoKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGZpbmFsaXplRm9yUGFyc2VSZXN1bHQocmVzdWx0LCBjb250ZXh0KSB7XG4gIGlmIChyZXN1bHQuZmluYWxpemVkKSByZXR1cm47XG4gIHtcbiAgICB2YWxpZGF0ZUJyb3dzZXJFeHByZXNzaW9uKHJlc3VsdC5zb3VyY2UsIGNvbnRleHQpO1xuICAgIGlmIChyZXN1bHQua2V5KSB7XG4gICAgICB2YWxpZGF0ZUJyb3dzZXJFeHByZXNzaW9uKFxuICAgICAgICByZXN1bHQua2V5LFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICB0cnVlXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAocmVzdWx0LmluZGV4KSB7XG4gICAgICB2YWxpZGF0ZUJyb3dzZXJFeHByZXNzaW9uKFxuICAgICAgICByZXN1bHQuaW5kZXgsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHRydWVcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChyZXN1bHQudmFsdWUpIHtcbiAgICAgIHZhbGlkYXRlQnJvd3NlckV4cHJlc3Npb24oXG4gICAgICAgIHJlc3VsdC52YWx1ZSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmVzdWx0LmZpbmFsaXplZCA9IHRydWU7XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JMb29wUGFyYW1zKHsgdmFsdWUsIGtleSwgaW5kZXggfSwgbWVtb0FyZ3MgPSBbXSkge1xuICByZXR1cm4gY3JlYXRlUGFyYW1zTGlzdChbdmFsdWUsIGtleSwgaW5kZXgsIC4uLm1lbW9BcmdzXSk7XG59XG5mdW5jdGlvbiBjcmVhdGVQYXJhbXNMaXN0KGFyZ3MpIHtcbiAgbGV0IGkgPSBhcmdzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIGlmIChhcmdzW2ldKSBicmVhaztcbiAgfVxuICByZXR1cm4gYXJncy5zbGljZSgwLCBpICsgMSkubWFwKChhcmcsIGkyKSA9PiBhcmcgfHwgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihgX2AucmVwZWF0KGkyICsgMSksIGZhbHNlKSk7XG59XG5cbmNvbnN0IGRlZmF1bHRGYWxsYmFjayA9IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYHVuZGVmaW5lZGAsIGZhbHNlKTtcbmNvbnN0IHRyYWNrU2xvdFNjb3BlcyA9IChub2RlLCBjb250ZXh0KSA9PiB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEgJiYgKG5vZGUudGFnVHlwZSA9PT0gMSB8fCBub2RlLnRhZ1R5cGUgPT09IDMpKSB7XG4gICAgY29uc3QgdlNsb3QgPSBmaW5kRGlyKG5vZGUsIFwic2xvdFwiKTtcbiAgICBpZiAodlNsb3QpIHtcbiAgICAgIHZTbG90LmV4cDtcbiAgICAgIGNvbnRleHQuc2NvcGVzLnZTbG90Kys7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjb250ZXh0LnNjb3Blcy52U2xvdC0tO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn07XG5jb25zdCBidWlsZENsaWVudFNsb3RGbiA9IChwcm9wcywgX3ZGb3JFeHAsIGNoaWxkcmVuLCBsb2MpID0+IGNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbihcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBmYWxzZSxcbiAgdHJ1ZSxcbiAgY2hpbGRyZW4ubGVuZ3RoID8gY2hpbGRyZW5bMF0ubG9jIDogbG9jXG4pO1xuZnVuY3Rpb24gYnVpbGRTbG90cyhub2RlLCBjb250ZXh0LCBidWlsZFNsb3RGbiA9IGJ1aWxkQ2xpZW50U2xvdEZuKSB7XG4gIGNvbnRleHQuaGVscGVyKFdJVEhfQ1RYKTtcbiAgY29uc3QgeyBjaGlsZHJlbiwgbG9jIH0gPSBub2RlO1xuICBjb25zdCBzbG90c1Byb3BlcnRpZXMgPSBbXTtcbiAgY29uc3QgZHluYW1pY1Nsb3RzID0gW107XG4gIGxldCBoYXNEeW5hbWljU2xvdHMgPSBjb250ZXh0LnNjb3Blcy52U2xvdCA+IDAgfHwgY29udGV4dC5zY29wZXMudkZvciA+IDA7XG4gIGNvbnN0IG9uQ29tcG9uZW50U2xvdCA9IGZpbmREaXIobm9kZSwgXCJzbG90XCIsIHRydWUpO1xuICBpZiAob25Db21wb25lbnRTbG90KSB7XG4gICAgY29uc3QgeyBhcmcsIGV4cCB9ID0gb25Db21wb25lbnRTbG90O1xuICAgIGlmIChhcmcgJiYgIWlzU3RhdGljRXhwKGFyZykpIHtcbiAgICAgIGhhc0R5bmFtaWNTbG90cyA9IHRydWU7XG4gICAgfVxuICAgIHNsb3RzUHJvcGVydGllcy5wdXNoKFxuICAgICAgY3JlYXRlT2JqZWN0UHJvcGVydHkoXG4gICAgICAgIGFyZyB8fCBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKFwiZGVmYXVsdFwiLCB0cnVlKSxcbiAgICAgICAgYnVpbGRTbG90Rm4oZXhwLCB2b2lkIDAsIGNoaWxkcmVuLCBsb2MpXG4gICAgICApXG4gICAgKTtcbiAgfVxuICBsZXQgaGFzVGVtcGxhdGVTbG90cyA9IGZhbHNlO1xuICBsZXQgaGFzTmFtZWREZWZhdWx0U2xvdCA9IGZhbHNlO1xuICBjb25zdCBpbXBsaWNpdERlZmF1bHRDaGlsZHJlbiA9IFtdO1xuICBjb25zdCBzZWVuU2xvdE5hbWVzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgbGV0IGNvbmRpdGlvbmFsQnJhbmNoSW5kZXggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2xvdEVsZW1lbnQgPSBjaGlsZHJlbltpXTtcbiAgICBsZXQgc2xvdERpcjtcbiAgICBpZiAoIWlzVGVtcGxhdGVOb2RlKHNsb3RFbGVtZW50KSB8fCAhKHNsb3REaXIgPSBmaW5kRGlyKHNsb3RFbGVtZW50LCBcInNsb3RcIiwgdHJ1ZSkpKSB7XG4gICAgICBpZiAoc2xvdEVsZW1lbnQudHlwZSAhPT0gMykge1xuICAgICAgICBpbXBsaWNpdERlZmF1bHRDaGlsZHJlbi5wdXNoKHNsb3RFbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAob25Db21wb25lbnRTbG90KSB7XG4gICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzcsIHNsb3REaXIubG9jKVxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBoYXNUZW1wbGF0ZVNsb3RzID0gdHJ1ZTtcbiAgICBjb25zdCB7IGNoaWxkcmVuOiBzbG90Q2hpbGRyZW4sIGxvYzogc2xvdExvYyB9ID0gc2xvdEVsZW1lbnQ7XG4gICAgY29uc3Qge1xuICAgICAgYXJnOiBzbG90TmFtZSA9IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYGRlZmF1bHRgLCB0cnVlKSxcbiAgICAgIGV4cDogc2xvdFByb3BzLFxuICAgICAgbG9jOiBkaXJMb2NcbiAgICB9ID0gc2xvdERpcjtcbiAgICBsZXQgc3RhdGljU2xvdE5hbWU7XG4gICAgaWYgKGlzU3RhdGljRXhwKHNsb3ROYW1lKSkge1xuICAgICAgc3RhdGljU2xvdE5hbWUgPSBzbG90TmFtZSA/IHNsb3ROYW1lLmNvbnRlbnQgOiBgZGVmYXVsdGA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhc0R5bmFtaWNTbG90cyA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHZGb3IgPSBmaW5kRGlyKHNsb3RFbGVtZW50LCBcImZvclwiKTtcbiAgICBjb25zdCBzbG90RnVuY3Rpb24gPSBidWlsZFNsb3RGbihzbG90UHJvcHMsIHZGb3IsIHNsb3RDaGlsZHJlbiwgc2xvdExvYyk7XG4gICAgbGV0IHZJZjtcbiAgICBsZXQgdkVsc2U7XG4gICAgaWYgKHZJZiA9IGZpbmREaXIoc2xvdEVsZW1lbnQsIFwiaWZcIikpIHtcbiAgICAgIGhhc0R5bmFtaWNTbG90cyA9IHRydWU7XG4gICAgICBkeW5hbWljU2xvdHMucHVzaChcbiAgICAgICAgY3JlYXRlQ29uZGl0aW9uYWxFeHByZXNzaW9uKFxuICAgICAgICAgIHZJZi5leHAsXG4gICAgICAgICAgYnVpbGREeW5hbWljU2xvdChzbG90TmFtZSwgc2xvdEZ1bmN0aW9uLCBjb25kaXRpb25hbEJyYW5jaEluZGV4KyspLFxuICAgICAgICAgIGRlZmF1bHRGYWxsYmFja1xuICAgICAgICApXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodkVsc2UgPSBmaW5kRGlyKFxuICAgICAgc2xvdEVsZW1lbnQsXG4gICAgICAvXmVsc2UoLWlmKT8kLyxcbiAgICAgIHRydWVcbiAgICAgIC8qIGFsbG93RW1wdHkgKi9cbiAgICApKSB7XG4gICAgICBsZXQgaiA9IGk7XG4gICAgICBsZXQgcHJldjtcbiAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgcHJldiA9IGNoaWxkcmVuW2pdO1xuICAgICAgICBpZiAocHJldi50eXBlICE9PSAzKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwcmV2ICYmIGlzVGVtcGxhdGVOb2RlKHByZXYpICYmIGZpbmREaXIocHJldiwgL14oZWxzZS0pP2lmJC8pKSB7XG4gICAgICAgIGxldCBjb25kaXRpb25hbCA9IGR5bmFtaWNTbG90c1tkeW5hbWljU2xvdHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHdoaWxlIChjb25kaXRpb25hbC5hbHRlcm5hdGUudHlwZSA9PT0gMTkpIHtcbiAgICAgICAgICBjb25kaXRpb25hbCA9IGNvbmRpdGlvbmFsLmFsdGVybmF0ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25kaXRpb25hbC5hbHRlcm5hdGUgPSB2RWxzZS5leHAgPyBjcmVhdGVDb25kaXRpb25hbEV4cHJlc3Npb24oXG4gICAgICAgICAgdkVsc2UuZXhwLFxuICAgICAgICAgIGJ1aWxkRHluYW1pY1Nsb3QoXG4gICAgICAgICAgICBzbG90TmFtZSxcbiAgICAgICAgICAgIHNsb3RGdW5jdGlvbixcbiAgICAgICAgICAgIGNvbmRpdGlvbmFsQnJhbmNoSW5kZXgrK1xuICAgICAgICAgICksXG4gICAgICAgICAgZGVmYXVsdEZhbGxiYWNrXG4gICAgICAgICkgOiBidWlsZER5bmFtaWNTbG90KHNsb3ROYW1lLCBzbG90RnVuY3Rpb24sIGNvbmRpdGlvbmFsQnJhbmNoSW5kZXgrKyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcigzMCwgdkVsc2UubG9jKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodkZvcikge1xuICAgICAgaGFzRHluYW1pY1Nsb3RzID0gdHJ1ZTtcbiAgICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gdkZvci5mb3JQYXJzZVJlc3VsdDtcbiAgICAgIGlmIChwYXJzZVJlc3VsdCkge1xuICAgICAgICBmaW5hbGl6ZUZvclBhcnNlUmVzdWx0KHBhcnNlUmVzdWx0LCBjb250ZXh0KTtcbiAgICAgICAgZHluYW1pY1Nsb3RzLnB1c2goXG4gICAgICAgICAgY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoUkVOREVSX0xJU1QpLCBbXG4gICAgICAgICAgICBwYXJzZVJlc3VsdC5zb3VyY2UsXG4gICAgICAgICAgICBjcmVhdGVGdW5jdGlvbkV4cHJlc3Npb24oXG4gICAgICAgICAgICAgIGNyZWF0ZUZvckxvb3BQYXJhbXMocGFyc2VSZXN1bHQpLFxuICAgICAgICAgICAgICBidWlsZER5bmFtaWNTbG90KHNsb3ROYW1lLCBzbG90RnVuY3Rpb24pLFxuICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICApXG4gICAgICAgICAgXSlcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgICBjcmVhdGVDb21waWxlckVycm9yKFxuICAgICAgICAgICAgMzIsXG4gICAgICAgICAgICB2Rm9yLmxvY1xuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHN0YXRpY1Nsb3ROYW1lKSB7XG4gICAgICAgIGlmIChzZWVuU2xvdE5hbWVzLmhhcyhzdGF0aWNTbG90TmFtZSkpIHtcbiAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgICAgICBjcmVhdGVDb21waWxlckVycm9yKFxuICAgICAgICAgICAgICAzOCxcbiAgICAgICAgICAgICAgZGlyTG9jXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBzZWVuU2xvdE5hbWVzLmFkZChzdGF0aWNTbG90TmFtZSk7XG4gICAgICAgIGlmIChzdGF0aWNTbG90TmFtZSA9PT0gXCJkZWZhdWx0XCIpIHtcbiAgICAgICAgICBoYXNOYW1lZERlZmF1bHRTbG90ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2xvdHNQcm9wZXJ0aWVzLnB1c2goY3JlYXRlT2JqZWN0UHJvcGVydHkoc2xvdE5hbWUsIHNsb3RGdW5jdGlvbikpO1xuICAgIH1cbiAgfVxuICBpZiAoIW9uQ29tcG9uZW50U2xvdCkge1xuICAgIGNvbnN0IGJ1aWxkRGVmYXVsdFNsb3RQcm9wZXJ0eSA9IChwcm9wcywgY2hpbGRyZW4yKSA9PiB7XG4gICAgICBjb25zdCBmbiA9IGJ1aWxkU2xvdEZuKHByb3BzLCB2b2lkIDAsIGNoaWxkcmVuMiwgbG9jKTtcbiAgICAgIHJldHVybiBjcmVhdGVPYmplY3RQcm9wZXJ0eShgZGVmYXVsdGAsIGZuKTtcbiAgICB9O1xuICAgIGlmICghaGFzVGVtcGxhdGVTbG90cykge1xuICAgICAgc2xvdHNQcm9wZXJ0aWVzLnB1c2goYnVpbGREZWZhdWx0U2xvdFByb3BlcnR5KHZvaWQgMCwgY2hpbGRyZW4pKTtcbiAgICB9IGVsc2UgaWYgKGltcGxpY2l0RGVmYXVsdENoaWxkcmVuLmxlbmd0aCAmJiAvLyAjMzc2NlxuICAgIC8vIHdpdGggd2hpdGVzcGFjZTogJ3ByZXNlcnZlJywgd2hpdGVzcGFjZXMgYmV0d2VlbiBzbG90cyB3aWxsIGVuZCB1cCBpblxuICAgIC8vIGltcGxpY2l0RGVmYXVsdENoaWxkcmVuLiBJZ25vcmUgaWYgYWxsIGltcGxpY2l0IGNoaWxkcmVuIGFyZSB3aGl0ZXNwYWNlcy5cbiAgICBpbXBsaWNpdERlZmF1bHRDaGlsZHJlbi5zb21lKChub2RlMikgPT4gaXNOb25XaGl0ZXNwYWNlQ29udGVudChub2RlMikpKSB7XG4gICAgICBpZiAoaGFzTmFtZWREZWZhdWx0U2xvdCkge1xuICAgICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcihcbiAgICAgICAgICAgIDM5LFxuICAgICAgICAgICAgaW1wbGljaXREZWZhdWx0Q2hpbGRyZW5bMF0ubG9jXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdHNQcm9wZXJ0aWVzLnB1c2goXG4gICAgICAgICAgYnVpbGREZWZhdWx0U2xvdFByb3BlcnR5KHZvaWQgMCwgaW1wbGljaXREZWZhdWx0Q2hpbGRyZW4pXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IHNsb3RGbGFnID0gaGFzRHluYW1pY1Nsb3RzID8gMiA6IGhhc0ZvcndhcmRlZFNsb3RzKG5vZGUuY2hpbGRyZW4pID8gMyA6IDE7XG4gIGxldCBzbG90cyA9IGNyZWF0ZU9iamVjdEV4cHJlc3Npb24oXG4gICAgc2xvdHNQcm9wZXJ0aWVzLmNvbmNhdChcbiAgICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KFxuICAgICAgICBgX2AsXG4gICAgICAgIC8vIDIgPSBjb21waWxlZCBidXQgZHluYW1pYyA9IGNhbiBza2lwIG5vcm1hbGl6YXRpb24sIGJ1dCBtdXN0IHJ1biBkaWZmXG4gICAgICAgIC8vIDEgPSBjb21waWxlZCBhbmQgc3RhdGljID0gY2FuIHNraXAgbm9ybWFsaXphdGlvbiBBTkQgZGlmZiBhcyBvcHRpbWl6ZWRcbiAgICAgICAgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihcbiAgICAgICAgICBzbG90RmxhZyArIChgIC8qICR7c2xvdEZsYWdzVGV4dFtzbG90RmxhZ119ICovYCApLFxuICAgICAgICAgIGZhbHNlXG4gICAgICAgIClcbiAgICAgIClcbiAgICApLFxuICAgIGxvY1xuICApO1xuICBpZiAoZHluYW1pY1Nsb3RzLmxlbmd0aCkge1xuICAgIHNsb3RzID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoQ1JFQVRFX1NMT1RTKSwgW1xuICAgICAgc2xvdHMsXG4gICAgICBjcmVhdGVBcnJheUV4cHJlc3Npb24oZHluYW1pY1Nsb3RzKVxuICAgIF0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgc2xvdHMsXG4gICAgaGFzRHluYW1pY1Nsb3RzXG4gIH07XG59XG5mdW5jdGlvbiBidWlsZER5bmFtaWNTbG90KG5hbWUsIGZuLCBpbmRleCkge1xuICBjb25zdCBwcm9wcyA9IFtcbiAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShgbmFtZWAsIG5hbWUpLFxuICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KGBmbmAsIGZuKVxuICBdO1xuICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgIHByb3BzLnB1c2goXG4gICAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShga2V5YCwgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihTdHJpbmcoaW5kZXgpLCB0cnVlKSlcbiAgICApO1xuICB9XG4gIHJldHVybiBjcmVhdGVPYmplY3RFeHByZXNzaW9uKHByb3BzKTtcbn1cbmZ1bmN0aW9uIGhhc0ZvcndhcmRlZFNsb3RzKGNoaWxkcmVuKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHN3aXRjaCAoY2hpbGQudHlwZSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBpZiAoY2hpbGQudGFnVHlwZSA9PT0gMiB8fCBoYXNGb3J3YXJkZWRTbG90cyhjaGlsZC5jaGlsZHJlbikpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgOTpcbiAgICAgICAgaWYgKGhhc0ZvcndhcmRlZFNsb3RzKGNoaWxkLmJyYW5jaGVzKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMDpcbiAgICAgIGNhc2UgMTE6XG4gICAgICAgIGlmIChoYXNGb3J3YXJkZWRTbG90cyhjaGlsZC5jaGlsZHJlbikpIHJldHVybiB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNOb25XaGl0ZXNwYWNlQ29udGVudChub2RlKSB7XG4gIGlmIChub2RlLnR5cGUgIT09IDIgJiYgbm9kZS50eXBlICE9PSAxMilcbiAgICByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIG5vZGUudHlwZSA9PT0gMiA/ICEhbm9kZS5jb250ZW50LnRyaW0oKSA6IGlzTm9uV2hpdGVzcGFjZUNvbnRlbnQobm9kZS5jb250ZW50KTtcbn1cblxuY29uc3QgZGlyZWN0aXZlSW1wb3J0TWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2Zvcm1FbGVtZW50ID0gKG5vZGUsIGNvbnRleHQpID0+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHBvc3RUcmFuc2Zvcm1FbGVtZW50KCkge1xuICAgIG5vZGUgPSBjb250ZXh0LmN1cnJlbnROb2RlO1xuICAgIGlmICghKG5vZGUudHlwZSA9PT0gMSAmJiAobm9kZS50YWdUeXBlID09PSAwIHx8IG5vZGUudGFnVHlwZSA9PT0gMSkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgdGFnLCBwcm9wcyB9ID0gbm9kZTtcbiAgICBjb25zdCBpc0NvbXBvbmVudCA9IG5vZGUudGFnVHlwZSA9PT0gMTtcbiAgICBsZXQgdm5vZGVUYWcgPSBpc0NvbXBvbmVudCA/IHJlc29sdmVDb21wb25lbnRUeXBlKG5vZGUsIGNvbnRleHQpIDogYFwiJHt0YWd9XCJgO1xuICAgIGNvbnN0IGlzRHluYW1pY0NvbXBvbmVudCA9IGlzT2JqZWN0KHZub2RlVGFnKSAmJiB2bm9kZVRhZy5jYWxsZWUgPT09IFJFU09MVkVfRFlOQU1JQ19DT01QT05FTlQ7XG4gICAgbGV0IHZub2RlUHJvcHM7XG4gICAgbGV0IHZub2RlQ2hpbGRyZW47XG4gICAgbGV0IHBhdGNoRmxhZyA9IDA7XG4gICAgbGV0IHZub2RlRHluYW1pY1Byb3BzO1xuICAgIGxldCBkeW5hbWljUHJvcE5hbWVzO1xuICAgIGxldCB2bm9kZURpcmVjdGl2ZXM7XG4gICAgbGV0IHNob3VsZFVzZUJsb2NrID0gKFxuICAgICAgLy8gZHluYW1pYyBjb21wb25lbnQgbWF5IHJlc29sdmUgdG8gcGxhaW4gZWxlbWVudHNcbiAgICAgIGlzRHluYW1pY0NvbXBvbmVudCB8fCB2bm9kZVRhZyA9PT0gVEVMRVBPUlQgfHwgdm5vZGVUYWcgPT09IFNVU1BFTlNFIHx8ICFpc0NvbXBvbmVudCAmJiAvLyA8c3ZnPiBhbmQgPGZvcmVpZ25PYmplY3Q+IG11c3QgYmUgZm9yY2VkIGludG8gYmxvY2tzIHNvIHRoYXQgYmxvY2tcbiAgICAgIC8vIHVwZGF0ZXMgaW5zaWRlIGdldCBwcm9wZXIgaXNTVkcgZmxhZyBhdCBydW50aW1lLiAoIzYzOSwgIzY0MylcbiAgICAgIC8vIFRoaXMgaXMgdGVjaG5pY2FsbHkgd2ViLXNwZWNpZmljLCBidXQgc3BsaXR0aW5nIHRoZSBsb2dpYyBvdXQgb2YgY29yZVxuICAgICAgLy8gbGVhZHMgdG8gdG9vIG11Y2ggdW5uZWNlc3NhcnkgY29tcGxleGl0eS5cbiAgICAgICh0YWcgPT09IFwic3ZnXCIgfHwgdGFnID09PSBcImZvcmVpZ25PYmplY3RcIiB8fCB0YWcgPT09IFwibWF0aFwiKVxuICAgICk7XG4gICAgaWYgKHByb3BzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHByb3BzQnVpbGRSZXN1bHQgPSBidWlsZFByb3BzKFxuICAgICAgICBub2RlLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICB2b2lkIDAsXG4gICAgICAgIGlzQ29tcG9uZW50LFxuICAgICAgICBpc0R5bmFtaWNDb21wb25lbnRcbiAgICAgICk7XG4gICAgICB2bm9kZVByb3BzID0gcHJvcHNCdWlsZFJlc3VsdC5wcm9wcztcbiAgICAgIHBhdGNoRmxhZyA9IHByb3BzQnVpbGRSZXN1bHQucGF0Y2hGbGFnO1xuICAgICAgZHluYW1pY1Byb3BOYW1lcyA9IHByb3BzQnVpbGRSZXN1bHQuZHluYW1pY1Byb3BOYW1lcztcbiAgICAgIGNvbnN0IGRpcmVjdGl2ZXMgPSBwcm9wc0J1aWxkUmVzdWx0LmRpcmVjdGl2ZXM7XG4gICAgICB2bm9kZURpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzICYmIGRpcmVjdGl2ZXMubGVuZ3RoID8gY3JlYXRlQXJyYXlFeHByZXNzaW9uKFxuICAgICAgICBkaXJlY3RpdmVzLm1hcCgoZGlyKSA9PiBidWlsZERpcmVjdGl2ZUFyZ3MoZGlyLCBjb250ZXh0KSlcbiAgICAgICkgOiB2b2lkIDA7XG4gICAgICBpZiAocHJvcHNCdWlsZFJlc3VsdC5zaG91bGRVc2VCbG9jaykge1xuICAgICAgICBzaG91bGRVc2VCbG9jayA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh2bm9kZVRhZyA9PT0gS0VFUF9BTElWRSkge1xuICAgICAgICBzaG91bGRVc2VCbG9jayA9IHRydWU7XG4gICAgICAgIHBhdGNoRmxhZyB8PSAxMDI0O1xuICAgICAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcig0Niwge1xuICAgICAgICAgICAgICBzdGFydDogbm9kZS5jaGlsZHJlblswXS5sb2Muc3RhcnQsXG4gICAgICAgICAgICAgIGVuZDogbm9kZS5jaGlsZHJlbltub2RlLmNoaWxkcmVuLmxlbmd0aCAtIDFdLmxvYy5lbmQsXG4gICAgICAgICAgICAgIHNvdXJjZTogXCJcIlxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBzaG91bGRCdWlsZEFzU2xvdHMgPSBpc0NvbXBvbmVudCAmJiAvLyBUZWxlcG9ydCBpcyBub3QgYSByZWFsIGNvbXBvbmVudCBhbmQgaGFzIGRlZGljYXRlZCBydW50aW1lIGhhbmRsaW5nXG4gICAgICB2bm9kZVRhZyAhPT0gVEVMRVBPUlQgJiYgLy8gZXhwbGFpbmVkIGFib3ZlLlxuICAgICAgdm5vZGVUYWcgIT09IEtFRVBfQUxJVkU7XG4gICAgICBpZiAoc2hvdWxkQnVpbGRBc1Nsb3RzKSB7XG4gICAgICAgIGNvbnN0IHsgc2xvdHMsIGhhc0R5bmFtaWNTbG90cyB9ID0gYnVpbGRTbG90cyhub2RlLCBjb250ZXh0KTtcbiAgICAgICAgdm5vZGVDaGlsZHJlbiA9IHNsb3RzO1xuICAgICAgICBpZiAoaGFzRHluYW1pY1Nsb3RzKSB7XG4gICAgICAgICAgcGF0Y2hGbGFnIHw9IDEwMjQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgdm5vZGVUYWcgIT09IFRFTEVQT1JUKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZS5jaGlsZHJlblswXTtcbiAgICAgICAgY29uc3QgdHlwZSA9IGNoaWxkLnR5cGU7XG4gICAgICAgIGNvbnN0IGhhc0R5bmFtaWNUZXh0Q2hpbGQgPSB0eXBlID09PSA1IHx8IHR5cGUgPT09IDg7XG4gICAgICAgIGlmIChoYXNEeW5hbWljVGV4dENoaWxkICYmIGdldENvbnN0YW50VHlwZShjaGlsZCwgY29udGV4dCkgPT09IDApIHtcbiAgICAgICAgICBwYXRjaEZsYWcgfD0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzRHluYW1pY1RleHRDaGlsZCB8fCB0eXBlID09PSAyKSB7XG4gICAgICAgICAgdm5vZGVDaGlsZHJlbiA9IGNoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlQ2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZUNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGR5bmFtaWNQcm9wTmFtZXMgJiYgZHluYW1pY1Byb3BOYW1lcy5sZW5ndGgpIHtcbiAgICAgIHZub2RlRHluYW1pY1Byb3BzID0gc3RyaW5naWZ5RHluYW1pY1Byb3BOYW1lcyhkeW5hbWljUHJvcE5hbWVzKTtcbiAgICB9XG4gICAgbm9kZS5jb2RlZ2VuTm9kZSA9IGNyZWF0ZVZOb2RlQ2FsbChcbiAgICAgIGNvbnRleHQsXG4gICAgICB2bm9kZVRhZyxcbiAgICAgIHZub2RlUHJvcHMsXG4gICAgICB2bm9kZUNoaWxkcmVuLFxuICAgICAgcGF0Y2hGbGFnID09PSAwID8gdm9pZCAwIDogcGF0Y2hGbGFnLFxuICAgICAgdm5vZGVEeW5hbWljUHJvcHMsXG4gICAgICB2bm9kZURpcmVjdGl2ZXMsXG4gICAgICAhIXNob3VsZFVzZUJsb2NrLFxuICAgICAgZmFsc2UsXG4gICAgICBpc0NvbXBvbmVudCxcbiAgICAgIG5vZGUubG9jXG4gICAgKTtcbiAgfTtcbn07XG5mdW5jdGlvbiByZXNvbHZlQ29tcG9uZW50VHlwZShub2RlLCBjb250ZXh0LCBzc3IgPSBmYWxzZSkge1xuICBsZXQgeyB0YWcgfSA9IG5vZGU7XG4gIGNvbnN0IGlzRXhwbGljaXREeW5hbWljID0gaXNDb21wb25lbnRUYWcodGFnKTtcbiAgY29uc3QgaXNQcm9wID0gZmluZFByb3AoXG4gICAgbm9kZSxcbiAgICBcImlzXCIsXG4gICAgZmFsc2UsXG4gICAgdHJ1ZVxuICAgIC8qIGFsbG93IGVtcHR5ICovXG4gICk7XG4gIGlmIChpc1Byb3ApIHtcbiAgICBpZiAoaXNFeHBsaWNpdER5bmFtaWMgfHwgZmFsc2UpIHtcbiAgICAgIGxldCBleHA7XG4gICAgICBpZiAoaXNQcm9wLnR5cGUgPT09IDYpIHtcbiAgICAgICAgZXhwID0gaXNQcm9wLnZhbHVlICYmIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oaXNQcm9wLnZhbHVlLmNvbnRlbnQsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhwID0gaXNQcm9wLmV4cDtcbiAgICAgICAgaWYgKCFleHApIHtcbiAgICAgICAgICBleHAgPSBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGBpc2AsIGZhbHNlLCBpc1Byb3AuYXJnLmxvYyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChleHApIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKFJFU09MVkVfRFlOQU1JQ19DT01QT05FTlQpLCBbXG4gICAgICAgICAgZXhwXG4gICAgICAgIF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcm9wLnR5cGUgPT09IDYgJiYgaXNQcm9wLnZhbHVlLmNvbnRlbnQuc3RhcnRzV2l0aChcInZ1ZTpcIikpIHtcbiAgICAgIHRhZyA9IGlzUHJvcC52YWx1ZS5jb250ZW50LnNsaWNlKDQpO1xuICAgIH1cbiAgfVxuICBjb25zdCBidWlsdEluID0gaXNDb3JlQ29tcG9uZW50KHRhZykgfHwgY29udGV4dC5pc0J1aWx0SW5Db21wb25lbnQodGFnKTtcbiAgaWYgKGJ1aWx0SW4pIHtcbiAgICBpZiAoIXNzcikgY29udGV4dC5oZWxwZXIoYnVpbHRJbik7XG4gICAgcmV0dXJuIGJ1aWx0SW47XG4gIH1cbiAgY29udGV4dC5oZWxwZXIoUkVTT0xWRV9DT01QT05FTlQpO1xuICBjb250ZXh0LmNvbXBvbmVudHMuYWRkKHRhZyk7XG4gIHJldHVybiB0b1ZhbGlkQXNzZXRJZCh0YWcsIGBjb21wb25lbnRgKTtcbn1cbmZ1bmN0aW9uIGJ1aWxkUHJvcHMobm9kZSwgY29udGV4dCwgcHJvcHMgPSBub2RlLnByb3BzLCBpc0NvbXBvbmVudCwgaXNEeW5hbWljQ29tcG9uZW50LCBzc3IgPSBmYWxzZSkge1xuICBjb25zdCB7IHRhZywgbG9jOiBlbGVtZW50TG9jLCBjaGlsZHJlbiB9ID0gbm9kZTtcbiAgbGV0IHByb3BlcnRpZXMgPSBbXTtcbiAgY29uc3QgbWVyZ2VBcmdzID0gW107XG4gIGNvbnN0IHJ1bnRpbWVEaXJlY3RpdmVzID0gW107XG4gIGNvbnN0IGhhc0NoaWxkcmVuID0gY2hpbGRyZW4ubGVuZ3RoID4gMDtcbiAgbGV0IHNob3VsZFVzZUJsb2NrID0gZmFsc2U7XG4gIGxldCBwYXRjaEZsYWcgPSAwO1xuICBsZXQgaGFzUmVmID0gZmFsc2U7XG4gIGxldCBoYXNDbGFzc0JpbmRpbmcgPSBmYWxzZTtcbiAgbGV0IGhhc1N0eWxlQmluZGluZyA9IGZhbHNlO1xuICBsZXQgaGFzSHlkcmF0aW9uRXZlbnRCaW5kaW5nID0gZmFsc2U7XG4gIGxldCBoYXNEeW5hbWljS2V5cyA9IGZhbHNlO1xuICBsZXQgaGFzVm5vZGVIb29rID0gZmFsc2U7XG4gIGNvbnN0IGR5bmFtaWNQcm9wTmFtZXMgPSBbXTtcbiAgY29uc3QgcHVzaE1lcmdlQXJnID0gKGFyZykgPT4ge1xuICAgIGlmIChwcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgbWVyZ2VBcmdzLnB1c2goXG4gICAgICAgIGNyZWF0ZU9iamVjdEV4cHJlc3Npb24oZGVkdXBlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSwgZWxlbWVudExvYylcbiAgICAgICk7XG4gICAgICBwcm9wZXJ0aWVzID0gW107XG4gICAgfVxuICAgIGlmIChhcmcpIG1lcmdlQXJncy5wdXNoKGFyZyk7XG4gIH07XG4gIGNvbnN0IHB1c2hSZWZWRm9yTWFya2VyID0gKCkgPT4ge1xuICAgIGlmIChjb250ZXh0LnNjb3Blcy52Rm9yID4gMCkge1xuICAgICAgcHJvcGVydGllcy5wdXNoKFxuICAgICAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShcbiAgICAgICAgICBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKFwicmVmX2ZvclwiLCB0cnVlKSxcbiAgICAgICAgICBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKFwidHJ1ZVwiKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgYW5hbHl6ZVBhdGNoRmxhZyA9ICh7IGtleSwgdmFsdWUgfSkgPT4ge1xuICAgIGlmIChpc1N0YXRpY0V4cChrZXkpKSB7XG4gICAgICBjb25zdCBuYW1lID0ga2V5LmNvbnRlbnQ7XG4gICAgICBjb25zdCBpc0V2ZW50SGFuZGxlciA9IGlzT24obmFtZSk7XG4gICAgICBpZiAoaXNFdmVudEhhbmRsZXIgJiYgKCFpc0NvbXBvbmVudCB8fCBpc0R5bmFtaWNDb21wb25lbnQpICYmIC8vIG9taXQgdGhlIGZsYWcgZm9yIGNsaWNrIGhhbmRsZXJzIGJlY2F1c2UgaHlkcmF0aW9uIGdpdmVzIGNsaWNrXG4gICAgICAvLyBkZWRpY2F0ZWQgZmFzdCBwYXRoLlxuICAgICAgbmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9uY2xpY2tcIiAmJiAvLyBvbWl0IHYtbW9kZWwgaGFuZGxlcnNcbiAgICAgIG5hbWUgIT09IFwib25VcGRhdGU6bW9kZWxWYWx1ZVwiICYmIC8vIG9taXQgb25Wbm9kZVhYWCBob29rc1xuICAgICAgIWlzUmVzZXJ2ZWRQcm9wKG5hbWUpKSB7XG4gICAgICAgIGhhc0h5ZHJhdGlvbkV2ZW50QmluZGluZyA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNFdmVudEhhbmRsZXIgJiYgaXNSZXNlcnZlZFByb3AobmFtZSkpIHtcbiAgICAgICAgaGFzVm5vZGVIb29rID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0V2ZW50SGFuZGxlciAmJiB2YWx1ZS50eXBlID09PSAxNCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLmFyZ3VtZW50c1swXTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZS50eXBlID09PSAyMCB8fCAodmFsdWUudHlwZSA9PT0gNCB8fCB2YWx1ZS50eXBlID09PSA4KSAmJiBnZXRDb25zdGFudFR5cGUodmFsdWUsIGNvbnRleHQpID4gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PT0gXCJyZWZcIikge1xuICAgICAgICBoYXNSZWYgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChuYW1lID09PSBcImNsYXNzXCIpIHtcbiAgICAgICAgaGFzQ2xhc3NCaW5kaW5nID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gXCJzdHlsZVwiKSB7XG4gICAgICAgIGhhc1N0eWxlQmluZGluZyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUgIT09IFwia2V5XCIgJiYgIWR5bmFtaWNQcm9wTmFtZXMuaW5jbHVkZXMobmFtZSkpIHtcbiAgICAgICAgZHluYW1pY1Byb3BOYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzQ29tcG9uZW50ICYmIChuYW1lID09PSBcImNsYXNzXCIgfHwgbmFtZSA9PT0gXCJzdHlsZVwiKSAmJiAhZHluYW1pY1Byb3BOYW1lcy5pbmNsdWRlcyhuYW1lKSkge1xuICAgICAgICBkeW5hbWljUHJvcE5hbWVzLnB1c2gobmFtZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhc0R5bmFtaWNLZXlzID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwcm9wID0gcHJvcHNbaV07XG4gICAgaWYgKHByb3AudHlwZSA9PT0gNikge1xuICAgICAgY29uc3QgeyBsb2MsIG5hbWUsIG5hbWVMb2MsIHZhbHVlIH0gPSBwcm9wO1xuICAgICAgbGV0IGlzU3RhdGljID0gdHJ1ZTtcbiAgICAgIGlmIChuYW1lID09PSBcInJlZlwiKSB7XG4gICAgICAgIGhhc1JlZiA9IHRydWU7XG4gICAgICAgIHB1c2hSZWZWRm9yTWFya2VyKCk7XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PT0gXCJpc1wiICYmIChpc0NvbXBvbmVudFRhZyh0YWcpIHx8IHZhbHVlICYmIHZhbHVlLmNvbnRlbnQuc3RhcnRzV2l0aChcInZ1ZTpcIikgfHwgZmFsc2UpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcHJvcGVydGllcy5wdXNoKFxuICAgICAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShcbiAgICAgICAgICBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKG5hbWUsIHRydWUsIG5hbWVMb2MpLFxuICAgICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oXG4gICAgICAgICAgICB2YWx1ZSA/IHZhbHVlLmNvbnRlbnQgOiBcIlwiLFxuICAgICAgICAgICAgaXNTdGF0aWMsXG4gICAgICAgICAgICB2YWx1ZSA/IHZhbHVlLmxvYyA6IGxvY1xuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyBuYW1lLCBhcmcsIGV4cCwgbG9jLCBtb2RpZmllcnMgfSA9IHByb3A7XG4gICAgICBjb25zdCBpc1ZCaW5kID0gbmFtZSA9PT0gXCJiaW5kXCI7XG4gICAgICBjb25zdCBpc1ZPbiA9IG5hbWUgPT09IFwib25cIjtcbiAgICAgIGlmIChuYW1lID09PSBcInNsb3RcIikge1xuICAgICAgICBpZiAoIWlzQ29tcG9uZW50KSB7XG4gICAgICAgICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgICAgICAgY3JlYXRlQ29tcGlsZXJFcnJvcig0MCwgbG9jKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PT0gXCJvbmNlXCIgfHwgbmFtZSA9PT0gXCJtZW1vXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PT0gXCJpc1wiIHx8IGlzVkJpbmQgJiYgaXNTdGF0aWNBcmdPZihhcmcsIFwiaXNcIikgJiYgKGlzQ29tcG9uZW50VGFnKHRhZykgfHwgZmFsc2UpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzVk9uICYmIHNzcikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgLy8gIzkzODogZWxlbWVudHMgd2l0aCBkeW5hbWljIGtleXMgc2hvdWxkIGJlIGZvcmNlZCBpbnRvIGJsb2Nrc1xuICAgICAgICBpc1ZCaW5kICYmIGlzU3RhdGljQXJnT2YoYXJnLCBcImtleVwiKSB8fCAvLyBpbmxpbmUgYmVmb3JlLXVwZGF0ZSBob29rcyBuZWVkIHRvIGZvcmNlIGJsb2NrIHNvIHRoYXQgaXQgaXMgaW52b2tlZFxuICAgICAgICAvLyBiZWZvcmUgY2hpbGRyZW5cbiAgICAgICAgaXNWT24gJiYgaGFzQ2hpbGRyZW4gJiYgaXNTdGF0aWNBcmdPZihhcmcsIFwidnVlOmJlZm9yZS11cGRhdGVcIilcbiAgICAgICkge1xuICAgICAgICBzaG91bGRVc2VCbG9jayA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNWQmluZCAmJiBpc1N0YXRpY0FyZ09mKGFyZywgXCJyZWZcIikpIHtcbiAgICAgICAgcHVzaFJlZlZGb3JNYXJrZXIoKTtcbiAgICAgIH1cbiAgICAgIGlmICghYXJnICYmIChpc1ZCaW5kIHx8IGlzVk9uKSkge1xuICAgICAgICBoYXNEeW5hbWljS2V5cyA9IHRydWU7XG4gICAgICAgIGlmIChleHApIHtcbiAgICAgICAgICBpZiAoaXNWQmluZCkge1xuICAgICAgICAgICAgcHVzaFJlZlZGb3JNYXJrZXIoKTtcbiAgICAgICAgICAgIHB1c2hNZXJnZUFyZygpO1xuICAgICAgICAgICAgbWVyZ2VBcmdzLnB1c2goZXhwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHVzaE1lcmdlQXJnKHtcbiAgICAgICAgICAgICAgdHlwZTogMTQsXG4gICAgICAgICAgICAgIGxvYyxcbiAgICAgICAgICAgICAgY2FsbGVlOiBjb250ZXh0LmhlbHBlcihUT19IQU5ETEVSUyksXG4gICAgICAgICAgICAgIGFyZ3VtZW50czogaXNDb21wb25lbnQgPyBbZXhwXSA6IFtleHAsIGB0cnVlYF1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgICAgICBjcmVhdGVDb21waWxlckVycm9yKFxuICAgICAgICAgICAgICBpc1ZCaW5kID8gMzQgOiAzNSxcbiAgICAgICAgICAgICAgbG9jXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZCaW5kICYmIG1vZGlmaWVycy5zb21lKChtb2QpID0+IG1vZC5jb250ZW50ID09PSBcInByb3BcIikpIHtcbiAgICAgICAgcGF0Y2hGbGFnIHw9IDMyO1xuICAgICAgfVxuICAgICAgY29uc3QgZGlyZWN0aXZlVHJhbnNmb3JtID0gY29udGV4dC5kaXJlY3RpdmVUcmFuc2Zvcm1zW25hbWVdO1xuICAgICAgaWYgKGRpcmVjdGl2ZVRyYW5zZm9ybSkge1xuICAgICAgICBjb25zdCB7IHByb3BzOiBwcm9wczIsIG5lZWRSdW50aW1lIH0gPSBkaXJlY3RpdmVUcmFuc2Zvcm0ocHJvcCwgbm9kZSwgY29udGV4dCk7XG4gICAgICAgICFzc3IgJiYgcHJvcHMyLmZvckVhY2goYW5hbHl6ZVBhdGNoRmxhZyk7XG4gICAgICAgIGlmIChpc1ZPbiAmJiBhcmcgJiYgIWlzU3RhdGljRXhwKGFyZykpIHtcbiAgICAgICAgICBwdXNoTWVyZ2VBcmcoY3JlYXRlT2JqZWN0RXhwcmVzc2lvbihwcm9wczIsIGVsZW1lbnRMb2MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wZXJ0aWVzLnB1c2goLi4ucHJvcHMyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmVlZFJ1bnRpbWUpIHtcbiAgICAgICAgICBydW50aW1lRGlyZWN0aXZlcy5wdXNoKHByb3ApO1xuICAgICAgICAgIGlmIChpc1N5bWJvbChuZWVkUnVudGltZSkpIHtcbiAgICAgICAgICAgIGRpcmVjdGl2ZUltcG9ydE1hcC5zZXQocHJvcCwgbmVlZFJ1bnRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghaXNCdWlsdEluRGlyZWN0aXZlKG5hbWUpKSB7XG4gICAgICAgIHJ1bnRpbWVEaXJlY3RpdmVzLnB1c2gocHJvcCk7XG4gICAgICAgIGlmIChoYXNDaGlsZHJlbikge1xuICAgICAgICAgIHNob3VsZFVzZUJsb2NrID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBsZXQgcHJvcHNFeHByZXNzaW9uID0gdm9pZCAwO1xuICBpZiAobWVyZ2VBcmdzLmxlbmd0aCkge1xuICAgIHB1c2hNZXJnZUFyZygpO1xuICAgIGlmIChtZXJnZUFyZ3MubGVuZ3RoID4gMSkge1xuICAgICAgcHJvcHNFeHByZXNzaW9uID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oXG4gICAgICAgIGNvbnRleHQuaGVscGVyKE1FUkdFX1BST1BTKSxcbiAgICAgICAgbWVyZ2VBcmdzLFxuICAgICAgICBlbGVtZW50TG9jXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wc0V4cHJlc3Npb24gPSBtZXJnZUFyZ3NbMF07XG4gICAgfVxuICB9IGVsc2UgaWYgKHByb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgcHJvcHNFeHByZXNzaW9uID0gY3JlYXRlT2JqZWN0RXhwcmVzc2lvbihcbiAgICAgIGRlZHVwZVByb3BlcnRpZXMocHJvcGVydGllcyksXG4gICAgICBlbGVtZW50TG9jXG4gICAgKTtcbiAgfVxuICBpZiAoaGFzRHluYW1pY0tleXMpIHtcbiAgICBwYXRjaEZsYWcgfD0gMTY7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGhhc0NsYXNzQmluZGluZyAmJiAhaXNDb21wb25lbnQpIHtcbiAgICAgIHBhdGNoRmxhZyB8PSAyO1xuICAgIH1cbiAgICBpZiAoaGFzU3R5bGVCaW5kaW5nICYmICFpc0NvbXBvbmVudCkge1xuICAgICAgcGF0Y2hGbGFnIHw9IDQ7XG4gICAgfVxuICAgIGlmIChkeW5hbWljUHJvcE5hbWVzLmxlbmd0aCkge1xuICAgICAgcGF0Y2hGbGFnIHw9IDg7XG4gICAgfVxuICAgIGlmIChoYXNIeWRyYXRpb25FdmVudEJpbmRpbmcpIHtcbiAgICAgIHBhdGNoRmxhZyB8PSAzMjtcbiAgICB9XG4gIH1cbiAgaWYgKCFzaG91bGRVc2VCbG9jayAmJiAocGF0Y2hGbGFnID09PSAwIHx8IHBhdGNoRmxhZyA9PT0gMzIpICYmIChoYXNSZWYgfHwgaGFzVm5vZGVIb29rIHx8IHJ1bnRpbWVEaXJlY3RpdmVzLmxlbmd0aCA+IDApKSB7XG4gICAgcGF0Y2hGbGFnIHw9IDUxMjtcbiAgfVxuICBpZiAoIWNvbnRleHQuaW5TU1IgJiYgcHJvcHNFeHByZXNzaW9uKSB7XG4gICAgc3dpdGNoIChwcm9wc0V4cHJlc3Npb24udHlwZSkge1xuICAgICAgY2FzZSAxNTpcbiAgICAgICAgbGV0IGNsYXNzS2V5SW5kZXggPSAtMTtcbiAgICAgICAgbGV0IHN0eWxlS2V5SW5kZXggPSAtMTtcbiAgICAgICAgbGV0IGhhc0R5bmFtaWNLZXkgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc0V4cHJlc3Npb24ucHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGtleSA9IHByb3BzRXhwcmVzc2lvbi5wcm9wZXJ0aWVzW2ldLmtleTtcbiAgICAgICAgICBpZiAoaXNTdGF0aWNFeHAoa2V5KSkge1xuICAgICAgICAgICAgaWYgKGtleS5jb250ZW50ID09PSBcImNsYXNzXCIpIHtcbiAgICAgICAgICAgICAgY2xhc3NLZXlJbmRleCA9IGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtleS5jb250ZW50ID09PSBcInN0eWxlXCIpIHtcbiAgICAgICAgICAgICAgc3R5bGVLZXlJbmRleCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICgha2V5LmlzSGFuZGxlcktleSkge1xuICAgICAgICAgICAgaGFzRHluYW1pY0tleSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNsYXNzUHJvcCA9IHByb3BzRXhwcmVzc2lvbi5wcm9wZXJ0aWVzW2NsYXNzS2V5SW5kZXhdO1xuICAgICAgICBjb25zdCBzdHlsZVByb3AgPSBwcm9wc0V4cHJlc3Npb24ucHJvcGVydGllc1tzdHlsZUtleUluZGV4XTtcbiAgICAgICAgaWYgKCFoYXNEeW5hbWljS2V5KSB7XG4gICAgICAgICAgaWYgKGNsYXNzUHJvcCAmJiAhaXNTdGF0aWNFeHAoY2xhc3NQcm9wLnZhbHVlKSkge1xuICAgICAgICAgICAgY2xhc3NQcm9wLnZhbHVlID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oXG4gICAgICAgICAgICAgIGNvbnRleHQuaGVscGVyKE5PUk1BTElaRV9DTEFTUyksXG4gICAgICAgICAgICAgIFtjbGFzc1Byb3AudmFsdWVdXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3R5bGVQcm9wICYmIC8vIHRoZSBzdGF0aWMgc3R5bGUgaXMgY29tcGlsZWQgaW50byBhbiBvYmplY3QsXG4gICAgICAgICAgLy8gc28gdXNlIGBoYXNTdHlsZUJpbmRpbmdgIHRvIGVuc3VyZSB0aGF0IGl0IGlzIGEgZHluYW1pYyBzdHlsZSBiaW5kaW5nXG4gICAgICAgICAgKGhhc1N0eWxlQmluZGluZyB8fCBzdHlsZVByb3AudmFsdWUudHlwZSA9PT0gNCAmJiBzdHlsZVByb3AudmFsdWUuY29udGVudC50cmltKClbMF0gPT09IGBbYCB8fCAvLyB2LWJpbmQ6c3R5bGUgYW5kIHN0eWxlIGJvdGggZXhpc3QsXG4gICAgICAgICAgLy8gdi1iaW5kOnN0eWxlIHdpdGggc3RhdGljIGxpdGVyYWwgb2JqZWN0XG4gICAgICAgICAgc3R5bGVQcm9wLnZhbHVlLnR5cGUgPT09IDE3KSkge1xuICAgICAgICAgICAgc3R5bGVQcm9wLnZhbHVlID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oXG4gICAgICAgICAgICAgIGNvbnRleHQuaGVscGVyKE5PUk1BTElaRV9TVFlMRSksXG4gICAgICAgICAgICAgIFtzdHlsZVByb3AudmFsdWVdXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wc0V4cHJlc3Npb24gPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihcbiAgICAgICAgICAgIGNvbnRleHQuaGVscGVyKE5PUk1BTElaRV9QUk9QUyksXG4gICAgICAgICAgICBbcHJvcHNFeHByZXNzaW9uXVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE0OlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHByb3BzRXhwcmVzc2lvbiA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKFxuICAgICAgICAgIGNvbnRleHQuaGVscGVyKE5PUk1BTElaRV9QUk9QUyksXG4gICAgICAgICAgW1xuICAgICAgICAgICAgY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoR1VBUkRfUkVBQ1RJVkVfUFJPUFMpLCBbXG4gICAgICAgICAgICAgIHByb3BzRXhwcmVzc2lvblxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHByb3BzOiBwcm9wc0V4cHJlc3Npb24sXG4gICAgZGlyZWN0aXZlczogcnVudGltZURpcmVjdGl2ZXMsXG4gICAgcGF0Y2hGbGFnLFxuICAgIGR5bmFtaWNQcm9wTmFtZXMsXG4gICAgc2hvdWxkVXNlQmxvY2tcbiAgfTtcbn1cbmZ1bmN0aW9uIGRlZHVwZVByb3BlcnRpZXMocHJvcGVydGllcykge1xuICBjb25zdCBrbm93blByb3BzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgY29uc3QgZGVkdXBlZCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwcm9wID0gcHJvcGVydGllc1tpXTtcbiAgICBpZiAocHJvcC5rZXkudHlwZSA9PT0gOCB8fCAhcHJvcC5rZXkuaXNTdGF0aWMpIHtcbiAgICAgIGRlZHVwZWQucHVzaChwcm9wKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBuYW1lID0gcHJvcC5rZXkuY29udGVudDtcbiAgICBjb25zdCBleGlzdGluZyA9IGtub3duUHJvcHMuZ2V0KG5hbWUpO1xuICAgIGlmIChleGlzdGluZykge1xuICAgICAgaWYgKG5hbWUgPT09IFwic3R5bGVcIiB8fCBuYW1lID09PSBcImNsYXNzXCIgfHwgaXNPbihuYW1lKSkge1xuICAgICAgICBtZXJnZUFzQXJyYXkoZXhpc3RpbmcsIHByb3ApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBrbm93blByb3BzLnNldChuYW1lLCBwcm9wKTtcbiAgICAgIGRlZHVwZWQucHVzaChwcm9wKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlZHVwZWQ7XG59XG5mdW5jdGlvbiBtZXJnZUFzQXJyYXkoZXhpc3RpbmcsIGluY29taW5nKSB7XG4gIGlmIChleGlzdGluZy52YWx1ZS50eXBlID09PSAxNykge1xuICAgIGV4aXN0aW5nLnZhbHVlLmVsZW1lbnRzLnB1c2goaW5jb21pbmcudmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGV4aXN0aW5nLnZhbHVlID0gY3JlYXRlQXJyYXlFeHByZXNzaW9uKFxuICAgICAgW2V4aXN0aW5nLnZhbHVlLCBpbmNvbWluZy52YWx1ZV0sXG4gICAgICBleGlzdGluZy5sb2NcbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBidWlsZERpcmVjdGl2ZUFyZ3MoZGlyLCBjb250ZXh0KSB7XG4gIGNvbnN0IGRpckFyZ3MgPSBbXTtcbiAgY29uc3QgcnVudGltZSA9IGRpcmVjdGl2ZUltcG9ydE1hcC5nZXQoZGlyKTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBkaXJBcmdzLnB1c2goY29udGV4dC5oZWxwZXJTdHJpbmcocnVudGltZSkpO1xuICB9IGVsc2Uge1xuICAgIHtcbiAgICAgIGNvbnRleHQuaGVscGVyKFJFU09MVkVfRElSRUNUSVZFKTtcbiAgICAgIGNvbnRleHQuZGlyZWN0aXZlcy5hZGQoZGlyLm5hbWUpO1xuICAgICAgZGlyQXJncy5wdXNoKHRvVmFsaWRBc3NldElkKGRpci5uYW1lLCBgZGlyZWN0aXZlYCkpO1xuICAgIH1cbiAgfVxuICBjb25zdCB7IGxvYyB9ID0gZGlyO1xuICBpZiAoZGlyLmV4cCkgZGlyQXJncy5wdXNoKGRpci5leHApO1xuICBpZiAoZGlyLmFyZykge1xuICAgIGlmICghZGlyLmV4cCkge1xuICAgICAgZGlyQXJncy5wdXNoKGB2b2lkIDBgKTtcbiAgICB9XG4gICAgZGlyQXJncy5wdXNoKGRpci5hcmcpO1xuICB9XG4gIGlmIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzKS5sZW5ndGgpIHtcbiAgICBpZiAoIWRpci5hcmcpIHtcbiAgICAgIGlmICghZGlyLmV4cCkge1xuICAgICAgICBkaXJBcmdzLnB1c2goYHZvaWQgMGApO1xuICAgICAgfVxuICAgICAgZGlyQXJncy5wdXNoKGB2b2lkIDBgKTtcbiAgICB9XG4gICAgY29uc3QgdHJ1ZUV4cHJlc3Npb24gPSBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGB0cnVlYCwgZmFsc2UsIGxvYyk7XG4gICAgZGlyQXJncy5wdXNoKFxuICAgICAgY3JlYXRlT2JqZWN0RXhwcmVzc2lvbihcbiAgICAgICAgZGlyLm1vZGlmaWVycy5tYXAoXG4gICAgICAgICAgKG1vZGlmaWVyKSA9PiBjcmVhdGVPYmplY3RQcm9wZXJ0eShtb2RpZmllciwgdHJ1ZUV4cHJlc3Npb24pXG4gICAgICAgICksXG4gICAgICAgIGxvY1xuICAgICAgKVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUFycmF5RXhwcmVzc2lvbihkaXJBcmdzLCBkaXIubG9jKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUR5bmFtaWNQcm9wTmFtZXMocHJvcHMpIHtcbiAgbGV0IHByb3BzTmFtZXNTdHJpbmcgPSBgW2A7XG4gIGZvciAobGV0IGkgPSAwLCBsID0gcHJvcHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgcHJvcHNOYW1lc1N0cmluZyArPSBKU09OLnN0cmluZ2lmeShwcm9wc1tpXSk7XG4gICAgaWYgKGkgPCBsIC0gMSkgcHJvcHNOYW1lc1N0cmluZyArPSBcIiwgXCI7XG4gIH1cbiAgcmV0dXJuIHByb3BzTmFtZXNTdHJpbmcgKyBgXWA7XG59XG5mdW5jdGlvbiBpc0NvbXBvbmVudFRhZyh0YWcpIHtcbiAgcmV0dXJuIHRhZyA9PT0gXCJjb21wb25lbnRcIiB8fCB0YWcgPT09IFwiQ29tcG9uZW50XCI7XG59XG5cbmNvbnN0IHRyYW5zZm9ybVNsb3RPdXRsZXQgPSAobm9kZSwgY29udGV4dCkgPT4ge1xuICBpZiAoaXNTbG90T3V0bGV0KG5vZGUpKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgbG9jIH0gPSBub2RlO1xuICAgIGNvbnN0IHsgc2xvdE5hbWUsIHNsb3RQcm9wcyB9ID0gcHJvY2Vzc1Nsb3RPdXRsZXQobm9kZSwgY29udGV4dCk7XG4gICAgY29uc3Qgc2xvdEFyZ3MgPSBbXG4gICAgICBjb250ZXh0LnByZWZpeElkZW50aWZpZXJzID8gYF9jdHguJHNsb3RzYCA6IGAkc2xvdHNgLFxuICAgICAgc2xvdE5hbWUsXG4gICAgICBcInt9XCIsXG4gICAgICBcInVuZGVmaW5lZFwiLFxuICAgICAgXCJ0cnVlXCJcbiAgICBdO1xuICAgIGxldCBleHBlY3RlZExlbiA9IDI7XG4gICAgaWYgKHNsb3RQcm9wcykge1xuICAgICAgc2xvdEFyZ3NbMl0gPSBzbG90UHJvcHM7XG4gICAgICBleHBlY3RlZExlbiA9IDM7XG4gICAgfVxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHNsb3RBcmdzWzNdID0gY3JlYXRlRnVuY3Rpb25FeHByZXNzaW9uKFtdLCBjaGlsZHJlbiwgZmFsc2UsIGZhbHNlLCBsb2MpO1xuICAgICAgZXhwZWN0ZWRMZW4gPSA0O1xuICAgIH1cbiAgICBpZiAoY29udGV4dC5zY29wZUlkICYmICFjb250ZXh0LnNsb3R0ZWQpIHtcbiAgICAgIGV4cGVjdGVkTGVuID0gNTtcbiAgICB9XG4gICAgc2xvdEFyZ3Muc3BsaWNlKGV4cGVjdGVkTGVuKTtcbiAgICBub2RlLmNvZGVnZW5Ob2RlID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oXG4gICAgICBjb250ZXh0LmhlbHBlcihSRU5ERVJfU0xPVCksXG4gICAgICBzbG90QXJncyxcbiAgICAgIGxvY1xuICAgICk7XG4gIH1cbn07XG5mdW5jdGlvbiBwcm9jZXNzU2xvdE91dGxldChub2RlLCBjb250ZXh0KSB7XG4gIGxldCBzbG90TmFtZSA9IGBcImRlZmF1bHRcImA7XG4gIGxldCBzbG90UHJvcHMgPSB2b2lkIDA7XG4gIGNvbnN0IG5vbk5hbWVQcm9wcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUucHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwID0gbm9kZS5wcm9wc1tpXTtcbiAgICBpZiAocC50eXBlID09PSA2KSB7XG4gICAgICBpZiAocC52YWx1ZSkge1xuICAgICAgICBpZiAocC5uYW1lID09PSBcIm5hbWVcIikge1xuICAgICAgICAgIHNsb3ROYW1lID0gSlNPTi5zdHJpbmdpZnkocC52YWx1ZS5jb250ZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwLm5hbWUgPSBjYW1lbGl6ZShwLm5hbWUpO1xuICAgICAgICAgIG5vbk5hbWVQcm9wcy5wdXNoKHApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwLm5hbWUgPT09IFwiYmluZFwiICYmIGlzU3RhdGljQXJnT2YocC5hcmcsIFwibmFtZVwiKSkge1xuICAgICAgICBpZiAocC5leHApIHtcbiAgICAgICAgICBzbG90TmFtZSA9IHAuZXhwO1xuICAgICAgICB9IGVsc2UgaWYgKHAuYXJnICYmIHAuYXJnLnR5cGUgPT09IDQpIHtcbiAgICAgICAgICBjb25zdCBuYW1lID0gY2FtZWxpemUocC5hcmcuY29udGVudCk7XG4gICAgICAgICAgc2xvdE5hbWUgPSBwLmV4cCA9IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24obmFtZSwgZmFsc2UsIHAuYXJnLmxvYyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwLm5hbWUgPT09IFwiYmluZFwiICYmIHAuYXJnICYmIGlzU3RhdGljRXhwKHAuYXJnKSkge1xuICAgICAgICAgIHAuYXJnLmNvbnRlbnQgPSBjYW1lbGl6ZShwLmFyZy5jb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBub25OYW1lUHJvcHMucHVzaChwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKG5vbk5hbWVQcm9wcy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgeyBwcm9wcywgZGlyZWN0aXZlcyB9ID0gYnVpbGRQcm9wcyhcbiAgICAgIG5vZGUsXG4gICAgICBjb250ZXh0LFxuICAgICAgbm9uTmFtZVByb3BzLFxuICAgICAgZmFsc2UsXG4gICAgICBmYWxzZVxuICAgICk7XG4gICAgc2xvdFByb3BzID0gcHJvcHM7XG4gICAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoXG4gICAgICAgICAgMzYsXG4gICAgICAgICAgZGlyZWN0aXZlc1swXS5sb2NcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzbG90TmFtZSxcbiAgICBzbG90UHJvcHNcbiAgfTtcbn1cblxuY29uc3QgdHJhbnNmb3JtT24kMSA9IChkaXIsIG5vZGUsIGNvbnRleHQsIGF1Z21lbnRvcikgPT4ge1xuICBjb25zdCB7IGxvYywgbW9kaWZpZXJzLCBhcmcgfSA9IGRpcjtcbiAgaWYgKCFkaXIuZXhwICYmICFtb2RpZmllcnMubGVuZ3RoKSB7XG4gICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzUsIGxvYykpO1xuICB9XG4gIGxldCBldmVudE5hbWU7XG4gIGlmIChhcmcudHlwZSA9PT0gNCkge1xuICAgIGlmIChhcmcuaXNTdGF0aWMpIHtcbiAgICAgIGxldCByYXdOYW1lID0gYXJnLmNvbnRlbnQ7XG4gICAgICBpZiAocmF3TmFtZS5zdGFydHNXaXRoKFwidm5vZGVcIikpIHtcbiAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoNTEsIGFyZy5sb2MpKTtcbiAgICAgIH1cbiAgICAgIGlmIChyYXdOYW1lLnN0YXJ0c1dpdGgoXCJ2dWU6XCIpKSB7XG4gICAgICAgIHJhd05hbWUgPSBgdm5vZGUtJHtyYXdOYW1lLnNsaWNlKDQpfWA7XG4gICAgICB9XG4gICAgICBjb25zdCBldmVudFN0cmluZyA9IG5vZGUudGFnVHlwZSAhPT0gMCB8fCByYXdOYW1lLnN0YXJ0c1dpdGgoXCJ2bm9kZVwiKSB8fCAhL1tBLVpdLy50ZXN0KHJhd05hbWUpID8gKFxuICAgICAgICAvLyBmb3Igbm9uLWVsZW1lbnQgYW5kIHZub2RlIGxpZmVjeWNsZSBldmVudCBsaXN0ZW5lcnMsIGF1dG8gY29udmVydFxuICAgICAgICAvLyBpdCB0byBjYW1lbENhc2UuIFNlZSBpc3N1ZSAjMjI0OVxuICAgICAgICB0b0hhbmRsZXJLZXkoY2FtZWxpemUocmF3TmFtZSkpXG4gICAgICApIDogKFxuICAgICAgICAvLyBwcmVzZXJ2ZSBjYXNlIGZvciBwbGFpbiBlbGVtZW50IGxpc3RlbmVycyB0aGF0IGhhdmUgdXBwZXJjYXNlXG4gICAgICAgIC8vIGxldHRlcnMsIGFzIHRoZXNlIG1heSBiZSBjdXN0b20gZWxlbWVudHMnIGN1c3RvbSBldmVudHNcbiAgICAgICAgYG9uOiR7cmF3TmFtZX1gXG4gICAgICApO1xuICAgICAgZXZlbnROYW1lID0gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihldmVudFN0cmluZywgdHJ1ZSwgYXJnLmxvYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50TmFtZSA9IGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbXG4gICAgICAgIGAke2NvbnRleHQuaGVscGVyU3RyaW5nKFRPX0hBTkRMRVJfS0VZKX0oYCxcbiAgICAgICAgYXJnLFxuICAgICAgICBgKWBcbiAgICAgIF0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBldmVudE5hbWUgPSBhcmc7XG4gICAgZXZlbnROYW1lLmNoaWxkcmVuLnVuc2hpZnQoYCR7Y29udGV4dC5oZWxwZXJTdHJpbmcoVE9fSEFORExFUl9LRVkpfShgKTtcbiAgICBldmVudE5hbWUuY2hpbGRyZW4ucHVzaChgKWApO1xuICB9XG4gIGxldCBleHAgPSBkaXIuZXhwO1xuICBpZiAoZXhwICYmICFleHAuY29udGVudC50cmltKCkpIHtcbiAgICBleHAgPSB2b2lkIDA7XG4gIH1cbiAgbGV0IHNob3VsZENhY2hlID0gY29udGV4dC5jYWNoZUhhbmRsZXJzICYmICFleHAgJiYgIWNvbnRleHQuaW5WT25jZTtcbiAgaWYgKGV4cCkge1xuICAgIGNvbnN0IGlzTWVtYmVyRXhwID0gaXNNZW1iZXJFeHByZXNzaW9uKGV4cCk7XG4gICAgY29uc3QgaXNJbmxpbmVTdGF0ZW1lbnQgPSAhKGlzTWVtYmVyRXhwIHx8IGlzRm5FeHByZXNzaW9uKGV4cCkpO1xuICAgIGNvbnN0IGhhc011bHRpcGxlU3RhdGVtZW50cyA9IGV4cC5jb250ZW50LmluY2x1ZGVzKGA7YCk7XG4gICAge1xuICAgICAgdmFsaWRhdGVCcm93c2VyRXhwcmVzc2lvbihcbiAgICAgICAgZXhwLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgaGFzTXVsdGlwbGVTdGF0ZW1lbnRzXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoaXNJbmxpbmVTdGF0ZW1lbnQgfHwgc2hvdWxkQ2FjaGUgJiYgaXNNZW1iZXJFeHApIHtcbiAgICAgIGV4cCA9IGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbXG4gICAgICAgIGAke2lzSW5saW5lU3RhdGVtZW50ID8gYCRldmVudGAgOiBgJHtgYH0oLi4uYXJncylgfSA9PiAke2hhc011bHRpcGxlU3RhdGVtZW50cyA/IGB7YCA6IGAoYH1gLFxuICAgICAgICBleHAsXG4gICAgICAgIGhhc011bHRpcGxlU3RhdGVtZW50cyA/IGB9YCA6IGApYFxuICAgICAgXSk7XG4gICAgfVxuICB9XG4gIGxldCByZXQgPSB7XG4gICAgcHJvcHM6IFtcbiAgICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KFxuICAgICAgICBldmVudE5hbWUsXG4gICAgICAgIGV4cCB8fCBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGAoKSA9PiB7fWAsIGZhbHNlLCBsb2MpXG4gICAgICApXG4gICAgXVxuICB9O1xuICBpZiAoYXVnbWVudG9yKSB7XG4gICAgcmV0ID0gYXVnbWVudG9yKHJldCk7XG4gIH1cbiAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgcmV0LnByb3BzWzBdLnZhbHVlID0gY29udGV4dC5jYWNoZShyZXQucHJvcHNbMF0udmFsdWUpO1xuICB9XG4gIHJldC5wcm9wcy5mb3JFYWNoKChwKSA9PiBwLmtleS5pc0hhbmRsZXJLZXkgPSB0cnVlKTtcbiAgcmV0dXJuIHJldDtcbn07XG5cbmNvbnN0IHRyYW5zZm9ybVRleHQgPSAobm9kZSwgY29udGV4dCkgPT4ge1xuICBpZiAobm9kZS50eXBlID09PSAwIHx8IG5vZGUudHlwZSA9PT0gMSB8fCBub2RlLnR5cGUgPT09IDExIHx8IG5vZGUudHlwZSA9PT0gMTApIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgbGV0IGN1cnJlbnRDb250YWluZXIgPSB2b2lkIDA7XG4gICAgICBsZXQgaGFzVGV4dCA9IGZhbHNlO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICBpZiAoaXNUZXh0JDEoY2hpbGQpKSB7XG4gICAgICAgICAgaGFzVGV4dCA9IHRydWU7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBjaGlsZHJlbltqXTtcbiAgICAgICAgICAgIGlmIChpc1RleHQkMShuZXh0KSkge1xuICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29udGFpbmVyID0gY2hpbGRyZW5baV0gPSBjcmVhdGVDb21wb3VuZEV4cHJlc3Npb24oXG4gICAgICAgICAgICAgICAgICBbY2hpbGRdLFxuICAgICAgICAgICAgICAgICAgY2hpbGQubG9jXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjdXJyZW50Q29udGFpbmVyLmNoaWxkcmVuLnB1c2goYCArIGAsIG5leHQpO1xuICAgICAgICAgICAgICBjaGlsZHJlbi5zcGxpY2UoaiwgMSk7XG4gICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRDb250YWluZXIgPSB2b2lkIDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFoYXNUZXh0IHx8IC8vIGlmIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IHdpdGggYSBzaW5nbGUgdGV4dCBjaGlsZCwgbGVhdmUgaXRcbiAgICAgIC8vIGFzLWlzIHNpbmNlIHRoZSBydW50aW1lIGhhcyBkZWRpY2F0ZWQgZmFzdCBwYXRoIGZvciB0aGlzIGJ5IGRpcmVjdGx5XG4gICAgICAvLyBzZXR0aW5nIHRleHRDb250ZW50IG9mIHRoZSBlbGVtZW50LlxuICAgICAgLy8gZm9yIGNvbXBvbmVudCByb290IGl0J3MgYWx3YXlzIG5vcm1hbGl6ZWQgYW55d2F5LlxuICAgICAgY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIChub2RlLnR5cGUgPT09IDAgfHwgbm9kZS50eXBlID09PSAxICYmIG5vZGUudGFnVHlwZSA9PT0gMCAmJiAvLyAjMzc1NlxuICAgICAgLy8gY3VzdG9tIGRpcmVjdGl2ZXMgY2FuIHBvdGVudGlhbGx5IGFkZCBET00gZWxlbWVudHMgYXJiaXRyYXJpbHksXG4gICAgICAvLyB3ZSBuZWVkIHRvIGF2b2lkIHNldHRpbmcgdGV4dENvbnRlbnQgb2YgdGhlIGVsZW1lbnQgYXQgcnVudGltZVxuICAgICAgLy8gdG8gYXZvaWQgYWNjaWRlbnRhbGx5IG92ZXJ3cml0aW5nIHRoZSBET00gZWxlbWVudHMgYWRkZWRcbiAgICAgIC8vIGJ5IHRoZSB1c2VyIHRocm91Z2ggY3VzdG9tIGRpcmVjdGl2ZXMuXG4gICAgICAhbm9kZS5wcm9wcy5maW5kKFxuICAgICAgICAocCkgPT4gcC50eXBlID09PSA3ICYmICFjb250ZXh0LmRpcmVjdGl2ZVRyYW5zZm9ybXNbcC5uYW1lXVxuICAgICAgKSAmJiAvLyBpbiBjb21wYXQgbW9kZSwgPHRlbXBsYXRlPiB0YWdzIHdpdGggbm8gc3BlY2lhbCBkaXJlY3RpdmVzXG4gICAgICAvLyB3aWxsIGJlIHJlbmRlcmVkIGFzIGEgZnJhZ21lbnQgc28gaXRzIGNoaWxkcmVuIG11c3QgYmVcbiAgICAgIC8vIGNvbnZlcnRlZCBpbnRvIHZub2Rlcy5cbiAgICAgIHRydWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgaWYgKGlzVGV4dCQxKGNoaWxkKSB8fCBjaGlsZC50eXBlID09PSA4KSB7XG4gICAgICAgICAgY29uc3QgY2FsbEFyZ3MgPSBbXTtcbiAgICAgICAgICBpZiAoY2hpbGQudHlwZSAhPT0gMiB8fCBjaGlsZC5jb250ZW50ICE9PSBcIiBcIikge1xuICAgICAgICAgICAgY2FsbEFyZ3MucHVzaChjaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghY29udGV4dC5zc3IgJiYgZ2V0Q29uc3RhbnRUeXBlKGNoaWxkLCBjb250ZXh0KSA9PT0gMCkge1xuICAgICAgICAgICAgY2FsbEFyZ3MucHVzaChcbiAgICAgICAgICAgICAgMSArIChgIC8qICR7UGF0Y2hGbGFnTmFtZXNbMV19ICovYCApXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGlsZHJlbltpXSA9IHtcbiAgICAgICAgICAgIHR5cGU6IDEyLFxuICAgICAgICAgICAgY29udGVudDogY2hpbGQsXG4gICAgICAgICAgICBsb2M6IGNoaWxkLmxvYyxcbiAgICAgICAgICAgIGNvZGVnZW5Ob2RlOiBjcmVhdGVDYWxsRXhwcmVzc2lvbihcbiAgICAgICAgICAgICAgY29udGV4dC5oZWxwZXIoQ1JFQVRFX1RFWFQpLFxuICAgICAgICAgICAgICBjYWxsQXJnc1xuICAgICAgICAgICAgKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5jb25zdCBzZWVuJDEgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKTtcbmNvbnN0IHRyYW5zZm9ybU9uY2UgPSAobm9kZSwgY29udGV4dCkgPT4ge1xuICBpZiAobm9kZS50eXBlID09PSAxICYmIGZpbmREaXIobm9kZSwgXCJvbmNlXCIsIHRydWUpKSB7XG4gICAgaWYgKHNlZW4kMS5oYXMobm9kZSkgfHwgY29udGV4dC5pblZPbmNlIHx8IGNvbnRleHQuaW5TU1IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VlbiQxLmFkZChub2RlKTtcbiAgICBjb250ZXh0LmluVk9uY2UgPSB0cnVlO1xuICAgIGNvbnRleHQuaGVscGVyKFNFVF9CTE9DS19UUkFDS0lORyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnRleHQuaW5WT25jZSA9IGZhbHNlO1xuICAgICAgY29uc3QgY3VyID0gY29udGV4dC5jdXJyZW50Tm9kZTtcbiAgICAgIGlmIChjdXIuY29kZWdlbk5vZGUpIHtcbiAgICAgICAgY3VyLmNvZGVnZW5Ob2RlID0gY29udGV4dC5jYWNoZShcbiAgICAgICAgICBjdXIuY29kZWdlbk5vZGUsXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICB0cnVlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufTtcblxuY29uc3QgdHJhbnNmb3JtTW9kZWwkMSA9IChkaXIsIG5vZGUsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgeyBleHAsIGFyZyB9ID0gZGlyO1xuICBpZiAoIWV4cCkge1xuICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgIGNyZWF0ZUNvbXBpbGVyRXJyb3IoNDEsIGRpci5sb2MpXG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlVHJhbnNmb3JtUHJvcHMoKTtcbiAgfVxuICBjb25zdCByYXdFeHAgPSBleHAubG9jLnNvdXJjZS50cmltKCk7XG4gIGNvbnN0IGV4cFN0cmluZyA9IGV4cC50eXBlID09PSA0ID8gZXhwLmNvbnRlbnQgOiByYXdFeHA7XG4gIGNvbnN0IGJpbmRpbmdUeXBlID0gY29udGV4dC5iaW5kaW5nTWV0YWRhdGFbcmF3RXhwXTtcbiAgaWYgKGJpbmRpbmdUeXBlID09PSBcInByb3BzXCIgfHwgYmluZGluZ1R5cGUgPT09IFwicHJvcHMtYWxpYXNlZFwiKSB7XG4gICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoNDQsIGV4cC5sb2MpKTtcbiAgICByZXR1cm4gY3JlYXRlVHJhbnNmb3JtUHJvcHMoKTtcbiAgfVxuICBpZiAoIWV4cFN0cmluZy50cmltKCkgfHwgIWlzTWVtYmVyRXhwcmVzc2lvbihleHApICYmIHRydWUpIHtcbiAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICBjcmVhdGVDb21waWxlckVycm9yKDQyLCBleHAubG9jKVxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZVRyYW5zZm9ybVByb3BzKCk7XG4gIH1cbiAgY29uc3QgcHJvcE5hbWUgPSBhcmcgPyBhcmcgOiBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKFwibW9kZWxWYWx1ZVwiLCB0cnVlKTtcbiAgY29uc3QgZXZlbnROYW1lID0gYXJnID8gaXNTdGF0aWNFeHAoYXJnKSA/IGBvblVwZGF0ZToke2NhbWVsaXplKGFyZy5jb250ZW50KX1gIDogY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uKFsnXCJvblVwZGF0ZTpcIiArICcsIGFyZ10pIDogYG9uVXBkYXRlOm1vZGVsVmFsdWVgO1xuICBsZXQgYXNzaWdubWVudEV4cDtcbiAgY29uc3QgZXZlbnRBcmcgPSBjb250ZXh0LmlzVFMgPyBgKCRldmVudDogYW55KWAgOiBgJGV2ZW50YDtcbiAge1xuICAgIGFzc2lnbm1lbnRFeHAgPSBjcmVhdGVDb21wb3VuZEV4cHJlc3Npb24oW1xuICAgICAgYCR7ZXZlbnRBcmd9ID0+ICgoYCxcbiAgICAgIGV4cCxcbiAgICAgIGApID0gJGV2ZW50KWBcbiAgICBdKTtcbiAgfVxuICBjb25zdCBwcm9wcyA9IFtcbiAgICAvLyBtb2RlbFZhbHVlOiBmb29cbiAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShwcm9wTmFtZSwgZGlyLmV4cCksXG4gICAgLy8gXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoZm9vID0gJGV2ZW50KVxuICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KGV2ZW50TmFtZSwgYXNzaWdubWVudEV4cClcbiAgXTtcbiAgaWYgKGRpci5tb2RpZmllcnMubGVuZ3RoICYmIG5vZGUudGFnVHlwZSA9PT0gMSkge1xuICAgIGNvbnN0IG1vZGlmaWVycyA9IGRpci5tb2RpZmllcnMubWFwKChtKSA9PiBtLmNvbnRlbnQpLm1hcCgobSkgPT4gKGlzU2ltcGxlSWRlbnRpZmllcihtKSA/IG0gOiBKU09OLnN0cmluZ2lmeShtKSkgKyBgOiB0cnVlYCkuam9pbihgLCBgKTtcbiAgICBjb25zdCBtb2RpZmllcnNLZXkgPSBhcmcgPyBpc1N0YXRpY0V4cChhcmcpID8gYCR7YXJnLmNvbnRlbnR9TW9kaWZpZXJzYCA6IGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbYXJnLCAnICsgXCJNb2RpZmllcnNcIiddKSA6IGBtb2RlbE1vZGlmaWVyc2A7XG4gICAgcHJvcHMucHVzaChcbiAgICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KFxuICAgICAgICBtb2RpZmllcnNLZXksXG4gICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oXG4gICAgICAgICAgYHsgJHttb2RpZmllcnN9IH1gLFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIGRpci5sb2MsXG4gICAgICAgICAgMlxuICAgICAgICApXG4gICAgICApXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlVHJhbnNmb3JtUHJvcHMocHJvcHMpO1xufTtcbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zZm9ybVByb3BzKHByb3BzID0gW10pIHtcbiAgcmV0dXJuIHsgcHJvcHMgfTtcbn1cblxuY29uc3Qgc2VlbiA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha1NldCgpO1xuY29uc3QgdHJhbnNmb3JtTWVtbyA9IChub2RlLCBjb250ZXh0KSA9PiB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBjb25zdCBkaXIgPSBmaW5kRGlyKG5vZGUsIFwibWVtb1wiKTtcbiAgICBpZiAoIWRpciB8fCBzZWVuLmhhcyhub2RlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzZWVuLmFkZChub2RlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgY29kZWdlbk5vZGUgPSBub2RlLmNvZGVnZW5Ob2RlIHx8IGNvbnRleHQuY3VycmVudE5vZGUuY29kZWdlbk5vZGU7XG4gICAgICBpZiAoY29kZWdlbk5vZGUgJiYgY29kZWdlbk5vZGUudHlwZSA9PT0gMTMpIHtcbiAgICAgICAgaWYgKG5vZGUudGFnVHlwZSAhPT0gMSkge1xuICAgICAgICAgIGNvbnZlcnRUb0Jsb2NrKGNvZGVnZW5Ob2RlLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLmNvZGVnZW5Ob2RlID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoV0lUSF9NRU1PKSwgW1xuICAgICAgICAgIGRpci5leHAsXG4gICAgICAgICAgY3JlYXRlRnVuY3Rpb25FeHByZXNzaW9uKHZvaWQgMCwgY29kZWdlbk5vZGUpLFxuICAgICAgICAgIGBfY2FjaGVgLFxuICAgICAgICAgIFN0cmluZyhjb250ZXh0LmNhY2hlZC5sZW5ndGgpXG4gICAgICAgIF0pO1xuICAgICAgICBjb250ZXh0LmNhY2hlZC5wdXNoKG51bGwpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEJhc2VUcmFuc2Zvcm1QcmVzZXQocHJlZml4SWRlbnRpZmllcnMpIHtcbiAgcmV0dXJuIFtcbiAgICBbXG4gICAgICB0cmFuc2Zvcm1PbmNlLFxuICAgICAgdHJhbnNmb3JtSWYsXG4gICAgICB0cmFuc2Zvcm1NZW1vLFxuICAgICAgdHJhbnNmb3JtRm9yLFxuICAgICAgLi4uW10sXG4gICAgICAuLi5bdHJhbnNmb3JtRXhwcmVzc2lvbl0gLFxuICAgICAgdHJhbnNmb3JtU2xvdE91dGxldCxcbiAgICAgIHRyYW5zZm9ybUVsZW1lbnQsXG4gICAgICB0cmFja1Nsb3RTY29wZXMsXG4gICAgICB0cmFuc2Zvcm1UZXh0XG4gICAgXSxcbiAgICB7XG4gICAgICBvbjogdHJhbnNmb3JtT24kMSxcbiAgICAgIGJpbmQ6IHRyYW5zZm9ybUJpbmQsXG4gICAgICBtb2RlbDogdHJhbnNmb3JtTW9kZWwkMVxuICAgIH1cbiAgXTtcbn1cbmZ1bmN0aW9uIGJhc2VDb21waWxlKHNvdXJjZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IG9uRXJyb3IgPSBvcHRpb25zLm9uRXJyb3IgfHwgZGVmYXVsdE9uRXJyb3I7XG4gIGNvbnN0IGlzTW9kdWxlTW9kZSA9IG9wdGlvbnMubW9kZSA9PT0gXCJtb2R1bGVcIjtcbiAge1xuICAgIGlmIChvcHRpb25zLnByZWZpeElkZW50aWZpZXJzID09PSB0cnVlKSB7XG4gICAgICBvbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoNDcpKTtcbiAgICB9IGVsc2UgaWYgKGlzTW9kdWxlTW9kZSkge1xuICAgICAgb25FcnJvcihjcmVhdGVDb21waWxlckVycm9yKDQ4KSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHByZWZpeElkZW50aWZpZXJzID0gZmFsc2U7XG4gIGlmIChvcHRpb25zLmNhY2hlSGFuZGxlcnMpIHtcbiAgICBvbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoNDkpKTtcbiAgfVxuICBpZiAob3B0aW9ucy5zY29wZUlkICYmICFpc01vZHVsZU1vZGUpIHtcbiAgICBvbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoNTApKTtcbiAgfVxuICBjb25zdCByZXNvbHZlZE9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMsIHtcbiAgICBwcmVmaXhJZGVudGlmaWVyc1xuICB9KTtcbiAgY29uc3QgYXN0ID0gaXNTdHJpbmcoc291cmNlKSA/IGJhc2VQYXJzZShzb3VyY2UsIHJlc29sdmVkT3B0aW9ucykgOiBzb3VyY2U7XG4gIGNvbnN0IFtub2RlVHJhbnNmb3JtcywgZGlyZWN0aXZlVHJhbnNmb3Jtc10gPSBnZXRCYXNlVHJhbnNmb3JtUHJlc2V0KCk7XG4gIHRyYW5zZm9ybShcbiAgICBhc3QsXG4gICAgZXh0ZW5kKHt9LCByZXNvbHZlZE9wdGlvbnMsIHtcbiAgICAgIG5vZGVUcmFuc2Zvcm1zOiBbXG4gICAgICAgIC4uLm5vZGVUcmFuc2Zvcm1zLFxuICAgICAgICAuLi5vcHRpb25zLm5vZGVUcmFuc2Zvcm1zIHx8IFtdXG4gICAgICAgIC8vIHVzZXIgdHJhbnNmb3Jtc1xuICAgICAgXSxcbiAgICAgIGRpcmVjdGl2ZVRyYW5zZm9ybXM6IGV4dGVuZChcbiAgICAgICAge30sXG4gICAgICAgIGRpcmVjdGl2ZVRyYW5zZm9ybXMsXG4gICAgICAgIG9wdGlvbnMuZGlyZWN0aXZlVHJhbnNmb3JtcyB8fCB7fVxuICAgICAgICAvLyB1c2VyIHRyYW5zZm9ybXNcbiAgICAgIClcbiAgICB9KVxuICApO1xuICByZXR1cm4gZ2VuZXJhdGUoYXN0LCByZXNvbHZlZE9wdGlvbnMpO1xufVxuXG5jb25zdCBub29wRGlyZWN0aXZlVHJhbnNmb3JtID0gKCkgPT4gKHsgcHJvcHM6IFtdIH0pO1xuXG5jb25zdCBWX01PREVMX1JBRElPID0gU3ltYm9sKGB2TW9kZWxSYWRpb2AgKTtcbmNvbnN0IFZfTU9ERUxfQ0hFQ0tCT1ggPSBTeW1ib2woXG4gIGB2TW9kZWxDaGVja2JveGAgXG4pO1xuY29uc3QgVl9NT0RFTF9URVhUID0gU3ltYm9sKGB2TW9kZWxUZXh0YCApO1xuY29uc3QgVl9NT0RFTF9TRUxFQ1QgPSBTeW1ib2woXG4gIGB2TW9kZWxTZWxlY3RgIFxuKTtcbmNvbnN0IFZfTU9ERUxfRFlOQU1JQyA9IFN5bWJvbChcbiAgYHZNb2RlbER5bmFtaWNgIFxuKTtcbmNvbnN0IFZfT05fV0lUSF9NT0RJRklFUlMgPSBTeW1ib2woXG4gIGB2T25Nb2RpZmllcnNHdWFyZGAgXG4pO1xuY29uc3QgVl9PTl9XSVRIX0tFWVMgPSBTeW1ib2woXG4gIGB2T25LZXlzR3VhcmRgIFxuKTtcbmNvbnN0IFZfU0hPVyA9IFN5bWJvbChgdlNob3dgICk7XG5jb25zdCBUUkFOU0lUSU9OID0gU3ltYm9sKGBUcmFuc2l0aW9uYCApO1xuY29uc3QgVFJBTlNJVElPTl9HUk9VUCA9IFN5bWJvbChcbiAgYFRyYW5zaXRpb25Hcm91cGAgXG4pO1xucmVnaXN0ZXJSdW50aW1lSGVscGVycyh7XG4gIFtWX01PREVMX1JBRElPXTogYHZNb2RlbFJhZGlvYCxcbiAgW1ZfTU9ERUxfQ0hFQ0tCT1hdOiBgdk1vZGVsQ2hlY2tib3hgLFxuICBbVl9NT0RFTF9URVhUXTogYHZNb2RlbFRleHRgLFxuICBbVl9NT0RFTF9TRUxFQ1RdOiBgdk1vZGVsU2VsZWN0YCxcbiAgW1ZfTU9ERUxfRFlOQU1JQ106IGB2TW9kZWxEeW5hbWljYCxcbiAgW1ZfT05fV0lUSF9NT0RJRklFUlNdOiBgd2l0aE1vZGlmaWVyc2AsXG4gIFtWX09OX1dJVEhfS0VZU106IGB3aXRoS2V5c2AsXG4gIFtWX1NIT1ddOiBgdlNob3dgLFxuICBbVFJBTlNJVElPTl06IGBUcmFuc2l0aW9uYCxcbiAgW1RSQU5TSVRJT05fR1JPVVBdOiBgVHJhbnNpdGlvbkdyb3VwYFxufSk7XG5cbmxldCBkZWNvZGVyO1xuZnVuY3Rpb24gZGVjb2RlSHRtbEJyb3dzZXIocmF3LCBhc0F0dHIgPSBmYWxzZSkge1xuICBpZiAoIWRlY29kZXIpIHtcbiAgICBkZWNvZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgfVxuICBpZiAoYXNBdHRyKSB7XG4gICAgZGVjb2Rlci5pbm5lckhUTUwgPSBgPGRpdiBmb289XCIke3Jhdy5yZXBsYWNlKC9cIi9nLCBcIiZxdW90O1wiKX1cIj5gO1xuICAgIHJldHVybiBkZWNvZGVyLmNoaWxkcmVuWzBdLmdldEF0dHJpYnV0ZShcImZvb1wiKTtcbiAgfSBlbHNlIHtcbiAgICBkZWNvZGVyLmlubmVySFRNTCA9IHJhdztcbiAgICByZXR1cm4gZGVjb2Rlci50ZXh0Q29udGVudDtcbiAgfVxufVxuXG5jb25zdCBwYXJzZXJPcHRpb25zID0ge1xuICBwYXJzZU1vZGU6IFwiaHRtbFwiLFxuICBpc1ZvaWRUYWcsXG4gIGlzTmF0aXZlVGFnOiAodGFnKSA9PiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWR1RhZyh0YWcpIHx8IGlzTWF0aE1MVGFnKHRhZyksXG4gIGlzUHJlVGFnOiAodGFnKSA9PiB0YWcgPT09IFwicHJlXCIsXG4gIGlzSWdub3JlTmV3bGluZVRhZzogKHRhZykgPT4gdGFnID09PSBcInByZVwiIHx8IHRhZyA9PT0gXCJ0ZXh0YXJlYVwiLFxuICBkZWNvZGVFbnRpdGllczogZGVjb2RlSHRtbEJyb3dzZXIgLFxuICBpc0J1aWx0SW5Db21wb25lbnQ6ICh0YWcpID0+IHtcbiAgICBpZiAodGFnID09PSBcIlRyYW5zaXRpb25cIiB8fCB0YWcgPT09IFwidHJhbnNpdGlvblwiKSB7XG4gICAgICByZXR1cm4gVFJBTlNJVElPTjtcbiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gXCJUcmFuc2l0aW9uR3JvdXBcIiB8fCB0YWcgPT09IFwidHJhbnNpdGlvbi1ncm91cFwiKSB7XG4gICAgICByZXR1cm4gVFJBTlNJVElPTl9HUk9VUDtcbiAgICB9XG4gIH0sXG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCN0cmVlLWNvbnN0cnVjdGlvbi1kaXNwYXRjaGVyXG4gIGdldE5hbWVzcGFjZSh0YWcsIHBhcmVudCwgcm9vdE5hbWVzcGFjZSkge1xuICAgIGxldCBucyA9IHBhcmVudCA/IHBhcmVudC5ucyA6IHJvb3ROYW1lc3BhY2U7XG4gICAgaWYgKHBhcmVudCAmJiBucyA9PT0gMikge1xuICAgICAgaWYgKHBhcmVudC50YWcgPT09IFwiYW5ub3RhdGlvbi14bWxcIikge1xuICAgICAgICBpZiAodGFnID09PSBcInN2Z1wiKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmVudC5wcm9wcy5zb21lKFxuICAgICAgICAgIChhKSA9PiBhLnR5cGUgPT09IDYgJiYgYS5uYW1lID09PSBcImVuY29kaW5nXCIgJiYgYS52YWx1ZSAhPSBudWxsICYmIChhLnZhbHVlLmNvbnRlbnQgPT09IFwidGV4dC9odG1sXCIgfHwgYS52YWx1ZS5jb250ZW50ID09PSBcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiKVxuICAgICAgICApKSB7XG4gICAgICAgICAgbnMgPSAwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKC9ebSg/Oltpb25zXXx0ZXh0KSQvLnRlc3QocGFyZW50LnRhZykgJiYgdGFnICE9PSBcIm1nbHlwaFwiICYmIHRhZyAhPT0gXCJtYWxpZ25tYXJrXCIpIHtcbiAgICAgICAgbnMgPSAwO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyZW50ICYmIG5zID09PSAxKSB7XG4gICAgICBpZiAocGFyZW50LnRhZyA9PT0gXCJmb3JlaWduT2JqZWN0XCIgfHwgcGFyZW50LnRhZyA9PT0gXCJkZXNjXCIgfHwgcGFyZW50LnRhZyA9PT0gXCJ0aXRsZVwiKSB7XG4gICAgICAgIG5zID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5zID09PSAwKSB7XG4gICAgICBpZiAodGFnID09PSBcInN2Z1wiKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgaWYgKHRhZyA9PT0gXCJtYXRoXCIpIHtcbiAgICAgICAgcmV0dXJuIDI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBucztcbiAgfVxufTtcblxuY29uc3QgdHJhbnNmb3JtU3R5bGUgPSAobm9kZSkgPT4ge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgbm9kZS5wcm9wcy5mb3JFYWNoKChwLCBpKSA9PiB7XG4gICAgICBpZiAocC50eXBlID09PSA2ICYmIHAubmFtZSA9PT0gXCJzdHlsZVwiICYmIHAudmFsdWUpIHtcbiAgICAgICAgbm9kZS5wcm9wc1tpXSA9IHtcbiAgICAgICAgICB0eXBlOiA3LFxuICAgICAgICAgIG5hbWU6IGBiaW5kYCxcbiAgICAgICAgICBhcmc6IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYHN0eWxlYCwgdHJ1ZSwgcC5sb2MpLFxuICAgICAgICAgIGV4cDogcGFyc2VJbmxpbmVDU1MocC52YWx1ZS5jb250ZW50LCBwLmxvYyksXG4gICAgICAgICAgbW9kaWZpZXJzOiBbXSxcbiAgICAgICAgICBsb2M6IHAubG9jXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5jb25zdCBwYXJzZUlubGluZUNTUyA9IChjc3NUZXh0LCBsb2MpID0+IHtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IHBhcnNlU3RyaW5nU3R5bGUoY3NzVGV4dCk7XG4gIHJldHVybiBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKFxuICAgIEpTT04uc3RyaW5naWZ5KG5vcm1hbGl6ZWQpLFxuICAgIGZhbHNlLFxuICAgIGxvYyxcbiAgICAzXG4gICk7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVET01Db21waWxlckVycm9yKGNvZGUsIGxvYykge1xuICByZXR1cm4gY3JlYXRlQ29tcGlsZXJFcnJvcihcbiAgICBjb2RlLFxuICAgIGxvYyxcbiAgICBET01FcnJvck1lc3NhZ2VzIFxuICApO1xufVxuY29uc3QgRE9NRXJyb3JNZXNzYWdlcyA9IHtcbiAgWzUzXTogYHYtaHRtbCBpcyBtaXNzaW5nIGV4cHJlc3Npb24uYCxcbiAgWzU0XTogYHYtaHRtbCB3aWxsIG92ZXJyaWRlIGVsZW1lbnQgY2hpbGRyZW4uYCxcbiAgWzU1XTogYHYtdGV4dCBpcyBtaXNzaW5nIGV4cHJlc3Npb24uYCxcbiAgWzU2XTogYHYtdGV4dCB3aWxsIG92ZXJyaWRlIGVsZW1lbnQgY2hpbGRyZW4uYCxcbiAgWzU3XTogYHYtbW9kZWwgY2FuIG9ubHkgYmUgdXNlZCBvbiA8aW5wdXQ+LCA8dGV4dGFyZWE+IGFuZCA8c2VsZWN0PiBlbGVtZW50cy5gLFxuICBbNThdOiBgdi1tb2RlbCBhcmd1bWVudCBpcyBub3Qgc3VwcG9ydGVkIG9uIHBsYWluIGVsZW1lbnRzLmAsXG4gIFs1OV06IGB2LW1vZGVsIGNhbm5vdCBiZSB1c2VkIG9uIGZpbGUgaW5wdXRzIHNpbmNlIHRoZXkgYXJlIHJlYWQtb25seS4gVXNlIGEgdi1vbjpjaGFuZ2UgbGlzdGVuZXIgaW5zdGVhZC5gLFxuICBbNjBdOiBgVW5uZWNlc3NhcnkgdmFsdWUgYmluZGluZyB1c2VkIGFsb25nc2lkZSB2LW1vZGVsLiBJdCB3aWxsIGludGVyZmVyZSB3aXRoIHYtbW9kZWwncyBiZWhhdmlvci5gLFxuICBbNjFdOiBgdi1zaG93IGlzIG1pc3NpbmcgZXhwcmVzc2lvbi5gLFxuICBbNjJdOiBgPFRyYW5zaXRpb24+IGV4cGVjdHMgZXhhY3RseSBvbmUgY2hpbGQgZWxlbWVudCBvciBjb21wb25lbnQuYCxcbiAgWzYzXTogYFRhZ3Mgd2l0aCBzaWRlIGVmZmVjdCAoPHNjcmlwdD4gYW5kIDxzdHlsZT4pIGFyZSBpZ25vcmVkIGluIGNsaWVudCBjb21wb25lbnQgdGVtcGxhdGVzLmBcbn07XG5cbmNvbnN0IHRyYW5zZm9ybVZIdG1sID0gKGRpciwgbm9kZSwgY29udGV4dCkgPT4ge1xuICBjb25zdCB7IGV4cCwgbG9jIH0gPSBkaXI7XG4gIGlmICghZXhwKSB7XG4gICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgY3JlYXRlRE9NQ29tcGlsZXJFcnJvcig1MywgbG9jKVxuICAgICk7XG4gIH1cbiAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgY3JlYXRlRE9NQ29tcGlsZXJFcnJvcig1NCwgbG9jKVxuICAgICk7XG4gICAgbm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIHJldHVybiB7XG4gICAgcHJvcHM6IFtcbiAgICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KFxuICAgICAgICBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGBpbm5lckhUTUxgLCB0cnVlLCBsb2MpLFxuICAgICAgICBleHAgfHwgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihcIlwiLCB0cnVlKVxuICAgICAgKVxuICAgIF1cbiAgfTtcbn07XG5cbmNvbnN0IHRyYW5zZm9ybVZUZXh0ID0gKGRpciwgbm9kZSwgY29udGV4dCkgPT4ge1xuICBjb25zdCB7IGV4cCwgbG9jIH0gPSBkaXI7XG4gIGlmICghZXhwKSB7XG4gICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgY3JlYXRlRE9NQ29tcGlsZXJFcnJvcig1NSwgbG9jKVxuICAgICk7XG4gIH1cbiAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgY29udGV4dC5vbkVycm9yKFxuICAgICAgY3JlYXRlRE9NQ29tcGlsZXJFcnJvcig1NiwgbG9jKVxuICAgICk7XG4gICAgbm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIHJldHVybiB7XG4gICAgcHJvcHM6IFtcbiAgICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KFxuICAgICAgICBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGB0ZXh0Q29udGVudGAsIHRydWUpLFxuICAgICAgICBleHAgPyBnZXRDb25zdGFudFR5cGUoZXhwLCBjb250ZXh0KSA+IDAgPyBleHAgOiBjcmVhdGVDYWxsRXhwcmVzc2lvbihcbiAgICAgICAgICBjb250ZXh0LmhlbHBlclN0cmluZyhUT19ESVNQTEFZX1NUUklORyksXG4gICAgICAgICAgW2V4cF0sXG4gICAgICAgICAgbG9jXG4gICAgICAgICkgOiBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKFwiXCIsIHRydWUpXG4gICAgICApXG4gICAgXVxuICB9O1xufTtcblxuY29uc3QgdHJhbnNmb3JtTW9kZWwgPSAoZGlyLCBub2RlLCBjb250ZXh0KSA9PiB7XG4gIGNvbnN0IGJhc2VSZXN1bHQgPSB0cmFuc2Zvcm1Nb2RlbCQxKGRpciwgbm9kZSwgY29udGV4dCk7XG4gIGlmICghYmFzZVJlc3VsdC5wcm9wcy5sZW5ndGggfHwgbm9kZS50YWdUeXBlID09PSAxKSB7XG4gICAgcmV0dXJuIGJhc2VSZXN1bHQ7XG4gIH1cbiAgaWYgKGRpci5hcmcpIHtcbiAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICBjcmVhdGVET01Db21waWxlckVycm9yKFxuICAgICAgICA1OCxcbiAgICAgICAgZGlyLmFyZy5sb2NcbiAgICAgIClcbiAgICApO1xuICB9XG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlZFZhbHVlKCkge1xuICAgIGNvbnN0IHZhbHVlID0gZmluZERpcihub2RlLCBcImJpbmRcIik7XG4gICAgaWYgKHZhbHVlICYmIGlzU3RhdGljQXJnT2YodmFsdWUuYXJnLCBcInZhbHVlXCIpKSB7XG4gICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgIGNyZWF0ZURPTUNvbXBpbGVyRXJyb3IoXG4gICAgICAgICAgNjAsXG4gICAgICAgICAgdmFsdWUubG9jXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHsgdGFnIH0gPSBub2RlO1xuICBjb25zdCBpc0N1c3RvbUVsZW1lbnQgPSBjb250ZXh0LmlzQ3VzdG9tRWxlbWVudCh0YWcpO1xuICBpZiAodGFnID09PSBcImlucHV0XCIgfHwgdGFnID09PSBcInRleHRhcmVhXCIgfHwgdGFnID09PSBcInNlbGVjdFwiIHx8IGlzQ3VzdG9tRWxlbWVudCkge1xuICAgIGxldCBkaXJlY3RpdmVUb1VzZSA9IFZfTU9ERUxfVEVYVDtcbiAgICBsZXQgaXNJbnZhbGlkVHlwZSA9IGZhbHNlO1xuICAgIGlmICh0YWcgPT09IFwiaW5wdXRcIiB8fCBpc0N1c3RvbUVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHR5cGUgPSBmaW5kUHJvcChub2RlLCBgdHlwZWApO1xuICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGUudHlwZSA9PT0gNykge1xuICAgICAgICAgIGRpcmVjdGl2ZVRvVXNlID0gVl9NT0RFTF9EWU5BTUlDO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUudmFsdWUpIHtcbiAgICAgICAgICBzd2l0Y2ggKHR5cGUudmFsdWUuY29udGVudCkge1xuICAgICAgICAgICAgY2FzZSBcInJhZGlvXCI6XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZVRvVXNlID0gVl9NT0RFTF9SQURJTztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiY2hlY2tib3hcIjpcbiAgICAgICAgICAgICAgZGlyZWN0aXZlVG9Vc2UgPSBWX01PREVMX0NIRUNLQk9YO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJmaWxlXCI6XG4gICAgICAgICAgICAgIGlzSW52YWxpZFR5cGUgPSB0cnVlO1xuICAgICAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICAgICAgICAgICAgY3JlYXRlRE9NQ29tcGlsZXJFcnJvcihcbiAgICAgICAgICAgICAgICAgIDU5LFxuICAgICAgICAgICAgICAgICAgZGlyLmxvY1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZWRWYWx1ZSgpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaGFzRHluYW1pY0tleVZCaW5kKG5vZGUpKSB7XG4gICAgICAgIGRpcmVjdGl2ZVRvVXNlID0gVl9NT0RFTF9EWU5BTUlDO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hlY2tEdXBsaWNhdGVkVmFsdWUoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgZGlyZWN0aXZlVG9Vc2UgPSBWX01PREVMX1NFTEVDVDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tEdXBsaWNhdGVkVmFsdWUoKTtcbiAgICB9XG4gICAgaWYgKCFpc0ludmFsaWRUeXBlKSB7XG4gICAgICBiYXNlUmVzdWx0Lm5lZWRSdW50aW1lID0gY29udGV4dC5oZWxwZXIoZGlyZWN0aXZlVG9Vc2UpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICBjcmVhdGVET01Db21waWxlckVycm9yKFxuICAgICAgICA1NyxcbiAgICAgICAgZGlyLmxvY1xuICAgICAgKVxuICAgICk7XG4gIH1cbiAgYmFzZVJlc3VsdC5wcm9wcyA9IGJhc2VSZXN1bHQucHJvcHMuZmlsdGVyKFxuICAgIChwKSA9PiAhKHAua2V5LnR5cGUgPT09IDQgJiYgcC5rZXkuY29udGVudCA9PT0gXCJtb2RlbFZhbHVlXCIpXG4gICk7XG4gIHJldHVybiBiYXNlUmVzdWx0O1xufTtcblxuY29uc3QgaXNFdmVudE9wdGlvbk1vZGlmaWVyID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoYHBhc3NpdmUsb25jZSxjYXB0dXJlYCk7XG5jb25zdCBpc05vbktleU1vZGlmaWVyID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoXG4gIC8vIGV2ZW50IHByb3BhZ2F0aW9uIG1hbmFnZW1lbnRcbiAgYHN0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QsbWlkZGxlYFxuKTtcbmNvbnN0IG1heWJlS2V5TW9kaWZpZXIgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChcImxlZnQscmlnaHRcIik7XG5jb25zdCBpc0tleWJvYXJkRXZlbnQgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChgb25rZXl1cCxvbmtleWRvd24sb25rZXlwcmVzc2ApO1xuY29uc3QgcmVzb2x2ZU1vZGlmaWVycyA9IChrZXksIG1vZGlmaWVycywgY29udGV4dCwgbG9jKSA9PiB7XG4gIGNvbnN0IGtleU1vZGlmaWVycyA9IFtdO1xuICBjb25zdCBub25LZXlNb2RpZmllcnMgPSBbXTtcbiAgY29uc3QgZXZlbnRPcHRpb25Nb2RpZmllcnMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBtb2RpZmllciA9IG1vZGlmaWVyc1tpXS5jb250ZW50O1xuICAgIGlmIChpc0V2ZW50T3B0aW9uTW9kaWZpZXIobW9kaWZpZXIpKSB7XG4gICAgICBldmVudE9wdGlvbk1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1heWJlS2V5TW9kaWZpZXIobW9kaWZpZXIpKSB7XG4gICAgICAgIGlmIChpc1N0YXRpY0V4cChrZXkpKSB7XG4gICAgICAgICAgaWYgKGlzS2V5Ym9hcmRFdmVudChrZXkuY29udGVudC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAga2V5TW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub25LZXlNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGtleU1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICAgICAgICBub25LZXlNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc05vbktleU1vZGlmaWVyKG1vZGlmaWVyKSkge1xuICAgICAgICAgIG5vbktleU1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBrZXlNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBrZXlNb2RpZmllcnMsXG4gICAgbm9uS2V5TW9kaWZpZXJzLFxuICAgIGV2ZW50T3B0aW9uTW9kaWZpZXJzXG4gIH07XG59O1xuY29uc3QgdHJhbnNmb3JtQ2xpY2sgPSAoa2V5LCBldmVudCkgPT4ge1xuICBjb25zdCBpc1N0YXRpY0NsaWNrID0gaXNTdGF0aWNFeHAoa2V5KSAmJiBrZXkuY29udGVudC50b0xvd2VyQ2FzZSgpID09PSBcIm9uY2xpY2tcIjtcbiAgcmV0dXJuIGlzU3RhdGljQ2xpY2sgPyBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGV2ZW50LCB0cnVlKSA6IGtleS50eXBlICE9PSA0ID8gY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uKFtcbiAgICBgKGAsXG4gICAga2V5LFxuICAgIGApID09PSBcIm9uQ2xpY2tcIiA/IFwiJHtldmVudH1cIiA6IChgLFxuICAgIGtleSxcbiAgICBgKWBcbiAgXSkgOiBrZXk7XG59O1xuY29uc3QgdHJhbnNmb3JtT24gPSAoZGlyLCBub2RlLCBjb250ZXh0KSA9PiB7XG4gIHJldHVybiB0cmFuc2Zvcm1PbiQxKGRpciwgbm9kZSwgY29udGV4dCwgKGJhc2VSZXN1bHQpID0+IHtcbiAgICBjb25zdCB7IG1vZGlmaWVycyB9ID0gZGlyO1xuICAgIGlmICghbW9kaWZpZXJzLmxlbmd0aCkgcmV0dXJuIGJhc2VSZXN1bHQ7XG4gICAgbGV0IHsga2V5LCB2YWx1ZTogaGFuZGxlckV4cCB9ID0gYmFzZVJlc3VsdC5wcm9wc1swXTtcbiAgICBjb25zdCB7IGtleU1vZGlmaWVycywgbm9uS2V5TW9kaWZpZXJzLCBldmVudE9wdGlvbk1vZGlmaWVycyB9ID0gcmVzb2x2ZU1vZGlmaWVycyhrZXksIG1vZGlmaWVycywgY29udGV4dCwgZGlyLmxvYyk7XG4gICAgaWYgKG5vbktleU1vZGlmaWVycy5pbmNsdWRlcyhcInJpZ2h0XCIpKSB7XG4gICAgICBrZXkgPSB0cmFuc2Zvcm1DbGljayhrZXksIGBvbkNvbnRleHRtZW51YCk7XG4gICAgfVxuICAgIGlmIChub25LZXlNb2RpZmllcnMuaW5jbHVkZXMoXCJtaWRkbGVcIikpIHtcbiAgICAgIGtleSA9IHRyYW5zZm9ybUNsaWNrKGtleSwgYG9uTW91c2V1cGApO1xuICAgIH1cbiAgICBpZiAobm9uS2V5TW9kaWZpZXJzLmxlbmd0aCkge1xuICAgICAgaGFuZGxlckV4cCA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKFZfT05fV0lUSF9NT0RJRklFUlMpLCBbXG4gICAgICAgIGhhbmRsZXJFeHAsXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KG5vbktleU1vZGlmaWVycylcbiAgICAgIF0pO1xuICAgIH1cbiAgICBpZiAoa2V5TW9kaWZpZXJzLmxlbmd0aCAmJiAvLyBpZiBldmVudCBuYW1lIGlzIGR5bmFtaWMsIGFsd2F5cyB3cmFwIHdpdGgga2V5cyBndWFyZFxuICAgICghaXNTdGF0aWNFeHAoa2V5KSB8fCBpc0tleWJvYXJkRXZlbnQoa2V5LmNvbnRlbnQudG9Mb3dlckNhc2UoKSkpKSB7XG4gICAgICBoYW5kbGVyRXhwID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoVl9PTl9XSVRIX0tFWVMpLCBbXG4gICAgICAgIGhhbmRsZXJFeHAsXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KGtleU1vZGlmaWVycylcbiAgICAgIF0pO1xuICAgIH1cbiAgICBpZiAoZXZlbnRPcHRpb25Nb2RpZmllcnMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBtb2RpZmllclBvc3RmaXggPSBldmVudE9wdGlvbk1vZGlmaWVycy5tYXAoY2FwaXRhbGl6ZSkuam9pbihcIlwiKTtcbiAgICAgIGtleSA9IGlzU3RhdGljRXhwKGtleSkgPyBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGAke2tleS5jb250ZW50fSR7bW9kaWZpZXJQb3N0Zml4fWAsIHRydWUpIDogY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uKFtgKGAsIGtleSwgYCkgKyBcIiR7bW9kaWZpZXJQb3N0Zml4fVwiYF0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcHJvcHM6IFtjcmVhdGVPYmplY3RQcm9wZXJ0eShrZXksIGhhbmRsZXJFeHApXVxuICAgIH07XG4gIH0pO1xufTtcblxuY29uc3QgdHJhbnNmb3JtU2hvdyA9IChkaXIsIG5vZGUsIGNvbnRleHQpID0+IHtcbiAgY29uc3QgeyBleHAsIGxvYyB9ID0gZGlyO1xuICBpZiAoIWV4cCkge1xuICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgIGNyZWF0ZURPTUNvbXBpbGVyRXJyb3IoNjEsIGxvYylcbiAgICApO1xuICB9XG4gIHJldHVybiB7XG4gICAgcHJvcHM6IFtdLFxuICAgIG5lZWRSdW50aW1lOiBjb250ZXh0LmhlbHBlcihWX1NIT1cpXG4gIH07XG59O1xuXG5jb25zdCB0cmFuc2Zvcm1UcmFuc2l0aW9uID0gKG5vZGUsIGNvbnRleHQpID0+IHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSAmJiBub2RlLnRhZ1R5cGUgPT09IDEpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSBjb250ZXh0LmlzQnVpbHRJbkNvbXBvbmVudChub2RlLnRhZyk7XG4gICAgaWYgKGNvbXBvbmVudCA9PT0gVFJBTlNJVElPTikge1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKCFub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzTXVsdGlwbGVDaGlsZHJlbihub2RlKSkge1xuICAgICAgICAgIGNvbnRleHQub25FcnJvcihcbiAgICAgICAgICAgIGNyZWF0ZURPTUNvbXBpbGVyRXJyb3IoXG4gICAgICAgICAgICAgIDYyLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IG5vZGUuY2hpbGRyZW5bMF0ubG9jLnN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDogbm9kZS5jaGlsZHJlbltub2RlLmNoaWxkcmVuLmxlbmd0aCAtIDFdLmxvYy5lbmQsXG4gICAgICAgICAgICAgICAgc291cmNlOiBcIlwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZS5jaGlsZHJlblswXTtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IDEpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IHAgb2YgY2hpbGQucHJvcHMpIHtcbiAgICAgICAgICAgIGlmIChwLnR5cGUgPT09IDcgJiYgcC5uYW1lID09PSBcInNob3dcIikge1xuICAgICAgICAgICAgICBub2RlLnByb3BzLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6IDYsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJwZXJzaXN0ZWRcIixcbiAgICAgICAgICAgICAgICBuYW1lTG9jOiBub2RlLmxvYyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdm9pZCAwLFxuICAgICAgICAgICAgICAgIGxvYzogbm9kZS5sb2NcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIGhhc011bHRpcGxlQ2hpbGRyZW4obm9kZSkge1xuICBjb25zdCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLmZpbHRlcihcbiAgICAoYykgPT4gYy50eXBlICE9PSAzICYmICEoYy50eXBlID09PSAyICYmICFjLmNvbnRlbnQudHJpbSgpKVxuICApO1xuICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuWzBdO1xuICByZXR1cm4gY2hpbGRyZW4ubGVuZ3RoICE9PSAxIHx8IGNoaWxkLnR5cGUgPT09IDExIHx8IGNoaWxkLnR5cGUgPT09IDkgJiYgY2hpbGQuYnJhbmNoZXMuc29tZShoYXNNdWx0aXBsZUNoaWxkcmVuKTtcbn1cblxuY29uc3QgaWdub3JlU2lkZUVmZmVjdFRhZ3MgPSAobm9kZSwgY29udGV4dCkgPT4ge1xuICBpZiAobm9kZS50eXBlID09PSAxICYmIG5vZGUudGFnVHlwZSA9PT0gMCAmJiAobm9kZS50YWcgPT09IFwic2NyaXB0XCIgfHwgbm9kZS50YWcgPT09IFwic3R5bGVcIikpIHtcbiAgICBjb250ZXh0Lm9uRXJyb3IoXG4gICAgICBjcmVhdGVET01Db21waWxlckVycm9yKFxuICAgICAgICA2MyxcbiAgICAgICAgbm9kZS5sb2NcbiAgICAgIClcbiAgICApO1xuICAgIGNvbnRleHQucmVtb3ZlTm9kZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBpc1ZhbGlkSFRNTE5lc3RpbmcocGFyZW50LCBjaGlsZCkge1xuICBpZiAocGFyZW50ID09PSBcInRlbXBsYXRlXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAocGFyZW50IGluIG9ubHlWYWxpZENoaWxkcmVuKSB7XG4gICAgcmV0dXJuIG9ubHlWYWxpZENoaWxkcmVuW3BhcmVudF0uaGFzKGNoaWxkKTtcbiAgfVxuICBpZiAoY2hpbGQgaW4gb25seVZhbGlkUGFyZW50cykge1xuICAgIHJldHVybiBvbmx5VmFsaWRQYXJlbnRzW2NoaWxkXS5oYXMocGFyZW50KTtcbiAgfVxuICBpZiAocGFyZW50IGluIGtub3duSW52YWxpZENoaWxkcmVuKSB7XG4gICAgaWYgKGtub3duSW52YWxpZENoaWxkcmVuW3BhcmVudF0uaGFzKGNoaWxkKSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChjaGlsZCBpbiBrbm93bkludmFsaWRQYXJlbnRzKSB7XG4gICAgaWYgKGtub3duSW52YWxpZFBhcmVudHNbY2hpbGRdLmhhcyhwYXJlbnQpKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5jb25zdCBoZWFkaW5ncyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImgxXCIsIFwiaDJcIiwgXCJoM1wiLCBcImg0XCIsIFwiaDVcIiwgXCJoNlwiXSk7XG5jb25zdCBlbXB0eVNldCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtdKTtcbmNvbnN0IG9ubHlWYWxpZENoaWxkcmVuID0ge1xuICBoZWFkOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXG4gICAgXCJiYXNlXCIsXG4gICAgXCJiYXNlZnJvbnRcIixcbiAgICBcImJnc291bmRcIixcbiAgICBcImxpbmtcIixcbiAgICBcIm1ldGFcIixcbiAgICBcInRpdGxlXCIsXG4gICAgXCJub3NjcmlwdFwiLFxuICAgIFwibm9mcmFtZXNcIixcbiAgICBcInN0eWxlXCIsXG4gICAgXCJzY3JpcHRcIixcbiAgICBcInRlbXBsYXRlXCJcbiAgXSksXG4gIG9wdGdyb3VwOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJvcHRpb25cIl0pLFxuICBzZWxlY3Q6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcIm9wdGdyb3VwXCIsIFwib3B0aW9uXCIsIFwiaHJcIl0pLFxuICAvLyB0YWJsZVxuICB0YWJsZTogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wiY2FwdGlvblwiLCBcImNvbGdyb3VwXCIsIFwidGJvZHlcIiwgXCJ0Zm9vdFwiLCBcInRoZWFkXCJdKSxcbiAgdHI6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcInRkXCIsIFwidGhcIl0pLFxuICBjb2xncm91cDogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wiY29sXCJdKSxcbiAgdGJvZHk6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcInRyXCJdKSxcbiAgdGhlYWQ6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcInRyXCJdKSxcbiAgdGZvb3Q6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcInRyXCJdKSxcbiAgLy8gdGhlc2UgZWxlbWVudHMgY2FuIG5vdCBoYXZlIGFueSBjaGlsZHJlbiBlbGVtZW50c1xuICBzY3JpcHQ6IGVtcHR5U2V0LFxuICBpZnJhbWU6IGVtcHR5U2V0LFxuICBvcHRpb246IGVtcHR5U2V0LFxuICB0ZXh0YXJlYTogZW1wdHlTZXQsXG4gIHN0eWxlOiBlbXB0eVNldCxcbiAgdGl0bGU6IGVtcHR5U2V0XG59O1xuY29uc3Qgb25seVZhbGlkUGFyZW50cyA9IHtcbiAgLy8gc2VjdGlvbnNcbiAgaHRtbDogZW1wdHlTZXQsXG4gIGJvZHk6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImh0bWxcIl0pLFxuICBoZWFkOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJodG1sXCJdKSxcbiAgLy8gdGFibGVcbiAgdGQ6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcInRyXCJdKSxcbiAgY29sZ3JvdXA6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcInRhYmxlXCJdKSxcbiAgY2FwdGlvbjogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1widGFibGVcIl0pLFxuICB0Ym9keTogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1widGFibGVcIl0pLFxuICB0Zm9vdDogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1widGFibGVcIl0pLFxuICBjb2w6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImNvbGdyb3VwXCJdKSxcbiAgdGg6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcInRyXCJdKSxcbiAgdGhlYWQ6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcInRhYmxlXCJdKSxcbiAgdHI6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcInRib2R5XCIsIFwidGhlYWRcIiwgXCJ0Zm9vdFwiXSksXG4gIC8vIGRhdGEgbGlzdFxuICBkZDogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wiZGxcIiwgXCJkaXZcIl0pLFxuICBkdDogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wiZGxcIiwgXCJkaXZcIl0pLFxuICAvLyBvdGhlclxuICBmaWdjYXB0aW9uOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJmaWd1cmVcIl0pLFxuICAvLyBsaTogbmV3IFNldChbXCJ1bFwiLCBcIm9sXCJdKSxcbiAgc3VtbWFyeTogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1wiZGV0YWlsc1wiXSksXG4gIGFyZWE6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcIm1hcFwiXSlcbn07XG5jb25zdCBrbm93bkludmFsaWRDaGlsZHJlbiA9IHtcbiAgcDogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICAgIFwiYWRkcmVzc1wiLFxuICAgIFwiYXJ0aWNsZVwiLFxuICAgIFwiYXNpZGVcIixcbiAgICBcImJsb2NrcXVvdGVcIixcbiAgICBcImNlbnRlclwiLFxuICAgIFwiZGV0YWlsc1wiLFxuICAgIFwiZGlhbG9nXCIsXG4gICAgXCJkaXJcIixcbiAgICBcImRpdlwiLFxuICAgIFwiZGxcIixcbiAgICBcImZpZWxkc2V0XCIsXG4gICAgXCJmaWd1cmVcIixcbiAgICBcImZvb3RlclwiLFxuICAgIFwiZm9ybVwiLFxuICAgIFwiaDFcIixcbiAgICBcImgyXCIsXG4gICAgXCJoM1wiLFxuICAgIFwiaDRcIixcbiAgICBcImg1XCIsXG4gICAgXCJoNlwiLFxuICAgIFwiaGVhZGVyXCIsXG4gICAgXCJoZ3JvdXBcIixcbiAgICBcImhyXCIsXG4gICAgXCJsaVwiLFxuICAgIFwibWFpblwiLFxuICAgIFwibmF2XCIsXG4gICAgXCJtZW51XCIsXG4gICAgXCJvbFwiLFxuICAgIFwicFwiLFxuICAgIFwicHJlXCIsXG4gICAgXCJzZWN0aW9uXCIsXG4gICAgXCJ0YWJsZVwiLFxuICAgIFwidWxcIlxuICBdKSxcbiAgc3ZnOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXG4gICAgXCJiXCIsXG4gICAgXCJibG9ja3F1b3RlXCIsXG4gICAgXCJiclwiLFxuICAgIFwiY29kZVwiLFxuICAgIFwiZGRcIixcbiAgICBcImRpdlwiLFxuICAgIFwiZGxcIixcbiAgICBcImR0XCIsXG4gICAgXCJlbVwiLFxuICAgIFwiZW1iZWRcIixcbiAgICBcImgxXCIsXG4gICAgXCJoMlwiLFxuICAgIFwiaDNcIixcbiAgICBcImg0XCIsXG4gICAgXCJoNVwiLFxuICAgIFwiaDZcIixcbiAgICBcImhyXCIsXG4gICAgXCJpXCIsXG4gICAgXCJpbWdcIixcbiAgICBcImxpXCIsXG4gICAgXCJtZW51XCIsXG4gICAgXCJtZXRhXCIsXG4gICAgXCJvbFwiLFxuICAgIFwicFwiLFxuICAgIFwicHJlXCIsXG4gICAgXCJydWJ5XCIsXG4gICAgXCJzXCIsXG4gICAgXCJzbWFsbFwiLFxuICAgIFwic3BhblwiLFxuICAgIFwic3Ryb25nXCIsXG4gICAgXCJzdWJcIixcbiAgICBcInN1cFwiLFxuICAgIFwidGFibGVcIixcbiAgICBcInVcIixcbiAgICBcInVsXCIsXG4gICAgXCJ2YXJcIlxuICBdKVxufTtcbmNvbnN0IGtub3duSW52YWxpZFBhcmVudHMgPSB7XG4gIGE6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImFcIl0pLFxuICBidXR0b246IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImJ1dHRvblwiXSksXG4gIGRkOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJkZFwiLCBcImR0XCJdKSxcbiAgZHQ6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImRkXCIsIFwiZHRcIl0pLFxuICBmb3JtOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXCJmb3JtXCJdKSxcbiAgbGk6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFtcImxpXCJdKSxcbiAgaDE6IGhlYWRpbmdzLFxuICBoMjogaGVhZGluZ3MsXG4gIGgzOiBoZWFkaW5ncyxcbiAgaDQ6IGhlYWRpbmdzLFxuICBoNTogaGVhZGluZ3MsXG4gIGg2OiBoZWFkaW5nc1xufTtcblxuY29uc3QgdmFsaWRhdGVIdG1sTmVzdGluZyA9IChub2RlLCBjb250ZXh0KSA9PiB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEgJiYgbm9kZS50YWdUeXBlID09PSAwICYmIGNvbnRleHQucGFyZW50ICYmIGNvbnRleHQucGFyZW50LnR5cGUgPT09IDEgJiYgY29udGV4dC5wYXJlbnQudGFnVHlwZSA9PT0gMCAmJiAhaXNWYWxpZEhUTUxOZXN0aW5nKGNvbnRleHQucGFyZW50LnRhZywgbm9kZS50YWcpKSB7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgU3ludGF4RXJyb3IoXG4gICAgICBgPCR7bm9kZS50YWd9PiBjYW5ub3QgYmUgY2hpbGQgb2YgPCR7Y29udGV4dC5wYXJlbnQudGFnfT4sIGFjY29yZGluZyB0byBIVE1MIHNwZWNpZmljYXRpb25zLiBUaGlzIGNhbiBjYXVzZSBoeWRyYXRpb24gZXJyb3JzIG9yIHBvdGVudGlhbGx5IGRpc3J1cHQgZnV0dXJlIGZ1bmN0aW9uYWxpdHkuYFxuICAgICk7XG4gICAgZXJyb3IubG9jID0gbm9kZS5sb2M7XG4gICAgY29udGV4dC5vbldhcm4oZXJyb3IpO1xuICB9XG59O1xuXG5jb25zdCBET01Ob2RlVHJhbnNmb3JtcyA9IFtcbiAgdHJhbnNmb3JtU3R5bGUsXG4gIC4uLlt0cmFuc2Zvcm1UcmFuc2l0aW9uLCB2YWxpZGF0ZUh0bWxOZXN0aW5nXSBcbl07XG5jb25zdCBET01EaXJlY3RpdmVUcmFuc2Zvcm1zID0ge1xuICBjbG9hazogbm9vcERpcmVjdGl2ZVRyYW5zZm9ybSxcbiAgaHRtbDogdHJhbnNmb3JtVkh0bWwsXG4gIHRleHQ6IHRyYW5zZm9ybVZUZXh0LFxuICBtb2RlbDogdHJhbnNmb3JtTW9kZWwsXG4gIC8vIG92ZXJyaWRlIGNvbXBpbGVyLWNvcmVcbiAgb246IHRyYW5zZm9ybU9uLFxuICAvLyBvdmVycmlkZSBjb21waWxlci1jb3JlXG4gIHNob3c6IHRyYW5zZm9ybVNob3dcbn07XG5mdW5jdGlvbiBjb21waWxlKHNyYywgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBiYXNlQ29tcGlsZShcbiAgICBzcmMsXG4gICAgZXh0ZW5kKHt9LCBwYXJzZXJPcHRpb25zLCBvcHRpb25zLCB7XG4gICAgICBub2RlVHJhbnNmb3JtczogW1xuICAgICAgICAvLyBpZ25vcmUgPHNjcmlwdD4gYW5kIDx0YWc+XG4gICAgICAgIC8vIHRoaXMgaXMgbm90IHB1dCBpbnNpZGUgRE9NTm9kZVRyYW5zZm9ybXMgYmVjYXVzZSB0aGF0IGxpc3QgaXMgdXNlZFxuICAgICAgICAvLyBieSBjb21waWxlci1zc3IgdG8gZ2VuZXJhdGUgdm5vZGUgZmFsbGJhY2sgYnJhbmNoZXNcbiAgICAgICAgaWdub3JlU2lkZUVmZmVjdFRhZ3MsXG4gICAgICAgIC4uLkRPTU5vZGVUcmFuc2Zvcm1zLFxuICAgICAgICAuLi5vcHRpb25zLm5vZGVUcmFuc2Zvcm1zIHx8IFtdXG4gICAgICBdLFxuICAgICAgZGlyZWN0aXZlVHJhbnNmb3JtczogZXh0ZW5kKFxuICAgICAgICB7fSxcbiAgICAgICAgRE9NRGlyZWN0aXZlVHJhbnNmb3JtcyxcbiAgICAgICAgb3B0aW9ucy5kaXJlY3RpdmVUcmFuc2Zvcm1zIHx8IHt9XG4gICAgICApLFxuICAgICAgdHJhbnNmb3JtSG9pc3Q6IG51bGwgXG4gICAgfSlcbiAgKTtcbn1cblxue1xuICBpbml0RGV2KCk7XG59XG5jb25zdCBjb21waWxlQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGNvbXBpbGVUb0Z1bmN0aW9uKHRlbXBsYXRlLCBvcHRpb25zKSB7XG4gIGlmICghaXNTdHJpbmcodGVtcGxhdGUpKSB7XG4gICAgaWYgKHRlbXBsYXRlLm5vZGVUeXBlKSB7XG4gICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLmlubmVySFRNTDtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybihgaW52YWxpZCB0ZW1wbGF0ZSBvcHRpb246IGAsIHRlbXBsYXRlKTtcbiAgICAgIHJldHVybiBOT09QO1xuICAgIH1cbiAgfVxuICBjb25zdCBrZXkgPSBnZW5DYWNoZUtleSh0ZW1wbGF0ZSwgb3B0aW9ucyk7XG4gIGNvbnN0IGNhY2hlZCA9IGNvbXBpbGVDYWNoZVtrZXldO1xuICBpZiAoY2FjaGVkKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuICBpZiAodGVtcGxhdGVbMF0gPT09IFwiI1wiKSB7XG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRlbXBsYXRlKTtcbiAgICBpZiAoIWVsKSB7XG4gICAgICB3YXJuKGBUZW1wbGF0ZSBlbGVtZW50IG5vdCBmb3VuZCBvciBpcyBlbXB0eTogJHt0ZW1wbGF0ZX1gKTtcbiAgICB9XG4gICAgdGVtcGxhdGUgPSBlbCA/IGVsLmlubmVySFRNTCA6IGBgO1xuICB9XG4gIGNvbnN0IG9wdHMgPSBleHRlbmQoXG4gICAge1xuICAgICAgaG9pc3RTdGF0aWM6IHRydWUsXG4gICAgICBvbkVycm9yOiBvbkVycm9yICxcbiAgICAgIG9uV2FybjogKGUpID0+IG9uRXJyb3IoZSwgdHJ1ZSkgXG4gICAgfSxcbiAgICBvcHRpb25zXG4gICk7XG4gIGlmICghb3B0cy5pc0N1c3RvbUVsZW1lbnQgJiYgdHlwZW9mIGN1c3RvbUVsZW1lbnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgb3B0cy5pc0N1c3RvbUVsZW1lbnQgPSAodGFnKSA9PiAhIWN1c3RvbUVsZW1lbnRzLmdldCh0YWcpO1xuICB9XG4gIGNvbnN0IHsgY29kZSB9ID0gY29tcGlsZSh0ZW1wbGF0ZSwgb3B0cyk7XG4gIGZ1bmN0aW9uIG9uRXJyb3IoZXJyLCBhc1dhcm5pbmcgPSBmYWxzZSkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBhc1dhcm5pbmcgPyBlcnIubWVzc2FnZSA6IGBUZW1wbGF0ZSBjb21waWxhdGlvbiBlcnJvcjogJHtlcnIubWVzc2FnZX1gO1xuICAgIGNvbnN0IGNvZGVGcmFtZSA9IGVyci5sb2MgJiYgZ2VuZXJhdGVDb2RlRnJhbWUoXG4gICAgICB0ZW1wbGF0ZSxcbiAgICAgIGVyci5sb2Muc3RhcnQub2Zmc2V0LFxuICAgICAgZXJyLmxvYy5lbmQub2Zmc2V0XG4gICAgKTtcbiAgICB3YXJuKGNvZGVGcmFtZSA/IGAke21lc3NhZ2V9XG4ke2NvZGVGcmFtZX1gIDogbWVzc2FnZSk7XG4gIH1cbiAgY29uc3QgcmVuZGVyID0gbmV3IEZ1bmN0aW9uKFwiVnVlXCIsIGNvZGUpKHJ1bnRpbWVEb20pO1xuICByZW5kZXIuX3JjID0gdHJ1ZTtcbiAgcmV0dXJuIGNvbXBpbGVDYWNoZVtrZXldID0gcmVuZGVyO1xufVxucmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIoY29tcGlsZVRvRnVuY3Rpb24pO1xuXG5leHBvcnQgeyBCYXNlVHJhbnNpdGlvbiwgQmFzZVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMsIENvbW1lbnQsIERlcHJlY2F0aW9uVHlwZXMsIEVmZmVjdFNjb3BlLCBFcnJvckNvZGVzLCBFcnJvclR5cGVTdHJpbmdzLCBGcmFnbWVudCwgS2VlcEFsaXZlLCBSZWFjdGl2ZUVmZmVjdCwgU3RhdGljLCBTdXNwZW5zZSwgVGVsZXBvcnQsIFRleHQsIFRyYWNrT3BUeXBlcywgVHJhbnNpdGlvbiwgVHJhbnNpdGlvbkdyb3VwLCBUcmlnZ2VyT3BUeXBlcywgVnVlRWxlbWVudCwgYXNzZXJ0TnVtYmVyLCBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZywgY2FsbFdpdGhFcnJvckhhbmRsaW5nLCBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgY2xvbmVWTm9kZSwgY29tcGF0VXRpbHMsIGNvbXBpbGVUb0Z1bmN0aW9uIGFzIGNvbXBpbGUsIGNvbXB1dGVkLCBjcmVhdGVBcHAsIGNyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQmFzZVZOb2RlIGFzIGNyZWF0ZUVsZW1lbnRWTm9kZSwgY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIsIGNyZWF0ZVByb3BzUmVzdFByb3h5LCBjcmVhdGVSZW5kZXJlciwgY3JlYXRlU1NSQXBwLCBjcmVhdGVTbG90cywgY3JlYXRlU3RhdGljVk5vZGUsIGNyZWF0ZVRleHRWTm9kZSwgY3JlYXRlVk5vZGUsIGN1c3RvbVJlZiwgZGVmaW5lQXN5bmNDb21wb25lbnQsIGRlZmluZUNvbXBvbmVudCwgZGVmaW5lQ3VzdG9tRWxlbWVudCwgZGVmaW5lRW1pdHMsIGRlZmluZUV4cG9zZSwgZGVmaW5lTW9kZWwsIGRlZmluZU9wdGlvbnMsIGRlZmluZVByb3BzLCBkZWZpbmVTU1JDdXN0b21FbGVtZW50LCBkZWZpbmVTbG90cywgZGV2dG9vbHMsIGVmZmVjdCwgZWZmZWN0U2NvcGUsIGdldEN1cnJlbnRJbnN0YW5jZSwgZ2V0Q3VycmVudFNjb3BlLCBnZXRDdXJyZW50V2F0Y2hlciwgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuLCBndWFyZFJlYWN0aXZlUHJvcHMsIGgsIGhhbmRsZUVycm9yLCBoYXNJbmplY3Rpb25Db250ZXh0LCBoeWRyYXRlLCBoeWRyYXRlT25JZGxlLCBoeWRyYXRlT25JbnRlcmFjdGlvbiwgaHlkcmF0ZU9uTWVkaWFRdWVyeSwgaHlkcmF0ZU9uVmlzaWJsZSwgaW5pdEN1c3RvbUZvcm1hdHRlciwgaW5pdERpcmVjdGl2ZXNGb3JTU1IsIGluamVjdCwgaXNNZW1vU2FtZSwgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIGlzUnVudGltZU9ubHksIGlzU2hhbGxvdywgaXNWTm9kZSwgbWFya1JhdywgbWVyZ2VEZWZhdWx0cywgbWVyZ2VNb2RlbHMsIG1lcmdlUHJvcHMsIG5leHRUaWNrLCBub3JtYWxpemVDbGFzcywgbm9ybWFsaXplUHJvcHMsIG5vcm1hbGl6ZVN0eWxlLCBvbkFjdGl2YXRlZCwgb25CZWZvcmVNb3VudCwgb25CZWZvcmVVbm1vdW50LCBvbkJlZm9yZVVwZGF0ZSwgb25EZWFjdGl2YXRlZCwgb25FcnJvckNhcHR1cmVkLCBvbk1vdW50ZWQsIG9uUmVuZGVyVHJhY2tlZCwgb25SZW5kZXJUcmlnZ2VyZWQsIG9uU2NvcGVEaXNwb3NlLCBvblNlcnZlclByZWZldGNoLCBvblVubW91bnRlZCwgb25VcGRhdGVkLCBvbldhdGNoZXJDbGVhbnVwLCBvcGVuQmxvY2ssIHBvcFNjb3BlSWQsIHByb3ZpZGUsIHByb3h5UmVmcywgcHVzaFNjb3BlSWQsIHF1ZXVlUG9zdEZsdXNoQ2IsIHJlYWN0aXZlLCByZWFkb25seSwgcmVmLCByZWdpc3RlclJ1bnRpbWVDb21waWxlciwgcmVuZGVyLCByZW5kZXJMaXN0LCByZW5kZXJTbG90LCByZXNvbHZlQ29tcG9uZW50LCByZXNvbHZlRGlyZWN0aXZlLCByZXNvbHZlRHluYW1pY0NvbXBvbmVudCwgcmVzb2x2ZUZpbHRlciwgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcywgc2V0QmxvY2tUcmFja2luZywgc2V0RGV2dG9vbHNIb29rLCBzZXRUcmFuc2l0aW9uSG9va3MsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCBzc3JDb250ZXh0S2V5LCBzc3JVdGlscywgc3RvcCwgdG9EaXNwbGF5U3RyaW5nLCB0b0hhbmRsZXJLZXksIHRvSGFuZGxlcnMsIHRvUmF3LCB0b1JlZiwgdG9SZWZzLCB0b1ZhbHVlLCB0cmFuc2Zvcm1WTm9kZUFyZ3MsIHRyaWdnZXJSZWYsIHVucmVmLCB1c2VBdHRycywgdXNlQ3NzTW9kdWxlLCB1c2VDc3NWYXJzLCB1c2VIb3N0LCB1c2VJZCwgdXNlTW9kZWwsIHVzZVNTUkNvbnRleHQsIHVzZVNoYWRvd1Jvb3QsIHVzZVNsb3RzLCB1c2VUZW1wbGF0ZVJlZiwgdXNlVHJhbnNpdGlvblN0YXRlLCB2TW9kZWxDaGVja2JveCwgdk1vZGVsRHluYW1pYywgdk1vZGVsUmFkaW8sIHZNb2RlbFNlbGVjdCwgdk1vZGVsVGV4dCwgdlNob3csIHZlcnNpb24sIHdhcm4sIHdhdGNoLCB3YXRjaEVmZmVjdCwgd2F0Y2hQb3N0RWZmZWN0LCB3YXRjaFN5bmNFZmZlY3QsIHdpdGhBc3luY0NvbnRleHQsIHdpdGhDdHgsIHdpdGhEZWZhdWx0cywgd2l0aERpcmVjdGl2ZXMsIHdpdGhLZXlzLCB3aXRoTWVtbywgd2l0aE1vZGlmaWVycywgd2l0aFNjb3BlSWQgfTtcbiIsIihmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3RyeXtpZih0eXBlb2YgZG9jdW1lbnQ8XCJ1XCIpe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTthLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiLm1hcGRpdltkYXRhLXYtZDA1ZmM2YmNde3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LmN1c3RvbS1jb250cm9sLXdyYXBwZXJbZGF0YS12LWQwOTlhM2E2XXtkaXNwbGF5Om5vbmV9Lm1hcGRpdiAuY3VzdG9tLWNvbnRyb2wtd3JhcHBlcltkYXRhLXYtZDA5OWEzYTZde2Rpc3BsYXk6aW5saW5lLWJsb2NrfS5pbmZvLXdpbmRvdy13cmFwcGVyW2RhdGEtdi1jYmUxNzA3Yl17ZGlzcGxheTpub25lfS5tYXBkaXYgLmluZm8td2luZG93LXdyYXBwZXJbZGF0YS12LWNiZTE3MDdiXXtkaXNwbGF5OmlubGluZS1ibG9ja30uY3VzdG9tLW1hcmtlci13cmFwcGVyW2RhdGEtdi0yZDJkMzQzYV17ZGlzcGxheTpub25lfS5tYXBkaXYgLmN1c3RvbS1tYXJrZXItd3JhcHBlcltkYXRhLXYtMmQyZDM0M2Fde2Rpc3BsYXk6aW5saW5lLWJsb2NrfVwiKSksZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChhKX19Y2F0Y2goZCl7Y29uc29sZS5lcnJvcihcInZpdGUtcGx1Z2luLWNzcy1pbmplY3RlZC1ieS1qc1wiLGQpfX0pKCk7XG52YXIgQmUgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgWmUgPSAobiwgZSwgdCkgPT4gZSBpbiBuID8gQmUobiwgZSwgeyBlbnVtZXJhYmxlOiAhMCwgY29uZmlndXJhYmxlOiAhMCwgd3JpdGFibGU6ICEwLCB2YWx1ZTogdCB9KSA6IG5bZV0gPSB0O1xudmFyIHNlID0gKG4sIGUsIHQpID0+IChaZShuLCB0eXBlb2YgZSAhPSBcInN5bWJvbFwiID8gZSArIFwiXCIgOiBlLCB0KSwgdCk7XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgYXMgUCwgcmVmIGFzIHksIHByb3ZpZGUgYXMgVSwgd2F0Y2ggYXMgTCwgb25Nb3VudGVkIGFzIFBlLCBvbkJlZm9yZVVubW91bnQgYXMgcSwgbWFya1JhdyBhcyB4LCB0b1JlZiBhcyAkLCBvcGVuQmxvY2sgYXMgSiwgY3JlYXRlRWxlbWVudEJsb2NrIGFzIFgsIGNyZWF0ZUVsZW1lbnRWTm9kZSBhcyBhZSwgcmVuZGVyU2xvdCBhcyBRLCBub3JtYWxpemVQcm9wcyBhcyBOZSwgZ3VhcmRSZWFjdGl2ZVByb3BzIGFzIFVlLCBpbmplY3QgYXMgYiwgY29tcHV0ZWQgYXMgSCwgQ29tbWVudCBhcyBMZSwgbWVyZ2VQcm9wcyBhcyBTZSwgY3JlYXRlQ29tbWVudFZOb2RlIGFzIHhlIH0gZnJvbSBcInZ1ZVwiO1xuY29uc3QgQiA9IFN5bWJvbChcIm1hcFwiKSwgWiA9IFN5bWJvbChcImFwaVwiKSwgbGUgPSBTeW1ib2woXCJtYXJrZXJcIiksIGNlID0gU3ltYm9sKFwibWFya2VyQ2x1c3RlclwiKSwgZWUgPSBTeW1ib2woXCJDdXN0b21NYXJrZXJcIiksIEFlID0gU3ltYm9sKFwibWFwVGlsZXNMb2FkZWRcIiksIEYgPSBbXG4gIFwiY2xpY2tcIixcbiAgXCJkYmxjbGlja1wiLFxuICBcImRyYWdcIixcbiAgXCJkcmFnZW5kXCIsXG4gIFwiZHJhZ3N0YXJ0XCIsXG4gIFwibW91c2Vkb3duXCIsXG4gIFwibW91c2Vtb3ZlXCIsXG4gIFwibW91c2VvdXRcIixcbiAgXCJtb3VzZW92ZXJcIixcbiAgXCJtb3VzZXVwXCIsXG4gIFwicmlnaHRjbGlja1wiXG5dO1xuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5mdW5jdGlvbiBEZShuLCBlLCB0LCBzKSB7XG4gIGZ1bmN0aW9uIHIobykge1xuICAgIHJldHVybiBvIGluc3RhbmNlb2YgdCA/IG8gOiBuZXcgdChmdW5jdGlvbihpKSB7XG4gICAgICBpKG8pO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBuZXcgKHQgfHwgKHQgPSBQcm9taXNlKSkoZnVuY3Rpb24obywgaSkge1xuICAgIGZ1bmN0aW9uIGModSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZChzLm5leHQodSkpO1xuICAgICAgfSBjYXRjaCAobCkge1xuICAgICAgICBpKGwpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhKHUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGQocy50aHJvdyh1KSk7XG4gICAgICB9IGNhdGNoIChsKSB7XG4gICAgICAgIGkobCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQodSkge1xuICAgICAgdS5kb25lID8gbyh1LnZhbHVlKSA6IHIodS52YWx1ZSkudGhlbihjLCBhKTtcbiAgICB9XG4gICAgZCgocyA9IHMuYXBwbHkobiwgZSB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufVxudmFyIEZlID0gZnVuY3Rpb24gbihlLCB0KSB7XG4gIGlmIChlID09PSB0KVxuICAgIHJldHVybiAhMDtcbiAgaWYgKGUgJiYgdCAmJiB0eXBlb2YgZSA9PSBcIm9iamVjdFwiICYmIHR5cGVvZiB0ID09IFwib2JqZWN0XCIpIHtcbiAgICBpZiAoZS5jb25zdHJ1Y3RvciAhPT0gdC5jb25zdHJ1Y3RvcilcbiAgICAgIHJldHVybiAhMTtcbiAgICB2YXIgcywgciwgbztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgaWYgKHMgPSBlLmxlbmd0aCwgcyAhPSB0Lmxlbmd0aClcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgZm9yIChyID0gczsgci0tICE9PSAwOyApXG4gICAgICAgIGlmICghbihlW3JdLCB0W3JdKSlcbiAgICAgICAgICByZXR1cm4gITE7XG4gICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIGlmIChlLmNvbnN0cnVjdG9yID09PSBSZWdFeHApXG4gICAgICByZXR1cm4gZS5zb3VyY2UgPT09IHQuc291cmNlICYmIGUuZmxhZ3MgPT09IHQuZmxhZ3M7XG4gICAgaWYgKGUudmFsdWVPZiAhPT0gT2JqZWN0LnByb3RvdHlwZS52YWx1ZU9mKVxuICAgICAgcmV0dXJuIGUudmFsdWVPZigpID09PSB0LnZhbHVlT2YoKTtcbiAgICBpZiAoZS50b1N0cmluZyAhPT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZylcbiAgICAgIHJldHVybiBlLnRvU3RyaW5nKCkgPT09IHQudG9TdHJpbmcoKTtcbiAgICBpZiAobyA9IE9iamVjdC5rZXlzKGUpLCBzID0gby5sZW5ndGgsIHMgIT09IE9iamVjdC5rZXlzKHQpLmxlbmd0aClcbiAgICAgIHJldHVybiAhMTtcbiAgICBmb3IgKHIgPSBzOyByLS0gIT09IDA7IClcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIG9bcl0pKVxuICAgICAgICByZXR1cm4gITE7XG4gICAgZm9yIChyID0gczsgci0tICE9PSAwOyApIHtcbiAgICAgIHZhciBpID0gb1tyXTtcbiAgICAgIGlmICghbihlW2ldLCB0W2ldKSlcbiAgICAgICAgcmV0dXJuICExO1xuICAgIH1cbiAgICByZXR1cm4gITA7XG4gIH1cbiAgcmV0dXJuIGUgIT09IGUgJiYgdCAhPT0gdDtcbn07XG5jb25zdCBwZSA9IFwiX19nb29nbGVNYXBzU2NyaXB0SWRcIjtcbnZhciBOO1xuKGZ1bmN0aW9uKG4pIHtcbiAgbltuLklOSVRJQUxJWkVEID0gMF0gPSBcIklOSVRJQUxJWkVEXCIsIG5bbi5MT0FESU5HID0gMV0gPSBcIkxPQURJTkdcIiwgbltuLlNVQ0NFU1MgPSAyXSA9IFwiU1VDQ0VTU1wiLCBuW24uRkFJTFVSRSA9IDNdID0gXCJGQUlMVVJFXCI7XG59KShOIHx8IChOID0ge30pKTtcbmNsYXNzIGoge1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBMb2FkZXIgdXNpbmcgW1tMb2FkZXJPcHRpb25zXV0uIE5vIGRlZmF1bHRzIGFyZSBzZXRcbiAgICogdXNpbmcgdGhpcyBsaWJyYXJ5LCBpbnN0ZWFkIHRoZSBkZWZhdWx0cyBhcmUgc2V0IGJ5IHRoZSBHb29nbGUgTWFwc1xuICAgKiBKYXZhU2NyaXB0IEFQSSBzZXJ2ZXIuXG4gICAqXG4gICAqIGBgYFxuICAgKiBjb25zdCBsb2FkZXIgPSBMb2FkZXIoe2FwaUtleSwgdmVyc2lvbjogJ3dlZWtseScsIGxpYnJhcmllczogWydwbGFjZXMnXX0pO1xuICAgKiBgYGBcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgYXBpS2V5OiBlLCBhdXRoUmVmZXJyZXJQb2xpY3k6IHQsIGNoYW5uZWw6IHMsIGNsaWVudDogciwgaWQ6IG8gPSBwZSwgbGFuZ3VhZ2U6IGksIGxpYnJhcmllczogYyA9IFtdLCBtYXBJZHM6IGEsIG5vbmNlOiBkLCByZWdpb246IHUsIHJldHJpZXM6IGwgPSAzLCB1cmw6IGggPSBcImh0dHBzOi8vbWFwcy5nb29nbGVhcGlzLmNvbS9tYXBzL2FwaS9qc1wiLCB2ZXJzaW9uOiBwIH0pIHtcbiAgICBpZiAodGhpcy5jYWxsYmFja3MgPSBbXSwgdGhpcy5kb25lID0gITEsIHRoaXMubG9hZGluZyA9ICExLCB0aGlzLmVycm9ycyA9IFtdLCB0aGlzLmFwaUtleSA9IGUsIHRoaXMuYXV0aFJlZmVycmVyUG9saWN5ID0gdCwgdGhpcy5jaGFubmVsID0gcywgdGhpcy5jbGllbnQgPSByLCB0aGlzLmlkID0gbyB8fCBwZSwgdGhpcy5sYW5ndWFnZSA9IGksIHRoaXMubGlicmFyaWVzID0gYywgdGhpcy5tYXBJZHMgPSBhLCB0aGlzLm5vbmNlID0gZCwgdGhpcy5yZWdpb24gPSB1LCB0aGlzLnJldHJpZXMgPSBsLCB0aGlzLnVybCA9IGgsIHRoaXMudmVyc2lvbiA9IHAsIGouaW5zdGFuY2UpIHtcbiAgICAgIGlmICghRmUodGhpcy5vcHRpb25zLCBqLmluc3RhbmNlLm9wdGlvbnMpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExvYWRlciBtdXN0IG5vdCBiZSBjYWxsZWQgYWdhaW4gd2l0aCBkaWZmZXJlbnQgb3B0aW9ucy4gJHtKU09OLnN0cmluZ2lmeSh0aGlzLm9wdGlvbnMpfSAhPT0gJHtKU09OLnN0cmluZ2lmeShqLmluc3RhbmNlLm9wdGlvbnMpfWApO1xuICAgICAgcmV0dXJuIGouaW5zdGFuY2U7XG4gICAgfVxuICAgIGouaW5zdGFuY2UgPSB0aGlzO1xuICB9XG4gIGdldCBvcHRpb25zKCkge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJzaW9uOiB0aGlzLnZlcnNpb24sXG4gICAgICBhcGlLZXk6IHRoaXMuYXBpS2V5LFxuICAgICAgY2hhbm5lbDogdGhpcy5jaGFubmVsLFxuICAgICAgY2xpZW50OiB0aGlzLmNsaWVudCxcbiAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgbGlicmFyaWVzOiB0aGlzLmxpYnJhcmllcyxcbiAgICAgIGxhbmd1YWdlOiB0aGlzLmxhbmd1YWdlLFxuICAgICAgcmVnaW9uOiB0aGlzLnJlZ2lvbixcbiAgICAgIG1hcElkczogdGhpcy5tYXBJZHMsXG4gICAgICBub25jZTogdGhpcy5ub25jZSxcbiAgICAgIHVybDogdGhpcy51cmwsXG4gICAgICBhdXRoUmVmZXJyZXJQb2xpY3k6IHRoaXMuYXV0aFJlZmVycmVyUG9saWN5XG4gICAgfTtcbiAgfVxuICBnZXQgc3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLmVycm9ycy5sZW5ndGggPyBOLkZBSUxVUkUgOiB0aGlzLmRvbmUgPyBOLlNVQ0NFU1MgOiB0aGlzLmxvYWRpbmcgPyBOLkxPQURJTkcgOiBOLklOSVRJQUxJWkVEO1xuICB9XG4gIGdldCBmYWlsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZG9uZSAmJiAhdGhpcy5sb2FkaW5nICYmIHRoaXMuZXJyb3JzLmxlbmd0aCA+PSB0aGlzLnJldHJpZXMgKyAxO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVVcmwgcmV0dXJucyB0aGUgR29vZ2xlIE1hcHMgSmF2YVNjcmlwdCBBUEkgc2NyaXB0IHVybCBnaXZlbiB0aGUgW1tMb2FkZXJPcHRpb25zXV0uXG4gICAqXG4gICAqIEBpZ25vcmVcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGNyZWF0ZVVybCgpIHtcbiAgICBsZXQgZSA9IHRoaXMudXJsO1xuICAgIHJldHVybiBlICs9IFwiP2NhbGxiYWNrPV9fZ29vZ2xlTWFwc0NhbGxiYWNrXCIsIHRoaXMuYXBpS2V5ICYmIChlICs9IGAma2V5PSR7dGhpcy5hcGlLZXl9YCksIHRoaXMuY2hhbm5lbCAmJiAoZSArPSBgJmNoYW5uZWw9JHt0aGlzLmNoYW5uZWx9YCksIHRoaXMuY2xpZW50ICYmIChlICs9IGAmY2xpZW50PSR7dGhpcy5jbGllbnR9YCksIHRoaXMubGlicmFyaWVzLmxlbmd0aCA+IDAgJiYgKGUgKz0gYCZsaWJyYXJpZXM9JHt0aGlzLmxpYnJhcmllcy5qb2luKFwiLFwiKX1gKSwgdGhpcy5sYW5ndWFnZSAmJiAoZSArPSBgJmxhbmd1YWdlPSR7dGhpcy5sYW5ndWFnZX1gKSwgdGhpcy5yZWdpb24gJiYgKGUgKz0gYCZyZWdpb249JHt0aGlzLnJlZ2lvbn1gKSwgdGhpcy52ZXJzaW9uICYmIChlICs9IGAmdj0ke3RoaXMudmVyc2lvbn1gKSwgdGhpcy5tYXBJZHMgJiYgKGUgKz0gYCZtYXBfaWRzPSR7dGhpcy5tYXBJZHMuam9pbihcIixcIil9YCksIHRoaXMuYXV0aFJlZmVycmVyUG9saWN5ICYmIChlICs9IGAmYXV0aF9yZWZlcnJlcl9wb2xpY3k9JHt0aGlzLmF1dGhSZWZlcnJlclBvbGljeX1gKSwgZTtcbiAgfVxuICBkZWxldGVTY3JpcHQoKSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaWQpO1xuICAgIGUgJiYgZS5yZW1vdmUoKTtcbiAgfVxuICAvKipcbiAgICogTG9hZCB0aGUgR29vZ2xlIE1hcHMgSmF2YVNjcmlwdCBBUEkgc2NyaXB0IGFuZCByZXR1cm4gYSBQcm9taXNlLlxuICAgKiBAZGVwcmVjYXRlZCwgdXNlIGltcG9ydExpYnJhcnkoKSBpbnN0ZWFkLlxuICAgKi9cbiAgbG9hZCgpIHtcbiAgICByZXR1cm4gdGhpcy5sb2FkUHJvbWlzZSgpO1xuICB9XG4gIC8qKlxuICAgKiBMb2FkIHRoZSBHb29nbGUgTWFwcyBKYXZhU2NyaXB0IEFQSSBzY3JpcHQgYW5kIHJldHVybiBhIFByb21pc2UuXG4gICAqXG4gICAqIEBpZ25vcmVcbiAgICogQGRlcHJlY2F0ZWQsIHVzZSBpbXBvcnRMaWJyYXJ5KCkgaW5zdGVhZC5cbiAgICovXG4gIGxvYWRQcm9taXNlKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgoZSwgdCkgPT4ge1xuICAgICAgdGhpcy5sb2FkQ2FsbGJhY2soKHMpID0+IHtcbiAgICAgICAgcyA/IHQocy5lcnJvcikgOiBlKHdpbmRvdy5nb29nbGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgaW1wb3J0TGlicmFyeShlKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZSgpLCBnb29nbGUubWFwcy5pbXBvcnRMaWJyYXJ5KGUpO1xuICB9XG4gIC8qKlxuICAgKiBMb2FkIHRoZSBHb29nbGUgTWFwcyBKYXZhU2NyaXB0IEFQSSBzY3JpcHQgd2l0aCBhIGNhbGxiYWNrLlxuICAgKiBAZGVwcmVjYXRlZCwgdXNlIGltcG9ydExpYnJhcnkoKSBpbnN0ZWFkLlxuICAgKi9cbiAgbG9hZENhbGxiYWNrKGUpIHtcbiAgICB0aGlzLmNhbGxiYWNrcy5wdXNoKGUpLCB0aGlzLmV4ZWN1dGUoKTtcbiAgfVxuICAvKipcbiAgICogU2V0IHRoZSBzY3JpcHQgb24gZG9jdW1lbnQuXG4gICAqL1xuICBzZXRTY3JpcHQoKSB7XG4gICAgdmFyIGUsIHQ7XG4gICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaWQpKSB7XG4gICAgICB0aGlzLmNhbGxiYWNrKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHMgPSB7XG4gICAgICBrZXk6IHRoaXMuYXBpS2V5LFxuICAgICAgY2hhbm5lbDogdGhpcy5jaGFubmVsLFxuICAgICAgY2xpZW50OiB0aGlzLmNsaWVudCxcbiAgICAgIGxpYnJhcmllczogdGhpcy5saWJyYXJpZXMubGVuZ3RoICYmIHRoaXMubGlicmFyaWVzLFxuICAgICAgdjogdGhpcy52ZXJzaW9uLFxuICAgICAgbWFwSWRzOiB0aGlzLm1hcElkcyxcbiAgICAgIGxhbmd1YWdlOiB0aGlzLmxhbmd1YWdlLFxuICAgICAgcmVnaW9uOiB0aGlzLnJlZ2lvbixcbiAgICAgIGF1dGhSZWZlcnJlclBvbGljeTogdGhpcy5hdXRoUmVmZXJyZXJQb2xpY3lcbiAgICB9O1xuICAgIE9iamVjdC5rZXlzKHMpLmZvckVhY2goXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgKG8pID0+ICFzW29dICYmIGRlbGV0ZSBzW29dXG4gICAgKSwgISgodCA9IChlID0gd2luZG93ID09IG51bGwgPyB2b2lkIDAgOiB3aW5kb3cuZ29vZ2xlKSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLm1hcHMpID09PSBudWxsIHx8IHQgPT09IHZvaWQgMCkgJiYgdC5pbXBvcnRMaWJyYXJ5IHx8ICgobykgPT4ge1xuICAgICAgbGV0IGksIGMsIGEsIGQgPSBcIlRoZSBHb29nbGUgTWFwcyBKYXZhU2NyaXB0IEFQSVwiLCB1ID0gXCJnb29nbGVcIiwgbCA9IFwiaW1wb3J0TGlicmFyeVwiLCBoID0gXCJfX2liX19cIiwgcCA9IGRvY3VtZW50LCBtID0gd2luZG93O1xuICAgICAgbSA9IG1bdV0gfHwgKG1bdV0gPSB7fSk7XG4gICAgICBjb25zdCBmID0gbS5tYXBzIHx8IChtLm1hcHMgPSB7fSksIGcgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLCB2ID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpLCB3ID0gKCkgPT4gKFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGkgfHwgKGkgPSBuZXcgUHJvbWlzZSgoXywgTykgPT4gRGUodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgdmFyIE07XG4gICAgICAgICAgeWllbGQgYyA9IHAuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSwgYy5pZCA9IHRoaXMuaWQsIHYuc2V0KFwibGlicmFyaWVzXCIsIFsuLi5nXSArIFwiXCIpO1xuICAgICAgICAgIGZvciAoYSBpbiBvKVxuICAgICAgICAgICAgdi5zZXQoYS5yZXBsYWNlKC9bQS1aXS9nLCAoRSkgPT4gXCJfXCIgKyBFWzBdLnRvTG93ZXJDYXNlKCkpLCBvW2FdKTtcbiAgICAgICAgICB2LnNldChcImNhbGxiYWNrXCIsIHUgKyBcIi5tYXBzLlwiICsgaCksIGMuc3JjID0gdGhpcy51cmwgKyBcIj9cIiArIHYsIGZbaF0gPSBfLCBjLm9uZXJyb3IgPSAoKSA9PiBpID0gTyhFcnJvcihkICsgXCIgY291bGQgbm90IGxvYWQuXCIpKSwgYy5ub25jZSA9IHRoaXMubm9uY2UgfHwgKChNID0gcC5xdWVyeVNlbGVjdG9yKFwic2NyaXB0W25vbmNlXVwiKSkgPT09IG51bGwgfHwgTSA9PT0gdm9pZCAwID8gdm9pZCAwIDogTS5ub25jZSkgfHwgXCJcIiwgcC5oZWFkLmFwcGVuZChjKTtcbiAgICAgICAgfSkpKVxuICAgICAgKTtcbiAgICAgIGZbbF0gPyBjb25zb2xlLndhcm4oZCArIFwiIG9ubHkgbG9hZHMgb25jZS4gSWdub3Jpbmc6XCIsIG8pIDogZltsXSA9IChfLCAuLi5PKSA9PiBnLmFkZChfKSAmJiB3KCkudGhlbigoKSA9PiBmW2xdKF8sIC4uLk8pKTtcbiAgICB9KShzKTtcbiAgICBjb25zdCByID0gdGhpcy5saWJyYXJpZXMubWFwKChvKSA9PiB0aGlzLmltcG9ydExpYnJhcnkobykpO1xuICAgIHIubGVuZ3RoIHx8IHIucHVzaCh0aGlzLmltcG9ydExpYnJhcnkoXCJjb3JlXCIpKSwgUHJvbWlzZS5hbGwocikudGhlbigoKSA9PiB0aGlzLmNhbGxiYWNrKCksIChvKSA9PiB7XG4gICAgICBjb25zdCBpID0gbmV3IEVycm9yRXZlbnQoXCJlcnJvclwiLCB7IGVycm9yOiBvIH0pO1xuICAgICAgdGhpcy5sb2FkRXJyb3JDYWxsYmFjayhpKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmVzZXQgdGhlIGxvYWRlciBzdGF0ZS5cbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuZGVsZXRlU2NyaXB0KCksIHRoaXMuZG9uZSA9ICExLCB0aGlzLmxvYWRpbmcgPSAhMSwgdGhpcy5lcnJvcnMgPSBbXSwgdGhpcy5vbmVycm9yRXZlbnQgPSBudWxsO1xuICB9XG4gIHJlc2V0SWZSZXRyeWluZ0ZhaWxlZCgpIHtcbiAgICB0aGlzLmZhaWxlZCAmJiB0aGlzLnJlc2V0KCk7XG4gIH1cbiAgbG9hZEVycm9yQ2FsbGJhY2soZSkge1xuICAgIGlmICh0aGlzLmVycm9ycy5wdXNoKGUpLCB0aGlzLmVycm9ycy5sZW5ndGggPD0gdGhpcy5yZXRyaWVzKSB7XG4gICAgICBjb25zdCB0ID0gdGhpcy5lcnJvcnMubGVuZ3RoICogTWF0aC5wb3coMiwgdGhpcy5lcnJvcnMubGVuZ3RoKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBsb2FkIEdvb2dsZSBNYXBzIHNjcmlwdCwgcmV0cnlpbmcgaW4gJHt0fSBtcy5gKSwgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuZGVsZXRlU2NyaXB0KCksIHRoaXMuc2V0U2NyaXB0KCk7XG4gICAgICB9LCB0KTtcbiAgICB9IGVsc2VcbiAgICAgIHRoaXMub25lcnJvckV2ZW50ID0gZSwgdGhpcy5jYWxsYmFjaygpO1xuICB9XG4gIGNhbGxiYWNrKCkge1xuICAgIHRoaXMuZG9uZSA9ICEwLCB0aGlzLmxvYWRpbmcgPSAhMSwgdGhpcy5jYWxsYmFja3MuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgZSh0aGlzLm9uZXJyb3JFdmVudCk7XG4gICAgfSksIHRoaXMuY2FsbGJhY2tzID0gW107XG4gIH1cbiAgZXhlY3V0ZSgpIHtcbiAgICBpZiAodGhpcy5yZXNldElmUmV0cnlpbmdGYWlsZWQoKSwgdGhpcy5kb25lKVxuICAgICAgdGhpcy5jYWxsYmFjaygpO1xuICAgIGVsc2Uge1xuICAgICAgaWYgKHdpbmRvdy5nb29nbGUgJiYgd2luZG93Lmdvb2dsZS5tYXBzICYmIHdpbmRvdy5nb29nbGUubWFwcy52ZXJzaW9uKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkdvb2dsZSBNYXBzIGFscmVhZHkgbG9hZGVkIG91dHNpZGUgQGdvb2dsZW1hcHMvanMtYXBpLWxvYWRlci5UaGlzIG1heSByZXN1bHQgaW4gdW5kZXNpcmFibGUgYmVoYXZpb3IgYXMgb3B0aW9ucyBhbmQgc2NyaXB0IHBhcmFtZXRlcnMgbWF5IG5vdCBtYXRjaC5cIiksIHRoaXMuY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2FkaW5nIHx8ICh0aGlzLmxvYWRpbmcgPSAhMCwgdGhpcy5zZXRTY3JpcHQoKSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBWZShuKSB7XG4gIHJldHVybiBjbGFzcyBleHRlbmRzIG4uT3ZlcmxheVZpZXcge1xuICAgIGNvbnN0cnVjdG9yKHMpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgICBzZSh0aGlzLCBcImVsZW1lbnRcIik7XG4gICAgICBzZSh0aGlzLCBcIm9wdHNcIik7XG4gICAgICBjb25zdCB7IGVsZW1lbnQ6IHIsIC4uLm8gfSA9IHM7XG4gICAgICB0aGlzLmVsZW1lbnQgPSByLCB0aGlzLm9wdHMgPSBvLCB0aGlzLm9wdHMubWFwICYmIHRoaXMuc2V0TWFwKHRoaXMub3B0cy5tYXApO1xuICAgIH1cbiAgICBnZXRQb3NpdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdHMucG9zaXRpb24gPyB0aGlzLm9wdHMucG9zaXRpb24gaW5zdGFuY2VvZiBuLkxhdExuZyA/IHRoaXMub3B0cy5wb3NpdGlvbiA6IG5ldyBuLkxhdExuZyh0aGlzLm9wdHMucG9zaXRpb24pIDogbnVsbDtcbiAgICB9XG4gICAgZ2V0VmlzaWJsZSgpIHtcbiAgICAgIGlmICghdGhpcy5lbGVtZW50KVxuICAgICAgICByZXR1cm4gITE7XG4gICAgICBjb25zdCBzID0gdGhpcy5lbGVtZW50O1xuICAgICAgcmV0dXJuIHMuc3R5bGUuZGlzcGxheSAhPT0gXCJub25lXCIgJiYgcy5zdHlsZS52aXNpYmlsaXR5ICE9PSBcImhpZGRlblwiICYmIChzLnN0eWxlLm9wYWNpdHkgPT09IFwiXCIgfHwgTnVtYmVyKHMuc3R5bGUub3BhY2l0eSkgPiAwLjAxKTtcbiAgICB9XG4gICAgb25BZGQoKSB7XG4gICAgICBpZiAoIXRoaXMuZWxlbWVudClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY29uc3QgcyA9IHRoaXMuZ2V0UGFuZXMoKTtcbiAgICAgIHMgJiYgcy5vdmVybGF5TW91c2VUYXJnZXQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICB9XG4gICAgZHJhdygpIHtcbiAgICAgIGlmICghdGhpcy5lbGVtZW50KVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBzID0gdGhpcy5nZXRQcm9qZWN0aW9uKCksIHIgPSBzID09IG51bGwgPyB2b2lkIDAgOiBzLmZyb21MYXRMbmdUb0RpdlBpeGVsKHRoaXMuZ2V0UG9zaXRpb24oKSk7XG4gICAgICBpZiAocikge1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIGxldCBvLCBpO1xuICAgICAgICBzd2l0Y2ggKHRoaXMub3B0cy5hbmNob3JQb2ludCkge1xuICAgICAgICAgIGNhc2UgXCJUT1BfQ0VOVEVSXCI6XG4gICAgICAgICAgICBvID0gXCItNTAlXCIsIGkgPSBcIi0xMDAlXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiQk9UVE9NX0NFTlRFUlwiOlxuICAgICAgICAgICAgbyA9IFwiLTUwJVwiLCBpID0gXCIwXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiTEVGVF9DRU5URVJcIjpcbiAgICAgICAgICAgIG8gPSBcIi0xMDAlXCIsIGkgPSBcIi01MCVcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJSSUdIVF9DRU5URVJcIjpcbiAgICAgICAgICAgIG8gPSBcIjBcIiwgaSA9IFwiLTUwJVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIlRPUF9MRUZUXCI6XG4gICAgICAgICAgICBvID0gXCItMTAwJVwiLCBpID0gXCItMTAwJVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIlRPUF9SSUdIVFwiOlxuICAgICAgICAgICAgbyA9IFwiMFwiLCBpID0gXCItMTAwJVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIkJPVFRPTV9MRUZUXCI6XG4gICAgICAgICAgICBvID0gXCItMTAwJVwiLCBpID0gXCIwXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiQk9UVE9NX1JJR0hUXCI6XG4gICAgICAgICAgICBvID0gXCIwXCIsIGkgPSBcIjBcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBvID0gXCItNTAlXCIsIGkgPSBcIi01MCVcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjID0gci54ICsgKHRoaXMub3B0cy5vZmZzZXRYIHx8IDApICsgXCJweFwiLCBhID0gci55ICsgKHRoaXMub3B0cy5vZmZzZXRZIHx8IDApICsgXCJweFwiO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtvfSkgdHJhbnNsYXRlWCgke2N9KSB0cmFuc2xhdGVZKCR7aX0pIHRyYW5zbGF0ZVkoJHthfSlgLCB0aGlzLm9wdHMuekluZGV4ICYmICh0aGlzLmVsZW1lbnQuc3R5bGUuekluZGV4ID0gdGhpcy5vcHRzLnpJbmRleC50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgb25SZW1vdmUoKSB7XG4gICAgICB0aGlzLmVsZW1lbnQgJiYgdGhpcy5lbGVtZW50LnJlbW92ZSgpO1xuICAgIH1cbiAgICBzZXRPcHRpb25zKHMpIHtcbiAgICAgIGNvbnN0IHsgZWxlbWVudDogciwgLi4ubyB9ID0gcztcbiAgICAgIHRoaXMuZWxlbWVudCA9IHIsIHRoaXMub3B0cyA9IG8sIHRoaXMuZHJhdygpO1xuICAgIH1cbiAgfTtcbn1cbmxldCBmZTtcbmNvbnN0IG1lID0gW1xuICBcImJvdW5kc19jaGFuZ2VkXCIsXG4gIFwiY2VudGVyX2NoYW5nZWRcIixcbiAgXCJjbGlja1wiLFxuICBcImNvbnRleHRtZW51XCIsXG4gIFwiZGJsY2xpY2tcIixcbiAgXCJkcmFnXCIsXG4gIFwiZHJhZ2VuZFwiLFxuICBcImRyYWdzdGFydFwiLFxuICBcImhlYWRpbmdfY2hhbmdlZFwiLFxuICBcImlkbGVcIixcbiAgXCJpc2ZyYWN0aW9uYWx6b29tZW5hYmxlZF9jaGFuZ2VkXCIsXG4gIFwibWFwY2FwYWJpbGl0aWVzX2NoYW5nZWRcIixcbiAgXCJtYXB0eXBlaWRfY2hhbmdlZFwiLFxuICBcIm1vdXNlbW92ZVwiLFxuICBcIm1vdXNlb3V0XCIsXG4gIFwibW91c2VvdmVyXCIsXG4gIFwicHJvamVjdGlvbl9jaGFuZ2VkXCIsXG4gIFwicmVuZGVyaW5ndHlwZV9jaGFuZ2VkXCIsXG4gIFwicmlnaHRjbGlja1wiLFxuICBcInRpbGVzbG9hZGVkXCIsXG4gIFwidGlsdF9jaGFuZ2VkXCIsXG4gIFwiem9vbV9jaGFuZ2VkXCJcbl0sIHplID0gUCh7XG4gIHByb3BzOiB7XG4gICAgYXBpUHJvbWlzZToge1xuICAgICAgdHlwZTogUHJvbWlzZVxuICAgIH0sXG4gICAgYXBpS2V5OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBcIlwiXG4gICAgfSxcbiAgICB2ZXJzaW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBcIndlZWtseVwiXG4gICAgfSxcbiAgICBsaWJyYXJpZXM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgZGVmYXVsdDogKCkgPT4gW1wicGxhY2VzXCIsIFwibWFya2VyXCJdXG4gICAgfSxcbiAgICByZWdpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgbGFuZ3VhZ2U6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgYmFja2dyb3VuZENvbG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIGNlbnRlcjoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogKCkgPT4gKHsgbGF0OiAwLCBsbmc6IDAgfSlcbiAgICB9LFxuICAgIGNsaWNrYWJsZUljb25zOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBjb250cm9sU2l6ZToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBkaXNhYmxlRGVmYXVsdFVpOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBkaXNhYmxlRG91YmxlQ2xpY2tab29tOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBkcmFnZ2FibGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIGRyYWdnYWJsZUN1cnNvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBkcmFnZ2luZ0N1cnNvcjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBmdWxsc2NyZWVuQ29udHJvbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgZnVsbHNjcmVlbkNvbnRyb2xQb3NpdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBnZXN0dXJlSGFuZGxpbmc6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgaGVhZGluZzoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBpc0ZyYWN0aW9uYWxab29tRW5hYmxlZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAga2V5Ym9hcmRTaG9ydGN1dHM6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIG1hcFR5cGVDb250cm9sOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBtYXBUeXBlQ29udHJvbE9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgbWFwVHlwZUlkOiB7XG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBtYXBJZDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBtYXhab29tOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIG1pblpvb206IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgbm9DbGVhcjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgcGFuQ29udHJvbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgcGFuQ29udHJvbFBvc2l0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIHJlc3RyaWN0aW9uOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIHJvdGF0ZUNvbnRyb2w6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIHJvdGF0ZUNvbnRyb2xQb3NpdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBzY2FsZUNvbnRyb2w6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICByZXF1aXJlZDogITEsXG4gICAgICBkZWZhdWx0OiB2b2lkIDBcbiAgICB9LFxuICAgIHNjYWxlQ29udHJvbFN0eWxlOiB7XG4gICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIHNjcm9sbHdoZWVsOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBzdHJlZXRWaWV3OiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIHN0cmVldFZpZXdDb250cm9sOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6ICExLFxuICAgICAgZGVmYXVsdDogdm9pZCAwXG4gICAgfSxcbiAgICBzdHJlZXRWaWV3Q29udHJvbFBvc2l0aW9uOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIHN0eWxlczoge1xuICAgICAgdHlwZTogQXJyYXksXG4gICAgICByZXF1aXJlZDogITFcbiAgICB9LFxuICAgIHRpbHQ6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH0sXG4gICAgem9vbToge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICB6b29tQ29udHJvbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIHJlcXVpcmVkOiAhMSxcbiAgICAgIGRlZmF1bHQ6IHZvaWQgMFxuICAgIH0sXG4gICAgem9vbUNvbnRyb2xQb3NpdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgcmVxdWlyZWQ6ICExXG4gICAgfSxcbiAgICBub25jZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogXCJcIlxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IG1lLFxuICBzZXR1cChuLCB7IGVtaXQ6IGUgfSkge1xuICAgIGNvbnN0IHQgPSB5KCksIHMgPSB5KCExKSwgciA9IHkoKSwgbyA9IHkoKSwgaSA9IHkoITEpO1xuICAgIFUoQiwgciksIFUoWiwgbyksIFUoQWUsIGkpO1xuICAgIGNvbnN0IGMgPSAoKSA9PiB7XG4gICAgICBjb25zdCBsID0geyAuLi5uIH07XG4gICAgICBPYmplY3Qua2V5cyhsKS5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgIGxbZl0gPT09IHZvaWQgMCAmJiBkZWxldGUgbFtmXTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcCA9IChmKSA9PiB7XG4gICAgICAgIHZhciBnO1xuICAgICAgICByZXR1cm4gZiA/IHsgcG9zaXRpb246IChnID0gby52YWx1ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IGcuQ29udHJvbFBvc2l0aW9uW2ZdIH0gOiB7fTtcbiAgICAgIH0sIG0gPSB7XG4gICAgICAgIHNjYWxlQ29udHJvbE9wdGlvbnM6IG4uc2NhbGVDb250cm9sU3R5bGUgPyB7IHN0eWxlOiBuLnNjYWxlQ29udHJvbFN0eWxlIH0gOiB7fSxcbiAgICAgICAgcGFuQ29udHJvbE9wdGlvbnM6IHAobi5wYW5Db250cm9sUG9zaXRpb24pLFxuICAgICAgICB6b29tQ29udHJvbE9wdGlvbnM6IHAobi56b29tQ29udHJvbFBvc2l0aW9uKSxcbiAgICAgICAgcm90YXRlQ29udHJvbE9wdGlvbnM6IHAobi5yb3RhdGVDb250cm9sUG9zaXRpb24pLFxuICAgICAgICBzdHJlZXRWaWV3Q29udHJvbE9wdGlvbnM6IHAobi5zdHJlZXRWaWV3Q29udHJvbFBvc2l0aW9uKSxcbiAgICAgICAgZnVsbHNjcmVlbkNvbnRyb2xPcHRpb25zOiBwKG4uZnVsbHNjcmVlbkNvbnRyb2xQb3NpdGlvbiksXG4gICAgICAgIGRpc2FibGVEZWZhdWx0VUk6IG4uZGlzYWJsZURlZmF1bHRVaVxuICAgICAgfTtcbiAgICAgIHJldHVybiB7IC4uLmwsIC4uLm0gfTtcbiAgICB9LCBhID0gTChcbiAgICAgIFtvLCByXSxcbiAgICAgIChbbCwgaF0pID0+IHtcbiAgICAgICAgY29uc3QgcCA9IGwsIG0gPSBoO1xuICAgICAgICBwICYmIG0gJiYgKHAuZXZlbnQuYWRkTGlzdGVuZXJPbmNlKG0sIFwidGlsZXNsb2FkZWRcIiwgKCkgPT4ge1xuICAgICAgICAgIGkudmFsdWUgPSAhMDtcbiAgICAgICAgfSksIHNldFRpbWVvdXQoYSwgMCkpO1xuICAgICAgfSxcbiAgICAgIHsgaW1tZWRpYXRlOiAhMCB9XG4gICAgKSwgZCA9ICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgYXBpS2V5OiBsLCByZWdpb246IGgsIHZlcnNpb246IHAsIGxhbmd1YWdlOiBtLCBsaWJyYXJpZXM6IGYsIG5vbmNlOiBnIH0gPSBuO1xuICAgICAgICBmZSA9IG5ldyBqKHsgYXBpS2V5OiBsLCByZWdpb246IGgsIHZlcnNpb246IHAsIGxhbmd1YWdlOiBtLCBsaWJyYXJpZXM6IGYsIG5vbmNlOiBnIH0pO1xuICAgICAgfSBjYXRjaCAobCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGwpO1xuICAgICAgfVxuICAgIH0sIHUgPSAobCkgPT4ge1xuICAgICAgby52YWx1ZSA9IHgobC5tYXBzKSwgci52YWx1ZSA9IHgobmV3IGwubWFwcy5NYXAodC52YWx1ZSwgYygpKSk7XG4gICAgICBjb25zdCBoID0gVmUoby52YWx1ZSk7XG4gICAgICBvLnZhbHVlW2VlXSA9IGgsIG1lLmZvckVhY2goKG0pID0+IHtcbiAgICAgICAgdmFyIGY7XG4gICAgICAgIChmID0gci52YWx1ZSkgPT0gbnVsbCB8fCBmLmFkZExpc3RlbmVyKG0sIChnKSA9PiBlKG0sIGcpKTtcbiAgICAgIH0pLCBzLnZhbHVlID0gITA7XG4gICAgICBjb25zdCBwID0gT2JqZWN0LmtleXMobikuZmlsdGVyKFxuICAgICAgICAobSkgPT4gIVtcImFwaVByb21pc2VcIiwgXCJhcGlLZXlcIiwgXCJ2ZXJzaW9uXCIsIFwibGlicmFyaWVzXCIsIFwicmVnaW9uXCIsIFwibGFuZ3VhZ2VcIiwgXCJjZW50ZXJcIiwgXCJ6b29tXCIsIFwibm9uY2VcIl0uaW5jbHVkZXMobSlcbiAgICAgICkubWFwKChtKSA9PiAkKG4sIG0pKTtcbiAgICAgIEwoXG4gICAgICAgIFsoKSA9PiBuLmNlbnRlciwgKCkgPT4gbi56b29tLCAuLi5wXSxcbiAgICAgICAgKFttLCBmXSwgW2csIHZdKSA9PiB7XG4gICAgICAgICAgdmFyIEUsIGssIFM7XG4gICAgICAgICAgY29uc3QgeyBjZW50ZXI6IHcsIHpvb206IF8sIC4uLk8gfSA9IGMoKTtcbiAgICAgICAgICAoRSA9IHIudmFsdWUpID09IG51bGwgfHwgRS5zZXRPcHRpb25zKE8pLCBmICE9PSB2b2lkIDAgJiYgZiAhPT0gdiAmJiAoKGsgPSByLnZhbHVlKSA9PSBudWxsIHx8IGsuc2V0Wm9vbShmKSk7XG4gICAgICAgICAgY29uc3QgTSA9ICFnIHx8IG0ubG5nICE9PSBnLmxuZyB8fCBtLmxhdCAhPT0gZy5sYXQ7XG4gICAgICAgICAgbSAmJiBNICYmICgoUyA9IHIudmFsdWUpID09IG51bGwgfHwgUy5wYW5UbyhtKSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfTtcbiAgICByZXR1cm4gUGUoKCkgPT4ge1xuICAgICAgbi5hcGlQcm9taXNlICYmIG4uYXBpUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UgPyBuLmFwaVByb21pc2UudGhlbih1KSA6IChkKCksIGZlLmxvYWQoKS50aGVuKHUpKTtcbiAgICB9KSwgcSgoKSA9PiB7XG4gICAgICB2YXIgbDtcbiAgICAgIGkudmFsdWUgPSAhMSwgci52YWx1ZSAmJiAoKGwgPSBvLnZhbHVlKSA9PSBudWxsIHx8IGwuZXZlbnQuY2xlYXJJbnN0YW5jZUxpc3RlbmVycyhyLnZhbHVlKSk7XG4gICAgfSksIHsgbWFwUmVmOiB0LCByZWFkeTogcywgbWFwOiByLCBhcGk6IG8sIG1hcFRpbGVzTG9hZGVkOiBpIH07XG4gIH1cbn0pO1xuY29uc3QgdGUgPSAobiwgZSkgPT4ge1xuICBjb25zdCB0ID0gbi5fX3ZjY09wdHMgfHwgbjtcbiAgZm9yIChjb25zdCBbcywgcl0gb2YgZSlcbiAgICB0W3NdID0gcjtcbiAgcmV0dXJuIHQ7XG59LCBHZSA9IHtcbiAgcmVmOiBcIm1hcFJlZlwiLFxuICBjbGFzczogXCJtYXBkaXZcIlxufTtcbmZ1bmN0aW9uIEhlKG4sIGUsIHQsIHMsIHIsIG8pIHtcbiAgcmV0dXJuIEooKSwgWChcImRpdlwiLCBudWxsLCBbXG4gICAgYWUoXCJkaXZcIiwgR2UsIG51bGwsIDUxMiksXG4gICAgUShuLiRzbG90cywgXCJkZWZhdWx0XCIsIE5lKFVlKHsgcmVhZHk6IG4ucmVhZHksIG1hcDogbi5tYXAsIGFwaTogbi5hcGksIG1hcFRpbGVzTG9hZGVkOiBuLm1hcFRpbGVzTG9hZGVkIH0pKSwgdm9pZCAwLCAhMClcbiAgXSk7XG59XG5jb25zdCBFdCA9IC8qIEBfX1BVUkVfXyAqLyB0ZSh6ZSwgW1tcInJlbmRlclwiLCBIZV0sIFtcIl9fc2NvcGVJZFwiLCBcImRhdGEtdi1kMDVmYzZiY1wiXV0pO1xuZnVuY3Rpb24gV2Uobikge1xuICByZXR1cm4gbiAmJiBuLl9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sIFwiZGVmYXVsdFwiKSA/IG4uZGVmYXVsdCA6IG47XG59XG52YXIgS2UgPSBmdW5jdGlvbiBuKGUsIHQpIHtcbiAgaWYgKGUgPT09IHQpXG4gICAgcmV0dXJuICEwO1xuICBpZiAoZSAmJiB0ICYmIHR5cGVvZiBlID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHQgPT0gXCJvYmplY3RcIikge1xuICAgIGlmIChlLmNvbnN0cnVjdG9yICE9PSB0LmNvbnN0cnVjdG9yKVxuICAgICAgcmV0dXJuICExO1xuICAgIHZhciBzLCByLCBvO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBpZiAocyA9IGUubGVuZ3RoLCBzICE9IHQubGVuZ3RoKVxuICAgICAgICByZXR1cm4gITE7XG4gICAgICBmb3IgKHIgPSBzOyByLS0gIT09IDA7IClcbiAgICAgICAgaWYgKCFuKGVbcl0sIHRbcl0pKVxuICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgaWYgKGUuY29uc3RydWN0b3IgPT09IFJlZ0V4cClcbiAgICAgIHJldHVybiBlLnNvdXJjZSA9PT0gdC5zb3VyY2UgJiYgZS5mbGFncyA9PT0gdC5mbGFncztcbiAgICBpZiAoZS52YWx1ZU9mICE9PSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YpXG4gICAgICByZXR1cm4gZS52YWx1ZU9mKCkgPT09IHQudmFsdWVPZigpO1xuICAgIGlmIChlLnRvU3RyaW5nICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKVxuICAgICAgcmV0dXJuIGUudG9TdHJpbmcoKSA9PT0gdC50b1N0cmluZygpO1xuICAgIGlmIChvID0gT2JqZWN0LmtleXMoZSksIHMgPSBvLmxlbmd0aCwgcyAhPT0gT2JqZWN0LmtleXModCkubGVuZ3RoKVxuICAgICAgcmV0dXJuICExO1xuICAgIGZvciAociA9IHM7IHItLSAhPT0gMDsgKVxuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCwgb1tyXSkpXG4gICAgICAgIHJldHVybiAhMTtcbiAgICBmb3IgKHIgPSBzOyByLS0gIT09IDA7ICkge1xuICAgICAgdmFyIGkgPSBvW3JdO1xuICAgICAgaWYgKCFuKGVbaV0sIHRbaV0pKVxuICAgICAgICByZXR1cm4gITE7XG4gICAgfVxuICAgIHJldHVybiAhMDtcbiAgfVxuICByZXR1cm4gZSAhPT0gZSAmJiB0ICE9PSB0O1xufTtcbmNvbnN0IEEgPSAvKiBAX19QVVJFX18gKi8gV2UoS2UpLCBnZSA9IFtcImNsaWNrXCIsIFwiZHJhZ1wiLCBcImRyYWdlbmRcIiwgXCJkcmFnc3RhcnRcIiwgXCJnbXAtY2xpY2tcIl0sIFB0ID0gUCh7XG4gIG5hbWU6IFwiQWR2YW5jZWRNYXJrZXJcIixcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITBcbiAgICB9LFxuICAgIHBpbk9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIHJlcXVpcmVkOiAhMVxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IGdlLFxuICBzZXR1cChuLCB7IGVtaXQ6IGUsIGV4cG9zZTogdCwgc2xvdHM6IHMgfSkge1xuICAgIGNvbnN0IHIgPSAkKG4sIFwib3B0aW9uc1wiKSwgbyA9ICQobiwgXCJwaW5PcHRpb25zXCIpLCBpID0geSgpLCBjID0gYihCLCB5KCkpLCBhID0gYihaLCB5KCkpLCBkID0gYihjZSwgeSgpKSwgdSA9IEgoXG4gICAgICAoKSA9PiAhIShkLnZhbHVlICYmIGEudmFsdWUgJiYgaS52YWx1ZSBpbnN0YW5jZW9mIGdvb2dsZS5tYXBzLm1hcmtlci5BZHZhbmNlZE1hcmtlckVsZW1lbnQpXG4gICAgKTtcbiAgICByZXR1cm4gTChcbiAgICAgIFtjLCByLCBvXSxcbiAgICAgIGFzeW5jIChsLCBbaCwgcCwgbV0pID0+IHtcbiAgICAgICAgdmFyIF8sIE8sIE07XG4gICAgICAgIGNvbnN0IGcgPSAhQShyLnZhbHVlLCBwKSB8fCAhQShvLnZhbHVlLCBtKSB8fCBjLnZhbHVlICE9PSBoO1xuICAgICAgICBpZiAoIWMudmFsdWUgfHwgIWEudmFsdWUgfHwgIWcpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB7IEFkdmFuY2VkTWFya2VyRWxlbWVudDogdiwgUGluRWxlbWVudDogdyB9ID0gYS52YWx1ZS5tYXJrZXI7XG4gICAgICAgIGlmIChpLnZhbHVlKSB7XG4gICAgICAgICAgY29uc3QgeyBtYXA6IEUsIGNvbnRlbnQ6IGssIC4uLlMgfSA9IHIudmFsdWU7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihpLnZhbHVlLCB7XG4gICAgICAgICAgICBjb250ZW50OiBvLnZhbHVlID8gbmV3IHcoby52YWx1ZSkuZWxlbWVudCA6IGssXG4gICAgICAgICAgICAuLi5TXG4gICAgICAgICAgfSksIHUudmFsdWUgJiYgKChfID0gZC52YWx1ZSkgPT0gbnVsbCB8fCBfLnJlbW92ZU1hcmtlcihpLnZhbHVlKSwgKE8gPSBkLnZhbHVlKSA9PSBudWxsIHx8IE8uYWRkTWFya2VyKGkudmFsdWUpKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgby52YWx1ZSAmJiAoci52YWx1ZS5jb250ZW50ID0gbmV3IHcoby52YWx1ZSkuZWxlbWVudCksIGkudmFsdWUgPSB4KG5ldyB2KHIudmFsdWUpKSwgdS52YWx1ZSA/IChNID0gZC52YWx1ZSkgPT0gbnVsbCB8fCBNLmFkZE1hcmtlcihpLnZhbHVlKSA6IGkudmFsdWUubWFwID0gYy52YWx1ZSwgZ2UuZm9yRWFjaCgoRSkgPT4ge1xuICAgICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgICAoayA9IGkudmFsdWUpID09IG51bGwgfHwgay5hZGRMaXN0ZW5lcihFLCAoUykgPT4gZShFLCBTKSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbW1lZGlhdGU6ICEwXG4gICAgICB9XG4gICAgKSwgcSgoKSA9PiB7XG4gICAgICB2YXIgbCwgaDtcbiAgICAgIGkudmFsdWUgJiYgKChsID0gYS52YWx1ZSkgPT0gbnVsbCB8fCBsLmV2ZW50LmNsZWFySW5zdGFuY2VMaXN0ZW5lcnMoaS52YWx1ZSksIHUudmFsdWUgPyAoaCA9IGQudmFsdWUpID09IG51bGwgfHwgaC5yZW1vdmVNYXJrZXIoaS52YWx1ZSkgOiBpLnZhbHVlLm1hcCA9IG51bGwpO1xuICAgIH0pLCBVKGxlLCBpKSwgdCh7IG1hcmtlcjogaSB9KSwgKCkgPT4ge1xuICAgICAgdmFyIGw7XG4gICAgICByZXR1cm4gKGwgPSBzLmRlZmF1bHQpID09IG51bGwgPyB2b2lkIDAgOiBsLmNhbGwocyk7XG4gICAgfTtcbiAgfVxufSksIFllID0gKG4pID0+IG4gPT09IFwiTWFya2VyXCIsIEplID0gKG4pID0+IG4gPT09IGVlLCBWID0gKG4sIGUsIHQsIHMpID0+IHtcbiAgY29uc3QgciA9IHkoKSwgbyA9IGIoQiwgeSgpKSwgaSA9IGIoWiwgeSgpKSwgYyA9IGIoY2UsIHkoKSksIGEgPSBIKFxuICAgICgpID0+ICEhKGMudmFsdWUgJiYgaS52YWx1ZSAmJiAoci52YWx1ZSBpbnN0YW5jZW9mIGkudmFsdWUuTWFya2VyIHx8IHIudmFsdWUgaW5zdGFuY2VvZiBpLnZhbHVlW2VlXSkpXG4gICk7XG4gIHJldHVybiBMKFxuICAgIFtvLCB0XSxcbiAgICAoZCwgW3UsIGxdKSA9PiB7XG4gICAgICB2YXIgcCwgbSwgZjtcbiAgICAgIGNvbnN0IGggPSAhQSh0LnZhbHVlLCBsKSB8fCBvLnZhbHVlICE9PSB1O1xuICAgICAgIW8udmFsdWUgfHwgIWkudmFsdWUgfHwgIWggfHwgKHIudmFsdWUgPyAoci52YWx1ZS5zZXRPcHRpb25zKHQudmFsdWUpLCBhLnZhbHVlICYmICgocCA9IGMudmFsdWUpID09IG51bGwgfHwgcC5yZW1vdmVNYXJrZXIoci52YWx1ZSksIChtID0gYy52YWx1ZSkgPT0gbnVsbCB8fCBtLmFkZE1hcmtlcihyLnZhbHVlKSkpIDogKFllKG4pID8gci52YWx1ZSA9IHgoXG4gICAgICAgIG5ldyBpLnZhbHVlW25dKHQudmFsdWUpXG4gICAgICApIDogSmUobikgPyByLnZhbHVlID0geChcbiAgICAgICAgbmV3IGkudmFsdWVbbl0odC52YWx1ZSlcbiAgICAgICkgOiByLnZhbHVlID0geChcbiAgICAgICAgbmV3IGkudmFsdWVbbl0oe1xuICAgICAgICAgIC4uLnQudmFsdWUsXG4gICAgICAgICAgbWFwOiBvLnZhbHVlXG4gICAgICAgIH0pXG4gICAgICApLCBhLnZhbHVlID8gKGYgPSBjLnZhbHVlKSA9PSBudWxsIHx8IGYuYWRkTWFya2VyKHIudmFsdWUpIDogci52YWx1ZS5zZXRNYXAoby52YWx1ZSksIGUuZm9yRWFjaCgoZykgPT4ge1xuICAgICAgICB2YXIgdjtcbiAgICAgICAgKHYgPSByLnZhbHVlKSA9PSBudWxsIHx8IHYuYWRkTGlzdGVuZXIoZywgKHcpID0+IHMoZywgdykpO1xuICAgICAgfSkpKTtcbiAgICB9LFxuICAgIHtcbiAgICAgIGltbWVkaWF0ZTogITBcbiAgICB9XG4gICksIHEoKCkgPT4ge1xuICAgIHZhciBkLCB1O1xuICAgIHIudmFsdWUgJiYgKChkID0gaS52YWx1ZSkgPT0gbnVsbCB8fCBkLmV2ZW50LmNsZWFySW5zdGFuY2VMaXN0ZW5lcnMoci52YWx1ZSksIGEudmFsdWUgPyAodSA9IGMudmFsdWUpID09IG51bGwgfHwgdS5yZW1vdmVNYXJrZXIoci52YWx1ZSkgOiByLnZhbHVlLnNldE1hcChudWxsKSk7XG4gIH0pLCByO1xufSwgdmUgPSBbXG4gIFwiYW5pbWF0aW9uX2NoYW5nZWRcIixcbiAgXCJjbGlja1wiLFxuICBcImRibGNsaWNrXCIsXG4gIFwicmlnaHRjbGlja1wiLFxuICBcImRyYWdzdGFydFwiLFxuICBcImRyYWdlbmRcIixcbiAgXCJkcmFnXCIsXG4gIFwibW91c2VvdmVyXCIsXG4gIFwibW91c2Vkb3duXCIsXG4gIFwibW91c2VvdXRcIixcbiAgXCJtb3VzZXVwXCIsXG4gIFwiZHJhZ2dhYmxlX2NoYW5nZWRcIixcbiAgXCJjbGlja2FibGVfY2hhbmdlZFwiLFxuICBcImNvbnRleHRtZW51XCIsXG4gIFwiY3Vyc29yX2NoYW5nZWRcIixcbiAgXCJmbGF0X2NoYW5nZWRcIixcbiAgXCJyaWdodGNsaWNrXCIsXG4gIFwiemluZGV4X2NoYW5nZWRcIixcbiAgXCJpY29uX2NoYW5nZWRcIixcbiAgXCJwb3NpdGlvbl9jaGFuZ2VkXCIsXG4gIFwic2hhcGVfY2hhbmdlZFwiLFxuICBcInRpdGxlX2NoYW5nZWRcIixcbiAgXCJ2aXNpYmxlX2NoYW5nZWRcIlxuXSwgTHQgPSBQKHtcbiAgbmFtZTogXCJNYXJrZXJcIixcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITBcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiB2ZSxcbiAgc2V0dXAobiwgeyBlbWl0OiBlLCBleHBvc2U6IHQsIHNsb3RzOiBzIH0pIHtcbiAgICBjb25zdCByID0gJChuLCBcIm9wdGlvbnNcIiksIG8gPSBWKFwiTWFya2VyXCIsIHZlLCByLCBlKTtcbiAgICByZXR1cm4gVShsZSwgbyksIHQoeyBtYXJrZXI6IG8gfSksICgpID0+IHtcbiAgICAgIHZhciBpO1xuICAgICAgcmV0dXJuIChpID0gcy5kZWZhdWx0KSA9PSBudWxsID8gdm9pZCAwIDogaS5jYWxsKHMpO1xuICAgIH07XG4gIH1cbn0pLCBTdCA9IFAoe1xuICBuYW1lOiBcIlBvbHlsaW5lXCIsXG4gIHByb3BzOiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgcmVxdWlyZWQ6ICEwXG4gICAgfVxuICB9LFxuICBlbWl0czogRixcbiAgc2V0dXAobiwgeyBlbWl0OiBlIH0pIHtcbiAgICBjb25zdCB0ID0gJChuLCBcIm9wdGlvbnNcIik7XG4gICAgcmV0dXJuIHsgcG9seWxpbmU6IFYoXCJQb2x5bGluZVwiLCBGLCB0LCBlKSB9O1xuICB9LFxuICByZW5kZXI6ICgpID0+IG51bGxcbn0pLCB4dCA9IFAoe1xuICBuYW1lOiBcIlBvbHlnb25cIixcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITBcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBGLFxuICBzZXR1cChuLCB7IGVtaXQ6IGUgfSkge1xuICAgIGNvbnN0IHQgPSAkKG4sIFwib3B0aW9uc1wiKTtcbiAgICByZXR1cm4geyBwb2x5Z29uOiBWKFwiUG9seWdvblwiLCBGLCB0LCBlKSB9O1xuICB9LFxuICByZW5kZXI6ICgpID0+IG51bGxcbn0pLCB5ZSA9IEYuY29uY2F0KFtcImJvdW5kc19jaGFuZ2VkXCJdKSwgQXQgPSBQKHtcbiAgbmFtZTogXCJSZWN0YW5nbGVcIixcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICByZXF1aXJlZDogITBcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiB5ZSxcbiAgc2V0dXAobiwgeyBlbWl0OiBlIH0pIHtcbiAgICBjb25zdCB0ID0gJChuLCBcIm9wdGlvbnNcIik7XG4gICAgcmV0dXJuIHsgcmVjdGFuZ2xlOiBWKFwiUmVjdGFuZ2xlXCIsIHllLCB0LCBlKSB9O1xuICB9LFxuICByZW5kZXI6ICgpID0+IG51bGxcbn0pLCB3ZSA9IEYuY29uY2F0KFtcImNlbnRlcl9jaGFuZ2VkXCIsIFwicmFkaXVzX2NoYW5nZWRcIl0pLCBJdCA9IFAoe1xuICBuYW1lOiBcIkNpcmNsZVwiLFxuICBwcm9wczoge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIHJlcXVpcmVkOiAhMFxuICAgIH1cbiAgfSxcbiAgZW1pdHM6IHdlLFxuICBzZXR1cChuLCB7IGVtaXQ6IGUgfSkge1xuICAgIGNvbnN0IHQgPSAkKG4sIFwib3B0aW9uc1wiKTtcbiAgICByZXR1cm4geyBjaXJjbGU6IFYoXCJDaXJjbGVcIiwgd2UsIHQsIGUpIH07XG4gIH0sXG4gIHJlbmRlcjogKCkgPT4gbnVsbFxufSksIFhlID0gUCh7XG4gIHByb3BzOiB7XG4gICAgcG9zaXRpb246IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiAhMFxuICAgIH0sXG4gICAgaW5kZXg6IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDFcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiBbXCJjb250ZW50OmxvYWRlZFwiXSxcbiAgc2V0dXAobiwgeyBlbWl0OiBlIH0pIHtcbiAgICBjb25zdCB0ID0geShudWxsKSwgcyA9IGIoQiwgeSgpKSwgciA9IGIoWiwgeSgpKSwgbyA9IGIoQWUsIHkoITEpKSwgaSA9IEwoXG4gICAgICBbbywgciwgdF0sXG4gICAgICAoW2QsIHUsIGxdKSA9PiB7XG4gICAgICAgIHUgJiYgZCAmJiBsICYmIChjKG4ucG9zaXRpb24pLCBlKFwiY29udGVudDpsb2FkZWRcIiksIHNldFRpbWVvdXQoaSwgMCkpO1xuICAgICAgfSxcbiAgICAgIHsgaW1tZWRpYXRlOiAhMCB9XG4gICAgKSwgYyA9IChkKSA9PiB7XG4gICAgICBpZiAocy52YWx1ZSAmJiByLnZhbHVlICYmIHQudmFsdWUpIHtcbiAgICAgICAgY29uc3QgdSA9IHIudmFsdWUuQ29udHJvbFBvc2l0aW9uW2RdO1xuICAgICAgICBzLnZhbHVlLmNvbnRyb2xzW3VdLnB1c2godC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSwgYSA9IChkKSA9PiB7XG4gICAgICBpZiAocy52YWx1ZSAmJiByLnZhbHVlKSB7XG4gICAgICAgIGxldCB1ID0gbnVsbDtcbiAgICAgICAgY29uc3QgbCA9IHIudmFsdWUuQ29udHJvbFBvc2l0aW9uW2RdO1xuICAgICAgICBzLnZhbHVlLmNvbnRyb2xzW2xdLmZvckVhY2goKGgsIHApID0+IHtcbiAgICAgICAgICBoID09PSB0LnZhbHVlICYmICh1ID0gcCk7XG4gICAgICAgIH0pLCB1ICE9PSBudWxsICYmIHMudmFsdWUuY29udHJvbHNbbF0ucmVtb3ZlQXQodSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gcSgoKSA9PiBhKG4ucG9zaXRpb24pKSwgTChcbiAgICAgICgpID0+IG4ucG9zaXRpb24sXG4gICAgICAoZCwgdSkgPT4ge1xuICAgICAgICBhKHUpLCBjKGQpO1xuICAgICAgfVxuICAgICksIEwoXG4gICAgICAoKSA9PiBuLmluZGV4LFxuICAgICAgKGQpID0+IHtcbiAgICAgICAgZCAmJiB0LnZhbHVlICYmICh0LnZhbHVlLmluZGV4ID0gbi5pbmRleCk7XG4gICAgICB9XG4gICAgKSwgeyBjb250cm9sUmVmOiB0IH07XG4gIH1cbn0pO1xuY29uc3QgUWUgPSB7XG4gIHJlZjogXCJjb250cm9sUmVmXCIsXG4gIGNsYXNzOiBcImN1c3RvbS1jb250cm9sLXdyYXBwZXJcIlxufTtcbmZ1bmN0aW9uIGV0KG4sIGUsIHQsIHMsIHIsIG8pIHtcbiAgcmV0dXJuIEooKSwgWChcImRpdlwiLCBRZSwgW1xuICAgIFEobi4kc2xvdHMsIFwiZGVmYXVsdFwiLCB7fSwgdm9pZCAwLCAhMClcbiAgXSwgNTEyKTtcbn1cbmNvbnN0IFR0ID0gLyogQF9fUFVSRV9fICovIHRlKFhlLCBbW1wicmVuZGVyXCIsIGV0XSwgW1wiX19zY29wZUlkXCIsIFwiZGF0YS12LWQwOTlhM2E2XCJdXSksIF9lID0gW1wiY2xvc2VjbGlja1wiLCBcImNvbnRlbnRfY2hhbmdlZFwiLCBcImRvbXJlYWR5XCIsIFwicG9zaXRpb25fY2hhbmdlZFwiLCBcInZpc2libGVcIiwgXCJ6aW5kZXhfY2hhbmdlZFwiXSwgdHQgPSBQKHtcbiAgaW5oZXJpdEF0dHJzOiAhMSxcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiAoe30pXG4gICAgfSxcbiAgICBtb2RlbFZhbHVlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuXG4gICAgfVxuICB9LFxuICBlbWl0czogWy4uLl9lLCBcInVwZGF0ZTptb2RlbFZhbHVlXCJdLFxuICBzZXR1cChuLCB7IHNsb3RzOiBlLCBlbWl0OiB0LCBleHBvc2U6IHMgfSkge1xuICAgIGNvbnN0IHIgPSB5KCksIG8gPSB5KCksIGkgPSBiKEIsIHkoKSksIGMgPSBiKFosIHkoKSksIGEgPSBiKGxlLCB5KCkpO1xuICAgIGxldCBkLCB1ID0gbi5tb2RlbFZhbHVlO1xuICAgIGNvbnN0IGwgPSBIKCgpID0+IHtcbiAgICAgIHZhciBmO1xuICAgICAgcmV0dXJuIChmID0gZS5kZWZhdWx0KSA9PSBudWxsID8gdm9pZCAwIDogZi5jYWxsKGUpLnNvbWUoKGcpID0+IGcudHlwZSAhPT0gTGUpO1xuICAgIH0pLCBoID0gKGYpID0+IHtcbiAgICAgIHUgPSBmLCB0KFwidXBkYXRlOm1vZGVsVmFsdWVcIiwgZik7XG4gICAgfSwgcCA9IChmKSA9PiB7XG4gICAgICByLnZhbHVlICYmIChyLnZhbHVlLm9wZW4oeyBtYXA6IGkudmFsdWUsIGFuY2hvcjogYS52YWx1ZSwgLi4uZiB9KSwgaCghMCkpO1xuICAgIH0sIG0gPSAoKSA9PiB7XG4gICAgICByLnZhbHVlICYmIChyLnZhbHVlLmNsb3NlKCksIGgoITEpKTtcbiAgICB9O1xuICAgIHJldHVybiBQZSgoKSA9PiB7XG4gICAgICBMKFxuICAgICAgICBbaSwgKCkgPT4gbi5vcHRpb25zXSxcbiAgICAgICAgKFtmLCBnXSwgW3YsIHddKSA9PiB7XG4gICAgICAgICAgdmFyIE87XG4gICAgICAgICAgY29uc3QgXyA9ICFBKGcsIHcpIHx8IGkudmFsdWUgIT09IHY7XG4gICAgICAgICAgaS52YWx1ZSAmJiBjLnZhbHVlICYmIF8gJiYgKHIudmFsdWUgPyAoci52YWx1ZS5zZXRPcHRpb25zKHtcbiAgICAgICAgICAgIC4uLmcsXG4gICAgICAgICAgICBjb250ZW50OiBsLnZhbHVlID8gby52YWx1ZSA6IGcuY29udGVudFxuICAgICAgICAgIH0pLCBhLnZhbHVlIHx8IHAoKSkgOiAoci52YWx1ZSA9IHgoXG4gICAgICAgICAgICBuZXcgYy52YWx1ZS5JbmZvV2luZG93KHtcbiAgICAgICAgICAgICAgLi4uZyxcbiAgICAgICAgICAgICAgY29udGVudDogbC52YWx1ZSA/IG8udmFsdWUgOiBnLmNvbnRlbnRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSwgYS52YWx1ZSAmJiAoZCA9IGEudmFsdWUuYWRkTGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBwKCk7XG4gICAgICAgICAgfSkpLCAoIWEudmFsdWUgfHwgdSkgJiYgcCgpLCBfZS5mb3JFYWNoKChNKSA9PiB7XG4gICAgICAgICAgICB2YXIgRTtcbiAgICAgICAgICAgIChFID0gci52YWx1ZSkgPT0gbnVsbCB8fCBFLmFkZExpc3RlbmVyKE0sIChrKSA9PiB0KE0sIGspKTtcbiAgICAgICAgICB9KSwgKE8gPSByLnZhbHVlKSA9PSBudWxsIHx8IE8uYWRkTGlzdGVuZXIoXCJjbG9zZWNsaWNrXCIsICgpID0+IGgoITEpKSkpO1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW1tZWRpYXRlOiAhMFxuICAgICAgICB9XG4gICAgICApLCBMKFxuICAgICAgICAoKSA9PiBuLm1vZGVsVmFsdWUsXG4gICAgICAgIChmKSA9PiB7XG4gICAgICAgICAgZiAhPT0gdSAmJiAoZiA/IHAoKSA6IG0oKSk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSksIHEoKCkgPT4ge1xuICAgICAgdmFyIGY7XG4gICAgICBkICYmIGQucmVtb3ZlKCksIHIudmFsdWUgJiYgKChmID0gYy52YWx1ZSkgPT0gbnVsbCB8fCBmLmV2ZW50LmNsZWFySW5zdGFuY2VMaXN0ZW5lcnMoci52YWx1ZSksIG0oKSk7XG4gICAgfSksIHMoeyBpbmZvV2luZG93OiByLCBvcGVuOiBwLCBjbG9zZTogbSB9KSwgeyBpbmZvV2luZG93OiByLCBpbmZvV2luZG93UmVmOiBvLCBoYXNTbG90Q29udGVudDogbCwgb3BlbjogcCwgY2xvc2U6IG0gfTtcbiAgfVxufSk7XG5jb25zdCBzdCA9IHtcbiAga2V5OiAwLFxuICBjbGFzczogXCJpbmZvLXdpbmRvdy13cmFwcGVyXCJcbn07XG5mdW5jdGlvbiBydChuLCBlLCB0LCBzLCByLCBvKSB7XG4gIHJldHVybiBuLmhhc1Nsb3RDb250ZW50ID8gKEooKSwgWChcImRpdlwiLCBzdCwgW1xuICAgIGFlKFwiZGl2XCIsIFNlKHsgcmVmOiBcImluZm9XaW5kb3dSZWZcIiB9LCBuLiRhdHRycyksIFtcbiAgICAgIFEobi4kc2xvdHMsIFwiZGVmYXVsdFwiLCB7fSwgdm9pZCAwLCAhMClcbiAgICBdLCAxNilcbiAgXSkpIDogeGUoXCJcIiwgITApO1xufVxuY29uc3QgJHQgPSAvKiBAX19QVVJFX18gKi8gdGUodHQsIFtbXCJyZW5kZXJcIiwgcnRdLCBbXCJfX3Njb3BlSWRcIiwgXCJkYXRhLXYtY2JlMTcwN2JcIl1dKSwga2UgPSBbXG4gIEludDhBcnJheSxcbiAgVWludDhBcnJheSxcbiAgVWludDhDbGFtcGVkQXJyYXksXG4gIEludDE2QXJyYXksXG4gIFVpbnQxNkFycmF5LFxuICBJbnQzMkFycmF5LFxuICBVaW50MzJBcnJheSxcbiAgRmxvYXQzMkFycmF5LFxuICBGbG9hdDY0QXJyYXlcbl0sIHJlID0gMSwgeiA9IDg7XG5jbGFzcyB1ZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluZGV4IGZyb20gcmF3IGBBcnJheUJ1ZmZlcmAgZGF0YS5cbiAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gZGF0YVxuICAgKi9cbiAgc3RhdGljIGZyb20oZSkge1xuICAgIGlmICghKGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEYXRhIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgQXJyYXlCdWZmZXIuXCIpO1xuICAgIGNvbnN0IFt0LCBzXSA9IG5ldyBVaW50OEFycmF5KGUsIDAsIDIpO1xuICAgIGlmICh0ICE9PSAyMTkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEYXRhIGRvZXMgbm90IGFwcGVhciB0byBiZSBpbiBhIEtEQnVzaCBmb3JtYXQuXCIpO1xuICAgIGNvbnN0IHIgPSBzID4+IDQ7XG4gICAgaWYgKHIgIT09IHJlKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBHb3QgdiR7cn0gZGF0YSB3aGVuIGV4cGVjdGVkIHYke3JlfS5gKTtcbiAgICBjb25zdCBvID0ga2VbcyAmIDE1XTtcbiAgICBpZiAoIW8pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgYXJyYXkgdHlwZS5cIik7XG4gICAgY29uc3QgW2ldID0gbmV3IFVpbnQxNkFycmF5KGUsIDIsIDEpLCBbY10gPSBuZXcgVWludDMyQXJyYXkoZSwgNCwgMSk7XG4gICAgcmV0dXJuIG5ldyB1ZShjLCBpLCBvLCBlKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpbmRleCB0aGF0IHdpbGwgaG9sZCBhIGdpdmVuIG51bWJlciBvZiBpdGVtcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bUl0ZW1zXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbm9kZVNpemU9NjRdIFNpemUgb2YgdGhlIEtELXRyZWUgbm9kZSAoNjQgYnkgZGVmYXVsdCkuXG4gICAqIEBwYXJhbSB7VHlwZWRBcnJheUNvbnN0cnVjdG9yfSBbQXJyYXlUeXBlPUZsb2F0NjRBcnJheV0gVGhlIGFycmF5IHR5cGUgdXNlZCBmb3IgY29vcmRpbmF0ZXMgc3RvcmFnZSAoYEZsb2F0NjRBcnJheWAgYnkgZGVmYXVsdCkuXG4gICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IFtkYXRhXSAoRm9yIGludGVybmFsIHVzZSBvbmx5KVxuICAgKi9cbiAgY29uc3RydWN0b3IoZSwgdCA9IDY0LCBzID0gRmxvYXQ2NEFycmF5LCByKSB7XG4gICAgaWYgKGlzTmFOKGUpIHx8IGUgPCAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnBleHBlY3RlZCBudW1JdGVtcyB2YWx1ZTogJHtlfS5gKTtcbiAgICB0aGlzLm51bUl0ZW1zID0gK2UsIHRoaXMubm9kZVNpemUgPSBNYXRoLm1pbihNYXRoLm1heCgrdCwgMiksIDY1NTM1KSwgdGhpcy5BcnJheVR5cGUgPSBzLCB0aGlzLkluZGV4QXJyYXlUeXBlID0gZSA8IDY1NTM2ID8gVWludDE2QXJyYXkgOiBVaW50MzJBcnJheTtcbiAgICBjb25zdCBvID0ga2UuaW5kZXhPZih0aGlzLkFycmF5VHlwZSksIGkgPSBlICogMiAqIHRoaXMuQXJyYXlUeXBlLkJZVEVTX1BFUl9FTEVNRU5ULCBjID0gZSAqIHRoaXMuSW5kZXhBcnJheVR5cGUuQllURVNfUEVSX0VMRU1FTlQsIGEgPSAoOCAtIGMgJSA4KSAlIDg7XG4gICAgaWYgKG8gPCAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHR5cGVkIGFycmF5IGNsYXNzOiAke3N9LmApO1xuICAgIHIgJiYgciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gKHRoaXMuZGF0YSA9IHIsIHRoaXMuaWRzID0gbmV3IHRoaXMuSW5kZXhBcnJheVR5cGUodGhpcy5kYXRhLCB6LCBlKSwgdGhpcy5jb29yZHMgPSBuZXcgdGhpcy5BcnJheVR5cGUodGhpcy5kYXRhLCB6ICsgYyArIGEsIGUgKiAyKSwgdGhpcy5fcG9zID0gZSAqIDIsIHRoaXMuX2ZpbmlzaGVkID0gITApIDogKHRoaXMuZGF0YSA9IG5ldyBBcnJheUJ1ZmZlcih6ICsgaSArIGMgKyBhKSwgdGhpcy5pZHMgPSBuZXcgdGhpcy5JbmRleEFycmF5VHlwZSh0aGlzLmRhdGEsIHosIGUpLCB0aGlzLmNvb3JkcyA9IG5ldyB0aGlzLkFycmF5VHlwZSh0aGlzLmRhdGEsIHogKyBjICsgYSwgZSAqIDIpLCB0aGlzLl9wb3MgPSAwLCB0aGlzLl9maW5pc2hlZCA9ICExLCBuZXcgVWludDhBcnJheSh0aGlzLmRhdGEsIDAsIDIpLnNldChbMjE5LCAocmUgPDwgNCkgKyBvXSksIG5ldyBVaW50MTZBcnJheSh0aGlzLmRhdGEsIDIsIDEpWzBdID0gdCwgbmV3IFVpbnQzMkFycmF5KHRoaXMuZGF0YSwgNCwgMSlbMF0gPSBlKTtcbiAgfVxuICAvKipcbiAgICogQWRkIGEgcG9pbnQgdG8gdGhlIGluZGV4LlxuICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBBbiBpbmNyZW1lbnRhbCBpbmRleCBhc3NvY2lhdGVkIHdpdGggdGhlIGFkZGVkIGl0ZW0gKHN0YXJ0aW5nIGZyb20gYDBgKS5cbiAgICovXG4gIGFkZChlLCB0KSB7XG4gICAgY29uc3QgcyA9IHRoaXMuX3BvcyA+PiAxO1xuICAgIHJldHVybiB0aGlzLmlkc1tzXSA9IHMsIHRoaXMuY29vcmRzW3RoaXMuX3BvcysrXSA9IGUsIHRoaXMuY29vcmRzW3RoaXMuX3BvcysrXSA9IHQsIHM7XG4gIH1cbiAgLyoqXG4gICAqIFBlcmZvcm0gaW5kZXhpbmcgb2YgdGhlIGFkZGVkIHBvaW50cy5cbiAgICovXG4gIGZpbmlzaCgpIHtcbiAgICBjb25zdCBlID0gdGhpcy5fcG9zID4+IDE7XG4gICAgaWYgKGUgIT09IHRoaXMubnVtSXRlbXMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFkZGVkICR7ZX0gaXRlbXMgd2hlbiBleHBlY3RlZCAke3RoaXMubnVtSXRlbXN9LmApO1xuICAgIHJldHVybiBpZSh0aGlzLmlkcywgdGhpcy5jb29yZHMsIHRoaXMubm9kZVNpemUsIDAsIHRoaXMubnVtSXRlbXMgLSAxLCAwKSwgdGhpcy5fZmluaXNoZWQgPSAhMCwgdGhpcztcbiAgfVxuICAvKipcbiAgICogU2VhcmNoIHRoZSBpbmRleCBmb3IgaXRlbXMgd2l0aGluIGEgZ2l2ZW4gYm91bmRpbmcgYm94LlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWluWFxuICAgKiBAcGFyYW0ge251bWJlcn0gbWluWVxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4WFxuICAgKiBAcGFyYW0ge251bWJlcn0gbWF4WVxuICAgKiBAcmV0dXJucyB7bnVtYmVyW119IEFuIGFycmF5IG9mIGluZGljZXMgY29ycmVwb25kaW5nIHRvIHRoZSBmb3VuZCBpdGVtcy5cbiAgICovXG4gIHJhbmdlKGUsIHQsIHMsIHIpIHtcbiAgICBpZiAoIXRoaXMuX2ZpbmlzaGVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0YSBub3QgeWV0IGluZGV4ZWQgLSBjYWxsIGluZGV4LmZpbmlzaCgpLlwiKTtcbiAgICBjb25zdCB7IGlkczogbywgY29vcmRzOiBpLCBub2RlU2l6ZTogYyB9ID0gdGhpcywgYSA9IFswLCBvLmxlbmd0aCAtIDEsIDBdLCBkID0gW107XG4gICAgZm9yICg7IGEubGVuZ3RoOyApIHtcbiAgICAgIGNvbnN0IHUgPSBhLnBvcCgpIHx8IDAsIGwgPSBhLnBvcCgpIHx8IDAsIGggPSBhLnBvcCgpIHx8IDA7XG4gICAgICBpZiAobCAtIGggPD0gYykge1xuICAgICAgICBmb3IgKGxldCBnID0gaDsgZyA8PSBsOyBnKyspIHtcbiAgICAgICAgICBjb25zdCB2ID0gaVsyICogZ10sIHcgPSBpWzIgKiBnICsgMV07XG4gICAgICAgICAgdiA+PSBlICYmIHYgPD0gcyAmJiB3ID49IHQgJiYgdyA8PSByICYmIGQucHVzaChvW2ddKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHAgPSBoICsgbCA+PiAxLCBtID0gaVsyICogcF0sIGYgPSBpWzIgKiBwICsgMV07XG4gICAgICBtID49IGUgJiYgbSA8PSBzICYmIGYgPj0gdCAmJiBmIDw9IHIgJiYgZC5wdXNoKG9bcF0pLCAodSA9PT0gMCA/IGUgPD0gbSA6IHQgPD0gZikgJiYgKGEucHVzaChoKSwgYS5wdXNoKHAgLSAxKSwgYS5wdXNoKDEgLSB1KSksICh1ID09PSAwID8gcyA+PSBtIDogciA+PSBmKSAmJiAoYS5wdXNoKHAgKyAxKSwgYS5wdXNoKGwpLCBhLnB1c2goMSAtIHUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGQ7XG4gIH1cbiAgLyoqXG4gICAqIFNlYXJjaCB0aGUgaW5kZXggZm9yIGl0ZW1zIHdpdGhpbiBhIGdpdmVuIHJhZGl1cy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHF4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBxeVxuICAgKiBAcGFyYW0ge251bWJlcn0gciBRdWVyeSByYWRpdXMuXG4gICAqIEByZXR1cm5zIHtudW1iZXJbXX0gQW4gYXJyYXkgb2YgaW5kaWNlcyBjb3JyZXBvbmRpbmcgdG8gdGhlIGZvdW5kIGl0ZW1zLlxuICAgKi9cbiAgd2l0aGluKGUsIHQsIHMpIHtcbiAgICBpZiAoIXRoaXMuX2ZpbmlzaGVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0YSBub3QgeWV0IGluZGV4ZWQgLSBjYWxsIGluZGV4LmZpbmlzaCgpLlwiKTtcbiAgICBjb25zdCB7IGlkczogciwgY29vcmRzOiBvLCBub2RlU2l6ZTogaSB9ID0gdGhpcywgYyA9IFswLCByLmxlbmd0aCAtIDEsIDBdLCBhID0gW10sIGQgPSBzICogcztcbiAgICBmb3IgKDsgYy5sZW5ndGg7ICkge1xuICAgICAgY29uc3QgdSA9IGMucG9wKCkgfHwgMCwgbCA9IGMucG9wKCkgfHwgMCwgaCA9IGMucG9wKCkgfHwgMDtcbiAgICAgIGlmIChsIC0gaCA8PSBpKSB7XG4gICAgICAgIGZvciAobGV0IGcgPSBoOyBnIDw9IGw7IGcrKylcbiAgICAgICAgICBDZShvWzIgKiBnXSwgb1syICogZyArIDFdLCBlLCB0KSA8PSBkICYmIGEucHVzaChyW2ddKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBwID0gaCArIGwgPj4gMSwgbSA9IG9bMiAqIHBdLCBmID0gb1syICogcCArIDFdO1xuICAgICAgQ2UobSwgZiwgZSwgdCkgPD0gZCAmJiBhLnB1c2gocltwXSksICh1ID09PSAwID8gZSAtIHMgPD0gbSA6IHQgLSBzIDw9IGYpICYmIChjLnB1c2goaCksIGMucHVzaChwIC0gMSksIGMucHVzaCgxIC0gdSkpLCAodSA9PT0gMCA/IGUgKyBzID49IG0gOiB0ICsgcyA+PSBmKSAmJiAoYy5wdXNoKHAgKyAxKSwgYy5wdXNoKGwpLCBjLnB1c2goMSAtIHUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH1cbn1cbmZ1bmN0aW9uIGllKG4sIGUsIHQsIHMsIHIsIG8pIHtcbiAgaWYgKHIgLSBzIDw9IHQpXG4gICAgcmV0dXJuO1xuICBjb25zdCBpID0gcyArIHIgPj4gMTtcbiAgSWUobiwgZSwgaSwgcywgciwgbyksIGllKG4sIGUsIHQsIHMsIGkgLSAxLCAxIC0gbyksIGllKG4sIGUsIHQsIGkgKyAxLCByLCAxIC0gbyk7XG59XG5mdW5jdGlvbiBJZShuLCBlLCB0LCBzLCByLCBvKSB7XG4gIGZvciAoOyByID4gczsgKSB7XG4gICAgaWYgKHIgLSBzID4gNjAwKSB7XG4gICAgICBjb25zdCBkID0gciAtIHMgKyAxLCB1ID0gdCAtIHMgKyAxLCBsID0gTWF0aC5sb2coZCksIGggPSAwLjUgKiBNYXRoLmV4cCgyICogbCAvIDMpLCBwID0gMC41ICogTWF0aC5zcXJ0KGwgKiBoICogKGQgLSBoKSAvIGQpICogKHUgLSBkIC8gMiA8IDAgPyAtMSA6IDEpLCBtID0gTWF0aC5tYXgocywgTWF0aC5mbG9vcih0IC0gdSAqIGggLyBkICsgcCkpLCBmID0gTWF0aC5taW4ociwgTWF0aC5mbG9vcih0ICsgKGQgLSB1KSAqIGggLyBkICsgcCkpO1xuICAgICAgSWUobiwgZSwgdCwgbSwgZiwgbyk7XG4gICAgfVxuICAgIGNvbnN0IGkgPSBlWzIgKiB0ICsgb107XG4gICAgbGV0IGMgPSBzLCBhID0gcjtcbiAgICBmb3IgKEcobiwgZSwgcywgdCksIGVbMiAqIHIgKyBvXSA+IGkgJiYgRyhuLCBlLCBzLCByKTsgYyA8IGE7ICkge1xuICAgICAgZm9yIChHKG4sIGUsIGMsIGEpLCBjKyssIGEtLTsgZVsyICogYyArIG9dIDwgaTsgKVxuICAgICAgICBjKys7XG4gICAgICBmb3IgKDsgZVsyICogYSArIG9dID4gaTsgKVxuICAgICAgICBhLS07XG4gICAgfVxuICAgIGVbMiAqIHMgKyBvXSA9PT0gaSA/IEcobiwgZSwgcywgYSkgOiAoYSsrLCBHKG4sIGUsIGEsIHIpKSwgYSA8PSB0ICYmIChzID0gYSArIDEpLCB0IDw9IGEgJiYgKHIgPSBhIC0gMSk7XG4gIH1cbn1cbmZ1bmN0aW9uIEcobiwgZSwgdCwgcykge1xuICBuZShuLCB0LCBzKSwgbmUoZSwgMiAqIHQsIDIgKiBzKSwgbmUoZSwgMiAqIHQgKyAxLCAyICogcyArIDEpO1xufVxuZnVuY3Rpb24gbmUobiwgZSwgdCkge1xuICBjb25zdCBzID0gbltlXTtcbiAgbltlXSA9IG5bdF0sIG5bdF0gPSBzO1xufVxuZnVuY3Rpb24gQ2UobiwgZSwgdCwgcykge1xuICBjb25zdCByID0gbiAtIHQsIG8gPSBlIC0gcztcbiAgcmV0dXJuIHIgKiByICsgbyAqIG87XG59XG5jb25zdCBudCA9IHtcbiAgbWluWm9vbTogMCxcbiAgLy8gbWluIHpvb20gdG8gZ2VuZXJhdGUgY2x1c3RlcnMgb25cbiAgbWF4Wm9vbTogMTYsXG4gIC8vIG1heCB6b29tIGxldmVsIHRvIGNsdXN0ZXIgdGhlIHBvaW50cyBvblxuICBtaW5Qb2ludHM6IDIsXG4gIC8vIG1pbmltdW0gcG9pbnRzIHRvIGZvcm0gYSBjbHVzdGVyXG4gIHJhZGl1czogNDAsXG4gIC8vIGNsdXN0ZXIgcmFkaXVzIGluIHBpeGVsc1xuICBleHRlbnQ6IDUxMixcbiAgLy8gdGlsZSBleHRlbnQgKHJhZGl1cyBpcyBjYWxjdWxhdGVkIHJlbGF0aXZlIHRvIGl0KVxuICBub2RlU2l6ZTogNjQsXG4gIC8vIHNpemUgb2YgdGhlIEtELXRyZWUgbGVhZiBub2RlLCBhZmZlY3RzIHBlcmZvcm1hbmNlXG4gIGxvZzogITEsXG4gIC8vIHdoZXRoZXIgdG8gbG9nIHRpbWluZyBpbmZvXG4gIC8vIHdoZXRoZXIgdG8gZ2VuZXJhdGUgbnVtZXJpYyBpZHMgZm9yIGlucHV0IGZlYXR1cmVzIChpbiB2ZWN0b3IgdGlsZXMpXG4gIGdlbmVyYXRlSWQ6ICExLFxuICAvLyBhIHJlZHVjZSBmdW5jdGlvbiBmb3IgY2FsY3VsYXRpbmcgY3VzdG9tIGNsdXN0ZXIgcHJvcGVydGllc1xuICByZWR1Y2U6IG51bGwsXG4gIC8vIChhY2N1bXVsYXRlZCwgcHJvcHMpID0+IHsgYWNjdW11bGF0ZWQuc3VtICs9IHByb3BzLnN1bTsgfVxuICAvLyBwcm9wZXJ0aWVzIHRvIHVzZSBmb3IgaW5kaXZpZHVhbCBwb2ludHMgd2hlbiBydW5uaW5nIHRoZSByZWR1Y2VyXG4gIG1hcDogKG4pID0+IG5cbiAgLy8gcHJvcHMgPT4gKHtzdW06IHByb3BzLm15X3ZhbHVlfSlcbn0sIGJlID0gTWF0aC5mcm91bmQgfHwgKChuKSA9PiAoZSkgPT4gKG5bMF0gPSArZSwgblswXSkpKG5ldyBGbG9hdDMyQXJyYXkoMSkpLCBSID0gMiwgVCA9IDMsIG9lID0gNCwgSSA9IDUsIFRlID0gNjtcbmNsYXNzICRlIHtcbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudCksIGUpLCB0aGlzLnRyZWVzID0gbmV3IEFycmF5KHRoaXMub3B0aW9ucy5tYXhab29tICsgMSksIHRoaXMuc3RyaWRlID0gdGhpcy5vcHRpb25zLnJlZHVjZSA/IDcgOiA2LCB0aGlzLmNsdXN0ZXJQcm9wcyA9IFtdO1xuICB9XG4gIGxvYWQoZSkge1xuICAgIGNvbnN0IHsgbG9nOiB0LCBtaW5ab29tOiBzLCBtYXhab29tOiByIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgdCAmJiBjb25zb2xlLnRpbWUoXCJ0b3RhbCB0aW1lXCIpO1xuICAgIGNvbnN0IG8gPSBgcHJlcGFyZSAke2UubGVuZ3RofSBwb2ludHNgO1xuICAgIHQgJiYgY29uc29sZS50aW1lKG8pLCB0aGlzLnBvaW50cyA9IGU7XG4gICAgY29uc3QgaSA9IFtdO1xuICAgIGZvciAobGV0IGEgPSAwOyBhIDwgZS5sZW5ndGg7IGErKykge1xuICAgICAgY29uc3QgZCA9IGVbYV07XG4gICAgICBpZiAoIWQuZ2VvbWV0cnkpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgY29uc3QgW3UsIGxdID0gZC5nZW9tZXRyeS5jb29yZGluYXRlcywgaCA9IGJlKEsodSkpLCBwID0gYmUoWShsKSk7XG4gICAgICBpLnB1c2goXG4gICAgICAgIGgsXG4gICAgICAgIHAsXG4gICAgICAgIC8vIHByb2plY3RlZCBwb2ludCBjb29yZGluYXRlc1xuICAgICAgICAxIC8gMCxcbiAgICAgICAgLy8gdGhlIGxhc3Qgem9vbSB0aGUgcG9pbnQgd2FzIHByb2Nlc3NlZCBhdFxuICAgICAgICBhLFxuICAgICAgICAvLyBpbmRleCBvZiB0aGUgc291cmNlIGZlYXR1cmUgaW4gdGhlIG9yaWdpbmFsIGlucHV0IGFycmF5XG4gICAgICAgIC0xLFxuICAgICAgICAvLyBwYXJlbnQgY2x1c3RlciBpZFxuICAgICAgICAxXG4gICAgICAgIC8vIG51bWJlciBvZiBwb2ludHMgaW4gYSBjbHVzdGVyXG4gICAgICApLCB0aGlzLm9wdGlvbnMucmVkdWNlICYmIGkucHVzaCgwKTtcbiAgICB9XG4gICAgbGV0IGMgPSB0aGlzLnRyZWVzW3IgKyAxXSA9IHRoaXMuX2NyZWF0ZVRyZWUoaSk7XG4gICAgdCAmJiBjb25zb2xlLnRpbWVFbmQobyk7XG4gICAgZm9yIChsZXQgYSA9IHI7IGEgPj0gczsgYS0tKSB7XG4gICAgICBjb25zdCBkID0gK0RhdGUubm93KCk7XG4gICAgICBjID0gdGhpcy50cmVlc1thXSA9IHRoaXMuX2NyZWF0ZVRyZWUodGhpcy5fY2x1c3RlcihjLCBhKSksIHQgJiYgY29uc29sZS5sb2coXCJ6JWQ6ICVkIGNsdXN0ZXJzIGluICVkbXNcIiwgYSwgYy5udW1JdGVtcywgK0RhdGUubm93KCkgLSBkKTtcbiAgICB9XG4gICAgcmV0dXJuIHQgJiYgY29uc29sZS50aW1lRW5kKFwidG90YWwgdGltZVwiKSwgdGhpcztcbiAgfVxuICBnZXRDbHVzdGVycyhlLCB0KSB7XG4gICAgbGV0IHMgPSAoKGVbMF0gKyAxODApICUgMzYwICsgMzYwKSAlIDM2MCAtIDE4MDtcbiAgICBjb25zdCByID0gTWF0aC5tYXgoLTkwLCBNYXRoLm1pbig5MCwgZVsxXSkpO1xuICAgIGxldCBvID0gZVsyXSA9PT0gMTgwID8gMTgwIDogKChlWzJdICsgMTgwKSAlIDM2MCArIDM2MCkgJSAzNjAgLSAxODA7XG4gICAgY29uc3QgaSA9IE1hdGgubWF4KC05MCwgTWF0aC5taW4oOTAsIGVbM10pKTtcbiAgICBpZiAoZVsyXSAtIGVbMF0gPj0gMzYwKVxuICAgICAgcyA9IC0xODAsIG8gPSAxODA7XG4gICAgZWxzZSBpZiAocyA+IG8pIHtcbiAgICAgIGNvbnN0IGwgPSB0aGlzLmdldENsdXN0ZXJzKFtzLCByLCAxODAsIGldLCB0KSwgaCA9IHRoaXMuZ2V0Q2x1c3RlcnMoWy0xODAsIHIsIG8sIGldLCB0KTtcbiAgICAgIHJldHVybiBsLmNvbmNhdChoKTtcbiAgICB9XG4gICAgY29uc3QgYyA9IHRoaXMudHJlZXNbdGhpcy5fbGltaXRab29tKHQpXSwgYSA9IGMucmFuZ2UoSyhzKSwgWShpKSwgSyhvKSwgWShyKSksIGQgPSBjLmRhdGEsIHUgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGwgb2YgYSkge1xuICAgICAgY29uc3QgaCA9IHRoaXMuc3RyaWRlICogbDtcbiAgICAgIHUucHVzaChkW2ggKyBJXSA+IDEgPyBNZShkLCBoLCB0aGlzLmNsdXN0ZXJQcm9wcykgOiB0aGlzLnBvaW50c1tkW2ggKyBUXV0pO1xuICAgIH1cbiAgICByZXR1cm4gdTtcbiAgfVxuICBnZXRDaGlsZHJlbihlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuX2dldE9yaWdpbklkKGUpLCBzID0gdGhpcy5fZ2V0T3JpZ2luWm9vbShlKSwgciA9IFwiTm8gY2x1c3RlciB3aXRoIHRoZSBzcGVjaWZpZWQgaWQuXCIsIG8gPSB0aGlzLnRyZWVzW3NdO1xuICAgIGlmICghbylcbiAgICAgIHRocm93IG5ldyBFcnJvcihyKTtcbiAgICBjb25zdCBpID0gby5kYXRhO1xuICAgIGlmICh0ICogdGhpcy5zdHJpZGUgPj0gaS5sZW5ndGgpXG4gICAgICB0aHJvdyBuZXcgRXJyb3Iocik7XG4gICAgY29uc3QgYyA9IHRoaXMub3B0aW9ucy5yYWRpdXMgLyAodGhpcy5vcHRpb25zLmV4dGVudCAqIE1hdGgucG93KDIsIHMgLSAxKSksIGEgPSBpW3QgKiB0aGlzLnN0cmlkZV0sIGQgPSBpW3QgKiB0aGlzLnN0cmlkZSArIDFdLCB1ID0gby53aXRoaW4oYSwgZCwgYyksIGwgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGggb2YgdSkge1xuICAgICAgY29uc3QgcCA9IGggKiB0aGlzLnN0cmlkZTtcbiAgICAgIGlbcCArIG9lXSA9PT0gZSAmJiBsLnB1c2goaVtwICsgSV0gPiAxID8gTWUoaSwgcCwgdGhpcy5jbHVzdGVyUHJvcHMpIDogdGhpcy5wb2ludHNbaVtwICsgVF1dKTtcbiAgICB9XG4gICAgaWYgKGwubGVuZ3RoID09PSAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKHIpO1xuICAgIHJldHVybiBsO1xuICB9XG4gIGdldExlYXZlcyhlLCB0LCBzKSB7XG4gICAgdCA9IHQgfHwgMTAsIHMgPSBzIHx8IDA7XG4gICAgY29uc3QgciA9IFtdO1xuICAgIHJldHVybiB0aGlzLl9hcHBlbmRMZWF2ZXMociwgZSwgdCwgcywgMCksIHI7XG4gIH1cbiAgZ2V0VGlsZShlLCB0LCBzKSB7XG4gICAgY29uc3QgciA9IHRoaXMudHJlZXNbdGhpcy5fbGltaXRab29tKGUpXSwgbyA9IE1hdGgucG93KDIsIGUpLCB7IGV4dGVudDogaSwgcmFkaXVzOiBjIH0gPSB0aGlzLm9wdGlvbnMsIGEgPSBjIC8gaSwgZCA9IChzIC0gYSkgLyBvLCB1ID0gKHMgKyAxICsgYSkgLyBvLCBsID0ge1xuICAgICAgZmVhdHVyZXM6IFtdXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5fYWRkVGlsZUZlYXR1cmVzKFxuICAgICAgci5yYW5nZSgodCAtIGEpIC8gbywgZCwgKHQgKyAxICsgYSkgLyBvLCB1KSxcbiAgICAgIHIuZGF0YSxcbiAgICAgIHQsXG4gICAgICBzLFxuICAgICAgbyxcbiAgICAgIGxcbiAgICApLCB0ID09PSAwICYmIHRoaXMuX2FkZFRpbGVGZWF0dXJlcyhcbiAgICAgIHIucmFuZ2UoMSAtIGEgLyBvLCBkLCAxLCB1KSxcbiAgICAgIHIuZGF0YSxcbiAgICAgIG8sXG4gICAgICBzLFxuICAgICAgbyxcbiAgICAgIGxcbiAgICApLCB0ID09PSBvIC0gMSAmJiB0aGlzLl9hZGRUaWxlRmVhdHVyZXMoXG4gICAgICByLnJhbmdlKDAsIGQsIGEgLyBvLCB1KSxcbiAgICAgIHIuZGF0YSxcbiAgICAgIC0xLFxuICAgICAgcyxcbiAgICAgIG8sXG4gICAgICBsXG4gICAgKSwgbC5mZWF0dXJlcy5sZW5ndGggPyBsIDogbnVsbDtcbiAgfVxuICBnZXRDbHVzdGVyRXhwYW5zaW9uWm9vbShlKSB7XG4gICAgbGV0IHQgPSB0aGlzLl9nZXRPcmlnaW5ab29tKGUpIC0gMTtcbiAgICBmb3IgKDsgdCA8PSB0aGlzLm9wdGlvbnMubWF4Wm9vbTsgKSB7XG4gICAgICBjb25zdCBzID0gdGhpcy5nZXRDaGlsZHJlbihlKTtcbiAgICAgIGlmICh0KyssIHMubGVuZ3RoICE9PSAxKVxuICAgICAgICBicmVhaztcbiAgICAgIGUgPSBzWzBdLnByb3BlcnRpZXMuY2x1c3Rlcl9pZDtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgX2FwcGVuZExlYXZlcyhlLCB0LCBzLCByLCBvKSB7XG4gICAgY29uc3QgaSA9IHRoaXMuZ2V0Q2hpbGRyZW4odCk7XG4gICAgZm9yIChjb25zdCBjIG9mIGkpIHtcbiAgICAgIGNvbnN0IGEgPSBjLnByb3BlcnRpZXM7XG4gICAgICBpZiAoYSAmJiBhLmNsdXN0ZXIgPyBvICsgYS5wb2ludF9jb3VudCA8PSByID8gbyArPSBhLnBvaW50X2NvdW50IDogbyA9IHRoaXMuX2FwcGVuZExlYXZlcyhlLCBhLmNsdXN0ZXJfaWQsIHMsIHIsIG8pIDogbyA8IHIgPyBvKysgOiBlLnB1c2goYyksIGUubGVuZ3RoID09PSBzKVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIG87XG4gIH1cbiAgX2NyZWF0ZVRyZWUoZSkge1xuICAgIGNvbnN0IHQgPSBuZXcgdWUoZS5sZW5ndGggLyB0aGlzLnN0cmlkZSB8IDAsIHRoaXMub3B0aW9ucy5ub2RlU2l6ZSwgRmxvYXQzMkFycmF5KTtcbiAgICBmb3IgKGxldCBzID0gMDsgcyA8IGUubGVuZ3RoOyBzICs9IHRoaXMuc3RyaWRlKVxuICAgICAgdC5hZGQoZVtzXSwgZVtzICsgMV0pO1xuICAgIHJldHVybiB0LmZpbmlzaCgpLCB0LmRhdGEgPSBlLCB0O1xuICB9XG4gIF9hZGRUaWxlRmVhdHVyZXMoZSwgdCwgcywgciwgbywgaSkge1xuICAgIGZvciAoY29uc3QgYyBvZiBlKSB7XG4gICAgICBjb25zdCBhID0gYyAqIHRoaXMuc3RyaWRlLCBkID0gdFthICsgSV0gPiAxO1xuICAgICAgbGV0IHUsIGwsIGg7XG4gICAgICBpZiAoZClcbiAgICAgICAgdSA9IFJlKHQsIGEsIHRoaXMuY2x1c3RlclByb3BzKSwgbCA9IHRbYV0sIGggPSB0W2EgKyAxXTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBmID0gdGhpcy5wb2ludHNbdFthICsgVF1dO1xuICAgICAgICB1ID0gZi5wcm9wZXJ0aWVzO1xuICAgICAgICBjb25zdCBbZywgdl0gPSBmLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgICAgICBsID0gSyhnKSwgaCA9IFkodik7XG4gICAgICB9XG4gICAgICBjb25zdCBwID0ge1xuICAgICAgICB0eXBlOiAxLFxuICAgICAgICBnZW9tZXRyeTogW1tcbiAgICAgICAgICBNYXRoLnJvdW5kKHRoaXMub3B0aW9ucy5leHRlbnQgKiAobCAqIG8gLSBzKSksXG4gICAgICAgICAgTWF0aC5yb3VuZCh0aGlzLm9wdGlvbnMuZXh0ZW50ICogKGggKiBvIC0gcikpXG4gICAgICAgIF1dLFxuICAgICAgICB0YWdzOiB1XG4gICAgICB9O1xuICAgICAgbGV0IG07XG4gICAgICBkIHx8IHRoaXMub3B0aW9ucy5nZW5lcmF0ZUlkID8gbSA9IHRbYSArIFRdIDogbSA9IHRoaXMucG9pbnRzW3RbYSArIFRdXS5pZCwgbSAhPT0gdm9pZCAwICYmIChwLmlkID0gbSksIGkuZmVhdHVyZXMucHVzaChwKTtcbiAgICB9XG4gIH1cbiAgX2xpbWl0Wm9vbShlKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KHRoaXMub3B0aW9ucy5taW5ab29tLCBNYXRoLm1pbihNYXRoLmZsb29yKCtlKSwgdGhpcy5vcHRpb25zLm1heFpvb20gKyAxKSk7XG4gIH1cbiAgX2NsdXN0ZXIoZSwgdCkge1xuICAgIGNvbnN0IHsgcmFkaXVzOiBzLCBleHRlbnQ6IHIsIHJlZHVjZTogbywgbWluUG9pbnRzOiBpIH0gPSB0aGlzLm9wdGlvbnMsIGMgPSBzIC8gKHIgKiBNYXRoLnBvdygyLCB0KSksIGEgPSBlLmRhdGEsIGQgPSBbXSwgdSA9IHRoaXMuc3RyaWRlO1xuICAgIGZvciAobGV0IGwgPSAwOyBsIDwgYS5sZW5ndGg7IGwgKz0gdSkge1xuICAgICAgaWYgKGFbbCArIFJdIDw9IHQpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgYVtsICsgUl0gPSB0O1xuICAgICAgY29uc3QgaCA9IGFbbF0sIHAgPSBhW2wgKyAxXSwgbSA9IGUud2l0aGluKGFbbF0sIGFbbCArIDFdLCBjKSwgZiA9IGFbbCArIEldO1xuICAgICAgbGV0IGcgPSBmO1xuICAgICAgZm9yIChjb25zdCB2IG9mIG0pIHtcbiAgICAgICAgY29uc3QgdyA9IHYgKiB1O1xuICAgICAgICBhW3cgKyBSXSA+IHQgJiYgKGcgKz0gYVt3ICsgSV0pO1xuICAgICAgfVxuICAgICAgaWYgKGcgPiBmICYmIGcgPj0gaSkge1xuICAgICAgICBsZXQgdiA9IGggKiBmLCB3ID0gcCAqIGYsIF8sIE8gPSAtMTtcbiAgICAgICAgY29uc3QgTSA9ICgobCAvIHUgfCAwKSA8PCA1KSArICh0ICsgMSkgKyB0aGlzLnBvaW50cy5sZW5ndGg7XG4gICAgICAgIGZvciAoY29uc3QgRSBvZiBtKSB7XG4gICAgICAgICAgY29uc3QgayA9IEUgKiB1O1xuICAgICAgICAgIGlmIChhW2sgKyBSXSA8PSB0KVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgYVtrICsgUl0gPSB0O1xuICAgICAgICAgIGNvbnN0IFMgPSBhW2sgKyBJXTtcbiAgICAgICAgICB2ICs9IGFba10gKiBTLCB3ICs9IGFbayArIDFdICogUywgYVtrICsgb2VdID0gTSwgbyAmJiAoXyB8fCAoXyA9IHRoaXMuX21hcChhLCBsLCAhMCksIE8gPSB0aGlzLmNsdXN0ZXJQcm9wcy5sZW5ndGgsIHRoaXMuY2x1c3RlclByb3BzLnB1c2goXykpLCBvKF8sIHRoaXMuX21hcChhLCBrKSkpO1xuICAgICAgICB9XG4gICAgICAgIGFbbCArIG9lXSA9IE0sIGQucHVzaCh2IC8gZywgdyAvIGcsIDEgLyAwLCBNLCAtMSwgZyksIG8gJiYgZC5wdXNoKE8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgdiA9IDA7IHYgPCB1OyB2KyspXG4gICAgICAgICAgZC5wdXNoKGFbbCArIHZdKTtcbiAgICAgICAgaWYgKGcgPiAxKVxuICAgICAgICAgIGZvciAoY29uc3QgdiBvZiBtKSB7XG4gICAgICAgICAgICBjb25zdCB3ID0gdiAqIHU7XG4gICAgICAgICAgICBpZiAoIShhW3cgKyBSXSA8PSB0KSkge1xuICAgICAgICAgICAgICBhW3cgKyBSXSA9IHQ7XG4gICAgICAgICAgICAgIGZvciAobGV0IF8gPSAwOyBfIDwgdTsgXysrKVxuICAgICAgICAgICAgICAgIGQucHVzaChhW3cgKyBfXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZDtcbiAgfVxuICAvLyBnZXQgaW5kZXggb2YgdGhlIHBvaW50IGZyb20gd2hpY2ggdGhlIGNsdXN0ZXIgb3JpZ2luYXRlZFxuICBfZ2V0T3JpZ2luSWQoZSkge1xuICAgIHJldHVybiBlIC0gdGhpcy5wb2ludHMubGVuZ3RoID4+IDU7XG4gIH1cbiAgLy8gZ2V0IHpvb20gb2YgdGhlIHBvaW50IGZyb20gd2hpY2ggdGhlIGNsdXN0ZXIgb3JpZ2luYXRlZFxuICBfZ2V0T3JpZ2luWm9vbShlKSB7XG4gICAgcmV0dXJuIChlIC0gdGhpcy5wb2ludHMubGVuZ3RoKSAlIDMyO1xuICB9XG4gIF9tYXAoZSwgdCwgcykge1xuICAgIGlmIChlW3QgKyBJXSA+IDEpIHtcbiAgICAgIGNvbnN0IGkgPSB0aGlzLmNsdXN0ZXJQcm9wc1tlW3QgKyBUZV1dO1xuICAgICAgcmV0dXJuIHMgPyBPYmplY3QuYXNzaWduKHt9LCBpKSA6IGk7XG4gICAgfVxuICAgIGNvbnN0IHIgPSB0aGlzLnBvaW50c1tlW3QgKyBUXV0ucHJvcGVydGllcywgbyA9IHRoaXMub3B0aW9ucy5tYXAocik7XG4gICAgcmV0dXJuIHMgJiYgbyA9PT0gciA/IE9iamVjdC5hc3NpZ24oe30sIG8pIDogbztcbiAgfVxufVxuZnVuY3Rpb24gTWUobiwgZSwgdCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiRmVhdHVyZVwiLFxuICAgIGlkOiBuW2UgKyBUXSxcbiAgICBwcm9wZXJ0aWVzOiBSZShuLCBlLCB0KSxcbiAgICBnZW9tZXRyeToge1xuICAgICAgdHlwZTogXCJQb2ludFwiLFxuICAgICAgY29vcmRpbmF0ZXM6IFtvdChuW2VdKSwgaXQobltlICsgMV0pXVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIFJlKG4sIGUsIHQpIHtcbiAgY29uc3QgcyA9IG5bZSArIEldLCByID0gcyA+PSAxZTQgPyBgJHtNYXRoLnJvdW5kKHMgLyAxZTMpfWtgIDogcyA+PSAxZTMgPyBgJHtNYXRoLnJvdW5kKHMgLyAxMDApIC8gMTB9a2AgOiBzLCBvID0gbltlICsgVGVdLCBpID0gbyA9PT0gLTEgPyB7fSA6IE9iamVjdC5hc3NpZ24oe30sIHRbb10pO1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihpLCB7XG4gICAgY2x1c3RlcjogITAsXG4gICAgY2x1c3Rlcl9pZDogbltlICsgVF0sXG4gICAgcG9pbnRfY291bnQ6IHMsXG4gICAgcG9pbnRfY291bnRfYWJicmV2aWF0ZWQ6IHJcbiAgfSk7XG59XG5mdW5jdGlvbiBLKG4pIHtcbiAgcmV0dXJuIG4gLyAzNjAgKyAwLjU7XG59XG5mdW5jdGlvbiBZKG4pIHtcbiAgY29uc3QgZSA9IE1hdGguc2luKG4gKiBNYXRoLlBJIC8gMTgwKSwgdCA9IDAuNSAtIDAuMjUgKiBNYXRoLmxvZygoMSArIGUpIC8gKDEgLSBlKSkgLyBNYXRoLlBJO1xuICByZXR1cm4gdCA8IDAgPyAwIDogdCA+IDEgPyAxIDogdDtcbn1cbmZ1bmN0aW9uIG90KG4pIHtcbiAgcmV0dXJuIChuIC0gMC41KSAqIDM2MDtcbn1cbmZ1bmN0aW9uIGl0KG4pIHtcbiAgY29uc3QgZSA9ICgxODAgLSBuICogMzYwKSAqIE1hdGguUEkgLyAxODA7XG4gIHJldHVybiAzNjAgKiBNYXRoLmF0YW4oTWF0aC5leHAoZSkpIC8gTWF0aC5QSSAtIDkwO1xufVxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5mdW5jdGlvbiBkZShuLCBlKSB7XG4gIHZhciB0ID0ge307XG4gIGZvciAodmFyIHMgaW4gbilcbiAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobiwgcykgJiYgZS5pbmRleE9mKHMpIDwgMCAmJiAodFtzXSA9IG5bc10pO1xuICBpZiAobiAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09IFwiZnVuY3Rpb25cIilcbiAgICBmb3IgKHZhciByID0gMCwgcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobik7IHIgPCBzLmxlbmd0aDsgcisrKVxuICAgICAgZS5pbmRleE9mKHNbcl0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwobiwgc1tyXSkgJiYgKHRbc1tyXV0gPSBuW3Nbcl1dKTtcbiAgcmV0dXJuIHQ7XG59XG5jbGFzcyBDIHtcbiAgc3RhdGljIGlzQWR2YW5jZWRNYXJrZXJBdmFpbGFibGUoZSkge1xuICAgIHJldHVybiBnb29nbGUubWFwcy5tYXJrZXIgJiYgZS5nZXRNYXBDYXBhYmlsaXRpZXMoKS5pc0FkdmFuY2VkTWFya2Vyc0F2YWlsYWJsZSA9PT0gITA7XG4gIH1cbiAgc3RhdGljIGlzQWR2YW5jZWRNYXJrZXIoZSkge1xuICAgIHJldHVybiBnb29nbGUubWFwcy5tYXJrZXIgJiYgZSBpbnN0YW5jZW9mIGdvb2dsZS5tYXBzLm1hcmtlci5BZHZhbmNlZE1hcmtlckVsZW1lbnQ7XG4gIH1cbiAgc3RhdGljIHNldE1hcChlLCB0KSB7XG4gICAgdGhpcy5pc0FkdmFuY2VkTWFya2VyKGUpID8gZS5tYXAgPSB0IDogZS5zZXRNYXAodCk7XG4gIH1cbiAgc3RhdGljIGdldFBvc2l0aW9uKGUpIHtcbiAgICBpZiAodGhpcy5pc0FkdmFuY2VkTWFya2VyKGUpKSB7XG4gICAgICBpZiAoZS5wb3NpdGlvbikge1xuICAgICAgICBpZiAoZS5wb3NpdGlvbiBpbnN0YW5jZW9mIGdvb2dsZS5tYXBzLkxhdExuZylcbiAgICAgICAgICByZXR1cm4gZS5wb3NpdGlvbjtcbiAgICAgICAgaWYgKGUucG9zaXRpb24ubGF0ICYmIGUucG9zaXRpb24ubG5nKVxuICAgICAgICAgIHJldHVybiBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGUucG9zaXRpb24ubGF0LCBlLnBvc2l0aW9uLmxuZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIGUuZ2V0UG9zaXRpb24oKTtcbiAgfVxuICBzdGF0aWMgZ2V0VmlzaWJsZShlKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNBZHZhbmNlZE1hcmtlcihlKSA/ICEwIDogZS5nZXRWaXNpYmxlKCk7XG4gIH1cbn1cbmNsYXNzIFcge1xuICBjb25zdHJ1Y3Rvcih7IG1hcmtlcnM6IGUsIHBvc2l0aW9uOiB0IH0pIHtcbiAgICB0aGlzLm1hcmtlcnMgPSBlLCB0ICYmICh0IGluc3RhbmNlb2YgZ29vZ2xlLm1hcHMuTGF0TG5nID8gdGhpcy5fcG9zaXRpb24gPSB0IDogdGhpcy5fcG9zaXRpb24gPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKHQpKTtcbiAgfVxuICBnZXQgYm91bmRzKCkge1xuICAgIGlmICh0aGlzLm1hcmtlcnMubGVuZ3RoID09PSAwICYmICF0aGlzLl9wb3NpdGlvbilcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBlID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcyh0aGlzLl9wb3NpdGlvbiwgdGhpcy5fcG9zaXRpb24pO1xuICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLm1hcmtlcnMpXG4gICAgICBlLmV4dGVuZChDLmdldFBvc2l0aW9uKHQpKTtcbiAgICByZXR1cm4gZTtcbiAgfVxuICBnZXQgcG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uIHx8IHRoaXMuYm91bmRzLmdldENlbnRlcigpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvdW50IG9mICoqdmlzaWJsZSoqIG1hcmtlcnMuXG4gICAqL1xuICBnZXQgY291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFya2Vycy5maWx0ZXIoKGUpID0+IEMuZ2V0VmlzaWJsZShlKSkubGVuZ3RoO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBtYXJrZXIgdG8gdGhlIGNsdXN0ZXIuXG4gICAqL1xuICBwdXNoKGUpIHtcbiAgICB0aGlzLm1hcmtlcnMucHVzaChlKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYW51cCByZWZlcmVuY2VzIGFuZCByZW1vdmUgbWFya2VyIGZyb20gbWFwLlxuICAgKi9cbiAgZGVsZXRlKCkge1xuICAgIHRoaXMubWFya2VyICYmIChDLnNldE1hcCh0aGlzLm1hcmtlciwgbnVsbCksIHRoaXMubWFya2VyID0gdm9pZCAwKSwgdGhpcy5tYXJrZXJzLmxlbmd0aCA9IDA7XG4gIH1cbn1cbmNvbnN0IGF0ID0gKG4sIGUsIHQsIHMpID0+IHtcbiAgY29uc3QgciA9IGplKG4uZ2V0Qm91bmRzKCksIGUsIHMpO1xuICByZXR1cm4gdC5maWx0ZXIoKG8pID0+IHIuY29udGFpbnMoQy5nZXRQb3NpdGlvbihvKSkpO1xufSwgamUgPSAobiwgZSwgdCkgPT4ge1xuICBjb25zdCB7IG5vcnRoRWFzdDogcywgc291dGhXZXN0OiByIH0gPSBsdChuLCBlKSwgbyA9IGN0KHsgbm9ydGhFYXN0OiBzLCBzb3V0aFdlc3Q6IHIgfSwgdCk7XG4gIHJldHVybiB1dChvLCBlKTtcbn0sIE9lID0gKG4sIGUsIHQpID0+IHtcbiAgY29uc3QgcyA9IGplKG4sIGUsIHQpLCByID0gcy5nZXROb3J0aEVhc3QoKSwgbyA9IHMuZ2V0U291dGhXZXN0KCk7XG4gIHJldHVybiBbby5sbmcoKSwgby5sYXQoKSwgci5sbmcoKSwgci5sYXQoKV07XG59LCBsdCA9IChuLCBlKSA9PiAoe1xuICBub3J0aEVhc3Q6IGUuZnJvbUxhdExuZ1RvRGl2UGl4ZWwobi5nZXROb3J0aEVhc3QoKSksXG4gIHNvdXRoV2VzdDogZS5mcm9tTGF0TG5nVG9EaXZQaXhlbChuLmdldFNvdXRoV2VzdCgpKVxufSksIGN0ID0gKHsgbm9ydGhFYXN0OiBuLCBzb3V0aFdlc3Q6IGUgfSwgdCkgPT4gKG4ueCArPSB0LCBuLnkgLT0gdCwgZS54IC09IHQsIGUueSArPSB0LCB7IG5vcnRoRWFzdDogbiwgc291dGhXZXN0OiBlIH0pLCB1dCA9ICh7IG5vcnRoRWFzdDogbiwgc291dGhXZXN0OiBlIH0sIHQpID0+IHtcbiAgY29uc3QgcyA9IHQuZnJvbURpdlBpeGVsVG9MYXRMbmcoZSksIHIgPSB0LmZyb21EaXZQaXhlbFRvTGF0TG5nKG4pO1xuICByZXR1cm4gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcyhzLCByKTtcbn07XG5jbGFzcyBxZSB7XG4gIGNvbnN0cnVjdG9yKHsgbWF4Wm9vbTogZSA9IDE2IH0pIHtcbiAgICB0aGlzLm1heFpvb20gPSBlO1xuICB9XG4gIC8qKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gYnlwYXNzIGNsdXN0ZXJpbmcgYmFzZWQgdXBvbiBzb21lIG1hcCBzdGF0ZSBzdWNoIGFzXG4gICAqIHpvb20sIG51bWJlciBvZiBtYXJrZXJzLCBldGMuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogIGNsdXN0ZXIoe21hcmtlcnMsIG1hcH06IEFsZ29yaXRobUlucHV0KTogQ2x1c3RlcltdIHtcbiAgICogICAgaWYgKHNob3VsZEJ5cGFzc0NsdXN0ZXJpbmcobWFwKSkge1xuICAgKiAgICAgIHJldHVybiB0aGlzLm5vb3Aoe21hcmtlcnN9KVxuICAgKiAgICB9XG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICBub29wKHsgbWFya2VyczogZSB9KSB7XG4gICAgcmV0dXJuIGh0KGUpO1xuICB9XG59XG5jbGFzcyBkdCBleHRlbmRzIHFlIHtcbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHZhciB7IHZpZXdwb3J0UGFkZGluZzogdCA9IDYwIH0gPSBlLCBzID0gZGUoZSwgW1widmlld3BvcnRQYWRkaW5nXCJdKTtcbiAgICBzdXBlcihzKSwgdGhpcy52aWV3cG9ydFBhZGRpbmcgPSA2MCwgdGhpcy52aWV3cG9ydFBhZGRpbmcgPSB0O1xuICB9XG4gIGNhbGN1bGF0ZSh7IG1hcmtlcnM6IGUsIG1hcDogdCwgbWFwQ2FudmFzUHJvamVjdGlvbjogcyB9KSB7XG4gICAgcmV0dXJuIHQuZ2V0Wm9vbSgpID49IHRoaXMubWF4Wm9vbSA/IHtcbiAgICAgIGNsdXN0ZXJzOiB0aGlzLm5vb3Aoe1xuICAgICAgICBtYXJrZXJzOiBlXG4gICAgICB9KSxcbiAgICAgIGNoYW5nZWQ6ICExXG4gICAgfSA6IHtcbiAgICAgIGNsdXN0ZXJzOiB0aGlzLmNsdXN0ZXIoe1xuICAgICAgICBtYXJrZXJzOiBhdCh0LCBzLCBlLCB0aGlzLnZpZXdwb3J0UGFkZGluZyksXG4gICAgICAgIG1hcDogdCxcbiAgICAgICAgbWFwQ2FudmFzUHJvamVjdGlvbjogc1xuICAgICAgfSlcbiAgICB9O1xuICB9XG59XG5jb25zdCBodCA9IChuKSA9PiBuLm1hcCgodCkgPT4gbmV3IFcoe1xuICBwb3NpdGlvbjogQy5nZXRQb3NpdGlvbih0KSxcbiAgbWFya2VyczogW3RdXG59KSk7XG5jbGFzcyBwdCBleHRlbmRzIHFlIHtcbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHZhciB7IG1heFpvb206IHQsIHJhZGl1czogcyA9IDYwIH0gPSBlLCByID0gZGUoZSwgW1wibWF4Wm9vbVwiLCBcInJhZGl1c1wiXSk7XG4gICAgc3VwZXIoeyBtYXhab29tOiB0IH0pLCB0aGlzLnN0YXRlID0geyB6b29tOiAtMSB9LCB0aGlzLnN1cGVyQ2x1c3RlciA9IG5ldyAkZShPYmplY3QuYXNzaWduKHsgbWF4Wm9vbTogdGhpcy5tYXhab29tLCByYWRpdXM6IHMgfSwgcikpO1xuICB9XG4gIGNhbGN1bGF0ZShlKSB7XG4gICAgbGV0IHQgPSAhMTtcbiAgICBjb25zdCBzID0geyB6b29tOiBlLm1hcC5nZXRab29tKCkgfTtcbiAgICBpZiAoIUEoZS5tYXJrZXJzLCB0aGlzLm1hcmtlcnMpKSB7XG4gICAgICB0ID0gITAsIHRoaXMubWFya2VycyA9IFsuLi5lLm1hcmtlcnNdO1xuICAgICAgY29uc3QgciA9IHRoaXMubWFya2Vycy5tYXAoKG8pID0+IHtcbiAgICAgICAgY29uc3QgaSA9IEMuZ2V0UG9zaXRpb24obyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogXCJGZWF0dXJlXCIsXG4gICAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICAgIHR5cGU6IFwiUG9pbnRcIixcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBbaS5sbmcoKSwgaS5sYXQoKV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHByb3BlcnRpZXM6IHsgbWFya2VyOiBvIH1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zdXBlckNsdXN0ZXIubG9hZChyKTtcbiAgICB9XG4gICAgcmV0dXJuIHQgfHwgKHRoaXMuc3RhdGUuem9vbSA8PSB0aGlzLm1heFpvb20gfHwgcy56b29tIDw9IHRoaXMubWF4Wm9vbSkgJiYgKHQgPSAhQSh0aGlzLnN0YXRlLCBzKSksIHRoaXMuc3RhdGUgPSBzLCB0ICYmICh0aGlzLmNsdXN0ZXJzID0gdGhpcy5jbHVzdGVyKGUpKSwgeyBjbHVzdGVyczogdGhpcy5jbHVzdGVycywgY2hhbmdlZDogdCB9O1xuICB9XG4gIGNsdXN0ZXIoeyBtYXA6IGUgfSkge1xuICAgIHJldHVybiB0aGlzLnN1cGVyQ2x1c3Rlci5nZXRDbHVzdGVycyhbLTE4MCwgLTkwLCAxODAsIDkwXSwgTWF0aC5yb3VuZChlLmdldFpvb20oKSkpLm1hcCgodCkgPT4gdGhpcy50cmFuc2Zvcm1DbHVzdGVyKHQpKTtcbiAgfVxuICB0cmFuc2Zvcm1DbHVzdGVyKHsgZ2VvbWV0cnk6IHsgY29vcmRpbmF0ZXM6IFtlLCB0XSB9LCBwcm9wZXJ0aWVzOiBzIH0pIHtcbiAgICBpZiAocy5jbHVzdGVyKVxuICAgICAgcmV0dXJuIG5ldyBXKHtcbiAgICAgICAgbWFya2VyczogdGhpcy5zdXBlckNsdXN0ZXIuZ2V0TGVhdmVzKHMuY2x1c3Rlcl9pZCwgMSAvIDApLm1hcCgobykgPT4gby5wcm9wZXJ0aWVzLm1hcmtlciksXG4gICAgICAgIHBvc2l0aW9uOiB7IGxhdDogdCwgbG5nOiBlIH1cbiAgICAgIH0pO1xuICAgIGNvbnN0IHIgPSBzLm1hcmtlcjtcbiAgICByZXR1cm4gbmV3IFcoe1xuICAgICAgbWFya2VyczogW3JdLFxuICAgICAgcG9zaXRpb246IEMuZ2V0UG9zaXRpb24ocilcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgZnQgZXh0ZW5kcyBkdCB7XG4gIGNvbnN0cnVjdG9yKGUpIHtcbiAgICB2YXIgeyBtYXhab29tOiB0LCByYWRpdXM6IHMgPSA2MCwgdmlld3BvcnRQYWRkaW5nOiByID0gNjAgfSA9IGUsIG8gPSBkZShlLCBbXCJtYXhab29tXCIsIFwicmFkaXVzXCIsIFwidmlld3BvcnRQYWRkaW5nXCJdKTtcbiAgICBzdXBlcih7IG1heFpvb206IHQsIHZpZXdwb3J0UGFkZGluZzogciB9KSwgdGhpcy5zdXBlckNsdXN0ZXIgPSBuZXcgJGUoT2JqZWN0LmFzc2lnbih7IG1heFpvb206IHRoaXMubWF4Wm9vbSwgcmFkaXVzOiBzIH0sIG8pKSwgdGhpcy5zdGF0ZSA9IHsgem9vbTogLTEsIHZpZXc6IFswLCAwLCAwLCAwXSB9O1xuICB9XG4gIGNhbGN1bGF0ZShlKSB7XG4gICAgY29uc3QgdCA9IHtcbiAgICAgIHpvb206IE1hdGgucm91bmQoZS5tYXAuZ2V0Wm9vbSgpKSxcbiAgICAgIHZpZXc6IE9lKGUubWFwLmdldEJvdW5kcygpLCBlLm1hcENhbnZhc1Byb2plY3Rpb24sIHRoaXMudmlld3BvcnRQYWRkaW5nKVxuICAgIH07XG4gICAgbGV0IHMgPSAhQSh0aGlzLnN0YXRlLCB0KTtcbiAgICBpZiAoIUEoZS5tYXJrZXJzLCB0aGlzLm1hcmtlcnMpKSB7XG4gICAgICBzID0gITAsIHRoaXMubWFya2VycyA9IFsuLi5lLm1hcmtlcnNdO1xuICAgICAgY29uc3QgciA9IHRoaXMubWFya2Vycy5tYXAoKG8pID0+IHtcbiAgICAgICAgY29uc3QgaSA9IEMuZ2V0UG9zaXRpb24obyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogXCJGZWF0dXJlXCIsXG4gICAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICAgIHR5cGU6IFwiUG9pbnRcIixcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiBbaS5sbmcoKSwgaS5sYXQoKV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHByb3BlcnRpZXM6IHsgbWFya2VyOiBvIH1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zdXBlckNsdXN0ZXIubG9hZChyKTtcbiAgICB9XG4gICAgcmV0dXJuIHMgJiYgKHRoaXMuY2x1c3RlcnMgPSB0aGlzLmNsdXN0ZXIoZSksIHRoaXMuc3RhdGUgPSB0KSwgeyBjbHVzdGVyczogdGhpcy5jbHVzdGVycywgY2hhbmdlZDogcyB9O1xuICB9XG4gIGNsdXN0ZXIoeyBtYXA6IGUsIG1hcENhbnZhc1Byb2plY3Rpb246IHQgfSkge1xuICAgIGNvbnN0IHMgPSB7XG4gICAgICB6b29tOiBNYXRoLnJvdW5kKGUuZ2V0Wm9vbSgpKSxcbiAgICAgIHZpZXc6IE9lKGUuZ2V0Qm91bmRzKCksIHQsIHRoaXMudmlld3BvcnRQYWRkaW5nKVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuc3VwZXJDbHVzdGVyLmdldENsdXN0ZXJzKHMudmlldywgcy56b29tKS5tYXAoKHIpID0+IHRoaXMudHJhbnNmb3JtQ2x1c3RlcihyKSk7XG4gIH1cbiAgdHJhbnNmb3JtQ2x1c3Rlcih7IGdlb21ldHJ5OiB7IGNvb3JkaW5hdGVzOiBbZSwgdF0gfSwgcHJvcGVydGllczogcyB9KSB7XG4gICAgaWYgKHMuY2x1c3RlcilcbiAgICAgIHJldHVybiBuZXcgVyh7XG4gICAgICAgIG1hcmtlcnM6IHRoaXMuc3VwZXJDbHVzdGVyLmdldExlYXZlcyhzLmNsdXN0ZXJfaWQsIDEgLyAwKS5tYXAoKG8pID0+IG8ucHJvcGVydGllcy5tYXJrZXIpLFxuICAgICAgICBwb3NpdGlvbjogeyBsYXQ6IHQsIGxuZzogZSB9XG4gICAgICB9KTtcbiAgICBjb25zdCByID0gcy5tYXJrZXI7XG4gICAgcmV0dXJuIG5ldyBXKHtcbiAgICAgIG1hcmtlcnM6IFtyXSxcbiAgICAgIHBvc2l0aW9uOiBDLmdldFBvc2l0aW9uKHIpXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIG10IHtcbiAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgIHRoaXMubWFya2VycyA9IHsgc3VtOiBlLmxlbmd0aCB9O1xuICAgIGNvbnN0IHMgPSB0Lm1hcCgobykgPT4gby5jb3VudCksIHIgPSBzLnJlZHVjZSgobywgaSkgPT4gbyArIGksIDApO1xuICAgIHRoaXMuY2x1c3RlcnMgPSB7XG4gICAgICBjb3VudDogdC5sZW5ndGgsXG4gICAgICBtYXJrZXJzOiB7XG4gICAgICAgIG1lYW46IHIgLyB0Lmxlbmd0aCxcbiAgICAgICAgc3VtOiByLFxuICAgICAgICBtaW46IE1hdGgubWluKC4uLnMpLFxuICAgICAgICBtYXg6IE1hdGgubWF4KC4uLnMpXG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuY2xhc3MgZ3Qge1xuICAvKipcbiAgICogVGhlIGRlZmF1bHQgcmVuZGVyIGZ1bmN0aW9uIGZvciB0aGUgbGlicmFyeSB1c2VkIGJ5IHtAbGluayBNYXJrZXJDbHVzdGVyZXJ9LlxuICAgKlxuICAgKiBDdXJyZW50bHkgc2V0IHRvIHVzZSB0aGUgZm9sbG93aW5nOlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIC8vIGNoYW5nZSBjb2xvciBpZiB0aGlzIGNsdXN0ZXIgaGFzIG1vcmUgbWFya2VycyB0aGFuIHRoZSBtZWFuIGNsdXN0ZXJcbiAgICogY29uc3QgY29sb3IgPVxuICAgKiAgIGNvdW50ID4gTWF0aC5tYXgoMTAsIHN0YXRzLmNsdXN0ZXJzLm1hcmtlcnMubWVhbilcbiAgICogICAgID8gXCIjZmYwMDAwXCJcbiAgICogICAgIDogXCIjMDAwMGZmXCI7XG4gICAqXG4gICAqIC8vIGNyZWF0ZSBzdmcgdXJsIHdpdGggZmlsbCBjb2xvclxuICAgKiBjb25zdCBzdmcgPSB3aW5kb3cuYnRvYShgXG4gICAqIDxzdmcgZmlsbD1cIiR7Y29sb3J9XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQwIDI0MFwiPlxuICAgKiAgIDxjaXJjbGUgY3g9XCIxMjBcIiBjeT1cIjEyMFwiIG9wYWNpdHk9XCIuNlwiIHI9XCI3MFwiIC8+XG4gICAqICAgPGNpcmNsZSBjeD1cIjEyMFwiIGN5PVwiMTIwXCIgb3BhY2l0eT1cIi4zXCIgcj1cIjkwXCIgLz5cbiAgICogICA8Y2lyY2xlIGN4PVwiMTIwXCIgY3k9XCIxMjBcIiBvcGFjaXR5PVwiLjJcIiByPVwiMTEwXCIgLz5cbiAgICogICA8Y2lyY2xlIGN4PVwiMTIwXCIgY3k9XCIxMjBcIiBvcGFjaXR5PVwiLjFcIiByPVwiMTMwXCIgLz5cbiAgICogPC9zdmc+YCk7XG4gICAqXG4gICAqIC8vIGNyZWF0ZSBtYXJrZXIgdXNpbmcgc3ZnIGljb25cbiAgICogcmV0dXJuIG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuICAgKiAgIHBvc2l0aW9uLFxuICAgKiAgIGljb246IHtcbiAgICogICAgIHVybDogYGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJHtzdmd9YCxcbiAgICogICAgIHNjYWxlZFNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDQ1LCA0NSksXG4gICAqICAgfSxcbiAgICogICBsYWJlbDoge1xuICAgKiAgICAgdGV4dDogU3RyaW5nKGNvdW50KSxcbiAgICogICAgIGNvbG9yOiBcInJnYmEoMjU1LDI1NSwyNTUsMC45KVwiLFxuICAgKiAgICAgZm9udFNpemU6IFwiMTJweFwiLFxuICAgKiAgIH0sXG4gICAqICAgLy8gYWRqdXN0IHpJbmRleCB0byBiZSBhYm92ZSBvdGhlciBtYXJrZXJzXG4gICAqICAgekluZGV4OiAxMDAwICsgY291bnQsXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHJlbmRlcih7IGNvdW50OiBlLCBwb3NpdGlvbjogdCB9LCBzLCByKSB7XG4gICAgY29uc3QgaSA9IGA8c3ZnIGZpbGw9XCIke2UgPiBNYXRoLm1heCgxMCwgcy5jbHVzdGVycy5tYXJrZXJzLm1lYW4pID8gXCIjZmYwMDAwXCIgOiBcIiMwMDAwZmZcIn1cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNDAgMjQwXCIgd2lkdGg9XCI1MFwiIGhlaWdodD1cIjUwXCI+XG48Y2lyY2xlIGN4PVwiMTIwXCIgY3k9XCIxMjBcIiBvcGFjaXR5PVwiLjZcIiByPVwiNzBcIiAvPlxuPGNpcmNsZSBjeD1cIjEyMFwiIGN5PVwiMTIwXCIgb3BhY2l0eT1cIi4zXCIgcj1cIjkwXCIgLz5cbjxjaXJjbGUgY3g9XCIxMjBcIiBjeT1cIjEyMFwiIG9wYWNpdHk9XCIuMlwiIHI9XCIxMTBcIiAvPlxuPHRleHQgeD1cIjUwJVwiIHk9XCI1MCVcIiBzdHlsZT1cImZpbGw6I2ZmZlwiIHRleHQtYW5jaG9yPVwibWlkZGxlXCIgZm9udC1zaXplPVwiNTBcIiBkb21pbmFudC1iYXNlbGluZT1cIm1pZGRsZVwiIGZvbnQtZmFtaWx5PVwicm9ib3RvLGFyaWFsLHNhbnMtc2VyaWZcIj4ke2V9PC90ZXh0PlxuPC9zdmc+YCwgYyA9IGBDbHVzdGVyIG9mICR7ZX0gbWFya2Vyc2AsIGEgPSBOdW1iZXIoZ29vZ2xlLm1hcHMuTWFya2VyLk1BWF9aSU5ERVgpICsgZTtcbiAgICBpZiAoQy5pc0FkdmFuY2VkTWFya2VyQXZhaWxhYmxlKHIpKSB7XG4gICAgICBjb25zdCB1ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHUuaW5uZXJIVE1MID0gaTtcbiAgICAgIGNvbnN0IGwgPSB1LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgbC5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCAyNSlcIik7XG4gICAgICBjb25zdCBoID0ge1xuICAgICAgICBtYXA6IHIsXG4gICAgICAgIHBvc2l0aW9uOiB0LFxuICAgICAgICB6SW5kZXg6IGEsXG4gICAgICAgIHRpdGxlOiBjLFxuICAgICAgICBjb250ZW50OiBsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBnb29nbGUubWFwcy5tYXJrZXIuQWR2YW5jZWRNYXJrZXJFbGVtZW50KGgpO1xuICAgIH1cbiAgICBjb25zdCBkID0ge1xuICAgICAgcG9zaXRpb246IHQsXG4gICAgICB6SW5kZXg6IGEsXG4gICAgICB0aXRsZTogYyxcbiAgICAgIGljb246IHtcbiAgICAgICAgdXJsOiBgZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwke2J0b2EoaSl9YCxcbiAgICAgICAgYW5jaG9yOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMjUsIDI1KVxuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIG5ldyBnb29nbGUubWFwcy5NYXJrZXIoZCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHZ0KG4sIGUpIHtcbiAgZm9yIChsZXQgdCBpbiBlLnByb3RvdHlwZSlcbiAgICBuLnByb3RvdHlwZVt0XSA9IGUucHJvdG90eXBlW3RdO1xufVxuY2xhc3MgaGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB2dChoZSwgZ29vZ2xlLm1hcHMuT3ZlcmxheVZpZXcpO1xuICB9XG59XG52YXIgRDtcbihmdW5jdGlvbihuKSB7XG4gIG4uQ0xVU1RFUklOR19CRUdJTiA9IFwiY2x1c3RlcmluZ2JlZ2luXCIsIG4uQ0xVU1RFUklOR19FTkQgPSBcImNsdXN0ZXJpbmdlbmRcIiwgbi5DTFVTVEVSX0NMSUNLID0gXCJjbGlja1wiO1xufSkoRCB8fCAoRCA9IHt9KSk7XG5jb25zdCB5dCA9IChuLCBlLCB0KSA9PiB7XG4gIHQuZml0Qm91bmRzKGUuYm91bmRzKTtcbn07XG5jbGFzcyB3dCBleHRlbmRzIGhlIHtcbiAgY29uc3RydWN0b3IoeyBtYXA6IGUsIG1hcmtlcnM6IHQgPSBbXSwgYWxnb3JpdGhtT3B0aW9uczogcyA9IHt9LCBhbGdvcml0aG06IHIgPSBuZXcgcHQocyksIHJlbmRlcmVyOiBvID0gbmV3IGd0KCksIG9uQ2x1c3RlckNsaWNrOiBpID0geXQgfSkge1xuICAgIHN1cGVyKCksIHRoaXMubWFya2VycyA9IFsuLi50XSwgdGhpcy5jbHVzdGVycyA9IFtdLCB0aGlzLmFsZ29yaXRobSA9IHIsIHRoaXMucmVuZGVyZXIgPSBvLCB0aGlzLm9uQ2x1c3RlckNsaWNrID0gaSwgZSAmJiB0aGlzLnNldE1hcChlKTtcbiAgfVxuICBhZGRNYXJrZXIoZSwgdCkge1xuICAgIHRoaXMubWFya2Vycy5pbmNsdWRlcyhlKSB8fCAodGhpcy5tYXJrZXJzLnB1c2goZSksIHQgfHwgdGhpcy5yZW5kZXIoKSk7XG4gIH1cbiAgYWRkTWFya2VycyhlLCB0KSB7XG4gICAgZS5mb3JFYWNoKChzKSA9PiB7XG4gICAgICB0aGlzLmFkZE1hcmtlcihzLCAhMCk7XG4gICAgfSksIHQgfHwgdGhpcy5yZW5kZXIoKTtcbiAgfVxuICByZW1vdmVNYXJrZXIoZSwgdCkge1xuICAgIGNvbnN0IHMgPSB0aGlzLm1hcmtlcnMuaW5kZXhPZihlKTtcbiAgICByZXR1cm4gcyA9PT0gLTEgPyAhMSA6IChDLnNldE1hcChlLCBudWxsKSwgdGhpcy5tYXJrZXJzLnNwbGljZShzLCAxKSwgdCB8fCB0aGlzLnJlbmRlcigpLCAhMCk7XG4gIH1cbiAgcmVtb3ZlTWFya2VycyhlLCB0KSB7XG4gICAgbGV0IHMgPSAhMTtcbiAgICByZXR1cm4gZS5mb3JFYWNoKChyKSA9PiB7XG4gICAgICBzID0gdGhpcy5yZW1vdmVNYXJrZXIociwgITApIHx8IHM7XG4gICAgfSksIHMgJiYgIXQgJiYgdGhpcy5yZW5kZXIoKSwgcztcbiAgfVxuICBjbGVhck1hcmtlcnMoZSkge1xuICAgIHRoaXMubWFya2Vycy5sZW5ndGggPSAwLCBlIHx8IHRoaXMucmVuZGVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlY2FsY3VsYXRlcyBhbmQgZHJhd3MgYWxsIHRoZSBtYXJrZXIgY2x1c3RlcnMuXG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuZ2V0TWFwKCk7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBnb29nbGUubWFwcy5NYXAgJiYgZS5nZXRQcm9qZWN0aW9uKCkpIHtcbiAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcywgRC5DTFVTVEVSSU5HX0JFR0lOLCB0aGlzKTtcbiAgICAgIGNvbnN0IHsgY2x1c3RlcnM6IHQsIGNoYW5nZWQ6IHMgfSA9IHRoaXMuYWxnb3JpdGhtLmNhbGN1bGF0ZSh7XG4gICAgICAgIG1hcmtlcnM6IHRoaXMubWFya2VycyxcbiAgICAgICAgbWFwOiBlLFxuICAgICAgICBtYXBDYW52YXNQcm9qZWN0aW9uOiB0aGlzLmdldFByb2plY3Rpb24oKVxuICAgICAgfSk7XG4gICAgICBpZiAocyB8fCBzID09IG51bGwpIHtcbiAgICAgICAgY29uc3QgciA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiB0KVxuICAgICAgICAgIGkubWFya2Vycy5sZW5ndGggPT0gMSAmJiByLmFkZChpLm1hcmtlcnNbMF0pO1xuICAgICAgICBjb25zdCBvID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmNsdXN0ZXJzKVxuICAgICAgICAgIGkubWFya2VyICE9IG51bGwgJiYgKGkubWFya2Vycy5sZW5ndGggPT0gMSA/IHIuaGFzKGkubWFya2VyKSB8fCBDLnNldE1hcChpLm1hcmtlciwgbnVsbCkgOiBvLnB1c2goaS5tYXJrZXIpKTtcbiAgICAgICAgdGhpcy5jbHVzdGVycyA9IHQsIHRoaXMucmVuZGVyQ2x1c3RlcnMoKSwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IG8uZm9yRWFjaCgoaSkgPT4gQy5zZXRNYXAoaSwgbnVsbCkpKTtcbiAgICAgIH1cbiAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcywgRC5DTFVTVEVSSU5HX0VORCwgdGhpcyk7XG4gICAgfVxuICB9XG4gIG9uQWRkKCkge1xuICAgIHRoaXMuaWRsZUxpc3RlbmVyID0gdGhpcy5nZXRNYXAoKS5hZGRMaXN0ZW5lcihcImlkbGVcIiwgdGhpcy5yZW5kZXIuYmluZCh0aGlzKSksIHRoaXMucmVuZGVyKCk7XG4gIH1cbiAgb25SZW1vdmUoKSB7XG4gICAgZ29vZ2xlLm1hcHMuZXZlbnQucmVtb3ZlTGlzdGVuZXIodGhpcy5pZGxlTGlzdGVuZXIpLCB0aGlzLnJlc2V0KCk7XG4gIH1cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5tYXJrZXJzLmZvckVhY2goKGUpID0+IEMuc2V0TWFwKGUsIG51bGwpKSwgdGhpcy5jbHVzdGVycy5mb3JFYWNoKChlKSA9PiBlLmRlbGV0ZSgpKSwgdGhpcy5jbHVzdGVycyA9IFtdO1xuICB9XG4gIHJlbmRlckNsdXN0ZXJzKCkge1xuICAgIGNvbnN0IGUgPSBuZXcgbXQodGhpcy5tYXJrZXJzLCB0aGlzLmNsdXN0ZXJzKSwgdCA9IHRoaXMuZ2V0TWFwKCk7XG4gICAgdGhpcy5jbHVzdGVycy5mb3JFYWNoKChzKSA9PiB7XG4gICAgICBzLm1hcmtlcnMubGVuZ3RoID09PSAxID8gcy5tYXJrZXIgPSBzLm1hcmtlcnNbMF0gOiAocy5tYXJrZXIgPSB0aGlzLnJlbmRlcmVyLnJlbmRlcihzLCBlLCB0KSwgcy5tYXJrZXJzLmZvckVhY2goKHIpID0+IEMuc2V0TWFwKHIsIG51bGwpKSwgdGhpcy5vbkNsdXN0ZXJDbGljayAmJiBzLm1hcmtlci5hZGRMaXN0ZW5lcihcbiAgICAgICAgXCJjbGlja1wiLFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAocikgPT4ge1xuICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcywgRC5DTFVTVEVSX0NMSUNLLCBzKSwgdGhpcy5vbkNsdXN0ZXJDbGljayhyLCBzLCB0KTtcbiAgICAgICAgfVxuICAgICAgKSksIEMuc2V0TWFwKHMubWFya2VyLCB0KTtcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgRWUgPSBPYmplY3QudmFsdWVzKEQpLCBSdCA9IFAoe1xuICBuYW1lOiBcIk1hcmtlckNsdXN0ZXJcIixcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiAoe30pXG4gICAgfVxuICB9LFxuICBlbWl0czogRWUsXG4gIHNldHVwKG4sIHsgZW1pdDogZSwgZXhwb3NlOiB0LCBzbG90czogcyB9KSB7XG4gICAgY29uc3QgciA9IHkoKSwgbyA9IGIoQiwgeSgpKSwgaSA9IGIoWiwgeSgpKTtcbiAgICByZXR1cm4gVShjZSwgciksIEwoXG4gICAgICBvLFxuICAgICAgKCkgPT4ge1xuICAgICAgICBvLnZhbHVlICYmIChyLnZhbHVlID0geChcbiAgICAgICAgICBuZXcgd3Qoe1xuICAgICAgICAgICAgbWFwOiBvLnZhbHVlLFxuICAgICAgICAgICAgLy8gQmV0dGVyIHBlcmYgdGhhbiB0aGUgZGVmYXVsdCBgU3VwZXJDbHVzdGVyQWxnb3JpdGhtYC4gU2VlOlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZW1hcHMvanMtbWFya2VyY2x1c3RlcmVyL3B1bGwvNjQwXG4gICAgICAgICAgICBhbGdvcml0aG06IG5ldyBmdChuLm9wdGlvbnMuYWxnb3JpdGhtT3B0aW9ucyA/PyB7fSksXG4gICAgICAgICAgICAuLi5uLm9wdGlvbnNcbiAgICAgICAgICB9KVxuICAgICAgICApLCBFZS5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgdmFyIGE7XG4gICAgICAgICAgKGEgPSByLnZhbHVlKSA9PSBudWxsIHx8IGEuYWRkTGlzdGVuZXIoYywgKGQpID0+IGUoYywgZCkpO1xuICAgICAgICB9KSk7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBpbW1lZGlhdGU6ICEwXG4gICAgICB9XG4gICAgKSwgcSgoKSA9PiB7XG4gICAgICB2YXIgYztcbiAgICAgIHIudmFsdWUgJiYgKChjID0gaS52YWx1ZSkgPT0gbnVsbCB8fCBjLmV2ZW50LmNsZWFySW5zdGFuY2VMaXN0ZW5lcnMoci52YWx1ZSksIHIudmFsdWUuY2xlYXJNYXJrZXJzKCksIHIudmFsdWUuc2V0TWFwKG51bGwpKTtcbiAgICB9KSwgdCh7IG1hcmtlckNsdXN0ZXI6IHIgfSksICgpID0+IHtcbiAgICAgIHZhciBjO1xuICAgICAgcmV0dXJuIChjID0gcy5kZWZhdWx0KSA9PSBudWxsID8gdm9pZCAwIDogYy5jYWxsKHMpO1xuICAgIH07XG4gIH1cbn0pLCBfdCA9IFAoe1xuICBpbmhlcml0QXR0cnM6ICExLFxuICBwcm9wczoge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIHJlcXVpcmVkOiAhMFxuICAgIH1cbiAgfSxcbiAgc2V0dXAobiwgeyBzbG90czogZSwgZW1pdDogdCwgZXhwb3NlOiBzIH0pIHtcbiAgICBjb25zdCByID0geSgpLCBvID0gSCgoKSA9PiB7XG4gICAgICB2YXIgYTtcbiAgICAgIHJldHVybiAoYSA9IGUuZGVmYXVsdCkgPT0gbnVsbCA/IHZvaWQgMCA6IGEuY2FsbChlKS5zb21lKChkKSA9PiBkLnR5cGUgIT09IExlKTtcbiAgICB9KSwgaSA9IEgoKCkgPT4gKHtcbiAgICAgIC4uLm4ub3B0aW9ucyxcbiAgICAgIGVsZW1lbnQ6IHIudmFsdWVcbiAgICB9KSksIGMgPSBWKGVlLCBbXSwgaSwgdCk7XG4gICAgcmV0dXJuIHMoe1xuICAgICAgY3VzdG9tTWFya2VyOiBjXG4gICAgfSksIHsgY3VzdG9tTWFya2VyUmVmOiByLCBjdXN0b21NYXJrZXI6IGMsIGhhc1Nsb3RDb250ZW50OiBvIH07XG4gIH1cbn0pO1xuY29uc3Qga3QgPSB7XG4gIGtleTogMCxcbiAgY2xhc3M6IFwiY3VzdG9tLW1hcmtlci13cmFwcGVyXCJcbn07XG5mdW5jdGlvbiBDdChuLCBlLCB0LCBzLCByLCBvKSB7XG4gIHJldHVybiBuLmhhc1Nsb3RDb250ZW50ID8gKEooKSwgWChcImRpdlwiLCBrdCwgW1xuICAgIGFlKFwiZGl2XCIsIFNlKHtcbiAgICAgIHJlZjogXCJjdXN0b21NYXJrZXJSZWZcIixcbiAgICAgIHN0eWxlOiB7IGN1cnNvcjogbi4kYXR0cnMub25DbGljayA/IFwicG9pbnRlclwiIDogdm9pZCAwIH1cbiAgICB9LCBuLiRhdHRycyksIFtcbiAgICAgIFEobi4kc2xvdHMsIFwiZGVmYXVsdFwiLCB7fSwgdm9pZCAwLCAhMClcbiAgICBdLCAxNilcbiAgXSkpIDogeGUoXCJcIiwgITApO1xufVxuY29uc3QganQgPSAvKiBAX19QVVJFX18gKi8gdGUoX3QsIFtbXCJyZW5kZXJcIiwgQ3RdLCBbXCJfX3Njb3BlSWRcIiwgXCJkYXRhLXYtMmQyZDM0M2FcIl1dKSwgcXQgPSBQKHtcbiAgbmFtZTogXCJIZWF0bWFwTGF5ZXJcIixcbiAgcHJvcHM6IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiAoKSA9PiAoe30pXG4gICAgfVxuICB9LFxuICBzZXR1cChuKSB7XG4gICAgY29uc3QgZSA9IHkoKSwgdCA9IGIoQiwgeSgpKSwgcyA9IGIoWiwgeSgpKTtcbiAgICByZXR1cm4gTChcbiAgICAgIFt0LCAoKSA9PiBuLm9wdGlvbnNdLFxuICAgICAgKFtyLCBvXSwgW2ksIGNdKSA9PiB7XG4gICAgICAgIHZhciBkO1xuICAgICAgICBjb25zdCBhID0gIUEobywgYykgfHwgdC52YWx1ZSAhPT0gaTtcbiAgICAgICAgaWYgKHQudmFsdWUgJiYgcy52YWx1ZSAmJiBhKSB7XG4gICAgICAgICAgY29uc3QgdSA9IHN0cnVjdHVyZWRDbG9uZShvKTtcbiAgICAgICAgICBpZiAodS5kYXRhICYmICEodS5kYXRhIGluc3RhbmNlb2Ygcy52YWx1ZS5NVkNBcnJheSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGwgPSBzLnZhbHVlLkxhdExuZztcbiAgICAgICAgICAgIHUuZGF0YSA9IChkID0gdS5kYXRhKSA9PSBudWxsID8gdm9pZCAwIDogZC5tYXAoKGgpID0+IGggaW5zdGFuY2VvZiBsIHx8IFwibG9jYXRpb25cIiBpbiBoICYmIChoLmxvY2F0aW9uIGluc3RhbmNlb2YgbCB8fCBoLmxvY2F0aW9uID09PSBudWxsKSA/IGggOiBcImxvY2F0aW9uXCIgaW4gaCA/IHsgLi4uaCwgbG9jYXRpb246IG5ldyBsKGgubG9jYXRpb24pIH0gOiBuZXcgbChoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGUudmFsdWUgPyBlLnZhbHVlLnNldE9wdGlvbnModSkgOiBlLnZhbHVlID0geChcbiAgICAgICAgICAgIG5ldyBzLnZhbHVlLnZpc3VhbGl6YXRpb24uSGVhdG1hcExheWVyKHtcbiAgICAgICAgICAgICAgLi4udSxcbiAgICAgICAgICAgICAgbWFwOiB0LnZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7IGltbWVkaWF0ZTogITAgfVxuICAgICksIHEoKCkgPT4ge1xuICAgICAgZS52YWx1ZSAmJiBlLnZhbHVlLnNldE1hcChudWxsKTtcbiAgICB9KSwgeyBoZWF0bWFwTGF5ZXI6IGUgfTtcbiAgfSxcbiAgcmVuZGVyOiAoKSA9PiBudWxsXG59KTtcbmV4cG9ydCB7XG4gIFB0IGFzIEFkdmFuY2VkTWFya2VyLFxuICBJdCBhcyBDaXJjbGUsXG4gIFR0IGFzIEN1c3RvbUNvbnRyb2wsXG4gIGp0IGFzIEN1c3RvbU1hcmtlcixcbiAgRXQgYXMgR29vZ2xlTWFwLFxuICBxdCBhcyBIZWF0bWFwTGF5ZXIsXG4gICR0IGFzIEluZm9XaW5kb3csXG4gIEx0IGFzIE1hcmtlcixcbiAgUnQgYXMgTWFya2VyQ2x1c3RlcixcbiAgeHQgYXMgUG9seWdvbixcbiAgU3QgYXMgUG9seWxpbmUsXG4gIEF0IGFzIFJlY3RhbmdsZVxufTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgY3JlYXRlQXBwIH0gZnJvbSAndnVlJztcbmltcG9ydCBBcHBTaW5nbGVHdWlkZSBmcm9tICcuL0FwcFNpbmdsZUd1aWRlLnZ1ZSc7XG5cbmNvbnN0IGFwcFNpbmdsZUd1aWRlID0gY3JlYXRlQXBwKEFwcFNpbmdsZUd1aWRlKTtcbmFwcFNpbmdsZUd1aWRlLm1vdW50KCcjYXBwU2luZ2xlR3VpZGUnKTsiXSwibmFtZXMiOlsiX19leHBvcnRzX18iLCJyZW5kZXIiLCJrbm93bkFkYXB0ZXJzIiwiaHR0cCIsInhociIsImZldGNoIiwiZm9yRWFjaCIsImZuIiwidmFsdWUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImUiLCJyZW5kZXJSZWFzb24iLCJyZWFzb24iLCJpc1Jlc29sdmVkSGFuZGxlIiwiYWRhcHRlciIsImlzRnVuY3Rpb24iLCJnZXRBZGFwdGVyIiwiYWRhcHRlcnMiLCJpc0FycmF5IiwibGVuZ3RoIiwibmFtZU9yQWRhcHRlciIsInJlamVjdGVkUmVhc29ucyIsImkiLCJpZCIsIlN0cmluZyIsInRvTG93ZXJDYXNlIiwidW5kZWZpbmVkIiwicmVhc29ucyIsImVudHJpZXMiLCJtYXAiLCJzdGF0ZSIsInMiLCJqb2luIiwiaXNGZXRjaFN1cHBvcnRlZCIsIlJlcXVlc3QiLCJSZXNwb25zZSIsImlzUmVhZGFibGVTdHJlYW1TdXBwb3J0ZWQiLCJSZWFkYWJsZVN0cmVhbSIsImVuY29kZVRleHQiLCJUZXh0RW5jb2RlciIsImVuY29kZXIiLCJzdHIiLCJlbmNvZGUiLCJhc3luYyIsIlVpbnQ4QXJyYXkiLCJhcnJheUJ1ZmZlciIsInRlc3QiLCJhcmdzIiwic3VwcG9ydHNSZXF1ZXN0U3RyZWFtIiwiZHVwbGV4QWNjZXNzZWQiLCJoYXNDb250ZW50VHlwZSIsIm9yaWdpbiIsImJvZHkiLCJtZXRob2QiLCJkdXBsZXgiLCJoZWFkZXJzIiwiaGFzIiwic3VwcG9ydHNSZXNwb25zZVN0cmVhbSIsImlzUmVhZGFibGVTdHJlYW0iLCJyZXNvbHZlcnMiLCJzdHJlYW0iLCJyZXMiLCJ0eXBlIiwiXyIsImNvbmZpZyIsIkVSUl9OT1RfU1VQUE9SVCIsInJlc29sdmVCb2R5TGVuZ3RoIiwidG9GaW5pdGVOdW1iZXIiLCJnZXRDb250ZW50TGVuZ3RoIiwiaXNCbG9iIiwic2l6ZSIsImlzU3BlY0NvbXBsaWFudEZvcm0iLCJfcmVxdWVzdCIsImJ5dGVMZW5ndGgiLCJpc0FycmF5QnVmZmVyVmlldyIsImlzQXJyYXlCdWZmZXIiLCJpc1VSTFNlYXJjaFBhcmFtcyIsImlzU3RyaW5nIiwiZ2V0Qm9keUxlbmd0aCIsInVybCIsImRhdGEiLCJzaWduYWwiLCJjYW5jZWxUb2tlbiIsInRpbWVvdXQiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwicmVzcG9uc2VUeXBlIiwid2l0aENyZWRlbnRpYWxzIiwiZmV0Y2hPcHRpb25zIiwicmVxdWVzdCIsImNvbXBvc2VkU2lnbmFsIiwidG9BYm9ydFNpZ25hbCIsInVuc3Vic2NyaWJlIiwicmVxdWVzdENvbnRlbnRMZW5ndGgiLCJjb250ZW50VHlwZUhlYWRlciIsImlzRm9ybURhdGEiLCJnZXQiLCJzZXRDb250ZW50VHlwZSIsIm9uUHJvZ3Jlc3MiLCJmbHVzaCIsInByb2dyZXNzRXZlbnREZWNvcmF0b3IiLCJwcm9ncmVzc0V2ZW50UmVkdWNlciIsImFzeW5jRGVjb3JhdG9yIiwidHJhY2tTdHJlYW0iLCJpc0NyZWRlbnRpYWxzU3VwcG9ydGVkIiwicHJvdG90eXBlIiwidG9VcHBlckNhc2UiLCJub3JtYWxpemUiLCJ0b0pTT04iLCJjcmVkZW50aWFscyIsInJlc3BvbnNlIiwiaXNTdHJlYW1SZXNwb25zZSIsIm9wdGlvbnMiLCJwcm9wIiwicmVzcG9uc2VDb250ZW50TGVuZ3RoIiwicmVzcG9uc2VEYXRhIiwiZmluZEtleSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnJvbSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJlcnIiLCJuYW1lIiwibWVzc2FnZSIsImFzc2lnbiIsIkVSUl9ORVRXT1JLIiwiY2F1c2UiLCJjb2RlIiwiaXNYSFJBZGFwdGVyU3VwcG9ydGVkIiwiWE1MSHR0cFJlcXVlc3QiLCJfY29uZmlnIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsIm9uQ2FuY2VsZWQiLCJ1cGxvYWRUaHJvdHRsZWQiLCJkb3dubG9hZFRocm90dGxlZCIsImZsdXNoVXBsb2FkIiwiZmx1c2hEb3dubG9hZCIsImRvbmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25sb2FkZW5kIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VUZXh0Iiwib3BlbiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsImluZGV4T2YiLCJzZXRUaW1lb3V0Iiwib25hYm9ydCIsIkVDT05OQUJPUlRFRCIsIm9uZXJyb3IiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwidHJhbnNpdGlvbmFsIiwiY2xhcmlmeVRpbWVvdXRFcnJvciIsIkVUSU1FRE9VVCIsInZhbCIsImtleSIsInNldFJlcXVlc3RIZWFkZXIiLCJpc1VuZGVmaW5lZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ1cGxvYWQiLCJjYW5jZWwiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJwcm90b2NvbCIsInByb3RvY29scyIsIkVSUl9CQURfUkVRVUVTVCIsInNlbmQiLCJheGlvcyIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsImNvbnRleHQiLCJpbnN0YW5jZSIsImV4dGVuZCIsImFsbE93bktleXMiLCJjcmVhdGUiLCJpbnN0YW5jZUNvbmZpZyIsIkF4aW9zIiwiQ2FuY2VsZWRFcnJvciIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJWRVJTSU9OIiwidG9Gb3JtRGF0YSIsIkF4aW9zRXJyb3IiLCJDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsIm1lcmdlQ29uZmlnIiwiQXhpb3NIZWFkZXJzIiwiZm9ybVRvSlNPTiIsInRoaW5nIiwiaXNIVE1MRm9ybSIsIkZvcm1EYXRhIiwiSHR0cFN0YXR1c0NvZGUiLCJkZWZhdWx0IiwiY29uc3RydWN0b3IiLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwidGhpcyIsInByb21pc2UiLCJ0b2tlbiIsInRoZW4iLCJfbGlzdGVuZXJzIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsInRocm93SWZSZXF1ZXN0ZWQiLCJsaXN0ZW5lciIsInB1c2giLCJpbmRleCIsInNwbGljZSIsImNvbnRyb2xsZXIiLCJBYm9ydENvbnRyb2xsZXIiLCJzb3VyY2UiLCJjIiwiY2FsbCIsIkVSUl9DQU5DRUxFRCIsImluaGVyaXRzIiwiX19DQU5DRUxfXyIsInZhbGlkYXRvcnMiLCJkZWZhdWx0cyIsImludGVyY2VwdG9ycyIsImNvbmZpZ09yVXJsIiwiRXJyb3IiLCJkdW1teSIsImNhcHR1cmVTdGFja1RyYWNlIiwic3RhY2siLCJyZXBsYWNlIiwiZW5kc1dpdGgiLCJwYXJhbXNTZXJpYWxpemVyIiwiYXNzZXJ0T3B0aW9ucyIsInNpbGVudEpTT05QYXJzaW5nIiwiYm9vbGVhbiIsImZvcmNlZEpTT05QYXJzaW5nIiwic2VyaWFsaXplIiwiZnVuY3Rpb24iLCJhbGxvd0Fic29sdXRlVXJscyIsImJhc2VVcmwiLCJzcGVsbGluZyIsIndpdGhYc3JmVG9rZW4iLCJjb250ZXh0SGVhZGVycyIsIm1lcmdlIiwiY29tbW9uIiwiY29uY2F0IiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJ1bldoZW4iLCJzeW5jaHJvbm91cyIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsImxlbiIsImNoYWluIiwiYmluZCIsImFwcGx5IiwibmV3Q29uZmlnIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZXJyb3IiLCJnZXRVcmkiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJwYXJhbXMiLCJnZW5lcmF0ZUhUVFBNZXRob2QiLCJpc0Zvcm0iLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInRvSlNPTk9iamVjdCIsImRlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImN1c3RvbVByb3BzIiwiYXhpb3NFcnJvciIsInRvRmxhdE9iamVjdCIsIm9iaiIsIiRpbnRlcm5hbHMiLCJTeW1ib2wiLCJub3JtYWxpemVIZWFkZXIiLCJoZWFkZXIiLCJ0cmltIiwibm9ybWFsaXplVmFsdWUiLCJtYXRjaEhlYWRlclZhbHVlIiwiZmlsdGVyIiwiaXNIZWFkZXJOYW1lRmlsdGVyIiwiaXNSZWdFeHAiLCJzZXQiLCJ2YWx1ZU9yUmV3cml0ZSIsInJld3JpdGUiLCJzZWxmIiwic2V0SGVhZGVyIiwiX3ZhbHVlIiwiX2hlYWRlciIsIl9yZXdyaXRlIiwibEhlYWRlciIsInNldEhlYWRlcnMiLCJpc1BsYWluT2JqZWN0IiwiaXNPYmplY3QiLCJpc0l0ZXJhYmxlIiwiZGVzdCIsImVudHJ5IiwicGFyc2VyIiwidG9rZW5zIiwidG9rZW5zUkUiLCJtYXRjaCIsImV4ZWMiLCJwYXJzZVRva2VucyIsIm1hdGNoZXIiLCJkZWxldGVkIiwiZGVsZXRlSGVhZGVyIiwiY2xlYXIiLCJrZXlzIiwiZm9ybWF0Iiwibm9ybWFsaXplZCIsInciLCJjaGFyIiwiZm9ybWF0SGVhZGVyIiwidGFyZ2V0cyIsImFzU3RyaW5ncyIsIml0ZXJhdG9yIiwidG9TdHJpbmciLCJnZXRTZXRDb29raWUiLCJ0b1N0cmluZ1RhZyIsImZpcnN0IiwiY29tcHV0ZWQiLCJ0YXJnZXQiLCJhY2Nlc3NvciIsImFjY2Vzc29ycyIsImRlZmluZUFjY2Vzc29yIiwiYWNjZXNzb3JOYW1lIiwidG9DYW1lbENhc2UiLCJtZXRob2ROYW1lIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiY29uZmlndXJhYmxlIiwiYnVpbGRBY2Nlc3NvcnMiLCJyZWR1Y2VEZXNjcmlwdG9ycyIsIm1hcHBlZCIsInNsaWNlIiwiaGVhZGVyVmFsdWUiLCJmcmVlemVNZXRob2RzIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImgiLCJidWlsZEZ1bGxQYXRoIiwicmVxdWVzdGVkVVJMIiwiaXNSZWxhdGl2ZVVybCIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJkaXNwYXRjaFJlcXVlc3QiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJoZWFkZXJzVG9PYmplY3QiLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwiY2FzZWxlc3MiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwiYSIsImIiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwidGltZW91dE1lc3NhZ2UiLCJ3aXRoWFNSRlRva2VuIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsImRlY29tcHJlc3MiLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsImJlZm9yZVJlZGlyZWN0IiwidHJhbnNwb3J0IiwiaHR0cEFnZW50IiwiaHR0cHNBZ2VudCIsInNvY2tldFBhdGgiLCJyZXNwb25zZUVuY29kaW5nIiwidmFsaWRhdGVTdGF0dXMiLCJjb25maWdWYWx1ZSIsInNldHRsZSIsIkVSUl9CQURfUkVTUE9OU0UiLCJNYXRoIiwiZmxvb3IiLCJ0cmFuc2Zvcm1EYXRhIiwiZm5zIiwiY29udGVudFR5cGUiLCJnZXRDb250ZW50VHlwZSIsImhhc0pTT05Db250ZW50VHlwZSIsImlzT2JqZWN0UGF5bG9hZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpc0J1ZmZlciIsImlzU3RyZWFtIiwiaXNGaWxlIiwiYnVmZmVyIiwiaXNGaWxlTGlzdCIsImZvcm1TZXJpYWxpemVyIiwiX0Zvcm1EYXRhIiwiZW52IiwicmF3VmFsdWUiLCJwYXJzZSIsInN0cmluZ2lmeVNhZmVseSIsIkpTT05SZXF1ZXN0ZWQiLCJpc1Jlc3BvbnNlIiwic3RyaWN0SlNPTlBhcnNpbmciLCJjbGFzc2VzIiwiQmxvYiIsImNoYXJNYXAiLCJlbmNvZGVVUklDb21wb25lbnQiLCJBeGlvc1VSTFNlYXJjaFBhcmFtcyIsIl9wYWlycyIsImFwcGVuZCIsIl9lbmNvZGUiLCJwYWlyIiwiQ29udGludWUiLCJTd2l0Y2hpbmdQcm90b2NvbHMiLCJQcm9jZXNzaW5nIiwiRWFybHlIaW50cyIsIk9rIiwiQ3JlYXRlZCIsIkFjY2VwdGVkIiwiTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uIiwiTm9Db250ZW50IiwiUmVzZXRDb250ZW50IiwiUGFydGlhbENvbnRlbnQiLCJNdWx0aVN0YXR1cyIsIkFscmVhZHlSZXBvcnRlZCIsIkltVXNlZCIsIk11bHRpcGxlQ2hvaWNlcyIsIk1vdmVkUGVybWFuZW50bHkiLCJGb3VuZCIsIlNlZU90aGVyIiwiTm90TW9kaWZpZWQiLCJVc2VQcm94eSIsIlVudXNlZCIsIlRlbXBvcmFyeVJlZGlyZWN0IiwiUGVybWFuZW50UmVkaXJlY3QiLCJCYWRSZXF1ZXN0IiwiVW5hdXRob3JpemVkIiwiUGF5bWVudFJlcXVpcmVkIiwiRm9yYmlkZGVuIiwiTm90Rm91bmQiLCJNZXRob2ROb3RBbGxvd2VkIiwiTm90QWNjZXB0YWJsZSIsIlByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZCIsIlJlcXVlc3RUaW1lb3V0IiwiQ29uZmxpY3QiLCJHb25lIiwiTGVuZ3RoUmVxdWlyZWQiLCJQcmVjb25kaXRpb25GYWlsZWQiLCJQYXlsb2FkVG9vTGFyZ2UiLCJVcmlUb29Mb25nIiwiVW5zdXBwb3J0ZWRNZWRpYVR5cGUiLCJSYW5nZU5vdFNhdGlzZmlhYmxlIiwiRXhwZWN0YXRpb25GYWlsZWQiLCJJbUFUZWFwb3QiLCJNaXNkaXJlY3RlZFJlcXVlc3QiLCJVbnByb2Nlc3NhYmxlRW50aXR5IiwiTG9ja2VkIiwiRmFpbGVkRGVwZW5kZW5jeSIsIlRvb0Vhcmx5IiwiVXBncmFkZVJlcXVpcmVkIiwiUHJlY29uZGl0aW9uUmVxdWlyZWQiLCJUb29NYW55UmVxdWVzdHMiLCJSZXF1ZXN0SGVhZGVyRmllbGRzVG9vTGFyZ2UiLCJVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29ucyIsIkludGVybmFsU2VydmVyRXJyb3IiLCJOb3RJbXBsZW1lbnRlZCIsIkJhZEdhdGV3YXkiLCJTZXJ2aWNlVW5hdmFpbGFibGUiLCJHYXRld2F5VGltZW91dCIsIkh0dHBWZXJzaW9uTm90U3VwcG9ydGVkIiwiVmFyaWFudEFsc29OZWdvdGlhdGVzIiwiSW5zdWZmaWNpZW50U3RvcmFnZSIsIkxvb3BEZXRlY3RlZCIsIk5vdEV4dGVuZGVkIiwiTmV0d29ya0F1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJ0aGlzQXJnIiwiYXJndW1lbnRzIiwiYnVpbGRVUkwiLCJzZXJpYWxpemVGbiIsInNlcmlhbGl6ZWRQYXJhbXMiLCJoYXNobWFya0luZGV4IiwiY29tYmluZVVSTHMiLCJyZWxhdGl2ZVVSTCIsInNpZ25hbHMiLCJCb29sZWFuIiwidGltZXIiLCJjbGVhclRpbWVvdXQiLCJhc2FwIiwiaGFzU3RhbmRhcmRCcm93c2VyRW52Iiwid3JpdGUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsImlzTnVtYmVyIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwiZG9jdW1lbnQiLCJyZWFkIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93IiwiZm9ybURhdGEiLCJidWlsZFBhdGgiLCJpc051bWVyaWNLZXkiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImlzTGFzdCIsImhhc093blByb3AiLCJhcnIiLCJhcnJheVRvT2JqZWN0IiwiZm9yRWFjaEVudHJ5IiwibWF0Y2hBbGwiLCJwYXJzZVByb3BQYXRoIiwiaXNBYnNvbHV0ZVVSTCIsInBheWxvYWQiLCJpc01TSUUiLCJVUkwiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJob3N0IiwicG9ydCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwidG9PYmplY3RTZXQiLCJyYXdIZWFkZXJzIiwicGFyc2VkIiwic3BsaXQiLCJsaW5lIiwic3Vic3RyaW5nIiwicGFyc2VQcm90b2NvbCIsImlzRG93bmxvYWRTdHJlYW0iLCJmcmVxIiwiYnl0ZXNOb3RpZmllZCIsIl9zcGVlZG9tZXRlciIsImxvYWRlZCIsInRvdGFsIiwibGVuZ3RoQ29tcHV0YWJsZSIsInByb2dyZXNzQnl0ZXMiLCJyYXRlIiwicHJvZ3Jlc3MiLCJieXRlcyIsImVzdGltYXRlZCIsImV2ZW50IiwidGhyb3R0bGVkIiwiYXV0aCIsImJ0b2EiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidW5lc2NhcGUiLCJoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYiLCJ4c3JmVmFsdWUiLCJzYW1wbGVzQ291bnQiLCJtaW4iLCJBcnJheSIsInRpbWVzdGFtcHMiLCJmaXJzdFNhbXBsZVRTIiwiaGVhZCIsInRhaWwiLCJjaHVua0xlbmd0aCIsInN0YXJ0ZWRBdCIsImJ5dGVzQ291bnQiLCJwYXNzZWQiLCJyb3VuZCIsImNhbGxiYWNrIiwibGFzdEFyZ3MiLCJ0aW1lc3RhbXAiLCJ0aHJlc2hvbGQiLCJpbnZva2UiLCJpc1Zpc2l0YWJsZSIsInJlbW92ZUJyYWNrZXRzIiwicmVuZGVyS2V5IiwiZG90cyIsInByZWRpY2F0ZXMiLCJtZXRhVG9rZW5zIiwiaW5kZXhlcyIsIm9wdGlvbiIsInZpc2l0b3IiLCJkZWZhdWx0VmlzaXRvciIsInVzZUJsb2IiLCJjb252ZXJ0VmFsdWUiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImlzVHlwZWRBcnJheSIsIkJ1ZmZlciIsInNvbWUiLCJpc0ZsYXRBcnJheSIsInRvQXJyYXkiLCJlbCIsImV4cG9zZWRIZWxwZXJzIiwiYnVpbGQiLCJwb3AiLCJ0b1VSTEVuY29kZWRGb3JtIiwiVVJMU2VhcmNoUGFyYW1zIiwiaGVscGVycyIsImlzTm9kZSIsInN0cmVhbUNodW5rIiwiY2h1bmsiLCJjaHVua1NpemUiLCJlbmQiLCJwb3MiLCJyZWFkQnl0ZXMiLCJpdGVyYWJsZSIsInJlYWRTdHJlYW0iLCJhc3luY0l0ZXJhdG9yIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwib25GaW5pc2giLCJfb25GaW5pc2giLCJwdWxsIiwibmV4dCIsImNsb3NlIiwibG9hZGVkQnl0ZXMiLCJlbnF1ZXVlIiwicmV0dXJuIiwiaGlnaFdhdGVyTWFyayIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInZhbGlkYXRvciIsInZlcnNpb24iLCJvcHQiLCJvcHRzIiwiZGVzYyIsImZvcm1hdE1lc3NhZ2UiLCJFUlJfREVQUkVDQVRFRCIsImNvcnJlY3RTcGVsbGluZyIsInNjaGVtYSIsImFsbG93VW5rbm93biIsIkVSUl9CQURfT1BUSU9OX1ZBTFVFIiwicmVzdWx0IiwiRVJSX0JBRF9PUFRJT04iLCJpc0Jyb3dzZXIiLCJoYXNCcm93c2VyRW52Iiwid2luZG93IiwiX25hdmlnYXRvciIsInByb2R1Y3QiLCJXb3JrZXJHbG9iYWxTY29wZSIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImhyZWYiLCJnZXRQcm90b3R5cGVPZiIsImtpbmRPZiIsImNhY2hlIiwia2luZE9mVGVzdCIsInR5cGVPZlRlc3QiLCJpc1JlcXVlc3QiLCJpc0hlYWRlcnMiLCJsIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9rZXkiLCJfZ2xvYmFsIiwiZ2xvYmFsVGhpcyIsImdsb2JhbCIsImlzQ29udGV4dERlZmluZWQiLCJUeXBlZEFycmF5IiwiaGFzT3duUHJvcGVydHkiLCJyZWR1Y2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInJlZHVjZWREZXNjcmlwdG9ycyIsImRlc2NyaXB0b3IiLCJyZXQiLCJpc0FzeW5jRm4iLCJfc2V0SW1tZWRpYXRlIiwic2V0SW1tZWRpYXRlU3VwcG9ydGVkIiwic2V0SW1tZWRpYXRlIiwicG9zdE1lc3NhZ2VTdXBwb3J0ZWQiLCJwb3N0TWVzc2FnZSIsInJhbmRvbSIsImNhbGxiYWNrcyIsInNoaWZ0IiwiY2IiLCJxdWV1ZU1pY3JvdGFzayIsInByb2Nlc3MiLCJuZXh0VGljayIsImtpbmQiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImlzQm9vbGVhbiIsInBpcGUiLCJhc3NpZ25WYWx1ZSIsInRhcmdldEtleSIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJDb2RlQXQiLCJzdXBlckNvbnN0cnVjdG9yIiwicHJvcHMiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwicHJvcEZpbHRlciIsIm1lcmdlZCIsInNlYXJjaFN0cmluZyIsInBvc2l0aW9uIiwibGFzdEluZGV4IiwiX2l0ZXJhdG9yIiwicmVnRXhwIiwibWF0Y2hlcyIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImFycmF5T3JTdHJpbmciLCJkZWxpbWl0ZXIiLCJkZWZpbmUiLCJtIiwicDEiLCJwMiIsIm5vb3AiLCJkZWZhdWx0VmFsdWUiLCJ2aXNpdCIsInJlZHVjZWRWYWx1ZSIsImlzVGhlbmFibGUiLCJjYXRjaCIsImNvbXBvbmVudHMiLCJOYXZpZ2F0aW9uTWVudSIsIlNpbmdsZVBvc3RHb29nbGVNYXAiLCJNYWluRm9vdGVyIiwibG9jYWxfZGF0YV9wcmltYXJ5X21lbnVfZm9vdGVyIiwidGhlbWVfdmFycyIsIm1vYmlsZSIsIm1vYmlsZUZvb3RlciIsIndpbmRvd1dpZHRoIiwiY3JlYXRlZCIsImNoZWNrU2NyZWVuIiwibW91bnRlZCIsImhhbmRsZUNsaWNrT3V0c2lkZURyb3Bkb3duTWVudSIsImJlZm9yZVVubW91bnQiLCJtZXRob2RzIiwidG9nZ2xlbW9iaWxlRm9vdGVyIiwiaW5uZXJXaWR0aCIsImNsYXNzTmFtZSIsImxvY2FsX2RhdGFfcHJpbWFyeV9tZW51IiwibW9iaWxlTmF2IiwibW9iaWxlTmF2SXNPcGVuIiwidG9nZ2xlTW9iaWxlTmF2IiwiR29vZ2xlTWFwIiwiTWFya2VyIiwiSW5mb1dpbmRvdyIsImxvY2FsX2RhdGFfcG9zdF9pZCIsInBvc3QiLCJZT1VSX0dPT0dMRV9NQVBTX0FQSV9LRVkiLCJ0aXRsZSIsImFkZHJlc3MiLCJjZW50ZXIiLCJsb2FkaW5nIiwibWFwWm9vbSIsImluZm9XaW5kb3dQb3NpdGlvbiIsImxhdCIsImxuZyIsImluZm9XaW5kb3dPcGVuZWQiLCJzZWxlY3RlZE1hcmtlciIsImFjZiIsImd1aWRlc19sb2NhdGlvbiIsIm9wZW5JbmZvV2luZG93IiwiY2xvc2VJbmZvV2luZG93IiwiZ2V0X3RpdGxlIiwiY3VycmVudF90aXRsZSIsImdldEdvb2dsZU1hcHNEaXJlY3Rpb25zTGlua2UiLCJfY3JlYXRlVk5vZGUiLCJfY29tcG9uZW50X25hdmlnYXRpb24iLCJfY29tcG9uZW50X3NpbmdsZXBvc3Rnb29nbGVtYXAiLCJfY29tcG9uZW50X21haW5mb290ZXIiLCJjbGFzcyIsIl9jcmVhdGVFbGVtZW50QmxvY2siLCJfaG9pc3RlZF8xIiwiX2NyZWF0ZUVsZW1lbnRWTm9kZSIsIl9ob2lzdGVkXzIiLCJfRnJhZ21lbnQiLCJfcmVuZGVyTGlzdCIsIiRkYXRhIiwiaXRlbSIsInJlbCIsIl9ob2lzdGVkXzMiLCJpZiIsInNyYyIsImFsdCIsIm9uQ2xpY2siLCJfY2FjaGUiLCIkb3B0aW9ucyIsIl9ub3JtYWxpemVDbGFzcyIsIl9UcmFuc2l0aW9uIiwicGVyc2lzdGVkIiwiX2hvaXN0ZWRfNCIsIl9ob2lzdGVkXzUiLCJfaG9pc3RlZF82IiwiX3RvRGlzcGxheVN0cmluZyIsInJlbmRlcmVkIiwicmVnaXN0cmF0aW9uIiwiX2hvaXN0ZWRfNyIsInBob25lIiwiX2hvaXN0ZWRfOCIsImh1bnRfdW5pdHMiLCJfaG9pc3RlZF85Iiwid2Vic2l0ZSIsIl9ob2lzdGVkXzEwIiwib3BlbmVkcmFuZ2VfdmVyaWZpZWQiLCJfaG9pc3RlZF8xMSIsIl9ob2lzdGVkXzEyIiwiX2NvbXBvbmVudF9Hb29nbGVNYXAiLCJzdHlsZSIsInpvb20iLCJfY29tcG9uZW50X01hcmtlciIsIl9jb21wb25lbnRfSW5mb1dpbmRvdyIsIl9ob2lzdGVkXzEzIiwiX2hvaXN0ZWRfMTUiLCJleHBvcnRzIiwic2ZjIiwiX192Y2NPcHRzIiwibWFrZU1hcCIsIkVNUFRZX09CSiIsImZyZWV6ZSIsIkVNUFRZX0FSUiIsIk5PT1AiLCJOTyIsImlzT24iLCJpc01vZGVsTGlzdGVuZXIiLCJzdGFydHNXaXRoIiwiaGFzT3duUHJvcGVydHkkMSIsImhhc093biIsImlzTWFwIiwidG9UeXBlU3RyaW5nIiwiaXNTZXQiLCJpc1N5bWJvbCIsImlzUHJvbWlzZSIsIm9iamVjdFRvU3RyaW5nIiwidG9SYXdUeXBlIiwiaXNJbnRlZ2VyS2V5IiwicGFyc2VJbnQiLCJpc1Jlc2VydmVkUHJvcCIsImlzQnVpbHRJbkRpcmVjdGl2ZSIsImNhY2hlU3RyaW5nRnVuY3Rpb24iLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJ0b0hhbmRsZXJLZXkiLCJoYXNDaGFuZ2VkIiwib2xkVmFsdWUiLCJpcyIsImludm9rZUFycmF5Rm5zIiwiYXJnIiwiZGVmIiwibG9vc2VUb051bWJlciIsIm4iLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJ0b051bWJlciIsIk5hTiIsIl9nbG9iYWxUaGlzIiwiZ2V0R2xvYmFsVGhpcyIsImciLCJQYXRjaEZsYWdOYW1lcyIsInNsb3RGbGFnc1RleHQiLCJpc0dsb2JhbGx5QWxsb3dlZCIsInJhbmdlIiwibm9ybWFsaXplU3R5bGUiLCJwYXJzZVN0cmluZ1N0eWxlIiwibGlzdERlbGltaXRlclJFIiwicHJvcGVydHlEZWxpbWl0ZXJSRSIsInN0eWxlQ29tbWVudFJFIiwiY3NzVGV4dCIsInRtcCIsIm5vcm1hbGl6ZUNsYXNzIiwibm9ybWFsaXplUHJvcHMiLCJrbGFzcyIsImlzSFRNTFRhZyIsImlzU1ZHVGFnIiwiaXNNYXRoTUxUYWciLCJpc1ZvaWRUYWciLCJzcGVjaWFsQm9vbGVhbkF0dHJzIiwiaXNTcGVjaWFsQm9vbGVhbkF0dHIiLCJpc0Jvb2xlYW5BdHRyIiwiaW5jbHVkZUJvb2xlYW5BdHRyIiwiaXNLbm93bkh0bWxBdHRyIiwiaXNLbm93blN2Z0F0dHIiLCJjc3NWYXJOYW1lRXNjYXBlU3ltYm9sc1JFIiwiZ2V0RXNjYXBlZENzc1Zhck5hbWUiLCJkb3VibGVFc2NhcGUiLCJsb29zZUVxdWFsIiwiYVZhbGlkVHlwZSIsImJWYWxpZFR5cGUiLCJnZXRUaW1lIiwiZXF1YWwiLCJsb29zZUNvbXBhcmVBcnJheXMiLCJhSGFzS2V5IiwiYkhhc0tleSIsImxvb3NlSW5kZXhPZiIsImZpbmRJbmRleCIsImlzUmVmJDEiLCJ0b0Rpc3BsYXlTdHJpbmciLCJyZXBsYWNlciIsInJlZHVjZSIsInZhbDIiLCJzdHJpbmdpZnlTeW1ib2wiLCJ2YWx1ZXMiLCJ2IiwiX2EiLCJ3YXJuJDIiLCJtc2ciLCJhY3RpdmVFZmZlY3RTY29wZSIsImFjdGl2ZVN1YiIsIkVmZmVjdFNjb3BlIiwiZGV0YWNoZWQiLCJfYWN0aXZlIiwiX29uIiwiZWZmZWN0cyIsImNsZWFudXBzIiwiX2lzUGF1c2VkIiwicGFyZW50Iiwic2NvcGVzIiwiYWN0aXZlIiwicGF1c2UiLCJyZXN1bWUiLCJydW4iLCJjdXJyZW50RWZmZWN0U2NvcGUiLCJvbiIsInByZXZTY29wZSIsIm9mZiIsInN0b3AiLCJmcm9tUGFyZW50IiwibGFzdCIsImVmZmVjdFNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwib25TY29wZURpc3Bvc2UiLCJmYWlsU2lsZW50bHkiLCJwYXVzZWRRdWV1ZUVmZmVjdHMiLCJXZWFrU2V0IiwiUmVhY3RpdmVFZmZlY3QiLCJkZXBzIiwiZGVwc1RhaWwiLCJmbGFncyIsImNsZWFudXAiLCJzY2hlZHVsZXIiLCJkZWxldGUiLCJ0cmlnZ2VyIiwibm90aWZ5IiwiYmF0Y2giLCJjbGVhbnVwRWZmZWN0IiwicHJlcGFyZURlcHMiLCJwcmV2RWZmZWN0IiwicHJldlNob3VsZFRyYWNrIiwic2hvdWxkVHJhY2siLCJjbGVhbnVwRGVwcyIsImxpbmsiLCJuZXh0RGVwIiwicmVtb3ZlU3ViIiwib25TdG9wIiwiYWRkIiwicnVuSWZEaXJ0eSIsImlzRGlydHkiLCJkaXJ0eSIsImJhdGNoZWRTdWIiLCJiYXRjaGVkQ29tcHV0ZWQiLCJiYXRjaERlcHRoIiwic3ViIiwiaXNDb21wdXRlZCIsInN0YXJ0QmF0Y2giLCJlbmRCYXRjaCIsInByZXZBY3RpdmVMaW5rIiwiZGVwIiwiYWN0aXZlTGluayIsInByZXYiLCJwcmV2RGVwIiwicmVtb3ZlRGVwIiwicmVmcmVzaENvbXB1dGVkIiwiX2RpcnR5IiwiZ2xvYmFsVmVyc2lvbiIsImlzU1NSIiwicHJldlN1YiIsInNvZnQiLCJuZXh0U3ViIiwic3Vic0hlYWQiLCJzdWJzIiwic2MiLCJlZmZlY3QiLCJydW5uZXIiLCJ0cmFja1N0YWNrIiwicGF1c2VUcmFja2luZyIsInJlc2V0VHJhY2tpbmciLCJMaW5rIiwiRGVwIiwidHJhY2siLCJkZWJ1Z0luZm8iLCJhZGRTdWIiLCJvblRyYWNrIiwib25UcmlnZ2VyIiwiY3VycmVudFRhaWwiLCJ0YXJnZXRNYXAiLCJXZWFrTWFwIiwiSVRFUkFURV9LRVkiLCJNQVBfS0VZX0lURVJBVEVfS0VZIiwiQVJSQVlfSVRFUkFURV9LRVkiLCJkZXBzTWFwIiwiTWFwIiwibmV3VmFsdWUiLCJvbGRUYXJnZXQiLCJ0YXJnZXRJc0FycmF5IiwiaXNBcnJheUluZGV4IiwibmV3TGVuZ3RoIiwia2V5MiIsInJlYWN0aXZlUmVhZEFycmF5IiwiYXJyYXkiLCJyYXciLCJ0b1JhdyIsImlzU2hhbGxvdyIsInRvUmVhY3RpdmUiLCJzaGFsbG93UmVhZEFycmF5IiwiYXJyYXlJbnN0cnVtZW50YXRpb25zIiwiX19wcm90b19fIiwieCIsImV2ZXJ5IiwiZmluZCIsImZpbmRMYXN0IiwiZmluZExhc3RJbmRleCIsImluY2x1ZGVzIiwic2VhcmNoUHJveHkiLCJzZXBhcmF0b3IiLCJsYXN0SW5kZXhPZiIsIm5vVHJhY2tpbmciLCJyZWR1Y2VSaWdodCIsInRvUmV2ZXJzZWQiLCJ0b1NvcnRlZCIsImNvbXBhcmVyIiwidG9TcGxpY2VkIiwid3JhcFZhbHVlIiwiaXRlciIsIl9uZXh0IiwiYXJyYXlQcm90byIsIndyYXBwZWRSZXRGbiIsIm5lZWRzV3JhcCIsIm1ldGhvZEZuIiwicmVzdWx0MiIsIndyYXBwZWRGbiIsImFjYyIsImlzUHJveHkiLCJpc05vblRyYWNrYWJsZUtleXMiLCJidWlsdEluU3ltYm9scyIsIlNldCIsIkJhc2VSZWFjdGl2ZUhhbmRsZXIiLCJfaXNSZWFkb25seSIsIl9pc1NoYWxsb3ciLCJyZWNlaXZlciIsImlzUmVhZG9ubHkyIiwiaXNTaGFsbG93MiIsInNoYWxsb3dSZWFkb25seU1hcCIsInJlYWRvbmx5TWFwIiwic2hhbGxvd1JlYWN0aXZlTWFwIiwicmVhY3RpdmVNYXAiLCJSZWZsZWN0IiwiaXNSZWYiLCJyZWFkb25seSIsInJlYWN0aXZlIiwiTXV0YWJsZVJlYWN0aXZlSGFuZGxlciIsInN1cGVyIiwiaXNPbGRWYWx1ZVJlYWRvbmx5IiwiaXNSZWFkb25seSIsImhhZEtleSIsImRlbGV0ZVByb3BlcnR5Iiwib3duS2V5cyIsIlJlYWRvbmx5UmVhY3RpdmVIYW5kbGVyIiwibXV0YWJsZUhhbmRsZXJzIiwicmVhZG9ubHlIYW5kbGVycyIsInNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzIiwic2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMiLCJ0b1NoYWxsb3ciLCJnZXRQcm90byIsImNyZWF0ZVJlYWRvbmx5TWV0aG9kIiwiY3JlYXRlSW5zdHJ1bWVudGF0aW9ucyIsInNoYWxsb3ciLCJpbnN0cnVtZW50YXRpb25zIiwicmF3VGFyZ2V0IiwicmF3S2V5Iiwid3JhcCIsInRvUmVhZG9ubHkiLCJvYnNlcnZlZCIsImNoZWNrSWRlbnRpdHlLZXlzIiwiaGFkSXRlbXMiLCJ0YXJnZXRJc01hcCIsImlzUGFpciIsImlzS2V5T25seSIsImlubmVySXRlcmF0b3IiLCJjcmVhdGVJdGVyYWJsZU1ldGhvZCIsImNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlciIsIm11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMiLCJzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzIiwicmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMiLCJzaGFsbG93UmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMiLCJjcmVhdGVSZWFjdGl2ZU9iamVjdCIsInNoYWxsb3dSZWFjdGl2ZSIsInNoYWxsb3dSZWFkb25seSIsImJhc2VIYW5kbGVycyIsImNvbGxlY3Rpb25IYW5kbGVycyIsInByb3h5TWFwIiwidGFyZ2V0VHlwZSIsImlzRXh0ZW5zaWJsZSIsInJhd1R5cGUiLCJ0YXJnZXRUeXBlTWFwIiwiZXhpc3RpbmdQcm94eSIsInByb3h5IiwiUHJveHkiLCJpc1JlYWN0aXZlIiwibWFya1JhdyIsInIiLCJyZWYiLCJjcmVhdGVSZWYiLCJzaGFsbG93UmVmIiwiUmVmSW1wbCIsIl9yYXdWYWx1ZSIsInVzZURpcmVjdFZhbHVlIiwidHJpZ2dlclJlZiIsInJlZjIiLCJ1bnJlZiIsInRvVmFsdWUiLCJzaGFsbG93VW53cmFwSGFuZGxlcnMiLCJwcm94eVJlZnMiLCJvYmplY3RXaXRoUmVmcyIsIkN1c3RvbVJlZkltcGwiLCJmYWN0b3J5IiwiX2dldCIsIl9zZXQiLCJuZXdWYWwiLCJjdXN0b21SZWYiLCJ0b1JlZnMiLCJvYmplY3QiLCJwcm9wZXJ0eVRvUmVmIiwiT2JqZWN0UmVmSW1wbCIsIl9vYmplY3QiLCJfZGVmYXVsdFZhbHVlIiwiZGVwTWFwIiwiZ2V0RGVwRnJvbVJlYWN0aXZlIiwiR2V0dGVyUmVmSW1wbCIsIl9nZXR0ZXIiLCJ0b1JlZiIsIkNvbXB1dGVkUmVmSW1wbCIsInNldHRlciIsIl9fdl9pc1JlZiIsIlRyYWNrT3BUeXBlcyIsIlRyaWdnZXJPcFR5cGVzIiwiSU5JVElBTF9XQVRDSEVSX1ZBTFVFIiwiY2xlYW51cE1hcCIsImFjdGl2ZVdhdGNoZXIiLCJnZXRDdXJyZW50V2F0Y2hlciIsIm9uV2F0Y2hlckNsZWFudXAiLCJjbGVhbnVwRm4iLCJvd25lciIsInRyYXZlcnNlIiwiZGVwdGgiLCJJbmZpbml0eSIsInNlZW4iLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInN0YWNrJDEiLCJwdXNoV2FybmluZ0NvbnRleHQiLCJ2bm9kZSIsInBvcFdhcm5pbmdDb250ZXh0IiwiaXNXYXJuaW5nIiwid2FybiQxIiwiY29tcG9uZW50IiwiYXBwV2FybkhhbmRsZXIiLCJhcHBDb250ZXh0Iiwid2FybkhhbmRsZXIiLCJ0cmFjZSIsImN1cnJlbnRWTm9kZSIsIm5vcm1hbGl6ZWRTdGFjayIsInJlY3Vyc2VDb3VudCIsInBhcmVudEluc3RhbmNlIiwiZ2V0Q29tcG9uZW50VHJhY2UiLCJjYWxsV2l0aEVycm9ySGFuZGxpbmciLCJfYiIsImZvcm1hdENvbXBvbmVudE5hbWUiLCJ3YXJuQXJncyIsImxvZ3MiLCJwb3N0Zml4IiwiaXNSb290IiwiZm9ybWF0UHJvcHMiLCJmb3JtYXRUcmFjZUVudHJ5IiwiZm9ybWF0VHJhY2UiLCJmb3JtYXRQcm9wIiwiYXNzZXJ0TnVtYmVyIiwiRXJyb3JDb2RlcyIsIkVycm9yVHlwZVN0cmluZ3MkMSIsImhhbmRsZUVycm9yIiwiY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmciLCJ0aHJvd0luRGV2IiwiY29udGV4dFZOb2RlIiwiZXJyb3JIYW5kbGVyIiwidGhyb3dVbmhhbmRsZWRFcnJvckluUHJvZHVjdGlvbiIsImN1ciIsImV4cG9zZWRJbnN0YW5jZSIsImVycm9ySW5mbyIsImVycm9yQ2FwdHVyZWRIb29rcyIsImVjIiwiaW5mbyIsImxvZ0Vycm9yIiwicXVldWUiLCJmbHVzaEluZGV4IiwicGVuZGluZ1Bvc3RGbHVzaENicyIsImFjdGl2ZVBvc3RGbHVzaENicyIsInBvc3RGbHVzaEluZGV4IiwicmVzb2x2ZWRQcm9taXNlIiwiY3VycmVudEZsdXNoUHJvbWlzZSIsIlJFQ1VSU0lPTl9MSU1JVCIsInAiLCJxdWV1ZUpvYiIsImpvYiIsImpvYklkIiwiZ2V0SWQiLCJsYXN0Sm9iIiwic3RhcnQiLCJtaWRkbGUiLCJtaWRkbGVKb2IiLCJtaWRkbGVKb2JJZCIsImZpbmRJbnNlcnRpb25JbmRleCIsInF1ZXVlRmx1c2giLCJmbHVzaEpvYnMiLCJxdWV1ZVBvc3RGbHVzaENiIiwiZmx1c2hQcmVGbHVzaENicyIsInVpZCIsImNoZWNrUmVjdXJzaXZlVXBkYXRlcyIsImZsdXNoUG9zdEZsdXNoQ2JzIiwiZGVkdXBlZCIsInNvcnQiLCJjaGVjayIsImNvdW50IiwiY29tcG9uZW50TmFtZSIsImdldENvbXBvbmVudE5hbWUiLCJpc0htclVwZGF0aW5nIiwiaG1yRGlydHlDb21wb25lbnRzIiwiX19WVUVfSE1SX1JVTlRJTUVfXyIsImNyZWF0ZVJlY29yZCIsInRyeVdyYXAiLCJyZXJlbmRlciIsIm5ld1JlbmRlciIsInJlY29yZCIsImluaXRpYWxEZWYiLCJpbnN0YW5jZXMiLCJub3JtYWxpemVDbGFzc0NvbXBvbmVudCIsInJlbmRlckNhY2hlIiwidXBkYXRlIiwicmVsb2FkIiwibmV3Q29tcCIsInVwZGF0ZUNvbXBvbmVudERlZiIsIm9sZENvbXAiLCJkaXJ0eUluc3RhbmNlcyIsInByb3BzQ2FjaGUiLCJlbWl0c0NhY2hlIiwib3B0aW9uc0NhY2hlIiwiY2VSZWxvYWQiLCJzdHlsZXMiLCJyb290IiwiY2UiLCJfcmVtb3ZlQ2hpbGRTdHlsZSIsImlzQ2xhc3NDb21wb25lbnQiLCJkZXZ0b29scyQxIiwiZGV2dG9vbHNOb3RJbnN0YWxsZWQiLCJlbWl0JDEiLCJlbWl0Iiwic2V0RGV2dG9vbHNIb29rJDEiLCJob29rIiwiZW5hYmxlZCIsIkhUTUxFbGVtZW50IiwiX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyIsIm5ld0hvb2siLCJkZXZ0b29sc0NvbXBvbmVudEFkZGVkIiwiY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rIiwiZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkIiwiX2RldnRvb2xzQ29tcG9uZW50UmVtb3ZlZCIsImRldnRvb2xzQ29tcG9uZW50UmVtb3ZlZCIsImNsZWFudXBCdWZmZXIiLCJhcHAiLCJkZXZ0b29sc1BlcmZTdGFydCIsImNyZWF0ZURldnRvb2xzUGVyZm9ybWFuY2VIb29rIiwiZGV2dG9vbHNQZXJmRW5kIiwidGltZSIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsImN1cnJlbnRTY29wZUlkIiwic2V0Q3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwiX19zY29wZUlkIiwicHVzaFNjb3BlSWQiLCJwb3BTY29wZUlkIiwid2l0aFNjb3BlSWQiLCJfaWQiLCJ3aXRoQ3R4IiwiY3R4IiwiaXNOb25TY29wZWRTbG90IiwiX24iLCJyZW5kZXJGbldpdGhDb250ZXh0IiwiX2QiLCJzZXRCbG9ja1RyYWNraW5nIiwicHJldkluc3RhbmNlIiwiX2MiLCJ2YWxpZGF0ZURpcmVjdGl2ZU5hbWUiLCJ3aXRoRGlyZWN0aXZlcyIsImRpcmVjdGl2ZXMiLCJnZXRDb21wb25lbnRQdWJsaWNJbnN0YW5jZSIsImJpbmRpbmdzIiwiZGlycyIsImRpciIsIm1vZGlmaWVycyIsInVwZGF0ZWQiLCJkZWVwIiwiaW52b2tlRGlyZWN0aXZlSG9vayIsInByZXZWTm9kZSIsIm9sZEJpbmRpbmdzIiwiYmluZGluZyIsIlRlbGVwb3J0RW5kS2V5IiwiaXNUZWxlcG9ydCIsIl9faXNUZWxlcG9ydCIsImlzVGVsZXBvcnREaXNhYmxlZCIsImRpc2FibGVkIiwiaXNUZWxlcG9ydERlZmVycmVkIiwiZGVmZXIiLCJpc1RhcmdldFNWRyIsIlNWR0VsZW1lbnQiLCJpc1RhcmdldE1hdGhNTCIsIk1hdGhNTEVsZW1lbnQiLCJyZXNvbHZlVGFyZ2V0Iiwic2VsZWN0IiwidGFyZ2V0U2VsZWN0b3IiLCJ0byIsIlRlbGVwb3J0SW1wbCIsIm4xIiwibjIiLCJjb250YWluZXIiLCJhbmNob3IiLCJwYXJlbnRDb21wb25lbnQiLCJwYXJlbnRTdXNwZW5zZSIsIm5hbWVzcGFjZSIsInNsb3RTY29wZUlkcyIsIm9wdGltaXplZCIsImludGVybmFscyIsIm1jIiwibW91bnRDaGlsZHJlbiIsInBjIiwicGF0Y2hDaGlsZHJlbiIsInBiYyIsInBhdGNoQmxvY2tDaGlsZHJlbiIsIm8iLCJpbnNlcnQiLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlVGV4dCIsImNyZWF0ZUNvbW1lbnQiLCJzaGFwZUZsYWciLCJjaGlsZHJlbiIsImR5bmFtaWNDaGlsZHJlbiIsInBsYWNlaG9sZGVyIiwibWFpbkFuY2hvciIsIm1vdW50IiwiY29udGFpbmVyMiIsImFuY2hvcjIiLCJpc0NFIiwiX3RlbGVwb3J0VGFyZ2V0IiwibW91bnRUb1RhcmdldCIsInRhcmdldEFuY2hvciIsInByZXBhcmVBbmNob3IiLCJ1cGRhdGVDc3NWYXJzIiwiX19pc01vdW50ZWQiLCJxdWV1ZVBvc3RSZW5kZXJFZmZlY3QiLCJ0YXJnZXRTdGFydCIsIndhc0Rpc2FibGVkIiwiY3VycmVudENvbnRhaW5lciIsImN1cnJlbnRBbmNob3IiLCJ0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuIiwibW92ZVRlbGVwb3J0IiwibmV4dFRhcmdldCIsInVtIiwidW5tb3VudCIsImhvc3RSZW1vdmUiLCJkb1JlbW92ZSIsInNob3VsZFJlbW92ZSIsImNoaWxkIiwibW92ZSIsImh5ZHJhdGUiLCJub2RlIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIiwiaHlkcmF0ZUNoaWxkcmVuIiwidGFyZ2V0Tm9kZSIsIl9scGEiLCJmaXJzdENoaWxkIiwibm9kZVR5cGUiLCJwYXJlbnRBbmNob3IiLCJtb3ZlVHlwZSIsImlzUmVvcmRlciIsIlRlbGVwb3J0IiwiaXNEaXNhYmxlZCIsInV0Iiwic2V0QXR0cmlidXRlIiwibGVhdmVDYktleSIsImVudGVyQ2JLZXkkMSIsInVzZVRyYW5zaXRpb25TdGF0ZSIsImlzTW91bnRlZCIsImlzTGVhdmluZyIsImlzVW5tb3VudGluZyIsImxlYXZpbmdWTm9kZXMiLCJvbk1vdW50ZWQiLCJvbkJlZm9yZVVubW91bnQiLCJUcmFuc2l0aW9uSG9va1ZhbGlkYXRvciIsIkZ1bmN0aW9uIiwiQmFzZVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJtb2RlIiwiYXBwZWFyIiwib25CZWZvcmVFbnRlciIsIm9uRW50ZXIiLCJvbkFmdGVyRW50ZXIiLCJvbkVudGVyQ2FuY2VsbGVkIiwib25CZWZvcmVMZWF2ZSIsIm9uTGVhdmUiLCJvbkFmdGVyTGVhdmUiLCJvbkxlYXZlQ2FuY2VsbGVkIiwib25CZWZvcmVBcHBlYXIiLCJvbkFwcGVhciIsIm9uQWZ0ZXJBcHBlYXIiLCJvbkFwcGVhckNhbmNlbGxlZCIsInJlY3Vyc2l2ZUdldFN1YnRyZWUiLCJzdWJUcmVlIiwiZmluZE5vbkNvbW1lbnRDaGlsZCIsImhhc0ZvdW5kIiwiQ29tbWVudCIsIkJhc2VUcmFuc2l0aW9uIiwic2V0dXAiLCJzbG90cyIsImdldEN1cnJlbnRJbnN0YW5jZSIsImdldFRyYW5zaXRpb25SYXdDaGlsZHJlbiIsInJhd1Byb3BzIiwiZW1wdHlQbGFjZWhvbGRlciIsImlubmVyQ2hpbGQiLCJnZXRJbm5lckNoaWxkJDEiLCJlbnRlckhvb2tzIiwicmVzb2x2ZVRyYW5zaXRpb25Ib29rcyIsImhvb2tzIiwic2V0VHJhbnNpdGlvbkhvb2tzIiwib2xkSW5uZXJDaGlsZCIsImlzU2FtZVZOb2RlVHlwZSIsImxlYXZpbmdIb29rcyIsImFmdGVyTGVhdmUiLCJkZWxheUxlYXZlIiwiZWFybHlSZW1vdmUiLCJkZWxheWVkTGVhdmUiLCJnZXRMZWF2aW5nTm9kZXNGb3JUeXBlIiwibGVhdmluZ1ZOb2Rlc0NhY2hlIiwicG9zdENsb25lIiwiY2FsbEhvb2siLCJjYWxsQXN5bmNIb29rIiwiaG9vazIiLCJiZWZvcmVFbnRlciIsImxlYXZpbmdWTm9kZSIsImVudGVyIiwiYWZ0ZXJIb29rIiwiY2FuY2VsSG9vayIsImNhbGxlZCIsImNhbmNlbGxlZCIsImxlYXZlIiwiY2xvbmUiLCJ2bm9kZTIiLCJob29rczIiLCJpc0tlZXBBbGl2ZSIsImNsb25lVk5vZGUiLCJ0cmFuc2l0aW9uIiwic3NDb250ZW50Iiwic3NGYWxsYmFjayIsImtlZXBDb21tZW50IiwicGFyZW50S2V5Iiwia2V5ZWRGcmFnbWVudENvdW50IiwiRnJhZ21lbnQiLCJwYXRjaEZsYWciLCJkZWZpbmVDb21wb25lbnQiLCJleHRyYU9wdGlvbnMiLCJ1c2VJZCIsImlkUHJlZml4IiwiaWRzIiwibWFya0FzeW5jQm91bmRhcnkiLCJrbm93blRlbXBsYXRlUmVmcyIsInVzZVRlbXBsYXRlUmVmIiwicmVmcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInNldFJlZiIsInJhd1JlZiIsIm9sZFJhd1JlZiIsImlzVW5tb3VudCIsImlzQXN5bmNXcmFwcGVyIiwiX19hc3luY1Jlc29sdmVkIiwicmVmVmFsdWUiLCJvbGRSZWYiLCJzZXR1cFN0YXRlIiwicmF3U2V0dXBTdGF0ZSIsImNhblNldFNldHVwUmVmIiwiX2lzU3RyaW5nIiwiX2lzUmVmIiwiZG9TZXQiLCJmIiwiZXhpc3RpbmciLCJrIiwiaGFzTG9nZ2VkTWlzbWF0Y2hFcnJvciIsImxvZ01pc21hdGNoRXJyb3IiLCJnZXRDb250YWluZXJUeXBlIiwibmFtZXNwYWNlVVJJIiwidGFnTmFtZSIsImlzU1ZHQ29udGFpbmVyIiwiaXNNYXRoTUxDb250YWluZXIiLCJpc0NvbW1lbnQiLCJjcmVhdGVIeWRyYXRpb25GdW5jdGlvbnMiLCJyZW5kZXJlckludGVybmFscyIsIm10IiwibW91bnRDb21wb25lbnQiLCJwYXRjaCIsInBhdGNoUHJvcCIsImh5ZHJhdGVOb2RlIiwiaXNGcmFnbWVudFN0YXJ0Iiwib25NaXNtYXRjaCIsImhhbmRsZU1pc21hdGNoIiwiZG9tVHlwZSIsIm5leHROb2RlIiwiVGV4dCIsImlzVGVtcGxhdGVOb2RlIiwicmVwbGFjZU5vZGUiLCJTdGF0aWMiLCJuZWVkVG9BZG9wdENvbnRlbnQiLCJzdGF0aWNDb3VudCIsIm91dGVySFRNTCIsImh5ZHJhdGVGcmFnbWVudCIsImh5ZHJhdGVFbGVtZW50IiwibG9jYXRlQ2xvc2luZ0FuY2hvciIsImNyZWF0ZVZOb2RlIiwicHJldmlvdXNTaWJsaW5nIiwibGFzdENoaWxkIiwiY3JlYXRlVGV4dFZOb2RlIiwiZm9yY2VQYXRjaCIsInZub2RlSG9va3MiLCJuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyIsIm5lZWRUcmFuc2l0aW9uIiwiY2xzIiwiZ2V0QXR0cmlidXRlIiwiJGNscyIsImlubmVySFRNTCIsInRleHRDb250ZW50IiwiaGFzV2FybmVkIiwiaXNNaXNtYXRjaEFsbG93ZWQiLCJjbGllbnRUZXh0IiwiaXNDdXN0b21FbGVtZW50IiwiZCIsInByb3BIYXNNaXNtYXRjaCIsIm9uVm5vZGVCZWZvcmVNb3VudCIsImludm9rZVZOb2RlSG9vayIsIm9uVm5vZGVNb3VudGVkIiwicXVldWVFZmZlY3RXaXRoU3VzcGVuc2UiLCJwYXJlbnRWTm9kZSIsIm5vcm1hbGl6ZVZOb2RlIiwiaXNUZXh0IiwiZnJhZ21lbnRTbG90U2NvcGVJZHMiLCJpc0ZyYWdtZW50IiwicGFyZW50RWxlbWVudCIsIm5leHQyIiwidXBkYXRlSE9DSG9zdEVsIiwibmV3Tm9kZSIsIm9sZE5vZGUiLCJwYXJlbnROb2RlMiIsInJlcGxhY2VDaGlsZCIsImhhc0NoaWxkTm9kZXMiLCJfdm5vZGUiLCJjbGllbnRWYWx1ZSIsIm1pc21hdGNoVHlwZSIsIm1pc21hdGNoS2V5IiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJpc1NldEVxdWFsIiwidG9DbGFzc1NldCIsInN0cmluZ2lmeVN0eWxlIiwiYWN0dWFsTWFwIiwidG9TdHlsZU1hcCIsImV4cGVjdGVkTWFwIiwicmVzb2x2ZUNzc1ZhcnMiLCJpc01hcEVxdWFsIiwiaGFzQXR0cmlidXRlIiwiaXNSZW5kZXJhYmxlQXR0clZhbHVlIiwiTWlzbWF0Y2hUeXBlU3RyaW5nIiwic3R5bGVNYXAiLCJnZXRDc3NWYXJzIiwiY3NzVmFycyIsImFsbG93TWlzbWF0Y2hBdHRyIiwiYWxsb3dlZFR5cGUiLCJhbGxvd2VkQXR0ciIsImxpc3QiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwiaHlkcmF0ZU9uSWRsZSIsImh5ZHJhdGVPblZpc2libGUiLCJvYiIsIkludGVyc2VjdGlvbk9ic2VydmVyIiwiaXNJbnRlcnNlY3RpbmciLCJkaXNjb25uZWN0IiwiRWxlbWVudCIsInRvcCIsImxlZnQiLCJib3R0b20iLCJyaWdodCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImlubmVySGVpZ2h0IiwiZWxlbWVudElzVmlzaWJsZUluVmlld3BvcnQiLCJvYnNlcnZlIiwiaHlkcmF0ZU9uTWVkaWFRdWVyeSIsInF1ZXJ5IiwibXFsIiwibWF0Y2hNZWRpYSIsIm9uY2UiLCJoeWRyYXRlT25JbnRlcmFjdGlvbiIsImludGVyYWN0aW9ucyIsImhhc0h5ZHJhdGVkIiwiZG9IeWRyYXRlIiwidGVhcmRvd24iLCJkaXNwYXRjaEV2ZW50IiwiX19hc3luY0xvYWRlciIsImRlZmluZUFzeW5jQ29tcG9uZW50IiwibG9hZGVyIiwibG9hZGluZ0NvbXBvbmVudCIsImVycm9yQ29tcG9uZW50IiwiZGVsYXkiLCJoeWRyYXRlU3RyYXRlZ3kiLCJzdXNwZW5zaWJsZSIsIm9uRXJyb3IiLCJ1c2VyT25FcnJvciIsInJlc29sdmVkQ29tcCIsInBlbmRpbmdSZXF1ZXN0IiwicmV0cmllcyIsImxvYWQiLCJ0aGlzUmVxdWVzdCIsImNvbXAiLCJfX2VzTW9kdWxlIiwiX19hc3luY0h5ZHJhdGUiLCJwYXRjaGVkIiwiZm9yRWFjaEVsZW1lbnQiLCJidW0iLCJ1IiwiaXNVbm1vdW50ZWQiLCJjdXJyZW50SW5zdGFuY2UiLCJjcmVhdGVJbm5lckNvbXAiLCJzdXNwZW5zZSIsImlzSW5TU1JDb21wb25lbnRTZXR1cCIsImRlbGF5ZWQiLCJfX2lzS2VlcEFsaXZlIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJtYXgiLCJzaGFyZWRDb250ZXh0IiwicmVuZGVyZXIiLCJjdXJyZW50IiwiX192X2NhY2hlIiwiX3VubW91bnQiLCJjcmVhdGVFbGVtZW50Iiwic3RvcmFnZUNvbnRhaW5lciIsInJlc2V0U2hhcGVGbGFnIiwicHJ1bmVDYWNoZSIsInBydW5lQ2FjaGVFbnRyeSIsImNhY2hlZCIsImFjdGl2YXRlIiwiaW5zdGFuY2UyIiwiaXNEZWFjdGl2YXRlZCIsInZub2RlSG9vayIsImRlYWN0aXZhdGUiLCJpbnZhbGlkYXRlTW91bnQiLCJkYSIsIm9uVm5vZGVVbm1vdW50ZWQiLCJfX2tlZXBBbGl2ZVN0b3JhZ2VDb250YWluZXIiLCJ3YXRjaCIsInBlbmRpbmdDYWNoZUtleSIsImNhY2hlU3VidHJlZSIsImlzU3VzcGVuc2UiLCJnZXRJbm5lckNoaWxkIiwib25VcGRhdGVkIiwicmF3Vk5vZGUiLCJpc1ZOb2RlIiwiY2FjaGVkVk5vZGUiLCJwYXR0ZXJuIiwib25BY3RpdmF0ZWQiLCJyZWdpc3RlcktlZXBBbGl2ZUhvb2siLCJvbkRlYWN0aXZhdGVkIiwid3JhcHBlZEhvb2siLCJfX3dkYyIsImluamVjdEhvb2siLCJpbmplY3RUb0tlZXBBbGl2ZVJvb3QiLCJrZWVwQWxpdmVSb290IiwiaW5qZWN0ZWQiLCJvblVubW91bnRlZCIsInByZXBlbmQiLCJfX3dlaCIsInJlc2V0Iiwic2V0Q3VycmVudEluc3RhbmNlIiwiY3JlYXRlSG9vayIsImxpZmVjeWNsZSIsIm9uQmVmb3JlTW91bnQiLCJvbkJlZm9yZVVwZGF0ZSIsIm9uU2VydmVyUHJlZmV0Y2giLCJvblJlbmRlclRyaWdnZXJlZCIsIm9uUmVuZGVyVHJhY2tlZCIsIm9uRXJyb3JDYXB0dXJlZCIsIkNPTVBPTkVOVFMiLCJESVJFQ1RJVkVTIiwicmVzb2x2ZUNvbXBvbmVudCIsIm1heWJlU2VsZlJlZmVyZW5jZSIsInJlc29sdmVBc3NldCIsIk5VTExfRFlOQU1JQ19DT01QT05FTlQiLCJmb3IiLCJyZXNvbHZlRHluYW1pY0NvbXBvbmVudCIsInJlc29sdmVEaXJlY3RpdmUiLCJ3YXJuTWlzc2luZyIsIkNvbXBvbmVudCIsInNlbGZOYW1lIiwiZXh0cmEiLCJyZWdpc3RyeSIsInJlbmRlckxpc3QiLCJyZW5kZXJJdGVtIiwic291cmNlSXNBcnJheSIsImlzUmVhZG9ubHlTb3VyY2UiLCJpc0ludGVnZXIiLCJjcmVhdGVTbG90cyIsImR5bmFtaWNTbG90cyIsInNsb3QiLCJqIiwicmVuZGVyU2xvdCIsImZhbGxiYWNrIiwibm9TbG90dGVkIiwib3BlbkJsb2NrIiwiY3JlYXRlQmxvY2siLCJ2YWxpZFNsb3RDb250ZW50IiwiZW5zdXJlVmFsaWRWTm9kZSIsInNsb3RLZXkiLCJzY29wZUlkIiwidm5vZGVzIiwidG9IYW5kbGVycyIsInByZXNlcnZlQ2FzZUlmTmVjZXNzYXJ5IiwiZ2V0UHVibGljSW5zdGFuY2UiLCJpc1N0YXRlZnVsQ29tcG9uZW50IiwicHVibGljUHJvcGVydGllc01hcCIsIiQiLCIkZWwiLCIkcHJvcHMiLCIkYXR0cnMiLCJhdHRycyIsIiRzbG90cyIsIiRyZWZzIiwiJHBhcmVudCIsIiRyb290IiwiJGhvc3QiLCIkZW1pdCIsInJlc29sdmVNZXJnZWRPcHRpb25zIiwiJGZvcmNlVXBkYXRlIiwiJG5leHRUaWNrIiwiJHdhdGNoIiwiaW5zdGFuY2VXYXRjaCIsImlzUmVzZXJ2ZWRQcmVmaXgiLCJoYXNTZXR1cEJpbmRpbmciLCJfX2lzU2NyaXB0U2V0dXAiLCJQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJhY2Nlc3NDYWNoZSIsIm5vcm1hbGl6ZWRQcm9wcyIsInByb3BzT3B0aW9ucyIsInNob3VsZENhY2hlQWNjZXNzIiwicHVibGljR2V0dGVyIiwiY3NzTW9kdWxlIiwiZ2xvYmFsUHJvcGVydGllcyIsIm1hcmtBdHRyc0FjY2Vzc2VkIiwiX19jc3NNb2R1bGVzIiwiUnVudGltZUNvbXBpbGVkUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzIiwidW5zY29wYWJsZXMiLCJ3YXJuUnVudGltZVVzYWdlIiwiZGVmaW5lUHJvcHMiLCJkZWZpbmVFbWl0cyIsImRlZmluZUV4cG9zZSIsImV4cG9zZWQiLCJkZWZpbmVPcHRpb25zIiwiZGVmaW5lU2xvdHMiLCJkZWZpbmVNb2RlbCIsIndpdGhEZWZhdWx0cyIsInVzZVNsb3RzIiwiZ2V0Q29udGV4dCIsInVzZUF0dHJzIiwic2V0dXBDb250ZXh0IiwiY3JlYXRlU2V0dXBDb250ZXh0Iiwibm9ybWFsaXplUHJvcHNPckVtaXRzIiwibWVyZ2VEZWZhdWx0cyIsInNraXBGYWN0b3J5IiwibWVyZ2VNb2RlbHMiLCJjcmVhdGVQcm9wc1Jlc3RQcm94eSIsImV4Y2x1ZGVkS2V5cyIsIndpdGhBc3luY0NvbnRleHQiLCJnZXRBd2FpdGFibGUiLCJhd2FpdGFibGUiLCJ1bnNldEN1cnJlbnRJbnN0YW5jZSIsImFwcGx5T3B0aW9ucyIsInB1YmxpY1RoaXMiLCJiZWZvcmVDcmVhdGUiLCJjYWxsSG9vayQxIiwiZGF0YU9wdGlvbnMiLCJjb21wdXRlZE9wdGlvbnMiLCJ3YXRjaE9wdGlvbnMiLCJwcm92aWRlIiwicHJvdmlkZU9wdGlvbnMiLCJpbmplY3QiLCJpbmplY3RPcHRpb25zIiwiYmVmb3JlTW91bnQiLCJiZWZvcmVVcGRhdGUiLCJhY3RpdmF0ZWQiLCJkZWFjdGl2YXRlZCIsImJlZm9yZURlc3Ryb3kiLCJkZXN0cm95ZWQiLCJ1bm1vdW50ZWQiLCJyZW5kZXJUcmFja2VkIiwicmVuZGVyVHJpZ2dlcmVkIiwiZXJyb3JDYXB0dXJlZCIsInNlcnZlclByZWZldGNoIiwiZXhwb3NlIiwiaW5oZXJpdEF0dHJzIiwiZmlsdGVycyIsImNoZWNrRHVwbGljYXRlUHJvcGVydGllcyIsImNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIiLCJub3JtYWxpemVJbmplY3QiLCJyZXNvbHZlSW5qZWN0aW9ucyIsIm1ldGhvZEhhbmRsZXIiLCJjcmVhdGVXYXRjaGVyIiwicHJvdmlkZXMiLCJyZWdpc3RlckxpZmVjeWNsZUhvb2siLCJyZWdpc3RlciIsIl9ob29rIiwiZ2V0dGVyIiwiY3JlYXRlUGF0aEdldHRlciIsImhhbmRsZXIiLCJiYXNlIiwibWl4aW5zIiwiZXh0ZW5kcyIsImV4dGVuZHNPcHRpb25zIiwiZ2xvYmFsTWl4aW5zIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwicmVzb2x2ZWQiLCJtZXJnZU9wdGlvbnMiLCJzdHJhdHMiLCJhc01peGluIiwic3RyYXQiLCJpbnRlcm5hbE9wdGlvbk1lcmdlU3RyYXRzIiwibWVyZ2VEYXRhRm4iLCJtZXJnZUVtaXRzT3JQcm9wc09wdGlvbnMiLCJlbWl0cyIsIm1lcmdlT2JqZWN0T3B0aW9ucyIsIm1lcmdlQXNBcnJheSQxIiwiY3JlYXRlQXBwQ29udGV4dCIsImlzTmF0aXZlVGFnIiwicGVyZm9ybWFuY2UiLCJjb21waWxlck9wdGlvbnMiLCJ1aWQkMSIsImNyZWF0ZUFwcEFQSSIsInJvb3RDb21wb25lbnQiLCJyb290UHJvcHMiLCJpbnN0YWxsZWRQbHVnaW5zIiwicGx1Z2luQ2xlYW51cEZucyIsIl91aWQiLCJfY29tcG9uZW50IiwiX3Byb3BzIiwiX2NvbnRhaW5lciIsIl9jb250ZXh0IiwiX2luc3RhbmNlIiwicGx1Z2luIiwiaW5zdGFsbCIsIm1peGluIiwidmFsaWRhdGVDb21wb25lbnROYW1lIiwiZGlyZWN0aXZlIiwicm9vdENvbnRhaW5lciIsImlzSHlkcmF0ZSIsIl9fdnVlX2FwcF9fIiwiX2NlVk5vZGUiLCJjbG9uZWQiLCJkZXZ0b29sc0luaXRBcHAiLCJvblVubW91bnQiLCJkZXZ0b29sc1VubW91bnRBcHAiLCJydW5XaXRoQ29udGV4dCIsImxhc3RBcHAiLCJjdXJyZW50QXBwIiwicGFyZW50UHJvdmlkZXMiLCJ0cmVhdERlZmF1bHRBc0ZhY3RvcnkiLCJoYXNJbmplY3Rpb25Db250ZXh0IiwiaW50ZXJuYWxPYmplY3RQcm90byIsImNyZWF0ZUludGVybmFsT2JqZWN0IiwiaXNJbnRlcm5hbE9iamVjdCIsInNldEZ1bGxQcm9wcyIsIm5lZWRDYXN0S2V5cyIsInJhd0Nhc3RWYWx1ZXMiLCJoYXNBdHRyc0NoYW5nZWQiLCJjYW1lbEtleSIsImlzRW1pdExpc3RlbmVyIiwiZW1pdHNPcHRpb25zIiwicmF3Q3VycmVudFByb3BzIiwiY2FzdFZhbHVlcyIsInJlc29sdmVQcm9wVmFsdWUiLCJpc0Fic2VudCIsImhhc0RlZmF1bHQiLCJwcm9wc0RlZmF1bHRzIiwiX3NldFByb3AiLCJtaXhpblByb3BzQ2FjaGUiLCJub3JtYWxpemVQcm9wc09wdGlvbnMiLCJoYXNFeHRlbmRzIiwiZXh0ZW5kUHJvcHMiLCJyYXcyIiwibm9ybWFsaXplZEtleSIsInZhbGlkYXRlUHJvcE5hbWUiLCJwcm9wVHlwZSIsInNob3VsZENhc3QiLCJzaG91bGRDYXN0VHJ1ZSIsInR5cGVOYW1lIiwidmFsaWRhdGVQcm9wcyIsInJlc29sdmVkVmFsdWVzIiwiY2FtZWxpemVQcm9wc0tleSIsInZhbGlkYXRlUHJvcCIsInJlcXVpcmVkIiwic2tpcENoZWNrIiwiaXNWYWxpZCIsInR5cGVzIiwiZXhwZWN0ZWRUeXBlcyIsInZhbGlkIiwiZXhwZWN0ZWRUeXBlIiwiYXNzZXJ0VHlwZSIsInJlY2VpdmVkVHlwZSIsImV4cGVjdGVkVmFsdWUiLCJzdHlsZVZhbHVlIiwicmVjZWl2ZWRWYWx1ZSIsImlzRXhwbGljYWJsZSIsImVsZW0iLCJnZXRJbnZhbGlkVHlwZU1lc3NhZ2UiLCJpc1NpbXBsZVR5cGUiLCJjdG9yIiwiZ2V0VHlwZSIsInQiLCJpc0ludGVybmFsS2V5Iiwibm9ybWFsaXplU2xvdFZhbHVlIiwibm9ybWFsaXplU2xvdCIsInJhd1Nsb3QiLCJub3JtYWxpemVPYmplY3RTbG90cyIsInJhd1Nsb3RzIiwiX2N0eCIsIm5vcm1hbGl6ZVZOb2RlU2xvdHMiLCJhc3NpZ25TbG90cyIsImluaXRTbG90cyIsInVwZGF0ZVNsb3RzIiwibmVlZERlbGV0aW9uQ2hlY2siLCJkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQiLCIkc3RhYmxlIiwic3VwcG9ydGVkIiwicGVyZiIsInN0YXJ0TWVhc3VyZSIsImlzU3VwcG9ydGVkIiwibWFyayIsImVuZE1lYXN1cmUiLCJzdGFydFRhZyIsImVuZFRhZyIsIm1lYXN1cmUiLCJjbGVhck1hcmtzIiwiY3JlYXRlUmVuZGVyZXIiLCJiYXNlQ3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25SZW5kZXJlciIsImNyZWF0ZUh5ZHJhdGlvbkZucyIsIl9fVlVFX18iLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaG9zdEluc2VydCIsImhvc3RQYXRjaFByb3AiLCJob3N0Q3JlYXRlRWxlbWVudCIsImhvc3RDcmVhdGVUZXh0IiwiaG9zdENyZWF0ZUNvbW1lbnQiLCJzZXRUZXh0IiwiaG9zdFNldFRleHQiLCJzZXRFbGVtZW50VGV4dCIsImhvc3RTZXRFbGVtZW50VGV4dCIsImhvc3RQYXJlbnROb2RlIiwiaG9zdE5leHRTaWJsaW5nIiwic2V0U2NvcGVJZCIsImhvc3RTZXRTY29wZUlkIiwiaW5zZXJ0U3RhdGljQ29udGVudCIsImhvc3RJbnNlcnRTdGF0aWNDb250ZW50IiwiZ2V0TmV4dEhvc3ROb2RlIiwicHJvY2Vzc1RleHQiLCJwcm9jZXNzQ29tbWVudE5vZGUiLCJtb3VudFN0YXRpY05vZGUiLCJwYXRjaFN0YXRpY05vZGUiLCJwcm9jZXNzRnJhZ21lbnQiLCJwcm9jZXNzRWxlbWVudCIsInByb2Nlc3NDb21wb25lbnQiLCJyZW1vdmVTdGF0aWNOb2RlIiwibW91bnRFbGVtZW50IiwicGF0Y2hFbGVtZW50IiwicmVzb2x2ZUNoaWxkcmVuTmFtZXNwYWNlIiwiZmlsdGVyU2luZ2xlUm9vdCIsImNsb25lSWZNb3VudGVkIiwiX192bm9kZSIsIm9sZFByb3BzIiwibmV3UHJvcHMiLCJ0b2dnbGVSZWN1cnNlIiwib25Wbm9kZUJlZm9yZVVwZGF0ZSIsInBhdGNoUHJvcHMiLCJwcm9wc1RvVXBkYXRlIiwiZHluYW1pY1Byb3BzIiwib25Wbm9kZVVwZGF0ZWQiLCJvbGRDaGlsZHJlbiIsIm5ld0NoaWxkcmVuIiwiZmFsbGJhY2tDb250YWluZXIiLCJvbGRWTm9kZSIsIm5ld1ZOb2RlIiwiZnJhZ21lbnRTdGFydEFuY2hvciIsImZyYWdtZW50RW5kQW5jaG9yIiwidXBkYXRlQ29tcG9uZW50IiwiaW5pdGlhbFZOb2RlIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UiLCJfX2htcklkIiwicmVnaXN0ZXJITVIiLCJzZXR1cENvbXBvbmVudCIsImFzeW5jRGVwIiwicmVnaXN0ZXJEZXAiLCJzZXR1cFJlbmRlckVmZmVjdCIsIm5leHRWTm9kZSIsInByZXZQcm9wcyIsInByZXZDaGlsZHJlbiIsIm5leHRQcm9wcyIsIm5leHRDaGlsZHJlbiIsImhhc1Byb3BzQ2hhbmdlZCIsInNob3VsZFVwZGF0ZUNvbXBvbmVudCIsImFzeW5jUmVzb2x2ZWQiLCJ1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIiLCJjb21wb25lbnRVcGRhdGVGbiIsImJ1Iiwibm9uSHlkcmF0ZWRBc3luY1Jvb3QiLCJsb2NhdGVOb25IeWRyYXRlZEFzeW5jUm9vdCIsIm9yaWdpbk5leHQiLCJuZXh0VHJlZSIsInJlbmRlckNvbXBvbmVudFJvb3QiLCJwcmV2VHJlZSIsImJtIiwiaXNBc3luY1dyYXBwZXJWTm9kZSIsImh5ZHJhdGVTdWJUcmVlIiwiX2luamVjdENoaWxkU3R5bGUiLCJzY29wZWRJbml0aWFsVk5vZGUiLCJzY29wZSIsInJ0YyIsInJ0ZyIsInJhd1ByZXZQcm9wcyIsImlzSW5IbXJDb250ZXh0Iiwia2ViYWJLZXkiLCJjYW1lbGl6ZWRLZXkiLCJ1cGRhdGVQcm9wcyIsImMxIiwicHJldlNoYXBlRmxhZyIsImMyIiwicGF0Y2hLZXllZENoaWxkcmVuIiwicGF0Y2hVbmtleWVkQ2hpbGRyZW4iLCJ1bm1vdW50Q2hpbGRyZW4iLCJvbGRMZW5ndGgiLCJjb21tb25MZW5ndGgiLCJuZXh0Q2hpbGQiLCJsMiIsImUxIiwiZTIiLCJuZXh0UG9zIiwiczEiLCJzMiIsImtleVRvTmV3SW5kZXhNYXAiLCJ0b0JlUGF0Y2hlZCIsIm1vdmVkIiwibWF4TmV3SW5kZXhTb0ZhciIsIm5ld0luZGV4VG9PbGRJbmRleE1hcCIsInByZXZDaGlsZCIsIm5ld0luZGV4IiwiaW5jcmVhc2luZ05ld0luZGV4U2VxdWVuY2UiLCJhcnJJIiwiZ2V0U2VxdWVuY2UiLCJuZXh0SW5kZXgiLCJtb3ZlU3RhdGljTm9kZSIsInJlbW92ZTIiLCJwZXJmb3JtTGVhdmUiLCJjYWNoZUluZGV4Iiwic2hvdWxkSW52b2tlRGlycyIsInNob3VsZEludm9rZVZub2RlSG9vayIsIm9uVm5vZGVCZWZvcmVVbm1vdW50IiwidW5tb3VudENvbXBvbmVudCIsImhhc09uY2UiLCJyZW1vdmVGcmFnbWVudCIsInBlcmZvcm1SZW1vdmUiLCJ1bnJlZ2lzdGVySE1SIiwiX18iLCJzbG90Q2FjaGVLZXlzIiwicGVuZGluZ0JyYW5jaCIsInN1c3BlbnNlSWQiLCJwZW5kaW5nSWQiLCJ0ZWxlcG9ydEVuZCIsImlzRmx1c2hpbmciLCJjcmVhdGVBcHAiLCJjdXJyZW50TmFtZXNwYWNlIiwiZW5jb2RpbmciLCJhbGxvd2VkIiwiY2gxIiwiY2gyIiwic3ViQ29tcG9uZW50Iiwic3NyQ29udGV4dEtleSIsInVzZVNTUkNvbnRleHQiLCJ3YXRjaEVmZmVjdCIsImRvV2F0Y2giLCJ3YXRjaFBvc3RFZmZlY3QiLCJ3YXRjaFN5bmNFZmZlY3QiLCJpbW1lZGlhdGUiLCJiYXNlV2F0Y2hPcHRpb25zIiwib25XYXJuIiwicnVuc0ltbWVkaWF0ZWx5Iiwic3NyQ2xlYW51cCIsIl9fd2F0Y2hlckhhbmRsZXMiLCJ3YXRjaFN0b3BIYW5kbGUiLCJpc1ByZSIsImlzRmlyc3RSdW4iLCJhdWdtZW50Sm9iIiwid2F0Y2hIYW5kbGUiLCJ3YXJuSW52YWxpZFNvdXJjZSIsInJlYWN0aXZlR2V0dGVyIiwic291cmNlMiIsImJvdW5kQ2xlYW51cCIsImZvcmNlVHJpZ2dlciIsImlzTXVsdGlTb3VyY2UiLCJjdXJyZW50RWZmZWN0IiwiYmFzZUdldHRlciIsIl9jYiIsImZpbGwiLCJpbW1lZGlhdGVGaXJzdFJ1biIsImN1cnJlbnRXYXRjaGVyIiwiY2xlYW51cDIiLCJ3YXRjaCQxIiwic2VnbWVudHMiLCJ1c2VNb2RlbCIsImNhbWVsaXplZE5hbWUiLCJoeXBoZW5hdGVkTmFtZSIsImdldE1vZGVsTW9kaWZpZXJzIiwibG9jYWxWYWx1ZSIsInByZXZFbWl0dGVkVmFsdWUiLCJwcmV2U2V0VmFsdWUiLCJwcm9wVmFsdWUiLCJlbWl0dGVkVmFsdWUiLCJpMiIsIm1vZGVsTmFtZSIsIm1vZGVsTW9kaWZpZXJzIiwicmF3QXJncyIsImRldnRvb2xzQ29tcG9uZW50RW1pdCIsImxvd2VyQ2FzZUV2ZW50IiwiaGFuZGxlck5hbWUiLCJvbmNlSGFuZGxlciIsImVtaXR0ZWQiLCJub3JtYWxpemVFbWl0c09wdGlvbnMiLCJleHRlbmRFbWl0cyIsIm5vcm1hbGl6ZWRGcm9tRXh0ZW5kIiwiYWNjZXNzZWRBdHRycyIsIndpdGhQcm94eSIsImZhbGx0aHJvdWdoQXR0cnMiLCJwcm94eVRvVXNlIiwidGhpc1Byb3h5IiwicmVuZGVyMiIsImdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaCIsImJsb2NrU3RhY2siLCJzZXRSb290IiwiZ2V0Q2hpbGRSb290IiwiZmlsdGVyTW9kZWxMaXN0ZW5lcnMiLCJhbGxBdHRycyIsImV2ZW50QXR0cnMiLCJleHRyYUF0dHJzIiwiaXNFbGVtZW50Um9vdCIsInJhd0NoaWxkcmVuIiwiY2hpbGRSb290IiwiZHluYW1pY0luZGV4IiwidXBkYXRlZFJvb3QiLCJyZWN1cnNlIiwic2luZ2xlUm9vdCIsIm5leHRLZXlzIiwiYWN0aXZlQnJhbmNoIiwiX19pc1N1c3BlbnNlIiwiU3VzcGVuc2UiLCJoaWRkZW5Db250YWluZXIiLCJjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5IiwidHJpZ2dlckV2ZW50Iiwic2V0QWN0aXZlQnJhbmNoIiwibW91bnRTdXNwZW5zZSIsImlzSW5GYWxsYmFjayIsIm5ld0JyYW5jaCIsIm5ld0ZhbGxiYWNrIiwiaXNIeWRyYXRpbmciLCJwYXRjaFN1c3BlbnNlIiwiaXNTbG90Q2hpbGRyZW4iLCJub3JtYWxpemVTdXNwZW5zZVNsb3QiLCJldmVudExpc3RlbmVyIiwicGFyZW50U3VzcGVuc2VJZCIsImlzU3VzcGVuc2libGUiLCJpc1ZOb2RlU3VzcGVuc2libGUiLCJpbml0aWFsQW5jaG9yIiwic3luYyIsInBhcmVudENvbXBvbmVudDIiLCJkZWxheUVudGVyIiwiaGFzVW5yZXNvbHZlZEFuY2VzdG9yIiwiZmFsbGJhY2tWTm9kZSIsIm5hbWVzcGFjZTIiLCJtb3VudEZhbGxiYWNrIiwib3B0aW1pemVkMiIsImlzSW5QZW5kaW5nU3VzcGVuc2UiLCJoeWRyYXRlZEVsIiwiYXN5bmNTZXR1cFJlc3VsdCIsImhhbmRsZVNldHVwUmVzdWx0IiwicGFyZW50U3VzcGVuc2UyIiwiYmxvY2siLCJ0cmFja0Jsb2NrIiwiaXNCbG9ja1RyZWVFbmFibGVkIiwiY3VycmVudEJsb2NrIiwiY2xvc2VCbG9jayIsInNpbmdsZUNoaWxkIiwiYnJhbmNoIiwiZGlzYWJsZVRyYWNraW5nIiwidm5vZGVBcmdzVHJhbnNmb3JtZXIiLCJpblZPbmNlIiwic2V0dXBCbG9jayIsImNyZWF0ZUVsZW1lbnRCbG9jayIsImNyZWF0ZUJhc2VWTm9kZSIsIl9fdl9pc1ZOb2RlIiwidHJhbnNmb3JtVk5vZGVBcmdzIiwidHJhbnNmb3JtZXIiLCJub3JtYWxpemVLZXkiLCJub3JtYWxpemVSZWYiLCJyZWZfa2V5IiwicmVmX2ZvciIsImlzQmxvY2tOb2RlIiwibmVlZEZ1bGxDaGlsZHJlbk5vcm1hbGl6YXRpb24iLCJfX3Zfc2tpcCIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwiZ3VhcmRSZWFjdGl2ZVByb3BzIiwiZXh0cmFQcm9wcyIsIm1lcmdlUmVmIiwiY2xvbmVUcmFuc2l0aW9uIiwibWVyZ2VkUHJvcHMiLCJtZXJnZVByb3BzIiwiZGVlcENsb25lVk5vZGUiLCJ0ZXh0IiwiZmxhZyIsImNyZWF0ZVN0YXRpY1ZOb2RlIiwibnVtYmVyT2ZOb2RlcyIsImNyZWF0ZUNvbW1lbnRWTm9kZSIsImFzQmxvY2siLCJtZW1vIiwic2xvdEZsYWciLCJ0b01lcmdlIiwiaW5jb21pbmciLCJlbXB0eUFwcENvbnRleHQiLCJleHBvc2VQcm94eSIsImJjIiwic3AiLCJjcmVhdGVEZXZSZW5kZXJDb250ZXh0IiwiaW50ZXJuYWxTZXRDdXJyZW50SW5zdGFuY2UiLCJzZXRJblNTUlNldHVwU3RhdGUiLCJyZWdpc3Rlckdsb2JhbFNldHRlciIsInNldHRlcnMiLCJpc0J1aWx0SW5UYWciLCJjb21waWxlJDEiLCJpbnN0YWxsV2l0aFByb3h5IiwiaXNTdGF0ZWZ1bCIsImluaXRQcm9wcyIsInNldHVwUmVzdWx0IiwibmFtZXMiLCJpc1J1bnRpbWVPbmx5IiwiZXhwb3NlUHJvcHNPblJlbmRlckNvbnRleHQiLCJpc0FzeW5jU2V0dXAiLCJyZXNvbHZlZFJlc3VsdCIsImZpbmlzaENvbXBvbmVudFNldHVwIiwic2V0dXBTdGF0ZWZ1bENvbXBvbmVudCIsIl9fc3NySW5saW5lUmVuZGVyIiwic3NyUmVuZGVyIiwiZGV2dG9vbHNSYXdTZXR1cFN0YXRlIiwiZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dCIsInJlZ2lzdGVyUnVudGltZUNvbXBpbGVyIiwiX2NvbXBpbGUiLCJfcmMiLCJza2lwT3B0aW9ucyIsInRlbXBsYXRlIiwiZGVsaW1pdGVycyIsImNvbXBvbmVudENvbXBpbGVyT3B0aW9ucyIsImZpbmFsQ29tcGlsZXJPcHRpb25zIiwiYXR0cnNQcm94eUhhbmRsZXJzIiwiZXhwb3NlZFR5cGUiLCJhdHRyc1Byb3h5Iiwic2xvdHNQcm94eSIsImdldFNsb3RzUHJveHkiLCJjbGFzc2lmeVJFIiwiY2xhc3NpZnkiLCJpbmNsdWRlSW5mZXJyZWQiLCJkaXNwbGF5TmFtZSIsIl9fbmFtZSIsIl9fZmlsZSIsImluZmVyRnJvbVJlZ2lzdHJ5IiwiZ2V0dGVyT3JPcHRpb25zIiwiZGVidWdPcHRpb25zIiwiY1JlZiIsImNvbXB1dGVkJDEiLCJ3YXJuUmVjdXJzaXZlQ29tcHV0ZWQiLCJfd2FyblJlY3Vyc2l2ZSIsInByb3BzT3JDaGlsZHJlbiIsImluaXRDdXN0b21Gb3JtYXR0ZXIiLCJ2dWVTdHlsZSIsIm51bWJlclN0eWxlIiwic3RyaW5nU3R5bGUiLCJrZXl3b3JkU3R5bGUiLCJmb3JtYXR0ZXIiLCJfX3Z1ZV9jdXN0b21fZm9ybWF0dGVyIiwiX19pc1Z1ZSIsImdlblJlZkZsYWciLCJmb3JtYXRWYWx1ZSIsImhhc0JvZHkiLCJmb3JtYXRJbnN0YW5jZSIsImJsb2NrcyIsImNyZWF0ZUluc3RhbmNlQmxvY2siLCJleHRyYWN0S2V5cyIsImFzUmF3IiwiQ29tcCIsImV4dHJhY3RlZCIsImlzS2V5T2ZUeXBlIiwiZGV2dG9vbHNGb3JtYXR0ZXJzIiwid2l0aE1lbW8iLCJpc01lbW9TYW1lIiwid2FybiIsIkVycm9yVHlwZVN0cmluZ3MiLCJkZXZ0b29scyIsInNldERldnRvb2xzSG9vayIsInNzclV0aWxzIiwicmVzb2x2ZUZpbHRlciIsImNvbXBhdFV0aWxzIiwiRGVwcmVjYXRpb25UeXBlcyIsInBvbGljeSIsInR0IiwidHJ1c3RlZFR5cGVzIiwiY3JlYXRlUG9saWN5IiwiY3JlYXRlSFRNTCIsInVuc2FmZVRvVHJ1c3RlZEhUTUwiLCJkb2MiLCJ0ZW1wbGF0ZUNvbnRhaW5lciIsIm5vZGVPcHMiLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmVDaGlsZCIsInRhZyIsImNyZWF0ZUVsZW1lbnROUyIsIm11bHRpcGxlIiwiY3JlYXRlVGV4dE5vZGUiLCJub2RlVmFsdWUiLCJzZWxlY3RvciIsImJlZm9yZSIsImNsb25lTm9kZSIsIndyYXBwZXIiLCJhcHBlbmRDaGlsZCIsIlRSQU5TSVRJT04kMSIsIkFOSU1BVElPTiIsInZ0Y0tleSIsIkRPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJjc3MiLCJkdXJhdGlvbiIsImVudGVyRnJvbUNsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImVudGVyVG9DbGFzcyIsImFwcGVhckZyb21DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImxlYXZlRnJvbUNsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsIlRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJUcmFuc2l0aW9uIiwiZGVjb3JhdGUkMSIsInJlc29sdmVUcmFuc2l0aW9uUHJvcHMiLCJoMiIsImhhc0V4cGxpY2l0Q2FsbGJhY2siLCJiYXNlUHJvcHMiLCJkdXJhdGlvbnMiLCJOdW1iZXJPZiIsIm5vcm1hbGl6ZUR1cmF0aW9uIiwiZW50ZXJEdXJhdGlvbiIsImxlYXZlRHVyYXRpb24iLCJmaW5pc2hFbnRlciIsImlzQXBwZWFyIiwiaXNDYW5jZWxsZWQiLCJfZW50ZXJDYW5jZWxsZWQiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJmaW5pc2hMZWF2ZSIsIl9pc0xlYXZpbmciLCJtYWtlRW50ZXJIb29rIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZm9yY2VSZWZsb3ciLCJjbGFzc0xpc3QiLCJfdnRjIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZW5kSWQiLCJleHBsaWNpdFRpbWVvdXQiLCJfZW5kSWQiLCJyZXNvbHZlSWZOb3RTdGFsZSIsInByb3BDb3VudCIsImdldFRyYW5zaXRpb25JbmZvIiwiZW5kRXZlbnQiLCJlbmRlZCIsIm9uRW5kIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFN0eWxlUHJvcGVydGllcyIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsInRvTXMiLCJvZmZzZXRIZWlnaHQiLCJ2U2hvd09yaWdpbmFsRGlzcGxheSIsInZTaG93SGlkZGVuIiwidlNob3ciLCJkaXNwbGF5Iiwic2V0RGlzcGxheSIsIkNTU19WQVJfVEVYVCIsInVzZUNzc1ZhcnMiLCJ1cGRhdGVUZWxlcG9ydHMiLCJ2YXJzIiwicXVlcnlTZWxlY3RvckFsbCIsInNldFZhcnNPbk5vZGUiLCJzZXRWYXJzIiwic2V0VmFyc09uVk5vZGUiLCJNdXRhdGlvbk9ic2VydmVyIiwiY2hpbGRMaXN0Iiwic2V0UHJvcGVydHkiLCJkaXNwbGF5UkUiLCJzZW1pY29sb25SRSIsImltcG9ydGFudFJFIiwic2V0U3R5bGUiLCJwcmVmaXhlZCIsInJhd05hbWUiLCJwcmVmaXhDYWNoZSIsInByZWZpeGVzIiwiYXV0b1ByZWZpeCIsInhsaW5rTlMiLCJwYXRjaEF0dHIiLCJpc1NWRyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwYXRjaERPTVByb3AiLCJhdHRyTmFtZSIsIm5lZWRSZW1vdmUiLCJ2ZWlLZXkiLCJwYXRjaEV2ZW50IiwicHJldlZhbHVlIiwibmV4dFZhbHVlIiwiaW52b2tlcnMiLCJleGlzdGluZ0ludm9rZXIiLCJzYW5pdGl6ZUV2ZW50VmFsdWUiLCJvcHRpb25zTW9kaWZpZXJSRSIsInBhcnNlTmFtZSIsImludm9rZXIiLCJpbml0aWFsVmFsdWUiLCJfdnRzIiwiYXR0YWNoZWQiLCJvcmlnaW5hbFN0b3AiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfc3RvcHBlZCIsInBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiZ2V0Tm93IiwiY3JlYXRlSW52b2tlciIsImNhY2hlZE5vdyIsInByb3BOYW1lIiwiaXNOYXRpdmVPbiIsIlJFTU9WQUwiLCJkZWZpbmVDdXN0b21FbGVtZW50IiwiX2NyZWF0ZUFwcCIsIlZ1ZUN1c3RvbUVsZW1lbnQiLCJWdWVFbGVtZW50IiwiaW5pdGlhbFByb3BzIiwiZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCIsImNyZWF0ZVNTUkFwcCIsIkJhc2VDbGFzcyIsIl9kZWYiLCJfaXNWdWVDRSIsIl9hcHAiLCJfbm9uY2UiLCJub25jZSIsIl9jb25uZWN0ZWQiLCJfcmVzb2x2ZWQiLCJfbnVtYmVyUHJvcHMiLCJfc3R5bGVDaGlsZHJlbiIsIl9vYiIsInNoYWRvd1Jvb3QiLCJfcm9vdCIsImF0dGFjaFNoYWRvdyIsImNvbm5lY3RlZENhbGxiYWNrIiwiaXNDb25uZWN0ZWQiLCJfcGFyc2VTbG90cyIsIl9wYXJlbnQiLCJfbW91bnQiLCJfcGVuZGluZ1Jlc29sdmUiLCJfcmVzb2x2ZURlZiIsIl9zZXRQYXJlbnQiLCJfaW5oZXJpdFBhcmVudENvbnRleHQiLCJzZXRQcm90b3R5cGVPZiIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiYXR0cmlidXRlcyIsIl9zZXRBdHRyIiwibXV0YXRpb25zIiwiYXR0cmlidXRlTmFtZSIsImlzQXN5bmMiLCJudW1iZXJQcm9wcyIsIl9yZXNvbHZlUHJvcHMiLCJfYXBwbHlTdHlsZXMiLCJhc3luY0RlZiIsImNvbmZpZ3VyZUFwcCIsImRlY2xhcmVkUHJvcEtleXMiLCJfZ2V0UHJvcCIsInNob3VsZFJlZmxlY3QiLCJzaG91bGRVcGRhdGUiLCJfdXBkYXRlIiwiX3JlbmRlclNsb3RzIiwibmV3U3R5bGVzIiwiX3N0eWxlcyIsImRpc3BhdGNoIiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJfY2hpbGRTdHlsZXMiLCJfc2xvdHMiLCJzbG90TmFtZSIsIm91dGxldHMiLCJ3YWxrZXIiLCJjcmVhdGVUcmVlV2Fsa2VyIiwib2xkU3R5bGVzIiwidXNlSG9zdCIsImNhbGxlciIsInVzZVNoYWRvd1Jvb3QiLCJ1c2VDc3NNb2R1bGUiLCJtb2R1bGVzIiwibW9kIiwicG9zaXRpb25NYXAiLCJuZXdQb3NpdGlvbk1hcCIsIm1vdmVDYktleSIsImVudGVyQ2JLZXkiLCJUcmFuc2l0aW9uR3JvdXAiLCJkZWNvcmF0ZSIsIm1vdmVDbGFzcyIsImhhc0NTU1RyYW5zZm9ybSIsImNhbGxQZW5kaW5nQ2JzIiwicmVjb3JkUG9zaXRpb24iLCJtb3ZlZENoaWxkcmVuIiwiYXBwbHlUcmFuc2xhdGlvbiIsInRyYW5zZm9ybSIsIndlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInByb3BlcnR5TmFtZSIsImNzc1RyYW5zaXRpb25Qcm9wcyIsIm9sZFBvcyIsIm5ld1BvcyIsImR4IiwiZHkiLCJnZXRNb2RlbEFzc2lnbmVyIiwib25Db21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaW5nIiwib25Db21wb3NpdGlvbkVuZCIsIkV2ZW50IiwiYXNzaWduS2V5Iiwidk1vZGVsVGV4dCIsImxhenkiLCJjYXN0VG9OdW1iZXIiLCJkb21WYWx1ZSIsImFjdGl2ZUVsZW1lbnQiLCJ2TW9kZWxDaGVja2JveCIsIm1vZGVsVmFsdWUiLCJfbW9kZWxWYWx1ZSIsImVsZW1lbnRWYWx1ZSIsImdldFZhbHVlIiwiY2hlY2tlZCIsImZvdW5kIiwiZmlsdGVyZWQiLCJnZXRDaGVja2JveFZhbHVlIiwic2V0Q2hlY2tlZCIsInZNb2RlbFJhZGlvIiwidk1vZGVsU2VsZWN0IiwiaXNTZXRNb2RlbCIsInNlbGVjdGVkVmFsIiwic2VsZWN0ZWQiLCJfYXNzaWduaW5nIiwic2V0U2VsZWN0ZWQiLCJfYmluZGluZyIsImlzTXVsdGlwbGUiLCJpc0FycmF5VmFsdWUiLCJvcHRpb25WYWx1ZSIsIm9wdGlvblR5cGUiLCJzZWxlY3RlZEluZGV4Iiwidk1vZGVsRHluYW1pYyIsImNhbGxNb2RlbEhvb2siLCJyZXNvbHZlRHluYW1pY01vZGVsIiwic3lzdGVtTW9kaWZpZXJzIiwibW9kaWZpZXJHdWFyZHMiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50IiwicHJldmVudERlZmF1bHQiLCJjdXJyZW50VGFyZ2V0IiwiY3RybCIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGEiLCJtZXRhS2V5IiwiYnV0dG9uIiwiZXhhY3QiLCJ3aXRoTW9kaWZpZXJzIiwiX3dpdGhNb2RzIiwiY2FjaGVLZXkiLCJndWFyZCIsImtleU5hbWVzIiwiZXNjIiwic3BhY2UiLCJ1cCIsImRvd24iLCJ3aXRoS2V5cyIsIl93aXRoS2V5cyIsImV2ZW50S2V5IiwicmVuZGVyZXJPcHRpb25zIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJwYXRjaENsYXNzIiwiaXNDc3NTdHJpbmciLCJoYXNDb250cm9sbGVkRGlzcGxheSIsInByZXZTdHlsZSIsImNzc1ZhclRleHQiLCJwYXRjaFN0eWxlIiwic2hvdWxkU2V0QXNQcm9wIiwiX3RydWVWYWx1ZSIsIl9mYWxzZVZhbHVlIiwiZW5hYmxlZEh5ZHJhdGlvbiIsImVuc3VyZVJlbmRlcmVyIiwiZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIiLCJpbmplY3ROYXRpdmVUYWdDaGVjayIsImluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrIiwiY29udGFpbmVyT3JTZWxlY3RvciIsIm5vcm1hbGl6ZUNvbnRhaW5lciIsInJlc29sdmVSb290TmFtZXNwYWNlIiwiU2hhZG93Um9vdCIsInNzckRpcmVjdGl2ZUluaXRpYWxpemVkIiwiaW5pdERpcmVjdGl2ZXNGb3JTU1IiLCJnZXRTU1JQcm9wcyIsIm1vZGVsVG9Vc2UiLCJydW50aW1lRG9tIiwiY3JlYXRlRWxlbWVudFZOb2RlIiwiRlJBR01FTlQiLCJURUxFUE9SVCIsIlNVU1BFTlNFIiwiS0VFUF9BTElWRSIsIkJBU0VfVFJBTlNJVElPTiIsIk9QRU5fQkxPQ0siLCJDUkVBVEVfQkxPQ0siLCJDUkVBVEVfRUxFTUVOVF9CTE9DSyIsIkNSRUFURV9WTk9ERSIsIkNSRUFURV9FTEVNRU5UX1ZOT0RFIiwiQ1JFQVRFX0NPTU1FTlQiLCJDUkVBVEVfVEVYVCIsIkNSRUFURV9TVEFUSUMiLCJSRVNPTFZFX0NPTVBPTkVOVCIsIlJFU09MVkVfRFlOQU1JQ19DT01QT05FTlQiLCJSRVNPTFZFX0RJUkVDVElWRSIsIlJFU09MVkVfRklMVEVSIiwiV0lUSF9ESVJFQ1RJVkVTIiwiUkVOREVSX0xJU1QiLCJSRU5ERVJfU0xPVCIsIkNSRUFURV9TTE9UUyIsIlRPX0RJU1BMQVlfU1RSSU5HIiwiTUVSR0VfUFJPUFMiLCJOT1JNQUxJWkVfQ0xBU1MiLCJOT1JNQUxJWkVfU1RZTEUiLCJOT1JNQUxJWkVfUFJPUFMiLCJHVUFSRF9SRUFDVElWRV9QUk9QUyIsIlRPX0hBTkRMRVJTIiwiQ0FNRUxJWkUiLCJDQVBJVEFMSVpFIiwiVE9fSEFORExFUl9LRVkiLCJTRVRfQkxPQ0tfVFJBQ0tJTkciLCJQVVNIX1NDT1BFX0lEIiwiUE9QX1NDT1BFX0lEIiwiV0lUSF9DVFgiLCJVTlJFRiIsIklTX1JFRiIsIldJVEhfTUVNTyIsIklTX01FTU9fU0FNRSIsImhlbHBlck5hbWVNYXAiLCJsb2NTdHViIiwiY29sdW1uIiwib2Zmc2V0IiwiY3JlYXRlVk5vZGVDYWxsIiwiaXNCbG9jayIsImlzQ29tcG9uZW50IiwibG9jIiwiaGVscGVyIiwiZ2V0Vk5vZGVCbG9ja0hlbHBlciIsImluU1NSIiwiZ2V0Vk5vZGVIZWxwZXIiLCJjcmVhdGVBcnJheUV4cHJlc3Npb24iLCJlbGVtZW50cyIsImNyZWF0ZU9iamVjdEV4cHJlc3Npb24iLCJwcm9wZXJ0aWVzIiwiY3JlYXRlT2JqZWN0UHJvcGVydHkiLCJjcmVhdGVTaW1wbGVFeHByZXNzaW9uIiwiaXNTdGF0aWMiLCJjb25zdFR5cGUiLCJjcmVhdGVDb21wb3VuZEV4cHJlc3Npb24iLCJjcmVhdGVDYWxsRXhwcmVzc2lvbiIsImNhbGxlZSIsImNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbiIsInJldHVybnMiLCJuZXdsaW5lIiwiaXNTbG90IiwiY3JlYXRlQ29uZGl0aW9uYWxFeHByZXNzaW9uIiwiY29uc2VxdWVudCIsImFsdGVybmF0ZSIsInNzciIsImNvbnZlcnRUb0Jsb2NrIiwicmVtb3ZlSGVscGVyIiwiZGVmYXVsdERlbGltaXRlcnNPcGVuIiwiZGVmYXVsdERlbGltaXRlcnNDbG9zZSIsImlzVGFnU3RhcnRDaGFyIiwiaXNXaGl0ZXNwYWNlIiwiaXNFbmRPZlRhZ1NlY3Rpb24iLCJ0b0NoYXJDb2RlcyIsIlNlcXVlbmNlcyIsIkNkYXRhIiwiQ2RhdGFFbmQiLCJDb21tZW50RW5kIiwiU2NyaXB0RW5kIiwiU3R5bGVFbmQiLCJUaXRsZUVuZCIsIlRleHRhcmVhRW5kIiwiZGVmYXVsdE9uRXJyb3IiLCJkZWZhdWx0T25XYXJuIiwiY3JlYXRlQ29tcGlsZXJFcnJvciIsIm1lc3NhZ2VzIiwiYWRkaXRpb25hbE1lc3NhZ2UiLCJlcnJvck1lc3NhZ2VzIiwiU3ludGF4RXJyb3IiLCJpc1N0YXRpY0V4cCIsImlzQ29yZUNvbXBvbmVudCIsIm5vbklkZW50aWZpZXJSRSIsImlzU2ltcGxlSWRlbnRpZmllciIsInZhbGlkRmlyc3RJZGVudENoYXJSRSIsInZhbGlkSWRlbnRDaGFyUkUiLCJ3aGl0ZXNwYWNlUkUiLCJnZXRFeHBTb3VyY2UiLCJleHAiLCJpc01lbWJlckV4cHJlc3Npb24iLCJzdGF0ZVN0YWNrIiwiY3VycmVudE9wZW5CcmFja2V0Q291bnQiLCJjdXJyZW50T3BlblBhcmVuc0NvdW50IiwiY3VycmVudFN0cmluZ1R5cGUiLCJmbkV4cFJFIiwiaXNGbkV4cHJlc3Npb24iLCJhc3NlcnQiLCJjb25kaXRpb24iLCJmaW5kRGlyIiwiYWxsb3dFbXB0eSIsImZpbmRQcm9wIiwiZHluYW1pY09ubHkiLCJpc1N0YXRpY0FyZ09mIiwiaXNUZXh0JDEiLCJpc1ZTbG90IiwidGFnVHlwZSIsImlzU2xvdE91dGxldCIsInByb3BzSGVscGVyU2V0IiwiZ2V0VW5ub3JtYWxpemVkUHJvcHMiLCJjYWxsUGF0aCIsImluamVjdFByb3AiLCJwcm9wc1dpdGhJbmplY3Rpb24iLCJwYXJlbnRDYWxsIiwiaGFzUHJvcCIsInByb3BLZXlOYW1lIiwidG9WYWxpZEFzc2V0SWQiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImZvckFsaWFzUkUiLCJkZWZhdWx0UGFyc2VyT3B0aW9ucyIsInBhcnNlTW9kZSIsIm5zIiwiZ2V0TmFtZXNwYWNlIiwiaXNQcmVUYWciLCJpc0lnbm9yZU5ld2xpbmVUYWciLCJjb21tZW50cyIsInByZWZpeElkZW50aWZpZXJzIiwiY3VycmVudE9wdGlvbnMiLCJjdXJyZW50Um9vdCIsImN1cnJlbnRJbnB1dCIsImN1cnJlbnRPcGVuVGFnIiwiY3VycmVudFByb3AiLCJjdXJyZW50QXR0clZhbHVlIiwiY3VycmVudEF0dHJTdGFydEluZGV4IiwiY3VycmVudEF0dHJFbmRJbmRleCIsImluUHJlIiwiaW5WUHJlIiwiY3VycmVudFZQcmVCb3VuZGFyeSIsInRva2VuaXplciIsImNicyIsInNlY3Rpb25TdGFydCIsImVudGl0eVN0YXJ0IiwiYmFzZVN0YXRlIiwiaW5SQ0RBVEEiLCJpblhNTCIsIm5ld2xpbmVzIiwiZGVsaW1pdGVyT3BlbiIsImRlbGltaXRlckNsb3NlIiwiZGVsaW1pdGVySW5kZXgiLCJjdXJyZW50U2VxdWVuY2UiLCJzZXF1ZW5jZUluZGV4IiwiaW5TRkNSb290IiwiZ2V0UG9zIiwibmV3bGluZUluZGV4IiwicGVlayIsInN0YXRlVGV4dCIsIm9udGV4dCIsInN0YXRlSW50ZXJwb2xhdGlvbk9wZW4iLCJzdGF0ZUluUkNEQVRBIiwic3RhdGVJbnRlcnBvbGF0aW9uIiwic3RhdGVJbnRlcnBvbGF0aW9uQ2xvc2UiLCJvbmludGVycG9sYXRpb24iLCJzdGF0ZVNwZWNpYWxTdGFydFNlcXVlbmNlIiwiaXNFbmQiLCJzdGF0ZUluVGFnTmFtZSIsImVuZE9mVGV4dCIsImFjdHVhbEluZGV4Iiwic3RhdGVJbkNsb3NpbmdUYWdOYW1lIiwiZmFzdEZvcndhcmRUbyIsInN0YXRlQ0RBVEFTZXF1ZW5jZSIsInN0YXRlSW5EZWNsYXJhdGlvbiIsImNjIiwic3RhdGVJbkNvbW1lbnRMaWtlIiwib25jZGF0YSIsIm9uY29tbWVudCIsInN0YXJ0U3BlY2lhbCIsInNlcXVlbmNlIiwiZW50ZXJSQ0RBVEEiLCJzdGF0ZUJlZm9yZVRhZ05hbWUiLCJoYW5kbGVUYWdOYW1lIiwic3RhdGVJblNGQ1Jvb3RUYWdOYW1lIiwib25vcGVudGFnbmFtZSIsInN0YXRlQmVmb3JlQXR0ck5hbWUiLCJzdGF0ZUJlZm9yZUNsb3NpbmdUYWdOYW1lIiwib25lcnIiLCJvbmNsb3NldGFnIiwic3RhdGVBZnRlckNsb3NpbmdUYWdOYW1lIiwib25vcGVudGFnZW5kIiwiaGFuZGxlQXR0clN0YXJ0Iiwib25kaXJuYW1lIiwic3RhdGVJblNlbGZDbG9zaW5nVGFnIiwib25zZWxmY2xvc2luZ3RhZyIsInN0YXRlSW5BdHRyTmFtZSIsIm9uYXR0cmlibmFtZSIsImhhbmRsZUF0dHJOYW1lRW5kIiwic3RhdGVJbkRpck5hbWUiLCJzdGF0ZUluRGlyQXJnIiwib25kaXJhcmciLCJzdGF0ZUluRHluYW1pY0RpckFyZyIsInN0YXRlSW5EaXJNb2RpZmllciIsIm9uZGlybW9kaWZpZXIiLCJvbmF0dHJpYm5hbWVlbmQiLCJzdGF0ZUFmdGVyQXR0ck5hbWUiLCJvbmF0dHJpYmVuZCIsInN0YXRlQmVmb3JlQXR0clZhbHVlIiwic3RhdGVJbkF0dHJWYWx1ZU5vUXVvdGVzIiwiaGFuZGxlSW5BdHRyVmFsdWUiLCJxdW90ZSIsIm9uYXR0cmliZGF0YSIsInN0YXRlSW5BdHRyVmFsdWVEb3VibGVRdW90ZXMiLCJzdGF0ZUluQXR0clZhbHVlU2luZ2xlUXVvdGVzIiwic3RhdGVCZWZvcmVEZWNsYXJhdGlvbiIsInN0YXRlSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJvbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiIsInN0YXRlQmVmb3JlQ29tbWVudCIsInN0YXRlSW5TcGVjaWFsQ29tbWVudCIsInN0YXRlQmVmb3JlU3BlY2lhbFMiLCJzdGF0ZUJlZm9yZVNwZWNpYWxUIiwic3RhcnRFbnRpdHkiLCJzdGF0ZUluRW50aXR5IiwiaW5wdXQiLCJmaW5pc2giLCJoYW5kbGVUcmFpbGluZ0RhdGEiLCJvbmVuZCIsImVuZEluZGV4IiwiZW1pdENvZGVQb2ludCIsImNwIiwiY29uc3VtZWQiLCJlbWl0RXJyb3IiLCJvblRleHQiLCJnZXRTbGljZSIsIm9udGV4dGVudGl0eSIsImlubmVyU3RhcnQiLCJpbm5lckVuZCIsImRlY29kZUVudGl0aWVzIiwiYWRkTm9kZSIsImNyZWF0ZUV4cCIsImdldExvYyIsImNvZGVnZW5Ob2RlIiwiZW5kT3BlblRhZyIsIm9uQ2xvc2VUYWciLCJiYWNrVHJhY2siLCJpc1NlbGZDbG9zaW5nIiwibmFtZUxvYyIsImRpclRvQXR0ciIsInNldExvY0VuZCIsIm9uYXR0cmliZW50aXR5IiwiY29uZGVuc2UiLCJleHBQYXJzZU1vZGUiLCJmb3JQYXJzZVJlc3VsdCIsImluTWF0Y2giLCJMSFMiLCJSSFMiLCJjcmVhdGVBbGlhc0V4cHJlc3Npb24iLCJhc1BhcmFtIiwiZmluYWxpemVkIiwidmFsdWVDb250ZW50Iiwic3RyaXBQYXJlbnNSRSIsInRyaW1tZWRPZmZzZXQiLCJpdGVyYXRvck1hdGNoIiwiZm9ySXRlcmF0b3JSRSIsImtleUNvbnRlbnQiLCJrZXlPZmZzZXQiLCJpbmRleENvbnRlbnQiLCJwYXJzZUZvckV4cHJlc3Npb24iLCJpbm5lckxvYyIsImxhc3ROb2RlIiwiaXNJbXBsaWVkIiwibG9va0FoZWFkIiwic3BlY2lhbFRlbXBsYXRlRGlyIiwiaXNGcmFnbWVudFRlbXBsYXRlIiwiaXNCdWlsdEluQ29tcG9uZW50IiwiY29uZGVuc2VXaGl0ZXNwYWNlIiwid2luZG93c05ld2xpbmVSRSIsIm5vZGVzIiwic2hvdWxkQ29uZGVuc2UiLCJ3aGl0ZXNwYWNlIiwicmVtb3ZlZFdoaXRlc3BhY2UiLCJpc0FsbFdoaXRlc3BhY2UiLCJoYXNOZXdsaW5lQ2hhciIsInByZXZDaGFySXNXaGl0ZXNwYWNlIiwiY2xvbmVMb2MiLCJhdHRyIiwiYmFzZVBhcnNlIiwiaG9pc3RzIiwiaW1wb3J0cyIsInRlbXBzIiwiY3JlYXRlUm9vdCIsImNhY2hlU3RhdGljIiwid2FsayIsImlzU2luZ2xlRWxlbWVudFJvb3QiLCJkb05vdEhvaXN0Tm9kZSIsImluRm9yIiwidG9DYWNoZSIsImNvbnN0YW50VHlwZSIsImdldENvbnN0YW50VHlwZSIsImdldEdlbmVyYXRlZFByb3BzQ29uc3RhbnRUeXBlIiwiZ2V0Tm9kZVByb3BzIiwiaG9pc3QiLCJ2U2xvdCIsImJyYW5jaGVzIiwiY2FjaGVkQXNBcnJheSIsImdldENhY2hlRXhwcmVzc2lvbiIsImdldFNsb3ROb2RlIiwiaG1yIiwibmVlZEFycmF5U3ByZWFkIiwibm9kZTIiLCJ0cmFuc2Zvcm1Ib2lzdCIsImNvbnN0YW50Q2FjaGUiLCJyZXR1cm5UeXBlMiIsImdlbmVyYXRlZFByb3BzVHlwZSIsImNoaWxkVHlwZSIsImV4cFR5cGUiLCJyZXR1cm5UeXBlIiwiYWxsb3dIb2lzdGVkSGVscGVyU2V0IiwiZ2V0Q29uc3RhbnRUeXBlT2ZIZWxwZXJDYWxsIiwia2V5VHlwZSIsInZhbHVlVHlwZSIsImNyZWF0ZVRyYW5zZm9ybUNvbnRleHQiLCJmaWxlbmFtZSIsImhvaXN0U3RhdGljIiwiY2FjaGVIYW5kbGVycyIsIm5vZGVUcmFuc2Zvcm1zIiwiZGlyZWN0aXZlVHJhbnNmb3JtcyIsImV4cHJlc3Npb25QbHVnaW5zIiwic2xvdHRlZCIsInNzckNzc1ZhcnMiLCJiaW5kaW5nTWV0YWRhdGEiLCJpbmxpbmUiLCJpc1RTIiwiY29tcGF0Q29uZmlnIiwibmFtZU1hdGNoIiwiaWRlbnRpZmllcnMiLCJ2Rm9yIiwidlByZSIsInZPbmNlIiwiZ3JhbmRQYXJlbnQiLCJjdXJyZW50Tm9kZSIsImNoaWxkSW5kZXgiLCJjdXJyZW50Q291bnQiLCJoZWxwZXJTdHJpbmciLCJyZW1vdmVOb2RlIiwicmVtb3ZhbEluZGV4Iiwib25Ob2RlUmVtb3ZlZCIsImFkZElkZW50aWZpZXJzIiwicmVtb3ZlSWRlbnRpZmllcnMiLCJpZGVudGlmaWVyIiwiaG9pc3RlZCIsImNhY2hlRXhwIiwibmVlZFBhdXNlVHJhY2tpbmciLCJjcmVhdGVDYWNoZUV4cHJlc3Npb24iLCJ0cmF2ZXJzZU5vZGUiLCJjcmVhdGVSb290Q29kZWdlbiIsInRyYW5zZm9ybWVkIiwiZXhpdEZucyIsIm9uRXhpdCIsIm5vZGVSZW1vdmVkIiwidHJhdmVyc2VDaGlsZHJlbiIsImNyZWF0ZVN0cnVjdHVyYWxEaXJlY3RpdmVUcmFuc2Zvcm0iLCJQVVJFX0FOTk9UQVRJT04iLCJhbGlhc0hlbHBlciIsImdlbmVyYXRlIiwiYXN0Iiwic291cmNlTWFwIiwib3B0aW1pemVJbXBvcnRzIiwicnVudGltZUdsb2JhbE5hbWUiLCJydW50aW1lTW9kdWxlTmFtZSIsInNzclJ1bnRpbWVNb2R1bGVOYW1lIiwiaW5kZW50TGV2ZWwiLCJwdXJlIiwiaW5kZW50IiwiZGVpbmRlbnQiLCJ3aXRob3V0TmV3TGluZSIsInJlcGVhdCIsImNyZWF0ZUNvZGVnZW5Db250ZXh0Iiwib25Db250ZXh0Q3JlYXRlZCIsImhhc0hlbHBlcnMiLCJ1c2VXaXRoQmxvY2siLCJWdWVCaW5kaW5nIiwiZ2VuTm9kZSIsImdlbkhvaXN0cyIsImdlbkZ1bmN0aW9uUHJlYW1ibGUiLCJnZW5Bc3NldHMiLCJwcmVhbWJsZSIsImFzc2V0cyIsInJlc29sdmVyIiwiZ2VuTm9kZUxpc3RBc0FycmF5IiwibXVsdGlsaW5lcyIsImdlbk5vZGVMaXN0IiwiY29tbWEiLCJnZW5UZXh0IiwiZ2VuRXhwcmVzc2lvbiIsImdlbkludGVycG9sYXRpb24iLCJnZW5Db21wb3VuZEV4cHJlc3Npb24iLCJnZW5Db21tZW50IiwicGF0Y2hGbGFnU3RyaW5nIiwiZmxhZ05hbWVzIiwiY2FsbEhlbHBlciIsImdlbk51bGxhYmxlQXJncyIsImdlblZOb2RlQ2FsbCIsImdlbkNhbGxFeHByZXNzaW9uIiwiZ2VuRXhwcmVzc2lvbkFzUHJvcGVydHlLZXkiLCJnZW5PYmplY3RFeHByZXNzaW9uIiwiZ2VuQXJyYXlFeHByZXNzaW9uIiwiZ2VuRnVuY3Rpb25FeHByZXNzaW9uIiwibmVlZE5ld2xpbmUiLCJuZWVkc1BhcmVucyIsImlzTmVzdGVkIiwiZ2VuQ29uZGl0aW9uYWxFeHByZXNzaW9uIiwiZ2VuQ2FjaGVFeHByZXNzaW9uIiwicHJvaGliaXRlZEtleXdvcmRSRSIsInN0cmlwU3RyaW5nUkUiLCJ2YWxpZGF0ZUJyb3dzZXJFeHByZXNzaW9uIiwiYXNQYXJhbXMiLCJhc1Jhd1N0YXRlbWVudHMiLCJrZXl3b3JkTWF0Y2giLCJ0cmFuc2Zvcm1FeHByZXNzaW9uIiwicHJvY2Vzc0V4cHJlc3Npb24iLCJsb2NhbFZhcnMiLCJ0cmFuc2Zvcm1JZiIsInByb2Nlc3NDb2RlZ2VuIiwiY3JlYXRlSWZCcmFuY2giLCJpZk5vZGUiLCJzaWJsaW5ncyIsInNpYmxpbmciLCJ1c2VyS2V5IiwiaXNTYW1lS2V5IiwicHJvY2Vzc0lmIiwiY3JlYXRlQ29kZWdlbk5vZGVGb3JCcmFuY2giLCJwYXJlbnRDb25kaXRpb24iLCJnZXRQYXJlbnRDb25kaXRpb24iLCJpc1RlbXBsYXRlSWYiLCJrZXlJbmRleCIsImNyZWF0ZUNoaWxkcmVuQ29kZWdlbk5vZGUiLCJrZXlQcm9wZXJ0eSIsInZub2RlQ2FsbCIsImJyYW5jaEV4cCIsInRyYW5zZm9ybUJpbmQiLCJfbm9kZSIsInRyYW5zZm9ybUJpbmRTaG9ydGhhbmQiLCJpbmplY3RQcmVmaXgiLCJwcmVmaXgiLCJ0cmFuc2Zvcm1Gb3IiLCJwYXJzZVJlc3VsdCIsImZpbmFsaXplRm9yUGFyc2VSZXN1bHQiLCJmb3JOb2RlIiwidmFsdWVBbGlhcyIsImtleUFsaWFzIiwib2JqZWN0SW5kZXhBbGlhcyIsInByb2Nlc3NGb3IiLCJyZW5kZXJFeHAiLCJpc1RlbXBsYXRlIiwia2V5UHJvcCIsImtleUV4cCIsImlzU3RhYmxlRnJhZ21lbnQiLCJmcmFnbWVudEZsYWciLCJjaGlsZEJsb2NrIiwibmVlZEZyYWdtZW50V3JhcHBlciIsInNsb3RPdXRsZXQiLCJsb29wIiwiY3JlYXRlRm9yTG9vcFBhcmFtcyIsIm1lbW9BcmdzIiwiY3JlYXRlUGFyYW1zTGlzdCIsImRlZmF1bHRGYWxsYmFjayIsInRyYWNrU2xvdFNjb3BlcyIsImJ1aWxkQ2xpZW50U2xvdEZuIiwiX3ZGb3JFeHAiLCJidWlsZFNsb3RzIiwiYnVpbGRTbG90Rm4iLCJzbG90c1Byb3BlcnRpZXMiLCJoYXNEeW5hbWljU2xvdHMiLCJvbkNvbXBvbmVudFNsb3QiLCJoYXNUZW1wbGF0ZVNsb3RzIiwiaGFzTmFtZWREZWZhdWx0U2xvdCIsImltcGxpY2l0RGVmYXVsdENoaWxkcmVuIiwic2VlblNsb3ROYW1lcyIsImNvbmRpdGlvbmFsQnJhbmNoSW5kZXgiLCJzbG90RWxlbWVudCIsInNsb3REaXIiLCJzbG90Q2hpbGRyZW4iLCJzbG90TG9jIiwic2xvdFByb3BzIiwiZGlyTG9jIiwic3RhdGljU2xvdE5hbWUiLCJzbG90RnVuY3Rpb24iLCJ2SWYiLCJ2RWxzZSIsImJ1aWxkRHluYW1pY1Nsb3QiLCJjb25kaXRpb25hbCIsImJ1aWxkRGVmYXVsdFNsb3RQcm9wZXJ0eSIsImNoaWxkcmVuMiIsImlzTm9uV2hpdGVzcGFjZUNvbnRlbnQiLCJoYXNGb3J3YXJkZWRTbG90cyIsImRpcmVjdGl2ZUltcG9ydE1hcCIsInRyYW5zZm9ybUVsZW1lbnQiLCJ2bm9kZVRhZyIsImlzRXhwbGljaXREeW5hbWljIiwiaXNDb21wb25lbnRUYWciLCJpc1Byb3AiLCJidWlsdEluIiwicmVzb2x2ZUNvbXBvbmVudFR5cGUiLCJpc0R5bmFtaWNDb21wb25lbnQiLCJ2bm9kZVByb3BzIiwidm5vZGVDaGlsZHJlbiIsInZub2RlRHluYW1pY1Byb3BzIiwiZHluYW1pY1Byb3BOYW1lcyIsInZub2RlRGlyZWN0aXZlcyIsInNob3VsZFVzZUJsb2NrIiwicHJvcHNCdWlsZFJlc3VsdCIsImJ1aWxkUHJvcHMiLCJkaXJBcmdzIiwicnVudGltZSIsInRydWVFeHByZXNzaW9uIiwibW9kaWZpZXIiLCJidWlsZERpcmVjdGl2ZUFyZ3MiLCJoYXNEeW5hbWljVGV4dENoaWxkIiwicHJvcHNOYW1lc1N0cmluZyIsInN0cmluZ2lmeUR5bmFtaWNQcm9wTmFtZXMiLCJlbGVtZW50TG9jIiwibWVyZ2VBcmdzIiwicnVudGltZURpcmVjdGl2ZXMiLCJoYXNDaGlsZHJlbiIsImhhc1JlZiIsImhhc0NsYXNzQmluZGluZyIsImhhc1N0eWxlQmluZGluZyIsImhhc0h5ZHJhdGlvbkV2ZW50QmluZGluZyIsImhhc0R5bmFtaWNLZXlzIiwiaGFzVm5vZGVIb29rIiwicHVzaE1lcmdlQXJnIiwiZGVkdXBlUHJvcGVydGllcyIsInB1c2hSZWZWRm9yTWFya2VyIiwiYW5hbHl6ZVBhdGNoRmxhZyIsImlzRXZlbnRIYW5kbGVyIiwiaXNWQmluZCIsImlzVk9uIiwiZGlyZWN0aXZlVHJhbnNmb3JtIiwicHJvcHMyIiwibmVlZFJ1bnRpbWUiLCJwcm9wc0V4cHJlc3Npb24iLCJjbGFzc0tleUluZGV4Iiwic3R5bGVLZXlJbmRleCIsImhhc0R5bmFtaWNLZXkiLCJpc0hhbmRsZXJLZXkiLCJjbGFzc1Byb3AiLCJzdHlsZVByb3AiLCJrbm93blByb3BzIiwibWVyZ2VBc0FycmF5IiwidHJhbnNmb3JtU2xvdE91dGxldCIsIm5vbk5hbWVQcm9wcyIsInByb2Nlc3NTbG90T3V0bGV0Iiwic2xvdEFyZ3MiLCJleHBlY3RlZExlbiIsInRyYW5zZm9ybU9uJDEiLCJhdWdtZW50b3IiLCJldmVudE5hbWUiLCJzaG91bGRDYWNoZSIsImlzTWVtYmVyRXhwIiwiaXNJbmxpbmVTdGF0ZW1lbnQiLCJoYXNNdWx0aXBsZVN0YXRlbWVudHMiLCJ0cmFuc2Zvcm1UZXh0IiwiaGFzVGV4dCIsImNhbGxBcmdzIiwic2VlbiQxIiwidHJhbnNmb3JtT25jZSIsInRyYW5zZm9ybU1vZGVsJDEiLCJjcmVhdGVUcmFuc2Zvcm1Qcm9wcyIsInJhd0V4cCIsImV4cFN0cmluZyIsImJpbmRpbmdUeXBlIiwiYXNzaWdubWVudEV4cCIsIm1vZGlmaWVyc0tleSIsInRyYW5zZm9ybU1lbW8iLCJiYXNlQ29tcGlsZSIsImlzTW9kdWxlTW9kZSIsInJlc29sdmVkT3B0aW9ucyIsIm1vZGVsIiwiVl9NT0RFTF9SQURJTyIsIlZfTU9ERUxfQ0hFQ0tCT1giLCJWX01PREVMX1RFWFQiLCJWX01PREVMX1NFTEVDVCIsIlZfTU9ERUxfRFlOQU1JQyIsIlZfT05fV0lUSF9NT0RJRklFUlMiLCJWX09OX1dJVEhfS0VZUyIsIlZfU0hPVyIsIlRSQU5TSVRJT04iLCJUUkFOU0lUSU9OX0dST1VQIiwiZGVjb2RlciIsInBhcnNlck9wdGlvbnMiLCJhc0F0dHIiLCJyb290TmFtZXNwYWNlIiwicGFyc2VJbmxpbmVDU1MiLCJjcmVhdGVET01Db21waWxlckVycm9yIiwiRE9NRXJyb3JNZXNzYWdlcyIsImlzRXZlbnRPcHRpb25Nb2RpZmllciIsImlzTm9uS2V5TW9kaWZpZXIiLCJtYXliZUtleU1vZGlmaWVyIiwiaXNLZXlib2FyZEV2ZW50IiwidHJhbnNmb3JtQ2xpY2siLCJoYXNNdWx0aXBsZUNoaWxkcmVuIiwiaWdub3JlU2lkZUVmZmVjdFRhZ3MiLCJoZWFkaW5ncyIsImVtcHR5U2V0Iiwib25seVZhbGlkQ2hpbGRyZW4iLCJvcHRncm91cCIsInRhYmxlIiwidHIiLCJjb2xncm91cCIsInRib2R5IiwidGhlYWQiLCJ0Zm9vdCIsInNjcmlwdCIsImlmcmFtZSIsInRleHRhcmVhIiwib25seVZhbGlkUGFyZW50cyIsImh0bWwiLCJ0ZCIsImNhcHRpb24iLCJjb2wiLCJ0aCIsImRkIiwiZHQiLCJmaWdjYXB0aW9uIiwic3VtbWFyeSIsImFyZWEiLCJrbm93bkludmFsaWRDaGlsZHJlbiIsInN2ZyIsImtub3duSW52YWxpZFBhcmVudHMiLCJmb3JtIiwibGkiLCJoMSIsImgzIiwiaDQiLCJoNSIsImg2IiwiRE9NTm9kZVRyYW5zZm9ybXMiLCJET01EaXJlY3RpdmVUcmFuc2Zvcm1zIiwiY2xvYWsiLCJiYXNlUmVzdWx0IiwiY2hlY2tEdXBsaWNhdGVkVmFsdWUiLCJkaXJlY3RpdmVUb1VzZSIsImlzSW52YWxpZFR5cGUiLCJoYXNEeW5hbWljS2V5VkJpbmQiLCJoYW5kbGVyRXhwIiwia2V5TW9kaWZpZXJzIiwibm9uS2V5TW9kaWZpZXJzIiwiZXZlbnRPcHRpb25Nb2RpZmllcnMiLCJyZXNvbHZlTW9kaWZpZXJzIiwibW9kaWZpZXJQb3N0Zml4Iiwic2hvdyIsImNvbXBpbGVDYWNoZSIsImNvbXBpbGVUb0Z1bmN0aW9uIiwiZ2VuQ2FjaGVLZXkiLCJjdXN0b21FbGVtZW50cyIsImNvbXBpbGUiLCJhc1dhcm5pbmciLCJjb2RlRnJhbWUiLCJsaW5lcyIsIm5ld2xpbmVTZXF1ZW5jZXMiLCJpZHgiLCJsaW5lTGVuZ3RoIiwibmV3TGluZVNlcUxlbmd0aCIsInBhZCIsImdlbmVyYXRlQ29kZUZyYW1lIiwiQmUiLCJzZSIsIlplIiwiQiIsIloiLCJsZSIsImVlIiwiQWUiLCJGIiwiRGUiLCJ0aHJvdyIsIkZlIiwidmFsdWVPZiIsInBlIiwiTiIsIklOSVRJQUxJWkVEIiwiTE9BRElORyIsIlNVQ0NFU1MiLCJGQUlMVVJFIiwiYXBpS2V5IiwiYXV0aFJlZmVycmVyUG9saWN5IiwiY2hhbm5lbCIsImNsaWVudCIsImxhbmd1YWdlIiwibGlicmFyaWVzIiwibWFwSWRzIiwicmVnaW9uIiwiZXJyb3JzIiwiZmFpbGVkIiwiY3JlYXRlVXJsIiwiZGVsZXRlU2NyaXB0IiwiZ2V0RWxlbWVudEJ5SWQiLCJsb2FkUHJvbWlzZSIsImxvYWRDYWxsYmFjayIsImdvb2dsZSIsImltcG9ydExpYnJhcnkiLCJleGVjdXRlIiwibWFwcyIsInNldFNjcmlwdCIsIk8iLCJNIiwiRSIsIkVycm9yRXZlbnQiLCJsb2FkRXJyb3JDYWxsYmFjayIsIm9uZXJyb3JFdmVudCIsInJlc2V0SWZSZXRyeWluZ0ZhaWxlZCIsInBvdyIsImZlIiwibWUiLCJ6ZSIsImFwaVByb21pc2UiLCJiYWNrZ3JvdW5kQ29sb3IiLCJjbGlja2FibGVJY29ucyIsImNvbnRyb2xTaXplIiwiZGlzYWJsZURlZmF1bHRVaSIsImRpc2FibGVEb3VibGVDbGlja1pvb20iLCJkcmFnZ2FibGUiLCJkcmFnZ2FibGVDdXJzb3IiLCJkcmFnZ2luZ0N1cnNvciIsImZ1bGxzY3JlZW5Db250cm9sIiwiZnVsbHNjcmVlbkNvbnRyb2xQb3NpdGlvbiIsImdlc3R1cmVIYW5kbGluZyIsImhlYWRpbmciLCJpc0ZyYWN0aW9uYWxab29tRW5hYmxlZCIsImtleWJvYXJkU2hvcnRjdXRzIiwibWFwVHlwZUNvbnRyb2wiLCJtYXBUeXBlQ29udHJvbE9wdGlvbnMiLCJtYXBUeXBlSWQiLCJtYXBJZCIsIm1heFpvb20iLCJtaW5ab29tIiwibm9DbGVhciIsInBhbkNvbnRyb2wiLCJwYW5Db250cm9sUG9zaXRpb24iLCJyZXN0cmljdGlvbiIsInJvdGF0ZUNvbnRyb2wiLCJyb3RhdGVDb250cm9sUG9zaXRpb24iLCJzY2FsZUNvbnRyb2wiLCJzY2FsZUNvbnRyb2xTdHlsZSIsInNjcm9sbHdoZWVsIiwic3RyZWV0VmlldyIsInN0cmVldFZpZXdDb250cm9sIiwic3RyZWV0Vmlld0NvbnRyb2xQb3NpdGlvbiIsInRpbHQiLCJ6b29tQ29udHJvbCIsInpvb21Db250cm9sUG9zaXRpb24iLCJDb250cm9sUG9zaXRpb24iLCJzY2FsZUNvbnRyb2xPcHRpb25zIiwicGFuQ29udHJvbE9wdGlvbnMiLCJ6b29tQ29udHJvbE9wdGlvbnMiLCJyb3RhdGVDb250cm9sT3B0aW9ucyIsInN0cmVldFZpZXdDb250cm9sT3B0aW9ucyIsImZ1bGxzY3JlZW5Db250cm9sT3B0aW9ucyIsImRpc2FibGVEZWZhdWx0VUkiLCJhZGRMaXN0ZW5lck9uY2UiLCJPdmVybGF5VmlldyIsImVsZW1lbnQiLCJzZXRNYXAiLCJnZXRQb3NpdGlvbiIsIkxhdExuZyIsImdldFZpc2libGUiLCJ2aXNpYmlsaXR5Iiwib3BhY2l0eSIsIm9uQWRkIiwiZ2V0UGFuZXMiLCJvdmVybGF5TW91c2VUYXJnZXQiLCJkcmF3IiwiZ2V0UHJvamVjdGlvbiIsImZyb21MYXRMbmdUb0RpdlBpeGVsIiwiYW5jaG9yUG9pbnQiLCJvZmZzZXRYIiwieSIsIm9mZnNldFkiLCJ6SW5kZXgiLCJvblJlbW92ZSIsInNldE9wdGlvbnMiLCJWZSIsImFkZExpc3RlbmVyIiwiUyIsInNldFpvb20iLCJwYW5UbyIsImNsZWFySW5zdGFuY2VMaXN0ZW5lcnMiLCJtYXBSZWYiLCJyZWFkeSIsImFwaSIsIm1hcFRpbGVzTG9hZGVkIiwidGUiLCJHZSIsIkV0IiwiV2UiLCJLZSIsIkEiLCJnZSIsIlB0IiwicGluT3B0aW9ucyIsIm1hcmtlciIsIkFkdmFuY2VkTWFya2VyRWxlbWVudCIsIlBpbkVsZW1lbnQiLCJyZW1vdmVNYXJrZXIiLCJhZGRNYXJrZXIiLCJWIiwiWWUiLCJKZSIsInZlIiwiTHQiLCJTdCIsInBvbHlsaW5lIiwieHQiLCJwb2x5Z29uIiwieWUiLCJBdCIsInJlY3RhbmdsZSIsIndlIiwiSXQiLCJjaXJjbGUiLCJYZSIsImNvbnRyb2xzIiwicmVtb3ZlQXQiLCJjb250cm9sUmVmIiwiUWUiLCJUdCIsIl9lIiwiaW5mb1dpbmRvdyIsImluZm9XaW5kb3dSZWYiLCJoYXNTbG90Q29udGVudCIsInN0IiwiJHQiLCJrZSIsIkludDhBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwidWUiLCJudW1JdGVtcyIsIm5vZGVTaXplIiwiQXJyYXlUeXBlIiwiSW5kZXhBcnJheVR5cGUiLCJCWVRFU19QRVJfRUxFTUVOVCIsImNvb3JkcyIsIl9wb3MiLCJfZmluaXNoZWQiLCJpZSIsIndpdGhpbiIsIkNlIiwiSWUiLCJsb2ciLCJzcXJ0IiwiRyIsIm5lIiwibnQiLCJtaW5Qb2ludHMiLCJyYWRpdXMiLCJleHRlbnQiLCJnZW5lcmF0ZUlkIiwiYmUiLCJmcm91bmQiLCIkZSIsInRyZWVzIiwic3RyaWRlIiwiY2x1c3RlclByb3BzIiwicG9pbnRzIiwiZ2VvbWV0cnkiLCJjb29yZGluYXRlcyIsIksiLCJZIiwiX2NyZWF0ZVRyZWUiLCJfY2x1c3RlciIsImdldENsdXN0ZXJzIiwiX2xpbWl0Wm9vbSIsIk1lIiwiZ2V0Q2hpbGRyZW4iLCJfZ2V0T3JpZ2luSWQiLCJfZ2V0T3JpZ2luWm9vbSIsImdldExlYXZlcyIsIl9hcHBlbmRMZWF2ZXMiLCJnZXRUaWxlIiwiZmVhdHVyZXMiLCJfYWRkVGlsZUZlYXR1cmVzIiwiZ2V0Q2x1c3RlckV4cGFuc2lvblpvb20iLCJjbHVzdGVyX2lkIiwiY2x1c3RlciIsInBvaW50X2NvdW50IiwiUmUiLCJ0YWdzIiwiX21hcCIsIm90IiwiaXQiLCJwb2ludF9jb3VudF9hYmJyZXZpYXRlZCIsInNpbiIsIlBJIiwiYXRhbiIsImRlIiwiQyIsImlzQWR2YW5jZWRNYXJrZXJBdmFpbGFibGUiLCJnZXRNYXBDYXBhYmlsaXRpZXMiLCJpc0FkdmFuY2VkTWFya2Vyc0F2YWlsYWJsZSIsImlzQWR2YW5jZWRNYXJrZXIiLCJXIiwibWFya2VycyIsIl9wb3NpdGlvbiIsImJvdW5kcyIsIkxhdExuZ0JvdW5kcyIsImdldENlbnRlciIsImF0IiwiamUiLCJnZXRCb3VuZHMiLCJjb250YWlucyIsIm5vcnRoRWFzdCIsInNvdXRoV2VzdCIsImx0IiwiY3QiLCJPZSIsImdldE5vcnRoRWFzdCIsImdldFNvdXRoV2VzdCIsImZyb21EaXZQaXhlbFRvTGF0TG5nIiwicWUiLCJodCIsInZpZXdwb3J0UGFkZGluZyIsImNhbGN1bGF0ZSIsIm1hcENhbnZhc1Byb2plY3Rpb24iLCJnZXRab29tIiwiY2x1c3RlcnMiLCJjaGFuZ2VkIiwicHQiLCJzdXBlckNsdXN0ZXIiLCJ0cmFuc2Zvcm1DbHVzdGVyIiwiZnQiLCJ2aWV3Iiwic3VtIiwibWVhbiIsImd0IiwiTUFYX1pJTkRFWCIsImZpcnN0RWxlbWVudENoaWxkIiwiaWNvbiIsIlBvaW50IiwiaGUiLCJ2dCIsIkQiLCJDTFVTVEVSSU5HX0JFR0lOIiwiQ0xVU1RFUklOR19FTkQiLCJDTFVTVEVSX0NMSUNLIiwieXQiLCJmaXRCb3VuZHMiLCJ3dCIsImFsZ29yaXRobU9wdGlvbnMiLCJhbGdvcml0aG0iLCJvbkNsdXN0ZXJDbGljayIsImFkZE1hcmtlcnMiLCJyZW1vdmVNYXJrZXJzIiwiY2xlYXJNYXJrZXJzIiwiZ2V0TWFwIiwicmVuZGVyQ2x1c3RlcnMiLCJpZGxlTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsIkVlIiwiUnQiLCJtYXJrZXJDbHVzdGVyIiwiX3QiLCJjdXN0b21NYXJrZXIiLCJjdXN0b21NYXJrZXJSZWYiLCJrdCIsImp0IiwiY3Vyc29yIiwicXQiLCJzdHJ1Y3R1cmVkQ2xvbmUiLCJNVkNBcnJheSIsInZpc3VhbGl6YXRpb24iLCJIZWF0bWFwTGF5ZXIiLCJoZWF0bWFwTGF5ZXIiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsIkFwcFNpbmdsZUd1aWRlIl0sInNvdXJjZVJvb3QiOiIifQ==